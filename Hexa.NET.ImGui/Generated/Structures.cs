// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGuiNET
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImDrawChannel")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawChannel
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_CmdBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawCmd")]
		public ImVectorImDrawCmd CmdBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_IdxBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawIdx")]
		public ImVectorImDrawIdx IdxBuffer;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImDrawCmd")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImDrawCmd
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImDrawCmd*")]
		public unsafe ImDrawCmd* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImDrawCmd")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawCmd
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ClipRect")]
		[NativeName(NativeNameType.Type, "ImVec4")]
		public Vector4 ClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureId")]
		[NativeName(NativeNameType.Type, "ImTextureID")]
		public ImTextureID TextureId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "VtxOffset")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint VtxOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IdxOffset")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint IdxOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ElemCount")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint ElemCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "UserCallback")]
		[NativeName(NativeNameType.Type, "ImDrawCallback")]
		public unsafe void* UserCallback;
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "UserCallbackData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserCallbackData;




		[NativeName(NativeNameType.Func, "ImDrawCmd_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImDrawCmd* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawCmd_GetTexID")]
		[return: NativeName(NativeNameType.Type, "ImTextureID")]
		public unsafe ImTextureID GetTexID()
		{
			fixed (ImDrawCmd* @this = &this)
			{
				ImTextureID ret = ImGui.GetTexIDNative(@this);
				return ret;
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImDrawList")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawList
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CmdBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawCmd")]
		public ImVectorImDrawCmd CmdBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IdxBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawIdx")]
		public ImVectorImDrawIdx IdxBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "VtxBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawVert")]
		public ImVectorImDrawVert VtxBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImDrawListFlags")]
		public ImDrawListFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_VtxCurrentIdx")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint VtxCurrentIdx;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_Data")]
		[NativeName(NativeNameType.Type, "ImDrawListSharedData*")]
		public unsafe ImDrawListSharedData* Data;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_OwnerName")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* OwnerName;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_VtxWritePtr")]
		[NativeName(NativeNameType.Type, "ImDrawVert*")]
		public unsafe ImDrawVert* VtxWritePtr;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_IdxWritePtr")]
		[NativeName(NativeNameType.Type, "ImDrawIdx*")]
		public unsafe ushort* IdxWritePtr;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_ClipRectStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImVec4")]
		public ImVectorImVec4 ClipRectStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_TextureIdStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImTextureID")]
		public ImVectorImTextureID TextureIdStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_Path")]
		[NativeName(NativeNameType.Type, "ImVector_ImVec2")]
		public ImVectorImVec2 Path;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_CmdHeader")]
		[NativeName(NativeNameType.Type, "ImDrawCmdHeader")]
		public ImDrawCmdHeader CmdHeader;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_Splitter")]
		[NativeName(NativeNameType.Type, "ImDrawListSplitter")]
		public ImDrawListSplitter Splitter;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_FringeScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float FringeScale;




		[NativeName(NativeNameType.Func, "ImDrawList__CalcCircleAutoSegmentCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int _CalcCircleAutoSegmentCount([NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius)
		{
			fixed (ImDrawList* @this = &this)
			{
				int ret = ImGui._CalcCircleAutoSegmentCountNative(@this, radius);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList__ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void _ClearFreeMemory()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui._ClearFreeMemoryNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList__OnChangedClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void _OnChangedClipRect()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui._OnChangedClipRectNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList__OnChangedTextureID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void _OnChangedTextureID()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui._OnChangedTextureIDNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList__OnChangedVtxOffset")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void _OnChangedVtxOffset()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui._OnChangedVtxOffsetNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList__PathArcToFastEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void _PathArcToFastEx([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "a_min_sample")] [NativeName(NativeNameType.Type, "int")] int aMinSample, [NativeName(NativeNameType.Param, "a_max_sample")] [NativeName(NativeNameType.Type, "int")] int aMaxSample, [NativeName(NativeNameType.Param, "a_step")] [NativeName(NativeNameType.Type, "int")] int aStep)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui._PathArcToFastExNative(@this, center, radius, aMinSample, aMaxSample, aStep);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList__PathArcToN")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void _PathArcToN([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "a_min")] [NativeName(NativeNameType.Type, "float")] float aMin, [NativeName(NativeNameType.Param, "a_max")] [NativeName(NativeNameType.Type, "float")] float aMax, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui._PathArcToNNative(@this, center, radius, aMin, aMax, numSegments);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList__PopUnusedDrawCmd")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void _PopUnusedDrawCmd()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui._PopUnusedDrawCmdNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList__ResetForNewFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void _ResetForNewFrame()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui._ResetForNewFrameNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList__TryMergeDrawCmds")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void _TryMergeDrawCmds()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui._TryMergeDrawCmdsNative(@this);
			}
		}

		/// <summary>		/// Cubic Bezier (4 control points)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddBezierCubic")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddBezierCubic([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddBezierCubicNative(@this, p1, p2, p3, p4, col, thickness, numSegments);
			}
		}

		/// <summary>		/// Cubic Bezier (4 control points)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddBezierCubic")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddBezierCubic([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddBezierCubicNative(@this, p1, p2, p3, p4, col, thickness, (int)(0));
			}
		}

		/// <summary>		/// Quadratic Bezier (3 control points)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddBezierQuadratic")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddBezierQuadratic([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddBezierQuadraticNative(@this, p1, p2, p3, col, thickness, numSegments);
			}
		}

		/// <summary>		/// Quadratic Bezier (3 control points)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddBezierQuadratic")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddBezierQuadratic([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddBezierQuadraticNative(@this, p1, p2, p3, col, thickness, (int)(0));
			}
		}

		/// <summary>		/// Your rendering function must check for 'UserCallback' in ImDrawCmd and call the function instead of rendering triangles.		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddCallback")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddCallback([NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "ImDrawCallback")] ImDrawCallback callback, [NativeName(NativeNameType.Param, "callback_data")] [NativeName(NativeNameType.Type, "void*")] void* callbackData)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddCallbackNative(@this, callback, callbackData);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddCircle([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddCircleNative(@this, center, radius, col, numSegments, thickness);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddCircle([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddCircleNative(@this, center, radius, col, numSegments, (float)(1.0f));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddCircle([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddCircleNative(@this, center, radius, col, (int)(0), (float)(1.0f));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddCircle([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddCircleNative(@this, center, radius, col, (int)(0), thickness);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddCircleFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddCircleFilled([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddCircleFilledNative(@this, center, radius, col, numSegments);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddCircleFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddCircleFilled([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddCircleFilledNative(@this, center, radius, col, (int)(0));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddConvexPolyFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddConvexPolyFilled([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* points, [NativeName(NativeNameType.Param, "num_points")] [NativeName(NativeNameType.Type, "int")] int numPoints, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddConvexPolyFilledNative(@this, points, numPoints, col);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddConvexPolyFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddConvexPolyFilled([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 points, [NativeName(NativeNameType.Param, "num_points")] [NativeName(NativeNameType.Type, "int")] int numPoints, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (Vector2* ppoints = &points)
				{
					ImGui.AddConvexPolyFilledNative(@this, (Vector2*)ppoints, numPoints, col);
				}
			}
		}

		/// <summary>		/// This is useful if you need to forcefully create a new draw call (to allow for dependent rendering  blending). Otherwise primitives are merged into the same draw-call as much as possible		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddDrawCmd")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddDrawCmd()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddDrawCmdNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImage([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "uv_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvMin, [NativeName(NativeNameType.Param, "uv_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageNative(@this, userTextureId, pMin, pMax, uvMin, uvMax, col);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImage([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "uv_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvMin, [NativeName(NativeNameType.Param, "uv_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvMax)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageNative(@this, userTextureId, pMin, pMax, uvMin, uvMax, (uint)(4294967295));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImage([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "uv_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvMin)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageNative(@this, userTextureId, pMin, pMax, uvMin, (Vector2)(new Vector2(1,1)), (uint)(4294967295));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImage([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageNative(@this, userTextureId, pMin, pMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (uint)(4294967295));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImage([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "uv_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvMin, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageNative(@this, userTextureId, pMin, pMax, uvMin, (Vector2)(new Vector2(1,1)), col);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImage([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageNative(@this, userTextureId, pMin, pMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), col);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageQuad([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "uv2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv2, [NativeName(NativeNameType.Param, "uv3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv3, [NativeName(NativeNameType.Param, "uv4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageQuadNative(@this, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, uv4, col);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageQuad([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "uv2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv2, [NativeName(NativeNameType.Param, "uv3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv3, [NativeName(NativeNameType.Param, "uv4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv4)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageQuadNative(@this, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, uv4, (uint)(4294967295));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageQuad([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "uv2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv2, [NativeName(NativeNameType.Param, "uv3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv3)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageQuadNative(@this, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, (Vector2)(new Vector2(0,1)), (uint)(4294967295));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageQuad([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "uv2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv2)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageQuadNative(@this, userTextureId, p1, p2, p3, p4, uv1, uv2, (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageQuad([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageQuadNative(@this, userTextureId, p1, p2, p3, p4, uv1, (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageQuad([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageQuadNative(@this, userTextureId, p1, p2, p3, p4, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageQuad([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "uv2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv2, [NativeName(NativeNameType.Param, "uv3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv3, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageQuadNative(@this, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, (Vector2)(new Vector2(0,1)), col);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageQuad([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "uv2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv2, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageQuadNative(@this, userTextureId, p1, p2, p3, p4, uv1, uv2, (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), col);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageQuad([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageQuadNative(@this, userTextureId, p1, p2, p3, p4, uv1, (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), col);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageQuad([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageQuadNative(@this, userTextureId, p1, p2, p3, p4, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), col);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageRounded")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageRounded([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "uv_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvMin, [NativeName(NativeNameType.Param, "uv_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageRoundedNative(@this, userTextureId, pMin, pMax, uvMin, uvMax, col, rounding, flags);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageRounded")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageRounded([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "uv_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvMin, [NativeName(NativeNameType.Param, "uv_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageRoundedNative(@this, userTextureId, pMin, pMax, uvMin, uvMax, col, rounding, (ImDrawFlags)(0));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddLine")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddLine([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddLineNative(@this, p1, p2, col, thickness);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddLine")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddLine([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddLineNative(@this, p1, p2, col, (float)(1.0f));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddNgon")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddNgon([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddNgonNative(@this, center, radius, col, numSegments, thickness);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddNgon")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddNgon([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddNgonNative(@this, center, radius, col, numSegments, (float)(1.0f));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddNgonFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddNgonFilled([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddNgonFilledNative(@this, center, radius, col, numSegments);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddPolyline")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddPolyline([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* points, [NativeName(NativeNameType.Param, "num_points")] [NativeName(NativeNameType.Type, "int")] int numPoints, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddPolylineNative(@this, points, numPoints, col, flags, thickness);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddPolyline")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddPolyline([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 points, [NativeName(NativeNameType.Param, "num_points")] [NativeName(NativeNameType.Type, "int")] int numPoints, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (Vector2* ppoints = &points)
				{
					ImGui.AddPolylineNative(@this, (Vector2*)ppoints, numPoints, col, flags, thickness);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddQuad([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddQuadNative(@this, p1, p2, p3, p4, col, thickness);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddQuad([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddQuadNative(@this, p1, p2, p3, p4, col, (float)(1.0f));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddQuadFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddQuadFilled([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddQuadFilledNative(@this, p1, p2, p3, p4, col);
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRect([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectNative(@this, pMin, pMax, col, rounding, flags, thickness);
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRect([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectNative(@this, pMin, pMax, col, rounding, flags, (float)(1.0f));
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRect([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectNative(@this, pMin, pMax, col, rounding, (ImDrawFlags)(0), (float)(1.0f));
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRect([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectNative(@this, pMin, pMax, col, (float)(0.0f), (ImDrawFlags)(0), (float)(1.0f));
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRect([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectNative(@this, pMin, pMax, col, (float)(0.0f), flags, (float)(1.0f));
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRect([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectNative(@this, pMin, pMax, col, rounding, (ImDrawFlags)(0), thickness);
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRect([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectNative(@this, pMin, pMax, col, (float)(0.0f), flags, thickness);
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRectFilled([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectFilledNative(@this, pMin, pMax, col, rounding, flags);
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRectFilled([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectFilledNative(@this, pMin, pMax, col, rounding, (ImDrawFlags)(0));
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRectFilled([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectFilledNative(@this, pMin, pMax, col, (float)(0.0f), (ImDrawFlags)(0));
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRectFilled([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectFilledNative(@this, pMin, pMax, col, (float)(0.0f), flags);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilledMultiColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRectFilledMultiColor([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col_upr_left")] [NativeName(NativeNameType.Type, "ImU32")] uint colUprLeft, [NativeName(NativeNameType.Param, "col_upr_right")] [NativeName(NativeNameType.Type, "ImU32")] uint colUprRight, [NativeName(NativeNameType.Param, "col_bot_right")] [NativeName(NativeNameType.Type, "ImU32")] uint colBotRight, [NativeName(NativeNameType.Param, "col_bot_left")] [NativeName(NativeNameType.Type, "ImU32")] uint colBotLeft)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectFilledMultiColorNative(@this, pMin, pMax, colUprLeft, colUprRight, colBotRight, colBotLeft);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTextNative(@this, pos, col, textBegin, textEnd);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTextNative(@this, pos, col, textBegin, (byte*)(default));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.AddTextNative(@this, pos, col, (byte*)ptextBegin, textEnd);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.AddTextNative(@this, pos, col, (byte*)ptextBegin, (byte*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, pos, col, pStr0, textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, pos, col, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.AddTextNative(@this, pos, col, textBegin, (byte*)ptextEnd);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, pos, col, textBegin, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.AddTextNative(@this, pos, col, (byte*)ptextBegin, (byte*)ptextEnd);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.AddTextNative(@this, pos, col, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, textEnd, wrapWidth, cpuFineClipRect);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, textEnd, wrapWidth, (Vector4*)(default));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, textEnd, (float)(0.0f), (Vector4*)(default));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, (byte*)(default), (float)(0.0f), (Vector4*)(default));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, (byte*)(default), wrapWidth, (Vector4*)(default));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, textEnd, (float)(0.0f), cpuFineClipRect);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, (byte*)(default), (float)(0.0f), cpuFineClipRect);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, (byte*)(default), wrapWidth, cpuFineClipRect);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, textEnd, wrapWidth, cpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, textEnd, wrapWidth, (Vector4*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, textEnd, (float)(0.0f), (Vector4*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)(default), (float)(0.0f), (Vector4*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)(default), wrapWidth, (Vector4*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, textEnd, (float)(0.0f), cpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)(default), (float)(0.0f), cpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)(default), wrapWidth, cpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, (byte*)ptextBegin, textEnd, wrapWidth, cpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, (byte*)ptextBegin, textEnd, wrapWidth, (Vector4*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, (byte*)ptextBegin, textEnd, (float)(0.0f), (Vector4*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), (float)(0.0f), (Vector4*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), wrapWidth, (Vector4*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, (byte*)ptextBegin, textEnd, (float)(0.0f), cpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), (float)(0.0f), cpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), wrapWidth, cpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, font, fontSize, pos, col, pStr0, textEnd, wrapWidth, cpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, font, fontSize, pos, col, pStr0, textEnd, wrapWidth, (Vector4*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, font, fontSize, pos, col, pStr0, textEnd, (float)(0.0f), (Vector4*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, font, fontSize, pos, col, pStr0, (byte*)(default), (float)(0.0f), (Vector4*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, font, fontSize, pos, col, pStr0, (byte*)(default), wrapWidth, (Vector4*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, font, fontSize, pos, col, pStr0, textEnd, (float)(0.0f), cpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, font, fontSize, pos, col, pStr0, (byte*)(default), (float)(0.0f), cpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, font, fontSize, pos, col, pStr0, (byte*)(default), wrapWidth, cpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, textEnd, wrapWidth, cpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, textEnd, wrapWidth, (Vector4*)(default));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, textEnd, (float)(0.0f), (Vector4*)(default));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), (float)(0.0f), (Vector4*)(default));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), wrapWidth, (Vector4*)(default));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, textEnd, (float)(0.0f), cpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), (float)(0.0f), cpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), wrapWidth, cpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, pStr0, textEnd, wrapWidth, cpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, pStr0, textEnd, wrapWidth, (Vector4*)(default));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, pStr0, textEnd, (float)(0.0f), (Vector4*)(default));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, pStr0, (byte*)(default), (float)(0.0f), (Vector4*)(default));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, pStr0, (byte*)(default), wrapWidth, (Vector4*)(default));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, pStr0, textEnd, (float)(0.0f), cpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, pStr0, (byte*)(default), (float)(0.0f), cpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, pStr0, (byte*)(default), wrapWidth, cpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, (byte*)ptextEnd, wrapWidth, cpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, (byte*)ptextEnd, (float)(0.0f), cpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, pStr0, wrapWidth, cpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, pStr0, wrapWidth, (Vector4*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, pStr0, (float)(0.0f), (Vector4*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, pStr0, (float)(0.0f), cpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)ptextEnd, wrapWidth, cpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)(default));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)(default));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)ptextEnd, (float)(0.0f), cpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textEnd != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, pStr0, wrapWidth, cpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textEnd != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, pStr0, wrapWidth, (Vector4*)(default));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textEnd != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, pStr0, (float)(0.0f), (Vector4*)(default));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textEnd != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, pStr0, (float)(0.0f), cpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.AddTextNative(@this, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, cpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.AddTextNative(@this, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)(default));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.AddTextNative(@this, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)(default));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.AddTextNative(@this, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), cpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.AddTextNative(@this, font, fontSize, pos, col, pStr0, pStr1, wrapWidth, cpuFineClipRect);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.AddTextNative(@this, font, fontSize, pos, col, pStr0, pStr1, wrapWidth, (Vector4*)(default));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.AddTextNative(@this, font, fontSize, pos, col, pStr0, pStr1, (float)(0.0f), (Vector4*)(default));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.AddTextNative(@this, font, fontSize, pos, col, pStr0, pStr1, (float)(0.0f), cpuFineClipRect);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (byte* ptextEnd = &textEnd)
						{
							ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, cpuFineClipRect);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (byte* ptextEnd = &textEnd)
						{
							ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)(default));
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (byte* ptextEnd = &textEnd)
						{
							ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)(default));
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (byte* ptextEnd = &textEnd)
						{
							ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), cpuFineClipRect);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (textEnd != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, pStr0, pStr1, wrapWidth, cpuFineClipRect);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (textEnd != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, pStr0, pStr1, wrapWidth, (Vector4*)(default));
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (textEnd != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, pStr0, pStr1, (float)(0.0f), (Vector4*)(default));
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (textEnd != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, pStr0, pStr1, (float)(0.0f), cpuFineClipRect);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, textEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, textEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, (byte*)(default), (float)(0.0f), (Vector4*)pcpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, (byte*)(default), wrapWidth, (Vector4*)pcpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, textEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, textEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)(default), (float)(0.0f), (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)(default), wrapWidth, (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, font, fontSize, pos, col, (byte*)ptextBegin, textEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, font, fontSize, pos, col, (byte*)ptextBegin, textEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), (float)(0.0f), (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), wrapWidth, (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, pStr0, textEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, pStr0, textEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, pStr0, (byte*)(default), (float)(0.0f), (Vector4*)pcpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, pStr0, (byte*)(default), wrapWidth, (Vector4*)pcpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
						{
							ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, textEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
						{
							ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, textEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
						{
							ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), (float)(0.0f), (Vector4*)pcpuFineClipRect);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
						{
							ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), wrapWidth, (Vector4*)pcpuFineClipRect);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, pStr0, textEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, pStr0, textEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, pStr0, (byte*)(default), (float)(0.0f), (Vector4*)pcpuFineClipRect);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, pStr0, (byte*)(default), wrapWidth, (Vector4*)pcpuFineClipRect);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, pStr0, wrapWidth, (Vector4*)pcpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, textBegin, pStr0, (float)(0.0f), (Vector4*)pcpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
						{
							ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
						{
							ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textEnd != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, pStr0, wrapWidth, (Vector4*)pcpuFineClipRect);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textEnd != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, textBegin, pStr0, (float)(0.0f), (Vector4*)pcpuFineClipRect);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
						{
							ImGui.AddTextNative(@this, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
						{
							ImGui.AddTextNative(@this, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, pStr0, pStr1, wrapWidth, (Vector4*)pcpuFineClipRect);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, font, fontSize, pos, col, pStr0, pStr1, (float)(0.0f), (Vector4*)pcpuFineClipRect);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (byte* ptextEnd = &textEnd)
						{
							fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
							{
								ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (byte* ptextEnd = &textEnd)
						{
							fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
							{
								ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (textEnd != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, pStr0, pStr1, wrapWidth, (Vector4*)pcpuFineClipRect);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (textEnd != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfont, fontSize, pos, col, pStr0, pStr1, (float)(0.0f), (Vector4*)pcpuFineClipRect);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddTriangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddTriangle([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTriangleNative(@this, p1, p2, p3, col, thickness);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddTriangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddTriangle([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTriangleNative(@this, p1, p2, p3, col, (float)(1.0f));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddTriangleFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddTriangleFilled([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTriangleFilledNative(@this, p1, p2, p3, col);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_ChannelsMerge")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ChannelsMerge()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.ChannelsMergeNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_ChannelsSetCurrent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ChannelsSetCurrent([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.ChannelsSetCurrentNative(@this, n);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_ChannelsSplit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ChannelsSplit([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.ChannelsSplitNative(@this, count);
			}
		}

		/// <summary>		/// Create a clone of the CmdBufferIdxBufferVtxBuffer.		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_CloneOutput")]
		[return: NativeName(NativeNameType.Type, "ImDrawList*")]
		public unsafe ImDrawList* CloneOutput()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImDrawList* ret = ImGui.CloneOutputNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathArcTo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathArcTo([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "a_min")] [NativeName(NativeNameType.Type, "float")] float aMin, [NativeName(NativeNameType.Param, "a_max")] [NativeName(NativeNameType.Type, "float")] float aMax, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathArcToNative(@this, center, radius, aMin, aMax, numSegments);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathArcTo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathArcTo([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "a_min")] [NativeName(NativeNameType.Type, "float")] float aMin, [NativeName(NativeNameType.Param, "a_max")] [NativeName(NativeNameType.Type, "float")] float aMax)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathArcToNative(@this, center, radius, aMin, aMax, (int)(0));
			}
		}

		/// <summary>		/// Use precomputed angles for a 12 steps circle		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_PathArcToFast")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathArcToFast([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "a_min_of_12")] [NativeName(NativeNameType.Type, "int")] int aMinOf12, [NativeName(NativeNameType.Param, "a_max_of_12")] [NativeName(NativeNameType.Type, "int")] int aMaxOf12)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathArcToFastNative(@this, center, radius, aMinOf12, aMaxOf12);
			}
		}

		/// <summary>		/// Cubic Bezier (4 control points)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_PathBezierCubicCurveTo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathBezierCubicCurveTo([NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathBezierCubicCurveToNative(@this, p2, p3, p4, numSegments);
			}
		}

		/// <summary>		/// Cubic Bezier (4 control points)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_PathBezierCubicCurveTo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathBezierCubicCurveTo([NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathBezierCubicCurveToNative(@this, p2, p3, p4, (int)(0));
			}
		}

		/// <summary>		/// Quadratic Bezier (3 control points)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_PathBezierQuadraticCurveTo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathBezierQuadraticCurveTo([NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathBezierQuadraticCurveToNative(@this, p2, p3, numSegments);
			}
		}

		/// <summary>		/// Quadratic Bezier (3 control points)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_PathBezierQuadraticCurveTo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathBezierQuadraticCurveTo([NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathBezierQuadraticCurveToNative(@this, p2, p3, (int)(0));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathClear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathClear()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathClearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathFillConvex")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathFillConvex([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathFillConvexNative(@this, col);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathLineTo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathLineTo([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathLineToNative(@this, pos);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathLineToMergeDuplicate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathLineToMergeDuplicate([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathLineToMergeDuplicateNative(@this, pos);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathRect([NativeName(NativeNameType.Param, "rect_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rectMin, [NativeName(NativeNameType.Param, "rect_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rectMax, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathRectNative(@this, rectMin, rectMax, rounding, flags);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathRect([NativeName(NativeNameType.Param, "rect_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rectMin, [NativeName(NativeNameType.Param, "rect_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rectMax, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathRectNative(@this, rectMin, rectMax, rounding, (ImDrawFlags)(0));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathRect([NativeName(NativeNameType.Param, "rect_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rectMin, [NativeName(NativeNameType.Param, "rect_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rectMax)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathRectNative(@this, rectMin, rectMax, (float)(0.0f), (ImDrawFlags)(0));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathRect([NativeName(NativeNameType.Param, "rect_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rectMin, [NativeName(NativeNameType.Param, "rect_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rectMax, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathRectNative(@this, rectMin, rectMax, (float)(0.0f), flags);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathStroke")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathStroke([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathStrokeNative(@this, col, flags, thickness);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathStroke")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathStroke([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathStrokeNative(@this, col, flags, (float)(1.0f));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathStroke")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathStroke([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathStrokeNative(@this, col, (ImDrawFlags)(0), (float)(1.0f));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathStroke")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathStroke([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathStrokeNative(@this, col, (ImDrawFlags)(0), thickness);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PopClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PopClipRect()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PopClipRectNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PopTextureID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PopTextureID()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PopTextureIDNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PrimQuadUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PrimQuadUV([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c, [NativeName(NativeNameType.Param, "d")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 d, [NativeName(NativeNameType.Param, "uv_a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvA, [NativeName(NativeNameType.Param, "uv_b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvB, [NativeName(NativeNameType.Param, "uv_c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvC, [NativeName(NativeNameType.Param, "uv_d")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvD, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PrimQuadUVNative(@this, a, b, c, d, uvA, uvB, uvC, uvD, col);
			}
		}

		/// <summary>		/// Axis aligned rectangle (composed of two triangles)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_PrimRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PrimRect([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PrimRectNative(@this, a, b, col);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PrimRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PrimRectUV([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "uv_a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvA, [NativeName(NativeNameType.Param, "uv_b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvB, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PrimRectUVNative(@this, a, b, uvA, uvB, col);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PrimReserve")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PrimReserve([NativeName(NativeNameType.Param, "idx_count")] [NativeName(NativeNameType.Type, "int")] int idxCount, [NativeName(NativeNameType.Param, "vtx_count")] [NativeName(NativeNameType.Type, "int")] int vtxCount)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PrimReserveNative(@this, idxCount, vtxCount);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PrimUnreserve")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PrimUnreserve([NativeName(NativeNameType.Param, "idx_count")] [NativeName(NativeNameType.Type, "int")] int idxCount, [NativeName(NativeNameType.Param, "vtx_count")] [NativeName(NativeNameType.Type, "int")] int vtxCount)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PrimUnreserveNative(@this, idxCount, vtxCount);
			}
		}

		/// <summary>		/// Write vertex with unique index		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_PrimVtx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PrimVtx([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PrimVtxNative(@this, pos, uv, col);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PrimWriteIdx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PrimWriteIdx([NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImDrawIdx")] ushort idx)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PrimWriteIdxNative(@this, idx);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PrimWriteVtx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PrimWriteVtx([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PrimWriteVtxNative(@this, pos, uv, col);
			}
		}

		/// <summary>		/// Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_PushClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PushClipRect([NativeName(NativeNameType.Param, "clip_rect_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 clipRectMin, [NativeName(NativeNameType.Param, "clip_rect_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 clipRectMax, [NativeName(NativeNameType.Param, "intersect_with_current_clip_rect")] [NativeName(NativeNameType.Type, "bool")] bool intersectWithCurrentClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PushClipRectNative(@this, clipRectMin, clipRectMax, intersectWithCurrentClipRect ? (byte)1 : (byte)0);
			}
		}

		/// <summary>		/// Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_PushClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PushClipRect([NativeName(NativeNameType.Param, "clip_rect_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 clipRectMin, [NativeName(NativeNameType.Param, "clip_rect_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 clipRectMax)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PushClipRectNative(@this, clipRectMin, clipRectMax, (byte)(0));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PushClipRectFullScreen")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PushClipRectFullScreen()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PushClipRectFullScreenNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PushTextureID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PushTextureID([NativeName(NativeNameType.Param, "texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID textureId)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PushTextureIDNative(@this, textureId);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImDrawIdx")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImDrawIdx
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImDrawIdx*")]
		public unsafe ushort* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImDrawVert")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImDrawVert
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImDrawVert*")]
		public unsafe ImDrawVert* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImDrawVert")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawVert
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "pos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Pos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "uv")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Uv;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "col")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint Col;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImDrawListSharedData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawListSharedData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexUvWhitePixel")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 TexUvWhitePixel;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Font")]
		[NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* Font;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float FontSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurveTessellationTol")]
		[NativeName(NativeNameType.Type, "float")]
		public float CurveTessellationTol;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CircleSegmentMaxError")]
		[NativeName(NativeNameType.Type, "float")]
		public float CircleSegmentMaxError;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ClipRectFullscreen")]
		[NativeName(NativeNameType.Type, "ImVec4")]
		public Vector4 ClipRectFullscreen;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InitialFlags")]
		[NativeName(NativeNameType.Type, "ImDrawListFlags")]
		public ImDrawListFlags InitialFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TempBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImVec2")]
		public ImVectorImVec2 TempBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ArcFastVtx")]
		[NativeName(NativeNameType.Type, "ImVec2[48]")]
		public Vector2 ArcFastVtx_0;
		public Vector2 ArcFastVtx_1;
		public Vector2 ArcFastVtx_2;
		public Vector2 ArcFastVtx_3;
		public Vector2 ArcFastVtx_4;
		public Vector2 ArcFastVtx_5;
		public Vector2 ArcFastVtx_6;
		public Vector2 ArcFastVtx_7;
		public Vector2 ArcFastVtx_8;
		public Vector2 ArcFastVtx_9;
		public Vector2 ArcFastVtx_10;
		public Vector2 ArcFastVtx_11;
		public Vector2 ArcFastVtx_12;
		public Vector2 ArcFastVtx_13;
		public Vector2 ArcFastVtx_14;
		public Vector2 ArcFastVtx_15;
		public Vector2 ArcFastVtx_16;
		public Vector2 ArcFastVtx_17;
		public Vector2 ArcFastVtx_18;
		public Vector2 ArcFastVtx_19;
		public Vector2 ArcFastVtx_20;
		public Vector2 ArcFastVtx_21;
		public Vector2 ArcFastVtx_22;
		public Vector2 ArcFastVtx_23;
		public Vector2 ArcFastVtx_24;
		public Vector2 ArcFastVtx_25;
		public Vector2 ArcFastVtx_26;
		public Vector2 ArcFastVtx_27;
		public Vector2 ArcFastVtx_28;
		public Vector2 ArcFastVtx_29;
		public Vector2 ArcFastVtx_30;
		public Vector2 ArcFastVtx_31;
		public Vector2 ArcFastVtx_32;
		public Vector2 ArcFastVtx_33;
		public Vector2 ArcFastVtx_34;
		public Vector2 ArcFastVtx_35;
		public Vector2 ArcFastVtx_36;
		public Vector2 ArcFastVtx_37;
		public Vector2 ArcFastVtx_38;
		public Vector2 ArcFastVtx_39;
		public Vector2 ArcFastVtx_40;
		public Vector2 ArcFastVtx_41;
		public Vector2 ArcFastVtx_42;
		public Vector2 ArcFastVtx_43;
		public Vector2 ArcFastVtx_44;
		public Vector2 ArcFastVtx_45;
		public Vector2 ArcFastVtx_46;
		public Vector2 ArcFastVtx_47;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ArcFastRadiusCutoff")]
		[NativeName(NativeNameType.Type, "float")]
		public float ArcFastRadiusCutoff;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CircleSegmentCounts")]
		[NativeName(NativeNameType.Type, "ImU8[64]")]
		public byte CircleSegmentCounts_0;
		public byte CircleSegmentCounts_1;
		public byte CircleSegmentCounts_2;
		public byte CircleSegmentCounts_3;
		public byte CircleSegmentCounts_4;
		public byte CircleSegmentCounts_5;
		public byte CircleSegmentCounts_6;
		public byte CircleSegmentCounts_7;
		public byte CircleSegmentCounts_8;
		public byte CircleSegmentCounts_9;
		public byte CircleSegmentCounts_10;
		public byte CircleSegmentCounts_11;
		public byte CircleSegmentCounts_12;
		public byte CircleSegmentCounts_13;
		public byte CircleSegmentCounts_14;
		public byte CircleSegmentCounts_15;
		public byte CircleSegmentCounts_16;
		public byte CircleSegmentCounts_17;
		public byte CircleSegmentCounts_18;
		public byte CircleSegmentCounts_19;
		public byte CircleSegmentCounts_20;
		public byte CircleSegmentCounts_21;
		public byte CircleSegmentCounts_22;
		public byte CircleSegmentCounts_23;
		public byte CircleSegmentCounts_24;
		public byte CircleSegmentCounts_25;
		public byte CircleSegmentCounts_26;
		public byte CircleSegmentCounts_27;
		public byte CircleSegmentCounts_28;
		public byte CircleSegmentCounts_29;
		public byte CircleSegmentCounts_30;
		public byte CircleSegmentCounts_31;
		public byte CircleSegmentCounts_32;
		public byte CircleSegmentCounts_33;
		public byte CircleSegmentCounts_34;
		public byte CircleSegmentCounts_35;
		public byte CircleSegmentCounts_36;
		public byte CircleSegmentCounts_37;
		public byte CircleSegmentCounts_38;
		public byte CircleSegmentCounts_39;
		public byte CircleSegmentCounts_40;
		public byte CircleSegmentCounts_41;
		public byte CircleSegmentCounts_42;
		public byte CircleSegmentCounts_43;
		public byte CircleSegmentCounts_44;
		public byte CircleSegmentCounts_45;
		public byte CircleSegmentCounts_46;
		public byte CircleSegmentCounts_47;
		public byte CircleSegmentCounts_48;
		public byte CircleSegmentCounts_49;
		public byte CircleSegmentCounts_50;
		public byte CircleSegmentCounts_51;
		public byte CircleSegmentCounts_52;
		public byte CircleSegmentCounts_53;
		public byte CircleSegmentCounts_54;
		public byte CircleSegmentCounts_55;
		public byte CircleSegmentCounts_56;
		public byte CircleSegmentCounts_57;
		public byte CircleSegmentCounts_58;
		public byte CircleSegmentCounts_59;
		public byte CircleSegmentCounts_60;
		public byte CircleSegmentCounts_61;
		public byte CircleSegmentCounts_62;
		public byte CircleSegmentCounts_63;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexUvLines")]
		[NativeName(NativeNameType.Type, "const ImVec4*")]
		public unsafe Vector4* TexUvLines;




		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Vector2> ArcFastVtx
		
		{
			get
			{
				fixed (Vector2* p = &this.ArcFastVtx_0)
				{
					return new Span<Vector2>(p, 48);
				}
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSharedData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImDrawListSharedData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawListSharedData_SetCircleTessellationMaxError")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetCircleTessellationMaxError([NativeName(NativeNameType.Param, "max_error")] [NativeName(NativeNameType.Type, "float")] float maxError)
		{
			fixed (ImDrawListSharedData* @this = &this)
			{
				ImGui.SetCircleTessellationMaxErrorNative(@this, maxError);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImFont")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFont
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IndexAdvanceX")]
		[NativeName(NativeNameType.Type, "ImVector_float")]
		public ImVectorFloat IndexAdvanceX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FallbackAdvanceX")]
		[NativeName(NativeNameType.Type, "float")]
		public float FallbackAdvanceX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float FontSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IndexLookup")]
		[NativeName(NativeNameType.Type, "ImVector_ImWchar")]
		public ImVectorImWchar IndexLookup;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Glyphs")]
		[NativeName(NativeNameType.Type, "ImVector_ImFontGlyph")]
		public ImVectorImFontGlyph Glyphs;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FallbackGlyph")]
		[NativeName(NativeNameType.Type, "const ImFontGlyph*")]
		public unsafe ImFontGlyph* FallbackGlyph;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ContainerAtlas")]
		[NativeName(NativeNameType.Type, "ImFontAtlas*")]
		public unsafe ImFontAtlas* ContainerAtlas;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigData")]
		[NativeName(NativeNameType.Type, "const ImFontConfig*")]
		public unsafe ImFontConfig* ConfigData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigDataCount")]
		[NativeName(NativeNameType.Type, "short")]
		public short ConfigDataCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FallbackChar")]
		[NativeName(NativeNameType.Type, "ImWchar")]
		public char FallbackChar;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EllipsisChar")]
		[NativeName(NativeNameType.Type, "ImWchar")]
		public char EllipsisChar;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EllipsisCharCount")]
		[NativeName(NativeNameType.Type, "short")]
		public short EllipsisCharCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EllipsisWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float EllipsisWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EllipsisCharStep")]
		[NativeName(NativeNameType.Type, "float")]
		public float EllipsisCharStep;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DirtyLookupTables")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DirtyLookupTables;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Scale")]
		[NativeName(NativeNameType.Type, "float")]
		public float Scale;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Ascent")]
		[NativeName(NativeNameType.Type, "float")]
		public float Ascent;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Descent")]
		[NativeName(NativeNameType.Type, "float")]
		public float Descent;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MetricsTotalSurface")]
		[NativeName(NativeNameType.Type, "int")]
		public int MetricsTotalSurface;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Used4kPagesMap")]
		[NativeName(NativeNameType.Type, "ImU8[2]")]
		public byte Used4kPagesMap_0;
		public byte Used4kPagesMap_1;




		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFont_AddGlyph")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddGlyph([NativeName(NativeNameType.Param, "src_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* srcCfg, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c, [NativeName(NativeNameType.Param, "x0")] [NativeName(NativeNameType.Type, "float")] float x0, [NativeName(NativeNameType.Param, "y0")] [NativeName(NativeNameType.Type, "float")] float y0, [NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "float")] float x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "float")] float y1, [NativeName(NativeNameType.Param, "u0")] [NativeName(NativeNameType.Type, "float")] float u0, [NativeName(NativeNameType.Param, "v0")] [NativeName(NativeNameType.Type, "float")] float v0, [NativeName(NativeNameType.Param, "u1")] [NativeName(NativeNameType.Type, "float")] float u1, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "float")] float v1, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX)
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.AddGlyphNative(@this, srcCfg, c, x0, y0, x1, y1, u0, v0, u1, v1, advanceX);
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_AddGlyph")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddGlyph([NativeName(NativeNameType.Param, "src_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig srcCfg, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c, [NativeName(NativeNameType.Param, "x0")] [NativeName(NativeNameType.Type, "float")] float x0, [NativeName(NativeNameType.Param, "y0")] [NativeName(NativeNameType.Type, "float")] float y0, [NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "float")] float x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "float")] float y1, [NativeName(NativeNameType.Param, "u0")] [NativeName(NativeNameType.Type, "float")] float u0, [NativeName(NativeNameType.Param, "v0")] [NativeName(NativeNameType.Type, "float")] float v0, [NativeName(NativeNameType.Param, "u1")] [NativeName(NativeNameType.Type, "float")] float u1, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "float")] float v1, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImFontConfig* psrcCfg = &srcCfg)
				{
					ImGui.AddGlyphNative(@this, (ImFontConfig*)psrcCfg, c, x0, y0, x1, y1, u0, v0, u1, v1, advanceX);
				}
			}
		}

		/// <summary>		/// Makes 'dst' characterglyph points to 'src' characterglyph. Currently needs to be called AFTER fonts have been built.		/// </summary>		[NativeName(NativeNameType.Func, "ImFont_AddRemapChar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRemapChar([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "ImWchar")] char dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "ImWchar")] char src, [NativeName(NativeNameType.Param, "overwrite_dst")] [NativeName(NativeNameType.Type, "bool")] bool overwriteDst)
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.AddRemapCharNative(@this, dst, src, overwriteDst ? (byte)1 : (byte)0);
			}
		}

		/// <summary>		/// Makes 'dst' characterglyph points to 'src' characterglyph. Currently needs to be called AFTER fonts have been built.		/// </summary>		[NativeName(NativeNameType.Func, "ImFont_AddRemapChar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRemapChar([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "ImWchar")] char dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "ImWchar")] char src)
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.AddRemapCharNative(@this, dst, src, (byte)(1));
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_BuildLookupTable")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void BuildLookupTable()
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.BuildLookupTableNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* CalcWordWrapPositionA([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				byte* ret = ImGui.CalcWordWrapPositionANative(@this, scale, text, textEnd, wrapWidth);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string CalcWordWrapPositionAS([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImGui.CalcWordWrapPositionANative(@this, scale, text, textEnd, wrapWidth));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* CalcWordWrapPositionA([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					byte* ret = ImGui.CalcWordWrapPositionANative(@this, scale, (byte*)ptext, textEnd, wrapWidth);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string CalcWordWrapPositionAS([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					string ret = Utils.DecodeStringUTF8(ImGui.CalcWordWrapPositionANative(@this, scale, (byte*)ptext, textEnd, wrapWidth));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* CalcWordWrapPositionA([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = ImGui.CalcWordWrapPositionANative(@this, scale, pStr0, textEnd, wrapWidth);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string CalcWordWrapPositionAS([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(ImGui.CalcWordWrapPositionANative(@this, scale, pStr0, textEnd, wrapWidth));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* CalcWordWrapPositionA([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					byte* ret = ImGui.CalcWordWrapPositionANative(@this, scale, text, (byte*)ptextEnd, wrapWidth);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string CalcWordWrapPositionAS([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					string ret = Utils.DecodeStringUTF8(ImGui.CalcWordWrapPositionANative(@this, scale, text, (byte*)ptextEnd, wrapWidth));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* CalcWordWrapPositionA([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = ImGui.CalcWordWrapPositionANative(@this, scale, text, pStr0, wrapWidth);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string CalcWordWrapPositionAS([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(ImGui.CalcWordWrapPositionANative(@this, scale, text, pStr0, wrapWidth));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* CalcWordWrapPositionA([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						byte* ret = ImGui.CalcWordWrapPositionANative(@this, scale, (byte*)ptext, (byte*)ptextEnd, wrapWidth);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string CalcWordWrapPositionAS([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						string ret = Utils.DecodeStringUTF8(ImGui.CalcWordWrapPositionANative(@this, scale, (byte*)ptext, (byte*)ptextEnd, wrapWidth));
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* CalcWordWrapPositionA([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* ret = ImGui.CalcWordWrapPositionANative(@this, scale, pStr0, pStr1, wrapWidth);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string CalcWordWrapPositionAS([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				string ret = Utils.DecodeStringUTF8(ImGui.CalcWordWrapPositionANative(@this, scale, pStr0, pStr1, wrapWidth));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_ClearOutputData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearOutputData()
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.ClearOutputDataNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_FindGlyph")]
		[return: NativeName(NativeNameType.Type, "const ImFontGlyph*")]
		public unsafe ImFontGlyph* FindGlyph([NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c)
		{
			fixed (ImFont* @this = &this)
			{
				ImFontGlyph* ret = ImGui.FindGlyphNative(@this, c);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_FindGlyphNoFallback")]
		[return: NativeName(NativeNameType.Type, "const ImFontGlyph*")]
		public unsafe ImFontGlyph* FindGlyphNoFallback([NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c)
		{
			fixed (ImFont* @this = &this)
			{
				ImFontGlyph* ret = ImGui.FindGlyphNoFallbackNative(@this, c);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_GetCharAdvance")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float GetCharAdvance([NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c)
		{
			fixed (ImFont* @this = &this)
			{
				float ret = ImGui.GetCharAdvanceNative(@this, c);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_GetDebugName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* GetDebugName()
		{
			fixed (ImFont* @this = &this)
			{
				byte* ret = ImGui.GetDebugNameNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_GetDebugName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string GetDebugNameS()
		{
			fixed (ImFont* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImGui.GetDebugNameNative(@this));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_GrowIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GrowIndex([NativeName(NativeNameType.Param, "new_size")] [NativeName(NativeNameType.Type, "int")] int newSize)
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.GrowIndexNative(@this, newSize);
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_IsGlyphRangeUnused")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsGlyphRangeUnused([NativeName(NativeNameType.Param, "c_begin")] [NativeName(NativeNameType.Type, "unsigned int")] uint cBegin, [NativeName(NativeNameType.Param, "c_last")] [NativeName(NativeNameType.Type, "unsigned int")] uint cLast)
		{
			fixed (ImFont* @this = &this)
			{
				byte ret = ImGui.IsGlyphRangeUnusedNative(@this, cBegin, cLast);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_IsLoaded")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsLoaded()
		{
			fixed (ImFont* @this = &this)
			{
				byte ret = ImGui.IsLoadedNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderChar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderChar([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c)
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.RenderCharNative(@this, drawList, size, pos, col, c);
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderChar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderChar([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGui.RenderCharNative(@this, (ImDrawList*)pdrawList, size, pos, col, c);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, textBegin, textEnd, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, textBegin, textEnd, wrapWidth, (byte)(0));
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, textBegin, textEnd, (float)(0.0f), (byte)(0));
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, textBegin, textEnd, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, textBegin, textEnd, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, textBegin, textEnd, wrapWidth, (byte)(0));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, textBegin, textEnd, (float)(0.0f), (byte)(0));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, textBegin, textEnd, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, (byte*)ptextBegin, textEnd, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, (byte*)ptextBegin, textEnd, wrapWidth, (byte)(0));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, (byte*)ptextBegin, textEnd, (float)(0.0f), (byte)(0));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, (byte*)ptextBegin, textEnd, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, pStr0, textEnd, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, pStr0, textEnd, wrapWidth, (byte)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, pStr0, textEnd, (float)(0.0f), (byte)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, pStr0, textEnd, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, (byte*)ptextBegin, textEnd, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, (byte*)ptextBegin, textEnd, wrapWidth, (byte)(0));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, (byte*)ptextBegin, textEnd, (float)(0.0f), (byte)(0));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, (byte*)ptextBegin, textEnd, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, pStr0, textEnd, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, pStr0, textEnd, wrapWidth, (byte)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, pStr0, textEnd, (float)(0.0f), (byte)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, pStr0, textEnd, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, textBegin, (byte*)ptextEnd, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, textBegin, (byte*)ptextEnd, wrapWidth, (byte)(0));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, textBegin, (byte*)ptextEnd, (float)(0.0f), (byte)(0));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, textBegin, (byte*)ptextEnd, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, textBegin, pStr0, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, textBegin, pStr0, wrapWidth, (byte)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, textBegin, pStr0, (float)(0.0f), (byte)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, textBegin, pStr0, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, textBegin, (byte*)ptextEnd, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, textBegin, (byte*)ptextEnd, wrapWidth, (byte)(0));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, textBegin, (byte*)ptextEnd, (float)(0.0f), (byte)(0));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, textBegin, (byte*)ptextEnd, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textEnd != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, textBegin, pStr0, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textEnd != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, textBegin, pStr0, wrapWidth, (byte)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textEnd != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, textBegin, pStr0, (float)(0.0f), (byte)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textEnd != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, textBegin, pStr0, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, (byte)(0));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), (byte)(0));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, pStr0, pStr1, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, pStr0, pStr1, wrapWidth, (byte)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, pStr0, pStr1, (float)(0.0f), (byte)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, size, pos, col, clipRect, pStr0, pStr1, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (byte* ptextEnd = &textEnd)
						{
							ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (byte* ptextEnd = &textEnd)
						{
							ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, (byte)(0));
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (byte* ptextEnd = &textEnd)
						{
							ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), (byte)(0));
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (byte* ptextEnd = &textEnd)
						{
							ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (textEnd != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, pStr0, pStr1, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (textEnd != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, pStr0, pStr1, wrapWidth, (byte)(0));
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (textEnd != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, pStr0, pStr1, (float)(0.0f), (byte)(0));
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (textEnd != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, size, pos, col, clipRect, pStr0, pStr1, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_SetGlyphVisible")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetGlyphVisible([NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c, [NativeName(NativeNameType.Param, "visible")] [NativeName(NativeNameType.Type, "bool")] bool visible)
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.SetGlyphVisibleNative(@this, c, visible ? (byte)1 : (byte)0);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_float")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorFloat
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "float*")]
		public unsafe float* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImWchar")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImWchar
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImWchar*")]
		public unsafe char* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImFontGlyph")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImFontGlyph
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImFontGlyph*")]
		public unsafe ImFontGlyph* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImFontGlyph")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontGlyph
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Colored")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Colored;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Visible")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Visible;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Codepoint")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Codepoint;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AdvanceX")]
		[NativeName(NativeNameType.Type, "float")]
		public float AdvanceX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "X0")]
		[NativeName(NativeNameType.Type, "float")]
		public float X0;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Y0")]
		[NativeName(NativeNameType.Type, "float")]
		public float Y0;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "X1")]
		[NativeName(NativeNameType.Type, "float")]
		public float X1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Y1")]
		[NativeName(NativeNameType.Type, "float")]
		public float Y1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "U0")]
		[NativeName(NativeNameType.Type, "float")]
		public float U0;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "V0")]
		[NativeName(NativeNameType.Type, "float")]
		public float V0;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "U1")]
		[NativeName(NativeNameType.Type, "float")]
		public float U1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "V1")]
		[NativeName(NativeNameType.Type, "float")]
		public float V1;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImFontAtlas")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontAtlas
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImFontAtlasFlags")]
		public ImFontAtlasFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexID")]
		[NativeName(NativeNameType.Type, "ImTextureID")]
		public ImTextureID TexID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexDesiredWidth")]
		[NativeName(NativeNameType.Type, "int")]
		public int TexDesiredWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexGlyphPadding")]
		[NativeName(NativeNameType.Type, "int")]
		public int TexGlyphPadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Locked")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Locked;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "UserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexReady")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte TexReady;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexPixelsUseColors")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte TexPixelsUseColors;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexPixelsAlpha8")]
		[NativeName(NativeNameType.Type, "unsigned char*")]
		public unsafe byte* TexPixelsAlpha8;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexPixelsRGBA32")]
		[NativeName(NativeNameType.Type, "unsigned int*")]
		public unsafe uint* TexPixelsRGBA32;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexWidth")]
		[NativeName(NativeNameType.Type, "int")]
		public int TexWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexHeight")]
		[NativeName(NativeNameType.Type, "int")]
		public int TexHeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexUvScale")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 TexUvScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexUvWhitePixel")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 TexUvWhitePixel;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Fonts")]
		[NativeName(NativeNameType.Type, "ImVector_ImFontPtr")]
		public ImVectorImFontPtr Fonts;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CustomRects")]
		[NativeName(NativeNameType.Type, "ImVector_ImFontAtlasCustomRect")]
		public ImVectorImFontAtlasCustomRect CustomRects;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigData")]
		[NativeName(NativeNameType.Type, "ImVector_ImFontConfig")]
		public ImVectorImFontConfig ConfigData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexUvLines")]
		[NativeName(NativeNameType.Type, "ImVec4[64]")]
		public Vector4 TexUvLines_0;
		public Vector4 TexUvLines_1;
		public Vector4 TexUvLines_2;
		public Vector4 TexUvLines_3;
		public Vector4 TexUvLines_4;
		public Vector4 TexUvLines_5;
		public Vector4 TexUvLines_6;
		public Vector4 TexUvLines_7;
		public Vector4 TexUvLines_8;
		public Vector4 TexUvLines_9;
		public Vector4 TexUvLines_10;
		public Vector4 TexUvLines_11;
		public Vector4 TexUvLines_12;
		public Vector4 TexUvLines_13;
		public Vector4 TexUvLines_14;
		public Vector4 TexUvLines_15;
		public Vector4 TexUvLines_16;
		public Vector4 TexUvLines_17;
		public Vector4 TexUvLines_18;
		public Vector4 TexUvLines_19;
		public Vector4 TexUvLines_20;
		public Vector4 TexUvLines_21;
		public Vector4 TexUvLines_22;
		public Vector4 TexUvLines_23;
		public Vector4 TexUvLines_24;
		public Vector4 TexUvLines_25;
		public Vector4 TexUvLines_26;
		public Vector4 TexUvLines_27;
		public Vector4 TexUvLines_28;
		public Vector4 TexUvLines_29;
		public Vector4 TexUvLines_30;
		public Vector4 TexUvLines_31;
		public Vector4 TexUvLines_32;
		public Vector4 TexUvLines_33;
		public Vector4 TexUvLines_34;
		public Vector4 TexUvLines_35;
		public Vector4 TexUvLines_36;
		public Vector4 TexUvLines_37;
		public Vector4 TexUvLines_38;
		public Vector4 TexUvLines_39;
		public Vector4 TexUvLines_40;
		public Vector4 TexUvLines_41;
		public Vector4 TexUvLines_42;
		public Vector4 TexUvLines_43;
		public Vector4 TexUvLines_44;
		public Vector4 TexUvLines_45;
		public Vector4 TexUvLines_46;
		public Vector4 TexUvLines_47;
		public Vector4 TexUvLines_48;
		public Vector4 TexUvLines_49;
		public Vector4 TexUvLines_50;
		public Vector4 TexUvLines_51;
		public Vector4 TexUvLines_52;
		public Vector4 TexUvLines_53;
		public Vector4 TexUvLines_54;
		public Vector4 TexUvLines_55;
		public Vector4 TexUvLines_56;
		public Vector4 TexUvLines_57;
		public Vector4 TexUvLines_58;
		public Vector4 TexUvLines_59;
		public Vector4 TexUvLines_60;
		public Vector4 TexUvLines_61;
		public Vector4 TexUvLines_62;
		public Vector4 TexUvLines_63;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontBuilderIO")]
		[NativeName(NativeNameType.Type, "const ImFontBuilderIO*")]
		public unsafe ImFontBuilderIO* FontBuilderIO;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontBuilderFlags")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint FontBuilderFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PackIdMouseCursors")]
		[NativeName(NativeNameType.Type, "int")]
		public int PackIdMouseCursors;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PackIdLines")]
		[NativeName(NativeNameType.Type, "int")]
		public int PackIdLines;




		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Vector4> TexUvLines
		
		{
			get
			{
				fixed (Vector4* p = &this.TexUvLines_0)
				{
					return new Span<Vector4>(p, 64);
				}
			}
		}
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int AddCustomRectFontGlyph([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 offset)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				int ret = ImGui.AddCustomRectFontGlyphNative(@this, font, id, width, height, advanceX, offset);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int AddCustomRectFontGlyph([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				int ret = ImGui.AddCustomRectFontGlyphNative(@this, font, id, width, height, advanceX, (Vector2)(new Vector2(0,0)));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int AddCustomRectFontGlyph([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 offset)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					int ret = ImGui.AddCustomRectFontGlyphNative(@this, (ImFont*)pfont, id, width, height, advanceX, offset);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int AddCustomRectFontGlyph([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					int ret = ImGui.AddCustomRectFontGlyphNative(@this, (ImFont*)pfont, id, width, height, advanceX, (Vector2)(new Vector2(0,0)));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectRegular")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int AddCustomRectRegular([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				int ret = ImGui.AddCustomRectRegularNative(@this, width, height);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFont")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFont([NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontNative(@this, fontCfg);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFont")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFont([NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontNative(@this, (ImFontConfig*)pfontCfg);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontDefault")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontDefault([NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontDefaultNative(@this, fontCfg);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontDefault")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontDefault()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontDefaultNative(@this, (ImFontConfig*)(default));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontDefault")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontDefault([NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontDefaultNative(@this, (ImFontConfig*)pfontCfg);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, filename, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, filename, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, filename, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, filename, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = &filename)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, fontCfg, glyphRanges);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = &filename)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, fontCfg, (char*)(default));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = &filename)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), (char*)(default));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = &filename)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), glyphRanges);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, fontCfg, glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, fontCfg, (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, (ImFontConfig*)(default), (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, (ImFontConfig*)(default), glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, filename, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, filename, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = &filename)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = &filename)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, filename, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, filename, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = &filename)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, fontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = &filename)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, fontCfg, (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, filename, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = &filename)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						fixed (char* pglyphRanges = &glyphRanges)
						{
							ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDataBase85, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDataBase85, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDataBase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDataBase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDataBase85 = &compressedFontDataBase85)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDataBase85, sizePixels, fontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDataBase85 = &compressedFontDataBase85)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDataBase85, sizePixels, fontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDataBase85 = &compressedFontDataBase85)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDataBase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDataBase85 = &compressedFontDataBase85)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDataBase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDataBase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDataBase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDataBase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, fontCfg, glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDataBase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDataBase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDataBase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, fontCfg, (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDataBase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDataBase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDataBase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, (ImFontConfig*)(default), (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDataBase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDataBase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDataBase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, (ImFontConfig*)(default), glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDataBase85, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDataBase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDataBase85 = &compressedFontDataBase85)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDataBase85, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDataBase85 = &compressedFontDataBase85)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDataBase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
						return ret;
					}
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDataBase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDataBase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDataBase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDataBase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDataBase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDataBase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDataBase85, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDataBase85, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDataBase85 = &compressedFontDataBase85)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDataBase85, sizePixels, fontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDataBase85 = &compressedFontDataBase85)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDataBase85, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDataBase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDataBase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDataBase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, fontCfg, (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDataBase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDataBase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDataBase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDataBase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDataBase85 = &compressedFontDataBase85)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						fixed (char* pglyphRanges = &glyphRanges)
						{
							ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDataBase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDataBase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDataBase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDataBase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontSize, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontSize, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontSize, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontSize, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontSize, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontSize, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontSize, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontSize, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontSize, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontSize, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontSize, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontSize, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontSize, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontSize, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Build pixels data. This is called automatically for you by the GetTexData*** functions.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_Build")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Build()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte ret = ImGui.BuildNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ImFontAtlasCustomRect* rect, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.CalcCustomRectUVNative(@this, rect, outUvMin, outUvMax);
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ref ImFontAtlasCustomRect rect, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontAtlasCustomRect* prect = &rect)
				{
					ImGui.CalcCustomRectUVNative(@this, (ImFontAtlasCustomRect*)prect, outUvMin, outUvMax);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ImFontAtlasCustomRect* rect, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvMin = &outUvMin)
				{
					ImGui.CalcCustomRectUVNative(@this, rect, (Vector2*)poutUvMin, outUvMax);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ref ImFontAtlasCustomRect rect, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontAtlasCustomRect* prect = &rect)
				{
					fixed (Vector2* poutUvMin = &outUvMin)
					{
						ImGui.CalcCustomRectUVNative(@this, (ImFontAtlasCustomRect*)prect, (Vector2*)poutUvMin, outUvMax);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ImFontAtlasCustomRect* rect, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvMax = &outUvMax)
				{
					ImGui.CalcCustomRectUVNative(@this, rect, outUvMin, (Vector2*)poutUvMax);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ref ImFontAtlasCustomRect rect, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontAtlasCustomRect* prect = &rect)
				{
					fixed (Vector2* poutUvMax = &outUvMax)
					{
						ImGui.CalcCustomRectUVNative(@this, (ImFontAtlasCustomRect*)prect, outUvMin, (Vector2*)poutUvMax);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ImFontAtlasCustomRect* rect, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvMin = &outUvMin)
				{
					fixed (Vector2* poutUvMax = &outUvMax)
					{
						ImGui.CalcCustomRectUVNative(@this, rect, (Vector2*)poutUvMin, (Vector2*)poutUvMax);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ref ImFontAtlasCustomRect rect, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontAtlasCustomRect* prect = &rect)
				{
					fixed (Vector2* poutUvMin = &outUvMin)
					{
						fixed (Vector2* poutUvMax = &outUvMax)
						{
							ImGui.CalcCustomRectUVNative(@this, (ImFontAtlasCustomRect*)prect, (Vector2*)poutUvMin, (Vector2*)poutUvMax);
						}
					}
				}
			}
		}

		/// <summary>		/// Clear all input and output.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		/// <summary>		/// Clear output font data (glyphs storage, UV coordinates).		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_ClearFonts")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearFonts()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.ClearFontsNative(@this);
			}
		}

		/// <summary>		/// Clear input data (all ImFontConfig structures including sizes, TTF data, glyph ranges, etc.) = all the data used to build the texture and fonts.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_ClearInputData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearInputData()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.ClearInputDataNative(@this);
			}
		}

		/// <summary>		/// Clear output texture data (CPU side). Saves RAM once the texture has been copied to graphics memory.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_ClearTexData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearTexData()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.ClearTexDataNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetCustomRectByIndex")]
		[return: NativeName(NativeNameType.Type, "ImFontAtlasCustomRect*")]
		public unsafe ImFontAtlasCustomRect* GetCustomRectByIndex([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "int")] int index)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFontAtlasCustomRect* ret = ImGui.GetCustomRectByIndexNative(@this, index);
				return ret;
			}
		}

		/// <summary>		/// Default + Half-Width + Japanese HiraganaKatakana + full set of about 21000 CJK Unified Ideographs		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesChineseFull")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesChineseFull()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesChineseFullNative(@this);
				return ret;
			}
		}

		/// <summary>		/// Default + Half-Width + Japanese HiraganaKatakana + set of 2500 CJK Unified Ideographs for common simplified Chinese		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesChineseSimplifiedCommon()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesChineseSimplifiedCommonNative(@this);
				return ret;
			}
		}

		/// <summary>		/// Default + about 400 Cyrillic characters		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesCyrillic")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesCyrillic()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesCyrillicNative(@this);
				return ret;
			}
		}

		/// <summary>		/// Basic Latin, Extended Latin		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesDefault")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesDefault()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesDefaultNative(@this);
				return ret;
			}
		}

		/// <summary>		/// Default + Greek and Coptic		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesGreek")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesGreek()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesGreekNative(@this);
				return ret;
			}
		}

		/// <summary>		/// Default + Hiragana, Katakana, Half-Width, Selection of 2999 Ideographs		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesJapanese")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesJapanese()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesJapaneseNative(@this);
				return ret;
			}
		}

		/// <summary>		/// Default + Korean characters		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesKorean")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesKorean()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesKoreanNative(@this);
				return ret;
			}
		}

		/// <summary>		/// Default + Thai characters		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesThai")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesThai()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesThaiNative(@this);
				return ret;
			}
		}

		/// <summary>		/// Default + Vietnamese characters		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesVietnamese")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesVietnamese()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesVietnameseNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, outSize, outUvBorder, outUvFill);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, outSize, outUvBorder, outUvFill);
					return ret != 0;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, (Vector2*)poutSize, outUvBorder, outUvFill);
					return ret != 0;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, outUvBorder, outUvFill);
						return ret != 0;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvBorder = &outUvBorder)
				{
					byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, outSize, (Vector2*)poutUvBorder, outUvFill);
					return ret != 0;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, outUvFill);
						return ret != 0;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill);
						return ret != 0;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvBorder = &outUvBorder)
						{
							byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill);
							return ret != 0;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvFill = &outUvFill)
				{
					byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, outSize, outUvBorder, (Vector2*)poutUvFill);
					return ret != 0;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, outSize, outUvBorder, (Vector2*)poutUvFill);
						return ret != 0;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill);
						return ret != 0;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvFill = &outUvFill)
						{
							byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill);
							return ret != 0;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvBorder = &outUvBorder)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill);
						return ret != 0;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						fixed (Vector2* poutUvFill = &outUvFill)
						{
							byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill);
							return ret != 0;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						fixed (Vector2* poutUvFill = &outUvFill)
						{
							byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill);
							return ret != 0;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvBorder = &outUvBorder)
						{
							fixed (Vector2* poutUvFill = &outUvFill)
							{
								byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.GetTexDataAsAlpha8Native(@this, outPixels, outWidth, outHeight, outBytesPerPixel);
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.GetTexDataAsAlpha8Native(@this, outPixels, outWidth, outHeight, (int*)(default));
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, outWidth, outHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, outWidth, outHeight, (int*)(default));
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, outPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, outPixels, (int*)poutWidth, outHeight, (int*)(default));
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, outPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, outPixels, outWidth, (int*)poutHeight, (int*)(default));
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, outPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
						}
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, outPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, outPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutHeight = &outHeight)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, outPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGui.GetTexDataAsAlpha8Native(@this, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							fixed (int* poutBytesPerPixel = &outBytesPerPixel)
							{
								ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
							}
						}
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.GetTexDataAsRGBA32Native(@this, outPixels, outWidth, outHeight, outBytesPerPixel);
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.GetTexDataAsRGBA32Native(@this, outPixels, outWidth, outHeight, (int*)(default));
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, outWidth, outHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, outWidth, outHeight, (int*)(default));
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, outPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, outPixels, (int*)poutWidth, outHeight, (int*)(default));
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, outPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, outPixels, outWidth, (int*)poutHeight, (int*)(default));
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, outPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
						}
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, outPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, outPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutHeight = &outHeight)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, outPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGui.GetTexDataAsRGBA32Native(@this, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							fixed (int* poutBytesPerPixel = &outBytesPerPixel)
							{
								ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Bit ambiguous: used to detect when user didn't build texture but effectively we should check TexID != 0 except that would be backend dependent...		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_IsBuilt")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsBuilt()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte ret = ImGui.IsBuiltNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_SetTexID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetTexID([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID id)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.SetTexIDNative(@this, id);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImFontPtr")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImFontPtr
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImFont**")]
		public unsafe ImFont** Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImFontAtlasCustomRect")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImFontAtlasCustomRect
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImFontAtlasCustomRect*")]
		public unsafe ImFontAtlasCustomRect* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImFontAtlasCustomRect")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontAtlasCustomRect
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "unsigned short")]
		public ushort Width;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Height")]
		[NativeName(NativeNameType.Type, "unsigned short")]
		public ushort Height;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "X")]
		[NativeName(NativeNameType.Type, "unsigned short")]
		public ushort X;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Y")]
		[NativeName(NativeNameType.Type, "unsigned short")]
		public ushort Y;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "GlyphID")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint GlyphID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "GlyphAdvanceX")]
		[NativeName(NativeNameType.Type, "float")]
		public float GlyphAdvanceX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "GlyphOffset")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 GlyphOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Font")]
		[NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* Font;




		[NativeName(NativeNameType.Func, "ImFontAtlasCustomRect_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImFontAtlasCustomRect* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlasCustomRect_IsPacked")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsPacked()
		{
			fixed (ImFontAtlasCustomRect* @this = &this)
			{
				byte ret = ImGui.IsPackedNative(@this);
				return ret != 0;
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImFontConfig")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImFontConfig
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImFontConfig*")]
		public unsafe ImFontConfig* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImFontConfig")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontConfig
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* FontData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontDataSize")]
		[NativeName(NativeNameType.Type, "int")]
		public int FontDataSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontDataOwnedByAtlas")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte FontDataOwnedByAtlas;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontNo")]
		[NativeName(NativeNameType.Type, "int")]
		public int FontNo;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SizePixels")]
		[NativeName(NativeNameType.Type, "float")]
		public float SizePixels;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OversampleH")]
		[NativeName(NativeNameType.Type, "int")]
		public int OversampleH;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OversampleV")]
		[NativeName(NativeNameType.Type, "int")]
		public int OversampleV;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PixelSnapH")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte PixelSnapH;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "GlyphExtraSpacing")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 GlyphExtraSpacing;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "GlyphOffset")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 GlyphOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "GlyphRanges")]
		[NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GlyphRanges;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "GlyphMinAdvanceX")]
		[NativeName(NativeNameType.Type, "float")]
		public float GlyphMinAdvanceX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "GlyphMaxAdvanceX")]
		[NativeName(NativeNameType.Type, "float")]
		public float GlyphMaxAdvanceX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MergeMode")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte MergeMode;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontBuilderFlags")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint FontBuilderFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RasterizerMultiply")]
		[NativeName(NativeNameType.Type, "float")]
		public float RasterizerMultiply;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EllipsisChar")]
		[NativeName(NativeNameType.Type, "ImWchar")]
		public char EllipsisChar;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "char[40]")]
		public byte Name_0;
		public byte Name_1;
		public byte Name_2;
		public byte Name_3;
		public byte Name_4;
		public byte Name_5;
		public byte Name_6;
		public byte Name_7;
		public byte Name_8;
		public byte Name_9;
		public byte Name_10;
		public byte Name_11;
		public byte Name_12;
		public byte Name_13;
		public byte Name_14;
		public byte Name_15;
		public byte Name_16;
		public byte Name_17;
		public byte Name_18;
		public byte Name_19;
		public byte Name_20;
		public byte Name_21;
		public byte Name_22;
		public byte Name_23;
		public byte Name_24;
		public byte Name_25;
		public byte Name_26;
		public byte Name_27;
		public byte Name_28;
		public byte Name_29;
		public byte Name_30;
		public byte Name_31;
		public byte Name_32;
		public byte Name_33;
		public byte Name_34;
		public byte Name_35;
		public byte Name_36;
		public byte Name_37;
		public byte Name_38;
		public byte Name_39;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DstFont")]
		[NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* DstFont;




		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontConfig_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImFontConfig* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImFontBuilderIO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontBuilderIO
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontBuilder_Build")]
		[NativeName(NativeNameType.Type, "bool (*)(ImFontAtlas* atlas)*")]
		public unsafe void* FontBuilderBuild;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImVec2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImVec2
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImVec2*")]
		public unsafe Vector2* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImVec4")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImVec4
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImVec4*")]
		public unsafe Vector4* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImTextureID")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImTextureID
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImTextureID*")]
		public unsafe ImTextureID* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImDrawCmdHeader")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawCmdHeader
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ClipRect")]
		[NativeName(NativeNameType.Type, "ImVec4")]
		public Vector4 ClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureId")]
		[NativeName(NativeNameType.Type, "ImTextureID")]
		public ImTextureID TextureId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "VtxOffset")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint VtxOffset;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImDrawListSplitter")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawListSplitter
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_Current")]
		[NativeName(NativeNameType.Type, "int")]
		public int Current;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_Count")]
		[NativeName(NativeNameType.Type, "int")]
		public int Count;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_Channels")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawChannel")]
		public ImVectorImDrawChannel Channels;




		/// <summary>		/// Do not clear Channels[] so our allocations are reused next frame		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawListSplitter_ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearFreeMemory()
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGui.ClearFreeMemoryNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawListSplitter_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Merge")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Merge([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGui.MergeNative(@this, drawList);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Merge")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Merge([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGui.MergeNative(@this, (ImDrawList*)pdrawList);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawListSplitter_SetCurrentChannel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetCurrentChannel([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "channel_idx")] [NativeName(NativeNameType.Type, "int")] int channelIdx)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGui.SetCurrentChannelNative(@this, drawList, channelIdx);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawListSplitter_SetCurrentChannel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetCurrentChannel([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "channel_idx")] [NativeName(NativeNameType.Type, "int")] int channelIdx)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGui.SetCurrentChannelNative(@this, (ImDrawList*)pdrawList, channelIdx);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Split")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Split([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGui.SplitNative(@this, drawList, count);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Split")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Split([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGui.SplitNative(@this, (ImDrawList*)pdrawList, count);
				}
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImDrawChannel")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImDrawChannel
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImDrawChannel*")]
		public unsafe ImDrawChannel* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImDrawData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Valid")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Valid;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CmdListsCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int CmdListsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TotalIdxCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int TotalIdxCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TotalVtxCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int TotalVtxCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CmdLists")]
		[NativeName(NativeNameType.Type, "ImDrawList**")]
		public unsafe ImDrawList** CmdLists;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 DisplayPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplaySize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 DisplaySize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FramebufferScale")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 FramebufferScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OwnerViewport")]
		[NativeName(NativeNameType.Type, "ImGuiViewport*")]
		public unsafe ImGuiViewport* OwnerViewport;




		/// <summary>		/// The ImDrawList are owned by ImGuiContext!		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawData_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImDrawData* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		/// <summary>		/// Helper to convert all buffers from indexed to non-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawData_DeIndexAllBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void DeIndexAllBuffers()
		{
			fixed (ImDrawData* @this = &this)
			{
				ImGui.DeIndexAllBuffersNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImDrawData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>		/// Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than Dear ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawData_ScaleClipRects")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ScaleClipRects([NativeName(NativeNameType.Param, "fb_scale")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 fbScale)
		{
			fixed (ImDrawData* @this = &this)
			{
				ImGui.ScaleClipRectsNative(@this, fbScale);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiViewport")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiViewport
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiViewportFlags")]
		public ImGuiViewportFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Pos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Pos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WorkPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WorkSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DpiScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float DpiScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ParentViewportId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ParentViewportId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawData")]
		[NativeName(NativeNameType.Type, "ImDrawData*")]
		public unsafe ImDrawData* DrawData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RendererUserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* RendererUserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformUserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PlatformUserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformHandle")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PlatformHandle;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformHandleRaw")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PlatformHandleRaw;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformWindowCreated")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte PlatformWindowCreated;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformRequestMove")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte PlatformRequestMove;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformRequestResize")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte PlatformRequestResize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformRequestClose")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte PlatformRequestClose;




		[NativeName(NativeNameType.Func, "ImGuiViewport_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiViewport* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImFontGlyphRangesBuilder")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontGlyphRangesBuilder
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "UsedChars")]
		[NativeName(NativeNameType.Type, "ImVector_ImU32")]
		public ImVectorImU32 UsedChars;




		/// <summary>		/// Add character		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddChar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddChar([NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				ImGui.AddCharNative(@this, c);
			}
		}

		/// <summary>		/// Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault()) to force add all of ASCIILatin+Ext		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddRanges")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRanges([NativeName(NativeNameType.Param, "ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* ranges)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				ImGui.AddRangesNative(@this, ranges);
			}
		}

		/// <summary>		/// Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault()) to force add all of ASCIILatin+Ext		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddRanges")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRanges([NativeName(NativeNameType.Param, "ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char ranges)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				fixed (char* pranges = &ranges)
				{
					ImGui.AddRangesNative(@this, (char*)pranges);
				}
			}
		}

		/// <summary>		/// Add string (each character of the UTF-8 string are added)		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				ImGui.AddTextNative(@this, text, textEnd);
			}
		}

		/// <summary>		/// Add string (each character of the UTF-8 string are added)		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				ImGui.AddTextNative(@this, text, (byte*)(default));
			}
		}

		/// <summary>		/// Add string (each character of the UTF-8 string are added)		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					ImGui.AddTextNative(@this, (byte*)ptext, textEnd);
				}
			}
		}

		/// <summary>		/// Add string (each character of the UTF-8 string are added)		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					ImGui.AddTextNative(@this, (byte*)ptext, (byte*)(default));
				}
			}
		}

		/// <summary>		/// Add string (each character of the UTF-8 string are added)		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, pStr0, textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>		/// Add string (each character of the UTF-8 string are added)		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>		/// Add string (each character of the UTF-8 string are added)		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.AddTextNative(@this, text, (byte*)ptextEnd);
				}
			}
		}

		/// <summary>		/// Add string (each character of the UTF-8 string are added)		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, text, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>		/// Add string (each character of the UTF-8 string are added)		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.AddTextNative(@this, (byte*)ptext, (byte*)ptextEnd);
					}
				}
			}
		}

		/// <summary>		/// Add string (each character of the UTF-8 string are added)		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.AddTextNative(@this, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>		/// Output new ranges		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_BuildRanges")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void BuildRanges([NativeName(NativeNameType.Param, "out_ranges")] [NativeName(NativeNameType.Type, "ImVector_ImWchar*")] ImVectorImWchar* outRanges)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				ImGui.BuildRangesNative(@this, outRanges);
			}
		}

		/// <summary>		/// Output new ranges		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_BuildRanges")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void BuildRanges([NativeName(NativeNameType.Param, "out_ranges")] [NativeName(NativeNameType.Type, "ImVector_ImWchar*")] ref ImVectorImWchar outRanges)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				fixed (ImVectorImWchar* poutRanges = &outRanges)
				{
					ImGui.BuildRangesNative(@this, (ImVectorImWchar*)poutRanges);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>		/// Get bit n in the array		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_GetBit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetBit([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "size_t")] nuint n)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				byte ret = ImGui.GetBitNative(@this, n);
				return ret != 0;
			}
		}

		/// <summary>		/// Set bit n in the array		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_SetBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetBit([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "size_t")] nuint n)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				ImGui.SetBitNative(@this, n);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImU32")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImU32
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImU32*")]
		public unsafe uint* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImColor")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImColor
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Value")]
		[NativeName(NativeNameType.Type, "ImVec4")]
		public Vector4 Value;




		[NativeName(NativeNameType.Func, "ImColor_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImColor* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImColor_HSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void HSV([NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "float")] float a)
		{
			fixed (ImColor* @this = &this)
			{
				ImGui.HSVNative(@this, h, s, v, a);
			}
		}

		[NativeName(NativeNameType.Func, "ImColor_HSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void HSV([NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v)
		{
			fixed (ImColor* @this = &this)
			{
				ImGui.HSVNative(@this, h, s, v, (float)(1.0f));
			}
		}

		[NativeName(NativeNameType.Func, "ImColor_SetHSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetHSV([NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "float")] float a)
		{
			fixed (ImColor* @this = &this)
			{
				ImGui.SetHSVNative(@this, h, s, v, a);
			}
		}

		[NativeName(NativeNameType.Func, "ImColor_SetHSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetHSV([NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v)
		{
			fixed (ImColor* @this = &this)
			{
				ImGui.SetHSVNative(@this, h, s, v, (float)(1.0f));
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiContext")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiContext
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Initialized")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Initialized;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontAtlasOwnedByContext")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte FontAtlasOwnedByContext;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IO")]
		[NativeName(NativeNameType.Type, "ImGuiIO")]
		public ImGuiIO IO;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformIO")]
		[NativeName(NativeNameType.Type, "ImGuiPlatformIO")]
		public ImGuiPlatformIO PlatformIO;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Style")]
		[NativeName(NativeNameType.Type, "ImGuiStyle")]
		public ImGuiStyle Style;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigFlagsCurrFrame")]
		[NativeName(NativeNameType.Type, "ImGuiConfigFlags")]
		public ImGuiConfigFlags ConfigFlagsCurrFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigFlagsLastFrame")]
		[NativeName(NativeNameType.Type, "ImGuiConfigFlags")]
		public ImGuiConfigFlags ConfigFlagsLastFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Font")]
		[NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* Font;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float FontSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontBaseSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float FontBaseSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawListSharedData")]
		[NativeName(NativeNameType.Type, "ImDrawListSharedData")]
		public ImDrawListSharedData DrawListSharedData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Time")]
		[NativeName(NativeNameType.Type, "double")]
		public double Time;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FrameCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int FrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FrameCountEnded")]
		[NativeName(NativeNameType.Type, "int")]
		public int FrameCountEnded;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FrameCountPlatformEnded")]
		[NativeName(NativeNameType.Type, "int")]
		public int FrameCountPlatformEnded;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FrameCountRendered")]
		[NativeName(NativeNameType.Type, "int")]
		public int FrameCountRendered;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WithinFrameScope")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WithinFrameScope;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WithinFrameScopeWithImplicitWindow")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WithinFrameScopeWithImplicitWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WithinEndChild")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WithinEndChild;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "GcCompactAll")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte GcCompactAll;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TestEngineHookItems")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte TestEngineHookItems;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TestEngine")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* TestEngine;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InputEventsQueue")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiInputEvent")]
		public ImVectorImGuiInputEvent InputEventsQueue;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InputEventsTrail")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiInputEvent")]
		public ImVectorImGuiInputEvent InputEventsTrail;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InputEventsNextMouseSource")]
		[NativeName(NativeNameType.Type, "ImGuiMouseSource")]
		public ImGuiMouseSource InputEventsNextMouseSource;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InputEventsNextEventId")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint InputEventsNextEventId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Windows")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr")]
		public ImVectorImGuiWindowPtr Windows;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowsFocusOrder")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr")]
		public ImVectorImGuiWindowPtr WindowsFocusOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowsTempSortBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr")]
		public ImVectorImGuiWindowPtr WindowsTempSortBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentWindowStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiWindowStackData")]
		public ImVectorImGuiWindowStackData CurrentWindowStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowsById")]
		[NativeName(NativeNameType.Type, "ImGuiStorage")]
		public ImGuiStorage WindowsById;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowsActiveCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int WindowsActiveCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowsHoverPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WindowsHoverPadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* CurrentWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* HoveredWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredWindowUnderMovingWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* HoveredWindowUnderMovingWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MovingWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* MovingWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WheelingWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* WheelingWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WheelingWindowRefMousePos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WheelingWindowRefMousePos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WheelingWindowStartFrame")]
		[NativeName(NativeNameType.Type, "int")]
		public int WheelingWindowStartFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WheelingWindowReleaseTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float WheelingWindowReleaseTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WheelingWindowWheelRemainder")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WheelingWindowWheelRemainder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WheelingAxisAvg")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WheelingAxisAvg;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugHookIdInfo")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int DebugHookIdInfo;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int HoveredId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredIdPreviousFrame")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int HoveredIdPreviousFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredIdAllowOverlap")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HoveredIdAllowOverlap;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredIdDisabled")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HoveredIdDisabled;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredIdTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float HoveredIdTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredIdNotActiveTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float HoveredIdNotActiveTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ActiveId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdIsAlive")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ActiveIdIsAlive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float ActiveIdTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdIsJustActivated")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdIsJustActivated;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdAllowOverlap")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdAllowOverlap;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdNoClearOnFocusLoss")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdNoClearOnFocusLoss;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdHasBeenPressedBefore")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdHasBeenPressedBefore;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdHasBeenEditedBefore")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdHasBeenEditedBefore;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdHasBeenEditedThisFrame")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdHasBeenEditedThisFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdClickOffset")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ActiveIdClickOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* ActiveIdWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdSource")]
		[NativeName(NativeNameType.Type, "ImGuiInputSource")]
		public ImGuiInputSource ActiveIdSource;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdMouseButton")]
		[NativeName(NativeNameType.Type, "int")]
		public int ActiveIdMouseButton;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdPreviousFrame")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ActiveIdPreviousFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdPreviousFrameIsAlive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdPreviousFrameIsAlive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdPreviousFrameHasBeenEditedBefore")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdPreviousFrameHasBeenEditedBefore;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdPreviousFrameWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* ActiveIdPreviousFrameWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastActiveId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int LastActiveId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastActiveIdTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float LastActiveIdTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "KeysOwnerData")]
		[NativeName(NativeNameType.Type, "ImGuiKeyOwnerData[140]")]
		public ImGuiKeyOwnerData KeysOwnerData_0;
		public ImGuiKeyOwnerData KeysOwnerData_1;
		public ImGuiKeyOwnerData KeysOwnerData_2;
		public ImGuiKeyOwnerData KeysOwnerData_3;
		public ImGuiKeyOwnerData KeysOwnerData_4;
		public ImGuiKeyOwnerData KeysOwnerData_5;
		public ImGuiKeyOwnerData KeysOwnerData_6;
		public ImGuiKeyOwnerData KeysOwnerData_7;
		public ImGuiKeyOwnerData KeysOwnerData_8;
		public ImGuiKeyOwnerData KeysOwnerData_9;
		public ImGuiKeyOwnerData KeysOwnerData_10;
		public ImGuiKeyOwnerData KeysOwnerData_11;
		public ImGuiKeyOwnerData KeysOwnerData_12;
		public ImGuiKeyOwnerData KeysOwnerData_13;
		public ImGuiKeyOwnerData KeysOwnerData_14;
		public ImGuiKeyOwnerData KeysOwnerData_15;
		public ImGuiKeyOwnerData KeysOwnerData_16;
		public ImGuiKeyOwnerData KeysOwnerData_17;
		public ImGuiKeyOwnerData KeysOwnerData_18;
		public ImGuiKeyOwnerData KeysOwnerData_19;
		public ImGuiKeyOwnerData KeysOwnerData_20;
		public ImGuiKeyOwnerData KeysOwnerData_21;
		public ImGuiKeyOwnerData KeysOwnerData_22;
		public ImGuiKeyOwnerData KeysOwnerData_23;
		public ImGuiKeyOwnerData KeysOwnerData_24;
		public ImGuiKeyOwnerData KeysOwnerData_25;
		public ImGuiKeyOwnerData KeysOwnerData_26;
		public ImGuiKeyOwnerData KeysOwnerData_27;
		public ImGuiKeyOwnerData KeysOwnerData_28;
		public ImGuiKeyOwnerData KeysOwnerData_29;
		public ImGuiKeyOwnerData KeysOwnerData_30;
		public ImGuiKeyOwnerData KeysOwnerData_31;
		public ImGuiKeyOwnerData KeysOwnerData_32;
		public ImGuiKeyOwnerData KeysOwnerData_33;
		public ImGuiKeyOwnerData KeysOwnerData_34;
		public ImGuiKeyOwnerData KeysOwnerData_35;
		public ImGuiKeyOwnerData KeysOwnerData_36;
		public ImGuiKeyOwnerData KeysOwnerData_37;
		public ImGuiKeyOwnerData KeysOwnerData_38;
		public ImGuiKeyOwnerData KeysOwnerData_39;
		public ImGuiKeyOwnerData KeysOwnerData_40;
		public ImGuiKeyOwnerData KeysOwnerData_41;
		public ImGuiKeyOwnerData KeysOwnerData_42;
		public ImGuiKeyOwnerData KeysOwnerData_43;
		public ImGuiKeyOwnerData KeysOwnerData_44;
		public ImGuiKeyOwnerData KeysOwnerData_45;
		public ImGuiKeyOwnerData KeysOwnerData_46;
		public ImGuiKeyOwnerData KeysOwnerData_47;
		public ImGuiKeyOwnerData KeysOwnerData_48;
		public ImGuiKeyOwnerData KeysOwnerData_49;
		public ImGuiKeyOwnerData KeysOwnerData_50;
		public ImGuiKeyOwnerData KeysOwnerData_51;
		public ImGuiKeyOwnerData KeysOwnerData_52;
		public ImGuiKeyOwnerData KeysOwnerData_53;
		public ImGuiKeyOwnerData KeysOwnerData_54;
		public ImGuiKeyOwnerData KeysOwnerData_55;
		public ImGuiKeyOwnerData KeysOwnerData_56;
		public ImGuiKeyOwnerData KeysOwnerData_57;
		public ImGuiKeyOwnerData KeysOwnerData_58;
		public ImGuiKeyOwnerData KeysOwnerData_59;
		public ImGuiKeyOwnerData KeysOwnerData_60;
		public ImGuiKeyOwnerData KeysOwnerData_61;
		public ImGuiKeyOwnerData KeysOwnerData_62;
		public ImGuiKeyOwnerData KeysOwnerData_63;
		public ImGuiKeyOwnerData KeysOwnerData_64;
		public ImGuiKeyOwnerData KeysOwnerData_65;
		public ImGuiKeyOwnerData KeysOwnerData_66;
		public ImGuiKeyOwnerData KeysOwnerData_67;
		public ImGuiKeyOwnerData KeysOwnerData_68;
		public ImGuiKeyOwnerData KeysOwnerData_69;
		public ImGuiKeyOwnerData KeysOwnerData_70;
		public ImGuiKeyOwnerData KeysOwnerData_71;
		public ImGuiKeyOwnerData KeysOwnerData_72;
		public ImGuiKeyOwnerData KeysOwnerData_73;
		public ImGuiKeyOwnerData KeysOwnerData_74;
		public ImGuiKeyOwnerData KeysOwnerData_75;
		public ImGuiKeyOwnerData KeysOwnerData_76;
		public ImGuiKeyOwnerData KeysOwnerData_77;
		public ImGuiKeyOwnerData KeysOwnerData_78;
		public ImGuiKeyOwnerData KeysOwnerData_79;
		public ImGuiKeyOwnerData KeysOwnerData_80;
		public ImGuiKeyOwnerData KeysOwnerData_81;
		public ImGuiKeyOwnerData KeysOwnerData_82;
		public ImGuiKeyOwnerData KeysOwnerData_83;
		public ImGuiKeyOwnerData KeysOwnerData_84;
		public ImGuiKeyOwnerData KeysOwnerData_85;
		public ImGuiKeyOwnerData KeysOwnerData_86;
		public ImGuiKeyOwnerData KeysOwnerData_87;
		public ImGuiKeyOwnerData KeysOwnerData_88;
		public ImGuiKeyOwnerData KeysOwnerData_89;
		public ImGuiKeyOwnerData KeysOwnerData_90;
		public ImGuiKeyOwnerData KeysOwnerData_91;
		public ImGuiKeyOwnerData KeysOwnerData_92;
		public ImGuiKeyOwnerData KeysOwnerData_93;
		public ImGuiKeyOwnerData KeysOwnerData_94;
		public ImGuiKeyOwnerData KeysOwnerData_95;
		public ImGuiKeyOwnerData KeysOwnerData_96;
		public ImGuiKeyOwnerData KeysOwnerData_97;
		public ImGuiKeyOwnerData KeysOwnerData_98;
		public ImGuiKeyOwnerData KeysOwnerData_99;
		public ImGuiKeyOwnerData KeysOwnerData_100;
		public ImGuiKeyOwnerData KeysOwnerData_101;
		public ImGuiKeyOwnerData KeysOwnerData_102;
		public ImGuiKeyOwnerData KeysOwnerData_103;
		public ImGuiKeyOwnerData KeysOwnerData_104;
		public ImGuiKeyOwnerData KeysOwnerData_105;
		public ImGuiKeyOwnerData KeysOwnerData_106;
		public ImGuiKeyOwnerData KeysOwnerData_107;
		public ImGuiKeyOwnerData KeysOwnerData_108;
		public ImGuiKeyOwnerData KeysOwnerData_109;
		public ImGuiKeyOwnerData KeysOwnerData_110;
		public ImGuiKeyOwnerData KeysOwnerData_111;
		public ImGuiKeyOwnerData KeysOwnerData_112;
		public ImGuiKeyOwnerData KeysOwnerData_113;
		public ImGuiKeyOwnerData KeysOwnerData_114;
		public ImGuiKeyOwnerData KeysOwnerData_115;
		public ImGuiKeyOwnerData KeysOwnerData_116;
		public ImGuiKeyOwnerData KeysOwnerData_117;
		public ImGuiKeyOwnerData KeysOwnerData_118;
		public ImGuiKeyOwnerData KeysOwnerData_119;
		public ImGuiKeyOwnerData KeysOwnerData_120;
		public ImGuiKeyOwnerData KeysOwnerData_121;
		public ImGuiKeyOwnerData KeysOwnerData_122;
		public ImGuiKeyOwnerData KeysOwnerData_123;
		public ImGuiKeyOwnerData KeysOwnerData_124;
		public ImGuiKeyOwnerData KeysOwnerData_125;
		public ImGuiKeyOwnerData KeysOwnerData_126;
		public ImGuiKeyOwnerData KeysOwnerData_127;
		public ImGuiKeyOwnerData KeysOwnerData_128;
		public ImGuiKeyOwnerData KeysOwnerData_129;
		public ImGuiKeyOwnerData KeysOwnerData_130;
		public ImGuiKeyOwnerData KeysOwnerData_131;
		public ImGuiKeyOwnerData KeysOwnerData_132;
		public ImGuiKeyOwnerData KeysOwnerData_133;
		public ImGuiKeyOwnerData KeysOwnerData_134;
		public ImGuiKeyOwnerData KeysOwnerData_135;
		public ImGuiKeyOwnerData KeysOwnerData_136;
		public ImGuiKeyOwnerData KeysOwnerData_137;
		public ImGuiKeyOwnerData KeysOwnerData_138;
		public ImGuiKeyOwnerData KeysOwnerData_139;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "KeysRoutingTable")]
		[NativeName(NativeNameType.Type, "ImGuiKeyRoutingTable")]
		public ImGuiKeyRoutingTable KeysRoutingTable;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdUsingNavDirMask")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint ActiveIdUsingNavDirMask;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdUsingAllKeyboardKeys")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdUsingAllKeyboardKeys;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdUsingNavInputMask")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint ActiveIdUsingNavInputMask;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentFocusScopeId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int CurrentFocusScopeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentItemFlags")]
		[NativeName(NativeNameType.Type, "ImGuiItemFlags")]
		public ImGuiItemFlags CurrentItemFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugLocateId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int DebugLocateId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NextItemData")]
		[NativeName(NativeNameType.Type, "ImGuiNextItemData")]
		public ImGuiNextItemData NextItemData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastItemData")]
		[NativeName(NativeNameType.Type, "ImGuiLastItemData")]
		public ImGuiLastItemData LastItemData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NextWindowData")]
		[NativeName(NativeNameType.Type, "ImGuiNextWindowData")]
		public ImGuiNextWindowData NextWindowData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiColorMod")]
		public ImVectorImGuiColorMod ColorStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "StyleVarStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiStyleMod")]
		public ImVectorImGuiStyleMod StyleVarStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImFontPtr")]
		public ImVectorImFontPtr FontStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FocusScopeStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiID")]
		public ImVectorImGuiID FocusScopeStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemFlagsStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiItemFlags")]
		public ImVectorImGuiItemFlags ItemFlagsStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "GroupStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiGroupData")]
		public ImVectorImGuiGroupData GroupStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OpenPopupStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiPopupData")]
		public ImVectorImGuiPopupData OpenPopupStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BeginPopupStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiPopupData")]
		public ImVectorImGuiPopupData BeginPopupStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BeginMenuCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int BeginMenuCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Viewports")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiViewportPPtr")]
		public ImVectorImGuiViewportPPtr Viewports;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentDpiScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float CurrentDpiScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentViewport")]
		[NativeName(NativeNameType.Type, "ImGuiViewportP*")]
		public unsafe ImGuiViewportP* CurrentViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseViewport")]
		[NativeName(NativeNameType.Type, "ImGuiViewportP*")]
		public unsafe ImGuiViewportP* MouseViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseLastHoveredViewport")]
		[NativeName(NativeNameType.Type, "ImGuiViewportP*")]
		public unsafe ImGuiViewportP* MouseLastHoveredViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformLastFocusedViewportId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int PlatformLastFocusedViewportId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FallbackMonitor")]
		[NativeName(NativeNameType.Type, "ImGuiPlatformMonitor")]
		public ImGuiPlatformMonitor FallbackMonitor;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportCreatedCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int ViewportCreatedCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformWindowsCreatedCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int PlatformWindowsCreatedCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportFocusedStampCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int ViewportFocusedStampCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* NavWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int NavId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavFocusScopeId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int NavFocusScopeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavActivateId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int NavActivateId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavActivateDownId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int NavActivateDownId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavActivatePressedId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int NavActivatePressedId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavActivateFlags")]
		[NativeName(NativeNameType.Type, "ImGuiActivateFlags")]
		public ImGuiActivateFlags NavActivateFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavJustMovedToId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int NavJustMovedToId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavJustMovedToFocusScopeId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int NavJustMovedToFocusScopeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavJustMovedToKeyMods")]
		[NativeName(NativeNameType.Type, "ImGuiKeyChord")]
		public int NavJustMovedToKeyMods;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavNextActivateId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int NavNextActivateId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavNextActivateFlags")]
		[NativeName(NativeNameType.Type, "ImGuiActivateFlags")]
		public ImGuiActivateFlags NavNextActivateFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavInputSource")]
		[NativeName(NativeNameType.Type, "ImGuiInputSource")]
		public ImGuiInputSource NavInputSource;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavLayer")]
		[NativeName(NativeNameType.Type, "ImGuiNavLayer")]
		public ImGuiNavLayer NavLayer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavIdIsAlive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavIdIsAlive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMousePosDirty")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavMousePosDirty;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavDisableHighlight")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavDisableHighlight;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavDisableMouseHover")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavDisableMouseHover;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavAnyRequest")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavAnyRequest;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavInitRequest")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavInitRequest;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavInitRequestFromMove")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavInitRequestFromMove;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavInitResult")]
		[NativeName(NativeNameType.Type, "ImGuiNavItemData")]
		public ImGuiNavItemData NavInitResult;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveSubmitted")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavMoveSubmitted;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveScoringItems")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavMoveScoringItems;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveForwardToNextFrame")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavMoveForwardToNextFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveFlags")]
		[NativeName(NativeNameType.Type, "ImGuiNavMoveFlags")]
		public ImGuiNavMoveFlags NavMoveFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveScrollFlags")]
		[NativeName(NativeNameType.Type, "ImGuiScrollFlags")]
		public ImGuiScrollFlags NavMoveScrollFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveKeyMods")]
		[NativeName(NativeNameType.Type, "ImGuiKeyChord")]
		public int NavMoveKeyMods;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveDir")]
		[NativeName(NativeNameType.Type, "ImGuiDir")]
		public ImGuiDir NavMoveDir;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveDirForDebug")]
		[NativeName(NativeNameType.Type, "ImGuiDir")]
		public ImGuiDir NavMoveDirForDebug;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveClipDir")]
		[NativeName(NativeNameType.Type, "ImGuiDir")]
		public ImGuiDir NavMoveClipDir;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavScoringRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect NavScoringRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavScoringNoClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect NavScoringNoClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavScoringDebugCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int NavScoringDebugCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavTabbingDir")]
		[NativeName(NativeNameType.Type, "int")]
		public int NavTabbingDir;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavTabbingCounter")]
		[NativeName(NativeNameType.Type, "int")]
		public int NavTabbingCounter;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveResultLocal")]
		[NativeName(NativeNameType.Type, "ImGuiNavItemData")]
		public ImGuiNavItemData NavMoveResultLocal;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveResultLocalVisible")]
		[NativeName(NativeNameType.Type, "ImGuiNavItemData")]
		public ImGuiNavItemData NavMoveResultLocalVisible;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveResultOther")]
		[NativeName(NativeNameType.Type, "ImGuiNavItemData")]
		public ImGuiNavItemData NavMoveResultOther;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavTabbingResultFirst")]
		[NativeName(NativeNameType.Type, "ImGuiNavItemData")]
		public ImGuiNavItemData NavTabbingResultFirst;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigNavWindowingKeyNext")]
		[NativeName(NativeNameType.Type, "ImGuiKeyChord")]
		public int ConfigNavWindowingKeyNext;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigNavWindowingKeyPrev")]
		[NativeName(NativeNameType.Type, "ImGuiKeyChord")]
		public int ConfigNavWindowingKeyPrev;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowingTarget")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* NavWindowingTarget;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowingTargetAnim")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* NavWindowingTargetAnim;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowingListWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* NavWindowingListWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowingTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float NavWindowingTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowingHighlightAlpha")]
		[NativeName(NativeNameType.Type, "float")]
		public float NavWindowingHighlightAlpha;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowingToggleLayer")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavWindowingToggleLayer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowingAccumDeltaPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 NavWindowingAccumDeltaPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowingAccumDeltaSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 NavWindowingAccumDeltaSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DimBgRatio")]
		[NativeName(NativeNameType.Type, "float")]
		public float DimBgRatio;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropActive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DragDropActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropWithinSource")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DragDropWithinSource;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropWithinTarget")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DragDropWithinTarget;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropSourceFlags")]
		[NativeName(NativeNameType.Type, "ImGuiDragDropFlags")]
		public ImGuiDragDropFlags DragDropSourceFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropSourceFrameCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int DragDropSourceFrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropMouseButton")]
		[NativeName(NativeNameType.Type, "int")]
		public int DragDropMouseButton;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropPayload")]
		[NativeName(NativeNameType.Type, "ImGuiPayload")]
		public ImGuiPayload DragDropPayload;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropTargetRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect DragDropTargetRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropTargetId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int DragDropTargetId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropAcceptFlags")]
		[NativeName(NativeNameType.Type, "ImGuiDragDropFlags")]
		public ImGuiDragDropFlags DragDropAcceptFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropAcceptIdCurrRectSurface")]
		[NativeName(NativeNameType.Type, "float")]
		public float DragDropAcceptIdCurrRectSurface;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropAcceptIdCurr")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int DragDropAcceptIdCurr;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropAcceptIdPrev")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int DragDropAcceptIdPrev;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropAcceptFrameCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int DragDropAcceptFrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropHoldJustPressedId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int DragDropHoldJustPressedId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropPayloadBufHeap")]
		[NativeName(NativeNameType.Type, "ImVector_unsigned_char")]
		public ImVectorUnsignedChar DragDropPayloadBufHeap;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropPayloadBufLocal")]
		[NativeName(NativeNameType.Type, "unsigned char[16]")]
		public byte DragDropPayloadBufLocal_0;
		public byte DragDropPayloadBufLocal_1;
		public byte DragDropPayloadBufLocal_2;
		public byte DragDropPayloadBufLocal_3;
		public byte DragDropPayloadBufLocal_4;
		public byte DragDropPayloadBufLocal_5;
		public byte DragDropPayloadBufLocal_6;
		public byte DragDropPayloadBufLocal_7;
		public byte DragDropPayloadBufLocal_8;
		public byte DragDropPayloadBufLocal_9;
		public byte DragDropPayloadBufLocal_10;
		public byte DragDropPayloadBufLocal_11;
		public byte DragDropPayloadBufLocal_12;
		public byte DragDropPayloadBufLocal_13;
		public byte DragDropPayloadBufLocal_14;
		public byte DragDropPayloadBufLocal_15;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ClipperTempDataStacked")]
		[NativeName(NativeNameType.Type, "int")]
		public int ClipperTempDataStacked;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ClipperTempData")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiListClipperData")]
		public ImVectorImGuiListClipperData ClipperTempData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentTable")]
		[NativeName(NativeNameType.Type, "ImGuiTable*")]
		public unsafe ImGuiTable* CurrentTable;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TablesTempDataStacked")]
		[NativeName(NativeNameType.Type, "int")]
		public int TablesTempDataStacked;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TablesTempData")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiTableTempData")]
		public ImVectorImGuiTableTempData TablesTempData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Tables")]
		[NativeName(NativeNameType.Type, "ImPool_ImGuiTable")]
		public ImPoolImGuiTable Tables;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TablesLastTimeActive")]
		[NativeName(NativeNameType.Type, "ImVector_float")]
		public ImVectorFloat TablesLastTimeActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawChannelsTempMergeBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawChannel")]
		public ImVectorImDrawChannel DrawChannelsTempMergeBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentTabBar")]
		[NativeName(NativeNameType.Type, "ImGuiTabBar*")]
		public unsafe ImGuiTabBar* CurrentTabBar;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TabBars")]
		[NativeName(NativeNameType.Type, "ImPool_ImGuiTabBar")]
		public ImPoolImGuiTabBar TabBars;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentTabBarStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiPtrOrIndex")]
		public ImVectorImGuiPtrOrIndex CurrentTabBarStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ShrinkWidthBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiShrinkWidthItem")]
		public ImVectorImGuiShrinkWidthItem ShrinkWidthBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverItemDelayId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int HoverItemDelayId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverItemDelayIdPreviousFrame")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int HoverItemDelayIdPreviousFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverItemDelayTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float HoverItemDelayTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverItemDelayClearTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float HoverItemDelayClearTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverItemUnlockedStationaryId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int HoverItemUnlockedStationaryId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverWindowUnlockedStationaryId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int HoverWindowUnlockedStationaryId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseCursor")]
		[NativeName(NativeNameType.Type, "ImGuiMouseCursor")]
		public ImGuiMouseCursor MouseCursor;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseStationaryTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float MouseStationaryTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseLastValidPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 MouseLastValidPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InputTextState")]
		[NativeName(NativeNameType.Type, "ImGuiInputTextState")]
		public ImGuiInputTextState InputTextState;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InputTextDeactivatedState")]
		[NativeName(NativeNameType.Type, "ImGuiInputTextDeactivatedState")]
		public ImGuiInputTextDeactivatedState InputTextDeactivatedState;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InputTextPasswordFont")]
		[NativeName(NativeNameType.Type, "ImFont")]
		public ImFont InputTextPasswordFont;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TempInputId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int TempInputId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorEditOptions")]
		[NativeName(NativeNameType.Type, "ImGuiColorEditFlags")]
		public ImGuiColorEditFlags ColorEditOptions;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorEditCurrentID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ColorEditCurrentID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorEditSavedID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ColorEditSavedID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorEditSavedHue")]
		[NativeName(NativeNameType.Type, "float")]
		public float ColorEditSavedHue;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorEditSavedSat")]
		[NativeName(NativeNameType.Type, "float")]
		public float ColorEditSavedSat;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorEditSavedColor")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint ColorEditSavedColor;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorPickerRef")]
		[NativeName(NativeNameType.Type, "ImVec4")]
		public Vector4 ColorPickerRef;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ComboPreviewData")]
		[NativeName(NativeNameType.Type, "ImGuiComboPreviewData")]
		public ImGuiComboPreviewData ComboPreviewData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SliderGrabClickOffset")]
		[NativeName(NativeNameType.Type, "float")]
		public float SliderGrabClickOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SliderCurrentAccum")]
		[NativeName(NativeNameType.Type, "float")]
		public float SliderCurrentAccum;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SliderCurrentAccumDirty")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte SliderCurrentAccumDirty;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragCurrentAccumDirty")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DragCurrentAccumDirty;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragCurrentAccum")]
		[NativeName(NativeNameType.Type, "float")]
		public float DragCurrentAccum;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragSpeedDefaultRatio")]
		[NativeName(NativeNameType.Type, "float")]
		public float DragSpeedDefaultRatio;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollbarClickDeltaToGrabCenter")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollbarClickDeltaToGrabCenter;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisabledAlphaBackup")]
		[NativeName(NativeNameType.Type, "float")]
		public float DisabledAlphaBackup;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisabledStackSize")]
		[NativeName(NativeNameType.Type, "short")]
		public short DisabledStackSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TooltipOverrideCount")]
		[NativeName(NativeNameType.Type, "short")]
		public short TooltipOverrideCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ClipboardHandlerData")]
		[NativeName(NativeNameType.Type, "ImVector_char")]
		public ImVectorChar ClipboardHandlerData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MenusIdSubmittedThisFrame")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiID")]
		public ImVectorImGuiID MenusIdSubmittedThisFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformImeData")]
		[NativeName(NativeNameType.Type, "ImGuiPlatformImeData")]
		public ImGuiPlatformImeData PlatformImeData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformImeDataPrev")]
		[NativeName(NativeNameType.Type, "ImGuiPlatformImeData")]
		public ImGuiPlatformImeData PlatformImeDataPrev;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformImeViewport")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int PlatformImeViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformLocaleDecimalPoint")]
		[NativeName(NativeNameType.Type, "char")]
		public byte PlatformLocaleDecimalPoint;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockContext")]
		[NativeName(NativeNameType.Type, "ImGuiDockContext")]
		public ImGuiDockContext DockContext;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockNodeWindowMenuHandler")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiContext* ctx, ImGuiDockNode* node, ImGuiTabBar* tab_bar)*")]
		public unsafe void* DockNodeWindowMenuHandler;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsLoaded")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte SettingsLoaded;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsDirtyTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float SettingsDirtyTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsIniData")]
		[NativeName(NativeNameType.Type, "ImGuiTextBuffer")]
		public ImGuiTextBuffer SettingsIniData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsHandlers")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiSettingsHandler")]
		public ImVectorImGuiSettingsHandler SettingsHandlers;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsWindows")]
		[NativeName(NativeNameType.Type, "ImChunkStream_ImGuiWindowSettings")]
		public ImChunkStreamImGuiWindowSettings SettingsWindows;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsTables")]
		[NativeName(NativeNameType.Type, "ImChunkStream_ImGuiTableSettings")]
		public ImChunkStreamImGuiTableSettings SettingsTables;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Hooks")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiContextHook")]
		public ImVectorImGuiContextHook Hooks;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HookIdNext")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int HookIdNext;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LocalizationTable")]
		[NativeName(NativeNameType.Type, "const char*[9]")]
		public unsafe byte* LocalizationTable_0;
		public unsafe byte* LocalizationTable_1;
		public unsafe byte* LocalizationTable_2;
		public unsafe byte* LocalizationTable_3;
		public unsafe byte* LocalizationTable_4;
		public unsafe byte* LocalizationTable_5;
		public unsafe byte* LocalizationTable_6;
		public unsafe byte* LocalizationTable_7;
		public unsafe byte* LocalizationTable_8;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogEnabled")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte LogEnabled;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogType")]
		[NativeName(NativeNameType.Type, "ImGuiLogType")]
		public ImGuiLogType LogType;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogFile")]
		[NativeName(NativeNameType.Type, "ImFileHandle")]
		public ImFileHandle LogFile;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogBuffer")]
		[NativeName(NativeNameType.Type, "ImGuiTextBuffer")]
		public ImGuiTextBuffer LogBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogNextPrefix")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* LogNextPrefix;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogNextSuffix")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* LogNextSuffix;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogLinePosY")]
		[NativeName(NativeNameType.Type, "float")]
		public float LogLinePosY;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogLineFirstItem")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte LogLineFirstItem;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogDepthRef")]
		[NativeName(NativeNameType.Type, "int")]
		public int LogDepthRef;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogDepthToExpand")]
		[NativeName(NativeNameType.Type, "int")]
		public int LogDepthToExpand;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogDepthToExpandDefault")]
		[NativeName(NativeNameType.Type, "int")]
		public int LogDepthToExpandDefault;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugLogFlags")]
		[NativeName(NativeNameType.Type, "ImGuiDebugLogFlags")]
		public ImGuiDebugLogFlags DebugLogFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugLogBuf")]
		[NativeName(NativeNameType.Type, "ImGuiTextBuffer")]
		public ImGuiTextBuffer DebugLogBuf;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugLogIndex")]
		[NativeName(NativeNameType.Type, "ImGuiTextIndex")]
		public ImGuiTextIndex DebugLogIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugLogClipperAutoDisableFrames")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte DebugLogClipperAutoDisableFrames;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugLocateFrames")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte DebugLocateFrames;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugBeginReturnValueCullDepth")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte DebugBeginReturnValueCullDepth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugItemPickerActive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DebugItemPickerActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugItemPickerMouseButton")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte DebugItemPickerMouseButton;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugItemPickerBreakId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int DebugItemPickerBreakId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugMetricsConfig")]
		[NativeName(NativeNameType.Type, "ImGuiMetricsConfig")]
		public ImGuiMetricsConfig DebugMetricsConfig;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugStackTool")]
		[NativeName(NativeNameType.Type, "ImGuiStackTool")]
		public ImGuiStackTool DebugStackTool;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugHoveredDockNode")]
		[NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public unsafe ImGuiDockNode* DebugHoveredDockNode;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FramerateSecPerFrame")]
		[NativeName(NativeNameType.Type, "float[60]")]
		public float FramerateSecPerFrame_0;
		public float FramerateSecPerFrame_1;
		public float FramerateSecPerFrame_2;
		public float FramerateSecPerFrame_3;
		public float FramerateSecPerFrame_4;
		public float FramerateSecPerFrame_5;
		public float FramerateSecPerFrame_6;
		public float FramerateSecPerFrame_7;
		public float FramerateSecPerFrame_8;
		public float FramerateSecPerFrame_9;
		public float FramerateSecPerFrame_10;
		public float FramerateSecPerFrame_11;
		public float FramerateSecPerFrame_12;
		public float FramerateSecPerFrame_13;
		public float FramerateSecPerFrame_14;
		public float FramerateSecPerFrame_15;
		public float FramerateSecPerFrame_16;
		public float FramerateSecPerFrame_17;
		public float FramerateSecPerFrame_18;
		public float FramerateSecPerFrame_19;
		public float FramerateSecPerFrame_20;
		public float FramerateSecPerFrame_21;
		public float FramerateSecPerFrame_22;
		public float FramerateSecPerFrame_23;
		public float FramerateSecPerFrame_24;
		public float FramerateSecPerFrame_25;
		public float FramerateSecPerFrame_26;
		public float FramerateSecPerFrame_27;
		public float FramerateSecPerFrame_28;
		public float FramerateSecPerFrame_29;
		public float FramerateSecPerFrame_30;
		public float FramerateSecPerFrame_31;
		public float FramerateSecPerFrame_32;
		public float FramerateSecPerFrame_33;
		public float FramerateSecPerFrame_34;
		public float FramerateSecPerFrame_35;
		public float FramerateSecPerFrame_36;
		public float FramerateSecPerFrame_37;
		public float FramerateSecPerFrame_38;
		public float FramerateSecPerFrame_39;
		public float FramerateSecPerFrame_40;
		public float FramerateSecPerFrame_41;
		public float FramerateSecPerFrame_42;
		public float FramerateSecPerFrame_43;
		public float FramerateSecPerFrame_44;
		public float FramerateSecPerFrame_45;
		public float FramerateSecPerFrame_46;
		public float FramerateSecPerFrame_47;
		public float FramerateSecPerFrame_48;
		public float FramerateSecPerFrame_49;
		public float FramerateSecPerFrame_50;
		public float FramerateSecPerFrame_51;
		public float FramerateSecPerFrame_52;
		public float FramerateSecPerFrame_53;
		public float FramerateSecPerFrame_54;
		public float FramerateSecPerFrame_55;
		public float FramerateSecPerFrame_56;
		public float FramerateSecPerFrame_57;
		public float FramerateSecPerFrame_58;
		public float FramerateSecPerFrame_59;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FramerateSecPerFrameIdx")]
		[NativeName(NativeNameType.Type, "int")]
		public int FramerateSecPerFrameIdx;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FramerateSecPerFrameCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int FramerateSecPerFrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FramerateSecPerFrameAccum")]
		[NativeName(NativeNameType.Type, "float")]
		public float FramerateSecPerFrameAccum;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantCaptureMouseNextFrame")]
		[NativeName(NativeNameType.Type, "int")]
		public int WantCaptureMouseNextFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantCaptureKeyboardNextFrame")]
		[NativeName(NativeNameType.Type, "int")]
		public int WantCaptureKeyboardNextFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantTextInputNextFrame")]
		[NativeName(NativeNameType.Type, "int")]
		public int WantTextInputNextFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TempBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_char")]
		public ImVectorChar TempBuffer;




		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<ImGuiKeyOwnerData> KeysOwnerData
		
		{
			get
			{
				fixed (ImGuiKeyOwnerData* p = &this.KeysOwnerData_0)
				{
					return new Span<ImGuiKeyOwnerData>(p, 140);
				}
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiContext_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiContext* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiIO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiIO
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigFlags")]
		[NativeName(NativeNameType.Type, "ImGuiConfigFlags")]
		public ImGuiConfigFlags ConfigFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackendFlags")]
		[NativeName(NativeNameType.Type, "ImGuiBackendFlags")]
		public ImGuiBackendFlags BackendFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplaySize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 DisplaySize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DeltaTime")]
		[NativeName(NativeNameType.Type, "float")]
		public float DeltaTime;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IniSavingRate")]
		[NativeName(NativeNameType.Type, "float")]
		public float IniSavingRate;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IniFilename")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* IniFilename;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogFilename")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* LogFilename;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "UserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Fonts")]
		[NativeName(NativeNameType.Type, "ImFontAtlas*")]
		public unsafe ImFontAtlas* Fonts;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontGlobalScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float FontGlobalScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontAllowUserScaling")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte FontAllowUserScaling;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontDefault")]
		[NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* FontDefault;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayFramebufferScale")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 DisplayFramebufferScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigDockingNoSplit")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigDockingNoSplit;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigDockingWithShift")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigDockingWithShift;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigDockingAlwaysTabBar")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigDockingAlwaysTabBar;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigDockingTransparentPayload")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigDockingTransparentPayload;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigViewportsNoAutoMerge")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigViewportsNoAutoMerge;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigViewportsNoTaskBarIcon")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigViewportsNoTaskBarIcon;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigViewportsNoDecoration")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigViewportsNoDecoration;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigViewportsNoDefaultParent")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigViewportsNoDefaultParent;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDrawCursor")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte MouseDrawCursor;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigMacOSXBehaviors")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigMacOSXBehaviors;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigInputTrickleEventQueue")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigInputTrickleEventQueue;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigInputTextCursorBlink")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigInputTextCursorBlink;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigInputTextEnterKeepActive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigInputTextEnterKeepActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigDragClickToInputText")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigDragClickToInputText;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigWindowsResizeFromEdges")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigWindowsResizeFromEdges;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigWindowsMoveFromTitleBarOnly")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigWindowsMoveFromTitleBarOnly;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigMemoryCompactTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float ConfigMemoryCompactTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDoubleClickTime")]
		[NativeName(NativeNameType.Type, "float")]
		public float MouseDoubleClickTime;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDoubleClickMaxDist")]
		[NativeName(NativeNameType.Type, "float")]
		public float MouseDoubleClickMaxDist;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDragThreshold")]
		[NativeName(NativeNameType.Type, "float")]
		public float MouseDragThreshold;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "KeyRepeatDelay")]
		[NativeName(NativeNameType.Type, "float")]
		public float KeyRepeatDelay;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "KeyRepeatRate")]
		[NativeName(NativeNameType.Type, "float")]
		public float KeyRepeatRate;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigDebugBeginReturnValueOnce")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigDebugBeginReturnValueOnce;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigDebugBeginReturnValueLoop")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigDebugBeginReturnValueLoop;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigDebugIgnoreFocusLoss")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigDebugIgnoreFocusLoss;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigDebugIniSettings")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigDebugIniSettings;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackendPlatformName")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* BackendPlatformName;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackendRendererName")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* BackendRendererName;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackendPlatformUserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* BackendPlatformUserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackendRendererUserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* BackendRendererUserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackendLanguageUserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* BackendLanguageUserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "GetClipboardTextFn")]
		[NativeName(NativeNameType.Type, "const char* (*)(void* user_data)*")]
		public unsafe void* GetClipboardTextFn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SetClipboardTextFn")]
		[NativeName(NativeNameType.Type, "void (*)(void* user_data, const char* text)*")]
		public unsafe void* SetClipboardTextFn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ClipboardUserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* ClipboardUserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SetPlatformImeDataFn")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* viewport, ImGuiPlatformImeData* data)*")]
		public unsafe void* SetPlatformImeDataFn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_UnusedPadding")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UnusedPadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantCaptureMouse")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantCaptureMouse;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantCaptureKeyboard")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantCaptureKeyboard;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantTextInput")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantTextInput;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantSetMousePos")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantSetMousePos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantSaveIniSettings")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantSaveIniSettings;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavActive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavVisible")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavVisible;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Framerate")]
		[NativeName(NativeNameType.Type, "float")]
		public float Framerate;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MetricsRenderVertices")]
		[NativeName(NativeNameType.Type, "int")]
		public int MetricsRenderVertices;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MetricsRenderIndices")]
		[NativeName(NativeNameType.Type, "int")]
		public int MetricsRenderIndices;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MetricsRenderWindows")]
		[NativeName(NativeNameType.Type, "int")]
		public int MetricsRenderWindows;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MetricsActiveWindows")]
		[NativeName(NativeNameType.Type, "int")]
		public int MetricsActiveWindows;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MetricsActiveAllocations")]
		[NativeName(NativeNameType.Type, "int")]
		public int MetricsActiveAllocations;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDelta")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 MouseDelta;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "KeyMap")]
		[NativeName(NativeNameType.Type, "int[652]")]
		public int KeyMap_0;
		public int KeyMap_1;
		public int KeyMap_2;
		public int KeyMap_3;
		public int KeyMap_4;
		public int KeyMap_5;
		public int KeyMap_6;
		public int KeyMap_7;
		public int KeyMap_8;
		public int KeyMap_9;
		public int KeyMap_10;
		public int KeyMap_11;
		public int KeyMap_12;
		public int KeyMap_13;
		public int KeyMap_14;
		public int KeyMap_15;
		public int KeyMap_16;
		public int KeyMap_17;
		public int KeyMap_18;
		public int KeyMap_19;
		public int KeyMap_20;
		public int KeyMap_21;
		public int KeyMap_22;
		public int KeyMap_23;
		public int KeyMap_24;
		public int KeyMap_25;
		public int KeyMap_26;
		public int KeyMap_27;
		public int KeyMap_28;
		public int KeyMap_29;
		public int KeyMap_30;
		public int KeyMap_31;
		public int KeyMap_32;
		public int KeyMap_33;
		public int KeyMap_34;
		public int KeyMap_35;
		public int KeyMap_36;
		public int KeyMap_37;
		public int KeyMap_38;
		public int KeyMap_39;
		public int KeyMap_40;
		public int KeyMap_41;
		public int KeyMap_42;
		public int KeyMap_43;
		public int KeyMap_44;
		public int KeyMap_45;
		public int KeyMap_46;
		public int KeyMap_47;
		public int KeyMap_48;
		public int KeyMap_49;
		public int KeyMap_50;
		public int KeyMap_51;
		public int KeyMap_52;
		public int KeyMap_53;
		public int KeyMap_54;
		public int KeyMap_55;
		public int KeyMap_56;
		public int KeyMap_57;
		public int KeyMap_58;
		public int KeyMap_59;
		public int KeyMap_60;
		public int KeyMap_61;
		public int KeyMap_62;
		public int KeyMap_63;
		public int KeyMap_64;
		public int KeyMap_65;
		public int KeyMap_66;
		public int KeyMap_67;
		public int KeyMap_68;
		public int KeyMap_69;
		public int KeyMap_70;
		public int KeyMap_71;
		public int KeyMap_72;
		public int KeyMap_73;
		public int KeyMap_74;
		public int KeyMap_75;
		public int KeyMap_76;
		public int KeyMap_77;
		public int KeyMap_78;
		public int KeyMap_79;
		public int KeyMap_80;
		public int KeyMap_81;
		public int KeyMap_82;
		public int KeyMap_83;
		public int KeyMap_84;
		public int KeyMap_85;
		public int KeyMap_86;
		public int KeyMap_87;
		public int KeyMap_88;
		public int KeyMap_89;
		public int KeyMap_90;
		public int KeyMap_91;
		public int KeyMap_92;
		public int KeyMap_93;
		public int KeyMap_94;
		public int KeyMap_95;
		public int KeyMap_96;
		public int KeyMap_97;
		public int KeyMap_98;
		public int KeyMap_99;
		public int KeyMap_100;
		public int KeyMap_101;
		public int KeyMap_102;
		public int KeyMap_103;
		public int KeyMap_104;
		public int KeyMap_105;
		public int KeyMap_106;
		public int KeyMap_107;
		public int KeyMap_108;
		public int KeyMap_109;
		public int KeyMap_110;
		public int KeyMap_111;
		public int KeyMap_112;
		public int KeyMap_113;
		public int KeyMap_114;
		public int KeyMap_115;
		public int KeyMap_116;
		public int KeyMap_117;
		public int KeyMap_118;
		public int KeyMap_119;
		public int KeyMap_120;
		public int KeyMap_121;
		public int KeyMap_122;
		public int KeyMap_123;
		public int KeyMap_124;
		public int KeyMap_125;
		public int KeyMap_126;
		public int KeyMap_127;
		public int KeyMap_128;
		public int KeyMap_129;
		public int KeyMap_130;
		public int KeyMap_131;
		public int KeyMap_132;
		public int KeyMap_133;
		public int KeyMap_134;
		public int KeyMap_135;
		public int KeyMap_136;
		public int KeyMap_137;
		public int KeyMap_138;
		public int KeyMap_139;
		public int KeyMap_140;
		public int KeyMap_141;
		public int KeyMap_142;
		public int KeyMap_143;
		public int KeyMap_144;
		public int KeyMap_145;
		public int KeyMap_146;
		public int KeyMap_147;
		public int KeyMap_148;
		public int KeyMap_149;
		public int KeyMap_150;
		public int KeyMap_151;
		public int KeyMap_152;
		public int KeyMap_153;
		public int KeyMap_154;
		public int KeyMap_155;
		public int KeyMap_156;
		public int KeyMap_157;
		public int KeyMap_158;
		public int KeyMap_159;
		public int KeyMap_160;
		public int KeyMap_161;
		public int KeyMap_162;
		public int KeyMap_163;
		public int KeyMap_164;
		public int KeyMap_165;
		public int KeyMap_166;
		public int KeyMap_167;
		public int KeyMap_168;
		public int KeyMap_169;
		public int KeyMap_170;
		public int KeyMap_171;
		public int KeyMap_172;
		public int KeyMap_173;
		public int KeyMap_174;
		public int KeyMap_175;
		public int KeyMap_176;
		public int KeyMap_177;
		public int KeyMap_178;
		public int KeyMap_179;
		public int KeyMap_180;
		public int KeyMap_181;
		public int KeyMap_182;
		public int KeyMap_183;
		public int KeyMap_184;
		public int KeyMap_185;
		public int KeyMap_186;
		public int KeyMap_187;
		public int KeyMap_188;
		public int KeyMap_189;
		public int KeyMap_190;
		public int KeyMap_191;
		public int KeyMap_192;
		public int KeyMap_193;
		public int KeyMap_194;
		public int KeyMap_195;
		public int KeyMap_196;
		public int KeyMap_197;
		public int KeyMap_198;
		public int KeyMap_199;
		public int KeyMap_200;
		public int KeyMap_201;
		public int KeyMap_202;
		public int KeyMap_203;
		public int KeyMap_204;
		public int KeyMap_205;
		public int KeyMap_206;
		public int KeyMap_207;
		public int KeyMap_208;
		public int KeyMap_209;
		public int KeyMap_210;
		public int KeyMap_211;
		public int KeyMap_212;
		public int KeyMap_213;
		public int KeyMap_214;
		public int KeyMap_215;
		public int KeyMap_216;
		public int KeyMap_217;
		public int KeyMap_218;
		public int KeyMap_219;
		public int KeyMap_220;
		public int KeyMap_221;
		public int KeyMap_222;
		public int KeyMap_223;
		public int KeyMap_224;
		public int KeyMap_225;
		public int KeyMap_226;
		public int KeyMap_227;
		public int KeyMap_228;
		public int KeyMap_229;
		public int KeyMap_230;
		public int KeyMap_231;
		public int KeyMap_232;
		public int KeyMap_233;
		public int KeyMap_234;
		public int KeyMap_235;
		public int KeyMap_236;
		public int KeyMap_237;
		public int KeyMap_238;
		public int KeyMap_239;
		public int KeyMap_240;
		public int KeyMap_241;
		public int KeyMap_242;
		public int KeyMap_243;
		public int KeyMap_244;
		public int KeyMap_245;
		public int KeyMap_246;
		public int KeyMap_247;
		public int KeyMap_248;
		public int KeyMap_249;
		public int KeyMap_250;
		public int KeyMap_251;
		public int KeyMap_252;
		public int KeyMap_253;
		public int KeyMap_254;
		public int KeyMap_255;
		public int KeyMap_256;
		public int KeyMap_257;
		public int KeyMap_258;
		public int KeyMap_259;
		public int KeyMap_260;
		public int KeyMap_261;
		public int KeyMap_262;
		public int KeyMap_263;
		public int KeyMap_264;
		public int KeyMap_265;
		public int KeyMap_266;
		public int KeyMap_267;
		public int KeyMap_268;
		public int KeyMap_269;
		public int KeyMap_270;
		public int KeyMap_271;
		public int KeyMap_272;
		public int KeyMap_273;
		public int KeyMap_274;
		public int KeyMap_275;
		public int KeyMap_276;
		public int KeyMap_277;
		public int KeyMap_278;
		public int KeyMap_279;
		public int KeyMap_280;
		public int KeyMap_281;
		public int KeyMap_282;
		public int KeyMap_283;
		public int KeyMap_284;
		public int KeyMap_285;
		public int KeyMap_286;
		public int KeyMap_287;
		public int KeyMap_288;
		public int KeyMap_289;
		public int KeyMap_290;
		public int KeyMap_291;
		public int KeyMap_292;
		public int KeyMap_293;
		public int KeyMap_294;
		public int KeyMap_295;
		public int KeyMap_296;
		public int KeyMap_297;
		public int KeyMap_298;
		public int KeyMap_299;
		public int KeyMap_300;
		public int KeyMap_301;
		public int KeyMap_302;
		public int KeyMap_303;
		public int KeyMap_304;
		public int KeyMap_305;
		public int KeyMap_306;
		public int KeyMap_307;
		public int KeyMap_308;
		public int KeyMap_309;
		public int KeyMap_310;
		public int KeyMap_311;
		public int KeyMap_312;
		public int KeyMap_313;
		public int KeyMap_314;
		public int KeyMap_315;
		public int KeyMap_316;
		public int KeyMap_317;
		public int KeyMap_318;
		public int KeyMap_319;
		public int KeyMap_320;
		public int KeyMap_321;
		public int KeyMap_322;
		public int KeyMap_323;
		public int KeyMap_324;
		public int KeyMap_325;
		public int KeyMap_326;
		public int KeyMap_327;
		public int KeyMap_328;
		public int KeyMap_329;
		public int KeyMap_330;
		public int KeyMap_331;
		public int KeyMap_332;
		public int KeyMap_333;
		public int KeyMap_334;
		public int KeyMap_335;
		public int KeyMap_336;
		public int KeyMap_337;
		public int KeyMap_338;
		public int KeyMap_339;
		public int KeyMap_340;
		public int KeyMap_341;
		public int KeyMap_342;
		public int KeyMap_343;
		public int KeyMap_344;
		public int KeyMap_345;
		public int KeyMap_346;
		public int KeyMap_347;
		public int KeyMap_348;
		public int KeyMap_349;
		public int KeyMap_350;
		public int KeyMap_351;
		public int KeyMap_352;
		public int KeyMap_353;
		public int KeyMap_354;
		public int KeyMap_355;
		public int KeyMap_356;
		public int KeyMap_357;
		public int KeyMap_358;
		public int KeyMap_359;
		public int KeyMap_360;
		public int KeyMap_361;
		public int KeyMap_362;
		public int KeyMap_363;
		public int KeyMap_364;
		public int KeyMap_365;
		public int KeyMap_366;
		public int KeyMap_367;
		public int KeyMap_368;
		public int KeyMap_369;
		public int KeyMap_370;
		public int KeyMap_371;
		public int KeyMap_372;
		public int KeyMap_373;
		public int KeyMap_374;
		public int KeyMap_375;
		public int KeyMap_376;
		public int KeyMap_377;
		public int KeyMap_378;
		public int KeyMap_379;
		public int KeyMap_380;
		public int KeyMap_381;
		public int KeyMap_382;
		public int KeyMap_383;
		public int KeyMap_384;
		public int KeyMap_385;
		public int KeyMap_386;
		public int KeyMap_387;
		public int KeyMap_388;
		public int KeyMap_389;
		public int KeyMap_390;
		public int KeyMap_391;
		public int KeyMap_392;
		public int KeyMap_393;
		public int KeyMap_394;
		public int KeyMap_395;
		public int KeyMap_396;
		public int KeyMap_397;
		public int KeyMap_398;
		public int KeyMap_399;
		public int KeyMap_400;
		public int KeyMap_401;
		public int KeyMap_402;
		public int KeyMap_403;
		public int KeyMap_404;
		public int KeyMap_405;
		public int KeyMap_406;
		public int KeyMap_407;
		public int KeyMap_408;
		public int KeyMap_409;
		public int KeyMap_410;
		public int KeyMap_411;
		public int KeyMap_412;
		public int KeyMap_413;
		public int KeyMap_414;
		public int KeyMap_415;
		public int KeyMap_416;
		public int KeyMap_417;
		public int KeyMap_418;
		public int KeyMap_419;
		public int KeyMap_420;
		public int KeyMap_421;
		public int KeyMap_422;
		public int KeyMap_423;
		public int KeyMap_424;
		public int KeyMap_425;
		public int KeyMap_426;
		public int KeyMap_427;
		public int KeyMap_428;
		public int KeyMap_429;
		public int KeyMap_430;
		public int KeyMap_431;
		public int KeyMap_432;
		public int KeyMap_433;
		public int KeyMap_434;
		public int KeyMap_435;
		public int KeyMap_436;
		public int KeyMap_437;
		public int KeyMap_438;
		public int KeyMap_439;
		public int KeyMap_440;
		public int KeyMap_441;
		public int KeyMap_442;
		public int KeyMap_443;
		public int KeyMap_444;
		public int KeyMap_445;
		public int KeyMap_446;
		public int KeyMap_447;
		public int KeyMap_448;
		public int KeyMap_449;
		public int KeyMap_450;
		public int KeyMap_451;
		public int KeyMap_452;
		public int KeyMap_453;
		public int KeyMap_454;
		public int KeyMap_455;
		public int KeyMap_456;
		public int KeyMap_457;
		public int KeyMap_458;
		public int KeyMap_459;
		public int KeyMap_460;
		public int KeyMap_461;
		public int KeyMap_462;
		public int KeyMap_463;
		public int KeyMap_464;
		public int KeyMap_465;
		public int KeyMap_466;
		public int KeyMap_467;
		public int KeyMap_468;
		public int KeyMap_469;
		public int KeyMap_470;
		public int KeyMap_471;
		public int KeyMap_472;
		public int KeyMap_473;
		public int KeyMap_474;
		public int KeyMap_475;
		public int KeyMap_476;
		public int KeyMap_477;
		public int KeyMap_478;
		public int KeyMap_479;
		public int KeyMap_480;
		public int KeyMap_481;
		public int KeyMap_482;
		public int KeyMap_483;
		public int KeyMap_484;
		public int KeyMap_485;
		public int KeyMap_486;
		public int KeyMap_487;
		public int KeyMap_488;
		public int KeyMap_489;
		public int KeyMap_490;
		public int KeyMap_491;
		public int KeyMap_492;
		public int KeyMap_493;
		public int KeyMap_494;
		public int KeyMap_495;
		public int KeyMap_496;
		public int KeyMap_497;
		public int KeyMap_498;
		public int KeyMap_499;
		public int KeyMap_500;
		public int KeyMap_501;
		public int KeyMap_502;
		public int KeyMap_503;
		public int KeyMap_504;
		public int KeyMap_505;
		public int KeyMap_506;
		public int KeyMap_507;
		public int KeyMap_508;
		public int KeyMap_509;
		public int KeyMap_510;
		public int KeyMap_511;
		public int KeyMap_512;
		public int KeyMap_513;
		public int KeyMap_514;
		public int KeyMap_515;
		public int KeyMap_516;
		public int KeyMap_517;
		public int KeyMap_518;
		public int KeyMap_519;
		public int KeyMap_520;
		public int KeyMap_521;
		public int KeyMap_522;
		public int KeyMap_523;
		public int KeyMap_524;
		public int KeyMap_525;
		public int KeyMap_526;
		public int KeyMap_527;
		public int KeyMap_528;
		public int KeyMap_529;
		public int KeyMap_530;
		public int KeyMap_531;
		public int KeyMap_532;
		public int KeyMap_533;
		public int KeyMap_534;
		public int KeyMap_535;
		public int KeyMap_536;
		public int KeyMap_537;
		public int KeyMap_538;
		public int KeyMap_539;
		public int KeyMap_540;
		public int KeyMap_541;
		public int KeyMap_542;
		public int KeyMap_543;
		public int KeyMap_544;
		public int KeyMap_545;
		public int KeyMap_546;
		public int KeyMap_547;
		public int KeyMap_548;
		public int KeyMap_549;
		public int KeyMap_550;
		public int KeyMap_551;
		public int KeyMap_552;
		public int KeyMap_553;
		public int KeyMap_554;
		public int KeyMap_555;
		public int KeyMap_556;
		public int KeyMap_557;
		public int KeyMap_558;
		public int KeyMap_559;
		public int KeyMap_560;
		public int KeyMap_561;
		public int KeyMap_562;
		public int KeyMap_563;
		public int KeyMap_564;
		public int KeyMap_565;
		public int KeyMap_566;
		public int KeyMap_567;
		public int KeyMap_568;
		public int KeyMap_569;
		public int KeyMap_570;
		public int KeyMap_571;
		public int KeyMap_572;
		public int KeyMap_573;
		public int KeyMap_574;
		public int KeyMap_575;
		public int KeyMap_576;
		public int KeyMap_577;
		public int KeyMap_578;
		public int KeyMap_579;
		public int KeyMap_580;
		public int KeyMap_581;
		public int KeyMap_582;
		public int KeyMap_583;
		public int KeyMap_584;
		public int KeyMap_585;
		public int KeyMap_586;
		public int KeyMap_587;
		public int KeyMap_588;
		public int KeyMap_589;
		public int KeyMap_590;
		public int KeyMap_591;
		public int KeyMap_592;
		public int KeyMap_593;
		public int KeyMap_594;
		public int KeyMap_595;
		public int KeyMap_596;
		public int KeyMap_597;
		public int KeyMap_598;
		public int KeyMap_599;
		public int KeyMap_600;
		public int KeyMap_601;
		public int KeyMap_602;
		public int KeyMap_603;
		public int KeyMap_604;
		public int KeyMap_605;
		public int KeyMap_606;
		public int KeyMap_607;
		public int KeyMap_608;
		public int KeyMap_609;
		public int KeyMap_610;
		public int KeyMap_611;
		public int KeyMap_612;
		public int KeyMap_613;
		public int KeyMap_614;
		public int KeyMap_615;
		public int KeyMap_616;
		public int KeyMap_617;
		public int KeyMap_618;
		public int KeyMap_619;
		public int KeyMap_620;
		public int KeyMap_621;
		public int KeyMap_622;
		public int KeyMap_623;
		public int KeyMap_624;
		public int KeyMap_625;
		public int KeyMap_626;
		public int KeyMap_627;
		public int KeyMap_628;
		public int KeyMap_629;
		public int KeyMap_630;
		public int KeyMap_631;
		public int KeyMap_632;
		public int KeyMap_633;
		public int KeyMap_634;
		public int KeyMap_635;
		public int KeyMap_636;
		public int KeyMap_637;
		public int KeyMap_638;
		public int KeyMap_639;
		public int KeyMap_640;
		public int KeyMap_641;
		public int KeyMap_642;
		public int KeyMap_643;
		public int KeyMap_644;
		public int KeyMap_645;
		public int KeyMap_646;
		public int KeyMap_647;
		public int KeyMap_648;
		public int KeyMap_649;
		public int KeyMap_650;
		public int KeyMap_651;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "KeysDown")]
		[NativeName(NativeNameType.Type, "bool[652]")]
		public bool KeysDown_0;
		public bool KeysDown_1;
		public bool KeysDown_2;
		public bool KeysDown_3;
		public bool KeysDown_4;
		public bool KeysDown_5;
		public bool KeysDown_6;
		public bool KeysDown_7;
		public bool KeysDown_8;
		public bool KeysDown_9;
		public bool KeysDown_10;
		public bool KeysDown_11;
		public bool KeysDown_12;
		public bool KeysDown_13;
		public bool KeysDown_14;
		public bool KeysDown_15;
		public bool KeysDown_16;
		public bool KeysDown_17;
		public bool KeysDown_18;
		public bool KeysDown_19;
		public bool KeysDown_20;
		public bool KeysDown_21;
		public bool KeysDown_22;
		public bool KeysDown_23;
		public bool KeysDown_24;
		public bool KeysDown_25;
		public bool KeysDown_26;
		public bool KeysDown_27;
		public bool KeysDown_28;
		public bool KeysDown_29;
		public bool KeysDown_30;
		public bool KeysDown_31;
		public bool KeysDown_32;
		public bool KeysDown_33;
		public bool KeysDown_34;
		public bool KeysDown_35;
		public bool KeysDown_36;
		public bool KeysDown_37;
		public bool KeysDown_38;
		public bool KeysDown_39;
		public bool KeysDown_40;
		public bool KeysDown_41;
		public bool KeysDown_42;
		public bool KeysDown_43;
		public bool KeysDown_44;
		public bool KeysDown_45;
		public bool KeysDown_46;
		public bool KeysDown_47;
		public bool KeysDown_48;
		public bool KeysDown_49;
		public bool KeysDown_50;
		public bool KeysDown_51;
		public bool KeysDown_52;
		public bool KeysDown_53;
		public bool KeysDown_54;
		public bool KeysDown_55;
		public bool KeysDown_56;
		public bool KeysDown_57;
		public bool KeysDown_58;
		public bool KeysDown_59;
		public bool KeysDown_60;
		public bool KeysDown_61;
		public bool KeysDown_62;
		public bool KeysDown_63;
		public bool KeysDown_64;
		public bool KeysDown_65;
		public bool KeysDown_66;
		public bool KeysDown_67;
		public bool KeysDown_68;
		public bool KeysDown_69;
		public bool KeysDown_70;
		public bool KeysDown_71;
		public bool KeysDown_72;
		public bool KeysDown_73;
		public bool KeysDown_74;
		public bool KeysDown_75;
		public bool KeysDown_76;
		public bool KeysDown_77;
		public bool KeysDown_78;
		public bool KeysDown_79;
		public bool KeysDown_80;
		public bool KeysDown_81;
		public bool KeysDown_82;
		public bool KeysDown_83;
		public bool KeysDown_84;
		public bool KeysDown_85;
		public bool KeysDown_86;
		public bool KeysDown_87;
		public bool KeysDown_88;
		public bool KeysDown_89;
		public bool KeysDown_90;
		public bool KeysDown_91;
		public bool KeysDown_92;
		public bool KeysDown_93;
		public bool KeysDown_94;
		public bool KeysDown_95;
		public bool KeysDown_96;
		public bool KeysDown_97;
		public bool KeysDown_98;
		public bool KeysDown_99;
		public bool KeysDown_100;
		public bool KeysDown_101;
		public bool KeysDown_102;
		public bool KeysDown_103;
		public bool KeysDown_104;
		public bool KeysDown_105;
		public bool KeysDown_106;
		public bool KeysDown_107;
		public bool KeysDown_108;
		public bool KeysDown_109;
		public bool KeysDown_110;
		public bool KeysDown_111;
		public bool KeysDown_112;
		public bool KeysDown_113;
		public bool KeysDown_114;
		public bool KeysDown_115;
		public bool KeysDown_116;
		public bool KeysDown_117;
		public bool KeysDown_118;
		public bool KeysDown_119;
		public bool KeysDown_120;
		public bool KeysDown_121;
		public bool KeysDown_122;
		public bool KeysDown_123;
		public bool KeysDown_124;
		public bool KeysDown_125;
		public bool KeysDown_126;
		public bool KeysDown_127;
		public bool KeysDown_128;
		public bool KeysDown_129;
		public bool KeysDown_130;
		public bool KeysDown_131;
		public bool KeysDown_132;
		public bool KeysDown_133;
		public bool KeysDown_134;
		public bool KeysDown_135;
		public bool KeysDown_136;
		public bool KeysDown_137;
		public bool KeysDown_138;
		public bool KeysDown_139;
		public bool KeysDown_140;
		public bool KeysDown_141;
		public bool KeysDown_142;
		public bool KeysDown_143;
		public bool KeysDown_144;
		public bool KeysDown_145;
		public bool KeysDown_146;
		public bool KeysDown_147;
		public bool KeysDown_148;
		public bool KeysDown_149;
		public bool KeysDown_150;
		public bool KeysDown_151;
		public bool KeysDown_152;
		public bool KeysDown_153;
		public bool KeysDown_154;
		public bool KeysDown_155;
		public bool KeysDown_156;
		public bool KeysDown_157;
		public bool KeysDown_158;
		public bool KeysDown_159;
		public bool KeysDown_160;
		public bool KeysDown_161;
		public bool KeysDown_162;
		public bool KeysDown_163;
		public bool KeysDown_164;
		public bool KeysDown_165;
		public bool KeysDown_166;
		public bool KeysDown_167;
		public bool KeysDown_168;
		public bool KeysDown_169;
		public bool KeysDown_170;
		public bool KeysDown_171;
		public bool KeysDown_172;
		public bool KeysDown_173;
		public bool KeysDown_174;
		public bool KeysDown_175;
		public bool KeysDown_176;
		public bool KeysDown_177;
		public bool KeysDown_178;
		public bool KeysDown_179;
		public bool KeysDown_180;
		public bool KeysDown_181;
		public bool KeysDown_182;
		public bool KeysDown_183;
		public bool KeysDown_184;
		public bool KeysDown_185;
		public bool KeysDown_186;
		public bool KeysDown_187;
		public bool KeysDown_188;
		public bool KeysDown_189;
		public bool KeysDown_190;
		public bool KeysDown_191;
		public bool KeysDown_192;
		public bool KeysDown_193;
		public bool KeysDown_194;
		public bool KeysDown_195;
		public bool KeysDown_196;
		public bool KeysDown_197;
		public bool KeysDown_198;
		public bool KeysDown_199;
		public bool KeysDown_200;
		public bool KeysDown_201;
		public bool KeysDown_202;
		public bool KeysDown_203;
		public bool KeysDown_204;
		public bool KeysDown_205;
		public bool KeysDown_206;
		public bool KeysDown_207;
		public bool KeysDown_208;
		public bool KeysDown_209;
		public bool KeysDown_210;
		public bool KeysDown_211;
		public bool KeysDown_212;
		public bool KeysDown_213;
		public bool KeysDown_214;
		public bool KeysDown_215;
		public bool KeysDown_216;
		public bool KeysDown_217;
		public bool KeysDown_218;
		public bool KeysDown_219;
		public bool KeysDown_220;
		public bool KeysDown_221;
		public bool KeysDown_222;
		public bool KeysDown_223;
		public bool KeysDown_224;
		public bool KeysDown_225;
		public bool KeysDown_226;
		public bool KeysDown_227;
		public bool KeysDown_228;
		public bool KeysDown_229;
		public bool KeysDown_230;
		public bool KeysDown_231;
		public bool KeysDown_232;
		public bool KeysDown_233;
		public bool KeysDown_234;
		public bool KeysDown_235;
		public bool KeysDown_236;
		public bool KeysDown_237;
		public bool KeysDown_238;
		public bool KeysDown_239;
		public bool KeysDown_240;
		public bool KeysDown_241;
		public bool KeysDown_242;
		public bool KeysDown_243;
		public bool KeysDown_244;
		public bool KeysDown_245;
		public bool KeysDown_246;
		public bool KeysDown_247;
		public bool KeysDown_248;
		public bool KeysDown_249;
		public bool KeysDown_250;
		public bool KeysDown_251;
		public bool KeysDown_252;
		public bool KeysDown_253;
		public bool KeysDown_254;
		public bool KeysDown_255;
		public bool KeysDown_256;
		public bool KeysDown_257;
		public bool KeysDown_258;
		public bool KeysDown_259;
		public bool KeysDown_260;
		public bool KeysDown_261;
		public bool KeysDown_262;
		public bool KeysDown_263;
		public bool KeysDown_264;
		public bool KeysDown_265;
		public bool KeysDown_266;
		public bool KeysDown_267;
		public bool KeysDown_268;
		public bool KeysDown_269;
		public bool KeysDown_270;
		public bool KeysDown_271;
		public bool KeysDown_272;
		public bool KeysDown_273;
		public bool KeysDown_274;
		public bool KeysDown_275;
		public bool KeysDown_276;
		public bool KeysDown_277;
		public bool KeysDown_278;
		public bool KeysDown_279;
		public bool KeysDown_280;
		public bool KeysDown_281;
		public bool KeysDown_282;
		public bool KeysDown_283;
		public bool KeysDown_284;
		public bool KeysDown_285;
		public bool KeysDown_286;
		public bool KeysDown_287;
		public bool KeysDown_288;
		public bool KeysDown_289;
		public bool KeysDown_290;
		public bool KeysDown_291;
		public bool KeysDown_292;
		public bool KeysDown_293;
		public bool KeysDown_294;
		public bool KeysDown_295;
		public bool KeysDown_296;
		public bool KeysDown_297;
		public bool KeysDown_298;
		public bool KeysDown_299;
		public bool KeysDown_300;
		public bool KeysDown_301;
		public bool KeysDown_302;
		public bool KeysDown_303;
		public bool KeysDown_304;
		public bool KeysDown_305;
		public bool KeysDown_306;
		public bool KeysDown_307;
		public bool KeysDown_308;
		public bool KeysDown_309;
		public bool KeysDown_310;
		public bool KeysDown_311;
		public bool KeysDown_312;
		public bool KeysDown_313;
		public bool KeysDown_314;
		public bool KeysDown_315;
		public bool KeysDown_316;
		public bool KeysDown_317;
		public bool KeysDown_318;
		public bool KeysDown_319;
		public bool KeysDown_320;
		public bool KeysDown_321;
		public bool KeysDown_322;
		public bool KeysDown_323;
		public bool KeysDown_324;
		public bool KeysDown_325;
		public bool KeysDown_326;
		public bool KeysDown_327;
		public bool KeysDown_328;
		public bool KeysDown_329;
		public bool KeysDown_330;
		public bool KeysDown_331;
		public bool KeysDown_332;
		public bool KeysDown_333;
		public bool KeysDown_334;
		public bool KeysDown_335;
		public bool KeysDown_336;
		public bool KeysDown_337;
		public bool KeysDown_338;
		public bool KeysDown_339;
		public bool KeysDown_340;
		public bool KeysDown_341;
		public bool KeysDown_342;
		public bool KeysDown_343;
		public bool KeysDown_344;
		public bool KeysDown_345;
		public bool KeysDown_346;
		public bool KeysDown_347;
		public bool KeysDown_348;
		public bool KeysDown_349;
		public bool KeysDown_350;
		public bool KeysDown_351;
		public bool KeysDown_352;
		public bool KeysDown_353;
		public bool KeysDown_354;
		public bool KeysDown_355;
		public bool KeysDown_356;
		public bool KeysDown_357;
		public bool KeysDown_358;
		public bool KeysDown_359;
		public bool KeysDown_360;
		public bool KeysDown_361;
		public bool KeysDown_362;
		public bool KeysDown_363;
		public bool KeysDown_364;
		public bool KeysDown_365;
		public bool KeysDown_366;
		public bool KeysDown_367;
		public bool KeysDown_368;
		public bool KeysDown_369;
		public bool KeysDown_370;
		public bool KeysDown_371;
		public bool KeysDown_372;
		public bool KeysDown_373;
		public bool KeysDown_374;
		public bool KeysDown_375;
		public bool KeysDown_376;
		public bool KeysDown_377;
		public bool KeysDown_378;
		public bool KeysDown_379;
		public bool KeysDown_380;
		public bool KeysDown_381;
		public bool KeysDown_382;
		public bool KeysDown_383;
		public bool KeysDown_384;
		public bool KeysDown_385;
		public bool KeysDown_386;
		public bool KeysDown_387;
		public bool KeysDown_388;
		public bool KeysDown_389;
		public bool KeysDown_390;
		public bool KeysDown_391;
		public bool KeysDown_392;
		public bool KeysDown_393;
		public bool KeysDown_394;
		public bool KeysDown_395;
		public bool KeysDown_396;
		public bool KeysDown_397;
		public bool KeysDown_398;
		public bool KeysDown_399;
		public bool KeysDown_400;
		public bool KeysDown_401;
		public bool KeysDown_402;
		public bool KeysDown_403;
		public bool KeysDown_404;
		public bool KeysDown_405;
		public bool KeysDown_406;
		public bool KeysDown_407;
		public bool KeysDown_408;
		public bool KeysDown_409;
		public bool KeysDown_410;
		public bool KeysDown_411;
		public bool KeysDown_412;
		public bool KeysDown_413;
		public bool KeysDown_414;
		public bool KeysDown_415;
		public bool KeysDown_416;
		public bool KeysDown_417;
		public bool KeysDown_418;
		public bool KeysDown_419;
		public bool KeysDown_420;
		public bool KeysDown_421;
		public bool KeysDown_422;
		public bool KeysDown_423;
		public bool KeysDown_424;
		public bool KeysDown_425;
		public bool KeysDown_426;
		public bool KeysDown_427;
		public bool KeysDown_428;
		public bool KeysDown_429;
		public bool KeysDown_430;
		public bool KeysDown_431;
		public bool KeysDown_432;
		public bool KeysDown_433;
		public bool KeysDown_434;
		public bool KeysDown_435;
		public bool KeysDown_436;
		public bool KeysDown_437;
		public bool KeysDown_438;
		public bool KeysDown_439;
		public bool KeysDown_440;
		public bool KeysDown_441;
		public bool KeysDown_442;
		public bool KeysDown_443;
		public bool KeysDown_444;
		public bool KeysDown_445;
		public bool KeysDown_446;
		public bool KeysDown_447;
		public bool KeysDown_448;
		public bool KeysDown_449;
		public bool KeysDown_450;
		public bool KeysDown_451;
		public bool KeysDown_452;
		public bool KeysDown_453;
		public bool KeysDown_454;
		public bool KeysDown_455;
		public bool KeysDown_456;
		public bool KeysDown_457;
		public bool KeysDown_458;
		public bool KeysDown_459;
		public bool KeysDown_460;
		public bool KeysDown_461;
		public bool KeysDown_462;
		public bool KeysDown_463;
		public bool KeysDown_464;
		public bool KeysDown_465;
		public bool KeysDown_466;
		public bool KeysDown_467;
		public bool KeysDown_468;
		public bool KeysDown_469;
		public bool KeysDown_470;
		public bool KeysDown_471;
		public bool KeysDown_472;
		public bool KeysDown_473;
		public bool KeysDown_474;
		public bool KeysDown_475;
		public bool KeysDown_476;
		public bool KeysDown_477;
		public bool KeysDown_478;
		public bool KeysDown_479;
		public bool KeysDown_480;
		public bool KeysDown_481;
		public bool KeysDown_482;
		public bool KeysDown_483;
		public bool KeysDown_484;
		public bool KeysDown_485;
		public bool KeysDown_486;
		public bool KeysDown_487;
		public bool KeysDown_488;
		public bool KeysDown_489;
		public bool KeysDown_490;
		public bool KeysDown_491;
		public bool KeysDown_492;
		public bool KeysDown_493;
		public bool KeysDown_494;
		public bool KeysDown_495;
		public bool KeysDown_496;
		public bool KeysDown_497;
		public bool KeysDown_498;
		public bool KeysDown_499;
		public bool KeysDown_500;
		public bool KeysDown_501;
		public bool KeysDown_502;
		public bool KeysDown_503;
		public bool KeysDown_504;
		public bool KeysDown_505;
		public bool KeysDown_506;
		public bool KeysDown_507;
		public bool KeysDown_508;
		public bool KeysDown_509;
		public bool KeysDown_510;
		public bool KeysDown_511;
		public bool KeysDown_512;
		public bool KeysDown_513;
		public bool KeysDown_514;
		public bool KeysDown_515;
		public bool KeysDown_516;
		public bool KeysDown_517;
		public bool KeysDown_518;
		public bool KeysDown_519;
		public bool KeysDown_520;
		public bool KeysDown_521;
		public bool KeysDown_522;
		public bool KeysDown_523;
		public bool KeysDown_524;
		public bool KeysDown_525;
		public bool KeysDown_526;
		public bool KeysDown_527;
		public bool KeysDown_528;
		public bool KeysDown_529;
		public bool KeysDown_530;
		public bool KeysDown_531;
		public bool KeysDown_532;
		public bool KeysDown_533;
		public bool KeysDown_534;
		public bool KeysDown_535;
		public bool KeysDown_536;
		public bool KeysDown_537;
		public bool KeysDown_538;
		public bool KeysDown_539;
		public bool KeysDown_540;
		public bool KeysDown_541;
		public bool KeysDown_542;
		public bool KeysDown_543;
		public bool KeysDown_544;
		public bool KeysDown_545;
		public bool KeysDown_546;
		public bool KeysDown_547;
		public bool KeysDown_548;
		public bool KeysDown_549;
		public bool KeysDown_550;
		public bool KeysDown_551;
		public bool KeysDown_552;
		public bool KeysDown_553;
		public bool KeysDown_554;
		public bool KeysDown_555;
		public bool KeysDown_556;
		public bool KeysDown_557;
		public bool KeysDown_558;
		public bool KeysDown_559;
		public bool KeysDown_560;
		public bool KeysDown_561;
		public bool KeysDown_562;
		public bool KeysDown_563;
		public bool KeysDown_564;
		public bool KeysDown_565;
		public bool KeysDown_566;
		public bool KeysDown_567;
		public bool KeysDown_568;
		public bool KeysDown_569;
		public bool KeysDown_570;
		public bool KeysDown_571;
		public bool KeysDown_572;
		public bool KeysDown_573;
		public bool KeysDown_574;
		public bool KeysDown_575;
		public bool KeysDown_576;
		public bool KeysDown_577;
		public bool KeysDown_578;
		public bool KeysDown_579;
		public bool KeysDown_580;
		public bool KeysDown_581;
		public bool KeysDown_582;
		public bool KeysDown_583;
		public bool KeysDown_584;
		public bool KeysDown_585;
		public bool KeysDown_586;
		public bool KeysDown_587;
		public bool KeysDown_588;
		public bool KeysDown_589;
		public bool KeysDown_590;
		public bool KeysDown_591;
		public bool KeysDown_592;
		public bool KeysDown_593;
		public bool KeysDown_594;
		public bool KeysDown_595;
		public bool KeysDown_596;
		public bool KeysDown_597;
		public bool KeysDown_598;
		public bool KeysDown_599;
		public bool KeysDown_600;
		public bool KeysDown_601;
		public bool KeysDown_602;
		public bool KeysDown_603;
		public bool KeysDown_604;
		public bool KeysDown_605;
		public bool KeysDown_606;
		public bool KeysDown_607;
		public bool KeysDown_608;
		public bool KeysDown_609;
		public bool KeysDown_610;
		public bool KeysDown_611;
		public bool KeysDown_612;
		public bool KeysDown_613;
		public bool KeysDown_614;
		public bool KeysDown_615;
		public bool KeysDown_616;
		public bool KeysDown_617;
		public bool KeysDown_618;
		public bool KeysDown_619;
		public bool KeysDown_620;
		public bool KeysDown_621;
		public bool KeysDown_622;
		public bool KeysDown_623;
		public bool KeysDown_624;
		public bool KeysDown_625;
		public bool KeysDown_626;
		public bool KeysDown_627;
		public bool KeysDown_628;
		public bool KeysDown_629;
		public bool KeysDown_630;
		public bool KeysDown_631;
		public bool KeysDown_632;
		public bool KeysDown_633;
		public bool KeysDown_634;
		public bool KeysDown_635;
		public bool KeysDown_636;
		public bool KeysDown_637;
		public bool KeysDown_638;
		public bool KeysDown_639;
		public bool KeysDown_640;
		public bool KeysDown_641;
		public bool KeysDown_642;
		public bool KeysDown_643;
		public bool KeysDown_644;
		public bool KeysDown_645;
		public bool KeysDown_646;
		public bool KeysDown_647;
		public bool KeysDown_648;
		public bool KeysDown_649;
		public bool KeysDown_650;
		public bool KeysDown_651;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavInputs")]
		[NativeName(NativeNameType.Type, "float[16]")]
		public float NavInputs_0;
		public float NavInputs_1;
		public float NavInputs_2;
		public float NavInputs_3;
		public float NavInputs_4;
		public float NavInputs_5;
		public float NavInputs_6;
		public float NavInputs_7;
		public float NavInputs_8;
		public float NavInputs_9;
		public float NavInputs_10;
		public float NavInputs_11;
		public float NavInputs_12;
		public float NavInputs_13;
		public float NavInputs_14;
		public float NavInputs_15;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Ctx")]
		[NativeName(NativeNameType.Type, "ImGuiContext*")]
		public unsafe ImGuiContext* Ctx;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MousePos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 MousePos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDown")]
		[NativeName(NativeNameType.Type, "bool[5]")]
		public bool MouseDown_0;
		public bool MouseDown_1;
		public bool MouseDown_2;
		public bool MouseDown_3;
		public bool MouseDown_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseWheel")]
		[NativeName(NativeNameType.Type, "float")]
		public float MouseWheel;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseWheelH")]
		[NativeName(NativeNameType.Type, "float")]
		public float MouseWheelH;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseSource")]
		[NativeName(NativeNameType.Type, "ImGuiMouseSource")]
		public ImGuiMouseSource MouseSource;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseHoveredViewport")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int MouseHoveredViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "KeyCtrl")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte KeyCtrl;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "KeyShift")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte KeyShift;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "KeyAlt")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte KeyAlt;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "KeySuper")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte KeySuper;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "KeyMods")]
		[NativeName(NativeNameType.Type, "ImGuiKeyChord")]
		public int KeyMods;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "KeysData")]
		[NativeName(NativeNameType.Type, "ImGuiKeyData[652]")]
		public ImGuiKeyData KeysData_0;
		public ImGuiKeyData KeysData_1;
		public ImGuiKeyData KeysData_2;
		public ImGuiKeyData KeysData_3;
		public ImGuiKeyData KeysData_4;
		public ImGuiKeyData KeysData_5;
		public ImGuiKeyData KeysData_6;
		public ImGuiKeyData KeysData_7;
		public ImGuiKeyData KeysData_8;
		public ImGuiKeyData KeysData_9;
		public ImGuiKeyData KeysData_10;
		public ImGuiKeyData KeysData_11;
		public ImGuiKeyData KeysData_12;
		public ImGuiKeyData KeysData_13;
		public ImGuiKeyData KeysData_14;
		public ImGuiKeyData KeysData_15;
		public ImGuiKeyData KeysData_16;
		public ImGuiKeyData KeysData_17;
		public ImGuiKeyData KeysData_18;
		public ImGuiKeyData KeysData_19;
		public ImGuiKeyData KeysData_20;
		public ImGuiKeyData KeysData_21;
		public ImGuiKeyData KeysData_22;
		public ImGuiKeyData KeysData_23;
		public ImGuiKeyData KeysData_24;
		public ImGuiKeyData KeysData_25;
		public ImGuiKeyData KeysData_26;
		public ImGuiKeyData KeysData_27;
		public ImGuiKeyData KeysData_28;
		public ImGuiKeyData KeysData_29;
		public ImGuiKeyData KeysData_30;
		public ImGuiKeyData KeysData_31;
		public ImGuiKeyData KeysData_32;
		public ImGuiKeyData KeysData_33;
		public ImGuiKeyData KeysData_34;
		public ImGuiKeyData KeysData_35;
		public ImGuiKeyData KeysData_36;
		public ImGuiKeyData KeysData_37;
		public ImGuiKeyData KeysData_38;
		public ImGuiKeyData KeysData_39;
		public ImGuiKeyData KeysData_40;
		public ImGuiKeyData KeysData_41;
		public ImGuiKeyData KeysData_42;
		public ImGuiKeyData KeysData_43;
		public ImGuiKeyData KeysData_44;
		public ImGuiKeyData KeysData_45;
		public ImGuiKeyData KeysData_46;
		public ImGuiKeyData KeysData_47;
		public ImGuiKeyData KeysData_48;
		public ImGuiKeyData KeysData_49;
		public ImGuiKeyData KeysData_50;
		public ImGuiKeyData KeysData_51;
		public ImGuiKeyData KeysData_52;
		public ImGuiKeyData KeysData_53;
		public ImGuiKeyData KeysData_54;
		public ImGuiKeyData KeysData_55;
		public ImGuiKeyData KeysData_56;
		public ImGuiKeyData KeysData_57;
		public ImGuiKeyData KeysData_58;
		public ImGuiKeyData KeysData_59;
		public ImGuiKeyData KeysData_60;
		public ImGuiKeyData KeysData_61;
		public ImGuiKeyData KeysData_62;
		public ImGuiKeyData KeysData_63;
		public ImGuiKeyData KeysData_64;
		public ImGuiKeyData KeysData_65;
		public ImGuiKeyData KeysData_66;
		public ImGuiKeyData KeysData_67;
		public ImGuiKeyData KeysData_68;
		public ImGuiKeyData KeysData_69;
		public ImGuiKeyData KeysData_70;
		public ImGuiKeyData KeysData_71;
		public ImGuiKeyData KeysData_72;
		public ImGuiKeyData KeysData_73;
		public ImGuiKeyData KeysData_74;
		public ImGuiKeyData KeysData_75;
		public ImGuiKeyData KeysData_76;
		public ImGuiKeyData KeysData_77;
		public ImGuiKeyData KeysData_78;
		public ImGuiKeyData KeysData_79;
		public ImGuiKeyData KeysData_80;
		public ImGuiKeyData KeysData_81;
		public ImGuiKeyData KeysData_82;
		public ImGuiKeyData KeysData_83;
		public ImGuiKeyData KeysData_84;
		public ImGuiKeyData KeysData_85;
		public ImGuiKeyData KeysData_86;
		public ImGuiKeyData KeysData_87;
		public ImGuiKeyData KeysData_88;
		public ImGuiKeyData KeysData_89;
		public ImGuiKeyData KeysData_90;
		public ImGuiKeyData KeysData_91;
		public ImGuiKeyData KeysData_92;
		public ImGuiKeyData KeysData_93;
		public ImGuiKeyData KeysData_94;
		public ImGuiKeyData KeysData_95;
		public ImGuiKeyData KeysData_96;
		public ImGuiKeyData KeysData_97;
		public ImGuiKeyData KeysData_98;
		public ImGuiKeyData KeysData_99;
		public ImGuiKeyData KeysData_100;
		public ImGuiKeyData KeysData_101;
		public ImGuiKeyData KeysData_102;
		public ImGuiKeyData KeysData_103;
		public ImGuiKeyData KeysData_104;
		public ImGuiKeyData KeysData_105;
		public ImGuiKeyData KeysData_106;
		public ImGuiKeyData KeysData_107;
		public ImGuiKeyData KeysData_108;
		public ImGuiKeyData KeysData_109;
		public ImGuiKeyData KeysData_110;
		public ImGuiKeyData KeysData_111;
		public ImGuiKeyData KeysData_112;
		public ImGuiKeyData KeysData_113;
		public ImGuiKeyData KeysData_114;
		public ImGuiKeyData KeysData_115;
		public ImGuiKeyData KeysData_116;
		public ImGuiKeyData KeysData_117;
		public ImGuiKeyData KeysData_118;
		public ImGuiKeyData KeysData_119;
		public ImGuiKeyData KeysData_120;
		public ImGuiKeyData KeysData_121;
		public ImGuiKeyData KeysData_122;
		public ImGuiKeyData KeysData_123;
		public ImGuiKeyData KeysData_124;
		public ImGuiKeyData KeysData_125;
		public ImGuiKeyData KeysData_126;
		public ImGuiKeyData KeysData_127;
		public ImGuiKeyData KeysData_128;
		public ImGuiKeyData KeysData_129;
		public ImGuiKeyData KeysData_130;
		public ImGuiKeyData KeysData_131;
		public ImGuiKeyData KeysData_132;
		public ImGuiKeyData KeysData_133;
		public ImGuiKeyData KeysData_134;
		public ImGuiKeyData KeysData_135;
		public ImGuiKeyData KeysData_136;
		public ImGuiKeyData KeysData_137;
		public ImGuiKeyData KeysData_138;
		public ImGuiKeyData KeysData_139;
		public ImGuiKeyData KeysData_140;
		public ImGuiKeyData KeysData_141;
		public ImGuiKeyData KeysData_142;
		public ImGuiKeyData KeysData_143;
		public ImGuiKeyData KeysData_144;
		public ImGuiKeyData KeysData_145;
		public ImGuiKeyData KeysData_146;
		public ImGuiKeyData KeysData_147;
		public ImGuiKeyData KeysData_148;
		public ImGuiKeyData KeysData_149;
		public ImGuiKeyData KeysData_150;
		public ImGuiKeyData KeysData_151;
		public ImGuiKeyData KeysData_152;
		public ImGuiKeyData KeysData_153;
		public ImGuiKeyData KeysData_154;
		public ImGuiKeyData KeysData_155;
		public ImGuiKeyData KeysData_156;
		public ImGuiKeyData KeysData_157;
		public ImGuiKeyData KeysData_158;
		public ImGuiKeyData KeysData_159;
		public ImGuiKeyData KeysData_160;
		public ImGuiKeyData KeysData_161;
		public ImGuiKeyData KeysData_162;
		public ImGuiKeyData KeysData_163;
		public ImGuiKeyData KeysData_164;
		public ImGuiKeyData KeysData_165;
		public ImGuiKeyData KeysData_166;
		public ImGuiKeyData KeysData_167;
		public ImGuiKeyData KeysData_168;
		public ImGuiKeyData KeysData_169;
		public ImGuiKeyData KeysData_170;
		public ImGuiKeyData KeysData_171;
		public ImGuiKeyData KeysData_172;
		public ImGuiKeyData KeysData_173;
		public ImGuiKeyData KeysData_174;
		public ImGuiKeyData KeysData_175;
		public ImGuiKeyData KeysData_176;
		public ImGuiKeyData KeysData_177;
		public ImGuiKeyData KeysData_178;
		public ImGuiKeyData KeysData_179;
		public ImGuiKeyData KeysData_180;
		public ImGuiKeyData KeysData_181;
		public ImGuiKeyData KeysData_182;
		public ImGuiKeyData KeysData_183;
		public ImGuiKeyData KeysData_184;
		public ImGuiKeyData KeysData_185;
		public ImGuiKeyData KeysData_186;
		public ImGuiKeyData KeysData_187;
		public ImGuiKeyData KeysData_188;
		public ImGuiKeyData KeysData_189;
		public ImGuiKeyData KeysData_190;
		public ImGuiKeyData KeysData_191;
		public ImGuiKeyData KeysData_192;
		public ImGuiKeyData KeysData_193;
		public ImGuiKeyData KeysData_194;
		public ImGuiKeyData KeysData_195;
		public ImGuiKeyData KeysData_196;
		public ImGuiKeyData KeysData_197;
		public ImGuiKeyData KeysData_198;
		public ImGuiKeyData KeysData_199;
		public ImGuiKeyData KeysData_200;
		public ImGuiKeyData KeysData_201;
		public ImGuiKeyData KeysData_202;
		public ImGuiKeyData KeysData_203;
		public ImGuiKeyData KeysData_204;
		public ImGuiKeyData KeysData_205;
		public ImGuiKeyData KeysData_206;
		public ImGuiKeyData KeysData_207;
		public ImGuiKeyData KeysData_208;
		public ImGuiKeyData KeysData_209;
		public ImGuiKeyData KeysData_210;
		public ImGuiKeyData KeysData_211;
		public ImGuiKeyData KeysData_212;
		public ImGuiKeyData KeysData_213;
		public ImGuiKeyData KeysData_214;
		public ImGuiKeyData KeysData_215;
		public ImGuiKeyData KeysData_216;
		public ImGuiKeyData KeysData_217;
		public ImGuiKeyData KeysData_218;
		public ImGuiKeyData KeysData_219;
		public ImGuiKeyData KeysData_220;
		public ImGuiKeyData KeysData_221;
		public ImGuiKeyData KeysData_222;
		public ImGuiKeyData KeysData_223;
		public ImGuiKeyData KeysData_224;
		public ImGuiKeyData KeysData_225;
		public ImGuiKeyData KeysData_226;
		public ImGuiKeyData KeysData_227;
		public ImGuiKeyData KeysData_228;
		public ImGuiKeyData KeysData_229;
		public ImGuiKeyData KeysData_230;
		public ImGuiKeyData KeysData_231;
		public ImGuiKeyData KeysData_232;
		public ImGuiKeyData KeysData_233;
		public ImGuiKeyData KeysData_234;
		public ImGuiKeyData KeysData_235;
		public ImGuiKeyData KeysData_236;
		public ImGuiKeyData KeysData_237;
		public ImGuiKeyData KeysData_238;
		public ImGuiKeyData KeysData_239;
		public ImGuiKeyData KeysData_240;
		public ImGuiKeyData KeysData_241;
		public ImGuiKeyData KeysData_242;
		public ImGuiKeyData KeysData_243;
		public ImGuiKeyData KeysData_244;
		public ImGuiKeyData KeysData_245;
		public ImGuiKeyData KeysData_246;
		public ImGuiKeyData KeysData_247;
		public ImGuiKeyData KeysData_248;
		public ImGuiKeyData KeysData_249;
		public ImGuiKeyData KeysData_250;
		public ImGuiKeyData KeysData_251;
		public ImGuiKeyData KeysData_252;
		public ImGuiKeyData KeysData_253;
		public ImGuiKeyData KeysData_254;
		public ImGuiKeyData KeysData_255;
		public ImGuiKeyData KeysData_256;
		public ImGuiKeyData KeysData_257;
		public ImGuiKeyData KeysData_258;
		public ImGuiKeyData KeysData_259;
		public ImGuiKeyData KeysData_260;
		public ImGuiKeyData KeysData_261;
		public ImGuiKeyData KeysData_262;
		public ImGuiKeyData KeysData_263;
		public ImGuiKeyData KeysData_264;
		public ImGuiKeyData KeysData_265;
		public ImGuiKeyData KeysData_266;
		public ImGuiKeyData KeysData_267;
		public ImGuiKeyData KeysData_268;
		public ImGuiKeyData KeysData_269;
		public ImGuiKeyData KeysData_270;
		public ImGuiKeyData KeysData_271;
		public ImGuiKeyData KeysData_272;
		public ImGuiKeyData KeysData_273;
		public ImGuiKeyData KeysData_274;
		public ImGuiKeyData KeysData_275;
		public ImGuiKeyData KeysData_276;
		public ImGuiKeyData KeysData_277;
		public ImGuiKeyData KeysData_278;
		public ImGuiKeyData KeysData_279;
		public ImGuiKeyData KeysData_280;
		public ImGuiKeyData KeysData_281;
		public ImGuiKeyData KeysData_282;
		public ImGuiKeyData KeysData_283;
		public ImGuiKeyData KeysData_284;
		public ImGuiKeyData KeysData_285;
		public ImGuiKeyData KeysData_286;
		public ImGuiKeyData KeysData_287;
		public ImGuiKeyData KeysData_288;
		public ImGuiKeyData KeysData_289;
		public ImGuiKeyData KeysData_290;
		public ImGuiKeyData KeysData_291;
		public ImGuiKeyData KeysData_292;
		public ImGuiKeyData KeysData_293;
		public ImGuiKeyData KeysData_294;
		public ImGuiKeyData KeysData_295;
		public ImGuiKeyData KeysData_296;
		public ImGuiKeyData KeysData_297;
		public ImGuiKeyData KeysData_298;
		public ImGuiKeyData KeysData_299;
		public ImGuiKeyData KeysData_300;
		public ImGuiKeyData KeysData_301;
		public ImGuiKeyData KeysData_302;
		public ImGuiKeyData KeysData_303;
		public ImGuiKeyData KeysData_304;
		public ImGuiKeyData KeysData_305;
		public ImGuiKeyData KeysData_306;
		public ImGuiKeyData KeysData_307;
		public ImGuiKeyData KeysData_308;
		public ImGuiKeyData KeysData_309;
		public ImGuiKeyData KeysData_310;
		public ImGuiKeyData KeysData_311;
		public ImGuiKeyData KeysData_312;
		public ImGuiKeyData KeysData_313;
		public ImGuiKeyData KeysData_314;
		public ImGuiKeyData KeysData_315;
		public ImGuiKeyData KeysData_316;
		public ImGuiKeyData KeysData_317;
		public ImGuiKeyData KeysData_318;
		public ImGuiKeyData KeysData_319;
		public ImGuiKeyData KeysData_320;
		public ImGuiKeyData KeysData_321;
		public ImGuiKeyData KeysData_322;
		public ImGuiKeyData KeysData_323;
		public ImGuiKeyData KeysData_324;
		public ImGuiKeyData KeysData_325;
		public ImGuiKeyData KeysData_326;
		public ImGuiKeyData KeysData_327;
		public ImGuiKeyData KeysData_328;
		public ImGuiKeyData KeysData_329;
		public ImGuiKeyData KeysData_330;
		public ImGuiKeyData KeysData_331;
		public ImGuiKeyData KeysData_332;
		public ImGuiKeyData KeysData_333;
		public ImGuiKeyData KeysData_334;
		public ImGuiKeyData KeysData_335;
		public ImGuiKeyData KeysData_336;
		public ImGuiKeyData KeysData_337;
		public ImGuiKeyData KeysData_338;
		public ImGuiKeyData KeysData_339;
		public ImGuiKeyData KeysData_340;
		public ImGuiKeyData KeysData_341;
		public ImGuiKeyData KeysData_342;
		public ImGuiKeyData KeysData_343;
		public ImGuiKeyData KeysData_344;
		public ImGuiKeyData KeysData_345;
		public ImGuiKeyData KeysData_346;
		public ImGuiKeyData KeysData_347;
		public ImGuiKeyData KeysData_348;
		public ImGuiKeyData KeysData_349;
		public ImGuiKeyData KeysData_350;
		public ImGuiKeyData KeysData_351;
		public ImGuiKeyData KeysData_352;
		public ImGuiKeyData KeysData_353;
		public ImGuiKeyData KeysData_354;
		public ImGuiKeyData KeysData_355;
		public ImGuiKeyData KeysData_356;
		public ImGuiKeyData KeysData_357;
		public ImGuiKeyData KeysData_358;
		public ImGuiKeyData KeysData_359;
		public ImGuiKeyData KeysData_360;
		public ImGuiKeyData KeysData_361;
		public ImGuiKeyData KeysData_362;
		public ImGuiKeyData KeysData_363;
		public ImGuiKeyData KeysData_364;
		public ImGuiKeyData KeysData_365;
		public ImGuiKeyData KeysData_366;
		public ImGuiKeyData KeysData_367;
		public ImGuiKeyData KeysData_368;
		public ImGuiKeyData KeysData_369;
		public ImGuiKeyData KeysData_370;
		public ImGuiKeyData KeysData_371;
		public ImGuiKeyData KeysData_372;
		public ImGuiKeyData KeysData_373;
		public ImGuiKeyData KeysData_374;
		public ImGuiKeyData KeysData_375;
		public ImGuiKeyData KeysData_376;
		public ImGuiKeyData KeysData_377;
		public ImGuiKeyData KeysData_378;
		public ImGuiKeyData KeysData_379;
		public ImGuiKeyData KeysData_380;
		public ImGuiKeyData KeysData_381;
		public ImGuiKeyData KeysData_382;
		public ImGuiKeyData KeysData_383;
		public ImGuiKeyData KeysData_384;
		public ImGuiKeyData KeysData_385;
		public ImGuiKeyData KeysData_386;
		public ImGuiKeyData KeysData_387;
		public ImGuiKeyData KeysData_388;
		public ImGuiKeyData KeysData_389;
		public ImGuiKeyData KeysData_390;
		public ImGuiKeyData KeysData_391;
		public ImGuiKeyData KeysData_392;
		public ImGuiKeyData KeysData_393;
		public ImGuiKeyData KeysData_394;
		public ImGuiKeyData KeysData_395;
		public ImGuiKeyData KeysData_396;
		public ImGuiKeyData KeysData_397;
		public ImGuiKeyData KeysData_398;
		public ImGuiKeyData KeysData_399;
		public ImGuiKeyData KeysData_400;
		public ImGuiKeyData KeysData_401;
		public ImGuiKeyData KeysData_402;
		public ImGuiKeyData KeysData_403;
		public ImGuiKeyData KeysData_404;
		public ImGuiKeyData KeysData_405;
		public ImGuiKeyData KeysData_406;
		public ImGuiKeyData KeysData_407;
		public ImGuiKeyData KeysData_408;
		public ImGuiKeyData KeysData_409;
		public ImGuiKeyData KeysData_410;
		public ImGuiKeyData KeysData_411;
		public ImGuiKeyData KeysData_412;
		public ImGuiKeyData KeysData_413;
		public ImGuiKeyData KeysData_414;
		public ImGuiKeyData KeysData_415;
		public ImGuiKeyData KeysData_416;
		public ImGuiKeyData KeysData_417;
		public ImGuiKeyData KeysData_418;
		public ImGuiKeyData KeysData_419;
		public ImGuiKeyData KeysData_420;
		public ImGuiKeyData KeysData_421;
		public ImGuiKeyData KeysData_422;
		public ImGuiKeyData KeysData_423;
		public ImGuiKeyData KeysData_424;
		public ImGuiKeyData KeysData_425;
		public ImGuiKeyData KeysData_426;
		public ImGuiKeyData KeysData_427;
		public ImGuiKeyData KeysData_428;
		public ImGuiKeyData KeysData_429;
		public ImGuiKeyData KeysData_430;
		public ImGuiKeyData KeysData_431;
		public ImGuiKeyData KeysData_432;
		public ImGuiKeyData KeysData_433;
		public ImGuiKeyData KeysData_434;
		public ImGuiKeyData KeysData_435;
		public ImGuiKeyData KeysData_436;
		public ImGuiKeyData KeysData_437;
		public ImGuiKeyData KeysData_438;
		public ImGuiKeyData KeysData_439;
		public ImGuiKeyData KeysData_440;
		public ImGuiKeyData KeysData_441;
		public ImGuiKeyData KeysData_442;
		public ImGuiKeyData KeysData_443;
		public ImGuiKeyData KeysData_444;
		public ImGuiKeyData KeysData_445;
		public ImGuiKeyData KeysData_446;
		public ImGuiKeyData KeysData_447;
		public ImGuiKeyData KeysData_448;
		public ImGuiKeyData KeysData_449;
		public ImGuiKeyData KeysData_450;
		public ImGuiKeyData KeysData_451;
		public ImGuiKeyData KeysData_452;
		public ImGuiKeyData KeysData_453;
		public ImGuiKeyData KeysData_454;
		public ImGuiKeyData KeysData_455;
		public ImGuiKeyData KeysData_456;
		public ImGuiKeyData KeysData_457;
		public ImGuiKeyData KeysData_458;
		public ImGuiKeyData KeysData_459;
		public ImGuiKeyData KeysData_460;
		public ImGuiKeyData KeysData_461;
		public ImGuiKeyData KeysData_462;
		public ImGuiKeyData KeysData_463;
		public ImGuiKeyData KeysData_464;
		public ImGuiKeyData KeysData_465;
		public ImGuiKeyData KeysData_466;
		public ImGuiKeyData KeysData_467;
		public ImGuiKeyData KeysData_468;
		public ImGuiKeyData KeysData_469;
		public ImGuiKeyData KeysData_470;
		public ImGuiKeyData KeysData_471;
		public ImGuiKeyData KeysData_472;
		public ImGuiKeyData KeysData_473;
		public ImGuiKeyData KeysData_474;
		public ImGuiKeyData KeysData_475;
		public ImGuiKeyData KeysData_476;
		public ImGuiKeyData KeysData_477;
		public ImGuiKeyData KeysData_478;
		public ImGuiKeyData KeysData_479;
		public ImGuiKeyData KeysData_480;
		public ImGuiKeyData KeysData_481;
		public ImGuiKeyData KeysData_482;
		public ImGuiKeyData KeysData_483;
		public ImGuiKeyData KeysData_484;
		public ImGuiKeyData KeysData_485;
		public ImGuiKeyData KeysData_486;
		public ImGuiKeyData KeysData_487;
		public ImGuiKeyData KeysData_488;
		public ImGuiKeyData KeysData_489;
		public ImGuiKeyData KeysData_490;
		public ImGuiKeyData KeysData_491;
		public ImGuiKeyData KeysData_492;
		public ImGuiKeyData KeysData_493;
		public ImGuiKeyData KeysData_494;
		public ImGuiKeyData KeysData_495;
		public ImGuiKeyData KeysData_496;
		public ImGuiKeyData KeysData_497;
		public ImGuiKeyData KeysData_498;
		public ImGuiKeyData KeysData_499;
		public ImGuiKeyData KeysData_500;
		public ImGuiKeyData KeysData_501;
		public ImGuiKeyData KeysData_502;
		public ImGuiKeyData KeysData_503;
		public ImGuiKeyData KeysData_504;
		public ImGuiKeyData KeysData_505;
		public ImGuiKeyData KeysData_506;
		public ImGuiKeyData KeysData_507;
		public ImGuiKeyData KeysData_508;
		public ImGuiKeyData KeysData_509;
		public ImGuiKeyData KeysData_510;
		public ImGuiKeyData KeysData_511;
		public ImGuiKeyData KeysData_512;
		public ImGuiKeyData KeysData_513;
		public ImGuiKeyData KeysData_514;
		public ImGuiKeyData KeysData_515;
		public ImGuiKeyData KeysData_516;
		public ImGuiKeyData KeysData_517;
		public ImGuiKeyData KeysData_518;
		public ImGuiKeyData KeysData_519;
		public ImGuiKeyData KeysData_520;
		public ImGuiKeyData KeysData_521;
		public ImGuiKeyData KeysData_522;
		public ImGuiKeyData KeysData_523;
		public ImGuiKeyData KeysData_524;
		public ImGuiKeyData KeysData_525;
		public ImGuiKeyData KeysData_526;
		public ImGuiKeyData KeysData_527;
		public ImGuiKeyData KeysData_528;
		public ImGuiKeyData KeysData_529;
		public ImGuiKeyData KeysData_530;
		public ImGuiKeyData KeysData_531;
		public ImGuiKeyData KeysData_532;
		public ImGuiKeyData KeysData_533;
		public ImGuiKeyData KeysData_534;
		public ImGuiKeyData KeysData_535;
		public ImGuiKeyData KeysData_536;
		public ImGuiKeyData KeysData_537;
		public ImGuiKeyData KeysData_538;
		public ImGuiKeyData KeysData_539;
		public ImGuiKeyData KeysData_540;
		public ImGuiKeyData KeysData_541;
		public ImGuiKeyData KeysData_542;
		public ImGuiKeyData KeysData_543;
		public ImGuiKeyData KeysData_544;
		public ImGuiKeyData KeysData_545;
		public ImGuiKeyData KeysData_546;
		public ImGuiKeyData KeysData_547;
		public ImGuiKeyData KeysData_548;
		public ImGuiKeyData KeysData_549;
		public ImGuiKeyData KeysData_550;
		public ImGuiKeyData KeysData_551;
		public ImGuiKeyData KeysData_552;
		public ImGuiKeyData KeysData_553;
		public ImGuiKeyData KeysData_554;
		public ImGuiKeyData KeysData_555;
		public ImGuiKeyData KeysData_556;
		public ImGuiKeyData KeysData_557;
		public ImGuiKeyData KeysData_558;
		public ImGuiKeyData KeysData_559;
		public ImGuiKeyData KeysData_560;
		public ImGuiKeyData KeysData_561;
		public ImGuiKeyData KeysData_562;
		public ImGuiKeyData KeysData_563;
		public ImGuiKeyData KeysData_564;
		public ImGuiKeyData KeysData_565;
		public ImGuiKeyData KeysData_566;
		public ImGuiKeyData KeysData_567;
		public ImGuiKeyData KeysData_568;
		public ImGuiKeyData KeysData_569;
		public ImGuiKeyData KeysData_570;
		public ImGuiKeyData KeysData_571;
		public ImGuiKeyData KeysData_572;
		public ImGuiKeyData KeysData_573;
		public ImGuiKeyData KeysData_574;
		public ImGuiKeyData KeysData_575;
		public ImGuiKeyData KeysData_576;
		public ImGuiKeyData KeysData_577;
		public ImGuiKeyData KeysData_578;
		public ImGuiKeyData KeysData_579;
		public ImGuiKeyData KeysData_580;
		public ImGuiKeyData KeysData_581;
		public ImGuiKeyData KeysData_582;
		public ImGuiKeyData KeysData_583;
		public ImGuiKeyData KeysData_584;
		public ImGuiKeyData KeysData_585;
		public ImGuiKeyData KeysData_586;
		public ImGuiKeyData KeysData_587;
		public ImGuiKeyData KeysData_588;
		public ImGuiKeyData KeysData_589;
		public ImGuiKeyData KeysData_590;
		public ImGuiKeyData KeysData_591;
		public ImGuiKeyData KeysData_592;
		public ImGuiKeyData KeysData_593;
		public ImGuiKeyData KeysData_594;
		public ImGuiKeyData KeysData_595;
		public ImGuiKeyData KeysData_596;
		public ImGuiKeyData KeysData_597;
		public ImGuiKeyData KeysData_598;
		public ImGuiKeyData KeysData_599;
		public ImGuiKeyData KeysData_600;
		public ImGuiKeyData KeysData_601;
		public ImGuiKeyData KeysData_602;
		public ImGuiKeyData KeysData_603;
		public ImGuiKeyData KeysData_604;
		public ImGuiKeyData KeysData_605;
		public ImGuiKeyData KeysData_606;
		public ImGuiKeyData KeysData_607;
		public ImGuiKeyData KeysData_608;
		public ImGuiKeyData KeysData_609;
		public ImGuiKeyData KeysData_610;
		public ImGuiKeyData KeysData_611;
		public ImGuiKeyData KeysData_612;
		public ImGuiKeyData KeysData_613;
		public ImGuiKeyData KeysData_614;
		public ImGuiKeyData KeysData_615;
		public ImGuiKeyData KeysData_616;
		public ImGuiKeyData KeysData_617;
		public ImGuiKeyData KeysData_618;
		public ImGuiKeyData KeysData_619;
		public ImGuiKeyData KeysData_620;
		public ImGuiKeyData KeysData_621;
		public ImGuiKeyData KeysData_622;
		public ImGuiKeyData KeysData_623;
		public ImGuiKeyData KeysData_624;
		public ImGuiKeyData KeysData_625;
		public ImGuiKeyData KeysData_626;
		public ImGuiKeyData KeysData_627;
		public ImGuiKeyData KeysData_628;
		public ImGuiKeyData KeysData_629;
		public ImGuiKeyData KeysData_630;
		public ImGuiKeyData KeysData_631;
		public ImGuiKeyData KeysData_632;
		public ImGuiKeyData KeysData_633;
		public ImGuiKeyData KeysData_634;
		public ImGuiKeyData KeysData_635;
		public ImGuiKeyData KeysData_636;
		public ImGuiKeyData KeysData_637;
		public ImGuiKeyData KeysData_638;
		public ImGuiKeyData KeysData_639;
		public ImGuiKeyData KeysData_640;
		public ImGuiKeyData KeysData_641;
		public ImGuiKeyData KeysData_642;
		public ImGuiKeyData KeysData_643;
		public ImGuiKeyData KeysData_644;
		public ImGuiKeyData KeysData_645;
		public ImGuiKeyData KeysData_646;
		public ImGuiKeyData KeysData_647;
		public ImGuiKeyData KeysData_648;
		public ImGuiKeyData KeysData_649;
		public ImGuiKeyData KeysData_650;
		public ImGuiKeyData KeysData_651;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantCaptureMouseUnlessPopupClose")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantCaptureMouseUnlessPopupClose;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MousePosPrev")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 MousePosPrev;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseClickedPos")]
		[NativeName(NativeNameType.Type, "ImVec2[5]")]
		public Vector2 MouseClickedPos_0;
		public Vector2 MouseClickedPos_1;
		public Vector2 MouseClickedPos_2;
		public Vector2 MouseClickedPos_3;
		public Vector2 MouseClickedPos_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseClickedTime")]
		[NativeName(NativeNameType.Type, "double[5]")]
		public double MouseClickedTime_0;
		public double MouseClickedTime_1;
		public double MouseClickedTime_2;
		public double MouseClickedTime_3;
		public double MouseClickedTime_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseClicked")]
		[NativeName(NativeNameType.Type, "bool[5]")]
		public bool MouseClicked_0;
		public bool MouseClicked_1;
		public bool MouseClicked_2;
		public bool MouseClicked_3;
		public bool MouseClicked_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDoubleClicked")]
		[NativeName(NativeNameType.Type, "bool[5]")]
		public bool MouseDoubleClicked_0;
		public bool MouseDoubleClicked_1;
		public bool MouseDoubleClicked_2;
		public bool MouseDoubleClicked_3;
		public bool MouseDoubleClicked_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseClickedCount")]
		[NativeName(NativeNameType.Type, "ImU16[5]")]
		public ushort MouseClickedCount_0;
		public ushort MouseClickedCount_1;
		public ushort MouseClickedCount_2;
		public ushort MouseClickedCount_3;
		public ushort MouseClickedCount_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseClickedLastCount")]
		[NativeName(NativeNameType.Type, "ImU16[5]")]
		public ushort MouseClickedLastCount_0;
		public ushort MouseClickedLastCount_1;
		public ushort MouseClickedLastCount_2;
		public ushort MouseClickedLastCount_3;
		public ushort MouseClickedLastCount_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseReleased")]
		[NativeName(NativeNameType.Type, "bool[5]")]
		public bool MouseReleased_0;
		public bool MouseReleased_1;
		public bool MouseReleased_2;
		public bool MouseReleased_3;
		public bool MouseReleased_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDownOwned")]
		[NativeName(NativeNameType.Type, "bool[5]")]
		public bool MouseDownOwned_0;
		public bool MouseDownOwned_1;
		public bool MouseDownOwned_2;
		public bool MouseDownOwned_3;
		public bool MouseDownOwned_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDownOwnedUnlessPopupClose")]
		[NativeName(NativeNameType.Type, "bool[5]")]
		public bool MouseDownOwnedUnlessPopupClose_0;
		public bool MouseDownOwnedUnlessPopupClose_1;
		public bool MouseDownOwnedUnlessPopupClose_2;
		public bool MouseDownOwnedUnlessPopupClose_3;
		public bool MouseDownOwnedUnlessPopupClose_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseWheelRequestAxisSwap")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte MouseWheelRequestAxisSwap;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDownDuration")]
		[NativeName(NativeNameType.Type, "float[5]")]
		public float MouseDownDuration_0;
		public float MouseDownDuration_1;
		public float MouseDownDuration_2;
		public float MouseDownDuration_3;
		public float MouseDownDuration_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDownDurationPrev")]
		[NativeName(NativeNameType.Type, "float[5]")]
		public float MouseDownDurationPrev_0;
		public float MouseDownDurationPrev_1;
		public float MouseDownDurationPrev_2;
		public float MouseDownDurationPrev_3;
		public float MouseDownDurationPrev_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDragMaxDistanceAbs")]
		[NativeName(NativeNameType.Type, "ImVec2[5]")]
		public Vector2 MouseDragMaxDistanceAbs_0;
		public Vector2 MouseDragMaxDistanceAbs_1;
		public Vector2 MouseDragMaxDistanceAbs_2;
		public Vector2 MouseDragMaxDistanceAbs_3;
		public Vector2 MouseDragMaxDistanceAbs_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDragMaxDistanceSqr")]
		[NativeName(NativeNameType.Type, "float[5]")]
		public float MouseDragMaxDistanceSqr_0;
		public float MouseDragMaxDistanceSqr_1;
		public float MouseDragMaxDistanceSqr_2;
		public float MouseDragMaxDistanceSqr_3;
		public float MouseDragMaxDistanceSqr_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PenPressure")]
		[NativeName(NativeNameType.Type, "float")]
		public float PenPressure;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AppFocusLost")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte AppFocusLost;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AppAcceptingEvents")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte AppAcceptingEvents;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackendUsingLegacyKeyArrays")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte BackendUsingLegacyKeyArrays;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackendUsingLegacyNavInputArray")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte BackendUsingLegacyNavInputArray;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InputQueueSurrogate")]
		[NativeName(NativeNameType.Type, "ImWchar16")]
		public char InputQueueSurrogate;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InputQueueCharacters")]
		[NativeName(NativeNameType.Type, "ImVector_ImWchar")]
		public ImVectorImWchar InputQueueCharacters;




		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<ImGuiKeyData> KeysData
		
		{
			get
			{
				fixed (ImGuiKeyData* p = &this.KeysData_0)
				{
					return new Span<ImGuiKeyData>(p, 652);
				}
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Vector2> MouseClickedPos
		
		{
			get
			{
				fixed (Vector2* p = &this.MouseClickedPos_0)
				{
					return new Span<Vector2>(p, 5);
				}
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Vector2> MouseDragMaxDistanceAbs
		
		{
			get
			{
				fixed (Vector2* p = &this.MouseDragMaxDistanceAbs_0)
				{
					return new Span<Vector2>(p, 5);
				}
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>		/// Queue a gainloss of focus for the application (generally based on OSplatform focus of your window)		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddFocusEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddFocusEvent([NativeName(NativeNameType.Param, "focused")] [NativeName(NativeNameType.Type, "bool")] bool focused)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddFocusEventNative(@this, focused ? (byte)1 : (byte)0);
			}
		}

		/// <summary>		/// Queue a new character input		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharacter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddInputCharacter([NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "unsigned int")] uint c)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddInputCharacterNative(@this, c);
			}
		}

		/// <summary>		/// Queue a new characters input from a UTF-8 string		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharactersUTF8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddInputCharactersUTF8([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddInputCharactersUTF8Native(@this, str);
			}
		}

		/// <summary>		/// Queue a new characters input from a UTF-8 string		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharactersUTF8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddInputCharactersUTF8([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte str)
		{
			fixed (ImGuiIO* @this = &this)
			{
				fixed (byte* pstr = &str)
				{
					ImGui.AddInputCharactersUTF8Native(@this, (byte*)pstr);
				}
			}
		}

		/// <summary>		/// Queue a new characters input from a UTF-8 string		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharactersUTF8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddInputCharactersUTF8([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string str)
		{
			fixed (ImGuiIO* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddInputCharactersUTF8Native(@this, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>		/// Queue a new character input from a UTF-16 character, it can be a surrogate		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharacterUTF16")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddInputCharacterUTF16([NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar16")] char c)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddInputCharacterUTF16Native(@this, c);
			}
		}

		/// <summary>		/// Queue a new key downup event for analog values (e.g. ImGuiKey_Gamepad_ values). Dead-zones should be handled by the backend.		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddKeyAnalogEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddKeyAnalogEvent([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "down")] [NativeName(NativeNameType.Type, "bool")] bool down, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddKeyAnalogEventNative(@this, key, down ? (byte)1 : (byte)0, v);
			}
		}

		/// <summary>		/// Queue a new key downup event. Key should be "translated" (as in, generally ImGuiKey_A matches the key end-user would use to emit an 'A' character)		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddKeyEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddKeyEvent([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "down")] [NativeName(NativeNameType.Type, "bool")] bool down)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddKeyEventNative(@this, key, down ? (byte)1 : (byte)0);
			}
		}

		/// <summary>		/// Queue a mouse button change		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddMouseButtonEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddMouseButtonEvent([NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "int")] int button, [NativeName(NativeNameType.Param, "down")] [NativeName(NativeNameType.Type, "bool")] bool down)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddMouseButtonEventNative(@this, button, down ? (byte)1 : (byte)0);
			}
		}

		/// <summary>		/// Queue a mouse position update. Use -FLT_MAX,-FLT_MAX to signify no mouse (e.g. app not focused and not hovered)		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddMousePosEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddMousePosEvent([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddMousePosEventNative(@this, x, y);
			}
		}

		/// <summary>		/// Queue a mouse source change (MouseTouchScreenPen)		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddMouseSourceEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddMouseSourceEvent([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ImGuiMouseSource")] ImGuiMouseSource source)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddMouseSourceEventNative(@this, source);
			}
		}

		/// <summary>		/// Queue a mouse hovered viewport. Requires backend to set ImGuiBackendFlags_HasMouseHoveredViewport to call this (for multi-viewport support).		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddMouseViewportEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddMouseViewportEvent([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] int id)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddMouseViewportEventNative(@this, id);
			}
		}

		/// <summary>		/// Queue a mouse wheel update. wheel_y<0: scroll down, wheel_y>0: scroll up, wheel_x<0: scroll right, wheel_x>0: scroll left.		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddMouseWheelEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddMouseWheelEvent([NativeName(NativeNameType.Param, "wheel_x")] [NativeName(NativeNameType.Type, "float")] float wheelX, [NativeName(NativeNameType.Param, "wheel_y")] [NativeName(NativeNameType.Type, "float")] float wheelY)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddMouseWheelEventNative(@this, wheelX, wheelY);
			}
		}

		/// <summary>		/// [Internal] Clear the text input buffer manually		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_ClearInputCharacters")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearInputCharacters()
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.ClearInputCharactersNative(@this);
			}
		}

		/// <summary>		/// [Internal] Release all keys		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_ClearInputKeys")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearInputKeys()
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.ClearInputKeysNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiIO_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>		/// Set master flag for accepting keymousetext events (default to true). Useful if you have native dialog boxes that are interrupting your application looprefresh, and you want to disable events being queued while your app is frozen.		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_SetAppAcceptingEvents")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetAppAcceptingEvents([NativeName(NativeNameType.Param, "accepting_events")] [NativeName(NativeNameType.Type, "bool")] bool acceptingEvents)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.SetAppAcceptingEventsNative(@this, acceptingEvents ? (byte)1 : (byte)0);
			}
		}

		/// <summary>		/// [Optional] Specify index for legacy <1.87 IsKeyXXX() functions with native indices + specify native keycode, scancode.		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_SetKeyEventNativeData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetKeyEventNativeData([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "native_keycode")] [NativeName(NativeNameType.Type, "int")] int nativeKeycode, [NativeName(NativeNameType.Param, "native_scancode")] [NativeName(NativeNameType.Type, "int")] int nativeScancode, [NativeName(NativeNameType.Param, "native_legacy_index")] [NativeName(NativeNameType.Type, "int")] int nativeLegacyIndex)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.SetKeyEventNativeDataNative(@this, key, nativeKeycode, nativeScancode, nativeLegacyIndex);
			}
		}

		/// <summary>		/// [Optional] Specify index for legacy <1.87 IsKeyXXX() functions with native indices + specify native keycode, scancode.		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_SetKeyEventNativeData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetKeyEventNativeData([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "native_keycode")] [NativeName(NativeNameType.Type, "int")] int nativeKeycode, [NativeName(NativeNameType.Param, "native_scancode")] [NativeName(NativeNameType.Type, "int")] int nativeScancode)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.SetKeyEventNativeDataNative(@this, key, nativeKeycode, nativeScancode, (int)(-1));
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiPlatformImeData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiPlatformImeData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantVisible")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantVisible;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InputPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 InputPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InputLineHeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float InputLineHeight;




		[NativeName(NativeNameType.Func, "ImGuiPlatformImeData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiPlatformImeData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiKeyData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiKeyData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Down")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Down;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DownDuration")]
		[NativeName(NativeNameType.Type, "float")]
		public float DownDuration;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DownDurationPrev")]
		[NativeName(NativeNameType.Type, "float")]
		public float DownDurationPrev;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AnalogValue")]
		[NativeName(NativeNameType.Type, "float")]
		public float AnalogValue;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiPlatformIO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiPlatformIO
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_CreateWindow")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformCreateWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_DestroyWindow")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformDestroyWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_ShowWindow")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformShowWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_SetWindowPos")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp, ImVec2 pos)*")]
		public unsafe void* PlatformSetWindowPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_GetWindowPos")]
		[NativeName(NativeNameType.Type, "ImVec2 (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformGetWindowPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_SetWindowSize")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp, ImVec2 size)*")]
		public unsafe void* PlatformSetWindowSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_GetWindowSize")]
		[NativeName(NativeNameType.Type, "ImVec2 (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformGetWindowSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_SetWindowFocus")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformSetWindowFocus;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_GetWindowFocus")]
		[NativeName(NativeNameType.Type, "bool (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformGetWindowFocus;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_GetWindowMinimized")]
		[NativeName(NativeNameType.Type, "bool (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformGetWindowMinimized;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_SetWindowTitle")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp, const char* str)*")]
		public unsafe void* PlatformSetWindowTitle;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_SetWindowAlpha")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp, float alpha)*")]
		public unsafe void* PlatformSetWindowAlpha;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_UpdateWindow")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformUpdateWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_RenderWindow")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp, void* render_arg)*")]
		public unsafe void* PlatformRenderWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_SwapBuffers")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp, void* render_arg)*")]
		public unsafe void* PlatformSwapBuffers;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_GetWindowDpiScale")]
		[NativeName(NativeNameType.Type, "float (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformGetWindowDpiScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_OnChangedViewport")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformOnChangedViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_CreateVkSurface")]
		[NativeName(NativeNameType.Type, "int (*)(ImGuiViewport* vp, ImU64 vk_inst, const void* vk_allocators, ImU64* out_vk_surface)*")]
		public unsafe void* PlatformCreateVkSurface;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Renderer_CreateWindow")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp)*")]
		public unsafe void* RendererCreateWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Renderer_DestroyWindow")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp)*")]
		public unsafe void* RendererDestroyWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Renderer_SetWindowSize")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp, ImVec2 size)*")]
		public unsafe void* RendererSetWindowSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Renderer_RenderWindow")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp, void* render_arg)*")]
		public unsafe void* RendererRenderWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Renderer_SwapBuffers")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp, void* render_arg)*")]
		public unsafe void* RendererSwapBuffers;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Monitors")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiPlatformMonitor")]
		public ImVectorImGuiPlatformMonitor Monitors;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Viewports")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiViewportPtr")]
		public ImVectorImGuiViewportPtr Viewports;




		[NativeName(NativeNameType.Func, "ImGuiPlatformIO_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiPlatformIO* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiPlatformMonitor")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiPlatformMonitor
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiPlatformMonitor*")]
		public unsafe ImGuiPlatformMonitor* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiPlatformMonitor")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiPlatformMonitor
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MainPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 MainPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MainSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 MainSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WorkPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WorkSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DpiScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float DpiScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformHandle")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PlatformHandle;




		[NativeName(NativeNameType.Func, "ImGuiPlatformMonitor_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiPlatformMonitor* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiViewportPtr")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiViewportPtr
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiViewport**")]
		public unsafe ImGuiViewport** Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiStyle")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiStyle
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Alpha")]
		[NativeName(NativeNameType.Type, "float")]
		public float Alpha;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisabledAlpha")]
		[NativeName(NativeNameType.Type, "float")]
		public float DisabledAlpha;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WindowPadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowRounding")]
		[NativeName(NativeNameType.Type, "float")]
		public float WindowRounding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowBorderSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float WindowBorderSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowMinSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WindowMinSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowTitleAlign")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WindowTitleAlign;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowMenuButtonPosition")]
		[NativeName(NativeNameType.Type, "ImGuiDir")]
		public ImGuiDir WindowMenuButtonPosition;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ChildRounding")]
		[NativeName(NativeNameType.Type, "float")]
		public float ChildRounding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ChildBorderSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float ChildBorderSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PopupRounding")]
		[NativeName(NativeNameType.Type, "float")]
		public float PopupRounding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PopupBorderSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float PopupBorderSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FramePadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 FramePadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FrameRounding")]
		[NativeName(NativeNameType.Type, "float")]
		public float FrameRounding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FrameBorderSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float FrameBorderSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemSpacing")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ItemSpacing;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemInnerSpacing")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ItemInnerSpacing;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CellPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 CellPadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TouchExtraPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 TouchExtraPadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IndentSpacing")]
		[NativeName(NativeNameType.Type, "float")]
		public float IndentSpacing;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsMinSpacing")]
		[NativeName(NativeNameType.Type, "float")]
		public float ColumnsMinSpacing;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollbarSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollbarSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollbarRounding")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollbarRounding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "GrabMinSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float GrabMinSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "GrabRounding")]
		[NativeName(NativeNameType.Type, "float")]
		public float GrabRounding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogSliderDeadzone")]
		[NativeName(NativeNameType.Type, "float")]
		public float LogSliderDeadzone;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TabRounding")]
		[NativeName(NativeNameType.Type, "float")]
		public float TabRounding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TabBorderSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float TabBorderSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TabMinWidthForCloseButton")]
		[NativeName(NativeNameType.Type, "float")]
		public float TabMinWidthForCloseButton;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorButtonPosition")]
		[NativeName(NativeNameType.Type, "ImGuiDir")]
		public ImGuiDir ColorButtonPosition;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ButtonTextAlign")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ButtonTextAlign;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SelectableTextAlign")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 SelectableTextAlign;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SeparatorTextBorderSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float SeparatorTextBorderSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SeparatorTextAlign")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 SeparatorTextAlign;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SeparatorTextPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 SeparatorTextPadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayWindowPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 DisplayWindowPadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplaySafeAreaPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 DisplaySafeAreaPadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseCursorScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float MouseCursorScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AntiAliasedLines")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte AntiAliasedLines;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AntiAliasedLinesUseTex")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte AntiAliasedLinesUseTex;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AntiAliasedFill")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte AntiAliasedFill;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurveTessellationTol")]
		[NativeName(NativeNameType.Type, "float")]
		public float CurveTessellationTol;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CircleTessellationMaxError")]
		[NativeName(NativeNameType.Type, "float")]
		public float CircleTessellationMaxError;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Colors")]
		[NativeName(NativeNameType.Type, "ImVec4[55]")]
		public Vector4 Colors_0;
		public Vector4 Colors_1;
		public Vector4 Colors_2;
		public Vector4 Colors_3;
		public Vector4 Colors_4;
		public Vector4 Colors_5;
		public Vector4 Colors_6;
		public Vector4 Colors_7;
		public Vector4 Colors_8;
		public Vector4 Colors_9;
		public Vector4 Colors_10;
		public Vector4 Colors_11;
		public Vector4 Colors_12;
		public Vector4 Colors_13;
		public Vector4 Colors_14;
		public Vector4 Colors_15;
		public Vector4 Colors_16;
		public Vector4 Colors_17;
		public Vector4 Colors_18;
		public Vector4 Colors_19;
		public Vector4 Colors_20;
		public Vector4 Colors_21;
		public Vector4 Colors_22;
		public Vector4 Colors_23;
		public Vector4 Colors_24;
		public Vector4 Colors_25;
		public Vector4 Colors_26;
		public Vector4 Colors_27;
		public Vector4 Colors_28;
		public Vector4 Colors_29;
		public Vector4 Colors_30;
		public Vector4 Colors_31;
		public Vector4 Colors_32;
		public Vector4 Colors_33;
		public Vector4 Colors_34;
		public Vector4 Colors_35;
		public Vector4 Colors_36;
		public Vector4 Colors_37;
		public Vector4 Colors_38;
		public Vector4 Colors_39;
		public Vector4 Colors_40;
		public Vector4 Colors_41;
		public Vector4 Colors_42;
		public Vector4 Colors_43;
		public Vector4 Colors_44;
		public Vector4 Colors_45;
		public Vector4 Colors_46;
		public Vector4 Colors_47;
		public Vector4 Colors_48;
		public Vector4 Colors_49;
		public Vector4 Colors_50;
		public Vector4 Colors_51;
		public Vector4 Colors_52;
		public Vector4 Colors_53;
		public Vector4 Colors_54;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverStationaryDelay")]
		[NativeName(NativeNameType.Type, "float")]
		public float HoverStationaryDelay;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverDelayShort")]
		[NativeName(NativeNameType.Type, "float")]
		public float HoverDelayShort;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverDelayNormal")]
		[NativeName(NativeNameType.Type, "float")]
		public float HoverDelayNormal;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverFlagsForTooltipMouse")]
		[NativeName(NativeNameType.Type, "ImGuiHoveredFlags")]
		public ImGuiHoveredFlags HoverFlagsForTooltipMouse;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverFlagsForTooltipNav")]
		[NativeName(NativeNameType.Type, "ImGuiHoveredFlags")]
		public ImGuiHoveredFlags HoverFlagsForTooltipNav;




		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Vector4> Colors
		
		{
			get
			{
				fixed (Vector4* p = &this.Colors_0)
				{
					return new Span<Vector4>(p, 55);
				}
			}
		}
		[NativeName(NativeNameType.Func, "ImGuiStyle_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiStyle* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStyle_ScaleAllSizes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ScaleAllSizes([NativeName(NativeNameType.Param, "scale_factor")] [NativeName(NativeNameType.Type, "float")] float scaleFactor)
		{
			fixed (ImGuiStyle* @this = &this)
			{
				ImGui.ScaleAllSizesNative(@this, scaleFactor);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiInputEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiInputEvent
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiInputEvent*")]
		public unsafe ImGuiInputEvent* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiInputEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputEvent
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct ImGuiInputEventUnion
		{
			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "MousePos")]
			[NativeName(NativeNameType.Type, "ImGuiInputEventMousePos")]
			[FieldOffset(0)]
			public ImGuiInputEventMousePos MousePos;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "MouseWheel")]
			[NativeName(NativeNameType.Type, "ImGuiInputEventMouseWheel")]
			[FieldOffset(0)]
			public ImGuiInputEventMouseWheel MouseWheel;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "MouseButton")]
			[NativeName(NativeNameType.Type, "ImGuiInputEventMouseButton")]
			[FieldOffset(0)]
			public ImGuiInputEventMouseButton MouseButton;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "MouseViewport")]
			[NativeName(NativeNameType.Type, "ImGuiInputEventMouseViewport")]
			[FieldOffset(0)]
			public ImGuiInputEventMouseViewport MouseViewport;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "Key")]
			[NativeName(NativeNameType.Type, "ImGuiInputEventKey")]
			[FieldOffset(0)]
			public ImGuiInputEventKey Key;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "Text")]
			[NativeName(NativeNameType.Type, "ImGuiInputEventText")]
			[FieldOffset(0)]
			public ImGuiInputEventText Text;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "AppFocused")]
			[NativeName(NativeNameType.Type, "ImGuiInputEventAppFocused")]
			[FieldOffset(0)]
			public ImGuiInputEventAppFocused AppFocused;



		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "ImGuiInputEventType")]
		public ImGuiInputEventType Type;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Source")]
		[NativeName(NativeNameType.Type, "ImGuiInputSource")]
		public ImGuiInputSource Source;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EventId")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint EventId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public ImGuiInputEventUnion Union;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AddedByTestEngine")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte AddedByTestEngine;




		[NativeName(NativeNameType.Func, "ImGuiInputEvent_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiInputEvent* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiInputEventMousePos")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputEventMousePos
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PosX")]
		[NativeName(NativeNameType.Type, "float")]
		public float PosX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PosY")]
		[NativeName(NativeNameType.Type, "float")]
		public float PosY;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseSource")]
		[NativeName(NativeNameType.Type, "ImGuiMouseSource")]
		public ImGuiMouseSource MouseSource;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiInputEventMouseWheel")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputEventMouseWheel
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WheelX")]
		[NativeName(NativeNameType.Type, "float")]
		public float WheelX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WheelY")]
		[NativeName(NativeNameType.Type, "float")]
		public float WheelY;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseSource")]
		[NativeName(NativeNameType.Type, "ImGuiMouseSource")]
		public ImGuiMouseSource MouseSource;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiInputEventMouseButton")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputEventMouseButton
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Button")]
		[NativeName(NativeNameType.Type, "int")]
		public int Button;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Down")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Down;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseSource")]
		[NativeName(NativeNameType.Type, "ImGuiMouseSource")]
		public ImGuiMouseSource MouseSource;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiInputEventMouseViewport")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputEventMouseViewport
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredViewportID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int HoveredViewportID;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiInputEventKey")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputEventKey
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Key")]
		[NativeName(NativeNameType.Type, "ImGuiKey")]
		public ImGuiKey Key;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Down")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Down;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AnalogValue")]
		[NativeName(NativeNameType.Type, "float")]
		public float AnalogValue;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiInputEventText")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputEventText
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Char")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Char;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiInputEventAppFocused")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputEventAppFocused
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Focused")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Focused;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiWindowPtr")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiWindowPtr
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiWindow**")]
		public unsafe ImGuiWindow** Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiWindow")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiWindow
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Ctx")]
		[NativeName(NativeNameType.Type, "ImGuiContext*")]
		public unsafe ImGuiContext* Ctx;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "char*")]
		public unsafe byte* Name;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiWindowFlags")]
		public ImGuiWindowFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FlagsPreviousFrame")]
		[NativeName(NativeNameType.Type, "ImGuiWindowFlags")]
		public ImGuiWindowFlags FlagsPreviousFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowClass")]
		[NativeName(NativeNameType.Type, "ImGuiWindowClass")]
		public ImGuiWindowClass WindowClass;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Viewport")]
		[NativeName(NativeNameType.Type, "ImGuiViewportP*")]
		public unsafe ImGuiViewportP* Viewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ViewportId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ViewportPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportAllowPlatformMonitorExtend")]
		[NativeName(NativeNameType.Type, "int")]
		public int ViewportAllowPlatformMonitorExtend;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Pos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Pos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SizeFull")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 SizeFull;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ContentSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ContentSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ContentSizeIdeal")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ContentSizeIdeal;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ContentSizeExplicit")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ContentSizeExplicit;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WindowPadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowRounding")]
		[NativeName(NativeNameType.Type, "float")]
		public float WindowRounding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowBorderSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float WindowBorderSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DecoOuterSizeX1")]
		[NativeName(NativeNameType.Type, "float")]
		public float DecoOuterSizeX1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DecoOuterSizeY1")]
		[NativeName(NativeNameType.Type, "float")]
		public float DecoOuterSizeY1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DecoOuterSizeX2")]
		[NativeName(NativeNameType.Type, "float")]
		public float DecoOuterSizeX2;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DecoOuterSizeY2")]
		[NativeName(NativeNameType.Type, "float")]
		public float DecoOuterSizeY2;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DecoInnerSizeX1")]
		[NativeName(NativeNameType.Type, "float")]
		public float DecoInnerSizeX1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DecoInnerSizeY1")]
		[NativeName(NativeNameType.Type, "float")]
		public float DecoInnerSizeY1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NameBufLen")]
		[NativeName(NativeNameType.Type, "int")]
		public int NameBufLen;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MoveId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int MoveId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TabId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int TabId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ChildId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ChildId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Scroll")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Scroll;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollMax")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ScrollMax;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollTarget")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ScrollTarget;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollTargetCenterRatio")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ScrollTargetCenterRatio;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollTargetEdgeSnapDist")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ScrollTargetEdgeSnapDist;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollbarSizes")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ScrollbarSizes;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollbarX")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ScrollbarX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollbarY")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ScrollbarY;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportOwned")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ViewportOwned;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Active")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Active;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WasActive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WasActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WriteAccessed")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WriteAccessed;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Collapsed")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Collapsed;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantCollapseToggle")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantCollapseToggle;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SkipItems")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte SkipItems;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Appearing")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Appearing;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Hidden")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Hidden;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsFallbackWindow")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsFallbackWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsExplicitChild")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsExplicitChild;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HasCloseButton")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HasCloseButton;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ResizeBorderHeld")]
		[NativeName(NativeNameType.Type, "char")]
		public byte ResizeBorderHeld;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BeginCount")]
		[NativeName(NativeNameType.Type, "short")]
		public short BeginCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BeginCountPreviousFrame")]
		[NativeName(NativeNameType.Type, "short")]
		public short BeginCountPreviousFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BeginOrderWithinParent")]
		[NativeName(NativeNameType.Type, "short")]
		public short BeginOrderWithinParent;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BeginOrderWithinContext")]
		[NativeName(NativeNameType.Type, "short")]
		public short BeginOrderWithinContext;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FocusOrder")]
		[NativeName(NativeNameType.Type, "short")]
		public short FocusOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PopupId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int PopupId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AutoFitFramesX")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte AutoFitFramesX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AutoFitFramesY")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte AutoFitFramesY;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AutoFitChildAxises")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte AutoFitChildAxises;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AutoFitOnlyGrows")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte AutoFitOnlyGrows;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AutoPosLastDirection")]
		[NativeName(NativeNameType.Type, "ImGuiDir")]
		public ImGuiDir AutoPosLastDirection;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HiddenFramesCanSkipItems")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte HiddenFramesCanSkipItems;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HiddenFramesCannotSkipItems")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte HiddenFramesCannotSkipItems;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HiddenFramesForRenderOnly")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte HiddenFramesForRenderOnly;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisableInputsFrames")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte DisableInputsFrames;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SetWindowPosAllowFlags")]
		[NativeName(NativeNameType.Type, "ImGuiCond")]
		public ImGuiCond SetWindowPosAllowFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SetWindowSizeAllowFlags")]
		[NativeName(NativeNameType.Type, "ImGuiCond")]
		public ImGuiCond SetWindowSizeAllowFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SetWindowCollapsedAllowFlags")]
		[NativeName(NativeNameType.Type, "ImGuiCond")]
		public ImGuiCond SetWindowCollapsedAllowFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SetWindowDockAllowFlags")]
		[NativeName(NativeNameType.Type, "ImGuiCond")]
		public ImGuiCond SetWindowDockAllowFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SetWindowPosVal")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 SetWindowPosVal;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SetWindowPosPivot")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 SetWindowPosPivot;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IDStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiID")]
		public ImVectorImGuiID IDStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DC")]
		[NativeName(NativeNameType.Type, "ImGuiWindowTempData")]
		public ImGuiWindowTempData DC;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OuterRectClipped")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect OuterRectClipped;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect InnerRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect InnerClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect WorkRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ParentWorkRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect ParentWorkRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect ClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ContentRegionRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect ContentRegionRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HitTestHoleSize")]
		[NativeName(NativeNameType.Type, "ImVec2ih")]
		public ImVec2Ih HitTestHoleSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HitTestHoleOffset")]
		[NativeName(NativeNameType.Type, "ImVec2ih")]
		public ImVec2Ih HitTestHoleOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrameActive")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrameJustFocused")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameJustFocused;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastTimeActive")]
		[NativeName(NativeNameType.Type, "float")]
		public float LastTimeActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemWidthDefault")]
		[NativeName(NativeNameType.Type, "float")]
		public float ItemWidthDefault;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "StateStorage")]
		[NativeName(NativeNameType.Type, "ImGuiStorage")]
		public ImGuiStorage StateStorage;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsStorage")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiOldColumns")]
		public ImVectorImGuiOldColumns ColumnsStorage;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontWindowScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float FontWindowScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontDpiScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float FontDpiScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsOffset")]
		[NativeName(NativeNameType.Type, "int")]
		public int SettingsOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawList")]
		[NativeName(NativeNameType.Type, "ImDrawList*")]
		public unsafe ImDrawList* DrawList;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawListInst")]
		[NativeName(NativeNameType.Type, "ImDrawList")]
		public ImDrawList DrawListInst;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ParentWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* ParentWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ParentWindowInBeginStack")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* ParentWindowInBeginStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RootWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* RootWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RootWindowPopupTree")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* RootWindowPopupTree;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RootWindowDockTree")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* RootWindowDockTree;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RootWindowForTitleBarHighlight")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* RootWindowForTitleBarHighlight;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RootWindowForNav")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* RootWindowForNav;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavLastChildNavWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* NavLastChildNavWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavLastIds")]
		[NativeName(NativeNameType.Type, "ImGuiID[2]")]
		public uint NavLastIds_0;
		public uint NavLastIds_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavRectRel")]
		[NativeName(NativeNameType.Type, "ImRect[2]")]
		public ImRect NavRectRel_0;
		public ImRect NavRectRel_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavPreferredScoringPosRel")]
		[NativeName(NativeNameType.Type, "ImVec2[2]")]
		public Vector2 NavPreferredScoringPosRel_0;
		public Vector2 NavPreferredScoringPosRel_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavRootFocusScopeId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int NavRootFocusScopeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MemoryDrawListIdxCapacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int MemoryDrawListIdxCapacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MemoryDrawListVtxCapacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int MemoryDrawListVtxCapacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MemoryCompacted")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte MemoryCompacted;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockIsActive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DockIsActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockNodeIsVisible")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DockNodeIsVisible;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockTabIsVisible")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DockTabIsVisible;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockTabWantClose")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DockTabWantClose;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockOrder")]
		[NativeName(NativeNameType.Type, "short")]
		public short DockOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockStyle")]
		[NativeName(NativeNameType.Type, "ImGuiWindowDockStyle")]
		public ImGuiWindowDockStyle DockStyle;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockNode")]
		[NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public unsafe ImGuiDockNode* DockNode;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockNodeAsHost")]
		[NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public unsafe ImGuiDockNode* DockNodeAsHost;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int DockId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockTabItemStatusFlags")]
		[NativeName(NativeNameType.Type, "ImGuiItemStatusFlags")]
		public ImGuiItemStatusFlags DockTabItemStatusFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockTabItemRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect DockTabItemRect;




		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<ImRect> NavRectRel
		
		{
			get
			{
				fixed (ImRect* p = &this.NavRectRel_0)
				{
					return new Span<ImRect>(p, 2);
				}
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Vector2> NavPreferredScoringPosRel
		
		{
			get
			{
				fixed (Vector2* p = &this.NavPreferredScoringPosRel_0)
				{
					return new Span<Vector2>(p, 2);
				}
			}
		}
		[NativeName(NativeNameType.Func, "ImGuiWindow_CalcFontSize")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float CalcFontSize()
		{
			fixed (ImGuiWindow* @this = &this)
			{
				float ret = ImGui.CalcFontSizeNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiWindow* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				int ret = ImGui.GetIDNative(@this, str, strEnd);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				int ret = ImGui.GetIDNative(@this, str, (byte*)(default));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				fixed (byte* pstr = &str)
				{
					int ret = ImGui.GetIDNative(@this, (byte*)pstr, strEnd);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte str)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				fixed (byte* pstr = &str)
				{
					int ret = ImGui.GetIDNative(@this, (byte*)pstr, (byte*)(default));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ImGui.GetIDNative(@this, pStr0, strEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string str)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ImGui.GetIDNative(@this, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte strEnd)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				fixed (byte* pstrEnd = &strEnd)
				{
					int ret = ImGui.GetIDNative(@this, str, (byte*)pstrEnd);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] string strEnd)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (strEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(strEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(strEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ImGui.GetIDNative(@this, str, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte strEnd)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				fixed (byte* pstr = &str)
				{
					fixed (byte* pstrEnd = &strEnd)
					{
						int ret = ImGui.GetIDNative(@this, (byte*)pstr, (byte*)pstrEnd);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] string strEnd)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (strEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(strEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(strEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = ImGui.GetIDNative(@this, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Ptr")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "const void*")] void* ptr)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				int ret = ImGui.GetIDNative(@this, ptr);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Int")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				int ret = ImGui.GetIDNative(@this, n);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetIDFromRectangle")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetIDFromRectangle([NativeName(NativeNameType.Param, "r_abs")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rAbs)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				int ret = ImGui.GetIDFromRectangleNative(@this, rAbs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_MenuBarHeight")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float MenuBarHeight()
		{
			fixed (ImGuiWindow* @this = &this)
			{
				float ret = ImGui.MenuBarHeightNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_TitleBarHeight")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float TitleBarHeight()
		{
			fixed (ImGuiWindow* @this = &this)
			{
				float ret = ImGui.TitleBarHeightNative(@this);
				return ret;
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiWindowClass")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiWindowClass
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ClassId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ClassId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ParentViewportId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ParentViewportId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportFlagsOverrideSet")]
		[NativeName(NativeNameType.Type, "ImGuiViewportFlags")]
		public ImGuiViewportFlags ViewportFlagsOverrideSet;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportFlagsOverrideClear")]
		[NativeName(NativeNameType.Type, "ImGuiViewportFlags")]
		public ImGuiViewportFlags ViewportFlagsOverrideClear;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TabItemFlagsOverrideSet")]
		[NativeName(NativeNameType.Type, "ImGuiTabItemFlags")]
		public ImGuiTabItemFlags TabItemFlagsOverrideSet;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockNodeFlagsOverrideSet")]
		[NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")]
		public ImGuiDockNodeFlags DockNodeFlagsOverrideSet;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockingAlwaysTabBar")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DockingAlwaysTabBar;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockingAllowUnclassed")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DockingAllowUnclassed;




		[NativeName(NativeNameType.Func, "ImGuiWindowClass_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiWindowClass* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiViewportP")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiViewportP
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_ImGuiViewport")]
		[NativeName(NativeNameType.Type, "ImGuiViewport")]
		public ImGuiViewport ImGuiViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Window")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* Window;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Idx")]
		[NativeName(NativeNameType.Type, "int")]
		public int Idx;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrameActive")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFocusedStampCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFocusedStampCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastNameHash")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int LastNameHash;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 LastPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Alpha")]
		[NativeName(NativeNameType.Type, "float")]
		public float Alpha;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastAlpha")]
		[NativeName(NativeNameType.Type, "float")]
		public float LastAlpha;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFocusedHadNavWindow")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte LastFocusedHadNavWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformMonitor")]
		[NativeName(NativeNameType.Type, "short")]
		public short PlatformMonitor;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawListsLastFrame")]
		[NativeName(NativeNameType.Type, "int[2]")]
		public int DrawListsLastFrame_0;
		public int DrawListsLastFrame_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawLists")]
		[NativeName(NativeNameType.Type, "ImDrawList*[2]")]
		public unsafe ImDrawList* DrawLists_0;
		public unsafe ImDrawList* DrawLists_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawDataP")]
		[NativeName(NativeNameType.Type, "ImDrawData")]
		public ImDrawData DrawDataP;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawDataBuilder")]
		[NativeName(NativeNameType.Type, "ImDrawDataBuilder")]
		public ImDrawDataBuilder DrawDataBuilder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastPlatformPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 LastPlatformPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastPlatformSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 LastPlatformSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastRendererSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 LastRendererSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkOffsetMin")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WorkOffsetMin;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkOffsetMax")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WorkOffsetMax;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BuildWorkOffsetMin")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 BuildWorkOffsetMin;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BuildWorkOffsetMax")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 BuildWorkOffsetMax;




		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiViewportP_ClearRequestFlags")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearRequestFlags()
		{
			fixed (ImGuiViewportP* @this = &this)
			{
				ImGui.ClearRequestFlagsNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiViewportP_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiViewportP* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>		/// Update public fields		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiViewportP_UpdateWorkRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void UpdateWorkRect()
		{
			fixed (ImGuiViewportP* @this = &this)
			{
				ImGui.UpdateWorkRectNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImDrawDataBuilder")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawDataBuilder
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Layers")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawListPtr[2]")]
		public ImVectorImDrawListPtr Layers_0;
		public ImVectorImDrawListPtr Layers_1;



		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<ImVectorImDrawListPtr> Layers
		
		{
			get
			{
				fixed (ImVectorImDrawListPtr* p = &this.Layers_0)
				{
					return new Span<ImVectorImDrawListPtr>(p, 2);
				}
			}
		}
		[NativeName(NativeNameType.Func, "ImDrawDataBuilder_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImDrawDataBuilder* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawDataBuilder_ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearFreeMemory()
		{
			fixed (ImDrawDataBuilder* @this = &this)
			{
				ImGui.ClearFreeMemoryNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawDataBuilder_FlattenIntoSingleLayer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void FlattenIntoSingleLayer()
		{
			fixed (ImDrawDataBuilder* @this = &this)
			{
				ImGui.FlattenIntoSingleLayerNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawDataBuilder_GetDrawListCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int GetDrawListCount()
		{
			fixed (ImDrawDataBuilder* @this = &this)
			{
				int ret = ImGui.GetDrawListCountNative(@this);
				return ret;
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImDrawListPtr")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImDrawListPtr
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImDrawList**")]
		public unsafe ImDrawList** Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiID")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiID
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiID*")]
		public unsafe int* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiWindowTempData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiWindowTempData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CursorPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 CursorPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CursorPosPrevLine")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 CursorPosPrevLine;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CursorStartPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 CursorStartPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CursorMaxPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 CursorMaxPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IdealMaxPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 IdealMaxPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrLineSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 CurrLineSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PrevLineSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 PrevLineSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrLineTextBaseOffset")]
		[NativeName(NativeNameType.Type, "float")]
		public float CurrLineTextBaseOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PrevLineTextBaseOffset")]
		[NativeName(NativeNameType.Type, "float")]
		public float PrevLineTextBaseOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsSameLine")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsSameLine;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsSetPos")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsSetPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Indent")]
		[NativeName(NativeNameType.Type, "ImVec1")]
		public ImVec1 Indent;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsOffset")]
		[NativeName(NativeNameType.Type, "ImVec1")]
		public ImVec1 ColumnsOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "GroupOffset")]
		[NativeName(NativeNameType.Type, "ImVec1")]
		public ImVec1 GroupOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CursorStartPosLossyness")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 CursorStartPosLossyness;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavLayerCurrent")]
		[NativeName(NativeNameType.Type, "ImGuiNavLayer")]
		public ImGuiNavLayer NavLayerCurrent;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavLayersActiveMask")]
		[NativeName(NativeNameType.Type, "short")]
		public short NavLayersActiveMask;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavLayersActiveMaskNext")]
		[NativeName(NativeNameType.Type, "short")]
		public short NavLayersActiveMaskNext;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavIsScrollPushableX")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavIsScrollPushableX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavHideHighlightOneFrame")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavHideHighlightOneFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowHasScrollY")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavWindowHasScrollY;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MenuBarAppending")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte MenuBarAppending;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MenuBarOffset")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 MenuBarOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MenuColumns")]
		[NativeName(NativeNameType.Type, "ImGuiMenuColumns")]
		public ImGuiMenuColumns MenuColumns;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TreeDepth")]
		[NativeName(NativeNameType.Type, "int")]
		public int TreeDepth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TreeJumpToParentOnPopMask")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint TreeJumpToParentOnPopMask;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ChildWindows")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr")]
		public ImVectorImGuiWindowPtr ChildWindows;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "StateStorage")]
		[NativeName(NativeNameType.Type, "ImGuiStorage*")]
		public unsafe ImGuiStorage* StateStorage;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentColumns")]
		[NativeName(NativeNameType.Type, "ImGuiOldColumns*")]
		public unsafe ImGuiOldColumns* CurrentColumns;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentTableIdx")]
		[NativeName(NativeNameType.Type, "int")]
		public int CurrentTableIdx;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LayoutType")]
		[NativeName(NativeNameType.Type, "ImGuiLayoutType")]
		public ImGuiLayoutType LayoutType;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ParentLayoutType")]
		[NativeName(NativeNameType.Type, "ImGuiLayoutType")]
		public ImGuiLayoutType ParentLayoutType;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float ItemWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TextWrapPos")]
		[NativeName(NativeNameType.Type, "float")]
		public float TextWrapPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemWidthStack")]
		[NativeName(NativeNameType.Type, "ImVector_float")]
		public ImVectorFloat ItemWidthStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TextWrapPosStack")]
		[NativeName(NativeNameType.Type, "ImVector_float")]
		public ImVectorFloat TextWrapPosStack;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVec1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVec1
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "float")]
		public float X;




		[NativeName(NativeNameType.Func, "ImVec1_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImVec1* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiMenuColumns")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiMenuColumns
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TotalWidth")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint TotalWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NextTotalWidth")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint NextTotalWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Spacing")]
		[NativeName(NativeNameType.Type, "ImU16")]
		public ushort Spacing;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OffsetIcon")]
		[NativeName(NativeNameType.Type, "ImU16")]
		public ushort OffsetIcon;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OffsetLabel")]
		[NativeName(NativeNameType.Type, "ImU16")]
		public ushort OffsetLabel;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OffsetShortcut")]
		[NativeName(NativeNameType.Type, "ImU16")]
		public ushort OffsetShortcut;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OffsetMark")]
		[NativeName(NativeNameType.Type, "ImU16")]
		public ushort OffsetMark;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Widths")]
		[NativeName(NativeNameType.Type, "ImU16[4]")]
		public ushort Widths_0;
		public ushort Widths_1;
		public ushort Widths_2;
		public ushort Widths_3;




		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_CalcNextTotalWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcNextTotalWidth([NativeName(NativeNameType.Param, "update_offsets")] [NativeName(NativeNameType.Type, "bool")] bool updateOffsets)
		{
			fixed (ImGuiMenuColumns* @this = &this)
			{
				ImGui.CalcNextTotalWidthNative(@this, updateOffsets ? (byte)1 : (byte)0);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_DeclColumns")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float DeclColumns([NativeName(NativeNameType.Param, "w_icon")] [NativeName(NativeNameType.Type, "float")] float wIcon, [NativeName(NativeNameType.Param, "w_label")] [NativeName(NativeNameType.Type, "float")] float wLabel, [NativeName(NativeNameType.Param, "w_shortcut")] [NativeName(NativeNameType.Type, "float")] float wShortcut, [NativeName(NativeNameType.Param, "w_mark")] [NativeName(NativeNameType.Type, "float")] float wMark)
		{
			fixed (ImGuiMenuColumns* @this = &this)
			{
				float ret = ImGui.DeclColumnsNative(@this, wIcon, wLabel, wShortcut, wMark);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiMenuColumns* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_Update")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Update([NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "window_reappearing")] [NativeName(NativeNameType.Type, "bool")] bool windowReappearing)
		{
			fixed (ImGuiMenuColumns* @this = &this)
			{
				ImGui.UpdateNative(@this, spacing, windowReappearing ? (byte)1 : (byte)0);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiStorage")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiStorage
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiStoragePair")]
		public ImVectorImGuiStoragePair Data;



		[NativeName(NativeNameType.Func, "ImGuiStorage_BuildSortByKey")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void BuildSortByKey()
		{
			fixed (ImGuiStorage* @this = &this)
			{
				ImGui.BuildSortByKeyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImGuiStorage* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetBool")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetBool([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "bool")] bool defaultVal)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				byte ret = ImGui.GetBoolNative(@this, key, defaultVal ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetBool")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetBool([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int key)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				byte ret = ImGui.GetBoolNative(@this, key, (byte)(0));
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetBoolRef")]
		[return: NativeName(NativeNameType.Type, "bool*")]
		public unsafe byte* GetBoolRef([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "bool")] bool defaultVal)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				byte* ret = ImGui.GetBoolRefNative(@this, key, defaultVal ? (byte)1 : (byte)0);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetBoolRef")]
		[return: NativeName(NativeNameType.Type, "bool*")]
		public unsafe byte* GetBoolRef([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int key)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				byte* ret = ImGui.GetBoolRefNative(@this, key, (byte)(0));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetFloat")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float GetFloat([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "float")] float defaultVal)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				float ret = ImGui.GetFloatNative(@this, key, defaultVal);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetFloat")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float GetFloat([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int key)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				float ret = ImGui.GetFloatNative(@this, key, (float)(0.0f));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetFloatRef")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public unsafe float* GetFloatRef([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "float")] float defaultVal)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				float* ret = ImGui.GetFloatRefNative(@this, key, defaultVal);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetFloatRef")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public unsafe float* GetFloatRef([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int key)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				float* ret = ImGui.GetFloatRefNative(@this, key, (float)(0.0f));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetInt")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int GetInt([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "int")] int defaultVal)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				int ret = ImGui.GetIntNative(@this, key, defaultVal);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetInt")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int GetInt([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int key)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				int ret = ImGui.GetIntNative(@this, key, (int)(0));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetIntRef")]
		[return: NativeName(NativeNameType.Type, "int*")]
		public unsafe int* GetIntRef([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "int")] int defaultVal)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				int* ret = ImGui.GetIntRefNative(@this, key, defaultVal);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetIntRef")]
		[return: NativeName(NativeNameType.Type, "int*")]
		public unsafe int* GetIntRef([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int key)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				int* ret = ImGui.GetIntRefNative(@this, key, (int)(0));
				return ret;
			}
		}

		/// <summary>		/// default_val is NULL		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiStorage_GetVoidPtr")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public unsafe void* GetVoidPtr([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int key)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				void* ret = ImGui.GetVoidPtrNative(@this, key);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetVoidPtrRef")]
		[return: NativeName(NativeNameType.Type, "void**")]
		public unsafe void** GetVoidPtrRef([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "void*")] void* defaultVal)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				void** ret = ImGui.GetVoidPtrRefNative(@this, key, defaultVal);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetVoidPtrRef")]
		[return: NativeName(NativeNameType.Type, "void**")]
		public unsafe void** GetVoidPtrRef([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int key)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				void** ret = ImGui.GetVoidPtrRefNative(@this, key, (void*)(default));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_SetAllInt")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetAllInt([NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "int")] int val)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				ImGui.SetAllIntNative(@this, val);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_SetBool")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetBool([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int key, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "bool")] bool val)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				ImGui.SetBoolNative(@this, key, val ? (byte)1 : (byte)0);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_SetFloat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetFloat([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int key, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "float")] float val)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				ImGui.SetFloatNative(@this, key, val);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_SetInt")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetInt([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int key, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "int")] int val)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				ImGui.SetIntNative(@this, key, val);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_SetVoidPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetVoidPtr([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int key, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "void*")] void* val)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				ImGui.SetVoidPtrNative(@this, key, val);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiStoragePair")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiStoragePair
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiStoragePair*")]
		public unsafe ImGuiStoragePair* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiStoragePair")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiStoragePair
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct ImGuiStoragePairUnion
		{
			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "val_i")]
			[NativeName(NativeNameType.Type, "int")]
			[FieldOffset(0)]
			public int ValI;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "val_f")]
			[NativeName(NativeNameType.Type, "float")]
			[FieldOffset(0)]
			public float ValF;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "val_p")]
			[NativeName(NativeNameType.Type, "void*")]
			[FieldOffset(0)]
			public unsafe void* ValP;



		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "key")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int Key;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public ImGuiStoragePairUnion Union;




		[NativeName(NativeNameType.Func, "ImGuiStoragePair_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiStoragePair* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiOldColumns")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiOldColumns
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiOldColumnFlags")]
		public ImGuiOldColumnFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsFirstFrame")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsFirstFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsBeingResized")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsBeingResized;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Current")]
		[NativeName(NativeNameType.Type, "int")]
		public int Current;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Count")]
		[NativeName(NativeNameType.Type, "int")]
		public int Count;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OffMinX")]
		[NativeName(NativeNameType.Type, "float")]
		public float OffMinX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OffMaxX")]
		[NativeName(NativeNameType.Type, "float")]
		public float OffMaxX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LineMinY")]
		[NativeName(NativeNameType.Type, "float")]
		public float LineMinY;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LineMaxY")]
		[NativeName(NativeNameType.Type, "float")]
		public float LineMaxY;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HostCursorPosY")]
		[NativeName(NativeNameType.Type, "float")]
		public float HostCursorPosY;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HostCursorMaxPosX")]
		[NativeName(NativeNameType.Type, "float")]
		public float HostCursorMaxPosX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HostInitialClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect HostInitialClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect HostBackupClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupParentWorkRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect HostBackupParentWorkRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Columns")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiOldColumnData")]
		public ImVectorImGuiOldColumnData Columns;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Splitter")]
		[NativeName(NativeNameType.Type, "ImDrawListSplitter")]
		public ImDrawListSplitter Splitter;




		[NativeName(NativeNameType.Func, "ImGuiOldColumns_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiOldColumns* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImRect")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImRect
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Min")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Min;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Max")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Max;




		[NativeName(NativeNameType.Func, "ImRect_Add_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Add([NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.AddNative(@this, p);
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_Add_Rect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Add([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.AddNative(@this, r);
			}
		}

		/// <summary>		/// Simple version, may lead to an inverted rectangle, which is fine for ContainsOverlaps test but not for display.		/// </summary>		[NativeName(NativeNameType.Func, "ImRect_ClipWith")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClipWith([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.ClipWithNative(@this, r);
			}
		}

		/// <summary>		/// Full version, ensure both points are fully clipped.		/// </summary>		[NativeName(NativeNameType.Func, "ImRect_ClipWithFull")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClipWithFull([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.ClipWithFullNative(@this, r);
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_Contains_Vec2")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Contains([NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			fixed (ImRect* @this = &this)
			{
				byte ret = ImGui.ContainsNative(@this, p);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_Contains_Rect")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Contains([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImRect* @this = &this)
			{
				byte ret = ImGui.ContainsNative(@this, r);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_Expand_Float")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Expand([NativeName(NativeNameType.Param, "amount")] [NativeName(NativeNameType.Type, "const float")] float amount)
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.ExpandNative(@this, amount);
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_Expand_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Expand([NativeName(NativeNameType.Param, "amount")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 amount)
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.ExpandNative(@this, amount);
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_Floor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Floor()
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.FloorNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_GetArea")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float GetArea()
		{
			fixed (ImRect* @this = &this)
			{
				float ret = ImGui.GetAreaNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_GetHeight")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float GetHeight()
		{
			fixed (ImRect* @this = &this)
			{
				float ret = ImGui.GetHeightNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_GetWidth")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float GetWidth()
		{
			fixed (ImRect* @this = &this)
			{
				float ret = ImGui.GetWidthNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_IsInverted")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsInverted()
		{
			fixed (ImRect* @this = &this)
			{
				byte ret = ImGui.IsInvertedNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_Overlaps")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Overlaps([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImRect* @this = &this)
			{
				byte ret = ImGui.OverlapsNative(@this, r);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_Translate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Translate([NativeName(NativeNameType.Param, "d")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 d)
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.TranslateNative(@this, d);
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_TranslateX")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void TranslateX([NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "float")] float dx)
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.TranslateXNative(@this, dx);
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_TranslateY")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void TranslateY([NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "float")] float dy)
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.TranslateYNative(@this, dy);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiOldColumnData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiOldColumnData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiOldColumnData*")]
		public unsafe ImGuiOldColumnData* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiOldColumnData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiOldColumnData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OffsetNorm")]
		[NativeName(NativeNameType.Type, "float")]
		public float OffsetNorm;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OffsetNormBeforeResize")]
		[NativeName(NativeNameType.Type, "float")]
		public float OffsetNormBeforeResize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiOldColumnFlags")]
		public ImGuiOldColumnFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect ClipRect;




		[NativeName(NativeNameType.Func, "ImGuiOldColumnData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiOldColumnData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVec2ih")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVec2Ih
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "short")]
		public short X;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "y")]
		[NativeName(NativeNameType.Type, "short")]
		public short Y;




		[NativeName(NativeNameType.Func, "ImVec2ih_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImVec2Ih* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiOldColumns")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiOldColumns
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiOldColumns*")]
		public unsafe ImGuiOldColumns* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiWindowDockStyle")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiWindowDockStyle
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Colors")]
		[NativeName(NativeNameType.Type, "ImU32[6]")]
		public uint Colors_0;
		public uint Colors_1;
		public uint Colors_2;
		public uint Colors_3;
		public uint Colors_4;
		public uint Colors_5;



		/// <summary>
		/// To be documented.
		/// </summary>
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiDockNode")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDockNode
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SharedFlags")]
		[NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")]
		public ImGuiDockNodeFlags SharedFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LocalFlags")]
		[NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")]
		public ImGuiDockNodeFlags LocalFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LocalFlagsInWindows")]
		[NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")]
		public ImGuiDockNodeFlags LocalFlagsInWindows;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MergedFlags")]
		[NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")]
		public ImGuiDockNodeFlags MergedFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "State")]
		[NativeName(NativeNameType.Type, "ImGuiDockNodeState")]
		public ImGuiDockNodeState State;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ParentNode")]
		[NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public unsafe ImGuiDockNode* ParentNode;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ChildNodes")]
		[NativeName(NativeNameType.Type, "ImGuiDockNode*[2]")]
		public unsafe ImGuiDockNode* ChildNodes_0;
		public unsafe ImGuiDockNode* ChildNodes_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Windows")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr")]
		public ImVectorImGuiWindowPtr Windows;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TabBar")]
		[NativeName(NativeNameType.Type, "ImGuiTabBar*")]
		public unsafe ImGuiTabBar* TabBar;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Pos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Pos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SizeRef")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 SizeRef;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SplitAxis")]
		[NativeName(NativeNameType.Type, "ImGuiAxis")]
		public ImGuiAxis SplitAxis;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowClass")]
		[NativeName(NativeNameType.Type, "ImGuiWindowClass")]
		public ImGuiWindowClass WindowClass;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastBgColor")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint LastBgColor;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HostWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* HostWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "VisibleWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* VisibleWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CentralNode")]
		[NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public unsafe ImGuiDockNode* CentralNode;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OnlyNodeWithWindows")]
		[NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public unsafe ImGuiDockNode* OnlyNodeWithWindows;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CountNodeWithWindows")]
		[NativeName(NativeNameType.Type, "int")]
		public int CountNodeWithWindows;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrameAlive")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameAlive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrameActive")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrameFocused")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameFocused;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFocusedNodeId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int LastFocusedNodeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SelectedTabId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int SelectedTabId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantCloseTabId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int WantCloseTabId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RefViewportId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int RefViewportId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AuthorityForPos")]
		[NativeName(NativeNameType.Type, "ImGuiDataAuthority")]
		public ImGuiDataAuthority AuthorityForPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AuthorityForSize")]
		[NativeName(NativeNameType.Type, "ImGuiDataAuthority")]
		public ImGuiDataAuthority AuthorityForSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AuthorityForViewport")]
		[NativeName(NativeNameType.Type, "ImGuiDataAuthority")]
		public ImGuiDataAuthority AuthorityForViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsVisible")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsVisible;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsFocused")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsFocused;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsBgDrawnThisFrame")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsBgDrawnThisFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HasCloseButton")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HasCloseButton;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HasWindowMenuButton")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HasWindowMenuButton;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HasCentralNodeChild")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HasCentralNodeChild;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantCloseAll")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantCloseAll;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantLockSizeOnce")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantLockSizeOnce;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantMouseMove")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantMouseMove;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantHiddenTabBarUpdate")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantHiddenTabBarUpdate;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantHiddenTabBarToggle")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantHiddenTabBarToggle;




		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiDockNode_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiDockNode_IsCentralNode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsCentralNode()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				byte ret = ImGui.IsCentralNodeNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiDockNode_IsDockSpace")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsDockSpace()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				byte ret = ImGui.IsDockSpaceNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiDockNode_IsEmpty")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsEmpty()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				byte ret = ImGui.IsEmptyNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiDockNode_IsFloatingNode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsFloatingNode()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				byte ret = ImGui.IsFloatingNodeNative(@this);
				return ret != 0;
			}
		}

		/// <summary>		/// Hidden tab bar can be shown back by clicking the small triangle		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiDockNode_IsHiddenTabBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsHiddenTabBar()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				byte ret = ImGui.IsHiddenTabBarNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiDockNode_IsLeafNode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsLeafNode()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				byte ret = ImGui.IsLeafNodeNative(@this);
				return ret != 0;
			}
		}

		/// <summary>		/// Never show a tab bar		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiDockNode_IsNoTabBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsNoTabBar()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				byte ret = ImGui.IsNoTabBarNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiDockNode_IsRootNode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsRootNode()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				byte ret = ImGui.IsRootNodeNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiDockNode_IsSplitNode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsSplitNode()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				byte ret = ImGui.IsSplitNodeNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiDockNode_SetLocalFlags")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetLocalFlags([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags)
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				ImGui.SetLocalFlagsNative(@this, flags);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiDockNode_UpdateMergedFlags")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void UpdateMergedFlags()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				ImGui.UpdateMergedFlagsNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTabBar")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTabBar
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Tabs")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiTabItem")]
		public ImVectorImGuiTabItem Tabs;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiTabBarFlags")]
		public ImGuiTabBarFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SelectedTabId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int SelectedTabId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NextSelectedTabId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int NextSelectedTabId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "VisibleTabId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int VisibleTabId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrFrameVisible")]
		[NativeName(NativeNameType.Type, "int")]
		public int CurrFrameVisible;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PrevFrameVisible")]
		[NativeName(NativeNameType.Type, "int")]
		public int PrevFrameVisible;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BarRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect BarRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrTabsContentsHeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float CurrTabsContentsHeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PrevTabsContentsHeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float PrevTabsContentsHeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WidthAllTabs")]
		[NativeName(NativeNameType.Type, "float")]
		public float WidthAllTabs;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WidthAllTabsIdeal")]
		[NativeName(NativeNameType.Type, "float")]
		public float WidthAllTabsIdeal;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollingAnim")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollingAnim;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollingTarget")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollingTarget;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollingTargetDistToVisibility")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollingTargetDistToVisibility;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollingSpeed")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollingSpeed;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollingRectMinX")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollingRectMinX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollingRectMaxX")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollingRectMaxX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ReorderRequestTabId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ReorderRequestTabId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ReorderRequestOffset")]
		[NativeName(NativeNameType.Type, "ImS16")]
		public short ReorderRequestOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BeginCount")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte BeginCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantLayout")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantLayout;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "VisibleTabWasSubmitted")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte VisibleTabWasSubmitted;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TabsAddedNew")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte TabsAddedNew;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TabsActiveCount")]
		[NativeName(NativeNameType.Type, "ImS16")]
		public short TabsActiveCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastTabItemIdx")]
		[NativeName(NativeNameType.Type, "ImS16")]
		public short LastTabItemIdx;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemSpacingY")]
		[NativeName(NativeNameType.Type, "float")]
		public float ItemSpacingY;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FramePadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 FramePadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackupCursorPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 BackupCursorPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TabsNames")]
		[NativeName(NativeNameType.Type, "ImGuiTextBuffer")]
		public ImGuiTextBuffer TabsNames;




		[NativeName(NativeNameType.Func, "ImGuiTabBar_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTabBar* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiTabItem")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiTabItem
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiTabItem*")]
		public unsafe ImGuiTabItem* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTabItem")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTabItem
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiTabItemFlags")]
		public ImGuiTabItemFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Window")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* Window;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrameVisible")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameVisible;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrameSelected")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameSelected;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Offset")]
		[NativeName(NativeNameType.Type, "float")]
		public float Offset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "float")]
		public float Width;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ContentWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float ContentWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RequestedWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float RequestedWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NameOffset")]
		[NativeName(NativeNameType.Type, "ImS32")]
		public int NameOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BeginOrder")]
		[NativeName(NativeNameType.Type, "ImS16")]
		public short BeginOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IndexDuringLayout")]
		[NativeName(NativeNameType.Type, "ImS16")]
		public short IndexDuringLayout;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantClose")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantClose;




		[NativeName(NativeNameType.Func, "ImGuiTabItem_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTabItem* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTextBuffer")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTextBuffer
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Buf")]
		[NativeName(NativeNameType.Type, "ImVector_char")]
		public ImVectorChar Buf;




		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				ImGui.appendNative(@this, str, strEnd);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				ImGui.appendNative(@this, str, (byte*)(default));
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				fixed (byte* pstr = &str)
				{
					ImGui.appendNative(@this, (byte*)pstr, strEnd);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte str)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				fixed (byte* pstr = &str)
				{
					ImGui.appendNative(@this, (byte*)pstr, (byte*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.appendNative(@this, pStr0, strEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string str)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.appendNative(@this, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte strEnd)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				fixed (byte* pstrEnd = &strEnd)
				{
					ImGui.appendNative(@this, str, (byte*)pstrEnd);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] string strEnd)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (strEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(strEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(strEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.appendNative(@this, str, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte strEnd)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				fixed (byte* pstr = &str)
				{
					fixed (byte* pstrEnd = &strEnd)
					{
						ImGui.appendNative(@this, (byte*)pstr, (byte*)pstrEnd);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] string strEnd)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (strEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(strEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(strEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.appendNative(@this, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void appendf([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				ImGui.appendfNative(@this, fmt);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void appendf([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				fixed (byte* pfmt = &fmt)
				{
					ImGui.appendfNative(@this, (byte*)pfmt);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void appendf([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fmt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fmt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.appendfNative(@this, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void appendfv([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nuint args)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				ImGui.appendfvNative(@this, fmt, args);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void appendfv([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nuint args)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				fixed (byte* pfmt = &fmt)
				{
					ImGui.appendfvNative(@this, (byte*)pfmt, args);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void appendfv([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nuint args)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fmt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fmt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.appendfvNative(@this, pStr0, args);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* begin()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* ret = ImGui.beginNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string beginS()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImGui.beginNative(@this));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_c_str")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* c_str()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* ret = ImGui.c_strNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_c_str")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string c_strS()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImGui.c_strNative(@this));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void clear()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				ImGui.clearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_empty")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool empty()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte ret = ImGui.emptyNative(@this);
				return ret != 0;
			}
		}

		/// <summary>		/// Buf is zero-terminated, so end() will point on the zero-terminator		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* end()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* ret = ImGui.endNative(@this);
				return ret;
			}
		}

		/// <summary>		/// Buf is zero-terminated, so end() will point on the zero-terminator		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string endS()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImGui.endNative(@this));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_reserve")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void reserve([NativeName(NativeNameType.Param, "capacity")] [NativeName(NativeNameType.Type, "int")] int capacity)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				ImGui.reserveNative(@this, capacity);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_size")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int size()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				int ret = ImGui.sizeNative(@this);
				return ret;
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_char")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorChar
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "char*")]
		public unsafe byte* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiWindowStackData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiWindowStackData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiWindowStackData*")]
		public unsafe ImGuiWindowStackData* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiWindowStackData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiWindowStackData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Window")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* Window;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ParentLastItemDataBackup")]
		[NativeName(NativeNameType.Type, "ImGuiLastItemData")]
		public ImGuiLastItemData ParentLastItemDataBackup;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "StackSizesOnBegin")]
		[NativeName(NativeNameType.Type, "ImGuiStackSizes")]
		public ImGuiStackSizes StackSizesOnBegin;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiLastItemData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiLastItemData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InFlags")]
		[NativeName(NativeNameType.Type, "ImGuiItemFlags")]
		public ImGuiItemFlags InFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "StatusFlags")]
		[NativeName(NativeNameType.Type, "ImGuiItemStatusFlags")]
		public ImGuiItemStatusFlags StatusFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Rect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect Rect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect NavRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect DisplayRect;




		[NativeName(NativeNameType.Func, "ImGuiLastItemData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiLastItemData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiStackSizes")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiStackSizes
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SizeOfIDStack")]
		[NativeName(NativeNameType.Type, "short")]
		public short SizeOfIDStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SizeOfColorStack")]
		[NativeName(NativeNameType.Type, "short")]
		public short SizeOfColorStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SizeOfStyleVarStack")]
		[NativeName(NativeNameType.Type, "short")]
		public short SizeOfStyleVarStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SizeOfFontStack")]
		[NativeName(NativeNameType.Type, "short")]
		public short SizeOfFontStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SizeOfFocusScopeStack")]
		[NativeName(NativeNameType.Type, "short")]
		public short SizeOfFocusScopeStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SizeOfGroupStack")]
		[NativeName(NativeNameType.Type, "short")]
		public short SizeOfGroupStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SizeOfItemFlagsStack")]
		[NativeName(NativeNameType.Type, "short")]
		public short SizeOfItemFlagsStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SizeOfBeginPopupStack")]
		[NativeName(NativeNameType.Type, "short")]
		public short SizeOfBeginPopupStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SizeOfDisabledStack")]
		[NativeName(NativeNameType.Type, "short")]
		public short SizeOfDisabledStack;




		[NativeName(NativeNameType.Func, "ImGuiStackSizes_CompareWithContextState")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CompareWithContextState([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx)
		{
			fixed (ImGuiStackSizes* @this = &this)
			{
				ImGui.CompareWithContextStateNative(@this, ctx);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStackSizes_CompareWithContextState")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CompareWithContextState([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx)
		{
			fixed (ImGuiStackSizes* @this = &this)
			{
				fixed (ImGuiContext* pctx = &ctx)
				{
					ImGui.CompareWithContextStateNative(@this, (ImGuiContext*)pctx);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStackSizes_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiStackSizes* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStackSizes_SetToContextState")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetToContextState([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx)
		{
			fixed (ImGuiStackSizes* @this = &this)
			{
				ImGui.SetToContextStateNative(@this, ctx);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStackSizes_SetToContextState")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetToContextState([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx)
		{
			fixed (ImGuiStackSizes* @this = &this)
			{
				fixed (ImGuiContext* pctx = &ctx)
				{
					ImGui.SetToContextStateNative(@this, (ImGuiContext*)pctx);
				}
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiKeyOwnerData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiKeyOwnerData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OwnerCurr")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int OwnerCurr;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OwnerNext")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int OwnerNext;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LockThisFrame")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte LockThisFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LockUntilRelease")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte LockUntilRelease;




		[NativeName(NativeNameType.Func, "ImGuiKeyOwnerData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiKeyOwnerData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiKeyRoutingTable")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiKeyRoutingTable
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Index")]
		[NativeName(NativeNameType.Type, "ImGuiKeyRoutingIndex[140]")]
		public short Index_0;
		public short Index_1;
		public short Index_2;
		public short Index_3;
		public short Index_4;
		public short Index_5;
		public short Index_6;
		public short Index_7;
		public short Index_8;
		public short Index_9;
		public short Index_10;
		public short Index_11;
		public short Index_12;
		public short Index_13;
		public short Index_14;
		public short Index_15;
		public short Index_16;
		public short Index_17;
		public short Index_18;
		public short Index_19;
		public short Index_20;
		public short Index_21;
		public short Index_22;
		public short Index_23;
		public short Index_24;
		public short Index_25;
		public short Index_26;
		public short Index_27;
		public short Index_28;
		public short Index_29;
		public short Index_30;
		public short Index_31;
		public short Index_32;
		public short Index_33;
		public short Index_34;
		public short Index_35;
		public short Index_36;
		public short Index_37;
		public short Index_38;
		public short Index_39;
		public short Index_40;
		public short Index_41;
		public short Index_42;
		public short Index_43;
		public short Index_44;
		public short Index_45;
		public short Index_46;
		public short Index_47;
		public short Index_48;
		public short Index_49;
		public short Index_50;
		public short Index_51;
		public short Index_52;
		public short Index_53;
		public short Index_54;
		public short Index_55;
		public short Index_56;
		public short Index_57;
		public short Index_58;
		public short Index_59;
		public short Index_60;
		public short Index_61;
		public short Index_62;
		public short Index_63;
		public short Index_64;
		public short Index_65;
		public short Index_66;
		public short Index_67;
		public short Index_68;
		public short Index_69;
		public short Index_70;
		public short Index_71;
		public short Index_72;
		public short Index_73;
		public short Index_74;
		public short Index_75;
		public short Index_76;
		public short Index_77;
		public short Index_78;
		public short Index_79;
		public short Index_80;
		public short Index_81;
		public short Index_82;
		public short Index_83;
		public short Index_84;
		public short Index_85;
		public short Index_86;
		public short Index_87;
		public short Index_88;
		public short Index_89;
		public short Index_90;
		public short Index_91;
		public short Index_92;
		public short Index_93;
		public short Index_94;
		public short Index_95;
		public short Index_96;
		public short Index_97;
		public short Index_98;
		public short Index_99;
		public short Index_100;
		public short Index_101;
		public short Index_102;
		public short Index_103;
		public short Index_104;
		public short Index_105;
		public short Index_106;
		public short Index_107;
		public short Index_108;
		public short Index_109;
		public short Index_110;
		public short Index_111;
		public short Index_112;
		public short Index_113;
		public short Index_114;
		public short Index_115;
		public short Index_116;
		public short Index_117;
		public short Index_118;
		public short Index_119;
		public short Index_120;
		public short Index_121;
		public short Index_122;
		public short Index_123;
		public short Index_124;
		public short Index_125;
		public short Index_126;
		public short Index_127;
		public short Index_128;
		public short Index_129;
		public short Index_130;
		public short Index_131;
		public short Index_132;
		public short Index_133;
		public short Index_134;
		public short Index_135;
		public short Index_136;
		public short Index_137;
		public short Index_138;
		public short Index_139;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Entries")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiKeyRoutingData")]
		public ImVectorImGuiKeyRoutingData Entries;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EntriesNext")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiKeyRoutingData")]
		public ImVectorImGuiKeyRoutingData EntriesNext;




		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiKeyRoutingTable_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImGuiKeyRoutingTable* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiKeyRoutingTable_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiKeyRoutingTable* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiKeyRoutingData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiKeyRoutingData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiKeyRoutingData*")]
		public unsafe ImGuiKeyRoutingData* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiKeyRoutingData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiKeyRoutingData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NextEntryIndex")]
		[NativeName(NativeNameType.Type, "ImGuiKeyRoutingIndex")]
		public short NextEntryIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Mods")]
		[NativeName(NativeNameType.Type, "ImU16")]
		public ushort Mods;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RoutingNextScore")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte RoutingNextScore;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RoutingCurr")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int RoutingCurr;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RoutingNext")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int RoutingNext;




		[NativeName(NativeNameType.Func, "ImGuiKeyRoutingData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiKeyRoutingData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiNextItemData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiNextItemData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiNextItemDataFlags")]
		public ImGuiNextItemDataFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemFlags")]
		[NativeName(NativeNameType.Type, "ImGuiItemFlags")]
		public ImGuiItemFlags ItemFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "float")]
		public float Width;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FocusScopeId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int FocusScopeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OpenCond")]
		[NativeName(NativeNameType.Type, "ImGuiCond")]
		public ImGuiCond OpenCond;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OpenVal")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte OpenVal;




		/// <summary>		/// Also cleared manually by ItemAdd()!		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiNextItemData_ClearFlags")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearFlags()
		{
			fixed (ImGuiNextItemData* @this = &this)
			{
				ImGui.ClearFlagsNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiNextItemData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiNextItemData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiNextWindowData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiNextWindowData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiNextWindowDataFlags")]
		public ImGuiNextWindowDataFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PosCond")]
		[NativeName(NativeNameType.Type, "ImGuiCond")]
		public ImGuiCond PosCond;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SizeCond")]
		[NativeName(NativeNameType.Type, "ImGuiCond")]
		public ImGuiCond SizeCond;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CollapsedCond")]
		[NativeName(NativeNameType.Type, "ImGuiCond")]
		public ImGuiCond CollapsedCond;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockCond")]
		[NativeName(NativeNameType.Type, "ImGuiCond")]
		public ImGuiCond DockCond;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PosVal")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 PosVal;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PosPivotVal")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 PosPivotVal;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SizeVal")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 SizeVal;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ContentSizeVal")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ContentSizeVal;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollVal")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ScrollVal;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PosUndock")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte PosUndock;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CollapsedVal")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte CollapsedVal;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SizeConstraintRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect SizeConstraintRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SizeCallback")]
		[NativeName(NativeNameType.Type, "ImGuiSizeCallback")]
		public unsafe void* SizeCallback;
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SizeCallbackUserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* SizeCallbackUserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BgAlphaVal")]
		[NativeName(NativeNameType.Type, "float")]
		public float BgAlphaVal;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ViewportId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int DockId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowClass")]
		[NativeName(NativeNameType.Type, "ImGuiWindowClass")]
		public ImGuiWindowClass WindowClass;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MenuBarOffsetMinVal")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 MenuBarOffsetMinVal;




		[NativeName(NativeNameType.Func, "ImGuiNextWindowData_ClearFlags")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearFlags()
		{
			fixed (ImGuiNextWindowData* @this = &this)
			{
				ImGui.ClearFlagsNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiNextWindowData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiNextWindowData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiSizeCallbackData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiSizeCallbackData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "UserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Pos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Pos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 CurrentSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DesiredSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 DesiredSize;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiColorMod")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiColorMod
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiColorMod*")]
		public unsafe ImGuiColorMod* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiColorMod")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiColorMod
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Col")]
		[NativeName(NativeNameType.Type, "ImGuiCol")]
		public ImGuiCol Col;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackupValue")]
		[NativeName(NativeNameType.Type, "ImVec4")]
		public Vector4 BackupValue;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiStyleMod")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiStyleMod
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiStyleMod*")]
		public unsafe ImGuiStyleMod* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiStyleMod")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiStyleMod
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct ImGuiStyleModUnion
		{
			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "BackupInt")]
			[NativeName(NativeNameType.Type, "int[2]")]
			[FieldOffset(0)]
			public int BackupInt_0;
			[FieldOffset(8)]
			public int BackupInt_1;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "BackupFloat")]
			[NativeName(NativeNameType.Type, "float[2]")]
			[FieldOffset(0)]
			public float BackupFloat_0;
			[FieldOffset(8)]
			public float BackupFloat_1;



			/// <summary>
			/// To be documented.
			/// </summary>
			/// <summary>
			/// To be documented.
			/// </summary>
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "VarIdx")]
		[NativeName(NativeNameType.Type, "ImGuiStyleVar")]
		public ImGuiStyleVar VarIdx;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public ImGuiStyleModUnion Union;




		[NativeName(NativeNameType.Func, "ImGuiStyleMod_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiStyleMod* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiItemFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiItemFlags
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiItemFlags*")]
		public unsafe ImGuiItemFlags* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiGroupData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiGroupData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiGroupData*")]
		public unsafe ImGuiGroupData* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiGroupData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiGroupData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int WindowID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackupCursorPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 BackupCursorPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackupCursorMaxPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 BackupCursorMaxPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackupIndent")]
		[NativeName(NativeNameType.Type, "ImVec1")]
		public ImVec1 BackupIndent;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackupGroupOffset")]
		[NativeName(NativeNameType.Type, "ImVec1")]
		public ImVec1 BackupGroupOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackupCurrLineSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 BackupCurrLineSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackupCurrLineTextBaseOffset")]
		[NativeName(NativeNameType.Type, "float")]
		public float BackupCurrLineTextBaseOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackupActiveIdIsAlive")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int BackupActiveIdIsAlive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackupActiveIdPreviousFrameIsAlive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte BackupActiveIdPreviousFrameIsAlive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackupHoveredIdIsAlive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte BackupHoveredIdIsAlive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EmitItem")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte EmitItem;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiPopupData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiPopupData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiPopupData*")]
		public unsafe ImGuiPopupData* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiPopupData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiPopupData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PopupId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int PopupId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Window")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* Window;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackupNavWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* BackupNavWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ParentNavLayer")]
		[NativeName(NativeNameType.Type, "int")]
		public int ParentNavLayer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OpenFrameCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int OpenFrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OpenParentId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int OpenParentId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OpenPopupPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 OpenPopupPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OpenMousePos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 OpenMousePos;




		[NativeName(NativeNameType.Func, "ImGuiPopupData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiPopupData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiViewportPPtr")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiViewportPPtr
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiViewportP**")]
		public unsafe ImGuiViewportP** Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiNavItemData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiNavItemData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Window")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* Window;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FocusScopeId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int FocusScopeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RectRel")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect RectRel;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InFlags")]
		[NativeName(NativeNameType.Type, "ImGuiItemFlags")]
		public ImGuiItemFlags InFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DistBox")]
		[NativeName(NativeNameType.Type, "float")]
		public float DistBox;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DistCenter")]
		[NativeName(NativeNameType.Type, "float")]
		public float DistCenter;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DistAxial")]
		[NativeName(NativeNameType.Type, "float")]
		public float DistAxial;




		[NativeName(NativeNameType.Func, "ImGuiNavItemData_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImGuiNavItemData* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiNavItemData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiNavItemData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiPayload")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiPayload
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* Data;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DataSize")]
		[NativeName(NativeNameType.Type, "int")]
		public int DataSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SourceId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int SourceId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SourceParentId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int SourceParentId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DataFrameCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int DataFrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DataType")]
		[NativeName(NativeNameType.Type, "char[33]")]
		public byte DataType_0;
		public byte DataType_1;
		public byte DataType_2;
		public byte DataType_3;
		public byte DataType_4;
		public byte DataType_5;
		public byte DataType_6;
		public byte DataType_7;
		public byte DataType_8;
		public byte DataType_9;
		public byte DataType_10;
		public byte DataType_11;
		public byte DataType_12;
		public byte DataType_13;
		public byte DataType_14;
		public byte DataType_15;
		public byte DataType_16;
		public byte DataType_17;
		public byte DataType_18;
		public byte DataType_19;
		public byte DataType_20;
		public byte DataType_21;
		public byte DataType_22;
		public byte DataType_23;
		public byte DataType_24;
		public byte DataType_25;
		public byte DataType_26;
		public byte DataType_27;
		public byte DataType_28;
		public byte DataType_29;
		public byte DataType_30;
		public byte DataType_31;
		public byte DataType_32;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Preview")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Preview;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Delivery")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Delivery;




		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImGuiPayload* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiPayload_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiPayload* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDataType")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsDataType([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "const char*")] byte* type)
		{
			fixed (ImGuiPayload* @this = &this)
			{
				byte ret = ImGui.IsDataTypeNative(@this, type);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDataType")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsDataType([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "const char*")] ref byte type)
		{
			fixed (ImGuiPayload* @this = &this)
			{
				fixed (byte* ptype = &type)
				{
					byte ret = ImGui.IsDataTypeNative(@this, (byte*)ptype);
					return ret != 0;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDataType")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsDataType([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "const char*")] string type)
		{
			fixed (ImGuiPayload* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (type != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(type);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(type, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = ImGui.IsDataTypeNative(@this, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDelivery")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsDelivery()
		{
			fixed (ImGuiPayload* @this = &this)
			{
				byte ret = ImGui.IsDeliveryNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiPayload_IsPreview")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsPreview()
		{
			fixed (ImGuiPayload* @this = &this)
			{
				byte ret = ImGui.IsPreviewNative(@this);
				return ret != 0;
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_unsigned_char")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorUnsignedChar
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "unsigned char*")]
		public unsafe byte* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiListClipperData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiListClipperData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiListClipperData*")]
		public unsafe ImGuiListClipperData* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiListClipperData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiListClipperData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ListClipper")]
		[NativeName(NativeNameType.Type, "ImGuiListClipper*")]
		public unsafe ImGuiListClipper* ListClipper;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LossynessOffset")]
		[NativeName(NativeNameType.Type, "float")]
		public float LossynessOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "StepNo")]
		[NativeName(NativeNameType.Type, "int")]
		public int StepNo;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemsFrozen")]
		[NativeName(NativeNameType.Type, "int")]
		public int ItemsFrozen;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Ranges")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiListClipperRange")]
		public ImVectorImGuiListClipperRange Ranges;




		[NativeName(NativeNameType.Func, "ImGuiListClipperData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiListClipperData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiListClipperData_Reset")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Reset([NativeName(NativeNameType.Param, "clipper")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ImGuiListClipper* clipper)
		{
			fixed (ImGuiListClipperData* @this = &this)
			{
				ImGui.ResetNative(@this, clipper);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiListClipperData_Reset")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Reset([NativeName(NativeNameType.Param, "clipper")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ref ImGuiListClipper clipper)
		{
			fixed (ImGuiListClipperData* @this = &this)
			{
				fixed (ImGuiListClipper* pclipper = &clipper)
				{
					ImGui.ResetNative(@this, (ImGuiListClipper*)pclipper);
				}
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiListClipper")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiListClipper
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Ctx")]
		[NativeName(NativeNameType.Type, "ImGuiContext*")]
		public unsafe ImGuiContext* Ctx;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayStart")]
		[NativeName(NativeNameType.Type, "int")]
		public int DisplayStart;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayEnd")]
		[NativeName(NativeNameType.Type, "int")]
		public int DisplayEnd;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemsCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int ItemsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemsHeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float ItemsHeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "StartPosY")]
		[NativeName(NativeNameType.Type, "float")]
		public float StartPosY;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TempData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* TempData;




		[NativeName(NativeNameType.Func, "ImGuiListClipper_Begin")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Begin([NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "items_height")] [NativeName(NativeNameType.Type, "float")] float itemsHeight)
		{
			fixed (ImGuiListClipper* @this = &this)
			{
				ImGui.BeginNative(@this, itemsCount, itemsHeight);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiListClipper_Begin")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Begin([NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			fixed (ImGuiListClipper* @this = &this)
			{
				ImGui.BeginNative(@this, itemsCount, (float)(-1.0f));
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiListClipper_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiListClipper* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>		/// Automatically called on the last call of Step() that returns false.		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiListClipper_End")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void End()
		{
			fixed (ImGuiListClipper* @this = &this)
			{
				ImGui.EndNative(@this);
			}
		}

		/// <summary>		/// item_end is exclusive e.g. use (42, 42+1) to make item 42 never clipped.		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiListClipper_IncludeRangeByIndices")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void IncludeRangeByIndices([NativeName(NativeNameType.Param, "item_begin")] [NativeName(NativeNameType.Type, "int")] int itemBegin, [NativeName(NativeNameType.Param, "item_end")] [NativeName(NativeNameType.Type, "int")] int itemEnd)
		{
			fixed (ImGuiListClipper* @this = &this)
			{
				ImGui.IncludeRangeByIndicesNative(@this, itemBegin, itemEnd);
			}
		}

		/// <summary>		/// Call until it returns false. The DisplayStartDisplayEnd fields will be set and you can processdraw those items.		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiListClipper_Step")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Step()
		{
			fixed (ImGuiListClipper* @this = &this)
			{
				byte ret = ImGui.StepNative(@this);
				return ret != 0;
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiListClipperRange")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiListClipperRange
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiListClipperRange*")]
		public unsafe ImGuiListClipperRange* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiListClipperRange")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiListClipperRange
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Min")]
		[NativeName(NativeNameType.Type, "int")]
		public int Min;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Max")]
		[NativeName(NativeNameType.Type, "int")]
		public int Max;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PosToIndexConvert")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte PosToIndexConvert;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PosToIndexOffsetMin")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte PosToIndexOffsetMin;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PosToIndexOffsetMax")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte PosToIndexOffsetMax;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTable")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTable
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiTableFlags")]
		public ImGuiTableFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RawData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* RawData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TempData")]
		[NativeName(NativeNameType.Type, "ImGuiTableTempData*")]
		public unsafe ImGuiTableTempData* TempData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Columns")]
		[NativeName(NativeNameType.Type, "ImSpan_ImGuiTableColumn")]
		public ImSpanImGuiTableColumn Columns;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayOrderToIndex")]
		[NativeName(NativeNameType.Type, "ImSpan_ImGuiTableColumnIdx")]
		public ImSpanImGuiTableColumnIdx DisplayOrderToIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RowCellData")]
		[NativeName(NativeNameType.Type, "ImSpan_ImGuiTableCellData")]
		public ImSpanImGuiTableCellData RowCellData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EnabledMaskByDisplayOrder")]
		[NativeName(NativeNameType.Type, "ImBitArrayPtr")]
		public ImBitArrayPtr EnabledMaskByDisplayOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EnabledMaskByIndex")]
		[NativeName(NativeNameType.Type, "ImBitArrayPtr")]
		public ImBitArrayPtr EnabledMaskByIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "VisibleMaskByIndex")]
		[NativeName(NativeNameType.Type, "ImBitArrayPtr")]
		public ImBitArrayPtr VisibleMaskByIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsLoadedFlags")]
		[NativeName(NativeNameType.Type, "ImGuiTableFlags")]
		public ImGuiTableFlags SettingsLoadedFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsOffset")]
		[NativeName(NativeNameType.Type, "int")]
		public int SettingsOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrameActive")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int ColumnsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentRow")]
		[NativeName(NativeNameType.Type, "int")]
		public int CurrentRow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentColumn")]
		[NativeName(NativeNameType.Type, "int")]
		public int CurrentColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InstanceCurrent")]
		[NativeName(NativeNameType.Type, "ImS16")]
		public short InstanceCurrent;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InstanceInteracted")]
		[NativeName(NativeNameType.Type, "ImS16")]
		public short InstanceInteracted;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RowPosY1")]
		[NativeName(NativeNameType.Type, "float")]
		public float RowPosY1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RowPosY2")]
		[NativeName(NativeNameType.Type, "float")]
		public float RowPosY2;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RowMinHeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float RowMinHeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RowTextBaseline")]
		[NativeName(NativeNameType.Type, "float")]
		public float RowTextBaseline;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RowIndentOffsetX")]
		[NativeName(NativeNameType.Type, "float")]
		public float RowIndentOffsetX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RowFlags")]
		[NativeName(NativeNameType.Type, "ImGuiTableRowFlags")]
		public ImGuiTableRowFlags RowFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastRowFlags")]
		[NativeName(NativeNameType.Type, "ImGuiTableRowFlags")]
		public ImGuiTableRowFlags LastRowFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RowBgColorCounter")]
		[NativeName(NativeNameType.Type, "int")]
		public int RowBgColorCounter;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RowBgColor")]
		[NativeName(NativeNameType.Type, "ImU32[2]")]
		public uint RowBgColor_0;
		public uint RowBgColor_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BorderColorStrong")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint BorderColorStrong;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BorderColorLight")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint BorderColorLight;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BorderX1")]
		[NativeName(NativeNameType.Type, "float")]
		public float BorderX1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BorderX2")]
		[NativeName(NativeNameType.Type, "float")]
		public float BorderX2;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HostIndentX")]
		[NativeName(NativeNameType.Type, "float")]
		public float HostIndentX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MinColumnWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float MinColumnWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OuterPaddingX")]
		[NativeName(NativeNameType.Type, "float")]
		public float OuterPaddingX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CellPaddingX")]
		[NativeName(NativeNameType.Type, "float")]
		public float CellPaddingX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CellPaddingY")]
		[NativeName(NativeNameType.Type, "float")]
		public float CellPaddingY;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CellSpacingX1")]
		[NativeName(NativeNameType.Type, "float")]
		public float CellSpacingX1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CellSpacingX2")]
		[NativeName(NativeNameType.Type, "float")]
		public float CellSpacingX2;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float InnerWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsGivenWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float ColumnsGivenWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsAutoFitWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float ColumnsAutoFitWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsStretchSumWeights")]
		[NativeName(NativeNameType.Type, "float")]
		public float ColumnsStretchSumWeights;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ResizedColumnNextWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float ResizedColumnNextWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ResizeLockMinContentsX2")]
		[NativeName(NativeNameType.Type, "float")]
		public float ResizeLockMinContentsX2;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RefScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float RefScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OuterRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect OuterRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect InnerRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect WorkRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect InnerClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BgClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect BgClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Bg0ClipRectForDrawCmd")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect Bg0ClipRectForDrawCmd;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Bg2ClipRectForDrawCmd")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect Bg2ClipRectForDrawCmd;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HostClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect HostClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupInnerClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect HostBackupInnerClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OuterWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* OuterWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* InnerWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsNames")]
		[NativeName(NativeNameType.Type, "ImGuiTextBuffer")]
		public ImGuiTextBuffer ColumnsNames;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawSplitter")]
		[NativeName(NativeNameType.Type, "ImDrawListSplitter*")]
		public unsafe ImDrawListSplitter* DrawSplitter;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InstanceDataFirst")]
		[NativeName(NativeNameType.Type, "ImGuiTableInstanceData")]
		public ImGuiTableInstanceData InstanceDataFirst;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InstanceDataExtra")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiTableInstanceData")]
		public ImVectorImGuiTableInstanceData InstanceDataExtra;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SortSpecsSingle")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnSortSpecs")]
		public ImGuiTableColumnSortSpecs SortSpecsSingle;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SortSpecsMulti")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiTableColumnSortSpecs")]
		public ImVectorImGuiTableColumnSortSpecs SortSpecsMulti;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SortSpecs")]
		[NativeName(NativeNameType.Type, "ImGuiTableSortSpecs")]
		public ImGuiTableSortSpecs SortSpecs;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SortSpecsCount")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte SortSpecsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsEnabledCount")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte ColumnsEnabledCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsEnabledFixedCount")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte ColumnsEnabledFixedCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DeclColumnsCount")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte DeclColumnsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredColumnBody")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte HoveredColumnBody;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredColumnBorder")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte HoveredColumnBorder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AutoFitSingleColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte AutoFitSingleColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ResizedColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte ResizedColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastResizedColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte LastResizedColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HeldHeaderColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte HeldHeaderColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ReorderColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte ReorderColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ReorderColumnDir")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte ReorderColumnDir;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LeftMostEnabledColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte LeftMostEnabledColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RightMostEnabledColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte RightMostEnabledColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LeftMostStretchedColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte LeftMostStretchedColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RightMostStretchedColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte RightMostStretchedColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ContextPopupColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte ContextPopupColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FreezeRowsRequest")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte FreezeRowsRequest;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FreezeRowsCount")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte FreezeRowsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FreezeColumnsRequest")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte FreezeColumnsRequest;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FreezeColumnsCount")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte FreezeColumnsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RowCellDataCurrent")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte RowCellDataCurrent;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DummyDrawChannel")]
		[NativeName(NativeNameType.Type, "ImGuiTableDrawChannelIdx")]
		public byte DummyDrawChannel;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Bg2DrawChannelCurrent")]
		[NativeName(NativeNameType.Type, "ImGuiTableDrawChannelIdx")]
		public byte Bg2DrawChannelCurrent;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Bg2DrawChannelUnfrozen")]
		[NativeName(NativeNameType.Type, "ImGuiTableDrawChannelIdx")]
		public byte Bg2DrawChannelUnfrozen;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsLayoutLocked")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsLayoutLocked;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsInsideRow")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsInsideRow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsInitializing")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsInitializing;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsSortSpecsDirty")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsSortSpecsDirty;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsUsingHeaders")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsUsingHeaders;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsContextPopupOpen")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsContextPopupOpen;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsSettingsRequestLoad")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsSettingsRequestLoad;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsSettingsDirty")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsSettingsDirty;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsDefaultDisplayOrder")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsDefaultDisplayOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsResetAllRequest")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsResetAllRequest;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsResetDisplayOrderRequest")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsResetDisplayOrderRequest;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsUnfrozenRows")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsUnfrozenRows;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsDefaultSizingPolicy")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsDefaultSizingPolicy;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HasScrollbarYCurr")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HasScrollbarYCurr;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HasScrollbarYPrev")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HasScrollbarYPrev;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MemoryCompacted")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte MemoryCompacted;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HostSkipItems")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HostSkipItems;




		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTable_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTable* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTableTempData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableTempData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TableIndex")]
		[NativeName(NativeNameType.Type, "int")]
		public int TableIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastTimeActive")]
		[NativeName(NativeNameType.Type, "float")]
		public float LastTimeActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "UserOuterSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 UserOuterSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawSplitter")]
		[NativeName(NativeNameType.Type, "ImDrawListSplitter")]
		public ImDrawListSplitter DrawSplitter;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupWorkRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect HostBackupWorkRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupParentWorkRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect HostBackupParentWorkRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupPrevLineSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 HostBackupPrevLineSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupCurrLineSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 HostBackupCurrLineSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupCursorMaxPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 HostBackupCursorMaxPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupColumnsOffset")]
		[NativeName(NativeNameType.Type, "ImVec1")]
		public ImVec1 HostBackupColumnsOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupItemWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float HostBackupItemWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupItemWidthStackSize")]
		[NativeName(NativeNameType.Type, "int")]
		public int HostBackupItemWidthStackSize;




		[NativeName(NativeNameType.Func, "ImGuiTableTempData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTableTempData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImSpan_ImGuiTableColumn")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImSpanImGuiTableColumn
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumn*")]
		public unsafe ImGuiTableColumn* Data;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DataEnd")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumn*")]
		public unsafe ImGuiTableColumn* DataEnd;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTableColumn")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableColumn
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")]
		public ImGuiTableColumnFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WidthGiven")]
		[NativeName(NativeNameType.Type, "float")]
		public float WidthGiven;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MinX")]
		[NativeName(NativeNameType.Type, "float")]
		public float MinX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MaxX")]
		[NativeName(NativeNameType.Type, "float")]
		public float MaxX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WidthRequest")]
		[NativeName(NativeNameType.Type, "float")]
		public float WidthRequest;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WidthAuto")]
		[NativeName(NativeNameType.Type, "float")]
		public float WidthAuto;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "StretchWeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float StretchWeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InitStretchWeightOrWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float InitStretchWeightOrWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect ClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "UserID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int UserID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkMinX")]
		[NativeName(NativeNameType.Type, "float")]
		public float WorkMinX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkMaxX")]
		[NativeName(NativeNameType.Type, "float")]
		public float WorkMaxX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float ItemWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ContentMaxXFrozen")]
		[NativeName(NativeNameType.Type, "float")]
		public float ContentMaxXFrozen;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ContentMaxXUnfrozen")]
		[NativeName(NativeNameType.Type, "float")]
		public float ContentMaxXUnfrozen;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ContentMaxXHeadersUsed")]
		[NativeName(NativeNameType.Type, "float")]
		public float ContentMaxXHeadersUsed;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ContentMaxXHeadersIdeal")]
		[NativeName(NativeNameType.Type, "float")]
		public float ContentMaxXHeadersIdeal;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NameOffset")]
		[NativeName(NativeNameType.Type, "ImS16")]
		public short NameOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayOrder")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte DisplayOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IndexWithinEnabledSet")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte IndexWithinEnabledSet;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PrevEnabledColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte PrevEnabledColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NextEnabledColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte NextEnabledColumn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SortOrder")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte SortOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawChannelCurrent")]
		[NativeName(NativeNameType.Type, "ImGuiTableDrawChannelIdx")]
		public byte DrawChannelCurrent;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawChannelFrozen")]
		[NativeName(NativeNameType.Type, "ImGuiTableDrawChannelIdx")]
		public byte DrawChannelFrozen;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawChannelUnfrozen")]
		[NativeName(NativeNameType.Type, "ImGuiTableDrawChannelIdx")]
		public byte DrawChannelUnfrozen;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsEnabled")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsEnabled;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsUserEnabled")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsUserEnabled;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsUserEnabledNextFrame")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsUserEnabledNextFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsVisibleX")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsVisibleX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsVisibleY")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsVisibleY;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsRequestOutput")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsRequestOutput;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsSkipItems")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsSkipItems;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsPreserveWidthAuto")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsPreserveWidthAuto;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavLayerCurrent")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte NavLayerCurrent;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AutoFitQueue")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte AutoFitQueue;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CannotSkipItemsQueue")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte CannotSkipItemsQueue;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SortDirection")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte SortDirection;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SortDirectionsAvailCount")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte SortDirectionsAvailCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SortDirectionsAvailMask")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte SortDirectionsAvailMask;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SortDirectionsAvailList")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte SortDirectionsAvailList;




		[NativeName(NativeNameType.Func, "ImGuiTableColumn_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTableColumn* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImSpan_ImGuiTableColumnIdx")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImSpanImGuiTableColumnIdx
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx*")]
		public unsafe sbyte* Data;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DataEnd")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx*")]
		public unsafe sbyte* DataEnd;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImSpan_ImGuiTableCellData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImSpanImGuiTableCellData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiTableCellData*")]
		public unsafe ImGuiTableCellData* Data;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DataEnd")]
		[NativeName(NativeNameType.Type, "ImGuiTableCellData*")]
		public unsafe ImGuiTableCellData* DataEnd;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTableCellData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableCellData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BgColor")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint BgColor;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Column")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte Column;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTableInstanceData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableInstanceData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TableInstanceID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int TableInstanceID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastOuterHeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float LastOuterHeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFirstRowHeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float LastFirstRowHeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrozenHeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float LastFrozenHeight;




		[NativeName(NativeNameType.Func, "ImGuiTableInstanceData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTableInstanceData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiTableInstanceData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiTableInstanceData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiTableInstanceData*")]
		public unsafe ImGuiTableInstanceData* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTableColumnSortSpecs")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableColumnSortSpecs
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnUserID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ColumnUserID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnIndex")]
		[NativeName(NativeNameType.Type, "ImS16")]
		public short ColumnIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SortOrder")]
		[NativeName(NativeNameType.Type, "ImS16")]
		public short SortOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SortDirection")]
		[NativeName(NativeNameType.Type, "ImGuiSortDirection")]
		public ImGuiSortDirection SortDirection;




		[NativeName(NativeNameType.Func, "ImGuiTableColumnSortSpecs_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTableColumnSortSpecs* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiTableColumnSortSpecs")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiTableColumnSortSpecs
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnSortSpecs*")]
		public unsafe ImGuiTableColumnSortSpecs* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTableSortSpecs")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableSortSpecs
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Specs")]
		[NativeName(NativeNameType.Type, "const ImGuiTableColumnSortSpecs*")]
		public unsafe ImGuiTableColumnSortSpecs* Specs;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SpecsCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int SpecsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SpecsDirty")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte SpecsDirty;




		[NativeName(NativeNameType.Func, "ImGuiTableSortSpecs_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTableSortSpecs* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiTableTempData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiTableTempData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiTableTempData*")]
		public unsafe ImGuiTableTempData* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImPool_ImGuiTable")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImPoolImGuiTable
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Buf")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiTable")]
		public ImVectorImGuiTable Buf;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Map")]
		[NativeName(NativeNameType.Type, "ImGuiStorage")]
		public ImGuiStorage Map;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FreeIdx")]
		[NativeName(NativeNameType.Type, "ImPoolIdx")]
		public int FreeIdx;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AliveCount")]
		[NativeName(NativeNameType.Type, "ImPoolIdx")]
		public int AliveCount;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiTable")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiTable
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiTable*")]
		public unsafe ImGuiTable* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImPool_ImGuiTabBar")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImPoolImGuiTabBar
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Buf")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiTabBar")]
		public ImVectorImGuiTabBar Buf;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Map")]
		[NativeName(NativeNameType.Type, "ImGuiStorage")]
		public ImGuiStorage Map;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FreeIdx")]
		[NativeName(NativeNameType.Type, "ImPoolIdx")]
		public int FreeIdx;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AliveCount")]
		[NativeName(NativeNameType.Type, "ImPoolIdx")]
		public int AliveCount;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiTabBar")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiTabBar
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiTabBar*")]
		public unsafe ImGuiTabBar* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiPtrOrIndex")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiPtrOrIndex
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiPtrOrIndex*")]
		public unsafe ImGuiPtrOrIndex* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiPtrOrIndex")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiPtrOrIndex
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Ptr")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* Ptr;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Index")]
		[NativeName(NativeNameType.Type, "int")]
		public int Index;




		[NativeName(NativeNameType.Func, "ImGuiPtrOrIndex_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiPtrOrIndex* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiShrinkWidthItem")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiShrinkWidthItem
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiShrinkWidthItem*")]
		public unsafe ImGuiShrinkWidthItem* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiShrinkWidthItem")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiShrinkWidthItem
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Index")]
		[NativeName(NativeNameType.Type, "int")]
		public int Index;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "float")]
		public float Width;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InitialWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float InitialWidth;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiInputTextState")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputTextState
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Ctx")]
		[NativeName(NativeNameType.Type, "ImGuiContext*")]
		public unsafe ImGuiContext* Ctx;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurLenW")]
		[NativeName(NativeNameType.Type, "int")]
		public int CurLenW;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurLenA")]
		[NativeName(NativeNameType.Type, "int")]
		public int CurLenA;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TextW")]
		[NativeName(NativeNameType.Type, "ImVector_ImWchar")]
		public ImVectorImWchar TextW;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TextA")]
		[NativeName(NativeNameType.Type, "ImVector_char")]
		public ImVectorChar TextA;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InitialTextA")]
		[NativeName(NativeNameType.Type, "ImVector_char")]
		public ImVectorChar InitialTextA;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TextAIsValid")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte TextAIsValid;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BufCapacityA")]
		[NativeName(NativeNameType.Type, "int")]
		public int BufCapacityA;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollX")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Stb")]
		[NativeName(NativeNameType.Type, "STB_TexteditState")]
		public STBTexteditState Stb;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CursorAnim")]
		[NativeName(NativeNameType.Type, "float")]
		public float CursorAnim;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CursorFollow")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte CursorFollow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SelectedAllMouseLock")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte SelectedAllMouseLock;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Edited")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Edited;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiInputTextFlags")]
		public ImGuiInputTextFlags Flags;




		[NativeName(NativeNameType.Func, "ImGuiInputTextState_ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearFreeMemory()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				ImGui.ClearFreeMemoryNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_ClearSelection")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearSelection()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				ImGui.ClearSelectionNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_ClearText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearText()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				ImGui.ClearTextNative(@this);
			}
		}

		/// <summary>		/// After a user-input the cursor stays on for a while without blinking		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiInputTextState_CursorAnimReset")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CursorAnimReset()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				ImGui.CursorAnimResetNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_CursorClamp")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CursorClamp()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				ImGui.CursorClampNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_GetCursorPos")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int GetCursorPos()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				int ret = ImGui.GetCursorPosNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_GetRedoAvailCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int GetRedoAvailCount()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				int ret = ImGui.GetRedoAvailCountNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_GetSelectionEnd")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int GetSelectionEnd()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				int ret = ImGui.GetSelectionEndNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_GetSelectionStart")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int GetSelectionStart()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				int ret = ImGui.GetSelectionStartNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_GetUndoAvailCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int GetUndoAvailCount()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				int ret = ImGui.GetUndoAvailCountNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_HasSelection")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool HasSelection()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				byte ret = ImGui.HasSelectionNative(@this);
				return ret != 0;
			}
		}

		/// <summary>		/// Cannot be inline because we call in code in stb_textedit.h implementation		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiInputTextState_OnKeyPressed")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void OnKeyPressed([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "int")] int key)
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				ImGui.OnKeyPressedNative(@this, key);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_SelectAll")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SelectAll()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				ImGui.SelectAllNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "STB_TexteditState")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct STBTexteditState
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "cursor")]
		[NativeName(NativeNameType.Type, "int")]
		public int Cursor;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "select_start")]
		[NativeName(NativeNameType.Type, "int")]
		public int SelectStart;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "select_end")]
		[NativeName(NativeNameType.Type, "int")]
		public int SelectEnd;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "insert_mode")]
		[NativeName(NativeNameType.Type, "unsigned char")]
		public byte InsertMode;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "row_count_per_page")]
		[NativeName(NativeNameType.Type, "int")]
		public int RowCountPerPage;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "cursor_at_end_of_line")]
		[NativeName(NativeNameType.Type, "unsigned char")]
		public byte CursorAtEndOfLine;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "initialized")]
		[NativeName(NativeNameType.Type, "unsigned char")]
		public byte Initialized;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "has_preferred_x")]
		[NativeName(NativeNameType.Type, "unsigned char")]
		public byte HasPreferredX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "single_line")]
		[NativeName(NativeNameType.Type, "unsigned char")]
		public byte SingleLine;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "padding1")]
		[NativeName(NativeNameType.Type, "unsigned char")]
		public byte Padding1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "padding2")]
		[NativeName(NativeNameType.Type, "unsigned char")]
		public byte Padding2;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "padding3")]
		[NativeName(NativeNameType.Type, "unsigned char")]
		public byte Padding3;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "preferred_x")]
		[NativeName(NativeNameType.Type, "float")]
		public float PreferredX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "undostate")]
		[NativeName(NativeNameType.Type, "StbUndoState")]
		public StbUndoState Undostate;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "StbUndoState")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StbUndoState
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "undo_rec")]
		[NativeName(NativeNameType.Type, "StbUndoRecord[99]")]
		public StbUndoRecord UndoRec_0;
		public StbUndoRecord UndoRec_1;
		public StbUndoRecord UndoRec_2;
		public StbUndoRecord UndoRec_3;
		public StbUndoRecord UndoRec_4;
		public StbUndoRecord UndoRec_5;
		public StbUndoRecord UndoRec_6;
		public StbUndoRecord UndoRec_7;
		public StbUndoRecord UndoRec_8;
		public StbUndoRecord UndoRec_9;
		public StbUndoRecord UndoRec_10;
		public StbUndoRecord UndoRec_11;
		public StbUndoRecord UndoRec_12;
		public StbUndoRecord UndoRec_13;
		public StbUndoRecord UndoRec_14;
		public StbUndoRecord UndoRec_15;
		public StbUndoRecord UndoRec_16;
		public StbUndoRecord UndoRec_17;
		public StbUndoRecord UndoRec_18;
		public StbUndoRecord UndoRec_19;
		public StbUndoRecord UndoRec_20;
		public StbUndoRecord UndoRec_21;
		public StbUndoRecord UndoRec_22;
		public StbUndoRecord UndoRec_23;
		public StbUndoRecord UndoRec_24;
		public StbUndoRecord UndoRec_25;
		public StbUndoRecord UndoRec_26;
		public StbUndoRecord UndoRec_27;
		public StbUndoRecord UndoRec_28;
		public StbUndoRecord UndoRec_29;
		public StbUndoRecord UndoRec_30;
		public StbUndoRecord UndoRec_31;
		public StbUndoRecord UndoRec_32;
		public StbUndoRecord UndoRec_33;
		public StbUndoRecord UndoRec_34;
		public StbUndoRecord UndoRec_35;
		public StbUndoRecord UndoRec_36;
		public StbUndoRecord UndoRec_37;
		public StbUndoRecord UndoRec_38;
		public StbUndoRecord UndoRec_39;
		public StbUndoRecord UndoRec_40;
		public StbUndoRecord UndoRec_41;
		public StbUndoRecord UndoRec_42;
		public StbUndoRecord UndoRec_43;
		public StbUndoRecord UndoRec_44;
		public StbUndoRecord UndoRec_45;
		public StbUndoRecord UndoRec_46;
		public StbUndoRecord UndoRec_47;
		public StbUndoRecord UndoRec_48;
		public StbUndoRecord UndoRec_49;
		public StbUndoRecord UndoRec_50;
		public StbUndoRecord UndoRec_51;
		public StbUndoRecord UndoRec_52;
		public StbUndoRecord UndoRec_53;
		public StbUndoRecord UndoRec_54;
		public StbUndoRecord UndoRec_55;
		public StbUndoRecord UndoRec_56;
		public StbUndoRecord UndoRec_57;
		public StbUndoRecord UndoRec_58;
		public StbUndoRecord UndoRec_59;
		public StbUndoRecord UndoRec_60;
		public StbUndoRecord UndoRec_61;
		public StbUndoRecord UndoRec_62;
		public StbUndoRecord UndoRec_63;
		public StbUndoRecord UndoRec_64;
		public StbUndoRecord UndoRec_65;
		public StbUndoRecord UndoRec_66;
		public StbUndoRecord UndoRec_67;
		public StbUndoRecord UndoRec_68;
		public StbUndoRecord UndoRec_69;
		public StbUndoRecord UndoRec_70;
		public StbUndoRecord UndoRec_71;
		public StbUndoRecord UndoRec_72;
		public StbUndoRecord UndoRec_73;
		public StbUndoRecord UndoRec_74;
		public StbUndoRecord UndoRec_75;
		public StbUndoRecord UndoRec_76;
		public StbUndoRecord UndoRec_77;
		public StbUndoRecord UndoRec_78;
		public StbUndoRecord UndoRec_79;
		public StbUndoRecord UndoRec_80;
		public StbUndoRecord UndoRec_81;
		public StbUndoRecord UndoRec_82;
		public StbUndoRecord UndoRec_83;
		public StbUndoRecord UndoRec_84;
		public StbUndoRecord UndoRec_85;
		public StbUndoRecord UndoRec_86;
		public StbUndoRecord UndoRec_87;
		public StbUndoRecord UndoRec_88;
		public StbUndoRecord UndoRec_89;
		public StbUndoRecord UndoRec_90;
		public StbUndoRecord UndoRec_91;
		public StbUndoRecord UndoRec_92;
		public StbUndoRecord UndoRec_93;
		public StbUndoRecord UndoRec_94;
		public StbUndoRecord UndoRec_95;
		public StbUndoRecord UndoRec_96;
		public StbUndoRecord UndoRec_97;
		public StbUndoRecord UndoRec_98;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "undo_char")]
		[NativeName(NativeNameType.Type, "ImWchar[999]")]
		public ushort UndoChar_0;
		public ushort UndoChar_1;
		public ushort UndoChar_2;
		public ushort UndoChar_3;
		public ushort UndoChar_4;
		public ushort UndoChar_5;
		public ushort UndoChar_6;
		public ushort UndoChar_7;
		public ushort UndoChar_8;
		public ushort UndoChar_9;
		public ushort UndoChar_10;
		public ushort UndoChar_11;
		public ushort UndoChar_12;
		public ushort UndoChar_13;
		public ushort UndoChar_14;
		public ushort UndoChar_15;
		public ushort UndoChar_16;
		public ushort UndoChar_17;
		public ushort UndoChar_18;
		public ushort UndoChar_19;
		public ushort UndoChar_20;
		public ushort UndoChar_21;
		public ushort UndoChar_22;
		public ushort UndoChar_23;
		public ushort UndoChar_24;
		public ushort UndoChar_25;
		public ushort UndoChar_26;
		public ushort UndoChar_27;
		public ushort UndoChar_28;
		public ushort UndoChar_29;
		public ushort UndoChar_30;
		public ushort UndoChar_31;
		public ushort UndoChar_32;
		public ushort UndoChar_33;
		public ushort UndoChar_34;
		public ushort UndoChar_35;
		public ushort UndoChar_36;
		public ushort UndoChar_37;
		public ushort UndoChar_38;
		public ushort UndoChar_39;
		public ushort UndoChar_40;
		public ushort UndoChar_41;
		public ushort UndoChar_42;
		public ushort UndoChar_43;
		public ushort UndoChar_44;
		public ushort UndoChar_45;
		public ushort UndoChar_46;
		public ushort UndoChar_47;
		public ushort UndoChar_48;
		public ushort UndoChar_49;
		public ushort UndoChar_50;
		public ushort UndoChar_51;
		public ushort UndoChar_52;
		public ushort UndoChar_53;
		public ushort UndoChar_54;
		public ushort UndoChar_55;
		public ushort UndoChar_56;
		public ushort UndoChar_57;
		public ushort UndoChar_58;
		public ushort UndoChar_59;
		public ushort UndoChar_60;
		public ushort UndoChar_61;
		public ushort UndoChar_62;
		public ushort UndoChar_63;
		public ushort UndoChar_64;
		public ushort UndoChar_65;
		public ushort UndoChar_66;
		public ushort UndoChar_67;
		public ushort UndoChar_68;
		public ushort UndoChar_69;
		public ushort UndoChar_70;
		public ushort UndoChar_71;
		public ushort UndoChar_72;
		public ushort UndoChar_73;
		public ushort UndoChar_74;
		public ushort UndoChar_75;
		public ushort UndoChar_76;
		public ushort UndoChar_77;
		public ushort UndoChar_78;
		public ushort UndoChar_79;
		public ushort UndoChar_80;
		public ushort UndoChar_81;
		public ushort UndoChar_82;
		public ushort UndoChar_83;
		public ushort UndoChar_84;
		public ushort UndoChar_85;
		public ushort UndoChar_86;
		public ushort UndoChar_87;
		public ushort UndoChar_88;
		public ushort UndoChar_89;
		public ushort UndoChar_90;
		public ushort UndoChar_91;
		public ushort UndoChar_92;
		public ushort UndoChar_93;
		public ushort UndoChar_94;
		public ushort UndoChar_95;
		public ushort UndoChar_96;
		public ushort UndoChar_97;
		public ushort UndoChar_98;
		public ushort UndoChar_99;
		public ushort UndoChar_100;
		public ushort UndoChar_101;
		public ushort UndoChar_102;
		public ushort UndoChar_103;
		public ushort UndoChar_104;
		public ushort UndoChar_105;
		public ushort UndoChar_106;
		public ushort UndoChar_107;
		public ushort UndoChar_108;
		public ushort UndoChar_109;
		public ushort UndoChar_110;
		public ushort UndoChar_111;
		public ushort UndoChar_112;
		public ushort UndoChar_113;
		public ushort UndoChar_114;
		public ushort UndoChar_115;
		public ushort UndoChar_116;
		public ushort UndoChar_117;
		public ushort UndoChar_118;
		public ushort UndoChar_119;
		public ushort UndoChar_120;
		public ushort UndoChar_121;
		public ushort UndoChar_122;
		public ushort UndoChar_123;
		public ushort UndoChar_124;
		public ushort UndoChar_125;
		public ushort UndoChar_126;
		public ushort UndoChar_127;
		public ushort UndoChar_128;
		public ushort UndoChar_129;
		public ushort UndoChar_130;
		public ushort UndoChar_131;
		public ushort UndoChar_132;
		public ushort UndoChar_133;
		public ushort UndoChar_134;
		public ushort UndoChar_135;
		public ushort UndoChar_136;
		public ushort UndoChar_137;
		public ushort UndoChar_138;
		public ushort UndoChar_139;
		public ushort UndoChar_140;
		public ushort UndoChar_141;
		public ushort UndoChar_142;
		public ushort UndoChar_143;
		public ushort UndoChar_144;
		public ushort UndoChar_145;
		public ushort UndoChar_146;
		public ushort UndoChar_147;
		public ushort UndoChar_148;
		public ushort UndoChar_149;
		public ushort UndoChar_150;
		public ushort UndoChar_151;
		public ushort UndoChar_152;
		public ushort UndoChar_153;
		public ushort UndoChar_154;
		public ushort UndoChar_155;
		public ushort UndoChar_156;
		public ushort UndoChar_157;
		public ushort UndoChar_158;
		public ushort UndoChar_159;
		public ushort UndoChar_160;
		public ushort UndoChar_161;
		public ushort UndoChar_162;
		public ushort UndoChar_163;
		public ushort UndoChar_164;
		public ushort UndoChar_165;
		public ushort UndoChar_166;
		public ushort UndoChar_167;
		public ushort UndoChar_168;
		public ushort UndoChar_169;
		public ushort UndoChar_170;
		public ushort UndoChar_171;
		public ushort UndoChar_172;
		public ushort UndoChar_173;
		public ushort UndoChar_174;
		public ushort UndoChar_175;
		public ushort UndoChar_176;
		public ushort UndoChar_177;
		public ushort UndoChar_178;
		public ushort UndoChar_179;
		public ushort UndoChar_180;
		public ushort UndoChar_181;
		public ushort UndoChar_182;
		public ushort UndoChar_183;
		public ushort UndoChar_184;
		public ushort UndoChar_185;
		public ushort UndoChar_186;
		public ushort UndoChar_187;
		public ushort UndoChar_188;
		public ushort UndoChar_189;
		public ushort UndoChar_190;
		public ushort UndoChar_191;
		public ushort UndoChar_192;
		public ushort UndoChar_193;
		public ushort UndoChar_194;
		public ushort UndoChar_195;
		public ushort UndoChar_196;
		public ushort UndoChar_197;
		public ushort UndoChar_198;
		public ushort UndoChar_199;
		public ushort UndoChar_200;
		public ushort UndoChar_201;
		public ushort UndoChar_202;
		public ushort UndoChar_203;
		public ushort UndoChar_204;
		public ushort UndoChar_205;
		public ushort UndoChar_206;
		public ushort UndoChar_207;
		public ushort UndoChar_208;
		public ushort UndoChar_209;
		public ushort UndoChar_210;
		public ushort UndoChar_211;
		public ushort UndoChar_212;
		public ushort UndoChar_213;
		public ushort UndoChar_214;
		public ushort UndoChar_215;
		public ushort UndoChar_216;
		public ushort UndoChar_217;
		public ushort UndoChar_218;
		public ushort UndoChar_219;
		public ushort UndoChar_220;
		public ushort UndoChar_221;
		public ushort UndoChar_222;
		public ushort UndoChar_223;
		public ushort UndoChar_224;
		public ushort UndoChar_225;
		public ushort UndoChar_226;
		public ushort UndoChar_227;
		public ushort UndoChar_228;
		public ushort UndoChar_229;
		public ushort UndoChar_230;
		public ushort UndoChar_231;
		public ushort UndoChar_232;
		public ushort UndoChar_233;
		public ushort UndoChar_234;
		public ushort UndoChar_235;
		public ushort UndoChar_236;
		public ushort UndoChar_237;
		public ushort UndoChar_238;
		public ushort UndoChar_239;
		public ushort UndoChar_240;
		public ushort UndoChar_241;
		public ushort UndoChar_242;
		public ushort UndoChar_243;
		public ushort UndoChar_244;
		public ushort UndoChar_245;
		public ushort UndoChar_246;
		public ushort UndoChar_247;
		public ushort UndoChar_248;
		public ushort UndoChar_249;
		public ushort UndoChar_250;
		public ushort UndoChar_251;
		public ushort UndoChar_252;
		public ushort UndoChar_253;
		public ushort UndoChar_254;
		public ushort UndoChar_255;
		public ushort UndoChar_256;
		public ushort UndoChar_257;
		public ushort UndoChar_258;
		public ushort UndoChar_259;
		public ushort UndoChar_260;
		public ushort UndoChar_261;
		public ushort UndoChar_262;
		public ushort UndoChar_263;
		public ushort UndoChar_264;
		public ushort UndoChar_265;
		public ushort UndoChar_266;
		public ushort UndoChar_267;
		public ushort UndoChar_268;
		public ushort UndoChar_269;
		public ushort UndoChar_270;
		public ushort UndoChar_271;
		public ushort UndoChar_272;
		public ushort UndoChar_273;
		public ushort UndoChar_274;
		public ushort UndoChar_275;
		public ushort UndoChar_276;
		public ushort UndoChar_277;
		public ushort UndoChar_278;
		public ushort UndoChar_279;
		public ushort UndoChar_280;
		public ushort UndoChar_281;
		public ushort UndoChar_282;
		public ushort UndoChar_283;
		public ushort UndoChar_284;
		public ushort UndoChar_285;
		public ushort UndoChar_286;
		public ushort UndoChar_287;
		public ushort UndoChar_288;
		public ushort UndoChar_289;
		public ushort UndoChar_290;
		public ushort UndoChar_291;
		public ushort UndoChar_292;
		public ushort UndoChar_293;
		public ushort UndoChar_294;
		public ushort UndoChar_295;
		public ushort UndoChar_296;
		public ushort UndoChar_297;
		public ushort UndoChar_298;
		public ushort UndoChar_299;
		public ushort UndoChar_300;
		public ushort UndoChar_301;
		public ushort UndoChar_302;
		public ushort UndoChar_303;
		public ushort UndoChar_304;
		public ushort UndoChar_305;
		public ushort UndoChar_306;
		public ushort UndoChar_307;
		public ushort UndoChar_308;
		public ushort UndoChar_309;
		public ushort UndoChar_310;
		public ushort UndoChar_311;
		public ushort UndoChar_312;
		public ushort UndoChar_313;
		public ushort UndoChar_314;
		public ushort UndoChar_315;
		public ushort UndoChar_316;
		public ushort UndoChar_317;
		public ushort UndoChar_318;
		public ushort UndoChar_319;
		public ushort UndoChar_320;
		public ushort UndoChar_321;
		public ushort UndoChar_322;
		public ushort UndoChar_323;
		public ushort UndoChar_324;
		public ushort UndoChar_325;
		public ushort UndoChar_326;
		public ushort UndoChar_327;
		public ushort UndoChar_328;
		public ushort UndoChar_329;
		public ushort UndoChar_330;
		public ushort UndoChar_331;
		public ushort UndoChar_332;
		public ushort UndoChar_333;
		public ushort UndoChar_334;
		public ushort UndoChar_335;
		public ushort UndoChar_336;
		public ushort UndoChar_337;
		public ushort UndoChar_338;
		public ushort UndoChar_339;
		public ushort UndoChar_340;
		public ushort UndoChar_341;
		public ushort UndoChar_342;
		public ushort UndoChar_343;
		public ushort UndoChar_344;
		public ushort UndoChar_345;
		public ushort UndoChar_346;
		public ushort UndoChar_347;
		public ushort UndoChar_348;
		public ushort UndoChar_349;
		public ushort UndoChar_350;
		public ushort UndoChar_351;
		public ushort UndoChar_352;
		public ushort UndoChar_353;
		public ushort UndoChar_354;
		public ushort UndoChar_355;
		public ushort UndoChar_356;
		public ushort UndoChar_357;
		public ushort UndoChar_358;
		public ushort UndoChar_359;
		public ushort UndoChar_360;
		public ushort UndoChar_361;
		public ushort UndoChar_362;
		public ushort UndoChar_363;
		public ushort UndoChar_364;
		public ushort UndoChar_365;
		public ushort UndoChar_366;
		public ushort UndoChar_367;
		public ushort UndoChar_368;
		public ushort UndoChar_369;
		public ushort UndoChar_370;
		public ushort UndoChar_371;
		public ushort UndoChar_372;
		public ushort UndoChar_373;
		public ushort UndoChar_374;
		public ushort UndoChar_375;
		public ushort UndoChar_376;
		public ushort UndoChar_377;
		public ushort UndoChar_378;
		public ushort UndoChar_379;
		public ushort UndoChar_380;
		public ushort UndoChar_381;
		public ushort UndoChar_382;
		public ushort UndoChar_383;
		public ushort UndoChar_384;
		public ushort UndoChar_385;
		public ushort UndoChar_386;
		public ushort UndoChar_387;
		public ushort UndoChar_388;
		public ushort UndoChar_389;
		public ushort UndoChar_390;
		public ushort UndoChar_391;
		public ushort UndoChar_392;
		public ushort UndoChar_393;
		public ushort UndoChar_394;
		public ushort UndoChar_395;
		public ushort UndoChar_396;
		public ushort UndoChar_397;
		public ushort UndoChar_398;
		public ushort UndoChar_399;
		public ushort UndoChar_400;
		public ushort UndoChar_401;
		public ushort UndoChar_402;
		public ushort UndoChar_403;
		public ushort UndoChar_404;
		public ushort UndoChar_405;
		public ushort UndoChar_406;
		public ushort UndoChar_407;
		public ushort UndoChar_408;
		public ushort UndoChar_409;
		public ushort UndoChar_410;
		public ushort UndoChar_411;
		public ushort UndoChar_412;
		public ushort UndoChar_413;
		public ushort UndoChar_414;
		public ushort UndoChar_415;
		public ushort UndoChar_416;
		public ushort UndoChar_417;
		public ushort UndoChar_418;
		public ushort UndoChar_419;
		public ushort UndoChar_420;
		public ushort UndoChar_421;
		public ushort UndoChar_422;
		public ushort UndoChar_423;
		public ushort UndoChar_424;
		public ushort UndoChar_425;
		public ushort UndoChar_426;
		public ushort UndoChar_427;
		public ushort UndoChar_428;
		public ushort UndoChar_429;
		public ushort UndoChar_430;
		public ushort UndoChar_431;
		public ushort UndoChar_432;
		public ushort UndoChar_433;
		public ushort UndoChar_434;
		public ushort UndoChar_435;
		public ushort UndoChar_436;
		public ushort UndoChar_437;
		public ushort UndoChar_438;
		public ushort UndoChar_439;
		public ushort UndoChar_440;
		public ushort UndoChar_441;
		public ushort UndoChar_442;
		public ushort UndoChar_443;
		public ushort UndoChar_444;
		public ushort UndoChar_445;
		public ushort UndoChar_446;
		public ushort UndoChar_447;
		public ushort UndoChar_448;
		public ushort UndoChar_449;
		public ushort UndoChar_450;
		public ushort UndoChar_451;
		public ushort UndoChar_452;
		public ushort UndoChar_453;
		public ushort UndoChar_454;
		public ushort UndoChar_455;
		public ushort UndoChar_456;
		public ushort UndoChar_457;
		public ushort UndoChar_458;
		public ushort UndoChar_459;
		public ushort UndoChar_460;
		public ushort UndoChar_461;
		public ushort UndoChar_462;
		public ushort UndoChar_463;
		public ushort UndoChar_464;
		public ushort UndoChar_465;
		public ushort UndoChar_466;
		public ushort UndoChar_467;
		public ushort UndoChar_468;
		public ushort UndoChar_469;
		public ushort UndoChar_470;
		public ushort UndoChar_471;
		public ushort UndoChar_472;
		public ushort UndoChar_473;
		public ushort UndoChar_474;
		public ushort UndoChar_475;
		public ushort UndoChar_476;
		public ushort UndoChar_477;
		public ushort UndoChar_478;
		public ushort UndoChar_479;
		public ushort UndoChar_480;
		public ushort UndoChar_481;
		public ushort UndoChar_482;
		public ushort UndoChar_483;
		public ushort UndoChar_484;
		public ushort UndoChar_485;
		public ushort UndoChar_486;
		public ushort UndoChar_487;
		public ushort UndoChar_488;
		public ushort UndoChar_489;
		public ushort UndoChar_490;
		public ushort UndoChar_491;
		public ushort UndoChar_492;
		public ushort UndoChar_493;
		public ushort UndoChar_494;
		public ushort UndoChar_495;
		public ushort UndoChar_496;
		public ushort UndoChar_497;
		public ushort UndoChar_498;
		public ushort UndoChar_499;
		public ushort UndoChar_500;
		public ushort UndoChar_501;
		public ushort UndoChar_502;
		public ushort UndoChar_503;
		public ushort UndoChar_504;
		public ushort UndoChar_505;
		public ushort UndoChar_506;
		public ushort UndoChar_507;
		public ushort UndoChar_508;
		public ushort UndoChar_509;
		public ushort UndoChar_510;
		public ushort UndoChar_511;
		public ushort UndoChar_512;
		public ushort UndoChar_513;
		public ushort UndoChar_514;
		public ushort UndoChar_515;
		public ushort UndoChar_516;
		public ushort UndoChar_517;
		public ushort UndoChar_518;
		public ushort UndoChar_519;
		public ushort UndoChar_520;
		public ushort UndoChar_521;
		public ushort UndoChar_522;
		public ushort UndoChar_523;
		public ushort UndoChar_524;
		public ushort UndoChar_525;
		public ushort UndoChar_526;
		public ushort UndoChar_527;
		public ushort UndoChar_528;
		public ushort UndoChar_529;
		public ushort UndoChar_530;
		public ushort UndoChar_531;
		public ushort UndoChar_532;
		public ushort UndoChar_533;
		public ushort UndoChar_534;
		public ushort UndoChar_535;
		public ushort UndoChar_536;
		public ushort UndoChar_537;
		public ushort UndoChar_538;
		public ushort UndoChar_539;
		public ushort UndoChar_540;
		public ushort UndoChar_541;
		public ushort UndoChar_542;
		public ushort UndoChar_543;
		public ushort UndoChar_544;
		public ushort UndoChar_545;
		public ushort UndoChar_546;
		public ushort UndoChar_547;
		public ushort UndoChar_548;
		public ushort UndoChar_549;
		public ushort UndoChar_550;
		public ushort UndoChar_551;
		public ushort UndoChar_552;
		public ushort UndoChar_553;
		public ushort UndoChar_554;
		public ushort UndoChar_555;
		public ushort UndoChar_556;
		public ushort UndoChar_557;
		public ushort UndoChar_558;
		public ushort UndoChar_559;
		public ushort UndoChar_560;
		public ushort UndoChar_561;
		public ushort UndoChar_562;
		public ushort UndoChar_563;
		public ushort UndoChar_564;
		public ushort UndoChar_565;
		public ushort UndoChar_566;
		public ushort UndoChar_567;
		public ushort UndoChar_568;
		public ushort UndoChar_569;
		public ushort UndoChar_570;
		public ushort UndoChar_571;
		public ushort UndoChar_572;
		public ushort UndoChar_573;
		public ushort UndoChar_574;
		public ushort UndoChar_575;
		public ushort UndoChar_576;
		public ushort UndoChar_577;
		public ushort UndoChar_578;
		public ushort UndoChar_579;
		public ushort UndoChar_580;
		public ushort UndoChar_581;
		public ushort UndoChar_582;
		public ushort UndoChar_583;
		public ushort UndoChar_584;
		public ushort UndoChar_585;
		public ushort UndoChar_586;
		public ushort UndoChar_587;
		public ushort UndoChar_588;
		public ushort UndoChar_589;
		public ushort UndoChar_590;
		public ushort UndoChar_591;
		public ushort UndoChar_592;
		public ushort UndoChar_593;
		public ushort UndoChar_594;
		public ushort UndoChar_595;
		public ushort UndoChar_596;
		public ushort UndoChar_597;
		public ushort UndoChar_598;
		public ushort UndoChar_599;
		public ushort UndoChar_600;
		public ushort UndoChar_601;
		public ushort UndoChar_602;
		public ushort UndoChar_603;
		public ushort UndoChar_604;
		public ushort UndoChar_605;
		public ushort UndoChar_606;
		public ushort UndoChar_607;
		public ushort UndoChar_608;
		public ushort UndoChar_609;
		public ushort UndoChar_610;
		public ushort UndoChar_611;
		public ushort UndoChar_612;
		public ushort UndoChar_613;
		public ushort UndoChar_614;
		public ushort UndoChar_615;
		public ushort UndoChar_616;
		public ushort UndoChar_617;
		public ushort UndoChar_618;
		public ushort UndoChar_619;
		public ushort UndoChar_620;
		public ushort UndoChar_621;
		public ushort UndoChar_622;
		public ushort UndoChar_623;
		public ushort UndoChar_624;
		public ushort UndoChar_625;
		public ushort UndoChar_626;
		public ushort UndoChar_627;
		public ushort UndoChar_628;
		public ushort UndoChar_629;
		public ushort UndoChar_630;
		public ushort UndoChar_631;
		public ushort UndoChar_632;
		public ushort UndoChar_633;
		public ushort UndoChar_634;
		public ushort UndoChar_635;
		public ushort UndoChar_636;
		public ushort UndoChar_637;
		public ushort UndoChar_638;
		public ushort UndoChar_639;
		public ushort UndoChar_640;
		public ushort UndoChar_641;
		public ushort UndoChar_642;
		public ushort UndoChar_643;
		public ushort UndoChar_644;
		public ushort UndoChar_645;
		public ushort UndoChar_646;
		public ushort UndoChar_647;
		public ushort UndoChar_648;
		public ushort UndoChar_649;
		public ushort UndoChar_650;
		public ushort UndoChar_651;
		public ushort UndoChar_652;
		public ushort UndoChar_653;
		public ushort UndoChar_654;
		public ushort UndoChar_655;
		public ushort UndoChar_656;
		public ushort UndoChar_657;
		public ushort UndoChar_658;
		public ushort UndoChar_659;
		public ushort UndoChar_660;
		public ushort UndoChar_661;
		public ushort UndoChar_662;
		public ushort UndoChar_663;
		public ushort UndoChar_664;
		public ushort UndoChar_665;
		public ushort UndoChar_666;
		public ushort UndoChar_667;
		public ushort UndoChar_668;
		public ushort UndoChar_669;
		public ushort UndoChar_670;
		public ushort UndoChar_671;
		public ushort UndoChar_672;
		public ushort UndoChar_673;
		public ushort UndoChar_674;
		public ushort UndoChar_675;
		public ushort UndoChar_676;
		public ushort UndoChar_677;
		public ushort UndoChar_678;
		public ushort UndoChar_679;
		public ushort UndoChar_680;
		public ushort UndoChar_681;
		public ushort UndoChar_682;
		public ushort UndoChar_683;
		public ushort UndoChar_684;
		public ushort UndoChar_685;
		public ushort UndoChar_686;
		public ushort UndoChar_687;
		public ushort UndoChar_688;
		public ushort UndoChar_689;
		public ushort UndoChar_690;
		public ushort UndoChar_691;
		public ushort UndoChar_692;
		public ushort UndoChar_693;
		public ushort UndoChar_694;
		public ushort UndoChar_695;
		public ushort UndoChar_696;
		public ushort UndoChar_697;
		public ushort UndoChar_698;
		public ushort UndoChar_699;
		public ushort UndoChar_700;
		public ushort UndoChar_701;
		public ushort UndoChar_702;
		public ushort UndoChar_703;
		public ushort UndoChar_704;
		public ushort UndoChar_705;
		public ushort UndoChar_706;
		public ushort UndoChar_707;
		public ushort UndoChar_708;
		public ushort UndoChar_709;
		public ushort UndoChar_710;
		public ushort UndoChar_711;
		public ushort UndoChar_712;
		public ushort UndoChar_713;
		public ushort UndoChar_714;
		public ushort UndoChar_715;
		public ushort UndoChar_716;
		public ushort UndoChar_717;
		public ushort UndoChar_718;
		public ushort UndoChar_719;
		public ushort UndoChar_720;
		public ushort UndoChar_721;
		public ushort UndoChar_722;
		public ushort UndoChar_723;
		public ushort UndoChar_724;
		public ushort UndoChar_725;
		public ushort UndoChar_726;
		public ushort UndoChar_727;
		public ushort UndoChar_728;
		public ushort UndoChar_729;
		public ushort UndoChar_730;
		public ushort UndoChar_731;
		public ushort UndoChar_732;
		public ushort UndoChar_733;
		public ushort UndoChar_734;
		public ushort UndoChar_735;
		public ushort UndoChar_736;
		public ushort UndoChar_737;
		public ushort UndoChar_738;
		public ushort UndoChar_739;
		public ushort UndoChar_740;
		public ushort UndoChar_741;
		public ushort UndoChar_742;
		public ushort UndoChar_743;
		public ushort UndoChar_744;
		public ushort UndoChar_745;
		public ushort UndoChar_746;
		public ushort UndoChar_747;
		public ushort UndoChar_748;
		public ushort UndoChar_749;
		public ushort UndoChar_750;
		public ushort UndoChar_751;
		public ushort UndoChar_752;
		public ushort UndoChar_753;
		public ushort UndoChar_754;
		public ushort UndoChar_755;
		public ushort UndoChar_756;
		public ushort UndoChar_757;
		public ushort UndoChar_758;
		public ushort UndoChar_759;
		public ushort UndoChar_760;
		public ushort UndoChar_761;
		public ushort UndoChar_762;
		public ushort UndoChar_763;
		public ushort UndoChar_764;
		public ushort UndoChar_765;
		public ushort UndoChar_766;
		public ushort UndoChar_767;
		public ushort UndoChar_768;
		public ushort UndoChar_769;
		public ushort UndoChar_770;
		public ushort UndoChar_771;
		public ushort UndoChar_772;
		public ushort UndoChar_773;
		public ushort UndoChar_774;
		public ushort UndoChar_775;
		public ushort UndoChar_776;
		public ushort UndoChar_777;
		public ushort UndoChar_778;
		public ushort UndoChar_779;
		public ushort UndoChar_780;
		public ushort UndoChar_781;
		public ushort UndoChar_782;
		public ushort UndoChar_783;
		public ushort UndoChar_784;
		public ushort UndoChar_785;
		public ushort UndoChar_786;
		public ushort UndoChar_787;
		public ushort UndoChar_788;
		public ushort UndoChar_789;
		public ushort UndoChar_790;
		public ushort UndoChar_791;
		public ushort UndoChar_792;
		public ushort UndoChar_793;
		public ushort UndoChar_794;
		public ushort UndoChar_795;
		public ushort UndoChar_796;
		public ushort UndoChar_797;
		public ushort UndoChar_798;
		public ushort UndoChar_799;
		public ushort UndoChar_800;
		public ushort UndoChar_801;
		public ushort UndoChar_802;
		public ushort UndoChar_803;
		public ushort UndoChar_804;
		public ushort UndoChar_805;
		public ushort UndoChar_806;
		public ushort UndoChar_807;
		public ushort UndoChar_808;
		public ushort UndoChar_809;
		public ushort UndoChar_810;
		public ushort UndoChar_811;
		public ushort UndoChar_812;
		public ushort UndoChar_813;
		public ushort UndoChar_814;
		public ushort UndoChar_815;
		public ushort UndoChar_816;
		public ushort UndoChar_817;
		public ushort UndoChar_818;
		public ushort UndoChar_819;
		public ushort UndoChar_820;
		public ushort UndoChar_821;
		public ushort UndoChar_822;
		public ushort UndoChar_823;
		public ushort UndoChar_824;
		public ushort UndoChar_825;
		public ushort UndoChar_826;
		public ushort UndoChar_827;
		public ushort UndoChar_828;
		public ushort UndoChar_829;
		public ushort UndoChar_830;
		public ushort UndoChar_831;
		public ushort UndoChar_832;
		public ushort UndoChar_833;
		public ushort UndoChar_834;
		public ushort UndoChar_835;
		public ushort UndoChar_836;
		public ushort UndoChar_837;
		public ushort UndoChar_838;
		public ushort UndoChar_839;
		public ushort UndoChar_840;
		public ushort UndoChar_841;
		public ushort UndoChar_842;
		public ushort UndoChar_843;
		public ushort UndoChar_844;
		public ushort UndoChar_845;
		public ushort UndoChar_846;
		public ushort UndoChar_847;
		public ushort UndoChar_848;
		public ushort UndoChar_849;
		public ushort UndoChar_850;
		public ushort UndoChar_851;
		public ushort UndoChar_852;
		public ushort UndoChar_853;
		public ushort UndoChar_854;
		public ushort UndoChar_855;
		public ushort UndoChar_856;
		public ushort UndoChar_857;
		public ushort UndoChar_858;
		public ushort UndoChar_859;
		public ushort UndoChar_860;
		public ushort UndoChar_861;
		public ushort UndoChar_862;
		public ushort UndoChar_863;
		public ushort UndoChar_864;
		public ushort UndoChar_865;
		public ushort UndoChar_866;
		public ushort UndoChar_867;
		public ushort UndoChar_868;
		public ushort UndoChar_869;
		public ushort UndoChar_870;
		public ushort UndoChar_871;
		public ushort UndoChar_872;
		public ushort UndoChar_873;
		public ushort UndoChar_874;
		public ushort UndoChar_875;
		public ushort UndoChar_876;
		public ushort UndoChar_877;
		public ushort UndoChar_878;
		public ushort UndoChar_879;
		public ushort UndoChar_880;
		public ushort UndoChar_881;
		public ushort UndoChar_882;
		public ushort UndoChar_883;
		public ushort UndoChar_884;
		public ushort UndoChar_885;
		public ushort UndoChar_886;
		public ushort UndoChar_887;
		public ushort UndoChar_888;
		public ushort UndoChar_889;
		public ushort UndoChar_890;
		public ushort UndoChar_891;
		public ushort UndoChar_892;
		public ushort UndoChar_893;
		public ushort UndoChar_894;
		public ushort UndoChar_895;
		public ushort UndoChar_896;
		public ushort UndoChar_897;
		public ushort UndoChar_898;
		public ushort UndoChar_899;
		public ushort UndoChar_900;
		public ushort UndoChar_901;
		public ushort UndoChar_902;
		public ushort UndoChar_903;
		public ushort UndoChar_904;
		public ushort UndoChar_905;
		public ushort UndoChar_906;
		public ushort UndoChar_907;
		public ushort UndoChar_908;
		public ushort UndoChar_909;
		public ushort UndoChar_910;
		public ushort UndoChar_911;
		public ushort UndoChar_912;
		public ushort UndoChar_913;
		public ushort UndoChar_914;
		public ushort UndoChar_915;
		public ushort UndoChar_916;
		public ushort UndoChar_917;
		public ushort UndoChar_918;
		public ushort UndoChar_919;
		public ushort UndoChar_920;
		public ushort UndoChar_921;
		public ushort UndoChar_922;
		public ushort UndoChar_923;
		public ushort UndoChar_924;
		public ushort UndoChar_925;
		public ushort UndoChar_926;
		public ushort UndoChar_927;
		public ushort UndoChar_928;
		public ushort UndoChar_929;
		public ushort UndoChar_930;
		public ushort UndoChar_931;
		public ushort UndoChar_932;
		public ushort UndoChar_933;
		public ushort UndoChar_934;
		public ushort UndoChar_935;
		public ushort UndoChar_936;
		public ushort UndoChar_937;
		public ushort UndoChar_938;
		public ushort UndoChar_939;
		public ushort UndoChar_940;
		public ushort UndoChar_941;
		public ushort UndoChar_942;
		public ushort UndoChar_943;
		public ushort UndoChar_944;
		public ushort UndoChar_945;
		public ushort UndoChar_946;
		public ushort UndoChar_947;
		public ushort UndoChar_948;
		public ushort UndoChar_949;
		public ushort UndoChar_950;
		public ushort UndoChar_951;
		public ushort UndoChar_952;
		public ushort UndoChar_953;
		public ushort UndoChar_954;
		public ushort UndoChar_955;
		public ushort UndoChar_956;
		public ushort UndoChar_957;
		public ushort UndoChar_958;
		public ushort UndoChar_959;
		public ushort UndoChar_960;
		public ushort UndoChar_961;
		public ushort UndoChar_962;
		public ushort UndoChar_963;
		public ushort UndoChar_964;
		public ushort UndoChar_965;
		public ushort UndoChar_966;
		public ushort UndoChar_967;
		public ushort UndoChar_968;
		public ushort UndoChar_969;
		public ushort UndoChar_970;
		public ushort UndoChar_971;
		public ushort UndoChar_972;
		public ushort UndoChar_973;
		public ushort UndoChar_974;
		public ushort UndoChar_975;
		public ushort UndoChar_976;
		public ushort UndoChar_977;
		public ushort UndoChar_978;
		public ushort UndoChar_979;
		public ushort UndoChar_980;
		public ushort UndoChar_981;
		public ushort UndoChar_982;
		public ushort UndoChar_983;
		public ushort UndoChar_984;
		public ushort UndoChar_985;
		public ushort UndoChar_986;
		public ushort UndoChar_987;
		public ushort UndoChar_988;
		public ushort UndoChar_989;
		public ushort UndoChar_990;
		public ushort UndoChar_991;
		public ushort UndoChar_992;
		public ushort UndoChar_993;
		public ushort UndoChar_994;
		public ushort UndoChar_995;
		public ushort UndoChar_996;
		public ushort UndoChar_997;
		public ushort UndoChar_998;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "undo_point")]
		[NativeName(NativeNameType.Type, "short")]
		public short UndoPoint;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "redo_point")]
		[NativeName(NativeNameType.Type, "short")]
		public short RedoPoint;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "undo_char_point")]
		[NativeName(NativeNameType.Type, "int")]
		public int UndoCharPoint;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "redo_char_point")]
		[NativeName(NativeNameType.Type, "int")]
		public int RedoCharPoint;



		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<StbUndoRecord> UndoRec
		
		{
			get
			{
				fixed (StbUndoRecord* p = &this.UndoRec_0)
				{
					return new Span<StbUndoRecord>(p, 99);
				}
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "StbUndoRecord")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StbUndoRecord
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "where")]
		[NativeName(NativeNameType.Type, "int")]
		public int Where;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "insert_length")]
		[NativeName(NativeNameType.Type, "int")]
		public int InsertLength;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "delete_length")]
		[NativeName(NativeNameType.Type, "int")]
		public int DeleteLength;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "char_storage")]
		[NativeName(NativeNameType.Type, "int")]
		public int CharStorage;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiInputTextDeactivatedState")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputTextDeactivatedState
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TextA")]
		[NativeName(NativeNameType.Type, "ImVector_char")]
		public ImVectorChar TextA;




		[NativeName(NativeNameType.Func, "ImGuiInputTextDeactivatedState_ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearFreeMemory()
		{
			fixed (ImGuiInputTextDeactivatedState* @this = &this)
			{
				ImGui.ClearFreeMemoryNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextDeactivatedState_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiInputTextDeactivatedState* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiComboPreviewData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiComboPreviewData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PreviewRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect PreviewRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackupCursorPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 BackupCursorPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackupCursorMaxPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 BackupCursorMaxPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackupCursorPosPrevLine")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 BackupCursorPosPrevLine;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackupPrevLineTextBaseOffset")]
		[NativeName(NativeNameType.Type, "float")]
		public float BackupPrevLineTextBaseOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BackupLayout")]
		[NativeName(NativeNameType.Type, "ImGuiLayoutType")]
		public ImGuiLayoutType BackupLayout;




		[NativeName(NativeNameType.Func, "ImGuiComboPreviewData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiComboPreviewData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiDockContext")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDockContext
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Nodes")]
		[NativeName(NativeNameType.Type, "ImGuiStorage")]
		public ImGuiStorage Nodes;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Requests")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiDockRequest")]
		public ImVectorImGuiDockRequest Requests;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NodesSettings")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiDockNodeSettings")]
		public ImVectorImGuiDockNodeSettings NodesSettings;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantFullRebuild")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantFullRebuild;




		[NativeName(NativeNameType.Func, "ImGuiDockContext_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiDockContext* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiDockRequest")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiDockRequest
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiDockRequest*")]
		public unsafe ImGuiDockRequest* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiDockRequest")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDockRequest
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiDockNodeSettings")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiDockNodeSettings
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiDockNodeSettings*")]
		public unsafe ImGuiDockNodeSettings* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiDockNodeSettings")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDockNodeSettings
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiSettingsHandler")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiSettingsHandler
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiSettingsHandler*")]
		public unsafe ImGuiSettingsHandler* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiSettingsHandler")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiSettingsHandler
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TypeName")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* TypeName;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TypeHash")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int TypeHash;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ClearAllFn")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiContext* ctx, ImGuiSettingsHandler* handler)*")]
		public unsafe void* ClearAllFn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ReadInitFn")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiContext* ctx, ImGuiSettingsHandler* handler)*")]
		public unsafe void* ReadInitFn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ReadOpenFn")]
		[NativeName(NativeNameType.Type, "void* (*)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, const char* name)*")]
		public unsafe void* ReadOpenFn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ReadLineFn")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, void* entry, const char* line)*")]
		public unsafe void* ReadLineFn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ApplyAllFn")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiContext* ctx, ImGuiSettingsHandler* handler)*")]
		public unsafe void* ApplyAllFn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WriteAllFn")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGuiTextBuffer* out_buf)*")]
		public unsafe void* WriteAllFn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "UserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserData;




		[NativeName(NativeNameType.Func, "ImGuiSettingsHandler_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiSettingsHandler* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImChunkStream_ImGuiWindowSettings")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImChunkStreamImGuiWindowSettings
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Buf")]
		[NativeName(NativeNameType.Type, "ImVector_char")]
		public ImVectorChar Buf;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImChunkStream_ImGuiTableSettings")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImChunkStreamImGuiTableSettings
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Buf")]
		[NativeName(NativeNameType.Type, "ImVector_char")]
		public ImVectorChar Buf;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiContextHook")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiContextHook
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiContextHook*")]
		public unsafe ImGuiContextHook* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiContextHook")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiContextHook
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HookId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int HookId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "ImGuiContextHookType")]
		public ImGuiContextHookType Type;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Owner")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int Owner;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Callback")]
		[NativeName(NativeNameType.Type, "ImGuiContextHookCallback")]
		public unsafe void* Callback;
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "UserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserData;




		[NativeName(NativeNameType.Func, "ImGuiContextHook_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiContextHook* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTextIndex")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTextIndex
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LineOffsets")]
		[NativeName(NativeNameType.Type, "ImVector_int")]
		public ImVectorInt LineOffsets;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EndOffset")]
		[NativeName(NativeNameType.Type, "int")]
		public int EndOffset;



		[NativeName(NativeNameType.Func, "ImGuiTextIndex_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "old_size")] [NativeName(NativeNameType.Type, "int")] int oldSize, [NativeName(NativeNameType.Param, "new_size")] [NativeName(NativeNameType.Type, "int")] int newSize)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				ImGui.appendNative(@this, baseValue, oldSize, newSize);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ref byte baseValue, [NativeName(NativeNameType.Param, "old_size")] [NativeName(NativeNameType.Type, "int")] int oldSize, [NativeName(NativeNameType.Param, "new_size")] [NativeName(NativeNameType.Type, "int")] int newSize)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					ImGui.appendNative(@this, (byte*)pbaseValue, oldSize, newSize);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] string baseValue, [NativeName(NativeNameType.Param, "old_size")] [NativeName(NativeNameType.Type, "int")] int oldSize, [NativeName(NativeNameType.Param, "new_size")] [NativeName(NativeNameType.Type, "int")] int newSize)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.appendNative(@this, pStr0, oldSize, newSize);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void clear()
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				ImGui.clearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* get_line_begin([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				byte* ret = ImGui.get_line_beginNative(@this, baseValue, n);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string get_line_beginS([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImGui.get_line_beginNative(@this, baseValue, n));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* get_line_begin([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ref byte baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					byte* ret = ImGui.get_line_beginNative(@this, (byte*)pbaseValue, n);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string get_line_beginS([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ref byte baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					string ret = Utils.DecodeStringUTF8(ImGui.get_line_beginNative(@this, (byte*)pbaseValue, n));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* get_line_begin([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] string baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = ImGui.get_line_beginNative(@this, pStr0, n);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string get_line_beginS([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] string baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(ImGui.get_line_beginNative(@this, pStr0, n));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* get_line_end([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				byte* ret = ImGui.get_line_endNative(@this, baseValue, n);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string get_line_endS([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImGui.get_line_endNative(@this, baseValue, n));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* get_line_end([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ref byte baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					byte* ret = ImGui.get_line_endNative(@this, (byte*)pbaseValue, n);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string get_line_endS([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ref byte baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					string ret = Utils.DecodeStringUTF8(ImGui.get_line_endNative(@this, (byte*)pbaseValue, n));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* get_line_end([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] string baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = ImGui.get_line_endNative(@this, pStr0, n);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string get_line_endS([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] string baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(ImGui.get_line_endNative(@this, pStr0, n));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_size")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int size()
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				int ret = ImGui.sizeNative(@this);
				return ret;
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_int")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorInt
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "int*")]
		public unsafe int* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiMetricsConfig")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiMetricsConfig
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ShowDebugLog")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ShowDebugLog;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ShowStackTool")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ShowStackTool;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ShowWindowsRects")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ShowWindowsRects;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ShowWindowsBeginOrder")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ShowWindowsBeginOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ShowTablesRects")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ShowTablesRects;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ShowDrawCmdMesh")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ShowDrawCmdMesh;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ShowDrawCmdBoundingBoxes")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ShowDrawCmdBoundingBoxes;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ShowAtlasTintedWithTextColor")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ShowAtlasTintedWithTextColor;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ShowDockingNodes")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ShowDockingNodes;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ShowWindowsRectsType")]
		[NativeName(NativeNameType.Type, "int")]
		public int ShowWindowsRectsType;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ShowTablesRectsType")]
		[NativeName(NativeNameType.Type, "int")]
		public int ShowTablesRectsType;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiStackTool")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiStackTool
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastActiveFrame")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastActiveFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "StackLevel")]
		[NativeName(NativeNameType.Type, "int")]
		public int StackLevel;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "QueryId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int QueryId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Results")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiStackLevelInfo")]
		public ImVectorImGuiStackLevelInfo Results;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CopyToClipboardOnCtrlC")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte CopyToClipboardOnCtrlC;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CopyToClipboardLastTime")]
		[NativeName(NativeNameType.Type, "float")]
		public float CopyToClipboardLastTime;




		[NativeName(NativeNameType.Func, "ImGuiStackTool_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiStackTool* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiStackLevelInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiStackLevelInfo
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiStackLevelInfo*")]
		public unsafe ImGuiStackLevelInfo* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiStackLevelInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiStackLevelInfo
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "QueryFrameCount")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte QueryFrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "QuerySuccess")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte QuerySuccess;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DataType")]
		[NativeName(NativeNameType.Type, "ImGuiDataType")]
		public ImGuiDataType DataType;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Desc")]
		[NativeName(NativeNameType.Type, "char[57]")]
		public byte Desc_0;
		public byte Desc_1;
		public byte Desc_2;
		public byte Desc_3;
		public byte Desc_4;
		public byte Desc_5;
		public byte Desc_6;
		public byte Desc_7;
		public byte Desc_8;
		public byte Desc_9;
		public byte Desc_10;
		public byte Desc_11;
		public byte Desc_12;
		public byte Desc_13;
		public byte Desc_14;
		public byte Desc_15;
		public byte Desc_16;
		public byte Desc_17;
		public byte Desc_18;
		public byte Desc_19;
		public byte Desc_20;
		public byte Desc_21;
		public byte Desc_22;
		public byte Desc_23;
		public byte Desc_24;
		public byte Desc_25;
		public byte Desc_26;
		public byte Desc_27;
		public byte Desc_28;
		public byte Desc_29;
		public byte Desc_30;
		public byte Desc_31;
		public byte Desc_32;
		public byte Desc_33;
		public byte Desc_34;
		public byte Desc_35;
		public byte Desc_36;
		public byte Desc_37;
		public byte Desc_38;
		public byte Desc_39;
		public byte Desc_40;
		public byte Desc_41;
		public byte Desc_42;
		public byte Desc_43;
		public byte Desc_44;
		public byte Desc_45;
		public byte Desc_46;
		public byte Desc_47;
		public byte Desc_48;
		public byte Desc_49;
		public byte Desc_50;
		public byte Desc_51;
		public byte Desc_52;
		public byte Desc_53;
		public byte Desc_54;
		public byte Desc_55;
		public byte Desc_56;




		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStackLevelInfo_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiStackLevelInfo* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiInputTextCallbackData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputTextCallbackData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Ctx")]
		[NativeName(NativeNameType.Type, "ImGuiContext*")]
		public unsafe ImGuiContext* Ctx;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EventFlag")]
		[NativeName(NativeNameType.Type, "ImGuiInputTextFlags")]
		public ImGuiInputTextFlags EventFlag;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiInputTextFlags")]
		public ImGuiInputTextFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "UserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EventChar")]
		[NativeName(NativeNameType.Type, "ImWchar")]
		public char EventChar;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EventKey")]
		[NativeName(NativeNameType.Type, "ImGuiKey")]
		public ImGuiKey EventKey;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Buf")]
		[NativeName(NativeNameType.Type, "char*")]
		public unsafe byte* Buf;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BufTextLen")]
		[NativeName(NativeNameType.Type, "int")]
		public int BufTextLen;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BufSize")]
		[NativeName(NativeNameType.Type, "int")]
		public int BufSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BufDirty")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte BufDirty;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CursorPos")]
		[NativeName(NativeNameType.Type, "int")]
		public int CursorPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SelectionStart")]
		[NativeName(NativeNameType.Type, "int")]
		public int SelectionStart;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SelectionEnd")]
		[NativeName(NativeNameType.Type, "int")]
		public int SelectionEnd;




		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_ClearSelection")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearSelection()
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.ClearSelectionNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_DeleteChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void DeleteChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "bytes_count")] [NativeName(NativeNameType.Type, "int")] int bytesCount)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.DeleteCharsNative(@this, pos, bytesCount);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_HasSelection")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool HasSelection()
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				byte ret = ImGui.HasSelectionNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.InsertCharsNative(@this, pos, text, textEnd);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.InsertCharsNative(@this, pos, text, (byte*)(default));
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					ImGui.InsertCharsNative(@this, pos, (byte*)ptext, textEnd);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					ImGui.InsertCharsNative(@this, pos, (byte*)ptext, (byte*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.InsertCharsNative(@this, pos, pStr0, textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.InsertCharsNative(@this, pos, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.InsertCharsNative(@this, pos, text, (byte*)ptextEnd);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.InsertCharsNative(@this, pos, text, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.InsertCharsNative(@this, pos, (byte*)ptext, (byte*)ptextEnd);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.InsertCharsNative(@this, pos, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_SelectAll")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SelectAll()
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.SelectAllNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiOnceUponAFrame")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiOnceUponAFrame
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RefFrame")]
		[NativeName(NativeNameType.Type, "int")]
		public int RefFrame;




		[NativeName(NativeNameType.Func, "ImGuiOnceUponAFrame_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiOnceUponAFrame* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTextFilter")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTextFilter
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InputBuf")]
		[NativeName(NativeNameType.Type, "char[256]")]
		public byte InputBuf_0;
		public byte InputBuf_1;
		public byte InputBuf_2;
		public byte InputBuf_3;
		public byte InputBuf_4;
		public byte InputBuf_5;
		public byte InputBuf_6;
		public byte InputBuf_7;
		public byte InputBuf_8;
		public byte InputBuf_9;
		public byte InputBuf_10;
		public byte InputBuf_11;
		public byte InputBuf_12;
		public byte InputBuf_13;
		public byte InputBuf_14;
		public byte InputBuf_15;
		public byte InputBuf_16;
		public byte InputBuf_17;
		public byte InputBuf_18;
		public byte InputBuf_19;
		public byte InputBuf_20;
		public byte InputBuf_21;
		public byte InputBuf_22;
		public byte InputBuf_23;
		public byte InputBuf_24;
		public byte InputBuf_25;
		public byte InputBuf_26;
		public byte InputBuf_27;
		public byte InputBuf_28;
		public byte InputBuf_29;
		public byte InputBuf_30;
		public byte InputBuf_31;
		public byte InputBuf_32;
		public byte InputBuf_33;
		public byte InputBuf_34;
		public byte InputBuf_35;
		public byte InputBuf_36;
		public byte InputBuf_37;
		public byte InputBuf_38;
		public byte InputBuf_39;
		public byte InputBuf_40;
		public byte InputBuf_41;
		public byte InputBuf_42;
		public byte InputBuf_43;
		public byte InputBuf_44;
		public byte InputBuf_45;
		public byte InputBuf_46;
		public byte InputBuf_47;
		public byte InputBuf_48;
		public byte InputBuf_49;
		public byte InputBuf_50;
		public byte InputBuf_51;
		public byte InputBuf_52;
		public byte InputBuf_53;
		public byte InputBuf_54;
		public byte InputBuf_55;
		public byte InputBuf_56;
		public byte InputBuf_57;
		public byte InputBuf_58;
		public byte InputBuf_59;
		public byte InputBuf_60;
		public byte InputBuf_61;
		public byte InputBuf_62;
		public byte InputBuf_63;
		public byte InputBuf_64;
		public byte InputBuf_65;
		public byte InputBuf_66;
		public byte InputBuf_67;
		public byte InputBuf_68;
		public byte InputBuf_69;
		public byte InputBuf_70;
		public byte InputBuf_71;
		public byte InputBuf_72;
		public byte InputBuf_73;
		public byte InputBuf_74;
		public byte InputBuf_75;
		public byte InputBuf_76;
		public byte InputBuf_77;
		public byte InputBuf_78;
		public byte InputBuf_79;
		public byte InputBuf_80;
		public byte InputBuf_81;
		public byte InputBuf_82;
		public byte InputBuf_83;
		public byte InputBuf_84;
		public byte InputBuf_85;
		public byte InputBuf_86;
		public byte InputBuf_87;
		public byte InputBuf_88;
		public byte InputBuf_89;
		public byte InputBuf_90;
		public byte InputBuf_91;
		public byte InputBuf_92;
		public byte InputBuf_93;
		public byte InputBuf_94;
		public byte InputBuf_95;
		public byte InputBuf_96;
		public byte InputBuf_97;
		public byte InputBuf_98;
		public byte InputBuf_99;
		public byte InputBuf_100;
		public byte InputBuf_101;
		public byte InputBuf_102;
		public byte InputBuf_103;
		public byte InputBuf_104;
		public byte InputBuf_105;
		public byte InputBuf_106;
		public byte InputBuf_107;
		public byte InputBuf_108;
		public byte InputBuf_109;
		public byte InputBuf_110;
		public byte InputBuf_111;
		public byte InputBuf_112;
		public byte InputBuf_113;
		public byte InputBuf_114;
		public byte InputBuf_115;
		public byte InputBuf_116;
		public byte InputBuf_117;
		public byte InputBuf_118;
		public byte InputBuf_119;
		public byte InputBuf_120;
		public byte InputBuf_121;
		public byte InputBuf_122;
		public byte InputBuf_123;
		public byte InputBuf_124;
		public byte InputBuf_125;
		public byte InputBuf_126;
		public byte InputBuf_127;
		public byte InputBuf_128;
		public byte InputBuf_129;
		public byte InputBuf_130;
		public byte InputBuf_131;
		public byte InputBuf_132;
		public byte InputBuf_133;
		public byte InputBuf_134;
		public byte InputBuf_135;
		public byte InputBuf_136;
		public byte InputBuf_137;
		public byte InputBuf_138;
		public byte InputBuf_139;
		public byte InputBuf_140;
		public byte InputBuf_141;
		public byte InputBuf_142;
		public byte InputBuf_143;
		public byte InputBuf_144;
		public byte InputBuf_145;
		public byte InputBuf_146;
		public byte InputBuf_147;
		public byte InputBuf_148;
		public byte InputBuf_149;
		public byte InputBuf_150;
		public byte InputBuf_151;
		public byte InputBuf_152;
		public byte InputBuf_153;
		public byte InputBuf_154;
		public byte InputBuf_155;
		public byte InputBuf_156;
		public byte InputBuf_157;
		public byte InputBuf_158;
		public byte InputBuf_159;
		public byte InputBuf_160;
		public byte InputBuf_161;
		public byte InputBuf_162;
		public byte InputBuf_163;
		public byte InputBuf_164;
		public byte InputBuf_165;
		public byte InputBuf_166;
		public byte InputBuf_167;
		public byte InputBuf_168;
		public byte InputBuf_169;
		public byte InputBuf_170;
		public byte InputBuf_171;
		public byte InputBuf_172;
		public byte InputBuf_173;
		public byte InputBuf_174;
		public byte InputBuf_175;
		public byte InputBuf_176;
		public byte InputBuf_177;
		public byte InputBuf_178;
		public byte InputBuf_179;
		public byte InputBuf_180;
		public byte InputBuf_181;
		public byte InputBuf_182;
		public byte InputBuf_183;
		public byte InputBuf_184;
		public byte InputBuf_185;
		public byte InputBuf_186;
		public byte InputBuf_187;
		public byte InputBuf_188;
		public byte InputBuf_189;
		public byte InputBuf_190;
		public byte InputBuf_191;
		public byte InputBuf_192;
		public byte InputBuf_193;
		public byte InputBuf_194;
		public byte InputBuf_195;
		public byte InputBuf_196;
		public byte InputBuf_197;
		public byte InputBuf_198;
		public byte InputBuf_199;
		public byte InputBuf_200;
		public byte InputBuf_201;
		public byte InputBuf_202;
		public byte InputBuf_203;
		public byte InputBuf_204;
		public byte InputBuf_205;
		public byte InputBuf_206;
		public byte InputBuf_207;
		public byte InputBuf_208;
		public byte InputBuf_209;
		public byte InputBuf_210;
		public byte InputBuf_211;
		public byte InputBuf_212;
		public byte InputBuf_213;
		public byte InputBuf_214;
		public byte InputBuf_215;
		public byte InputBuf_216;
		public byte InputBuf_217;
		public byte InputBuf_218;
		public byte InputBuf_219;
		public byte InputBuf_220;
		public byte InputBuf_221;
		public byte InputBuf_222;
		public byte InputBuf_223;
		public byte InputBuf_224;
		public byte InputBuf_225;
		public byte InputBuf_226;
		public byte InputBuf_227;
		public byte InputBuf_228;
		public byte InputBuf_229;
		public byte InputBuf_230;
		public byte InputBuf_231;
		public byte InputBuf_232;
		public byte InputBuf_233;
		public byte InputBuf_234;
		public byte InputBuf_235;
		public byte InputBuf_236;
		public byte InputBuf_237;
		public byte InputBuf_238;
		public byte InputBuf_239;
		public byte InputBuf_240;
		public byte InputBuf_241;
		public byte InputBuf_242;
		public byte InputBuf_243;
		public byte InputBuf_244;
		public byte InputBuf_245;
		public byte InputBuf_246;
		public byte InputBuf_247;
		public byte InputBuf_248;
		public byte InputBuf_249;
		public byte InputBuf_250;
		public byte InputBuf_251;
		public byte InputBuf_252;
		public byte InputBuf_253;
		public byte InputBuf_254;
		public byte InputBuf_255;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Filters")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiTextRange")]
		public ImVectorImGuiTextRange Filters;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CountGrep")]
		[NativeName(NativeNameType.Type, "int")]
		public int CountGrep;




		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Build")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Build()
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				ImGui.BuildNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>		/// Helper calling InputText+Build		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Draw([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte ret = ImGui.DrawNative(@this, label, width);
				return ret != 0;
			}
		}

		/// <summary>		/// Helper calling InputText+Build		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Draw([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte ret = ImGui.DrawNative(@this, label, (float)(0.0f));
				return ret != 0;
			}
		}

		/// <summary>		/// Helper calling InputText+Build		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Draw()
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				bool ret = ImGui.Draw(@this, (string)"Filter(inc,-exc)", (float)(0.0f));
				return ret;
			}
		}

		/// <summary>		/// Helper calling InputText+Build		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Draw([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				bool ret = ImGui.Draw(@this, (string)"Filter(inc,-exc)", width);
				return ret;
			}
		}

		/// <summary>		/// Helper calling InputText+Build		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Draw([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				fixed (byte* plabel = &label)
				{
					byte ret = ImGui.DrawNative(@this, (byte*)plabel, width);
					return ret != 0;
				}
			}
		}

		/// <summary>		/// Helper calling InputText+Build		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Draw([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				fixed (byte* plabel = &label)
				{
					byte ret = ImGui.DrawNative(@this, (byte*)plabel, (float)(0.0f));
					return ret != 0;
				}
			}
		}

		/// <summary>		/// Helper calling InputText+Build		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Draw([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = ImGui.DrawNative(@this, pStr0, width);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>		/// Helper calling InputText+Build		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Draw([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = ImGui.DrawNative(@this, pStr0, (float)(0.0f));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_IsActive")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsActive()
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte ret = ImGui.IsActiveNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool PassFilter([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte ret = ImGui.PassFilterNative(@this, text, textEnd);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool PassFilter([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte ret = ImGui.PassFilterNative(@this, text, (byte*)(default));
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool PassFilter([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					byte ret = ImGui.PassFilterNative(@this, (byte*)ptext, textEnd);
					return ret != 0;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool PassFilter([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					byte ret = ImGui.PassFilterNative(@this, (byte*)ptext, (byte*)(default));
					return ret != 0;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool PassFilter([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = ImGui.PassFilterNative(@this, pStr0, textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool PassFilter([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = ImGui.PassFilterNative(@this, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool PassFilter([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					byte ret = ImGui.PassFilterNative(@this, text, (byte*)ptextEnd);
					return ret != 0;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool PassFilter([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = ImGui.PassFilterNative(@this, text, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool PassFilter([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						byte ret = ImGui.PassFilterNative(@this, (byte*)ptext, (byte*)ptextEnd);
						return ret != 0;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool PassFilter([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = ImGui.PassFilterNative(@this, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiTextRange")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiTextRange
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiTextRange*")]
		public unsafe ImGuiTextRange* Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTextRange")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTextRange
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "b")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* B;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "e")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* E;




		[NativeName(NativeNameType.Func, "ImGuiTextRange_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTextRange* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextRange_empty")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool empty()
		{
			fixed (ImGuiTextRange* @this = &this)
			{
				byte ret = ImGui.emptyNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextRange_split")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void split([NativeName(NativeNameType.Param, "separator")] [NativeName(NativeNameType.Type, "char")] byte separator, [NativeName(NativeNameType.Param, "out")] [NativeName(NativeNameType.Type, "ImVector_ImGuiTextRange*")] ImVectorImGuiTextRange* output)
		{
			fixed (ImGuiTextRange* @this = &this)
			{
				ImGui.splitNative(@this, separator, output);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextRange_split")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void split([NativeName(NativeNameType.Param, "separator")] [NativeName(NativeNameType.Type, "char")] byte separator, [NativeName(NativeNameType.Param, "out")] [NativeName(NativeNameType.Type, "ImVector_ImGuiTextRange*")] ref ImVectorImGuiTextRange output)
		{
			fixed (ImGuiTextRange* @this = &this)
			{
				fixed (ImVectorImGuiTextRange* poutput = &output)
				{
					ImGui.splitNative(@this, separator, (ImVectorImGuiTextRange*)poutput);
				}
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImBitVector")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImBitVector
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Storage")]
		[NativeName(NativeNameType.Type, "ImVector_ImU32")]
		public ImVectorImU32 Storage;



		[NativeName(NativeNameType.Func, "ImBitVector_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImBitVector* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImBitVector_ClearBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearBit([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImBitVector* @this = &this)
			{
				ImGui.ClearBitNative(@this, n);
			}
		}

		[NativeName(NativeNameType.Func, "ImBitVector_Create")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Create([NativeName(NativeNameType.Param, "sz")] [NativeName(NativeNameType.Type, "int")] int sz)
		{
			fixed (ImBitVector* @this = &this)
			{
				ImGui.CreateNative(@this, sz);
			}
		}

		[NativeName(NativeNameType.Func, "ImBitVector_SetBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetBit([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImBitVector* @this = &this)
			{
				ImGui.SetBitNative(@this, n);
			}
		}

		[NativeName(NativeNameType.Func, "ImBitVector_TestBit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool TestBit([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImBitVector* @this = &this)
			{
				byte ret = ImGui.TestBitNative(@this, n);
				return ret != 0;
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiDataVarInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDataVarInfo
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "ImGuiDataType")]
		public ImGuiDataType Type;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Count")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint Count;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Offset")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint Offset;



		[NativeName(NativeNameType.Func, "ImGuiDataVarInfo_GetVarPtr")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public unsafe void* GetVarPtr([NativeName(NativeNameType.Param, "parent")] [NativeName(NativeNameType.Type, "void*")] void* parent)
		{
			fixed (ImGuiDataVarInfo* @this = &this)
			{
				void* ret = ImGui.GetVarPtrNative(@this, parent);
				return ret;
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiDataTypeInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDataTypeInfo
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "size_t")]
		public nuint Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Name;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PrintFmt")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* PrintFmt;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScanFmt")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* ScanFmt;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiInputTextDeactivateData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputTextDeactivateData
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiLocEntry")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiLocEntry
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Key")]
		[NativeName(NativeNameType.Type, "ImGuiLocKey")]
		public ImGuiLocKey Key;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Text")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Text;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTableSettings")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableSettings
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SaveFlags")]
		[NativeName(NativeNameType.Type, "ImGuiTableFlags")]
		public ImGuiTableFlags SaveFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RefScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float RefScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsCount")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte ColumnsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsCountMax")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte ColumnsCountMax;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantApply")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantApply;




		[NativeName(NativeNameType.Func, "ImGuiTableSettings_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTableSettings* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTableSettings_GetColumnSettings")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableColumnSettings*")]
		public unsafe ImGuiTableColumnSettings* GetColumnSettings()
		{
			fixed (ImGuiTableSettings* @this = &this)
			{
				ImGuiTableColumnSettings* ret = ImGui.GetColumnSettingsNative(@this);
				return ret;
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTableColumnsSettings")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableColumnsSettings
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiWindowSettings")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiWindowSettings
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Pos")]
		[NativeName(NativeNameType.Type, "ImVec2ih")]
		public ImVec2Ih Pos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "ImVec2ih")]
		public ImVec2Ih Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportPos")]
		[NativeName(NativeNameType.Type, "ImVec2ih")]
		public ImVec2Ih ViewportPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ViewportId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int DockId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ClassId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ClassId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockOrder")]
		[NativeName(NativeNameType.Type, "short")]
		public short DockOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Collapsed")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Collapsed;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantApply")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantApply;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantDelete")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantDelete;




		[NativeName(NativeNameType.Func, "ImGuiWindowSettings_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiWindowSettings* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindowSettings_GetName")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public unsafe byte* GetName()
		{
			fixed (ImGuiWindowSettings* @this = &this)
			{
				byte* ret = ImGui.GetNameNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindowSettings_GetName")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public unsafe string GetNameS()
		{
			fixed (ImGuiWindowSettings* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImGui.GetNameNative(@this));
				return ret;
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVector_const_charPtr")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorConstCharPtr
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "const char**")]
		public unsafe byte** Data;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "StbTexteditRow")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StbTexteditRow
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "x0")]
		[NativeName(NativeNameType.Type, "float")]
		public float X0;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "x1")]
		[NativeName(NativeNameType.Type, "float")]
		public float X1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "baseline_y_delta")]
		[NativeName(NativeNameType.Type, "float")]
		public float BaselineYDelta;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ymin")]
		[NativeName(NativeNameType.Type, "float")]
		public float Ymin;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ymax")]
		[NativeName(NativeNameType.Type, "float")]
		public float Ymax;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "num_chars")]
		[NativeName(NativeNameType.Type, "int")]
		public int NumChars;



	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiDataTypeTempStorage")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDataTypeTempStorage
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImU8[8]")]
		public byte Data_0;
		public byte Data_1;
		public byte Data_2;
		public byte Data_3;
		public byte Data_4;
		public byte Data_5;
		public byte Data_6;
		public byte Data_7;



		/// <summary>
		/// To be documented.
		/// </summary>
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImBitArrayImGuiKeyNamedKeyCOUNTLessImGuiKeyNamedKeyBEGIN
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Storage")]
		[NativeName(NativeNameType.Type, "ImU32[5]")]
		public uint Storage_0;
		public uint Storage_1;
		public uint Storage_2;
		public uint Storage_3;
		public uint Storage_4;



		/// <summary>
		/// To be documented.
		/// </summary>
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTableColumnSettings")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableColumnSettings
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WidthOrWeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float WidthOrWeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "UserID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int UserID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Index")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte Index;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayOrder")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte DisplayOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SortOrder")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte SortOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SortDirection")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte SortDirection;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsEnabled")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte IsEnabled;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsStretch")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte IsStretch;




		[NativeName(NativeNameType.Func, "ImGuiTableColumnSettings_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTableColumnSettings* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

}
