// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace HexaEngine.ImGuiNET
{
	/// <summary>
	/// [Internal] For use by ImDrawListSplitter<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImDrawChannel")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawChannel
	{
		[NativeName(NativeNameType.Field, "_CmdBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawCmd")]
		public ImVectorImDrawCmd CmdBuffer;
		[NativeName(NativeNameType.Field, "_IdxBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawIdx")]
		public ImVectorImDrawIdx IdxBuffer;


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImDrawCmd")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImDrawCmd
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImDrawCmd*")]
		public unsafe ImDrawCmd* Data;


	}

	/// <summary>
	/// Typically, 1 command = 1 GPU draw call (unless command is a callback)<br/>
	/// - VtxOffset: When 'io.BackendFlags &amp; ImGuiBackendFlags_RendererHasVtxOffset' is enabled,<br/>
	/// this fields allow us to render meshes larger than 64K vertices while keeping 16-bit indices.<br/>
	/// Backends made for &lt;1.71. will typically ignore the VtxOffset fields.<br/>
	/// - The ClipRectTextureIdVtxOffset fields must be contiguous as we memcmp() them together (this is asserted for).<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImDrawCmd")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawCmd
	{
		/// <summary>
		/// 4*4   Clipping rectangle (x1, y1, x2, y2). Subtract ImDrawData-&gt;DisplayPos to get clipping rectangle in "viewport" coordinates<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ClipRect")]
		[NativeName(NativeNameType.Type, "ImVec4")]
		public Vector4 ClipRect;

		/// <summary>
		/// 4-8   User-provided texture ID. Set by user in ImfontAtlas::SetTexID() for fonts or passed to Image*() functions. Ignore if never using images or multiple fonts atlas.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureId")]
		[NativeName(NativeNameType.Type, "ImTextureID")]
		public ImTextureID TextureId;

		/// <summary>
		/// 4     Start offset in vertex buffer. ImGuiBackendFlags_RendererHasVtxOffset: always 0, otherwise may be &gt;0 to support meshes larger than 64K vertices with 16-bit indices.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "VtxOffset")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint VtxOffset;

		/// <summary>
		/// 4     Start offset in index buffer.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IdxOffset")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint IdxOffset;

		/// <summary>
		/// 4     Number of indices (multiple of 3) to be rendered as triangles. Vertices are stored in the callee ImDrawList's vtx_buffer[] array, indices in idx_buffer[].<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ElemCount")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint ElemCount;

		/// <summary>
		/// 4-8   If != NULL, call the function instead of rendering the vertices. clip_rect and texture_id will be set normally.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "UserCallback")]
		[NativeName(NativeNameType.Type, "ImDrawCallback")]
		public unsafe void* UserCallback;
		/// <summary>
		/// 4-8   The draw callback code can access this.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "UserCallbackData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserCallbackData;




		[NativeName(NativeNameType.Func, "ImDrawCmd_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImDrawCmd* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawCmd_GetTexID")]
		[return: NativeName(NativeNameType.Type, "ImTextureID")]
		public unsafe ImTextureID GetTexID()
		{
			fixed (ImDrawCmd* @this = &this)
			{
				ImTextureID ret = ImGui.GetTexIDNative(@this);
				return ret;
			}
		}

	}

	/// <summary>
	/// Draw command list<br/>
	/// This is the low-level list of polygons that ImGui:: functions are filling. At the end of the frame,<br/>
	/// all command lists are passed to your ImGuiIO::RenderDrawListFn function for rendering.<br/>
	/// Each dear imgui window contains its own ImDrawList. You can use ImGui::GetWindowDrawList() to<br/>
	/// access the current window draw list and draw custom primitives.<br/>
	/// You can interleave normal ImGui:: calls and adding primitives to the current draw list.<br/>
	/// In single viewport mode, top-left is == GetMainViewport()-&gt;Pos (generally 0,0), bottom-right is == GetMainViewport()-&gt;Pos+Size (generally io.DisplaySize).<br/>
	/// You are totally free to apply whatever transformation matrix to want to the data (depending on the use of the transformation you may want to apply it to ClipRect as well!)<br/>
	/// Important: Primitives are always added to the list and not culled (culling is done at higher-level by ImGui:: functions), if you use this API a lot consider coarse culling your drawn objects.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImDrawList")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawList
	{
		/// <summary>
		/// This is what you have to render Draw commands. Typically 1 command = 1 GPU draw call, unless the command is a callback.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CmdBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawCmd")]
		public ImVectorImDrawCmd CmdBuffer;

		/// <summary>
		/// Index buffer. Each command consume ImDrawCmd::ElemCount of those<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IdxBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawIdx")]
		public ImVectorImDrawIdx IdxBuffer;

		/// <summary>
		/// Vertex buffer.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "VtxBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawVert")]
		public ImVectorImDrawVert VtxBuffer;

		/// <summary>
		/// Flags, you may poke into these to adjust anti-aliasing settings per-primitive.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImDrawListFlags")]
		public ImDrawListFlags Flags;

		/// <summary>
		/// [Internal, used while building lists] [Internal] generally == VtxBuffer.Size unless we are past 64K vertices, in which case this gets reset to 0.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "_VtxCurrentIdx")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint VtxCurrentIdx;

		/// <summary>
		/// Pointer to shared draw data (you can use ImGui::GetDrawListSharedData() to get the one from current ImGui context)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "_Data")]
		[NativeName(NativeNameType.Type, "ImDrawListSharedData*")]
		public unsafe ImDrawListSharedData* Data;

		/// <summary>
		/// Pointer to owner window's name for debugging<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "_OwnerName")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* OwnerName;

		/// <summary>
		/// [Internal] point within VtxBuffer.Data after each add command (to avoid using the ImVector&lt;&gt; operators too much)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "_VtxWritePtr")]
		[NativeName(NativeNameType.Type, "ImDrawVert*")]
		public unsafe ImDrawVert* VtxWritePtr;

		/// <summary>
		/// [Internal] point within IdxBuffer.Data after each add command (to avoid using the ImVector&lt;&gt; operators too much)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "_IdxWritePtr")]
		[NativeName(NativeNameType.Type, "ImDrawIdx*")]
		public unsafe ushort* IdxWritePtr;

		/// <summary>
		/// [Internal]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "_ClipRectStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImVec4")]
		public ImVectorImVec4 ClipRectStack;

		/// <summary>
		/// [Internal]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "_TextureIdStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImTextureID")]
		public ImVectorImTextureID TextureIdStack;

		/// <summary>
		/// [Internal] current path building<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "_Path")]
		[NativeName(NativeNameType.Type, "ImVector_ImVec2")]
		public ImVectorImVec2 Path;

		/// <summary>
		/// [Internal] template of active commands. Fields should match those of CmdBuffer.back().<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "_CmdHeader")]
		[NativeName(NativeNameType.Type, "ImDrawCmdHeader")]
		public ImDrawCmdHeader CmdHeader;

		/// <summary>
		/// [Internal] for channels api (note: prefer using your own persistent instance of ImDrawListSplitter!)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "_Splitter")]
		[NativeName(NativeNameType.Type, "ImDrawListSplitter")]
		public ImDrawListSplitter Splitter;

		/// <summary>
		/// [Internal] anti-alias fringe is scaled by this value, this helps to keep things sharp while zooming at vertex buffer content<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "_FringeScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float FringeScale;




		[NativeName(NativeNameType.Func, "ImDrawList__CalcCircleAutoSegmentCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int _CalcCircleAutoSegmentCount([NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float rADIUS)
		{
			fixed (ImDrawList* @this = &this)
			{
				int ret = ImGui._CalcCircleAutoSegmentCountNative(@this, rADIUS);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList__ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void _ClearFreeMemory()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui._ClearFreeMemoryNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList__OnChangedClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void _OnChangedClipRect()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui._OnChangedClipRectNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList__OnChangedTextureID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void _OnChangedTextureID()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui._OnChangedTextureIDNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList__OnChangedVtxOffset")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void _OnChangedVtxOffset()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui._OnChangedVtxOffsetNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList__PathArcToFastEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void _PathArcToFastEx([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 cENTER, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float rADIUS, [NativeName(NativeNameType.Param, "a_min_sample")] [NativeName(NativeNameType.Type, "int")] int aMinSample, [NativeName(NativeNameType.Param, "a_max_sample")] [NativeName(NativeNameType.Type, "int")] int aMaxSample, [NativeName(NativeNameType.Param, "a_step")] [NativeName(NativeNameType.Type, "int")] int aStep)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui._PathArcToFastExNative(@this, cENTER, rADIUS, aMinSample, aMaxSample, aStep);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList__PathArcToN")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void _PathArcToN([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 cENTER, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float rADIUS, [NativeName(NativeNameType.Param, "a_min")] [NativeName(NativeNameType.Type, "float")] float aMin, [NativeName(NativeNameType.Param, "a_max")] [NativeName(NativeNameType.Type, "float")] float aMax, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui._PathArcToNNative(@this, cENTER, rADIUS, aMin, aMax, numSegments);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList__PopUnusedDrawCmd")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void _PopUnusedDrawCmd()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui._PopUnusedDrawCmdNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList__ResetForNewFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void _ResetForNewFrame()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui._ResetForNewFrameNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList__TryMergeDrawCmds")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void _TryMergeDrawCmds()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui._TryMergeDrawCmdsNative(@this);
			}
		}

		/// <summary>		/// Cubic Bezier (4 control points)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddBezierCubic")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddBezierCubic([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float tHICKNESS, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddBezierCubicNative(@this, p1, p2, p3, p4, cOL, tHICKNESS, numSegments);
			}
		}

		/// <summary>		/// Cubic Bezier (4 control points)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddBezierCubic")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddBezierCubic([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float tHICKNESS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddBezierCubicNative(@this, p1, p2, p3, p4, cOL, tHICKNESS, (int)(0));
			}
		}

		/// <summary>		/// Quadratic Bezier (3 control points)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddBezierQuadratic")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddBezierQuadratic([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float tHICKNESS, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddBezierQuadraticNative(@this, p1, p2, p3, cOL, tHICKNESS, numSegments);
			}
		}

		/// <summary>		/// Quadratic Bezier (3 control points)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddBezierQuadratic")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddBezierQuadratic([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float tHICKNESS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddBezierQuadraticNative(@this, p1, p2, p3, cOL, tHICKNESS, (int)(0));
			}
		}

		/// <summary>		/// Your rendering function must check for 'UserCallback' in ImDrawCmd and call the function instead of rendering triangles.		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddCallback")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddCallback([NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "ImDrawCallback")] ImDrawCallback cALLBACK, [NativeName(NativeNameType.Param, "callback_data")] [NativeName(NativeNameType.Type, "void*")] void* callbackData)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddCallbackNative(@this, cALLBACK, callbackData);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddCircle([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 cENTER, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float rADIUS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float tHICKNESS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddCircleNative(@this, cENTER, rADIUS, cOL, numSegments, tHICKNESS);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddCircle([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 cENTER, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float rADIUS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddCircleNative(@this, cENTER, rADIUS, cOL, numSegments, (float)(1.0f));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddCircle([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 cENTER, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float rADIUS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddCircleNative(@this, cENTER, rADIUS, cOL, (int)(0), (float)(1.0f));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddCircle([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 cENTER, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float rADIUS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float tHICKNESS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddCircleNative(@this, cENTER, rADIUS, cOL, (int)(0), tHICKNESS);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddCircleFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddCircleFilled([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 cENTER, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float rADIUS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddCircleFilledNative(@this, cENTER, rADIUS, cOL, numSegments);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddCircleFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddCircleFilled([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 cENTER, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float rADIUS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddCircleFilledNative(@this, cENTER, rADIUS, cOL, (int)(0));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddConvexPolyFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddConvexPolyFilled([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* pOINTS, [NativeName(NativeNameType.Param, "num_points")] [NativeName(NativeNameType.Type, "int")] int numPoints, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddConvexPolyFilledNative(@this, pOINTS, numPoints, cOL);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddConvexPolyFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddConvexPolyFilled([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 pOINTS, [NativeName(NativeNameType.Param, "num_points")] [NativeName(NativeNameType.Type, "int")] int numPoints, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (Vector2* ppOINTS = &pOINTS)
				{
					ImGui.AddConvexPolyFilledNative(@this, (Vector2*)ppOINTS, numPoints, cOL);
				}
			}
		}

		/// <summary>		/// This is useful if you need to forcefully create a new draw call (to allow for dependent rendering  blending). Otherwise primitives are merged into the same draw-call as much as possible		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddDrawCmd")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddDrawCmd()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddDrawCmdNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImage([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "uv_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvMin, [NativeName(NativeNameType.Param, "uv_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageNative(@this, userTextureId, pMin, pMax, uvMin, uvMax, cOL);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImage([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "uv_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvMin, [NativeName(NativeNameType.Param, "uv_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvMax)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageNative(@this, userTextureId, pMin, pMax, uvMin, uvMax, (uint)(4294967295));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImage([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "uv_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvMin)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageNative(@this, userTextureId, pMin, pMax, uvMin, (Vector2)(new Vector2(1,1)), (uint)(4294967295));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImage([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageNative(@this, userTextureId, pMin, pMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (uint)(4294967295));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImage([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "uv_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvMin, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageNative(@this, userTextureId, pMin, pMax, uvMin, (Vector2)(new Vector2(1,1)), cOL);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImage([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageNative(@this, userTextureId, pMin, pMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), cOL);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageQuad([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV1, [NativeName(NativeNameType.Param, "uv2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV2, [NativeName(NativeNameType.Param, "uv3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV3, [NativeName(NativeNameType.Param, "uv4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageQuadNative(@this, userTextureId, p1, p2, p3, p4, uV1, uV2, uV3, uV4, cOL);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageQuad([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV1, [NativeName(NativeNameType.Param, "uv2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV2, [NativeName(NativeNameType.Param, "uv3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV3, [NativeName(NativeNameType.Param, "uv4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV4)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageQuadNative(@this, userTextureId, p1, p2, p3, p4, uV1, uV2, uV3, uV4, (uint)(4294967295));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageQuad([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV1, [NativeName(NativeNameType.Param, "uv2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV2, [NativeName(NativeNameType.Param, "uv3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV3)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageQuadNative(@this, userTextureId, p1, p2, p3, p4, uV1, uV2, uV3, (Vector2)(new Vector2(0,1)), (uint)(4294967295));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageQuad([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV1, [NativeName(NativeNameType.Param, "uv2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV2)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageQuadNative(@this, userTextureId, p1, p2, p3, p4, uV1, uV2, (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageQuad([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV1)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageQuadNative(@this, userTextureId, p1, p2, p3, p4, uV1, (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageQuad([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageQuadNative(@this, userTextureId, p1, p2, p3, p4, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageQuad([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV1, [NativeName(NativeNameType.Param, "uv2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV2, [NativeName(NativeNameType.Param, "uv3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV3, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageQuadNative(@this, userTextureId, p1, p2, p3, p4, uV1, uV2, uV3, (Vector2)(new Vector2(0,1)), cOL);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageQuad([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV1, [NativeName(NativeNameType.Param, "uv2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV2, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageQuadNative(@this, userTextureId, p1, p2, p3, p4, uV1, uV2, (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), cOL);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageQuad([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV1, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageQuadNative(@this, userTextureId, p1, p2, p3, p4, uV1, (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), cOL);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageQuad([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageQuadNative(@this, userTextureId, p1, p2, p3, p4, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), cOL);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageRounded")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageRounded([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "uv_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvMin, [NativeName(NativeNameType.Param, "uv_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rOUNDING, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags fLAGS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageRoundedNative(@this, userTextureId, pMin, pMax, uvMin, uvMax, cOL, rOUNDING, fLAGS);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddImageRounded")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddImageRounded([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "uv_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvMin, [NativeName(NativeNameType.Param, "uv_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rOUNDING)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddImageRoundedNative(@this, userTextureId, pMin, pMax, uvMin, uvMax, cOL, rOUNDING, (ImDrawFlags)(0));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddLine")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddLine([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float tHICKNESS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddLineNative(@this, p1, p2, cOL, tHICKNESS);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddLine")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddLine([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddLineNative(@this, p1, p2, cOL, (float)(1.0f));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddNgon")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddNgon([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 cENTER, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float rADIUS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float tHICKNESS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddNgonNative(@this, cENTER, rADIUS, cOL, numSegments, tHICKNESS);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddNgon")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddNgon([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 cENTER, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float rADIUS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddNgonNative(@this, cENTER, rADIUS, cOL, numSegments, (float)(1.0f));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddNgonFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddNgonFilled([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 cENTER, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float rADIUS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddNgonFilledNative(@this, cENTER, rADIUS, cOL, numSegments);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddPolyline")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddPolyline([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* pOINTS, [NativeName(NativeNameType.Param, "num_points")] [NativeName(NativeNameType.Type, "int")] int numPoints, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags fLAGS, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float tHICKNESS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddPolylineNative(@this, pOINTS, numPoints, cOL, fLAGS, tHICKNESS);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddPolyline")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddPolyline([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 pOINTS, [NativeName(NativeNameType.Param, "num_points")] [NativeName(NativeNameType.Type, "int")] int numPoints, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags fLAGS, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float tHICKNESS)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (Vector2* ppOINTS = &pOINTS)
				{
					ImGui.AddPolylineNative(@this, (Vector2*)ppOINTS, numPoints, cOL, fLAGS, tHICKNESS);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddQuad([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float tHICKNESS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddQuadNative(@this, p1, p2, p3, p4, cOL, tHICKNESS);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddQuad([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddQuadNative(@this, p1, p2, p3, p4, cOL, (float)(1.0f));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddQuadFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddQuadFilled([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddQuadFilledNative(@this, p1, p2, p3, p4, cOL);
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRect([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rOUNDING, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags fLAGS, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float tHICKNESS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectNative(@this, pMin, pMax, cOL, rOUNDING, fLAGS, tHICKNESS);
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRect([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rOUNDING, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags fLAGS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectNative(@this, pMin, pMax, cOL, rOUNDING, fLAGS, (float)(1.0f));
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRect([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rOUNDING)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectNative(@this, pMin, pMax, cOL, rOUNDING, (ImDrawFlags)(0), (float)(1.0f));
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRect([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectNative(@this, pMin, pMax, cOL, (float)(0.0f), (ImDrawFlags)(0), (float)(1.0f));
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRect([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags fLAGS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectNative(@this, pMin, pMax, cOL, (float)(0.0f), fLAGS, (float)(1.0f));
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRect([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rOUNDING, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float tHICKNESS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectNative(@this, pMin, pMax, cOL, rOUNDING, (ImDrawFlags)(0), tHICKNESS);
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRect([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags fLAGS, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float tHICKNESS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectNative(@this, pMin, pMax, cOL, (float)(0.0f), fLAGS, tHICKNESS);
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRectFilled([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rOUNDING, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags fLAGS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectFilledNative(@this, pMin, pMax, cOL, rOUNDING, fLAGS);
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRectFilled([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rOUNDING)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectFilledNative(@this, pMin, pMax, cOL, rOUNDING, (ImDrawFlags)(0));
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRectFilled([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectFilledNative(@this, pMin, pMax, cOL, (float)(0.0f), (ImDrawFlags)(0));
			}
		}

		/// <summary>		/// a: upper-left, b: lower-right (== upper-left + size)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRectFilled([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags fLAGS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectFilledNative(@this, pMin, pMax, cOL, (float)(0.0f), fLAGS);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilledMultiColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRectFilledMultiColor([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col_upr_left")] [NativeName(NativeNameType.Type, "ImU32")] uint colUprLeft, [NativeName(NativeNameType.Param, "col_upr_right")] [NativeName(NativeNameType.Type, "ImU32")] uint colUprRight, [NativeName(NativeNameType.Param, "col_bot_right")] [NativeName(NativeNameType.Type, "ImU32")] uint colBotRight, [NativeName(NativeNameType.Param, "col_bot_left")] [NativeName(NativeNameType.Type, "ImU32")] uint colBotLeft)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddRectFilledMultiColorNative(@this, pMin, pMax, colUprLeft, colUprRight, colBotRight, colBotLeft);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTextNative(@this, pOS, cOL, textBegin, textEnd);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTextNative(@this, pOS, cOL, textBegin, (byte*)(default));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.AddTextNative(@this, pOS, cOL, (byte*)ptextBegin, textEnd);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.AddTextNative(@this, pOS, cOL, (byte*)ptextBegin, (byte*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, pOS, cOL, pStr0, textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, pOS, cOL, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.AddTextNative(@this, pOS, cOL, textBegin, (byte*)ptextEnd);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, pOS, cOL, textBegin, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.AddTextNative(@this, pOS, cOL, (byte*)ptextBegin, (byte*)ptextEnd);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.AddTextNative(@this, pOS, cOL, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, textEnd, wrapWidth, cpuFineClipRect);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, textEnd, wrapWidth, (Vector4*)(default));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, textEnd, (float)(0.0f), (Vector4*)(default));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, (byte*)(default), (float)(0.0f), (Vector4*)(default));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, (byte*)(default), wrapWidth, (Vector4*)(default));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, textEnd, (float)(0.0f), cpuFineClipRect);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, (byte*)(default), (float)(0.0f), cpuFineClipRect);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, (byte*)(default), wrapWidth, cpuFineClipRect);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, textEnd, wrapWidth, cpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, textEnd, wrapWidth, (Vector4*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, textEnd, (float)(0.0f), (Vector4*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, (byte*)(default), (float)(0.0f), (Vector4*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, (byte*)(default), wrapWidth, (Vector4*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, textEnd, (float)(0.0f), cpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, (byte*)(default), (float)(0.0f), cpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, (byte*)(default), wrapWidth, cpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, (byte*)ptextBegin, textEnd, wrapWidth, cpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, (byte*)ptextBegin, textEnd, wrapWidth, (Vector4*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, (byte*)ptextBegin, textEnd, (float)(0.0f), (Vector4*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)(default), (float)(0.0f), (Vector4*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)(default), wrapWidth, (Vector4*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, (byte*)ptextBegin, textEnd, (float)(0.0f), cpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)(default), (float)(0.0f), cpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)(default), wrapWidth, cpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, pStr0, textEnd, wrapWidth, cpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, pStr0, textEnd, wrapWidth, (Vector4*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, pStr0, textEnd, (float)(0.0f), (Vector4*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, pStr0, (byte*)(default), (float)(0.0f), (Vector4*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, pStr0, (byte*)(default), wrapWidth, (Vector4*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, pStr0, textEnd, (float)(0.0f), cpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, pStr0, (byte*)(default), (float)(0.0f), cpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, pStr0, (byte*)(default), wrapWidth, cpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, (byte*)ptextBegin, textEnd, wrapWidth, cpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, (byte*)ptextBegin, textEnd, wrapWidth, (Vector4*)(default));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, (byte*)ptextBegin, textEnd, (float)(0.0f), (Vector4*)(default));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)(default), (float)(0.0f), (Vector4*)(default));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)(default), wrapWidth, (Vector4*)(default));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, (byte*)ptextBegin, textEnd, (float)(0.0f), cpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)(default), (float)(0.0f), cpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)(default), wrapWidth, cpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, pStr0, textEnd, wrapWidth, cpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, pStr0, textEnd, wrapWidth, (Vector4*)(default));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, pStr0, textEnd, (float)(0.0f), (Vector4*)(default));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, pStr0, (byte*)(default), (float)(0.0f), (Vector4*)(default));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, pStr0, (byte*)(default), wrapWidth, (Vector4*)(default));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, pStr0, textEnd, (float)(0.0f), cpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, pStr0, (byte*)(default), (float)(0.0f), cpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, pStr0, (byte*)(default), wrapWidth, cpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, (byte*)ptextEnd, wrapWidth, cpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, (byte*)ptextEnd, (float)(0.0f), cpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, pStr0, wrapWidth, cpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, pStr0, wrapWidth, (Vector4*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, pStr0, (float)(0.0f), (Vector4*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, pStr0, (float)(0.0f), cpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, (byte*)ptextEnd, wrapWidth, cpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)(default));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)(default));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, (byte*)ptextEnd, (float)(0.0f), cpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textEnd != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, pStr0, wrapWidth, cpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textEnd != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, pStr0, wrapWidth, (Vector4*)(default));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textEnd != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, pStr0, (float)(0.0f), (Vector4*)(default));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textEnd != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, pStr0, (float)(0.0f), cpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, cpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)(default));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)(default));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), cpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, pStr0, pStr1, wrapWidth, cpuFineClipRect);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, pStr0, pStr1, wrapWidth, (Vector4*)(default));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, pStr0, pStr1, (float)(0.0f), (Vector4*)(default));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, pStr0, pStr1, (float)(0.0f), cpuFineClipRect);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (byte* ptextEnd = &textEnd)
						{
							ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, cpuFineClipRect);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (byte* ptextEnd = &textEnd)
						{
							ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)(default));
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (byte* ptextEnd = &textEnd)
						{
							ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)(default));
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (byte* ptextEnd = &textEnd)
						{
							ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), cpuFineClipRect);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (textEnd != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, pStr0, pStr1, wrapWidth, cpuFineClipRect);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (textEnd != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, pStr0, pStr1, wrapWidth, (Vector4*)(default));
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (textEnd != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, pStr0, pStr1, (float)(0.0f), (Vector4*)(default));
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] Vector4* cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (textEnd != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, pStr0, pStr1, (float)(0.0f), cpuFineClipRect);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, textEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, textEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, (byte*)(default), (float)(0.0f), (Vector4*)pcpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, (byte*)(default), wrapWidth, (Vector4*)pcpuFineClipRect);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, textEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, textEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, (byte*)(default), (float)(0.0f), (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, (byte*)(default), wrapWidth, (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, (byte*)ptextBegin, textEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, (byte*)ptextBegin, textEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)(default), (float)(0.0f), (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)(default), wrapWidth, (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, pStr0, textEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, pStr0, textEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, pStr0, (byte*)(default), (float)(0.0f), (Vector4*)pcpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, pStr0, (byte*)(default), wrapWidth, (Vector4*)pcpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
						{
							ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, (byte*)ptextBegin, textEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
						{
							ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, (byte*)ptextBegin, textEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
						{
							ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)(default), (float)(0.0f), (Vector4*)pcpuFineClipRect);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
						{
							ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)(default), wrapWidth, (Vector4*)pcpuFineClipRect);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, pStr0, textEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, pStr0, textEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, pStr0, (byte*)(default), (float)(0.0f), (Vector4*)pcpuFineClipRect);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, pStr0, (byte*)(default), wrapWidth, (Vector4*)pcpuFineClipRect);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, pStr0, wrapWidth, (Vector4*)pcpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, textBegin, pStr0, (float)(0.0f), (Vector4*)pcpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
						{
							ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
						{
							ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textEnd != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, pStr0, wrapWidth, (Vector4*)pcpuFineClipRect);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textEnd != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, textBegin, pStr0, (float)(0.0f), (Vector4*)pcpuFineClipRect);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
						{
							ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
						{
							ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, pStr0, pStr1, wrapWidth, (Vector4*)pcpuFineClipRect);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					ImGui.AddTextNative(@this, fONT, fontSize, pOS, cOL, pStr0, pStr1, (float)(0.0f), (Vector4*)pcpuFineClipRect);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (byte* ptextEnd = &textEnd)
						{
							fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
							{
								ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (byte* ptextEnd = &textEnd)
						{
							fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
							{
								ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (textEnd != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, pStr0, pStr1, wrapWidth, (Vector4*)pcpuFineClipRect);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddText_FontPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "const ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "float")] float fontSize, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4*")] ref Vector4 cpuFineClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (textEnd != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						ImGui.AddTextNative(@this, (ImFont*)pfONT, fontSize, pOS, cOL, pStr0, pStr1, (float)(0.0f), (Vector4*)pcpuFineClipRect);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddTriangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddTriangle([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float tHICKNESS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTriangleNative(@this, p1, p2, p3, cOL, tHICKNESS);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddTriangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddTriangle([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTriangleNative(@this, p1, p2, p3, cOL, (float)(1.0f));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_AddTriangleFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddTriangleFilled([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.AddTriangleFilledNative(@this, p1, p2, p3, cOL);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_ChannelsMerge")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ChannelsMerge()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.ChannelsMergeNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_ChannelsSetCurrent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ChannelsSetCurrent([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.ChannelsSetCurrentNative(@this, n);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_ChannelsSplit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ChannelsSplit([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int cOUNT)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.ChannelsSplitNative(@this, cOUNT);
			}
		}

		/// <summary>		/// Create a clone of the CmdBufferIdxBufferVtxBuffer.		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_CloneOutput")]
		[return: NativeName(NativeNameType.Type, "ImDrawList*")]
		public unsafe ImDrawList* CloneOutput()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImDrawList* ret = ImGui.CloneOutputNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathArcTo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathArcTo([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 cENTER, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float rADIUS, [NativeName(NativeNameType.Param, "a_min")] [NativeName(NativeNameType.Type, "float")] float aMin, [NativeName(NativeNameType.Param, "a_max")] [NativeName(NativeNameType.Type, "float")] float aMax, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathArcToNative(@this, cENTER, rADIUS, aMin, aMax, numSegments);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathArcTo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathArcTo([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 cENTER, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float rADIUS, [NativeName(NativeNameType.Param, "a_min")] [NativeName(NativeNameType.Type, "float")] float aMin, [NativeName(NativeNameType.Param, "a_max")] [NativeName(NativeNameType.Type, "float")] float aMax)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathArcToNative(@this, cENTER, rADIUS, aMin, aMax, (int)(0));
			}
		}

		/// <summary>		/// Use precomputed angles for a 12 steps circle		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_PathArcToFast")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathArcToFast([NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 cENTER, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float rADIUS, [NativeName(NativeNameType.Param, "a_min_of_12")] [NativeName(NativeNameType.Type, "int")] int aMinOf12, [NativeName(NativeNameType.Param, "a_max_of_12")] [NativeName(NativeNameType.Type, "int")] int aMaxOf12)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathArcToFastNative(@this, cENTER, rADIUS, aMinOf12, aMaxOf12);
			}
		}

		/// <summary>		/// Cubic Bezier (4 control points)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_PathBezierCubicCurveTo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathBezierCubicCurveTo([NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathBezierCubicCurveToNative(@this, p2, p3, p4, numSegments);
			}
		}

		/// <summary>		/// Cubic Bezier (4 control points)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_PathBezierCubicCurveTo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathBezierCubicCurveTo([NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathBezierCubicCurveToNative(@this, p2, p3, p4, (int)(0));
			}
		}

		/// <summary>		/// Quadratic Bezier (3 control points)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_PathBezierQuadraticCurveTo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathBezierQuadraticCurveTo([NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathBezierQuadraticCurveToNative(@this, p2, p3, numSegments);
			}
		}

		/// <summary>		/// Quadratic Bezier (3 control points)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_PathBezierQuadraticCurveTo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathBezierQuadraticCurveTo([NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathBezierQuadraticCurveToNative(@this, p2, p3, (int)(0));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathClear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathClear()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathClearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathFillConvex")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathFillConvex([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathFillConvexNative(@this, cOL);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathLineTo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathLineTo([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathLineToNative(@this, pOS);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathLineToMergeDuplicate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathLineToMergeDuplicate([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathLineToMergeDuplicateNative(@this, pOS);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathRect([NativeName(NativeNameType.Param, "rect_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rectMin, [NativeName(NativeNameType.Param, "rect_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rectMax, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rOUNDING, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags fLAGS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathRectNative(@this, rectMin, rectMax, rOUNDING, fLAGS);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathRect([NativeName(NativeNameType.Param, "rect_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rectMin, [NativeName(NativeNameType.Param, "rect_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rectMax, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rOUNDING)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathRectNative(@this, rectMin, rectMax, rOUNDING, (ImDrawFlags)(0));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathRect([NativeName(NativeNameType.Param, "rect_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rectMin, [NativeName(NativeNameType.Param, "rect_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rectMax)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathRectNative(@this, rectMin, rectMax, (float)(0.0f), (ImDrawFlags)(0));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathRect([NativeName(NativeNameType.Param, "rect_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rectMin, [NativeName(NativeNameType.Param, "rect_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rectMax, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags fLAGS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathRectNative(@this, rectMin, rectMax, (float)(0.0f), fLAGS);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathStroke")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathStroke([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags fLAGS, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float tHICKNESS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathStrokeNative(@this, cOL, fLAGS, tHICKNESS);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathStroke")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathStroke([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags fLAGS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathStrokeNative(@this, cOL, fLAGS, (float)(1.0f));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathStroke")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathStroke([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathStrokeNative(@this, cOL, (ImDrawFlags)(0), (float)(1.0f));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PathStroke")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PathStroke([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float tHICKNESS)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PathStrokeNative(@this, cOL, (ImDrawFlags)(0), tHICKNESS);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PopClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PopClipRect()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PopClipRectNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PopTextureID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PopTextureID()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PopTextureIDNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PrimQuadUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PrimQuadUV([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c, [NativeName(NativeNameType.Param, "d")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 d, [NativeName(NativeNameType.Param, "uv_a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvA, [NativeName(NativeNameType.Param, "uv_b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvB, [NativeName(NativeNameType.Param, "uv_c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvC, [NativeName(NativeNameType.Param, "uv_d")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvD, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PrimQuadUVNative(@this, a, b, c, d, uvA, uvB, uvC, uvD, cOL);
			}
		}

		/// <summary>		/// Axis aligned rectangle (composed of two triangles)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_PrimRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PrimRect([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PrimRectNative(@this, a, b, cOL);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PrimRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PrimRectUV([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "uv_a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvA, [NativeName(NativeNameType.Param, "uv_b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvB, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PrimRectUVNative(@this, a, b, uvA, uvB, cOL);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PrimReserve")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PrimReserve([NativeName(NativeNameType.Param, "idx_count")] [NativeName(NativeNameType.Type, "int")] int idxCount, [NativeName(NativeNameType.Param, "vtx_count")] [NativeName(NativeNameType.Type, "int")] int vtxCount)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PrimReserveNative(@this, idxCount, vtxCount);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PrimUnreserve")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PrimUnreserve([NativeName(NativeNameType.Param, "idx_count")] [NativeName(NativeNameType.Type, "int")] int idxCount, [NativeName(NativeNameType.Param, "vtx_count")] [NativeName(NativeNameType.Type, "int")] int vtxCount)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PrimUnreserveNative(@this, idxCount, vtxCount);
			}
		}

		/// <summary>		/// Write vertex with unique index		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_PrimVtx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PrimVtx([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PrimVtxNative(@this, pOS, uV, cOL);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PrimWriteIdx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PrimWriteIdx([NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImDrawIdx")] ushort iDX)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PrimWriteIdxNative(@this, iDX);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PrimWriteVtx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PrimWriteVtx([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uV, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PrimWriteVtxNative(@this, pOS, uV, cOL);
			}
		}

		/// <summary>		/// Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_PushClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PushClipRect([NativeName(NativeNameType.Param, "clip_rect_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 clipRectMin, [NativeName(NativeNameType.Param, "clip_rect_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 clipRectMax, [NativeName(NativeNameType.Param, "intersect_with_current_clip_rect")] [NativeName(NativeNameType.Type, "bool")] bool intersectWithCurrentClipRect)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PushClipRectNative(@this, clipRectMin, clipRectMax, intersectWithCurrentClipRect ? (byte)1 : (byte)0);
			}
		}

		/// <summary>		/// Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawList_PushClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PushClipRect([NativeName(NativeNameType.Param, "clip_rect_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 clipRectMin, [NativeName(NativeNameType.Param, "clip_rect_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 clipRectMax)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PushClipRectNative(@this, clipRectMin, clipRectMax, (byte)(0));
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PushClipRectFullScreen")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PushClipRectFullScreen()
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PushClipRectFullScreenNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawList_PushTextureID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void PushTextureID([NativeName(NativeNameType.Param, "texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID textureId)
		{
			fixed (ImDrawList* @this = &this)
			{
				ImGui.PushTextureIDNative(@this, textureId);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImDrawIdx")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImDrawIdx
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImDrawIdx*")]
		public unsafe ushort* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImDrawVert")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImDrawVert
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImDrawVert*")]
		public unsafe ImDrawVert* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImDrawVert")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawVert
	{
		[NativeName(NativeNameType.Field, "pos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Pos;
		[NativeName(NativeNameType.Field, "uv")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Uv;
		[NativeName(NativeNameType.Field, "col")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint Col;


	}

	/// <summary>
	/// Data shared between all ImDrawList instances<br/>
	/// You may want to create your own instance of this if you want to use ImDrawList completely without ImGui. In that case, watch out for future changes to this structure.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImDrawListSharedData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawListSharedData
	{
		/// <summary>
		/// UV of white pixel in the atlas<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TexUvWhitePixel")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 TexUvWhitePixel;

		/// <summary>
		/// Currentdefault font (optional, for simplified AddText overload)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Font")]
		[NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* Font;

		/// <summary>
		/// Currentdefault font size (optional, for simplified AddText overload)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FontSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float FontSize;

		/// <summary>
		/// Tessellation tolerance when using PathBezierCurveTo()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CurveTessellationTol")]
		[NativeName(NativeNameType.Type, "float")]
		public float CurveTessellationTol;

		/// <summary>
		/// Number of circle segments to use per pixel of radius for AddCircle() etc<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CircleSegmentMaxError")]
		[NativeName(NativeNameType.Type, "float")]
		public float CircleSegmentMaxError;

		/// <summary>
		/// Value for PushClipRectFullscreen()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ClipRectFullscreen")]
		[NativeName(NativeNameType.Type, "ImVec4")]
		public Vector4 ClipRectFullscreen;

		/// <summary>
		/// Initial flags at the beginning of the frame (it is possible to alter flags on a per-drawlist basis afterwards)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InitialFlags")]
		[NativeName(NativeNameType.Type, "ImDrawListFlags")]
		public ImDrawListFlags InitialFlags;

		[NativeName(NativeNameType.Field, "TempBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImVec2")]
		public ImVectorImVec2 TempBuffer;
		/// <summary>
		/// [Internal] Lookup tables Sample points on the quarter of the circle.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ArcFastVtx")]
		[NativeName(NativeNameType.Type, "ImVec2[48]")]
		public Vector2 ArcFastVtx_0;
		public Vector2 ArcFastVtx_1;
		public Vector2 ArcFastVtx_2;
		public Vector2 ArcFastVtx_3;
		public Vector2 ArcFastVtx_4;
		public Vector2 ArcFastVtx_5;
		public Vector2 ArcFastVtx_6;
		public Vector2 ArcFastVtx_7;
		public Vector2 ArcFastVtx_8;
		public Vector2 ArcFastVtx_9;
		public Vector2 ArcFastVtx_10;
		public Vector2 ArcFastVtx_11;
		public Vector2 ArcFastVtx_12;
		public Vector2 ArcFastVtx_13;
		public Vector2 ArcFastVtx_14;
		public Vector2 ArcFastVtx_15;
		public Vector2 ArcFastVtx_16;
		public Vector2 ArcFastVtx_17;
		public Vector2 ArcFastVtx_18;
		public Vector2 ArcFastVtx_19;
		public Vector2 ArcFastVtx_20;
		public Vector2 ArcFastVtx_21;
		public Vector2 ArcFastVtx_22;
		public Vector2 ArcFastVtx_23;
		public Vector2 ArcFastVtx_24;
		public Vector2 ArcFastVtx_25;
		public Vector2 ArcFastVtx_26;
		public Vector2 ArcFastVtx_27;
		public Vector2 ArcFastVtx_28;
		public Vector2 ArcFastVtx_29;
		public Vector2 ArcFastVtx_30;
		public Vector2 ArcFastVtx_31;
		public Vector2 ArcFastVtx_32;
		public Vector2 ArcFastVtx_33;
		public Vector2 ArcFastVtx_34;
		public Vector2 ArcFastVtx_35;
		public Vector2 ArcFastVtx_36;
		public Vector2 ArcFastVtx_37;
		public Vector2 ArcFastVtx_38;
		public Vector2 ArcFastVtx_39;
		public Vector2 ArcFastVtx_40;
		public Vector2 ArcFastVtx_41;
		public Vector2 ArcFastVtx_42;
		public Vector2 ArcFastVtx_43;
		public Vector2 ArcFastVtx_44;
		public Vector2 ArcFastVtx_45;
		public Vector2 ArcFastVtx_46;
		public Vector2 ArcFastVtx_47;

		/// <summary>
		/// Cutoff radius after which arc drawing will fallback to slower PathArcTo()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ArcFastRadiusCutoff")]
		[NativeName(NativeNameType.Type, "float")]
		public float ArcFastRadiusCutoff;

		/// <summary>
		/// Precomputed segment count for given radius before we calculate it dynamically (to avoid calculation overhead)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CircleSegmentCounts")]
		[NativeName(NativeNameType.Type, "ImU8[64]")]
		public byte CircleSegmentCounts_0;
		public byte CircleSegmentCounts_1;
		public byte CircleSegmentCounts_2;
		public byte CircleSegmentCounts_3;
		public byte CircleSegmentCounts_4;
		public byte CircleSegmentCounts_5;
		public byte CircleSegmentCounts_6;
		public byte CircleSegmentCounts_7;
		public byte CircleSegmentCounts_8;
		public byte CircleSegmentCounts_9;
		public byte CircleSegmentCounts_10;
		public byte CircleSegmentCounts_11;
		public byte CircleSegmentCounts_12;
		public byte CircleSegmentCounts_13;
		public byte CircleSegmentCounts_14;
		public byte CircleSegmentCounts_15;
		public byte CircleSegmentCounts_16;
		public byte CircleSegmentCounts_17;
		public byte CircleSegmentCounts_18;
		public byte CircleSegmentCounts_19;
		public byte CircleSegmentCounts_20;
		public byte CircleSegmentCounts_21;
		public byte CircleSegmentCounts_22;
		public byte CircleSegmentCounts_23;
		public byte CircleSegmentCounts_24;
		public byte CircleSegmentCounts_25;
		public byte CircleSegmentCounts_26;
		public byte CircleSegmentCounts_27;
		public byte CircleSegmentCounts_28;
		public byte CircleSegmentCounts_29;
		public byte CircleSegmentCounts_30;
		public byte CircleSegmentCounts_31;
		public byte CircleSegmentCounts_32;
		public byte CircleSegmentCounts_33;
		public byte CircleSegmentCounts_34;
		public byte CircleSegmentCounts_35;
		public byte CircleSegmentCounts_36;
		public byte CircleSegmentCounts_37;
		public byte CircleSegmentCounts_38;
		public byte CircleSegmentCounts_39;
		public byte CircleSegmentCounts_40;
		public byte CircleSegmentCounts_41;
		public byte CircleSegmentCounts_42;
		public byte CircleSegmentCounts_43;
		public byte CircleSegmentCounts_44;
		public byte CircleSegmentCounts_45;
		public byte CircleSegmentCounts_46;
		public byte CircleSegmentCounts_47;
		public byte CircleSegmentCounts_48;
		public byte CircleSegmentCounts_49;
		public byte CircleSegmentCounts_50;
		public byte CircleSegmentCounts_51;
		public byte CircleSegmentCounts_52;
		public byte CircleSegmentCounts_53;
		public byte CircleSegmentCounts_54;
		public byte CircleSegmentCounts_55;
		public byte CircleSegmentCounts_56;
		public byte CircleSegmentCounts_57;
		public byte CircleSegmentCounts_58;
		public byte CircleSegmentCounts_59;
		public byte CircleSegmentCounts_60;
		public byte CircleSegmentCounts_61;
		public byte CircleSegmentCounts_62;
		public byte CircleSegmentCounts_63;

		/// <summary>
		/// UV of anti-aliased lines in the atlas<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TexUvLines")]
		[NativeName(NativeNameType.Type, "const ImVec4*")]
		public unsafe Vector4* TexUvLines;




		public unsafe Span<Vector2> ArcFastVtx
		
		{
			get
			{
				fixed (Vector2* p = &this.ArcFastVtx_0)
				{
					return new Span<Vector2>(p, 48);
				}
			}
		}
		[NativeName(NativeNameType.Func, "ImDrawListSharedData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImDrawListSharedData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawListSharedData_SetCircleTessellationMaxError")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetCircleTessellationMaxError([NativeName(NativeNameType.Param, "max_error")] [NativeName(NativeNameType.Type, "float")] float maxError)
		{
			fixed (ImDrawListSharedData* @this = &this)
			{
				ImGui.SetCircleTessellationMaxErrorNative(@this, maxError);
			}
		}

	}

	/// <summary>
	/// Font runtime data and rendering<br/>
	/// ImFontAtlas automatically loads a default embedded font for you when you call GetTexDataAsAlpha8() or GetTexDataAsRGBA32().<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImFont")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFont
	{
		/// <summary>
		/// Members: Hot ~2024 bytes (for CalcTextSize) 12-16  out              Sparse. Glyphs-&gt;AdvanceX in a directly indexable way (cache-friendly for CalcTextSize functions which only this this info, and are often bottleneck in large UI).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IndexAdvanceX")]
		[NativeName(NativeNameType.Type, "ImVector_float")]
		public ImVectorFloat IndexAdvanceX;

		/// <summary>
		/// 4      out  = FallbackGlyph-&gt;AdvanceX<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FallbackAdvanceX")]
		[NativeName(NativeNameType.Type, "float")]
		public float FallbackAdvanceX;

		/// <summary>
		/// 4      in               Height of charactersline, set during loading (don't change after loading)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FontSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float FontSize;

		/// <summary>
		/// Members: Hot ~2840 bytes (for CalcTextSize + render loop) 12-16  out              Sparse. Index glyphs by Unicode code-point.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IndexLookup")]
		[NativeName(NativeNameType.Type, "ImVector_ImWchar")]
		public ImVectorImWchar IndexLookup;

		/// <summary>
		/// 12-16  out              All glyphs.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Glyphs")]
		[NativeName(NativeNameType.Type, "ImVector_ImFontGlyph")]
		public ImVectorImFontGlyph Glyphs;

		/// <summary>
		/// 4-8    out  = FindGlyph(FontFallbackChar)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FallbackGlyph")]
		[NativeName(NativeNameType.Type, "const ImFontGlyph*")]
		public unsafe ImFontGlyph* FallbackGlyph;

		/// <summary>
		/// Members: Cold ~3240 bytes 4-8    out              What we has been loaded into<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ContainerAtlas")]
		[NativeName(NativeNameType.Type, "ImFontAtlas*")]
		public unsafe ImFontAtlas* ContainerAtlas;

		/// <summary>
		/// 4-8    in               Pointer within ContainerAtlas-&gt;ConfigData<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigData")]
		[NativeName(NativeNameType.Type, "const ImFontConfig*")]
		public unsafe ImFontConfig* ConfigData;

		/// <summary>
		/// 2      in   ~ 1         Number of ImFontConfig involved in creating this font. Bigger than 1 when merging multiple font sources into one ImFont.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigDataCount")]
		[NativeName(NativeNameType.Type, "short")]
		public short ConfigDataCount;

		/// <summary>
		/// 2      out  = FFFD'?'  Character used if a glyph isn't found.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FallbackChar")]
		[NativeName(NativeNameType.Type, "ImWchar")]
		public char FallbackChar;

		/// <summary>
		/// 2      out  = '...''.' Character used for ellipsis rendering.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "EllipsisChar")]
		[NativeName(NativeNameType.Type, "ImWchar")]
		public char EllipsisChar;

		/// <summary>
		/// 1      out  1 or 3<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "EllipsisCharCount")]
		[NativeName(NativeNameType.Type, "short")]
		public short EllipsisCharCount;

		/// <summary>
		/// 4      out                Width<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "EllipsisWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float EllipsisWidth;

		/// <summary>
		/// 4      out                Step between characters when EllipsisCount &gt; 0<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "EllipsisCharStep")]
		[NativeName(NativeNameType.Type, "float")]
		public float EllipsisCharStep;

		/// <summary>
		/// 1      out<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DirtyLookupTables")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DirtyLookupTables;

		/// <summary>
		/// 4      in   = 1.f       Base font scale, multiplied by the per-window font scale which you can adjust with SetWindowFontScale()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Scale")]
		[NativeName(NativeNameType.Type, "float")]
		public float Scale;

		/// <summary>
		/// 4+4    out              Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Ascent")]
		[NativeName(NativeNameType.Type, "float")]
		public float Ascent;

		/// <summary>
		/// 4+4    out              Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Descent")]
		[NativeName(NativeNameType.Type, "float")]
		public float Descent;

		/// <summary>
		/// 4      out              Total surface in pixels to get an idea of the font rasterizationtexture cost (not exact, we approximate the cost of padding between glyphs)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MetricsTotalSurface")]
		[NativeName(NativeNameType.Type, "int")]
		public int MetricsTotalSurface;

		/// <summary>
		/// 2 bytes if ImWchar=ImWchar16, 34 bytes if ImWchar==ImWchar32. Store 1-bit for each block of 4K codepoints that has one active glyph. This is mainly used to facilitate iterations across all used codepoints.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Used4kPagesMap")]
		[NativeName(NativeNameType.Type, "ImU8[2]")]
		public byte Used4kPagesMap_0;
		public byte Used4kPagesMap_1;




		[NativeName(NativeNameType.Func, "ImFont_AddGlyph")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddGlyph([NativeName(NativeNameType.Param, "src_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* srcCfg, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c, [NativeName(NativeNameType.Param, "x0")] [NativeName(NativeNameType.Type, "float")] float x0, [NativeName(NativeNameType.Param, "y0")] [NativeName(NativeNameType.Type, "float")] float y0, [NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "float")] float x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "float")] float y1, [NativeName(NativeNameType.Param, "u0")] [NativeName(NativeNameType.Type, "float")] float u0, [NativeName(NativeNameType.Param, "v0")] [NativeName(NativeNameType.Type, "float")] float v0, [NativeName(NativeNameType.Param, "u1")] [NativeName(NativeNameType.Type, "float")] float u1, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "float")] float v1, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX)
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.AddGlyphNative(@this, srcCfg, c, x0, y0, x1, y1, u0, v0, u1, v1, advanceX);
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_AddGlyph")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddGlyph([NativeName(NativeNameType.Param, "src_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig srcCfg, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c, [NativeName(NativeNameType.Param, "x0")] [NativeName(NativeNameType.Type, "float")] float x0, [NativeName(NativeNameType.Param, "y0")] [NativeName(NativeNameType.Type, "float")] float y0, [NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "float")] float x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "float")] float y1, [NativeName(NativeNameType.Param, "u0")] [NativeName(NativeNameType.Type, "float")] float u0, [NativeName(NativeNameType.Param, "v0")] [NativeName(NativeNameType.Type, "float")] float v0, [NativeName(NativeNameType.Param, "u1")] [NativeName(NativeNameType.Type, "float")] float u1, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "float")] float v1, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImFontConfig* psrcCfg = &srcCfg)
				{
					ImGui.AddGlyphNative(@this, (ImFontConfig*)psrcCfg, c, x0, y0, x1, y1, u0, v0, u1, v1, advanceX);
				}
			}
		}

		/// <summary>		/// Makes 'dst' characterglyph points to 'src' characterglyph. Currently needs to be called AFTER fonts have been built.		/// </summary>		[NativeName(NativeNameType.Func, "ImFont_AddRemapChar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRemapChar([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "ImWchar")] char dST, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "ImWchar")] char sRC, [NativeName(NativeNameType.Param, "overwrite_dst")] [NativeName(NativeNameType.Type, "bool")] bool overwriteDst)
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.AddRemapCharNative(@this, dST, sRC, overwriteDst ? (byte)1 : (byte)0);
			}
		}

		/// <summary>		/// Makes 'dst' characterglyph points to 'src' characterglyph. Currently needs to be called AFTER fonts have been built.		/// </summary>		[NativeName(NativeNameType.Func, "ImFont_AddRemapChar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRemapChar([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "ImWchar")] char dST, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "ImWchar")] char sRC)
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.AddRemapCharNative(@this, dST, sRC, (byte)(1));
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_BuildLookupTable")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void BuildLookupTable()
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.BuildLookupTableNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* CalcWordWrapPositionA([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float sCALE, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				byte* ret = ImGui.CalcWordWrapPositionANative(@this, sCALE, tEXT, textEnd, wrapWidth);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string CalcWordWrapPositionAS([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float sCALE, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImGui.CalcWordWrapPositionANative(@this, sCALE, tEXT, textEnd, wrapWidth));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* CalcWordWrapPositionA([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float sCALE, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptEXT = &tEXT)
				{
					byte* ret = ImGui.CalcWordWrapPositionANative(@this, sCALE, (byte*)ptEXT, textEnd, wrapWidth);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string CalcWordWrapPositionAS([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float sCALE, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptEXT = &tEXT)
				{
					string ret = Utils.DecodeStringUTF8(ImGui.CalcWordWrapPositionANative(@this, sCALE, (byte*)ptEXT, textEnd, wrapWidth));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* CalcWordWrapPositionA([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float sCALE, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (tEXT != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(tEXT);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(tEXT, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = ImGui.CalcWordWrapPositionANative(@this, sCALE, pStr0, textEnd, wrapWidth);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string CalcWordWrapPositionAS([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float sCALE, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (tEXT != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(tEXT);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(tEXT, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(ImGui.CalcWordWrapPositionANative(@this, sCALE, pStr0, textEnd, wrapWidth));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* CalcWordWrapPositionA([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float sCALE, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					byte* ret = ImGui.CalcWordWrapPositionANative(@this, sCALE, tEXT, (byte*)ptextEnd, wrapWidth);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string CalcWordWrapPositionAS([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float sCALE, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					string ret = Utils.DecodeStringUTF8(ImGui.CalcWordWrapPositionANative(@this, sCALE, tEXT, (byte*)ptextEnd, wrapWidth));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* CalcWordWrapPositionA([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float sCALE, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = ImGui.CalcWordWrapPositionANative(@this, sCALE, tEXT, pStr0, wrapWidth);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string CalcWordWrapPositionAS([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float sCALE, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(ImGui.CalcWordWrapPositionANative(@this, sCALE, tEXT, pStr0, wrapWidth));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* CalcWordWrapPositionA([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float sCALE, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptEXT = &tEXT)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						byte* ret = ImGui.CalcWordWrapPositionANative(@this, sCALE, (byte*)ptEXT, (byte*)ptextEnd, wrapWidth);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string CalcWordWrapPositionAS([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float sCALE, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptEXT = &tEXT)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						string ret = Utils.DecodeStringUTF8(ImGui.CalcWordWrapPositionANative(@this, sCALE, (byte*)ptEXT, (byte*)ptextEnd, wrapWidth));
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* CalcWordWrapPositionA([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float sCALE, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (tEXT != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(tEXT);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(tEXT, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* ret = ImGui.CalcWordWrapPositionANative(@this, sCALE, pStr0, pStr1, wrapWidth);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_CalcWordWrapPositionA")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string CalcWordWrapPositionAS([NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float sCALE, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (tEXT != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(tEXT);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(tEXT, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				string ret = Utils.DecodeStringUTF8(ImGui.CalcWordWrapPositionANative(@this, sCALE, pStr0, pStr1, wrapWidth));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_ClearOutputData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearOutputData()
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.ClearOutputDataNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_FindGlyph")]
		[return: NativeName(NativeNameType.Type, "const ImFontGlyph*")]
		public unsafe ImFontGlyph* FindGlyph([NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c)
		{
			fixed (ImFont* @this = &this)
			{
				ImFontGlyph* ret = ImGui.FindGlyphNative(@this, c);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_FindGlyphNoFallback")]
		[return: NativeName(NativeNameType.Type, "const ImFontGlyph*")]
		public unsafe ImFontGlyph* FindGlyphNoFallback([NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c)
		{
			fixed (ImFont* @this = &this)
			{
				ImFontGlyph* ret = ImGui.FindGlyphNoFallbackNative(@this, c);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_GetCharAdvance")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float GetCharAdvance([NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c)
		{
			fixed (ImFont* @this = &this)
			{
				float ret = ImGui.GetCharAdvanceNative(@this, c);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_GetDebugName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* GetDebugName()
		{
			fixed (ImFont* @this = &this)
			{
				byte* ret = ImGui.GetDebugNameNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_GetDebugName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string GetDebugNameS()
		{
			fixed (ImFont* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImGui.GetDebugNameNative(@this));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_GrowIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GrowIndex([NativeName(NativeNameType.Param, "new_size")] [NativeName(NativeNameType.Type, "int")] int newSize)
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.GrowIndexNative(@this, newSize);
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_IsGlyphRangeUnused")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsGlyphRangeUnused([NativeName(NativeNameType.Param, "c_begin")] [NativeName(NativeNameType.Type, "unsigned int")] uint cBegin, [NativeName(NativeNameType.Param, "c_last")] [NativeName(NativeNameType.Type, "unsigned int")] uint cLast)
		{
			fixed (ImFont* @this = &this)
			{
				byte ret = ImGui.IsGlyphRangeUnusedNative(@this, cBegin, cLast);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_IsLoaded")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsLoaded()
		{
			fixed (ImFont* @this = &this)
			{
				byte ret = ImGui.IsLoadedNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderChar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderChar([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c)
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.RenderCharNative(@this, drawList, sIZE, pOS, cOL, c);
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderChar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderChar([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGui.RenderCharNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, c);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, textBegin, textEnd, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, textBegin, textEnd, wrapWidth, (byte)(0));
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, textBegin, textEnd, (float)(0.0f), (byte)(0));
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, textBegin, textEnd, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, textBegin, textEnd, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, textBegin, textEnd, wrapWidth, (byte)(0));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, textBegin, textEnd, (float)(0.0f), (byte)(0));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, textBegin, textEnd, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, (byte*)ptextBegin, textEnd, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, (byte*)ptextBegin, textEnd, wrapWidth, (byte)(0));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, (byte*)ptextBegin, textEnd, (float)(0.0f), (byte)(0));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, (byte*)ptextBegin, textEnd, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, pStr0, textEnd, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, pStr0, textEnd, wrapWidth, (byte)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, pStr0, textEnd, (float)(0.0f), (byte)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, pStr0, textEnd, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, (byte*)ptextBegin, textEnd, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, (byte*)ptextBegin, textEnd, wrapWidth, (byte)(0));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, (byte*)ptextBegin, textEnd, (float)(0.0f), (byte)(0));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, (byte*)ptextBegin, textEnd, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, pStr0, textEnd, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, pStr0, textEnd, wrapWidth, (byte)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, pStr0, textEnd, (float)(0.0f), (byte)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, pStr0, textEnd, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, textBegin, (byte*)ptextEnd, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, textBegin, (byte*)ptextEnd, wrapWidth, (byte)(0));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, textBegin, (byte*)ptextEnd, (float)(0.0f), (byte)(0));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, textBegin, (byte*)ptextEnd, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, textBegin, pStr0, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, textBegin, pStr0, wrapWidth, (byte)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, textBegin, pStr0, (float)(0.0f), (byte)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, textBegin, pStr0, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, textBegin, (byte*)ptextEnd, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, textBegin, (byte*)ptextEnd, wrapWidth, (byte)(0));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, textBegin, (byte*)ptextEnd, (float)(0.0f), (byte)(0));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, textBegin, (byte*)ptextEnd, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textEnd != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, textBegin, pStr0, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textEnd != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, textBegin, pStr0, wrapWidth, (byte)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textEnd != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, textBegin, pStr0, (float)(0.0f), (byte)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textEnd != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, textBegin, pStr0, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, (byte)(0));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), (byte)(0));
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, pStr0, pStr1, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, pStr0, pStr1, wrapWidth, (byte)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, pStr0, pStr1, (float)(0.0f), (byte)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.RenderTextNative(@this, drawList, sIZE, pOS, cOL, clipRect, pStr0, pStr1, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (byte* ptextEnd = &textEnd)
						{
							ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (byte* ptextEnd = &textEnd)
						{
							ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, (byte)(0));
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (byte* ptextEnd = &textEnd)
						{
							ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), (byte)(0));
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* ptextBegin = &textBegin)
					{
						fixed (byte* ptextEnd = &textEnd)
						{
							ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (textEnd != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, pStr0, pStr1, wrapWidth, cpuFineClip ? (byte)1 : (byte)0);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (textEnd != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, pStr0, pStr1, wrapWidth, (byte)(0));
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (textEnd != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, pStr0, pStr1, (float)(0.0f), (byte)(0));
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_RenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void RenderText([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float sIZE, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pOS, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint cOL, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 clipRect, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "cpu_fine_clip")] [NativeName(NativeNameType.Type, "bool")] bool cpuFineClip)
		{
			fixed (ImFont* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (textBegin != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(textBegin);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (textEnd != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(textEnd);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					ImGui.RenderTextNative(@this, (ImDrawList*)pdrawList, sIZE, pOS, cOL, clipRect, pStr0, pStr1, (float)(0.0f), cpuFineClip ? (byte)1 : (byte)0);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFont_SetGlyphVisible")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetGlyphVisible([NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c, [NativeName(NativeNameType.Param, "visible")] [NativeName(NativeNameType.Type, "bool")] bool vISIBLE)
		{
			fixed (ImFont* @this = &this)
			{
				ImGui.SetGlyphVisibleNative(@this, c, vISIBLE ? (byte)1 : (byte)0);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_float")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorFloat
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "float*")]
		public unsafe float* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImWchar")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImWchar
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImWchar*")]
		public unsafe char* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImFontGlyph")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImFontGlyph
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImFontGlyph*")]
		public unsafe ImFontGlyph* Data;


	}

	/// <summary>
	/// Hold rendering data for one glyph.<br/>
	/// (Note: some language parsers may fail to convert the 31+1 bitfield members, in this case maybe drop store a single u32 or we can rework this)<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImFontGlyph")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontGlyph
	{
		/// <summary>
		/// Flag to indicate glyph is colored and should generally ignore tinting (make it usable with no shift on little-endian as this is used in loops)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Colored")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Colored;

		/// <summary>
		/// Flag to indicate glyph has no visible pixels (e.g. space). Allow early out when rendering.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Visible")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Visible;

		/// <summary>
		/// 0x0000..0x10FFFF<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Codepoint")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Codepoint;

		/// <summary>
		/// Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "AdvanceX")]
		[NativeName(NativeNameType.Type, "float")]
		public float AdvanceX;

		/// <summary>
		/// Glyph corners<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "X0")]
		[NativeName(NativeNameType.Type, "float")]
		public float X0;

		/// <summary>
		/// Glyph corners<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Y0")]
		[NativeName(NativeNameType.Type, "float")]
		public float Y0;

		/// <summary>
		/// Glyph corners<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "X1")]
		[NativeName(NativeNameType.Type, "float")]
		public float X1;

		/// <summary>
		/// Glyph corners<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Y1")]
		[NativeName(NativeNameType.Type, "float")]
		public float Y1;

		/// <summary>
		/// Texture coordinates<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "U0")]
		[NativeName(NativeNameType.Type, "float")]
		public float U0;

		/// <summary>
		/// Texture coordinates<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "V0")]
		[NativeName(NativeNameType.Type, "float")]
		public float V0;

		/// <summary>
		/// Texture coordinates<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "U1")]
		[NativeName(NativeNameType.Type, "float")]
		public float U1;

		/// <summary>
		/// Texture coordinates<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "V1")]
		[NativeName(NativeNameType.Type, "float")]
		public float V1;



	}

	/// <summary>
	/// Load and rasterize multiple TTFOTF fonts into a same texture. The font atlas will build a single texture holding:<br/>
	/// - One or more fonts.<br/>
	/// - Custom graphics data needed to render the shapes needed by Dear ImGui.<br/>
	/// - Mouse cursor shapes for software cursor rendering (unless setting 'Flags |= ImFontAtlasFlags_NoMouseCursors' in the font atlas).<br/>
	/// It is the user-code responsibility to setupbuild the atlas, then upload the pixel data into a texture accessible by your graphics api.<br/>
	/// - Optionally, call any of the AddFont*** functions. If you don't call any, the default font embedded in the code will be loaded for you.<br/>
	/// - Call GetTexDataAsAlpha8() or GetTexDataAsRGBA32() to build and retrieve pixels data.<br/>
	/// - Upload the pixels data into a texture within your graphics system (see imgui_impl_xxxx.cpp examples)<br/>
	/// - Call SetTexID(my_tex_id); and pass the pointeridentifier to your texture in a format natural to your graphics API.<br/>
	/// This value will be passed back to you during rendering to identify the texture. Read FAQ entry about ImTextureID for more details.<br/>
	/// Common pitfalls:<br/>
	/// - If you pass a 'glyph_ranges' array to AddFont*** functions, you need to make sure that your array persist up until the<br/>
	/// atlas is build (when calling GetTexData*** or Build()). We only copy the pointer, not the data.<br/>
	/// - Important: By default, AddFontFromMemoryTTF() takes ownership of the data. Even though we are not writing to it, we will free the pointer on destruction.<br/>
	/// You can set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed,<br/>
	/// - Even though many functions are suffixed with "TTF", OTF data is supported just as well.<br/>
	/// - This is an old API and it is currently awkward for those and various other reasons! We will address them in the future!<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImFontAtlas")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontAtlas
	{
		/// <summary>
		/// Build flags (see ImFontAtlasFlags_)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImFontAtlasFlags")]
		public ImFontAtlasFlags Flags;

		/// <summary>
		/// User data to refer to the texture once it has been uploaded to user's graphic systems. It is passed back to you during rendering via the ImDrawCmd structure.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TexID")]
		[NativeName(NativeNameType.Type, "ImTextureID")]
		public ImTextureID TexID;

		/// <summary>
		/// Texture width desired by user before Build(). Must be a power-of-two. If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TexDesiredWidth")]
		[NativeName(NativeNameType.Type, "int")]
		public int TexDesiredWidth;

		/// <summary>
		/// Padding between glyphs within texture in pixels. Defaults to 1. If your rendering method doesn't rely on bilinear filtering you may set this to 0 (will also need to set AntiAliasedLinesUseTex = false).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TexGlyphPadding")]
		[NativeName(NativeNameType.Type, "int")]
		public int TexGlyphPadding;

		/// <summary>
		/// Marked as Locked by ImGui::NewFrame() so attempt to modify the atlas will assert.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Locked")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Locked;

		/// <summary>
		/// Store your own atlas related user-data (if e.g. you have multiple font atlas).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "UserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserData;

		/// <summary>
		/// [Internal]<br/>
		/// NB: Access texture data via GetTexData*() calls! Which will setup a default font for you. Set when texture was built matching current font input<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TexReady")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte TexReady;

		/// <summary>
		/// Tell whether our texture data is known to use colors (rather than just alpha channel), in order to help backend select a format.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TexPixelsUseColors")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte TexPixelsUseColors;

		/// <summary>
		/// 1 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TexPixelsAlpha8")]
		[NativeName(NativeNameType.Type, "unsigned char*")]
		public unsafe byte* TexPixelsAlpha8;

		/// <summary>
		/// 4 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight * 4<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TexPixelsRGBA32")]
		[NativeName(NativeNameType.Type, "unsigned int*")]
		public unsafe uint* TexPixelsRGBA32;

		/// <summary>
		/// Texture width calculated during Build().<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TexWidth")]
		[NativeName(NativeNameType.Type, "int")]
		public int TexWidth;

		/// <summary>
		/// Texture height calculated during Build().<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TexHeight")]
		[NativeName(NativeNameType.Type, "int")]
		public int TexHeight;

		/// <summary>
		/// = (1.0fTexWidth, 1.0fTexHeight)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TexUvScale")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 TexUvScale;

		/// <summary>
		/// Texture coordinates to a white pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TexUvWhitePixel")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 TexUvWhitePixel;

		/// <summary>
		/// Hold all the fonts returned by AddFont*. Fonts[0] is the default font upon calling ImGui::NewFrame(), use ImGui::PushFont()PopFont() to change the current font.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Fonts")]
		[NativeName(NativeNameType.Type, "ImVector_ImFontPtr")]
		public ImVectorImFontPtr Fonts;

		/// <summary>
		/// Rectangles for packing custom texture data into the atlas.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CustomRects")]
		[NativeName(NativeNameType.Type, "ImVector_ImFontAtlasCustomRect")]
		public ImVectorImFontAtlasCustomRect CustomRects;

		/// <summary>
		/// Configuration data<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigData")]
		[NativeName(NativeNameType.Type, "ImVector_ImFontConfig")]
		public ImVectorImFontConfig ConfigData;

		/// <summary>
		/// UVs for baked anti-aliased lines<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TexUvLines")]
		[NativeName(NativeNameType.Type, "ImVec4[64]")]
		public Vector4 TexUvLines_0;
		public Vector4 TexUvLines_1;
		public Vector4 TexUvLines_2;
		public Vector4 TexUvLines_3;
		public Vector4 TexUvLines_4;
		public Vector4 TexUvLines_5;
		public Vector4 TexUvLines_6;
		public Vector4 TexUvLines_7;
		public Vector4 TexUvLines_8;
		public Vector4 TexUvLines_9;
		public Vector4 TexUvLines_10;
		public Vector4 TexUvLines_11;
		public Vector4 TexUvLines_12;
		public Vector4 TexUvLines_13;
		public Vector4 TexUvLines_14;
		public Vector4 TexUvLines_15;
		public Vector4 TexUvLines_16;
		public Vector4 TexUvLines_17;
		public Vector4 TexUvLines_18;
		public Vector4 TexUvLines_19;
		public Vector4 TexUvLines_20;
		public Vector4 TexUvLines_21;
		public Vector4 TexUvLines_22;
		public Vector4 TexUvLines_23;
		public Vector4 TexUvLines_24;
		public Vector4 TexUvLines_25;
		public Vector4 TexUvLines_26;
		public Vector4 TexUvLines_27;
		public Vector4 TexUvLines_28;
		public Vector4 TexUvLines_29;
		public Vector4 TexUvLines_30;
		public Vector4 TexUvLines_31;
		public Vector4 TexUvLines_32;
		public Vector4 TexUvLines_33;
		public Vector4 TexUvLines_34;
		public Vector4 TexUvLines_35;
		public Vector4 TexUvLines_36;
		public Vector4 TexUvLines_37;
		public Vector4 TexUvLines_38;
		public Vector4 TexUvLines_39;
		public Vector4 TexUvLines_40;
		public Vector4 TexUvLines_41;
		public Vector4 TexUvLines_42;
		public Vector4 TexUvLines_43;
		public Vector4 TexUvLines_44;
		public Vector4 TexUvLines_45;
		public Vector4 TexUvLines_46;
		public Vector4 TexUvLines_47;
		public Vector4 TexUvLines_48;
		public Vector4 TexUvLines_49;
		public Vector4 TexUvLines_50;
		public Vector4 TexUvLines_51;
		public Vector4 TexUvLines_52;
		public Vector4 TexUvLines_53;
		public Vector4 TexUvLines_54;
		public Vector4 TexUvLines_55;
		public Vector4 TexUvLines_56;
		public Vector4 TexUvLines_57;
		public Vector4 TexUvLines_58;
		public Vector4 TexUvLines_59;
		public Vector4 TexUvLines_60;
		public Vector4 TexUvLines_61;
		public Vector4 TexUvLines_62;
		public Vector4 TexUvLines_63;

		/// <summary>
		/// [Internal] Font builder Opaque interface to a font builder (default to stb_truetype, can be changed to use FreeType by defining IMGUI_ENABLE_FREETYPE).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FontBuilderIO")]
		[NativeName(NativeNameType.Type, "const ImFontBuilderIO*")]
		public unsafe ImFontBuilderIO* FontBuilderIO;

		/// <summary>
		/// Shared flags (for all fonts) for custom font builder. THIS IS BUILD IMPLEMENTATION DEPENDENT. Per-font override is also available in ImFontConfig.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FontBuilderFlags")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint FontBuilderFlags;

		/// <summary>
		/// [Internal] Packing data Custom texture rectangle ID for white pixel and mouse cursors<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PackIdMouseCursors")]
		[NativeName(NativeNameType.Type, "int")]
		public int PackIdMouseCursors;

		/// <summary>
		/// Custom texture rectangle ID for baked anti-aliased lines<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PackIdLines")]
		[NativeName(NativeNameType.Type, "int")]
		public int PackIdLines;




		public unsafe Span<Vector4> TexUvLines
		
		{
			get
			{
				fixed (Vector4* p = &this.TexUvLines_0)
				{
					return new Span<Vector4>(p, 64);
				}
			}
		}
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int AddCustomRectFontGlyph([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char iD, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int wIDTH, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int hEIGHT, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 oFFSET)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				int ret = ImGui.AddCustomRectFontGlyphNative(@this, fONT, iD, wIDTH, hEIGHT, advanceX, oFFSET);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int AddCustomRectFontGlyph([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* fONT, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char iD, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int wIDTH, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int hEIGHT, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				int ret = ImGui.AddCustomRectFontGlyphNative(@this, fONT, iD, wIDTH, hEIGHT, advanceX, (Vector2)(new Vector2(0,0)));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int AddCustomRectFontGlyph([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char iD, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int wIDTH, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int hEIGHT, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 oFFSET)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					int ret = ImGui.AddCustomRectFontGlyphNative(@this, (ImFont*)pfONT, iD, wIDTH, hEIGHT, advanceX, oFFSET);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int AddCustomRectFontGlyph([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ref ImFont fONT, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char iD, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int wIDTH, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int hEIGHT, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFont* pfONT = &fONT)
				{
					int ret = ImGui.AddCustomRectFontGlyphNative(@this, (ImFont*)pfONT, iD, wIDTH, hEIGHT, advanceX, (Vector2)(new Vector2(0,0)));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectRegular")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int AddCustomRectRegular([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int wIDTH, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int hEIGHT)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				int ret = ImGui.AddCustomRectRegularNative(@this, wIDTH, hEIGHT);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFont")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFont([NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontNative(@this, fontCfg);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFont")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFont([NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontNative(@this, (ImFontConfig*)pfontCfg);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontDefault")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontDefault([NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontDefaultNative(@this, fontCfg);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontDefault")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontDefault()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontDefaultNative(@this, (ImFontConfig*)(default));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontDefault")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontDefault([NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontDefaultNative(@this, (ImFontConfig*)pfontCfg);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, fILENAME, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, fILENAME, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, fILENAME, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, fILENAME, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfILENAME = &fILENAME)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfILENAME, sizePixels, fontCfg, glyphRanges);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfILENAME = &fILENAME)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfILENAME, sizePixels, fontCfg, (char*)(default));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfILENAME = &fILENAME)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfILENAME, sizePixels, (ImFontConfig*)(default), (char*)(default));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfILENAME = &fILENAME)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfILENAME, sizePixels, (ImFontConfig*)(default), glyphRanges);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fILENAME != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fILENAME);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fILENAME, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, fontCfg, glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fILENAME != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fILENAME);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fILENAME, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, fontCfg, (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fILENAME != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fILENAME);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fILENAME, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, (ImFontConfig*)(default), (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fILENAME != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fILENAME);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fILENAME, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, (ImFontConfig*)(default), glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, fILENAME, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, fILENAME, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfILENAME = &fILENAME)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfILENAME, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfILENAME = &fILENAME)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfILENAME, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fILENAME != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fILENAME);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fILENAME, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fILENAME != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fILENAME);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fILENAME, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, fILENAME, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, fILENAME, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfILENAME = &fILENAME)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfILENAME, sizePixels, fontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfILENAME = &fILENAME)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfILENAME, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fILENAME != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fILENAME);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fILENAME, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, fontCfg, (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fILENAME != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fILENAME);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fILENAME, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, fILENAME, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfILENAME = &fILENAME)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						fixed (char* pglyphRanges = &glyphRanges)
						{
							ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfILENAME, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string fILENAME, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fILENAME != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fILENAME);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fILENAME, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDataBase85, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDataBase85, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDataBase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDataBase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDataBase85 = &compressedFontDataBase85)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDataBase85, sizePixels, fontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDataBase85 = &compressedFontDataBase85)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDataBase85, sizePixels, fontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDataBase85 = &compressedFontDataBase85)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDataBase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDataBase85 = &compressedFontDataBase85)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDataBase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDataBase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDataBase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDataBase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, fontCfg, glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDataBase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDataBase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDataBase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, fontCfg, (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDataBase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDataBase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDataBase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, (ImFontConfig*)(default), (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDataBase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDataBase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDataBase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, (ImFontConfig*)(default), glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDataBase85, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDataBase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDataBase85 = &compressedFontDataBase85)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDataBase85, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDataBase85 = &compressedFontDataBase85)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDataBase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
						return ret;
					}
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDataBase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDataBase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDataBase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDataBase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDataBase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDataBase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDataBase85, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDataBase85, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDataBase85 = &compressedFontDataBase85)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDataBase85, sizePixels, fontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDataBase85 = &compressedFontDataBase85)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDataBase85, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDataBase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDataBase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDataBase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, fontCfg, (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDataBase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDataBase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDataBase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDataBase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDataBase85 = &compressedFontDataBase85)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						fixed (char* pglyphRanges = &glyphRanges)
						{
							ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDataBase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDataBase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDataBase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDataBase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDataBase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontSize, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontSize, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontSize, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontSize, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontSize, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontSize, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontSize, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontSize, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontSize, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontSize, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontSize, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontSize, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontSize, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontSize, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_size")] [NativeName(NativeNameType.Type, "int")] int fontSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Build pixels data. This is called automatically for you by the GetTexData*** functions.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_Build")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Build()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte ret = ImGui.BuildNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ImFontAtlasCustomRect* rECT, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.CalcCustomRectUVNative(@this, rECT, outUvMin, outUvMax);
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ref ImFontAtlasCustomRect rECT, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontAtlasCustomRect* prECT = &rECT)
				{
					ImGui.CalcCustomRectUVNative(@this, (ImFontAtlasCustomRect*)prECT, outUvMin, outUvMax);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ImFontAtlasCustomRect* rECT, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvMin = &outUvMin)
				{
					ImGui.CalcCustomRectUVNative(@this, rECT, (Vector2*)poutUvMin, outUvMax);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ref ImFontAtlasCustomRect rECT, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontAtlasCustomRect* prECT = &rECT)
				{
					fixed (Vector2* poutUvMin = &outUvMin)
					{
						ImGui.CalcCustomRectUVNative(@this, (ImFontAtlasCustomRect*)prECT, (Vector2*)poutUvMin, outUvMax);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ImFontAtlasCustomRect* rECT, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvMax = &outUvMax)
				{
					ImGui.CalcCustomRectUVNative(@this, rECT, outUvMin, (Vector2*)poutUvMax);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ref ImFontAtlasCustomRect rECT, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontAtlasCustomRect* prECT = &rECT)
				{
					fixed (Vector2* poutUvMax = &outUvMax)
					{
						ImGui.CalcCustomRectUVNative(@this, (ImFontAtlasCustomRect*)prECT, outUvMin, (Vector2*)poutUvMax);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ImFontAtlasCustomRect* rECT, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvMin = &outUvMin)
				{
					fixed (Vector2* poutUvMax = &outUvMax)
					{
						ImGui.CalcCustomRectUVNative(@this, rECT, (Vector2*)poutUvMin, (Vector2*)poutUvMax);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ref ImFontAtlasCustomRect rECT, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontAtlasCustomRect* prECT = &rECT)
				{
					fixed (Vector2* poutUvMin = &outUvMin)
					{
						fixed (Vector2* poutUvMax = &outUvMax)
						{
							ImGui.CalcCustomRectUVNative(@this, (ImFontAtlasCustomRect*)prECT, (Vector2*)poutUvMin, (Vector2*)poutUvMax);
						}
					}
				}
			}
		}

		/// <summary>		/// Clear all input and output.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		/// <summary>		/// Clear output font data (glyphs storage, UV coordinates).		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_ClearFonts")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearFonts()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.ClearFontsNative(@this);
			}
		}

		/// <summary>		/// Clear input data (all ImFontConfig structures including sizes, TTF data, glyph ranges, etc.) = all the data used to build the texture and fonts.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_ClearInputData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearInputData()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.ClearInputDataNative(@this);
			}
		}

		/// <summary>		/// Clear output texture data (CPU side). Saves RAM once the texture has been copied to graphics memory.		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_ClearTexData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearTexData()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.ClearTexDataNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetCustomRectByIndex")]
		[return: NativeName(NativeNameType.Type, "ImFontAtlasCustomRect*")]
		public unsafe ImFontAtlasCustomRect* GetCustomRectByIndex([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "int")] int iNDEX)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFontAtlasCustomRect* ret = ImGui.GetCustomRectByIndexNative(@this, iNDEX);
				return ret;
			}
		}

		/// <summary>		/// Default + Half-Width + Japanese HiraganaKatakana + full set of about 21000 CJK Unified Ideographs		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesChineseFull")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesChineseFull()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesChineseFullNative(@this);
				return ret;
			}
		}

		/// <summary>		/// Default + Half-Width + Japanese HiraganaKatakana + set of 2500 CJK Unified Ideographs for common simplified Chinese		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesChineseSimplifiedCommon()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesChineseSimplifiedCommonNative(@this);
				return ret;
			}
		}

		/// <summary>		/// Default + about 400 Cyrillic characters		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesCyrillic")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesCyrillic()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesCyrillicNative(@this);
				return ret;
			}
		}

		/// <summary>		/// Basic Latin, Extended Latin		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesDefault")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesDefault()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesDefaultNative(@this);
				return ret;
			}
		}

		/// <summary>		/// Default + Greek and Coptic		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesGreek")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesGreek()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesGreekNative(@this);
				return ret;
			}
		}

		/// <summary>		/// Default + Hiragana, Katakana, Half-Width, Selection of 2999 Ideographs		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesJapanese")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesJapanese()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesJapaneseNative(@this);
				return ret;
			}
		}

		/// <summary>		/// Default + Korean characters		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesKorean")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesKorean()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesKoreanNative(@this);
				return ret;
			}
		}

		/// <summary>		/// Default + Thai characters		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesThai")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesThai()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesThaiNative(@this);
				return ret;
			}
		}

		/// <summary>		/// Default + Vietnamese characters		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesVietnamese")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesVietnamese()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesVietnameseNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cURSOR, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte ret = ImGui.GetMouseCursorTexDataNative(@this, cURSOR, outOffset, outSize, outUvBorder, outUvFill);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cURSOR, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					byte ret = ImGui.GetMouseCursorTexDataNative(@this, cURSOR, (Vector2*)poutOffset, outSize, outUvBorder, outUvFill);
					return ret != 0;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cURSOR, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					byte ret = ImGui.GetMouseCursorTexDataNative(@this, cURSOR, outOffset, (Vector2*)poutSize, outUvBorder, outUvFill);
					return ret != 0;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cURSOR, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cURSOR, (Vector2*)poutOffset, (Vector2*)poutSize, outUvBorder, outUvFill);
						return ret != 0;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cURSOR, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvBorder = &outUvBorder)
				{
					byte ret = ImGui.GetMouseCursorTexDataNative(@this, cURSOR, outOffset, outSize, (Vector2*)poutUvBorder, outUvFill);
					return ret != 0;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cURSOR, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cURSOR, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, outUvFill);
						return ret != 0;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cURSOR, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cURSOR, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill);
						return ret != 0;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cURSOR, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvBorder = &outUvBorder)
						{
							byte ret = ImGui.GetMouseCursorTexDataNative(@this, cURSOR, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill);
							return ret != 0;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cURSOR, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvFill = &outUvFill)
				{
					byte ret = ImGui.GetMouseCursorTexDataNative(@this, cURSOR, outOffset, outSize, outUvBorder, (Vector2*)poutUvFill);
					return ret != 0;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cURSOR, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cURSOR, (Vector2*)poutOffset, outSize, outUvBorder, (Vector2*)poutUvFill);
						return ret != 0;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cURSOR, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cURSOR, outOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill);
						return ret != 0;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cURSOR, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvFill = &outUvFill)
						{
							byte ret = ImGui.GetMouseCursorTexDataNative(@this, cURSOR, (Vector2*)poutOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill);
							return ret != 0;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cURSOR, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvBorder = &outUvBorder)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cURSOR, outOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill);
						return ret != 0;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cURSOR, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						fixed (Vector2* poutUvFill = &outUvFill)
						{
							byte ret = ImGui.GetMouseCursorTexDataNative(@this, cURSOR, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill);
							return ret != 0;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cURSOR, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						fixed (Vector2* poutUvFill = &outUvFill)
						{
							byte ret = ImGui.GetMouseCursorTexDataNative(@this, cURSOR, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill);
							return ret != 0;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cURSOR, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvBorder = &outUvBorder)
						{
							fixed (Vector2* poutUvFill = &outUvFill)
							{
								byte ret = ImGui.GetMouseCursorTexDataNative(@this, cURSOR, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.GetTexDataAsAlpha8Native(@this, outPixels, outWidth, outHeight, outBytesPerPixel);
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.GetTexDataAsAlpha8Native(@this, outPixels, outWidth, outHeight, (int*)(default));
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, outWidth, outHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, outWidth, outHeight, (int*)(default));
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, outPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, outPixels, (int*)poutWidth, outHeight, (int*)(default));
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, outPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, outPixels, outWidth, (int*)poutHeight, (int*)(default));
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, outPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
						}
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, outPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, outPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutHeight = &outHeight)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, outPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGui.GetTexDataAsAlpha8Native(@this, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>		/// 1 byte per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							fixed (int* poutBytesPerPixel = &outBytesPerPixel)
							{
								ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
							}
						}
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.GetTexDataAsRGBA32Native(@this, outPixels, outWidth, outHeight, outBytesPerPixel);
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.GetTexDataAsRGBA32Native(@this, outPixels, outWidth, outHeight, (int*)(default));
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, outWidth, outHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, outWidth, outHeight, (int*)(default));
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, outPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, outPixels, (int*)poutWidth, outHeight, (int*)(default));
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, outPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, outPixels, outWidth, (int*)poutHeight, (int*)(default));
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, outPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
						}
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, outPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, outPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutHeight = &outHeight)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, outPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGui.GetTexDataAsRGBA32Native(@this, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>		/// 4 bytes-per-pixel		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							fixed (int* poutBytesPerPixel = &outBytesPerPixel)
							{
								ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Bit ambiguous: used to detect when user didn't build texture but effectively we should check TexID != 0 except that would be backend dependent...		/// </summary>		[NativeName(NativeNameType.Func, "ImFontAtlas_IsBuilt")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsBuilt()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte ret = ImGui.IsBuiltNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlas_SetTexID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetTexID([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID iD)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.SetTexIDNative(@this, iD);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImFontPtr")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImFontPtr
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImFont**")]
		public unsafe ImFont** Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImFontAtlasCustomRect")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImFontAtlasCustomRect
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImFontAtlasCustomRect*")]
		public unsafe ImFontAtlasCustomRect* Data;


	}

	/// <summary>
	/// See ImFontAtlas::AddCustomRectXXX functions.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImFontAtlasCustomRect")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontAtlasCustomRect
	{
		/// <summary>
		/// Input     Desired rectangle dimension<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "unsigned short")]
		public ushort Width;

		/// <summary>
		/// Input     Desired rectangle dimension<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Height")]
		[NativeName(NativeNameType.Type, "unsigned short")]
		public ushort Height;

		/// <summary>
		/// Output    Packed position in Atlas<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "X")]
		[NativeName(NativeNameType.Type, "unsigned short")]
		public ushort X;

		/// <summary>
		/// Output    Packed position in Atlas<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Y")]
		[NativeName(NativeNameType.Type, "unsigned short")]
		public ushort Y;

		/// <summary>
		/// Input     For custom font glyphs only (ID &lt; 0x110000)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "GlyphID")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint GlyphID;

		/// <summary>
		/// Input     For custom font glyphs only: glyph xadvance<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "GlyphAdvanceX")]
		[NativeName(NativeNameType.Type, "float")]
		public float GlyphAdvanceX;

		/// <summary>
		/// Input     For custom font glyphs only: glyph display offset<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "GlyphOffset")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 GlyphOffset;

		/// <summary>
		/// Input     For custom font glyphs only: target font<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Font")]
		[NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* Font;




		[NativeName(NativeNameType.Func, "ImFontAtlasCustomRect_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImFontAtlasCustomRect* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImFontAtlasCustomRect_IsPacked")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsPacked()
		{
			fixed (ImFontAtlasCustomRect* @this = &this)
			{
				byte ret = ImGui.IsPackedNative(@this);
				return ret != 0;
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImFontConfig")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImFontConfig
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImFontConfig*")]
		public unsafe ImFontConfig* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImFontConfig")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontConfig
	{
		/// <summary>
		/// TTFOTF data<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FontData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* FontData;

		/// <summary>
		/// TTFOTF data size<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FontDataSize")]
		[NativeName(NativeNameType.Type, "int")]
		public int FontDataSize;

		/// <summary>
		/// true      TTFOTF data ownership taken by the container ImFontAtlas (will delete memory itself).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FontDataOwnedByAtlas")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte FontDataOwnedByAtlas;

		/// <summary>
		/// 0         Index of font within TTFOTF file<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FontNo")]
		[NativeName(NativeNameType.Type, "int")]
		public int FontNo;

		/// <summary>
		/// Size in pixels for rasterizer (more or less maps to the resulting font height).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SizePixels")]
		[NativeName(NativeNameType.Type, "float")]
		public float SizePixels;

		/// <summary>
		/// 3         Rasterize at higher quality for sub-pixel positioning. Note the difference between 2 and 3 is minimal so you can reduce this to 2 to save memory. Read https:github.comnothingsstbblobmastertestsoversampleREADME.md for details.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OversampleH")]
		[NativeName(NativeNameType.Type, "int")]
		public int OversampleH;

		/// <summary>
		/// 1         Rasterize at higher quality for sub-pixel positioning. This is not really useful as we don't use sub-pixel positions on the Y axis.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OversampleV")]
		[NativeName(NativeNameType.Type, "int")]
		public int OversampleV;

		/// <summary>
		/// false     Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleHV to 1.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PixelSnapH")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte PixelSnapH;

		/// <summary>
		/// 0, 0      Extra spacing (in pixels) between glyphs. Only X axis is supported for now.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "GlyphExtraSpacing")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 GlyphExtraSpacing;

		/// <summary>
		/// 0, 0      Offset all glyphs from this font input.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "GlyphOffset")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 GlyphOffset;

		/// <summary>
		/// NULL      THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE. Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "GlyphRanges")]
		[NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GlyphRanges;

		/// <summary>
		/// 0         Minimum AdvanceX for glyphs, set Min to align font icons, set both MinMax to enforce mono-space font<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "GlyphMinAdvanceX")]
		[NativeName(NativeNameType.Type, "float")]
		public float GlyphMinAdvanceX;

		/// <summary>
		/// FLT_MAX   Maximum AdvanceX for glyphs<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "GlyphMaxAdvanceX")]
		[NativeName(NativeNameType.Type, "float")]
		public float GlyphMaxAdvanceX;

		/// <summary>
		/// false     Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MergeMode")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte MergeMode;

		/// <summary>
		/// 0         Settings for custom font builder. THIS IS BUILDER IMPLEMENTATION DEPENDENT. Leave as zero if unsure.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FontBuilderFlags")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint FontBuilderFlags;

		/// <summary>
		/// 1.0f      Brighten (&gt;1.0f) or darken (&lt;1.0f) font output. Brightening small fonts may be a good workaround to make them more readable.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RasterizerMultiply")]
		[NativeName(NativeNameType.Type, "float")]
		public float RasterizerMultiply;

		/// <summary>
		/// -1        Explicitly specify unicode codepoint of ellipsis character. When fonts are being merged first specified ellipsis will be used.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "EllipsisChar")]
		[NativeName(NativeNameType.Type, "ImWchar")]
		public char EllipsisChar;

		/// <summary>
		/// [Internal] Name (strictly to ease debugging)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "char[40]")]
		public byte Name_0;
		public byte Name_1;
		public byte Name_2;
		public byte Name_3;
		public byte Name_4;
		public byte Name_5;
		public byte Name_6;
		public byte Name_7;
		public byte Name_8;
		public byte Name_9;
		public byte Name_10;
		public byte Name_11;
		public byte Name_12;
		public byte Name_13;
		public byte Name_14;
		public byte Name_15;
		public byte Name_16;
		public byte Name_17;
		public byte Name_18;
		public byte Name_19;
		public byte Name_20;
		public byte Name_21;
		public byte Name_22;
		public byte Name_23;
		public byte Name_24;
		public byte Name_25;
		public byte Name_26;
		public byte Name_27;
		public byte Name_28;
		public byte Name_29;
		public byte Name_30;
		public byte Name_31;
		public byte Name_32;
		public byte Name_33;
		public byte Name_34;
		public byte Name_35;
		public byte Name_36;
		public byte Name_37;
		public byte Name_38;
		public byte Name_39;

		[NativeName(NativeNameType.Field, "DstFont")]
		[NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* DstFont;



		[NativeName(NativeNameType.Func, "ImFontConfig_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImFontConfig* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// This structure is likely to evolve as we add support for incremental atlas updates<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImFontBuilderIO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontBuilderIO
	{
		[NativeName(NativeNameType.Field, "FontBuilder_Build")]
		[NativeName(NativeNameType.Type, "bool (*)(ImFontAtlas* atlas)*")]
		public unsafe void* FontBuilderBuild;


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImVec2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImVec2
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImVec2*")]
		public unsafe Vector2* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImVec4")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImVec4
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImVec4*")]
		public unsafe Vector4* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImTextureID")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImTextureID
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImTextureID*")]
		public unsafe ImTextureID* Data;


	}

	/// <summary>
	/// [Internal] For use by ImDrawList<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImDrawCmdHeader")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawCmdHeader
	{
		[NativeName(NativeNameType.Field, "ClipRect")]
		[NativeName(NativeNameType.Type, "ImVec4")]
		public Vector4 ClipRect;
		[NativeName(NativeNameType.Field, "TextureId")]
		[NativeName(NativeNameType.Type, "ImTextureID")]
		public ImTextureID TextureId;
		[NativeName(NativeNameType.Field, "VtxOffset")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint VtxOffset;


	}

	/// <summary>
	/// SplitMerge functions are used to split the draw list into different layers which can be drawn into out of order.<br/>
	/// This is used by the ColumnsTables API, so items of each column can be batched together in a same draw call.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImDrawListSplitter")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawListSplitter
	{
		/// <summary>
		/// Current channel number (0)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "_Current")]
		[NativeName(NativeNameType.Type, "int")]
		public int Current;

		/// <summary>
		/// Number of active channels (1+)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "_Count")]
		[NativeName(NativeNameType.Type, "int")]
		public int Count;

		/// <summary>
		/// Draw channels (not resized down so _Count might be &lt; Channels.Size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "_Channels")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawChannel")]
		public ImVectorImDrawChannel Channels;




		/// <summary>		/// Do not clear Channels[] so our allocations are reused next frame		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawListSplitter_ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearFreeMemory()
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGui.ClearFreeMemoryNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawListSplitter_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Merge")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Merge([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGui.MergeNative(@this, drawList);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Merge")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Merge([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGui.MergeNative(@this, (ImDrawList*)pdrawList);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawListSplitter_SetCurrentChannel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetCurrentChannel([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "channel_idx")] [NativeName(NativeNameType.Type, "int")] int channelIdx)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGui.SetCurrentChannelNative(@this, drawList, channelIdx);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawListSplitter_SetCurrentChannel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetCurrentChannel([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "channel_idx")] [NativeName(NativeNameType.Type, "int")] int channelIdx)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGui.SetCurrentChannelNative(@this, (ImDrawList*)pdrawList, channelIdx);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Split")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Split([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int cOUNT)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGui.SplitNative(@this, drawList, cOUNT);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Split")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Split([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int cOUNT)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGui.SplitNative(@this, (ImDrawList*)pdrawList, cOUNT);
				}
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImDrawChannel")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImDrawChannel
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImDrawChannel*")]
		public unsafe ImDrawChannel* Data;


	}

	/// <summary>
	/// All draw data to render a Dear ImGui frame<br/>
	/// (NB: the style and the naming convention here is a little inconsistent, we currently preserve them for backward compatibility purpose,<br/>
	/// as this is one of the oldest structure exposed by the library! Basically, ImDrawList == CmdList)<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImDrawData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawData
	{
		/// <summary>
		/// Only valid after Render() is called and before the next NewFrame() is called.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Valid")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Valid;

		/// <summary>
		/// Number of ImDrawList* to render<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CmdListsCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int CmdListsCount;

		/// <summary>
		/// For convenience, sum of all ImDrawList's IdxBuffer.Size<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TotalIdxCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int TotalIdxCount;

		/// <summary>
		/// For convenience, sum of all ImDrawList's VtxBuffer.Size<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TotalVtxCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int TotalVtxCount;

		/// <summary>
		/// Array of ImDrawList* to render. The ImDrawList are owned by ImGuiContext and only pointed to from here.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CmdLists")]
		[NativeName(NativeNameType.Type, "ImDrawList**")]
		public unsafe ImDrawList** CmdLists;

		/// <summary>
		/// Top-left position of the viewport to render (== top-left of the orthogonal projection matrix to use) (== GetMainViewport()-&gt;Pos for the main viewport, == (0.0) in most single-viewport applications)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 DisplayPos;

		/// <summary>
		/// Size of the viewport to render (== GetMainViewport()-&gt;Size for the main viewport, == io.DisplaySize in most single-viewport applications)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplaySize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 DisplaySize;

		/// <summary>
		/// Amount of pixels for each unit of DisplaySize. Based on io.DisplayFramebufferScale. Generally (1,1) on normal display, (2,2) on OSX with Retina display.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FramebufferScale")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 FramebufferScale;

		/// <summary>
		/// Viewport carrying the ImDrawData instance, might be of use to the renderer (generally not).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OwnerViewport")]
		[NativeName(NativeNameType.Type, "ImGuiViewport*")]
		public unsafe ImGuiViewport* OwnerViewport;




		/// <summary>		/// The ImDrawList are owned by ImGuiContext!		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawData_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImDrawData* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		/// <summary>		/// Helper to convert all buffers from indexed to non-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawData_DeIndexAllBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void DeIndexAllBuffers()
		{
			fixed (ImDrawData* @this = &this)
			{
				ImGui.DeIndexAllBuffersNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImDrawData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>		/// Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than Dear ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.		/// </summary>		[NativeName(NativeNameType.Func, "ImDrawData_ScaleClipRects")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ScaleClipRects([NativeName(NativeNameType.Param, "fb_scale")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 fbScale)
		{
			fixed (ImDrawData* @this = &this)
			{
				ImGui.ScaleClipRectsNative(@this, fbScale);
			}
		}

	}

	/// <summary>
	/// - Currently represents the Platform Window created by the application which is hosting our Dear ImGui windows.<br/>
	/// - With multi-viewport enabled, we extend this concept to have multiple active viewports.<br/>
	/// - In the future we will extend this concept further to also represent Platform Monitor and support a "no main platform window" operation mode.<br/>
	/// - About Main Area vs Work Area:<br/>
	/// - Main Area = entire viewport.<br/>
	/// - Work Area = entire viewport minus sections used by main menu bars (for platform windows), or by task bar (for platform monitor).<br/>
	/// - Windows are generally trying to stay within the Work Area of their host viewport.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiViewport")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiViewport
	{
		/// <summary>
		/// Unique identifier for the viewport<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// See ImGuiViewportFlags_<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiViewportFlags")]
		public ImGuiViewportFlags Flags;

		/// <summary>
		/// Main Area: Position of the viewport (Dear ImGui coordinates are the same as OS desktopnative coordinates)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Pos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Pos;

		/// <summary>
		/// Main Area: Size of the viewport.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Size;

		/// <summary>
		/// Work Area: Position of the viewport minus task bars, menus bars, status bars (&gt;= Pos)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WorkPos;

		/// <summary>
		/// Work Area: Size of the viewport minus task bars, menu bars, status bars (&lt;= Size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WorkSize;

		/// <summary>
		/// 1.0f = 96 DPI = No extra scale.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DpiScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float DpiScale;

		/// <summary>
		/// (Advanced) 0: no parent. Instruct the platform backend to setup a parentchild relationship between platform windows.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ParentViewportId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ParentViewportId;

		/// <summary>
		/// The ImDrawData corresponding to this viewport. Valid after Render() and until the next call to NewFrame().<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawData")]
		[NativeName(NativeNameType.Type, "ImDrawData*")]
		public unsafe ImDrawData* DrawData;

		/// <summary>
		/// PlatformBackend Dependent Data<br/>
		/// Our design separate the Renderer and Platform backends to facilitate combining default backends with each others.<br/>
		/// When our create your own backend for a custom engine, it is possible that both Renderer and Platform will be handled<br/>
		/// by the same system and you may not need to use all the UserDataHandle fields.<br/>
		/// The library never uses those fields, they are merely storage to facilitate backend implementation. void* to hold custom data structure for the renderer (e.g. swap chain, framebuffers etc.). generally set by your Renderer_CreateWindow function.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RendererUserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* RendererUserData;

		/// <summary>
		/// void* to hold custom data structure for the OS  platform (e.g. windowing info, render context). generally set by your Platform_CreateWindow function.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformUserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PlatformUserData;

		/// <summary>
		/// void* for FindViewportByPlatformHandle(). (e.g. suggested to use natural platform handle such as HWND, GLFWWindow*, SDL_Window*)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformHandle")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PlatformHandle;

		/// <summary>
		/// void* to hold lower-level, platform-native window handle (under Win32 this is expected to be a HWND, unused for other platforms), when using an abstraction layer like GLFW or SDL (where PlatformHandle would be a SDL_Window*)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformHandleRaw")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PlatformHandleRaw;

		/// <summary>
		/// Platform window has been created (Platform_CreateWindow() has been called). This is false during the first frame where a viewport is being created.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformWindowCreated")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte PlatformWindowCreated;

		/// <summary>
		/// Platform window requested move (e.g. window was moved by the OS  host window manager, authoritative position will be OS window position)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformRequestMove")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte PlatformRequestMove;

		/// <summary>
		/// Platform window requested resize (e.g. window was resized by the OS  host window manager, authoritative size will be OS window size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformRequestResize")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte PlatformRequestResize;

		/// <summary>
		/// Platform window requested closure (e.g. window was moved by the OS  host window manager, e.g. pressing ALT-F4)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformRequestClose")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte PlatformRequestClose;




		[NativeName(NativeNameType.Func, "ImGuiViewport_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiViewport* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// Helper to build glyph ranges from textstring data. Feed your application stringscharacters to it then call BuildRanges().<br/>
	/// This is essentially a tightly packed of vector of 64k booleans = 8KB storage.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImFontGlyphRangesBuilder")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontGlyphRangesBuilder
	{
		/// <summary>
		/// Store 1-bit per Unicode code point (0=unused, 1=used)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "UsedChars")]
		[NativeName(NativeNameType.Type, "ImVector_ImU32")]
		public ImVectorImU32 UsedChars;




		/// <summary>		/// Add character		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddChar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddChar([NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				ImGui.AddCharNative(@this, c);
			}
		}

		/// <summary>		/// Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault()) to force add all of ASCIILatin+Ext		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddRanges")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRanges([NativeName(NativeNameType.Param, "ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* rANGES)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				ImGui.AddRangesNative(@this, rANGES);
			}
		}

		/// <summary>		/// Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault()) to force add all of ASCIILatin+Ext		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddRanges")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddRanges([NativeName(NativeNameType.Param, "ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char rANGES)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				fixed (char* prANGES = &rANGES)
				{
					ImGui.AddRangesNative(@this, (char*)prANGES);
				}
			}
		}

		/// <summary>		/// Add string (each character of the UTF-8 string are added)		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				ImGui.AddTextNative(@this, tEXT, textEnd);
			}
		}

		/// <summary>		/// Add string (each character of the UTF-8 string are added)		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* tEXT)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				ImGui.AddTextNative(@this, tEXT, (byte*)(default));
			}
		}

		/// <summary>		/// Add string (each character of the UTF-8 string are added)		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				fixed (byte* ptEXT = &tEXT)
				{
					ImGui.AddTextNative(@this, (byte*)ptEXT, textEnd);
				}
			}
		}

		/// <summary>		/// Add string (each character of the UTF-8 string are added)		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte tEXT)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				fixed (byte* ptEXT = &tEXT)
				{
					ImGui.AddTextNative(@this, (byte*)ptEXT, (byte*)(default));
				}
			}
		}

		/// <summary>		/// Add string (each character of the UTF-8 string are added)		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (tEXT != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(tEXT);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(tEXT, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, pStr0, textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>		/// Add string (each character of the UTF-8 string are added)		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string tEXT)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (tEXT != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(tEXT);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(tEXT, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>		/// Add string (each character of the UTF-8 string are added)		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.AddTextNative(@this, tEXT, (byte*)ptextEnd);
				}
			}
		}

		/// <summary>		/// Add string (each character of the UTF-8 string are added)		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddTextNative(@this, tEXT, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>		/// Add string (each character of the UTF-8 string are added)		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				fixed (byte* ptEXT = &tEXT)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.AddTextNative(@this, (byte*)ptEXT, (byte*)ptextEnd);
					}
				}
			}
		}

		/// <summary>		/// Add string (each character of the UTF-8 string are added)		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (tEXT != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(tEXT);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(tEXT, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.AddTextNative(@this, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>		/// Output new ranges		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_BuildRanges")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void BuildRanges([NativeName(NativeNameType.Param, "out_ranges")] [NativeName(NativeNameType.Type, "ImVector_ImWchar*")] ImVectorImWchar* outRanges)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				ImGui.BuildRangesNative(@this, outRanges);
			}
		}

		/// <summary>		/// Output new ranges		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_BuildRanges")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void BuildRanges([NativeName(NativeNameType.Param, "out_ranges")] [NativeName(NativeNameType.Type, "ImVector_ImWchar*")] ref ImVectorImWchar outRanges)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				fixed (ImVectorImWchar* poutRanges = &outRanges)
				{
					ImGui.BuildRangesNative(@this, (ImVectorImWchar*)poutRanges);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>		/// Get bit n in the array		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_GetBit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetBit([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "size_t")] nuint n)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				byte ret = ImGui.GetBitNative(@this, n);
				return ret != 0;
			}
		}

		/// <summary>		/// Set bit n in the array		/// </summary>		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_SetBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetBit([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "size_t")] nuint n)
		{
			fixed (ImFontGlyphRangesBuilder* @this = &this)
			{
				ImGui.SetBitNative(@this, n);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImU32")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImU32
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImU32*")]
		public unsafe uint* Data;


	}

	/// <summary>
	/// Helpers: ImVec2ImVec4 operators<br/>
	/// - It is important that we are keeping those disabled by default so they don't leak in user space.<br/>
	/// - This is in order to allow user enabling implicit cast operators between ImVec2ImVec4 and their own types (using IM_VEC2_CLASS_EXTRA in imconfig.h)<br/>
	/// - You can use '#define IMGUI_DEFINE_MATH_OPERATORS' to import our operators, provided as a courtesy.<br/>
	/// Helpers macros to generate 32-bit encoded colors<br/>
	/// User can declare their own format by #defining the 5 _SHIFT_MASK macros in their imconfig file.<br/>
	/// Helper: ImColor() implicitly converts colors to either ImU32 (packed 4x1 byte) or ImVec4 (4x1 float)<br/>
	/// Prefer using IM_COL32() macros if you want a guaranteed compile-time ImU32 for usage with ImDrawList API.<br/>
	/// **Avoid storing ImColor! Store either u32 of ImVec4. This is not a full-featured color class. MAY OBSOLETE.<br/>
	/// **None of the ImGui API are using ImColor directly but you can use it as a convenience to pass colors in either ImU32 or ImVec4 formats. Explicitly cast to ImU32 or ImVec4 if needed.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImColor")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImColor
	{
		[NativeName(NativeNameType.Field, "Value")]
		[NativeName(NativeNameType.Type, "ImVec4")]
		public Vector4 Value;



		[NativeName(NativeNameType.Func, "ImColor_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImColor* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImColor_HSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void HSV([NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "float")] float a)
		{
			fixed (ImColor* @this = &this)
			{
				ImGui.HSVNative(@this, h, s, v, a);
			}
		}

		[NativeName(NativeNameType.Func, "ImColor_HSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void HSV([NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v)
		{
			fixed (ImColor* @this = &this)
			{
				ImGui.HSVNative(@this, h, s, v, (float)(1.0f));
			}
		}

		[NativeName(NativeNameType.Func, "ImColor_SetHSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetHSV([NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "float")] float a)
		{
			fixed (ImColor* @this = &this)
			{
				ImGui.SetHSVNative(@this, h, s, v, a);
			}
		}

		[NativeName(NativeNameType.Func, "ImColor_SetHSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetHSV([NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v)
		{
			fixed (ImColor* @this = &this)
			{
				ImGui.SetHSVNative(@this, h, s, v, (float)(1.0f));
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiContext")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiContext
	{
		[NativeName(NativeNameType.Field, "Initialized")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Initialized;
		/// <summary>
		/// IO.Fonts-&gt; is owned by the ImGuiContext and will be destructed along with it.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FontAtlasOwnedByContext")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte FontAtlasOwnedByContext;

		[NativeName(NativeNameType.Field, "IO")]
		[NativeName(NativeNameType.Type, "ImGuiIO")]
		public ImGuiIO IO;
		[NativeName(NativeNameType.Field, "PlatformIO")]
		[NativeName(NativeNameType.Type, "ImGuiPlatformIO")]
		public ImGuiPlatformIO PlatformIO;
		[NativeName(NativeNameType.Field, "Style")]
		[NativeName(NativeNameType.Type, "ImGuiStyle")]
		public ImGuiStyle Style;
		/// <summary>
		/// = g.IO.ConfigFlags at the time of NewFrame()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigFlagsCurrFrame")]
		[NativeName(NativeNameType.Type, "ImGuiConfigFlags")]
		public ImGuiConfigFlags ConfigFlagsCurrFrame;

		[NativeName(NativeNameType.Field, "ConfigFlagsLastFrame")]
		[NativeName(NativeNameType.Type, "ImGuiConfigFlags")]
		public ImGuiConfigFlags ConfigFlagsLastFrame;
		/// <summary>
		/// (Shortcut) == FontStack.empty() ? IO.Font : FontStack.back()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Font")]
		[NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* Font;

		/// <summary>
		/// (Shortcut) == FontBaseSize * g.CurrentWindow-&gt;FontWindowScale == window-&gt;FontSize(). Text height for current window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FontSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float FontSize;

		/// <summary>
		/// (Shortcut) == IO.FontGlobalScale * Font-&gt;Scale * Font-&gt;FontSize. Base text height.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FontBaseSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float FontBaseSize;

		[NativeName(NativeNameType.Field, "DrawListSharedData")]
		[NativeName(NativeNameType.Type, "ImDrawListSharedData")]
		public ImDrawListSharedData DrawListSharedData;
		[NativeName(NativeNameType.Field, "Time")]
		[NativeName(NativeNameType.Type, "double")]
		public double Time;
		[NativeName(NativeNameType.Field, "FrameCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int FrameCount;
		[NativeName(NativeNameType.Field, "FrameCountEnded")]
		[NativeName(NativeNameType.Type, "int")]
		public int FrameCountEnded;
		[NativeName(NativeNameType.Field, "FrameCountPlatformEnded")]
		[NativeName(NativeNameType.Type, "int")]
		public int FrameCountPlatformEnded;
		[NativeName(NativeNameType.Field, "FrameCountRendered")]
		[NativeName(NativeNameType.Type, "int")]
		public int FrameCountRendered;
		/// <summary>
		/// Set by NewFrame(), cleared by EndFrame()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WithinFrameScope")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WithinFrameScope;

		/// <summary>
		/// Set by NewFrame(), cleared by EndFrame() when the implicit debug window has been pushed<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WithinFrameScopeWithImplicitWindow")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WithinFrameScopeWithImplicitWindow;

		/// <summary>
		/// Set within EndChild()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WithinEndChild")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WithinEndChild;

		/// <summary>
		/// Request full GC<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "GcCompactAll")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte GcCompactAll;

		/// <summary>
		/// Will call test engine hooks: ImGuiTestEngineHook_ItemAdd(), ImGuiTestEngineHook_ItemInfo(), ImGuiTestEngineHook_Log()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TestEngineHookItems")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte TestEngineHookItems;

		/// <summary>
		/// Test engine user data<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TestEngine")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* TestEngine;

		/// <summary>
		/// Inputs Input events which will be trickledwritten into IO structure.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InputEventsQueue")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiInputEvent")]
		public ImVectorImGuiInputEvent InputEventsQueue;

		/// <summary>
		/// Past input events processed in NewFrame(). This is to allow domain-specific application to access e.g mousepen trail.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InputEventsTrail")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiInputEvent")]
		public ImVectorImGuiInputEvent InputEventsTrail;

		[NativeName(NativeNameType.Field, "InputEventsNextMouseSource")]
		[NativeName(NativeNameType.Type, "ImGuiMouseSource")]
		public ImGuiMouseSource InputEventsNextMouseSource;
		[NativeName(NativeNameType.Field, "InputEventsNextEventId")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint InputEventsNextEventId;
		/// <summary>
		/// Windows state Windows, sorted in display order, back to front<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Windows")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr")]
		public ImVectorImGuiWindowPtr Windows;

		/// <summary>
		/// Root windows, sorted in focus order, back to front.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowsFocusOrder")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr")]
		public ImVectorImGuiWindowPtr WindowsFocusOrder;

		/// <summary>
		/// Temporary buffer used in EndFrame() to reorder windows so parents are kept before their child<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowsTempSortBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr")]
		public ImVectorImGuiWindowPtr WindowsTempSortBuffer;

		[NativeName(NativeNameType.Field, "CurrentWindowStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiWindowStackData")]
		public ImVectorImGuiWindowStackData CurrentWindowStack;
		/// <summary>
		/// Map window's ImGuiID to ImGuiWindow*<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowsById")]
		[NativeName(NativeNameType.Type, "ImGuiStorage")]
		public ImGuiStorage WindowsById;

		/// <summary>
		/// Number of unique windows submitted by frame<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowsActiveCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int WindowsActiveCount;

		/// <summary>
		/// Padding around resizable windows for which hovering on counts as hovering the window == ImMax(style.TouchExtraPadding, WINDOWS_HOVER_PADDING)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowsHoverPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WindowsHoverPadding;

		/// <summary>
		/// Window being drawn into<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* CurrentWindow;

		/// <summary>
		/// Window the mouse is hovering. Will typically catch mouse inputs.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* HoveredWindow;

		/// <summary>
		/// Hovered window ignoring MovingWindow. Only set if MovingWindow is set.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredWindowUnderMovingWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* HoveredWindowUnderMovingWindow;

		/// <summary>
		/// Track the window we clicked on (in order to preserve focus). The actual window that is moved is generally MovingWindow-&gt;RootWindowDockTree.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MovingWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* MovingWindow;

		/// <summary>
		/// Track the window we started mouse-wheeling on. Until a timer elapse or mouse has moved, generally keep scrolling the same window even if during the course of scrolling the mouse ends up hovering a child window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WheelingWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* WheelingWindow;

		[NativeName(NativeNameType.Field, "WheelingWindowRefMousePos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WheelingWindowRefMousePos;
		/// <summary>
		/// This may be set one frame before WheelingWindow is != NULL<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WheelingWindowStartFrame")]
		[NativeName(NativeNameType.Type, "int")]
		public int WheelingWindowStartFrame;

		[NativeName(NativeNameType.Field, "WheelingWindowReleaseTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float WheelingWindowReleaseTimer;
		[NativeName(NativeNameType.Field, "WheelingWindowWheelRemainder")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WheelingWindowWheelRemainder;
		[NativeName(NativeNameType.Field, "WheelingAxisAvg")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WheelingAxisAvg;
		/// <summary>
		/// Itemwidgets state and tracking information Will call core hooks: DebugHookIdInfo() from GetID functions, used by Stack Tool [next HoveredIdActiveId to not pull in an extra cache-line]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugHookIdInfo")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int DebugHookIdInfo;

		/// <summary>
		/// Hovered widget, filled during the frame<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int HoveredId;

		[NativeName(NativeNameType.Field, "HoveredIdPreviousFrame")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int HoveredIdPreviousFrame;
		[NativeName(NativeNameType.Field, "HoveredIdAllowOverlap")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HoveredIdAllowOverlap;
		/// <summary>
		/// At least one widget passed the rect test, but has been discarded by disabled flag or popup inhibit. May be true even if HoveredId == 0.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredIdDisabled")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HoveredIdDisabled;

		/// <summary>
		/// Measure contiguous hovering time<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredIdTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float HoveredIdTimer;

		/// <summary>
		/// Measure contiguous hovering time where the item has not been active<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredIdNotActiveTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float HoveredIdNotActiveTimer;

		/// <summary>
		/// Active widget<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ActiveId;

		/// <summary>
		/// Active widget has been seen this frame (we can't use a bool as the ActiveId may change within the frame)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdIsAlive")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ActiveIdIsAlive;

		[NativeName(NativeNameType.Field, "ActiveIdTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float ActiveIdTimer;
		/// <summary>
		/// Set at the time of activation for one frame<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdIsJustActivated")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdIsJustActivated;

		/// <summary>
		/// Active widget allows another widget to steal active id (generally for overlapping widgets, but not always)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdAllowOverlap")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdAllowOverlap;

		/// <summary>
		/// Disable losing active id if the active id window gets unfocused.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdNoClearOnFocusLoss")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdNoClearOnFocusLoss;

		/// <summary>
		/// Track whether the active id led to a press (this is to allow changing between PressOnClick and PressOnRelease without pressing twice). Used by range_select branch.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdHasBeenPressedBefore")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdHasBeenPressedBefore;

		/// <summary>
		/// Was the value associated to the widget Edited over the course of the Active state.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdHasBeenEditedBefore")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdHasBeenEditedBefore;

		[NativeName(NativeNameType.Field, "ActiveIdHasBeenEditedThisFrame")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdHasBeenEditedThisFrame;
		/// <summary>
		/// Clicked offset from upper-left corner, if applicable (currently only set by ButtonBehavior)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdClickOffset")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ActiveIdClickOffset;

		[NativeName(NativeNameType.Field, "ActiveIdWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* ActiveIdWindow;
		/// <summary>
		/// Activating source: ImGuiInputSource_Mouse OR ImGuiInputSource_Keyboard OR ImGuiInputSource_Gamepad<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdSource")]
		[NativeName(NativeNameType.Type, "ImGuiInputSource")]
		public ImGuiInputSource ActiveIdSource;

		[NativeName(NativeNameType.Field, "ActiveIdMouseButton")]
		[NativeName(NativeNameType.Type, "int")]
		public int ActiveIdMouseButton;
		[NativeName(NativeNameType.Field, "ActiveIdPreviousFrame")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ActiveIdPreviousFrame;
		[NativeName(NativeNameType.Field, "ActiveIdPreviousFrameIsAlive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdPreviousFrameIsAlive;
		[NativeName(NativeNameType.Field, "ActiveIdPreviousFrameHasBeenEditedBefore")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdPreviousFrameHasBeenEditedBefore;
		[NativeName(NativeNameType.Field, "ActiveIdPreviousFrameWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* ActiveIdPreviousFrameWindow;
		/// <summary>
		/// Store the last non-zero ActiveId, useful for animation.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LastActiveId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int LastActiveId;

		/// <summary>
		/// Store the last non-zero ActiveId timer since the beginning of activation, useful for animation.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LastActiveIdTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float LastActiveIdTimer;

		[NativeName(NativeNameType.Field, "KeysOwnerData")]
		[NativeName(NativeNameType.Type, "ImGuiKeyOwnerData[140]")]
		public ImGuiKeyOwnerData KeysOwnerData_0;
		public ImGuiKeyOwnerData KeysOwnerData_1;
		public ImGuiKeyOwnerData KeysOwnerData_2;
		public ImGuiKeyOwnerData KeysOwnerData_3;
		public ImGuiKeyOwnerData KeysOwnerData_4;
		public ImGuiKeyOwnerData KeysOwnerData_5;
		public ImGuiKeyOwnerData KeysOwnerData_6;
		public ImGuiKeyOwnerData KeysOwnerData_7;
		public ImGuiKeyOwnerData KeysOwnerData_8;
		public ImGuiKeyOwnerData KeysOwnerData_9;
		public ImGuiKeyOwnerData KeysOwnerData_10;
		public ImGuiKeyOwnerData KeysOwnerData_11;
		public ImGuiKeyOwnerData KeysOwnerData_12;
		public ImGuiKeyOwnerData KeysOwnerData_13;
		public ImGuiKeyOwnerData KeysOwnerData_14;
		public ImGuiKeyOwnerData KeysOwnerData_15;
		public ImGuiKeyOwnerData KeysOwnerData_16;
		public ImGuiKeyOwnerData KeysOwnerData_17;
		public ImGuiKeyOwnerData KeysOwnerData_18;
		public ImGuiKeyOwnerData KeysOwnerData_19;
		public ImGuiKeyOwnerData KeysOwnerData_20;
		public ImGuiKeyOwnerData KeysOwnerData_21;
		public ImGuiKeyOwnerData KeysOwnerData_22;
		public ImGuiKeyOwnerData KeysOwnerData_23;
		public ImGuiKeyOwnerData KeysOwnerData_24;
		public ImGuiKeyOwnerData KeysOwnerData_25;
		public ImGuiKeyOwnerData KeysOwnerData_26;
		public ImGuiKeyOwnerData KeysOwnerData_27;
		public ImGuiKeyOwnerData KeysOwnerData_28;
		public ImGuiKeyOwnerData KeysOwnerData_29;
		public ImGuiKeyOwnerData KeysOwnerData_30;
		public ImGuiKeyOwnerData KeysOwnerData_31;
		public ImGuiKeyOwnerData KeysOwnerData_32;
		public ImGuiKeyOwnerData KeysOwnerData_33;
		public ImGuiKeyOwnerData KeysOwnerData_34;
		public ImGuiKeyOwnerData KeysOwnerData_35;
		public ImGuiKeyOwnerData KeysOwnerData_36;
		public ImGuiKeyOwnerData KeysOwnerData_37;
		public ImGuiKeyOwnerData KeysOwnerData_38;
		public ImGuiKeyOwnerData KeysOwnerData_39;
		public ImGuiKeyOwnerData KeysOwnerData_40;
		public ImGuiKeyOwnerData KeysOwnerData_41;
		public ImGuiKeyOwnerData KeysOwnerData_42;
		public ImGuiKeyOwnerData KeysOwnerData_43;
		public ImGuiKeyOwnerData KeysOwnerData_44;
		public ImGuiKeyOwnerData KeysOwnerData_45;
		public ImGuiKeyOwnerData KeysOwnerData_46;
		public ImGuiKeyOwnerData KeysOwnerData_47;
		public ImGuiKeyOwnerData KeysOwnerData_48;
		public ImGuiKeyOwnerData KeysOwnerData_49;
		public ImGuiKeyOwnerData KeysOwnerData_50;
		public ImGuiKeyOwnerData KeysOwnerData_51;
		public ImGuiKeyOwnerData KeysOwnerData_52;
		public ImGuiKeyOwnerData KeysOwnerData_53;
		public ImGuiKeyOwnerData KeysOwnerData_54;
		public ImGuiKeyOwnerData KeysOwnerData_55;
		public ImGuiKeyOwnerData KeysOwnerData_56;
		public ImGuiKeyOwnerData KeysOwnerData_57;
		public ImGuiKeyOwnerData KeysOwnerData_58;
		public ImGuiKeyOwnerData KeysOwnerData_59;
		public ImGuiKeyOwnerData KeysOwnerData_60;
		public ImGuiKeyOwnerData KeysOwnerData_61;
		public ImGuiKeyOwnerData KeysOwnerData_62;
		public ImGuiKeyOwnerData KeysOwnerData_63;
		public ImGuiKeyOwnerData KeysOwnerData_64;
		public ImGuiKeyOwnerData KeysOwnerData_65;
		public ImGuiKeyOwnerData KeysOwnerData_66;
		public ImGuiKeyOwnerData KeysOwnerData_67;
		public ImGuiKeyOwnerData KeysOwnerData_68;
		public ImGuiKeyOwnerData KeysOwnerData_69;
		public ImGuiKeyOwnerData KeysOwnerData_70;
		public ImGuiKeyOwnerData KeysOwnerData_71;
		public ImGuiKeyOwnerData KeysOwnerData_72;
		public ImGuiKeyOwnerData KeysOwnerData_73;
		public ImGuiKeyOwnerData KeysOwnerData_74;
		public ImGuiKeyOwnerData KeysOwnerData_75;
		public ImGuiKeyOwnerData KeysOwnerData_76;
		public ImGuiKeyOwnerData KeysOwnerData_77;
		public ImGuiKeyOwnerData KeysOwnerData_78;
		public ImGuiKeyOwnerData KeysOwnerData_79;
		public ImGuiKeyOwnerData KeysOwnerData_80;
		public ImGuiKeyOwnerData KeysOwnerData_81;
		public ImGuiKeyOwnerData KeysOwnerData_82;
		public ImGuiKeyOwnerData KeysOwnerData_83;
		public ImGuiKeyOwnerData KeysOwnerData_84;
		public ImGuiKeyOwnerData KeysOwnerData_85;
		public ImGuiKeyOwnerData KeysOwnerData_86;
		public ImGuiKeyOwnerData KeysOwnerData_87;
		public ImGuiKeyOwnerData KeysOwnerData_88;
		public ImGuiKeyOwnerData KeysOwnerData_89;
		public ImGuiKeyOwnerData KeysOwnerData_90;
		public ImGuiKeyOwnerData KeysOwnerData_91;
		public ImGuiKeyOwnerData KeysOwnerData_92;
		public ImGuiKeyOwnerData KeysOwnerData_93;
		public ImGuiKeyOwnerData KeysOwnerData_94;
		public ImGuiKeyOwnerData KeysOwnerData_95;
		public ImGuiKeyOwnerData KeysOwnerData_96;
		public ImGuiKeyOwnerData KeysOwnerData_97;
		public ImGuiKeyOwnerData KeysOwnerData_98;
		public ImGuiKeyOwnerData KeysOwnerData_99;
		public ImGuiKeyOwnerData KeysOwnerData_100;
		public ImGuiKeyOwnerData KeysOwnerData_101;
		public ImGuiKeyOwnerData KeysOwnerData_102;
		public ImGuiKeyOwnerData KeysOwnerData_103;
		public ImGuiKeyOwnerData KeysOwnerData_104;
		public ImGuiKeyOwnerData KeysOwnerData_105;
		public ImGuiKeyOwnerData KeysOwnerData_106;
		public ImGuiKeyOwnerData KeysOwnerData_107;
		public ImGuiKeyOwnerData KeysOwnerData_108;
		public ImGuiKeyOwnerData KeysOwnerData_109;
		public ImGuiKeyOwnerData KeysOwnerData_110;
		public ImGuiKeyOwnerData KeysOwnerData_111;
		public ImGuiKeyOwnerData KeysOwnerData_112;
		public ImGuiKeyOwnerData KeysOwnerData_113;
		public ImGuiKeyOwnerData KeysOwnerData_114;
		public ImGuiKeyOwnerData KeysOwnerData_115;
		public ImGuiKeyOwnerData KeysOwnerData_116;
		public ImGuiKeyOwnerData KeysOwnerData_117;
		public ImGuiKeyOwnerData KeysOwnerData_118;
		public ImGuiKeyOwnerData KeysOwnerData_119;
		public ImGuiKeyOwnerData KeysOwnerData_120;
		public ImGuiKeyOwnerData KeysOwnerData_121;
		public ImGuiKeyOwnerData KeysOwnerData_122;
		public ImGuiKeyOwnerData KeysOwnerData_123;
		public ImGuiKeyOwnerData KeysOwnerData_124;
		public ImGuiKeyOwnerData KeysOwnerData_125;
		public ImGuiKeyOwnerData KeysOwnerData_126;
		public ImGuiKeyOwnerData KeysOwnerData_127;
		public ImGuiKeyOwnerData KeysOwnerData_128;
		public ImGuiKeyOwnerData KeysOwnerData_129;
		public ImGuiKeyOwnerData KeysOwnerData_130;
		public ImGuiKeyOwnerData KeysOwnerData_131;
		public ImGuiKeyOwnerData KeysOwnerData_132;
		public ImGuiKeyOwnerData KeysOwnerData_133;
		public ImGuiKeyOwnerData KeysOwnerData_134;
		public ImGuiKeyOwnerData KeysOwnerData_135;
		public ImGuiKeyOwnerData KeysOwnerData_136;
		public ImGuiKeyOwnerData KeysOwnerData_137;
		public ImGuiKeyOwnerData KeysOwnerData_138;
		public ImGuiKeyOwnerData KeysOwnerData_139;
		[NativeName(NativeNameType.Field, "KeysRoutingTable")]
		[NativeName(NativeNameType.Type, "ImGuiKeyRoutingTable")]
		public ImGuiKeyRoutingTable KeysRoutingTable;
		/// <summary>
		/// Active widget will want to read those nav move requests (e.g. can activate a button and move away from it)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdUsingNavDirMask")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint ActiveIdUsingNavDirMask;

		/// <summary>
		/// Active widget will want to read all keyboard keys inputs. (FIXME: This is a shortcut for not taking ownership of 100+ keys but perhaps best to not have the inconsistency)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdUsingAllKeyboardKeys")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdUsingAllKeyboardKeys;

		/// <summary>
		/// If you used this. Since (IMGUI_VERSION_NUM &gt;= 18804) : 'g.ActiveIdUsingNavInputMask |= (1 &lt;&lt; ImGuiNavInput_Cancel);' becomes 'SetKeyOwner(ImGuiKey_Escape, g.ActiveId) andor SetKeyOwner(ImGuiKey_NavGamepadCancel, g.ActiveId);'<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdUsingNavInputMask")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint ActiveIdUsingNavInputMask;

		/// <summary>
		/// Next windowitem data == g.FocusScopeStack.back()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentFocusScopeId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int CurrentFocusScopeId;

		/// <summary>
		/// == g.ItemFlagsStack.back()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentItemFlags")]
		[NativeName(NativeNameType.Type, "ImGuiItemFlags")]
		public ImGuiItemFlags CurrentItemFlags;

		/// <summary>
		/// Storage for DebugLocateItemOnHover() feature: this is read by ItemAdd() so we keep it in a hotcached location<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugLocateId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int DebugLocateId;

		/// <summary>
		/// Storage for SetNextItem** functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NextItemData")]
		[NativeName(NativeNameType.Type, "ImGuiNextItemData")]
		public ImGuiNextItemData NextItemData;

		/// <summary>
		/// Storage for last submitted item (setup by ItemAdd)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LastItemData")]
		[NativeName(NativeNameType.Type, "ImGuiLastItemData")]
		public ImGuiLastItemData LastItemData;

		/// <summary>
		/// Storage for SetNextWindow** functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NextWindowData")]
		[NativeName(NativeNameType.Type, "ImGuiNextWindowData")]
		public ImGuiNextWindowData NextWindowData;

		/// <summary>
		/// Shared stacks Stack for PushStyleColor()PopStyleColor() - inherited by Begin()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiColorMod")]
		public ImVectorImGuiColorMod ColorStack;

		/// <summary>
		/// Stack for PushStyleVar()PopStyleVar() - inherited by Begin()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "StyleVarStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiStyleMod")]
		public ImVectorImGuiStyleMod StyleVarStack;

		/// <summary>
		/// Stack for PushFont()PopFont() - inherited by Begin()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FontStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImFontPtr")]
		public ImVectorImFontPtr FontStack;

		/// <summary>
		/// Stack for PushFocusScope()PopFocusScope() - inherited by BeginChild(), pushed into by Begin()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FocusScopeStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiID")]
		public ImVectorImGuiID FocusScopeStack;

		/// <summary>
		/// Stack for PushItemFlag()PopItemFlag() - inherited by Begin()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemFlagsStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiItemFlags")]
		public ImVectorImGuiItemFlags ItemFlagsStack;

		/// <summary>
		/// Stack for BeginGroup()EndGroup() - not inherited by Begin()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "GroupStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiGroupData")]
		public ImVectorImGuiGroupData GroupStack;

		/// <summary>
		/// Which popups are open (persistent)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OpenPopupStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiPopupData")]
		public ImVectorImGuiPopupData OpenPopupStack;

		/// <summary>
		/// Which level of BeginPopup() we are in (reset every frame)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BeginPopupStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiPopupData")]
		public ImVectorImGuiPopupData BeginPopupStack;

		[NativeName(NativeNameType.Field, "BeginMenuCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int BeginMenuCount;
		/// <summary>
		/// Viewports Active viewports (always 1+, and generally 1 unless multi-viewports are enabled). Each viewports hold their copy of ImDrawData.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Viewports")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiViewportPPtr")]
		public ImVectorImGuiViewportPPtr Viewports;

		/// <summary>
		/// == CurrentViewport-&gt;DpiScale<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentDpiScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float CurrentDpiScale;

		/// <summary>
		/// We track changes of viewport (happening in Begin) so we can call Platform_OnChangedViewport()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentViewport")]
		[NativeName(NativeNameType.Type, "ImGuiViewportP*")]
		public unsafe ImGuiViewportP* CurrentViewport;

		[NativeName(NativeNameType.Field, "MouseViewport")]
		[NativeName(NativeNameType.Type, "ImGuiViewportP*")]
		public unsafe ImGuiViewportP* MouseViewport;
		/// <summary>
		/// Last known viewport that was hovered by mouse (even if we are not hovering any viewport any more) + honoring the _NoInputs flag.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseLastHoveredViewport")]
		[NativeName(NativeNameType.Type, "ImGuiViewportP*")]
		public unsafe ImGuiViewportP* MouseLastHoveredViewport;

		[NativeName(NativeNameType.Field, "PlatformLastFocusedViewportId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int PlatformLastFocusedViewportId;
		/// <summary>
		/// Virtual monitor used as fallback if backend doesn't provide monitor information.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FallbackMonitor")]
		[NativeName(NativeNameType.Type, "ImGuiPlatformMonitor")]
		public ImGuiPlatformMonitor FallbackMonitor;

		/// <summary>
		/// Unique sequential creation counter (mostly for testingdebugging)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportCreatedCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int ViewportCreatedCount;

		/// <summary>
		/// Unique sequential creation counter (mostly for testingdebugging)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformWindowsCreatedCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int PlatformWindowsCreatedCount;

		/// <summary>
		/// Every time the front-most window changes, we stamp its viewport with an incrementing counter<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportFocusedStampCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int ViewportFocusedStampCount;

		/// <summary>
		/// Gamepadkeyboard Navigation Focused window for navigation. Could be called 'FocusedWindow'<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* NavWindow;

		/// <summary>
		/// Focused item for navigation<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int NavId;

		/// <summary>
		/// Identify a selection scope (selection code often wants to "clear other items" when landing on an item of the selection set)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavFocusScopeId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int NavFocusScopeId;

		/// <summary>
		/// ~~ (g.ActiveId == 0) &amp;&amp; (IsKeyPressed(ImGuiKey_Space) || IsKeyDown(ImGuiKey_Enter) || IsKeyPressed(ImGuiKey_NavGamepadActivate)) ? NavId : 0, also set when calling ActivateItem()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavActivateId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int NavActivateId;

		/// <summary>
		/// ~~ IsKeyDown(ImGuiKey_Space) || IsKeyDown(ImGuiKey_Enter) || IsKeyDown(ImGuiKey_NavGamepadActivate) ? NavId : 0<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavActivateDownId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int NavActivateDownId;

		/// <summary>
		/// ~~ IsKeyPressed(ImGuiKey_Space) || IsKeyPressed(ImGuiKey_Enter) || IsKeyPressed(ImGuiKey_NavGamepadActivate) ? NavId : 0 (no repeat)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavActivatePressedId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int NavActivatePressedId;

		[NativeName(NativeNameType.Field, "NavActivateFlags")]
		[NativeName(NativeNameType.Type, "ImGuiActivateFlags")]
		public ImGuiActivateFlags NavActivateFlags;
		/// <summary>
		/// Just navigated to this id (result of a successfully MoveRequest).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavJustMovedToId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int NavJustMovedToId;

		/// <summary>
		/// Just navigated to this focus scope id (result of a successfully MoveRequest).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavJustMovedToFocusScopeId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int NavJustMovedToFocusScopeId;

		[NativeName(NativeNameType.Field, "NavJustMovedToKeyMods")]
		[NativeName(NativeNameType.Type, "ImGuiKeyChord")]
		public int NavJustMovedToKeyMods;
		/// <summary>
		/// Set by ActivateItem(), queued until next frame.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavNextActivateId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int NavNextActivateId;

		[NativeName(NativeNameType.Field, "NavNextActivateFlags")]
		[NativeName(NativeNameType.Type, "ImGuiActivateFlags")]
		public ImGuiActivateFlags NavNextActivateFlags;
		/// <summary>
		/// Keyboard or Gamepad mode? THIS CAN ONLY BE ImGuiInputSource_Keyboard or ImGuiInputSource_Mouse<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavInputSource")]
		[NativeName(NativeNameType.Type, "ImGuiInputSource")]
		public ImGuiInputSource NavInputSource;

		/// <summary>
		/// Layer we are navigating on. For now the system is hard-coded for 0=main contents and 1=menutitle bar, may expose layers later.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavLayer")]
		[NativeName(NativeNameType.Type, "ImGuiNavLayer")]
		public ImGuiNavLayer NavLayer;

		/// <summary>
		/// Nav widget has been seen this frame ~~ NavRectRel is valid<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavIdIsAlive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavIdIsAlive;

		/// <summary>
		/// When set we will update mouse position if (io.ConfigFlags &amp; ImGuiConfigFlags_NavEnableSetMousePos) if set (NB: this not enabled by default)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMousePosDirty")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavMousePosDirty;

		/// <summary>
		/// When user starts using mouse, we hide gamepadkeyboard highlight (NB: but they are still available, which is why NavDisableHighlight isn't always != NavDisableMouseHover)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavDisableHighlight")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavDisableHighlight;

		/// <summary>
		/// When user starts using gamepadkeyboard, we hide mouse hovering highlight until mouse is touched again.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavDisableMouseHover")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavDisableMouseHover;

		/// <summary>
		/// Navigation: Init &amp; Move Requests ~~ NavMoveRequest || NavInitRequest this is to perform early out in ItemAdd()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavAnyRequest")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavAnyRequest;

		/// <summary>
		/// Init request for appearing window to select first item<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavInitRequest")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavInitRequest;

		[NativeName(NativeNameType.Field, "NavInitRequestFromMove")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavInitRequestFromMove;
		/// <summary>
		/// Init request result (first item of the window, or one for which SetItemDefaultFocus() was called)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavInitResult")]
		[NativeName(NativeNameType.Type, "ImGuiNavItemData")]
		public ImGuiNavItemData NavInitResult;

		/// <summary>
		/// Move request submitted, will process result on next NewFrame()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveSubmitted")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavMoveSubmitted;

		/// <summary>
		/// Move request submitted, still scoring incoming items<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveScoringItems")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavMoveScoringItems;

		[NativeName(NativeNameType.Field, "NavMoveForwardToNextFrame")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavMoveForwardToNextFrame;
		[NativeName(NativeNameType.Field, "NavMoveFlags")]
		[NativeName(NativeNameType.Type, "ImGuiNavMoveFlags")]
		public ImGuiNavMoveFlags NavMoveFlags;
		[NativeName(NativeNameType.Field, "NavMoveScrollFlags")]
		[NativeName(NativeNameType.Type, "ImGuiScrollFlags")]
		public ImGuiScrollFlags NavMoveScrollFlags;
		[NativeName(NativeNameType.Field, "NavMoveKeyMods")]
		[NativeName(NativeNameType.Type, "ImGuiKeyChord")]
		public int NavMoveKeyMods;
		/// <summary>
		/// Direction of the move request (leftrightupdown)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveDir")]
		[NativeName(NativeNameType.Type, "ImGuiDir")]
		public ImGuiDir NavMoveDir;

		[NativeName(NativeNameType.Field, "NavMoveDirForDebug")]
		[NativeName(NativeNameType.Type, "ImGuiDir")]
		public ImGuiDir NavMoveDirForDebug;
		/// <summary>
		/// FIXME-NAV: Describe the purpose of this better. Might want to rename?<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveClipDir")]
		[NativeName(NativeNameType.Type, "ImGuiDir")]
		public ImGuiDir NavMoveClipDir;

		/// <summary>
		/// Rectangle used for scoring, in screen space. Based of window-&gt;NavRectRel[], modified for directional navigation scoring.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavScoringRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect NavScoringRect;

		/// <summary>
		/// Some nav operations (such as PageUpPageDown) enforce a region which clipper will attempt to always keep submitted<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavScoringNoClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect NavScoringNoClipRect;

		/// <summary>
		/// Metrics for debugging<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavScoringDebugCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int NavScoringDebugCount;

		/// <summary>
		/// Generally -1 or +1, 0 when tabbing without a nav id<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavTabbingDir")]
		[NativeName(NativeNameType.Type, "int")]
		public int NavTabbingDir;

		/// <summary>
		/// &gt;0 when counting items for tabbing<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavTabbingCounter")]
		[NativeName(NativeNameType.Type, "int")]
		public int NavTabbingCounter;

		/// <summary>
		/// Best move request candidate within NavWindow<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveResultLocal")]
		[NativeName(NativeNameType.Type, "ImGuiNavItemData")]
		public ImGuiNavItemData NavMoveResultLocal;

		/// <summary>
		/// Best move request candidate within NavWindow that are mostly visible (when using ImGuiNavMoveFlags_AlsoScoreVisibleSet flag)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveResultLocalVisible")]
		[NativeName(NativeNameType.Type, "ImGuiNavItemData")]
		public ImGuiNavItemData NavMoveResultLocalVisible;

		/// <summary>
		/// Best move request candidate within NavWindow's flattened hierarchy (when using ImGuiWindowFlags_NavFlattened flag)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveResultOther")]
		[NativeName(NativeNameType.Type, "ImGuiNavItemData")]
		public ImGuiNavItemData NavMoveResultOther;

		/// <summary>
		/// First tabbing request candidate within NavWindow and flattened hierarchy<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavTabbingResultFirst")]
		[NativeName(NativeNameType.Type, "ImGuiNavItemData")]
		public ImGuiNavItemData NavTabbingResultFirst;

		/// <summary>
		/// Navigation: Windowing (CTRL+TAB for list, or Menu button + keys or directional pads to moveresize) = ImGuiMod_Ctrl | ImGuiKey_Tab, for reconfiguration (see #4828)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigNavWindowingKeyNext")]
		[NativeName(NativeNameType.Type, "ImGuiKeyChord")]
		public int ConfigNavWindowingKeyNext;

		/// <summary>
		/// = ImGuiMod_Ctrl | ImGuiMod_Shift | ImGuiKey_Tab<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigNavWindowingKeyPrev")]
		[NativeName(NativeNameType.Type, "ImGuiKeyChord")]
		public int ConfigNavWindowingKeyPrev;

		/// <summary>
		/// Target window when doing CTRL+Tab (or Pad Menu + FocusPrevNext), this window is temporarily displayed top-most!<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowingTarget")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* NavWindowingTarget;

		/// <summary>
		/// Record of last valid NavWindowingTarget until DimBgRatio and NavWindowingHighlightAlpha becomes 0.0f, so the fade-out can stay on it.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowingTargetAnim")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* NavWindowingTargetAnim;

		/// <summary>
		/// Internal window actually listing the CTRL+Tab contents<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowingListWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* NavWindowingListWindow;

		[NativeName(NativeNameType.Field, "NavWindowingTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float NavWindowingTimer;
		[NativeName(NativeNameType.Field, "NavWindowingHighlightAlpha")]
		[NativeName(NativeNameType.Type, "float")]
		public float NavWindowingHighlightAlpha;
		[NativeName(NativeNameType.Field, "NavWindowingToggleLayer")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavWindowingToggleLayer;
		[NativeName(NativeNameType.Field, "NavWindowingAccumDeltaPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 NavWindowingAccumDeltaPos;
		[NativeName(NativeNameType.Field, "NavWindowingAccumDeltaSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 NavWindowingAccumDeltaSize;
		/// <summary>
		/// Render 0.0..1.0 animation when fading in a dimming background (for modal window and CTRL+TAB list)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DimBgRatio")]
		[NativeName(NativeNameType.Type, "float")]
		public float DimBgRatio;

		[NativeName(NativeNameType.Field, "DragDropActive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DragDropActive;
		/// <summary>
		/// Set when within a BeginDragDropXXXEndDragDropXXX block for a drag source.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropWithinSource")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DragDropWithinSource;

		/// <summary>
		/// Set when within a BeginDragDropXXXEndDragDropXXX block for a drag target.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropWithinTarget")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DragDropWithinTarget;

		[NativeName(NativeNameType.Field, "DragDropSourceFlags")]
		[NativeName(NativeNameType.Type, "ImGuiDragDropFlags")]
		public ImGuiDragDropFlags DragDropSourceFlags;
		[NativeName(NativeNameType.Field, "DragDropSourceFrameCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int DragDropSourceFrameCount;
		[NativeName(NativeNameType.Field, "DragDropMouseButton")]
		[NativeName(NativeNameType.Type, "int")]
		public int DragDropMouseButton;
		[NativeName(NativeNameType.Field, "DragDropPayload")]
		[NativeName(NativeNameType.Type, "ImGuiPayload")]
		public ImGuiPayload DragDropPayload;
		/// <summary>
		/// Store rectangle of current target candidate (we favor small targets when overlapping)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropTargetRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect DragDropTargetRect;

		[NativeName(NativeNameType.Field, "DragDropTargetId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int DragDropTargetId;
		[NativeName(NativeNameType.Field, "DragDropAcceptFlags")]
		[NativeName(NativeNameType.Type, "ImGuiDragDropFlags")]
		public ImGuiDragDropFlags DragDropAcceptFlags;
		/// <summary>
		/// Target item surface (we resolve overlapping targets by prioritizing the smaller surface)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropAcceptIdCurrRectSurface")]
		[NativeName(NativeNameType.Type, "float")]
		public float DragDropAcceptIdCurrRectSurface;

		/// <summary>
		/// Target item id (set at the time of accepting the payload)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropAcceptIdCurr")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int DragDropAcceptIdCurr;

		/// <summary>
		/// Target item id from previous frame (we need to store this to allow for overlapping drag and drop targets)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropAcceptIdPrev")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int DragDropAcceptIdPrev;

		/// <summary>
		/// Last time a target expressed a desire to accept the source<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropAcceptFrameCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int DragDropAcceptFrameCount;

		/// <summary>
		/// Set when holding a payload just made ButtonBehavior() return a press.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropHoldJustPressedId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int DragDropHoldJustPressedId;

		/// <summary>
		/// We don't expose the ImVector&lt;&gt; directly, ImGuiPayload only holds pointer+size<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropPayloadBufHeap")]
		[NativeName(NativeNameType.Type, "ImVector_unsigned_char")]
		public ImVectorUnsignedChar DragDropPayloadBufHeap;

		/// <summary>
		/// Local buffer for small payloads<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropPayloadBufLocal")]
		[NativeName(NativeNameType.Type, "unsigned char[16]")]
		public byte DragDropPayloadBufLocal_0;
		public byte DragDropPayloadBufLocal_1;
		public byte DragDropPayloadBufLocal_2;
		public byte DragDropPayloadBufLocal_3;
		public byte DragDropPayloadBufLocal_4;
		public byte DragDropPayloadBufLocal_5;
		public byte DragDropPayloadBufLocal_6;
		public byte DragDropPayloadBufLocal_7;
		public byte DragDropPayloadBufLocal_8;
		public byte DragDropPayloadBufLocal_9;
		public byte DragDropPayloadBufLocal_10;
		public byte DragDropPayloadBufLocal_11;
		public byte DragDropPayloadBufLocal_12;
		public byte DragDropPayloadBufLocal_13;
		public byte DragDropPayloadBufLocal_14;
		public byte DragDropPayloadBufLocal_15;

		[NativeName(NativeNameType.Field, "ClipperTempDataStacked")]
		[NativeName(NativeNameType.Type, "int")]
		public int ClipperTempDataStacked;
		[NativeName(NativeNameType.Field, "ClipperTempData")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiListClipperData")]
		public ImVectorImGuiListClipperData ClipperTempData;
		[NativeName(NativeNameType.Field, "CurrentTable")]
		[NativeName(NativeNameType.Type, "ImGuiTable*")]
		public unsafe ImGuiTable* CurrentTable;
		/// <summary>
		/// Temporary table data size (because we leave previous instances undestructed, we generally don't use TablesTempData.Size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TablesTempDataStacked")]
		[NativeName(NativeNameType.Type, "int")]
		public int TablesTempDataStacked;

		/// <summary>
		/// Temporary table data (buffers reusedshared across instances, support nesting)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TablesTempData")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiTableTempData")]
		public ImVectorImGuiTableTempData TablesTempData;

		/// <summary>
		/// Persistent table data<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Tables")]
		[NativeName(NativeNameType.Type, "ImPool_ImGuiTable")]
		public ImPoolImGuiTable Tables;

		/// <summary>
		/// Last used timestamp of each tables (SOA, for efficient GC)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TablesLastTimeActive")]
		[NativeName(NativeNameType.Type, "ImVector_float")]
		public ImVectorFloat TablesLastTimeActive;

		[NativeName(NativeNameType.Field, "DrawChannelsTempMergeBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawChannel")]
		public ImVectorImDrawChannel DrawChannelsTempMergeBuffer;
		[NativeName(NativeNameType.Field, "CurrentTabBar")]
		[NativeName(NativeNameType.Type, "ImGuiTabBar*")]
		public unsafe ImGuiTabBar* CurrentTabBar;
		[NativeName(NativeNameType.Field, "TabBars")]
		[NativeName(NativeNameType.Type, "ImPool_ImGuiTabBar")]
		public ImPoolImGuiTabBar TabBars;
		[NativeName(NativeNameType.Field, "CurrentTabBarStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiPtrOrIndex")]
		public ImVectorImGuiPtrOrIndex CurrentTabBarStack;
		[NativeName(NativeNameType.Field, "ShrinkWidthBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiShrinkWidthItem")]
		public ImVectorImGuiShrinkWidthItem ShrinkWidthBuffer;
		[NativeName(NativeNameType.Field, "HoverItemDelayId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int HoverItemDelayId;
		[NativeName(NativeNameType.Field, "HoverItemDelayIdPreviousFrame")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int HoverItemDelayIdPreviousFrame;
		/// <summary>
		/// Currently used by IsItemHovered()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverItemDelayTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float HoverItemDelayTimer;

		/// <summary>
		/// Currently used by IsItemHovered(): grace time before g.TooltipHoverTimer gets cleared.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverItemDelayClearTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float HoverItemDelayClearTimer;

		/// <summary>
		/// Mouse has once been stationary on this item. Only reset after departing the item.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverItemUnlockedStationaryId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int HoverItemUnlockedStationaryId;

		/// <summary>
		/// Mouse has once been stationary on this window. Only reset after departing the window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverWindowUnlockedStationaryId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int HoverWindowUnlockedStationaryId;

		[NativeName(NativeNameType.Field, "MouseCursor")]
		[NativeName(NativeNameType.Type, "ImGuiMouseCursor")]
		public ImGuiMouseCursor MouseCursor;
		/// <summary>
		/// Time the mouse has been stationary (with some loose heuristic)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseStationaryTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float MouseStationaryTimer;

		[NativeName(NativeNameType.Field, "MouseLastValidPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 MouseLastValidPos;
		[NativeName(NativeNameType.Field, "InputTextState")]
		[NativeName(NativeNameType.Type, "ImGuiInputTextState")]
		public ImGuiInputTextState InputTextState;
		[NativeName(NativeNameType.Field, "InputTextDeactivatedState")]
		[NativeName(NativeNameType.Type, "ImGuiInputTextDeactivatedState")]
		public ImGuiInputTextDeactivatedState InputTextDeactivatedState;
		[NativeName(NativeNameType.Field, "InputTextPasswordFont")]
		[NativeName(NativeNameType.Type, "ImFont")]
		public ImFont InputTextPasswordFont;
		/// <summary>
		/// Temporary text input when CTRL+clicking on a slider, etc.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TempInputId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int TempInputId;

		/// <summary>
		/// Store user options for color edit widgets<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorEditOptions")]
		[NativeName(NativeNameType.Type, "ImGuiColorEditFlags")]
		public ImGuiColorEditFlags ColorEditOptions;

		/// <summary>
		/// Set temporarily while inside of the parent-most ColorEdit4ColorPicker4 (because they call each others).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorEditCurrentID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ColorEditCurrentID;

		/// <summary>
		/// ID we are savingrestoring HS for<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorEditSavedID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ColorEditSavedID;

		/// <summary>
		/// Backup of last Hue associated to LastColor, so we can restore Hue in lossy RGB&lt;&gt;HSV round trips<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorEditSavedHue")]
		[NativeName(NativeNameType.Type, "float")]
		public float ColorEditSavedHue;

		/// <summary>
		/// Backup of last Saturation associated to LastColor, so we can restore Saturation in lossy RGB&lt;&gt;HSV round trips<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorEditSavedSat")]
		[NativeName(NativeNameType.Type, "float")]
		public float ColorEditSavedSat;

		/// <summary>
		/// RGB value with alpha set to 0.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorEditSavedColor")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint ColorEditSavedColor;

		/// <summary>
		/// Initialreference color at the time of opening the color picker.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorPickerRef")]
		[NativeName(NativeNameType.Type, "ImVec4")]
		public Vector4 ColorPickerRef;

		[NativeName(NativeNameType.Field, "ComboPreviewData")]
		[NativeName(NativeNameType.Type, "ImGuiComboPreviewData")]
		public ImGuiComboPreviewData ComboPreviewData;
		[NativeName(NativeNameType.Field, "SliderGrabClickOffset")]
		[NativeName(NativeNameType.Type, "float")]
		public float SliderGrabClickOffset;
		/// <summary>
		/// Accumulated slider delta when using navigation controls.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SliderCurrentAccum")]
		[NativeName(NativeNameType.Type, "float")]
		public float SliderCurrentAccum;

		/// <summary>
		/// Has the accumulated slider delta changed since last time we tried to apply it?<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SliderCurrentAccumDirty")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte SliderCurrentAccumDirty;

		[NativeName(NativeNameType.Field, "DragCurrentAccumDirty")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DragCurrentAccumDirty;
		/// <summary>
		/// Accumulator for dragging modification. Always high-precision, not rounded by end-user precision settings<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DragCurrentAccum")]
		[NativeName(NativeNameType.Type, "float")]
		public float DragCurrentAccum;

		/// <summary>
		/// If speed == 0.0f, uses (max-min) * DragSpeedDefaultRatio<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DragSpeedDefaultRatio")]
		[NativeName(NativeNameType.Type, "float")]
		public float DragSpeedDefaultRatio;

		/// <summary>
		/// Distance between mouse and center of grab box, normalized in parent space. Use storage?<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollbarClickDeltaToGrabCenter")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollbarClickDeltaToGrabCenter;

		/// <summary>
		/// Backup for style.Alpha for BeginDisabled()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DisabledAlphaBackup")]
		[NativeName(NativeNameType.Type, "float")]
		public float DisabledAlphaBackup;

		[NativeName(NativeNameType.Field, "DisabledStackSize")]
		[NativeName(NativeNameType.Type, "short")]
		public short DisabledStackSize;
		[NativeName(NativeNameType.Field, "TooltipOverrideCount")]
		[NativeName(NativeNameType.Type, "short")]
		public short TooltipOverrideCount;
		/// <summary>
		/// If no custom clipboard handler is defined<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ClipboardHandlerData")]
		[NativeName(NativeNameType.Type, "ImVector_char")]
		public ImVectorChar ClipboardHandlerData;

		/// <summary>
		/// A list of menu IDs that were rendered at least once<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MenusIdSubmittedThisFrame")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiID")]
		public ImVectorImGuiID MenusIdSubmittedThisFrame;

		/// <summary>
		/// Platform support Data updated by current frame<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformImeData")]
		[NativeName(NativeNameType.Type, "ImGuiPlatformImeData")]
		public ImGuiPlatformImeData PlatformImeData;

		/// <summary>
		/// Previous frame data (when changing we will call io.SetPlatformImeDataFn<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformImeDataPrev")]
		[NativeName(NativeNameType.Type, "ImGuiPlatformImeData")]
		public ImGuiPlatformImeData PlatformImeDataPrev;

		[NativeName(NativeNameType.Field, "PlatformImeViewport")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int PlatformImeViewport;
		/// <summary>
		/// '.' or *localeconv()-&gt;decimal_point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformLocaleDecimalPoint")]
		[NativeName(NativeNameType.Type, "char")]
		public byte PlatformLocaleDecimalPoint;

		[NativeName(NativeNameType.Field, "DockContext")]
		[NativeName(NativeNameType.Type, "ImGuiDockContext")]
		public ImGuiDockContext DockContext;
		[NativeName(NativeNameType.Field, "DockNodeWindowMenuHandler")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiContext* ctx, ImGuiDockNode* node, ImGuiTabBar* tab_bar)*")]
		public unsafe void* DockNodeWindowMenuHandler;
		[NativeName(NativeNameType.Field, "SettingsLoaded")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte SettingsLoaded;
		/// <summary>
		/// Save .ini Settings to memory when time reaches zero<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsDirtyTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float SettingsDirtyTimer;

		/// <summary>
		/// In memory .ini settings<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsIniData")]
		[NativeName(NativeNameType.Type, "ImGuiTextBuffer")]
		public ImGuiTextBuffer SettingsIniData;

		/// <summary>
		/// List of .ini settings handlers<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsHandlers")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiSettingsHandler")]
		public ImVectorImGuiSettingsHandler SettingsHandlers;

		/// <summary>
		/// ImGuiWindow .ini settings entries<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsWindows")]
		[NativeName(NativeNameType.Type, "ImChunkStream_ImGuiWindowSettings")]
		public ImChunkStreamImGuiWindowSettings SettingsWindows;

		/// <summary>
		/// ImGuiTable .ini settings entries<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsTables")]
		[NativeName(NativeNameType.Type, "ImChunkStream_ImGuiTableSettings")]
		public ImChunkStreamImGuiTableSettings SettingsTables;

		/// <summary>
		/// Hooks for extensions (e.g. test engine)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Hooks")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiContextHook")]
		public ImVectorImGuiContextHook Hooks;

		/// <summary>
		/// Next available HookId<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HookIdNext")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int HookIdNext;

		[NativeName(NativeNameType.Field, "LocalizationTable")]
		[NativeName(NativeNameType.Type, "const char*[9]")]
		public unsafe byte* LocalizationTable_0;
		public unsafe byte* LocalizationTable_1;
		public unsafe byte* LocalizationTable_2;
		public unsafe byte* LocalizationTable_3;
		public unsafe byte* LocalizationTable_4;
		public unsafe byte* LocalizationTable_5;
		public unsafe byte* LocalizationTable_6;
		public unsafe byte* LocalizationTable_7;
		public unsafe byte* LocalizationTable_8;
		/// <summary>
		/// CaptureLogging Currently capturing<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LogEnabled")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte LogEnabled;

		/// <summary>
		/// Capture target<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LogType")]
		[NativeName(NativeNameType.Type, "ImGuiLogType")]
		public ImGuiLogType LogType;

		/// <summary>
		/// If != NULL log to stdout file<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LogFile")]
		[NativeName(NativeNameType.Type, "ImFileHandle")]
		public ImFileHandle LogFile;

		/// <summary>
		/// Accumulation buffer when log to clipboard. This is pointer so our GImGui static constructor doesn't call heap allocators.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LogBuffer")]
		[NativeName(NativeNameType.Type, "ImGuiTextBuffer")]
		public ImGuiTextBuffer LogBuffer;

		[NativeName(NativeNameType.Field, "LogNextPrefix")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* LogNextPrefix;
		[NativeName(NativeNameType.Field, "LogNextSuffix")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* LogNextSuffix;
		[NativeName(NativeNameType.Field, "LogLinePosY")]
		[NativeName(NativeNameType.Type, "float")]
		public float LogLinePosY;
		[NativeName(NativeNameType.Field, "LogLineFirstItem")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte LogLineFirstItem;
		[NativeName(NativeNameType.Field, "LogDepthRef")]
		[NativeName(NativeNameType.Type, "int")]
		public int LogDepthRef;
		[NativeName(NativeNameType.Field, "LogDepthToExpand")]
		[NativeName(NativeNameType.Type, "int")]
		public int LogDepthToExpand;
		/// <summary>
		/// Defaultstored value for LogDepthMaxExpand if not specified in the LogXXX function call.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LogDepthToExpandDefault")]
		[NativeName(NativeNameType.Type, "int")]
		public int LogDepthToExpandDefault;

		[NativeName(NativeNameType.Field, "DebugLogFlags")]
		[NativeName(NativeNameType.Type, "ImGuiDebugLogFlags")]
		public ImGuiDebugLogFlags DebugLogFlags;
		[NativeName(NativeNameType.Field, "DebugLogBuf")]
		[NativeName(NativeNameType.Type, "ImGuiTextBuffer")]
		public ImGuiTextBuffer DebugLogBuf;
		[NativeName(NativeNameType.Field, "DebugLogIndex")]
		[NativeName(NativeNameType.Type, "ImGuiTextIndex")]
		public ImGuiTextIndex DebugLogIndex;
		[NativeName(NativeNameType.Field, "DebugLogClipperAutoDisableFrames")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte DebugLogClipperAutoDisableFrames;
		/// <summary>
		/// For DebugLocateItemOnHover(). This is used together with DebugLocateId which is in a hotcached spot above.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugLocateFrames")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte DebugLocateFrames;

		/// <summary>
		/// Cycle between 0..9 then wrap around.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugBeginReturnValueCullDepth")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte DebugBeginReturnValueCullDepth;

		/// <summary>
		/// Item picker is active (started with DebugStartItemPicker())<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugItemPickerActive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DebugItemPickerActive;

		[NativeName(NativeNameType.Field, "DebugItemPickerMouseButton")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte DebugItemPickerMouseButton;
		/// <summary>
		/// Will call IM_DEBUG_BREAK() when encountering this ID<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugItemPickerBreakId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int DebugItemPickerBreakId;

		[NativeName(NativeNameType.Field, "DebugMetricsConfig")]
		[NativeName(NativeNameType.Type, "ImGuiMetricsConfig")]
		public ImGuiMetricsConfig DebugMetricsConfig;
		[NativeName(NativeNameType.Field, "DebugStackTool")]
		[NativeName(NativeNameType.Type, "ImGuiStackTool")]
		public ImGuiStackTool DebugStackTool;
		/// <summary>
		/// Hovered dock node.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugHoveredDockNode")]
		[NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public unsafe ImGuiDockNode* DebugHoveredDockNode;

		/// <summary>
		/// Misc Calculate estimate of framerate for user over the last 60 frames..<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FramerateSecPerFrame")]
		[NativeName(NativeNameType.Type, "float[60]")]
		public float FramerateSecPerFrame_0;
		public float FramerateSecPerFrame_1;
		public float FramerateSecPerFrame_2;
		public float FramerateSecPerFrame_3;
		public float FramerateSecPerFrame_4;
		public float FramerateSecPerFrame_5;
		public float FramerateSecPerFrame_6;
		public float FramerateSecPerFrame_7;
		public float FramerateSecPerFrame_8;
		public float FramerateSecPerFrame_9;
		public float FramerateSecPerFrame_10;
		public float FramerateSecPerFrame_11;
		public float FramerateSecPerFrame_12;
		public float FramerateSecPerFrame_13;
		public float FramerateSecPerFrame_14;
		public float FramerateSecPerFrame_15;
		public float FramerateSecPerFrame_16;
		public float FramerateSecPerFrame_17;
		public float FramerateSecPerFrame_18;
		public float FramerateSecPerFrame_19;
		public float FramerateSecPerFrame_20;
		public float FramerateSecPerFrame_21;
		public float FramerateSecPerFrame_22;
		public float FramerateSecPerFrame_23;
		public float FramerateSecPerFrame_24;
		public float FramerateSecPerFrame_25;
		public float FramerateSecPerFrame_26;
		public float FramerateSecPerFrame_27;
		public float FramerateSecPerFrame_28;
		public float FramerateSecPerFrame_29;
		public float FramerateSecPerFrame_30;
		public float FramerateSecPerFrame_31;
		public float FramerateSecPerFrame_32;
		public float FramerateSecPerFrame_33;
		public float FramerateSecPerFrame_34;
		public float FramerateSecPerFrame_35;
		public float FramerateSecPerFrame_36;
		public float FramerateSecPerFrame_37;
		public float FramerateSecPerFrame_38;
		public float FramerateSecPerFrame_39;
		public float FramerateSecPerFrame_40;
		public float FramerateSecPerFrame_41;
		public float FramerateSecPerFrame_42;
		public float FramerateSecPerFrame_43;
		public float FramerateSecPerFrame_44;
		public float FramerateSecPerFrame_45;
		public float FramerateSecPerFrame_46;
		public float FramerateSecPerFrame_47;
		public float FramerateSecPerFrame_48;
		public float FramerateSecPerFrame_49;
		public float FramerateSecPerFrame_50;
		public float FramerateSecPerFrame_51;
		public float FramerateSecPerFrame_52;
		public float FramerateSecPerFrame_53;
		public float FramerateSecPerFrame_54;
		public float FramerateSecPerFrame_55;
		public float FramerateSecPerFrame_56;
		public float FramerateSecPerFrame_57;
		public float FramerateSecPerFrame_58;
		public float FramerateSecPerFrame_59;

		[NativeName(NativeNameType.Field, "FramerateSecPerFrameIdx")]
		[NativeName(NativeNameType.Type, "int")]
		public int FramerateSecPerFrameIdx;
		[NativeName(NativeNameType.Field, "FramerateSecPerFrameCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int FramerateSecPerFrameCount;
		[NativeName(NativeNameType.Field, "FramerateSecPerFrameAccum")]
		[NativeName(NativeNameType.Type, "float")]
		public float FramerateSecPerFrameAccum;
		/// <summary>
		/// Explicit capture override via SetNextFrameWantCaptureMouse()SetNextFrameWantCaptureKeyboard(). Default to -1.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WantCaptureMouseNextFrame")]
		[NativeName(NativeNameType.Type, "int")]
		public int WantCaptureMouseNextFrame;

		/// <summary>
		/// "<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WantCaptureKeyboardNextFrame")]
		[NativeName(NativeNameType.Type, "int")]
		public int WantCaptureKeyboardNextFrame;

		[NativeName(NativeNameType.Field, "WantTextInputNextFrame")]
		[NativeName(NativeNameType.Type, "int")]
		public int WantTextInputNextFrame;
		/// <summary>
		/// Temporary text buffer<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TempBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_char")]
		public ImVectorChar TempBuffer;




		public unsafe Span<ImGuiKeyOwnerData> KeysOwnerData
		
		{
			get
			{
				fixed (ImGuiKeyOwnerData* p = &this.KeysOwnerData_0)
				{
					return new Span<ImGuiKeyOwnerData>(p, 140);
				}
			}
		}
		[NativeName(NativeNameType.Func, "ImGuiContext_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiContext* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiIO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiIO
	{
		/// <summary>
		/// = 0               See ImGuiConfigFlags_ enum. Set by userapplication. Gamepadkeyboard navigation options, etc.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigFlags")]
		[NativeName(NativeNameType.Type, "ImGuiConfigFlags")]
		public ImGuiConfigFlags ConfigFlags;

		/// <summary>
		/// = 0               See ImGuiBackendFlags_ enum. Set by backend (imgui_impl_xxx files or custom backend) to communicate features supported by the backend.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BackendFlags")]
		[NativeName(NativeNameType.Type, "ImGuiBackendFlags")]
		public ImGuiBackendFlags BackendFlags;

		/// <summary>
		/// &lt;unset&gt;           Main display size, in pixels (generally == GetMainViewport()-&gt;Size). May change every frame.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplaySize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 DisplaySize;

		/// <summary>
		/// = 1.0f60.0f      Time elapsed since last frame, in seconds. May change every frame.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DeltaTime")]
		[NativeName(NativeNameType.Type, "float")]
		public float DeltaTime;

		/// <summary>
		/// = 5.0f            Minimum time between saving positionssizes to .ini file, in seconds.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IniSavingRate")]
		[NativeName(NativeNameType.Type, "float")]
		public float IniSavingRate;

		/// <summary>
		/// = "imgui.ini"     Path to .ini file (important: default "imgui.ini" is relative to current working dir!). Set NULL to disable automatic .ini loadingsaving or if you want to manually call LoadIniSettingsXXX()  SaveIniSettingsXXX() functions.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IniFilename")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* IniFilename;

		/// <summary>
		/// = "imgui_log.txt" Path to .log file (default parameter to ImGui::LogToFile when no file is specified).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LogFilename")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* LogFilename;

		/// <summary>
		/// = NULL            Store your own data.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "UserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserData;

		/// <summary>
		/// &lt;auto&gt;            Font atlas: load, rasterize and pack one or more fonts into a single texture.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Fonts")]
		[NativeName(NativeNameType.Type, "ImFontAtlas*")]
		public unsafe ImFontAtlas* Fonts;

		/// <summary>
		/// = 1.0f            Global scale all fonts<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FontGlobalScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float FontGlobalScale;

		/// <summary>
		/// = false           Allow user scaling text of individual window with CTRL+Wheel.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FontAllowUserScaling")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte FontAllowUserScaling;

		/// <summary>
		/// = NULL            Font to use on NewFrame(). Use NULL to uses Fonts-&gt;Fonts[0].<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FontDefault")]
		[NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* FontDefault;

		/// <summary>
		/// = (1, 1)          For retina display or other situations where window coordinates are different from framebuffer coordinates. This generally ends up in ImDrawData::FramebufferScale.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayFramebufferScale")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 DisplayFramebufferScale;

		/// <summary>
		/// Docking options (when ImGuiConfigFlags_DockingEnable is set) = false           Simplified docking mode: disable window splitting, so docking is limited to merging multiple windows together into tab-bars.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigDockingNoSplit")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigDockingNoSplit;

		/// <summary>
		/// = false           Enable docking with holding Shift key (reduce visual noise, allows dropping in wider space)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigDockingWithShift")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigDockingWithShift;

		/// <summary>
		/// = false           [BETA] [FIXME: This currently creates regression with auto-sizing and general overhead] Make every single floating window display within a docking node.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigDockingAlwaysTabBar")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigDockingAlwaysTabBar;

		/// <summary>
		/// = false           [BETA] Make window or viewport transparent when docking and only display docking boxes on the target viewport. Useful if rendering of multiple viewport cannot be synced. Best used with ConfigViewportsNoAutoMerge.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigDockingTransparentPayload")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigDockingTransparentPayload;

		/// <summary>
		/// Viewport options (when ImGuiConfigFlags_ViewportsEnable is set) = false;          Set to make all floating imgui windows always create their own viewport. Otherwise, they are merged into the main host viewports when overlapping it. May also set ImGuiViewportFlags_NoAutoMerge on individual viewport.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigViewportsNoAutoMerge")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigViewportsNoAutoMerge;

		/// <summary>
		/// = false           Disable default OS task bar icon flag for secondary viewports. When a viewport doesn't want a task bar icon, ImGuiViewportFlags_NoTaskBarIcon will be set on it.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigViewportsNoTaskBarIcon")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigViewportsNoTaskBarIcon;

		/// <summary>
		/// = true            Disable default OS window decoration flag for secondary viewports. When a viewport doesn't want window decorations, ImGuiViewportFlags_NoDecoration will be set on it. Enabling decoration can create subsequent issues at OS levels (e.g. minimum window size).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigViewportsNoDecoration")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigViewportsNoDecoration;

		/// <summary>
		/// = false           Disable default OS parenting to main viewport for secondary viewports. By default, viewports are marked with ParentViewportId = &lt;main_viewport&gt;, expecting the platform backend to setup a parentchild relationship between the OS windows (some backend may ignore this). Set to true if you want the default to be 0, then all viewports will be top-level OS windows.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigViewportsNoDefaultParent")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigViewportsNoDefaultParent;

		/// <summary>
		/// Miscellaneous options = false           Request ImGui to draw a mouse cursor for you (if you are on a platform without a mouse cursor). Cannot be easily renamed to 'io.ConfigXXX' because this is frequently used by backend implementations.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDrawCursor")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte MouseDrawCursor;

		/// <summary>
		/// = defined(__APPLE__)  OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts using CmdSuper instead of Ctrl, LineText Start and End using Cmd+Arrows instead of HomeEnd, Double click selects by word instead of selecting whole text, Multi-selection in lists uses CmdSuper instead of Ctrl.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigMacOSXBehaviors")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigMacOSXBehaviors;

		/// <summary>
		/// = true            Enable input queue trickling: some types of events submitted during the same frame (e.g. button down + up) will be spread over multiple frames, improving interactions with low framerates.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigInputTrickleEventQueue")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigInputTrickleEventQueue;

		/// <summary>
		/// = true            Enable blinking cursor (optional as some users consider it to be distracting).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigInputTextCursorBlink")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigInputTextCursorBlink;

		/// <summary>
		/// = false           [BETA] Pressing Enter will keep item active and select contents (single-line only).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigInputTextEnterKeepActive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigInputTextEnterKeepActive;

		/// <summary>
		/// = false           [BETA] Enable turning DragXXX widgets into text input with a simple mouse click-release (without moving). Not desirable on devices without a keyboard.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigDragClickToInputText")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigDragClickToInputText;

		/// <summary>
		/// = true            Enable resizing of windows from their edges and from the lower-left corner. This requires (io.BackendFlags &amp; ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback. (This used to be a per-window ImGuiWindowFlags_ResizeFromAnySide flag)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigWindowsResizeFromEdges")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigWindowsResizeFromEdges;

		/// <summary>
		/// = false        Enable allowing to move windows only when clicking on their title bar. Does not apply to windows without a title bar.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigWindowsMoveFromTitleBarOnly")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigWindowsMoveFromTitleBarOnly;

		/// <summary>
		/// = 60.0f           Timer (in seconds) to free transient windowstables memory buffers when unused. Set to -1.0f to disable.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigMemoryCompactTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float ConfigMemoryCompactTimer;

		/// <summary>
		/// Inputs Behaviors<br/>
		/// (other variables, ones which are expected to be tweaked within UI code, are exposed in ImGuiStyle) = 0.30f           Time for a double-click, in seconds.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDoubleClickTime")]
		[NativeName(NativeNameType.Type, "float")]
		public float MouseDoubleClickTime;

		/// <summary>
		/// = 6.0f            Distance threshold to stay in to validate a double-click, in pixels.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDoubleClickMaxDist")]
		[NativeName(NativeNameType.Type, "float")]
		public float MouseDoubleClickMaxDist;

		/// <summary>
		/// = 6.0f            Distance threshold before considering we are dragging.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDragThreshold")]
		[NativeName(NativeNameType.Type, "float")]
		public float MouseDragThreshold;

		/// <summary>
		/// = 0.275f          When holding a keybutton, time before it starts repeating, in seconds (for buttons in Repeat mode, etc.).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "KeyRepeatDelay")]
		[NativeName(NativeNameType.Type, "float")]
		public float KeyRepeatDelay;

		/// <summary>
		/// = 0.050f          When holding a keybutton, rate at which it repeats, in seconds.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "KeyRepeatRate")]
		[NativeName(NativeNameType.Type, "float")]
		public float KeyRepeatRate;

		/// <summary>
		/// Tools to test correct BeginEnd and BeginChildEndChild behaviors.<br/>
		/// Presently Begin()End() and BeginChild()EndChild() needs to ALWAYS be called in tandem, regardless of return value of BeginXXX()<br/>
		/// This is inconsistent with other BeginXXX functions and create confusion for many users.<br/>
		/// We expect to update the API eventually. In the meanwhile we provide tools to facilitate checking user-code behavior. = false           First-time calls to Begin()BeginChild() will return false. NEEDS TO BE SET AT APPLICATION BOOT TIME if you don't want to miss windows.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigDebugBeginReturnValueOnce")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigDebugBeginReturnValueOnce;

		/// <summary>
		/// = false           Some calls to Begin()BeginChild() will return false. Will cycle through window depths then repeat. Suggested use: add "io.ConfigDebugBeginReturnValue = io.KeyShift" in your main loop then occasionally press SHIFT. Windows should be flickering while running.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigDebugBeginReturnValueLoop")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigDebugBeginReturnValueLoop;

		/// <summary>
		/// Option to deactivate io.AddFocusEvent(false) handling. May facilitate interactions with a debugger when focus loss leads to clearing inputs data.<br/>
		/// Backends may have other side-effects on focus loss, so this will reduce side-effects but not necessary remove all of them.<br/>
		/// Consider using e.g. Win32's IsDebuggerPresent() as an additional filter (or see ImOsIsDebuggerPresent() in imgui_test_engineimgui_te_utils.cpp for a Unix compatible version). = false           Ignore io.AddFocusEvent(false), consequently not calling io.ClearInputKeys() in input processing.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigDebugIgnoreFocusLoss")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigDebugIgnoreFocusLoss;

		/// <summary>
		/// Option to audit .ini data = false           Save .ini data with extra comments (particularly helpful for Docking, but makes saving slower)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigDebugIniSettings")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ConfigDebugIniSettings;

		/// <summary>
		/// Optional: PlatformRenderer backend name (informational only! will be displayed in About Window) + User data for backendwrappers to store their own stuff. = NULL<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BackendPlatformName")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* BackendPlatformName;

		/// <summary>
		/// = NULL<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BackendRendererName")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* BackendRendererName;

		/// <summary>
		/// = NULL            User data for platform backend<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BackendPlatformUserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* BackendPlatformUserData;

		/// <summary>
		/// = NULL            User data for renderer backend<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BackendRendererUserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* BackendRendererUserData;

		/// <summary>
		/// = NULL            User data for non C++ programming language backend<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BackendLanguageUserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* BackendLanguageUserData;

		[NativeName(NativeNameType.Field, "GetClipboardTextFn")]
		[NativeName(NativeNameType.Type, "const char* (*)(void* user_data)*")]
		public unsafe void* GetClipboardTextFn;
		[NativeName(NativeNameType.Field, "SetClipboardTextFn")]
		[NativeName(NativeNameType.Type, "void (*)(void* user_data, const char* text)*")]
		public unsafe void* SetClipboardTextFn;
		[NativeName(NativeNameType.Field, "ClipboardUserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* ClipboardUserData;
		[NativeName(NativeNameType.Field, "SetPlatformImeDataFn")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* viewport, ImGuiPlatformImeData* data)*")]
		public unsafe void* SetPlatformImeDataFn;
		/// <summary>
		/// Unused field to keep data structure the same size.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "_UnusedPadding")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UnusedPadding;

		/// <summary>
		/// Set when Dear ImGui will use mouse inputs, in this case do not dispatch them to your main gameapplication (either way, always pass on mouse inputs to imgui). (e.g. unclicked mouse is hovering over an imgui window, widget is active, mouse was clicked over an imgui window, etc.).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WantCaptureMouse")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantCaptureMouse;

		/// <summary>
		/// Set when Dear ImGui will use keyboard inputs, in this case do not dispatch them to your main gameapplication (either way, always pass keyboard inputs to imgui). (e.g. InputText active, or an imgui window is focused and navigation is enabled, etc.).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WantCaptureKeyboard")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantCaptureKeyboard;

		/// <summary>
		/// Mobileconsole: when set, you may display an on-screen keyboard. This is set by Dear ImGui when it wants textual keyboard input to happen (e.g. when a InputText widget is active).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WantTextInput")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantTextInput;

		/// <summary>
		/// MousePos has been altered, backend should reposition mouse on next frame. Rarely used! Set only when ImGuiConfigFlags_NavEnableSetMousePos flag is enabled.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WantSetMousePos")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantSetMousePos;

		/// <summary>
		/// When manual .ini loadsave is active (io.IniFilename == NULL), this will be set to notify your application that you can call SaveIniSettingsToMemory() and save yourself. Important: clear io.WantSaveIniSettings yourself after saving!<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WantSaveIniSettings")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantSaveIniSettings;

		/// <summary>
		/// KeyboardGamepad navigation is currently allowed (will handle ImGuiKey_NavXXX events) = a window is focused and it doesn't use the ImGuiWindowFlags_NoNavInputs flag.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavActive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavActive;

		/// <summary>
		/// KeyboardGamepad navigation is visible and allowed (will handle ImGuiKey_NavXXX events).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavVisible")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavVisible;

		/// <summary>
		/// Estimate of application framerate (rolling average over 60 frames, based on io.DeltaTime), in frame per second. Solely for convenience. Slow applications may not want to use a moving average or may want to reset underlying buffers occasionally.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Framerate")]
		[NativeName(NativeNameType.Type, "float")]
		public float Framerate;

		/// <summary>
		/// Vertices output during last call to Render()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MetricsRenderVertices")]
		[NativeName(NativeNameType.Type, "int")]
		public int MetricsRenderVertices;

		/// <summary>
		/// Indices output during last call to Render() = number of triangles * 3<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MetricsRenderIndices")]
		[NativeName(NativeNameType.Type, "int")]
		public int MetricsRenderIndices;

		/// <summary>
		/// Number of visible windows<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MetricsRenderWindows")]
		[NativeName(NativeNameType.Type, "int")]
		public int MetricsRenderWindows;

		/// <summary>
		/// Number of active windows<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MetricsActiveWindows")]
		[NativeName(NativeNameType.Type, "int")]
		public int MetricsActiveWindows;

		/// <summary>
		/// Number of active allocations, updated by MemAllocMemFree based on current context. May be off if you have multiple imgui contexts.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MetricsActiveAllocations")]
		[NativeName(NativeNameType.Type, "int")]
		public int MetricsActiveAllocations;

		/// <summary>
		/// Mouse delta. Note that this is zero if either current or previous position are invalid (-FLT_MAX,-FLT_MAX), so a disappearingreappearing mouse won't have a huge delta.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDelta")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 MouseDelta;

		/// <summary>
		/// [LEGACY] Input: map of indices into the KeysDown[512] entries array which represent your "native" keyboard state. The first 512 are now unused and should be kept zero. Legacy backend will write into KeyMap[] using ImGuiKey_ indices which are always &gt;512.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "KeyMap")]
		[NativeName(NativeNameType.Type, "int[652]")]
		public int KeyMap_0;
		public int KeyMap_1;
		public int KeyMap_2;
		public int KeyMap_3;
		public int KeyMap_4;
		public int KeyMap_5;
		public int KeyMap_6;
		public int KeyMap_7;
		public int KeyMap_8;
		public int KeyMap_9;
		public int KeyMap_10;
		public int KeyMap_11;
		public int KeyMap_12;
		public int KeyMap_13;
		public int KeyMap_14;
		public int KeyMap_15;
		public int KeyMap_16;
		public int KeyMap_17;
		public int KeyMap_18;
		public int KeyMap_19;
		public int KeyMap_20;
		public int KeyMap_21;
		public int KeyMap_22;
		public int KeyMap_23;
		public int KeyMap_24;
		public int KeyMap_25;
		public int KeyMap_26;
		public int KeyMap_27;
		public int KeyMap_28;
		public int KeyMap_29;
		public int KeyMap_30;
		public int KeyMap_31;
		public int KeyMap_32;
		public int KeyMap_33;
		public int KeyMap_34;
		public int KeyMap_35;
		public int KeyMap_36;
		public int KeyMap_37;
		public int KeyMap_38;
		public int KeyMap_39;
		public int KeyMap_40;
		public int KeyMap_41;
		public int KeyMap_42;
		public int KeyMap_43;
		public int KeyMap_44;
		public int KeyMap_45;
		public int KeyMap_46;
		public int KeyMap_47;
		public int KeyMap_48;
		public int KeyMap_49;
		public int KeyMap_50;
		public int KeyMap_51;
		public int KeyMap_52;
		public int KeyMap_53;
		public int KeyMap_54;
		public int KeyMap_55;
		public int KeyMap_56;
		public int KeyMap_57;
		public int KeyMap_58;
		public int KeyMap_59;
		public int KeyMap_60;
		public int KeyMap_61;
		public int KeyMap_62;
		public int KeyMap_63;
		public int KeyMap_64;
		public int KeyMap_65;
		public int KeyMap_66;
		public int KeyMap_67;
		public int KeyMap_68;
		public int KeyMap_69;
		public int KeyMap_70;
		public int KeyMap_71;
		public int KeyMap_72;
		public int KeyMap_73;
		public int KeyMap_74;
		public int KeyMap_75;
		public int KeyMap_76;
		public int KeyMap_77;
		public int KeyMap_78;
		public int KeyMap_79;
		public int KeyMap_80;
		public int KeyMap_81;
		public int KeyMap_82;
		public int KeyMap_83;
		public int KeyMap_84;
		public int KeyMap_85;
		public int KeyMap_86;
		public int KeyMap_87;
		public int KeyMap_88;
		public int KeyMap_89;
		public int KeyMap_90;
		public int KeyMap_91;
		public int KeyMap_92;
		public int KeyMap_93;
		public int KeyMap_94;
		public int KeyMap_95;
		public int KeyMap_96;
		public int KeyMap_97;
		public int KeyMap_98;
		public int KeyMap_99;
		public int KeyMap_100;
		public int KeyMap_101;
		public int KeyMap_102;
		public int KeyMap_103;
		public int KeyMap_104;
		public int KeyMap_105;
		public int KeyMap_106;
		public int KeyMap_107;
		public int KeyMap_108;
		public int KeyMap_109;
		public int KeyMap_110;
		public int KeyMap_111;
		public int KeyMap_112;
		public int KeyMap_113;
		public int KeyMap_114;
		public int KeyMap_115;
		public int KeyMap_116;
		public int KeyMap_117;
		public int KeyMap_118;
		public int KeyMap_119;
		public int KeyMap_120;
		public int KeyMap_121;
		public int KeyMap_122;
		public int KeyMap_123;
		public int KeyMap_124;
		public int KeyMap_125;
		public int KeyMap_126;
		public int KeyMap_127;
		public int KeyMap_128;
		public int KeyMap_129;
		public int KeyMap_130;
		public int KeyMap_131;
		public int KeyMap_132;
		public int KeyMap_133;
		public int KeyMap_134;
		public int KeyMap_135;
		public int KeyMap_136;
		public int KeyMap_137;
		public int KeyMap_138;
		public int KeyMap_139;
		public int KeyMap_140;
		public int KeyMap_141;
		public int KeyMap_142;
		public int KeyMap_143;
		public int KeyMap_144;
		public int KeyMap_145;
		public int KeyMap_146;
		public int KeyMap_147;
		public int KeyMap_148;
		public int KeyMap_149;
		public int KeyMap_150;
		public int KeyMap_151;
		public int KeyMap_152;
		public int KeyMap_153;
		public int KeyMap_154;
		public int KeyMap_155;
		public int KeyMap_156;
		public int KeyMap_157;
		public int KeyMap_158;
		public int KeyMap_159;
		public int KeyMap_160;
		public int KeyMap_161;
		public int KeyMap_162;
		public int KeyMap_163;
		public int KeyMap_164;
		public int KeyMap_165;
		public int KeyMap_166;
		public int KeyMap_167;
		public int KeyMap_168;
		public int KeyMap_169;
		public int KeyMap_170;
		public int KeyMap_171;
		public int KeyMap_172;
		public int KeyMap_173;
		public int KeyMap_174;
		public int KeyMap_175;
		public int KeyMap_176;
		public int KeyMap_177;
		public int KeyMap_178;
		public int KeyMap_179;
		public int KeyMap_180;
		public int KeyMap_181;
		public int KeyMap_182;
		public int KeyMap_183;
		public int KeyMap_184;
		public int KeyMap_185;
		public int KeyMap_186;
		public int KeyMap_187;
		public int KeyMap_188;
		public int KeyMap_189;
		public int KeyMap_190;
		public int KeyMap_191;
		public int KeyMap_192;
		public int KeyMap_193;
		public int KeyMap_194;
		public int KeyMap_195;
		public int KeyMap_196;
		public int KeyMap_197;
		public int KeyMap_198;
		public int KeyMap_199;
		public int KeyMap_200;
		public int KeyMap_201;
		public int KeyMap_202;
		public int KeyMap_203;
		public int KeyMap_204;
		public int KeyMap_205;
		public int KeyMap_206;
		public int KeyMap_207;
		public int KeyMap_208;
		public int KeyMap_209;
		public int KeyMap_210;
		public int KeyMap_211;
		public int KeyMap_212;
		public int KeyMap_213;
		public int KeyMap_214;
		public int KeyMap_215;
		public int KeyMap_216;
		public int KeyMap_217;
		public int KeyMap_218;
		public int KeyMap_219;
		public int KeyMap_220;
		public int KeyMap_221;
		public int KeyMap_222;
		public int KeyMap_223;
		public int KeyMap_224;
		public int KeyMap_225;
		public int KeyMap_226;
		public int KeyMap_227;
		public int KeyMap_228;
		public int KeyMap_229;
		public int KeyMap_230;
		public int KeyMap_231;
		public int KeyMap_232;
		public int KeyMap_233;
		public int KeyMap_234;
		public int KeyMap_235;
		public int KeyMap_236;
		public int KeyMap_237;
		public int KeyMap_238;
		public int KeyMap_239;
		public int KeyMap_240;
		public int KeyMap_241;
		public int KeyMap_242;
		public int KeyMap_243;
		public int KeyMap_244;
		public int KeyMap_245;
		public int KeyMap_246;
		public int KeyMap_247;
		public int KeyMap_248;
		public int KeyMap_249;
		public int KeyMap_250;
		public int KeyMap_251;
		public int KeyMap_252;
		public int KeyMap_253;
		public int KeyMap_254;
		public int KeyMap_255;
		public int KeyMap_256;
		public int KeyMap_257;
		public int KeyMap_258;
		public int KeyMap_259;
		public int KeyMap_260;
		public int KeyMap_261;
		public int KeyMap_262;
		public int KeyMap_263;
		public int KeyMap_264;
		public int KeyMap_265;
		public int KeyMap_266;
		public int KeyMap_267;
		public int KeyMap_268;
		public int KeyMap_269;
		public int KeyMap_270;
		public int KeyMap_271;
		public int KeyMap_272;
		public int KeyMap_273;
		public int KeyMap_274;
		public int KeyMap_275;
		public int KeyMap_276;
		public int KeyMap_277;
		public int KeyMap_278;
		public int KeyMap_279;
		public int KeyMap_280;
		public int KeyMap_281;
		public int KeyMap_282;
		public int KeyMap_283;
		public int KeyMap_284;
		public int KeyMap_285;
		public int KeyMap_286;
		public int KeyMap_287;
		public int KeyMap_288;
		public int KeyMap_289;
		public int KeyMap_290;
		public int KeyMap_291;
		public int KeyMap_292;
		public int KeyMap_293;
		public int KeyMap_294;
		public int KeyMap_295;
		public int KeyMap_296;
		public int KeyMap_297;
		public int KeyMap_298;
		public int KeyMap_299;
		public int KeyMap_300;
		public int KeyMap_301;
		public int KeyMap_302;
		public int KeyMap_303;
		public int KeyMap_304;
		public int KeyMap_305;
		public int KeyMap_306;
		public int KeyMap_307;
		public int KeyMap_308;
		public int KeyMap_309;
		public int KeyMap_310;
		public int KeyMap_311;
		public int KeyMap_312;
		public int KeyMap_313;
		public int KeyMap_314;
		public int KeyMap_315;
		public int KeyMap_316;
		public int KeyMap_317;
		public int KeyMap_318;
		public int KeyMap_319;
		public int KeyMap_320;
		public int KeyMap_321;
		public int KeyMap_322;
		public int KeyMap_323;
		public int KeyMap_324;
		public int KeyMap_325;
		public int KeyMap_326;
		public int KeyMap_327;
		public int KeyMap_328;
		public int KeyMap_329;
		public int KeyMap_330;
		public int KeyMap_331;
		public int KeyMap_332;
		public int KeyMap_333;
		public int KeyMap_334;
		public int KeyMap_335;
		public int KeyMap_336;
		public int KeyMap_337;
		public int KeyMap_338;
		public int KeyMap_339;
		public int KeyMap_340;
		public int KeyMap_341;
		public int KeyMap_342;
		public int KeyMap_343;
		public int KeyMap_344;
		public int KeyMap_345;
		public int KeyMap_346;
		public int KeyMap_347;
		public int KeyMap_348;
		public int KeyMap_349;
		public int KeyMap_350;
		public int KeyMap_351;
		public int KeyMap_352;
		public int KeyMap_353;
		public int KeyMap_354;
		public int KeyMap_355;
		public int KeyMap_356;
		public int KeyMap_357;
		public int KeyMap_358;
		public int KeyMap_359;
		public int KeyMap_360;
		public int KeyMap_361;
		public int KeyMap_362;
		public int KeyMap_363;
		public int KeyMap_364;
		public int KeyMap_365;
		public int KeyMap_366;
		public int KeyMap_367;
		public int KeyMap_368;
		public int KeyMap_369;
		public int KeyMap_370;
		public int KeyMap_371;
		public int KeyMap_372;
		public int KeyMap_373;
		public int KeyMap_374;
		public int KeyMap_375;
		public int KeyMap_376;
		public int KeyMap_377;
		public int KeyMap_378;
		public int KeyMap_379;
		public int KeyMap_380;
		public int KeyMap_381;
		public int KeyMap_382;
		public int KeyMap_383;
		public int KeyMap_384;
		public int KeyMap_385;
		public int KeyMap_386;
		public int KeyMap_387;
		public int KeyMap_388;
		public int KeyMap_389;
		public int KeyMap_390;
		public int KeyMap_391;
		public int KeyMap_392;
		public int KeyMap_393;
		public int KeyMap_394;
		public int KeyMap_395;
		public int KeyMap_396;
		public int KeyMap_397;
		public int KeyMap_398;
		public int KeyMap_399;
		public int KeyMap_400;
		public int KeyMap_401;
		public int KeyMap_402;
		public int KeyMap_403;
		public int KeyMap_404;
		public int KeyMap_405;
		public int KeyMap_406;
		public int KeyMap_407;
		public int KeyMap_408;
		public int KeyMap_409;
		public int KeyMap_410;
		public int KeyMap_411;
		public int KeyMap_412;
		public int KeyMap_413;
		public int KeyMap_414;
		public int KeyMap_415;
		public int KeyMap_416;
		public int KeyMap_417;
		public int KeyMap_418;
		public int KeyMap_419;
		public int KeyMap_420;
		public int KeyMap_421;
		public int KeyMap_422;
		public int KeyMap_423;
		public int KeyMap_424;
		public int KeyMap_425;
		public int KeyMap_426;
		public int KeyMap_427;
		public int KeyMap_428;
		public int KeyMap_429;
		public int KeyMap_430;
		public int KeyMap_431;
		public int KeyMap_432;
		public int KeyMap_433;
		public int KeyMap_434;
		public int KeyMap_435;
		public int KeyMap_436;
		public int KeyMap_437;
		public int KeyMap_438;
		public int KeyMap_439;
		public int KeyMap_440;
		public int KeyMap_441;
		public int KeyMap_442;
		public int KeyMap_443;
		public int KeyMap_444;
		public int KeyMap_445;
		public int KeyMap_446;
		public int KeyMap_447;
		public int KeyMap_448;
		public int KeyMap_449;
		public int KeyMap_450;
		public int KeyMap_451;
		public int KeyMap_452;
		public int KeyMap_453;
		public int KeyMap_454;
		public int KeyMap_455;
		public int KeyMap_456;
		public int KeyMap_457;
		public int KeyMap_458;
		public int KeyMap_459;
		public int KeyMap_460;
		public int KeyMap_461;
		public int KeyMap_462;
		public int KeyMap_463;
		public int KeyMap_464;
		public int KeyMap_465;
		public int KeyMap_466;
		public int KeyMap_467;
		public int KeyMap_468;
		public int KeyMap_469;
		public int KeyMap_470;
		public int KeyMap_471;
		public int KeyMap_472;
		public int KeyMap_473;
		public int KeyMap_474;
		public int KeyMap_475;
		public int KeyMap_476;
		public int KeyMap_477;
		public int KeyMap_478;
		public int KeyMap_479;
		public int KeyMap_480;
		public int KeyMap_481;
		public int KeyMap_482;
		public int KeyMap_483;
		public int KeyMap_484;
		public int KeyMap_485;
		public int KeyMap_486;
		public int KeyMap_487;
		public int KeyMap_488;
		public int KeyMap_489;
		public int KeyMap_490;
		public int KeyMap_491;
		public int KeyMap_492;
		public int KeyMap_493;
		public int KeyMap_494;
		public int KeyMap_495;
		public int KeyMap_496;
		public int KeyMap_497;
		public int KeyMap_498;
		public int KeyMap_499;
		public int KeyMap_500;
		public int KeyMap_501;
		public int KeyMap_502;
		public int KeyMap_503;
		public int KeyMap_504;
		public int KeyMap_505;
		public int KeyMap_506;
		public int KeyMap_507;
		public int KeyMap_508;
		public int KeyMap_509;
		public int KeyMap_510;
		public int KeyMap_511;
		public int KeyMap_512;
		public int KeyMap_513;
		public int KeyMap_514;
		public int KeyMap_515;
		public int KeyMap_516;
		public int KeyMap_517;
		public int KeyMap_518;
		public int KeyMap_519;
		public int KeyMap_520;
		public int KeyMap_521;
		public int KeyMap_522;
		public int KeyMap_523;
		public int KeyMap_524;
		public int KeyMap_525;
		public int KeyMap_526;
		public int KeyMap_527;
		public int KeyMap_528;
		public int KeyMap_529;
		public int KeyMap_530;
		public int KeyMap_531;
		public int KeyMap_532;
		public int KeyMap_533;
		public int KeyMap_534;
		public int KeyMap_535;
		public int KeyMap_536;
		public int KeyMap_537;
		public int KeyMap_538;
		public int KeyMap_539;
		public int KeyMap_540;
		public int KeyMap_541;
		public int KeyMap_542;
		public int KeyMap_543;
		public int KeyMap_544;
		public int KeyMap_545;
		public int KeyMap_546;
		public int KeyMap_547;
		public int KeyMap_548;
		public int KeyMap_549;
		public int KeyMap_550;
		public int KeyMap_551;
		public int KeyMap_552;
		public int KeyMap_553;
		public int KeyMap_554;
		public int KeyMap_555;
		public int KeyMap_556;
		public int KeyMap_557;
		public int KeyMap_558;
		public int KeyMap_559;
		public int KeyMap_560;
		public int KeyMap_561;
		public int KeyMap_562;
		public int KeyMap_563;
		public int KeyMap_564;
		public int KeyMap_565;
		public int KeyMap_566;
		public int KeyMap_567;
		public int KeyMap_568;
		public int KeyMap_569;
		public int KeyMap_570;
		public int KeyMap_571;
		public int KeyMap_572;
		public int KeyMap_573;
		public int KeyMap_574;
		public int KeyMap_575;
		public int KeyMap_576;
		public int KeyMap_577;
		public int KeyMap_578;
		public int KeyMap_579;
		public int KeyMap_580;
		public int KeyMap_581;
		public int KeyMap_582;
		public int KeyMap_583;
		public int KeyMap_584;
		public int KeyMap_585;
		public int KeyMap_586;
		public int KeyMap_587;
		public int KeyMap_588;
		public int KeyMap_589;
		public int KeyMap_590;
		public int KeyMap_591;
		public int KeyMap_592;
		public int KeyMap_593;
		public int KeyMap_594;
		public int KeyMap_595;
		public int KeyMap_596;
		public int KeyMap_597;
		public int KeyMap_598;
		public int KeyMap_599;
		public int KeyMap_600;
		public int KeyMap_601;
		public int KeyMap_602;
		public int KeyMap_603;
		public int KeyMap_604;
		public int KeyMap_605;
		public int KeyMap_606;
		public int KeyMap_607;
		public int KeyMap_608;
		public int KeyMap_609;
		public int KeyMap_610;
		public int KeyMap_611;
		public int KeyMap_612;
		public int KeyMap_613;
		public int KeyMap_614;
		public int KeyMap_615;
		public int KeyMap_616;
		public int KeyMap_617;
		public int KeyMap_618;
		public int KeyMap_619;
		public int KeyMap_620;
		public int KeyMap_621;
		public int KeyMap_622;
		public int KeyMap_623;
		public int KeyMap_624;
		public int KeyMap_625;
		public int KeyMap_626;
		public int KeyMap_627;
		public int KeyMap_628;
		public int KeyMap_629;
		public int KeyMap_630;
		public int KeyMap_631;
		public int KeyMap_632;
		public int KeyMap_633;
		public int KeyMap_634;
		public int KeyMap_635;
		public int KeyMap_636;
		public int KeyMap_637;
		public int KeyMap_638;
		public int KeyMap_639;
		public int KeyMap_640;
		public int KeyMap_641;
		public int KeyMap_642;
		public int KeyMap_643;
		public int KeyMap_644;
		public int KeyMap_645;
		public int KeyMap_646;
		public int KeyMap_647;
		public int KeyMap_648;
		public int KeyMap_649;
		public int KeyMap_650;
		public int KeyMap_651;

		/// <summary>
		/// [LEGACY] Input: Keyboard keys that are pressed (ideally left in the "native" order your engine has access to keyboard keys, so you can use your own definesenums for keys). This used to be [512] sized. It is now ImGuiKey_COUNT to allow legacy io.KeysDown[GetKeyIndex(...)] to work without an overflow.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "KeysDown")]
		[NativeName(NativeNameType.Type, "bool[652]")]
		public bool KeysDown_0;
		public bool KeysDown_1;
		public bool KeysDown_2;
		public bool KeysDown_3;
		public bool KeysDown_4;
		public bool KeysDown_5;
		public bool KeysDown_6;
		public bool KeysDown_7;
		public bool KeysDown_8;
		public bool KeysDown_9;
		public bool KeysDown_10;
		public bool KeysDown_11;
		public bool KeysDown_12;
		public bool KeysDown_13;
		public bool KeysDown_14;
		public bool KeysDown_15;
		public bool KeysDown_16;
		public bool KeysDown_17;
		public bool KeysDown_18;
		public bool KeysDown_19;
		public bool KeysDown_20;
		public bool KeysDown_21;
		public bool KeysDown_22;
		public bool KeysDown_23;
		public bool KeysDown_24;
		public bool KeysDown_25;
		public bool KeysDown_26;
		public bool KeysDown_27;
		public bool KeysDown_28;
		public bool KeysDown_29;
		public bool KeysDown_30;
		public bool KeysDown_31;
		public bool KeysDown_32;
		public bool KeysDown_33;
		public bool KeysDown_34;
		public bool KeysDown_35;
		public bool KeysDown_36;
		public bool KeysDown_37;
		public bool KeysDown_38;
		public bool KeysDown_39;
		public bool KeysDown_40;
		public bool KeysDown_41;
		public bool KeysDown_42;
		public bool KeysDown_43;
		public bool KeysDown_44;
		public bool KeysDown_45;
		public bool KeysDown_46;
		public bool KeysDown_47;
		public bool KeysDown_48;
		public bool KeysDown_49;
		public bool KeysDown_50;
		public bool KeysDown_51;
		public bool KeysDown_52;
		public bool KeysDown_53;
		public bool KeysDown_54;
		public bool KeysDown_55;
		public bool KeysDown_56;
		public bool KeysDown_57;
		public bool KeysDown_58;
		public bool KeysDown_59;
		public bool KeysDown_60;
		public bool KeysDown_61;
		public bool KeysDown_62;
		public bool KeysDown_63;
		public bool KeysDown_64;
		public bool KeysDown_65;
		public bool KeysDown_66;
		public bool KeysDown_67;
		public bool KeysDown_68;
		public bool KeysDown_69;
		public bool KeysDown_70;
		public bool KeysDown_71;
		public bool KeysDown_72;
		public bool KeysDown_73;
		public bool KeysDown_74;
		public bool KeysDown_75;
		public bool KeysDown_76;
		public bool KeysDown_77;
		public bool KeysDown_78;
		public bool KeysDown_79;
		public bool KeysDown_80;
		public bool KeysDown_81;
		public bool KeysDown_82;
		public bool KeysDown_83;
		public bool KeysDown_84;
		public bool KeysDown_85;
		public bool KeysDown_86;
		public bool KeysDown_87;
		public bool KeysDown_88;
		public bool KeysDown_89;
		public bool KeysDown_90;
		public bool KeysDown_91;
		public bool KeysDown_92;
		public bool KeysDown_93;
		public bool KeysDown_94;
		public bool KeysDown_95;
		public bool KeysDown_96;
		public bool KeysDown_97;
		public bool KeysDown_98;
		public bool KeysDown_99;
		public bool KeysDown_100;
		public bool KeysDown_101;
		public bool KeysDown_102;
		public bool KeysDown_103;
		public bool KeysDown_104;
		public bool KeysDown_105;
		public bool KeysDown_106;
		public bool KeysDown_107;
		public bool KeysDown_108;
		public bool KeysDown_109;
		public bool KeysDown_110;
		public bool KeysDown_111;
		public bool KeysDown_112;
		public bool KeysDown_113;
		public bool KeysDown_114;
		public bool KeysDown_115;
		public bool KeysDown_116;
		public bool KeysDown_117;
		public bool KeysDown_118;
		public bool KeysDown_119;
		public bool KeysDown_120;
		public bool KeysDown_121;
		public bool KeysDown_122;
		public bool KeysDown_123;
		public bool KeysDown_124;
		public bool KeysDown_125;
		public bool KeysDown_126;
		public bool KeysDown_127;
		public bool KeysDown_128;
		public bool KeysDown_129;
		public bool KeysDown_130;
		public bool KeysDown_131;
		public bool KeysDown_132;
		public bool KeysDown_133;
		public bool KeysDown_134;
		public bool KeysDown_135;
		public bool KeysDown_136;
		public bool KeysDown_137;
		public bool KeysDown_138;
		public bool KeysDown_139;
		public bool KeysDown_140;
		public bool KeysDown_141;
		public bool KeysDown_142;
		public bool KeysDown_143;
		public bool KeysDown_144;
		public bool KeysDown_145;
		public bool KeysDown_146;
		public bool KeysDown_147;
		public bool KeysDown_148;
		public bool KeysDown_149;
		public bool KeysDown_150;
		public bool KeysDown_151;
		public bool KeysDown_152;
		public bool KeysDown_153;
		public bool KeysDown_154;
		public bool KeysDown_155;
		public bool KeysDown_156;
		public bool KeysDown_157;
		public bool KeysDown_158;
		public bool KeysDown_159;
		public bool KeysDown_160;
		public bool KeysDown_161;
		public bool KeysDown_162;
		public bool KeysDown_163;
		public bool KeysDown_164;
		public bool KeysDown_165;
		public bool KeysDown_166;
		public bool KeysDown_167;
		public bool KeysDown_168;
		public bool KeysDown_169;
		public bool KeysDown_170;
		public bool KeysDown_171;
		public bool KeysDown_172;
		public bool KeysDown_173;
		public bool KeysDown_174;
		public bool KeysDown_175;
		public bool KeysDown_176;
		public bool KeysDown_177;
		public bool KeysDown_178;
		public bool KeysDown_179;
		public bool KeysDown_180;
		public bool KeysDown_181;
		public bool KeysDown_182;
		public bool KeysDown_183;
		public bool KeysDown_184;
		public bool KeysDown_185;
		public bool KeysDown_186;
		public bool KeysDown_187;
		public bool KeysDown_188;
		public bool KeysDown_189;
		public bool KeysDown_190;
		public bool KeysDown_191;
		public bool KeysDown_192;
		public bool KeysDown_193;
		public bool KeysDown_194;
		public bool KeysDown_195;
		public bool KeysDown_196;
		public bool KeysDown_197;
		public bool KeysDown_198;
		public bool KeysDown_199;
		public bool KeysDown_200;
		public bool KeysDown_201;
		public bool KeysDown_202;
		public bool KeysDown_203;
		public bool KeysDown_204;
		public bool KeysDown_205;
		public bool KeysDown_206;
		public bool KeysDown_207;
		public bool KeysDown_208;
		public bool KeysDown_209;
		public bool KeysDown_210;
		public bool KeysDown_211;
		public bool KeysDown_212;
		public bool KeysDown_213;
		public bool KeysDown_214;
		public bool KeysDown_215;
		public bool KeysDown_216;
		public bool KeysDown_217;
		public bool KeysDown_218;
		public bool KeysDown_219;
		public bool KeysDown_220;
		public bool KeysDown_221;
		public bool KeysDown_222;
		public bool KeysDown_223;
		public bool KeysDown_224;
		public bool KeysDown_225;
		public bool KeysDown_226;
		public bool KeysDown_227;
		public bool KeysDown_228;
		public bool KeysDown_229;
		public bool KeysDown_230;
		public bool KeysDown_231;
		public bool KeysDown_232;
		public bool KeysDown_233;
		public bool KeysDown_234;
		public bool KeysDown_235;
		public bool KeysDown_236;
		public bool KeysDown_237;
		public bool KeysDown_238;
		public bool KeysDown_239;
		public bool KeysDown_240;
		public bool KeysDown_241;
		public bool KeysDown_242;
		public bool KeysDown_243;
		public bool KeysDown_244;
		public bool KeysDown_245;
		public bool KeysDown_246;
		public bool KeysDown_247;
		public bool KeysDown_248;
		public bool KeysDown_249;
		public bool KeysDown_250;
		public bool KeysDown_251;
		public bool KeysDown_252;
		public bool KeysDown_253;
		public bool KeysDown_254;
		public bool KeysDown_255;
		public bool KeysDown_256;
		public bool KeysDown_257;
		public bool KeysDown_258;
		public bool KeysDown_259;
		public bool KeysDown_260;
		public bool KeysDown_261;
		public bool KeysDown_262;
		public bool KeysDown_263;
		public bool KeysDown_264;
		public bool KeysDown_265;
		public bool KeysDown_266;
		public bool KeysDown_267;
		public bool KeysDown_268;
		public bool KeysDown_269;
		public bool KeysDown_270;
		public bool KeysDown_271;
		public bool KeysDown_272;
		public bool KeysDown_273;
		public bool KeysDown_274;
		public bool KeysDown_275;
		public bool KeysDown_276;
		public bool KeysDown_277;
		public bool KeysDown_278;
		public bool KeysDown_279;
		public bool KeysDown_280;
		public bool KeysDown_281;
		public bool KeysDown_282;
		public bool KeysDown_283;
		public bool KeysDown_284;
		public bool KeysDown_285;
		public bool KeysDown_286;
		public bool KeysDown_287;
		public bool KeysDown_288;
		public bool KeysDown_289;
		public bool KeysDown_290;
		public bool KeysDown_291;
		public bool KeysDown_292;
		public bool KeysDown_293;
		public bool KeysDown_294;
		public bool KeysDown_295;
		public bool KeysDown_296;
		public bool KeysDown_297;
		public bool KeysDown_298;
		public bool KeysDown_299;
		public bool KeysDown_300;
		public bool KeysDown_301;
		public bool KeysDown_302;
		public bool KeysDown_303;
		public bool KeysDown_304;
		public bool KeysDown_305;
		public bool KeysDown_306;
		public bool KeysDown_307;
		public bool KeysDown_308;
		public bool KeysDown_309;
		public bool KeysDown_310;
		public bool KeysDown_311;
		public bool KeysDown_312;
		public bool KeysDown_313;
		public bool KeysDown_314;
		public bool KeysDown_315;
		public bool KeysDown_316;
		public bool KeysDown_317;
		public bool KeysDown_318;
		public bool KeysDown_319;
		public bool KeysDown_320;
		public bool KeysDown_321;
		public bool KeysDown_322;
		public bool KeysDown_323;
		public bool KeysDown_324;
		public bool KeysDown_325;
		public bool KeysDown_326;
		public bool KeysDown_327;
		public bool KeysDown_328;
		public bool KeysDown_329;
		public bool KeysDown_330;
		public bool KeysDown_331;
		public bool KeysDown_332;
		public bool KeysDown_333;
		public bool KeysDown_334;
		public bool KeysDown_335;
		public bool KeysDown_336;
		public bool KeysDown_337;
		public bool KeysDown_338;
		public bool KeysDown_339;
		public bool KeysDown_340;
		public bool KeysDown_341;
		public bool KeysDown_342;
		public bool KeysDown_343;
		public bool KeysDown_344;
		public bool KeysDown_345;
		public bool KeysDown_346;
		public bool KeysDown_347;
		public bool KeysDown_348;
		public bool KeysDown_349;
		public bool KeysDown_350;
		public bool KeysDown_351;
		public bool KeysDown_352;
		public bool KeysDown_353;
		public bool KeysDown_354;
		public bool KeysDown_355;
		public bool KeysDown_356;
		public bool KeysDown_357;
		public bool KeysDown_358;
		public bool KeysDown_359;
		public bool KeysDown_360;
		public bool KeysDown_361;
		public bool KeysDown_362;
		public bool KeysDown_363;
		public bool KeysDown_364;
		public bool KeysDown_365;
		public bool KeysDown_366;
		public bool KeysDown_367;
		public bool KeysDown_368;
		public bool KeysDown_369;
		public bool KeysDown_370;
		public bool KeysDown_371;
		public bool KeysDown_372;
		public bool KeysDown_373;
		public bool KeysDown_374;
		public bool KeysDown_375;
		public bool KeysDown_376;
		public bool KeysDown_377;
		public bool KeysDown_378;
		public bool KeysDown_379;
		public bool KeysDown_380;
		public bool KeysDown_381;
		public bool KeysDown_382;
		public bool KeysDown_383;
		public bool KeysDown_384;
		public bool KeysDown_385;
		public bool KeysDown_386;
		public bool KeysDown_387;
		public bool KeysDown_388;
		public bool KeysDown_389;
		public bool KeysDown_390;
		public bool KeysDown_391;
		public bool KeysDown_392;
		public bool KeysDown_393;
		public bool KeysDown_394;
		public bool KeysDown_395;
		public bool KeysDown_396;
		public bool KeysDown_397;
		public bool KeysDown_398;
		public bool KeysDown_399;
		public bool KeysDown_400;
		public bool KeysDown_401;
		public bool KeysDown_402;
		public bool KeysDown_403;
		public bool KeysDown_404;
		public bool KeysDown_405;
		public bool KeysDown_406;
		public bool KeysDown_407;
		public bool KeysDown_408;
		public bool KeysDown_409;
		public bool KeysDown_410;
		public bool KeysDown_411;
		public bool KeysDown_412;
		public bool KeysDown_413;
		public bool KeysDown_414;
		public bool KeysDown_415;
		public bool KeysDown_416;
		public bool KeysDown_417;
		public bool KeysDown_418;
		public bool KeysDown_419;
		public bool KeysDown_420;
		public bool KeysDown_421;
		public bool KeysDown_422;
		public bool KeysDown_423;
		public bool KeysDown_424;
		public bool KeysDown_425;
		public bool KeysDown_426;
		public bool KeysDown_427;
		public bool KeysDown_428;
		public bool KeysDown_429;
		public bool KeysDown_430;
		public bool KeysDown_431;
		public bool KeysDown_432;
		public bool KeysDown_433;
		public bool KeysDown_434;
		public bool KeysDown_435;
		public bool KeysDown_436;
		public bool KeysDown_437;
		public bool KeysDown_438;
		public bool KeysDown_439;
		public bool KeysDown_440;
		public bool KeysDown_441;
		public bool KeysDown_442;
		public bool KeysDown_443;
		public bool KeysDown_444;
		public bool KeysDown_445;
		public bool KeysDown_446;
		public bool KeysDown_447;
		public bool KeysDown_448;
		public bool KeysDown_449;
		public bool KeysDown_450;
		public bool KeysDown_451;
		public bool KeysDown_452;
		public bool KeysDown_453;
		public bool KeysDown_454;
		public bool KeysDown_455;
		public bool KeysDown_456;
		public bool KeysDown_457;
		public bool KeysDown_458;
		public bool KeysDown_459;
		public bool KeysDown_460;
		public bool KeysDown_461;
		public bool KeysDown_462;
		public bool KeysDown_463;
		public bool KeysDown_464;
		public bool KeysDown_465;
		public bool KeysDown_466;
		public bool KeysDown_467;
		public bool KeysDown_468;
		public bool KeysDown_469;
		public bool KeysDown_470;
		public bool KeysDown_471;
		public bool KeysDown_472;
		public bool KeysDown_473;
		public bool KeysDown_474;
		public bool KeysDown_475;
		public bool KeysDown_476;
		public bool KeysDown_477;
		public bool KeysDown_478;
		public bool KeysDown_479;
		public bool KeysDown_480;
		public bool KeysDown_481;
		public bool KeysDown_482;
		public bool KeysDown_483;
		public bool KeysDown_484;
		public bool KeysDown_485;
		public bool KeysDown_486;
		public bool KeysDown_487;
		public bool KeysDown_488;
		public bool KeysDown_489;
		public bool KeysDown_490;
		public bool KeysDown_491;
		public bool KeysDown_492;
		public bool KeysDown_493;
		public bool KeysDown_494;
		public bool KeysDown_495;
		public bool KeysDown_496;
		public bool KeysDown_497;
		public bool KeysDown_498;
		public bool KeysDown_499;
		public bool KeysDown_500;
		public bool KeysDown_501;
		public bool KeysDown_502;
		public bool KeysDown_503;
		public bool KeysDown_504;
		public bool KeysDown_505;
		public bool KeysDown_506;
		public bool KeysDown_507;
		public bool KeysDown_508;
		public bool KeysDown_509;
		public bool KeysDown_510;
		public bool KeysDown_511;
		public bool KeysDown_512;
		public bool KeysDown_513;
		public bool KeysDown_514;
		public bool KeysDown_515;
		public bool KeysDown_516;
		public bool KeysDown_517;
		public bool KeysDown_518;
		public bool KeysDown_519;
		public bool KeysDown_520;
		public bool KeysDown_521;
		public bool KeysDown_522;
		public bool KeysDown_523;
		public bool KeysDown_524;
		public bool KeysDown_525;
		public bool KeysDown_526;
		public bool KeysDown_527;
		public bool KeysDown_528;
		public bool KeysDown_529;
		public bool KeysDown_530;
		public bool KeysDown_531;
		public bool KeysDown_532;
		public bool KeysDown_533;
		public bool KeysDown_534;
		public bool KeysDown_535;
		public bool KeysDown_536;
		public bool KeysDown_537;
		public bool KeysDown_538;
		public bool KeysDown_539;
		public bool KeysDown_540;
		public bool KeysDown_541;
		public bool KeysDown_542;
		public bool KeysDown_543;
		public bool KeysDown_544;
		public bool KeysDown_545;
		public bool KeysDown_546;
		public bool KeysDown_547;
		public bool KeysDown_548;
		public bool KeysDown_549;
		public bool KeysDown_550;
		public bool KeysDown_551;
		public bool KeysDown_552;
		public bool KeysDown_553;
		public bool KeysDown_554;
		public bool KeysDown_555;
		public bool KeysDown_556;
		public bool KeysDown_557;
		public bool KeysDown_558;
		public bool KeysDown_559;
		public bool KeysDown_560;
		public bool KeysDown_561;
		public bool KeysDown_562;
		public bool KeysDown_563;
		public bool KeysDown_564;
		public bool KeysDown_565;
		public bool KeysDown_566;
		public bool KeysDown_567;
		public bool KeysDown_568;
		public bool KeysDown_569;
		public bool KeysDown_570;
		public bool KeysDown_571;
		public bool KeysDown_572;
		public bool KeysDown_573;
		public bool KeysDown_574;
		public bool KeysDown_575;
		public bool KeysDown_576;
		public bool KeysDown_577;
		public bool KeysDown_578;
		public bool KeysDown_579;
		public bool KeysDown_580;
		public bool KeysDown_581;
		public bool KeysDown_582;
		public bool KeysDown_583;
		public bool KeysDown_584;
		public bool KeysDown_585;
		public bool KeysDown_586;
		public bool KeysDown_587;
		public bool KeysDown_588;
		public bool KeysDown_589;
		public bool KeysDown_590;
		public bool KeysDown_591;
		public bool KeysDown_592;
		public bool KeysDown_593;
		public bool KeysDown_594;
		public bool KeysDown_595;
		public bool KeysDown_596;
		public bool KeysDown_597;
		public bool KeysDown_598;
		public bool KeysDown_599;
		public bool KeysDown_600;
		public bool KeysDown_601;
		public bool KeysDown_602;
		public bool KeysDown_603;
		public bool KeysDown_604;
		public bool KeysDown_605;
		public bool KeysDown_606;
		public bool KeysDown_607;
		public bool KeysDown_608;
		public bool KeysDown_609;
		public bool KeysDown_610;
		public bool KeysDown_611;
		public bool KeysDown_612;
		public bool KeysDown_613;
		public bool KeysDown_614;
		public bool KeysDown_615;
		public bool KeysDown_616;
		public bool KeysDown_617;
		public bool KeysDown_618;
		public bool KeysDown_619;
		public bool KeysDown_620;
		public bool KeysDown_621;
		public bool KeysDown_622;
		public bool KeysDown_623;
		public bool KeysDown_624;
		public bool KeysDown_625;
		public bool KeysDown_626;
		public bool KeysDown_627;
		public bool KeysDown_628;
		public bool KeysDown_629;
		public bool KeysDown_630;
		public bool KeysDown_631;
		public bool KeysDown_632;
		public bool KeysDown_633;
		public bool KeysDown_634;
		public bool KeysDown_635;
		public bool KeysDown_636;
		public bool KeysDown_637;
		public bool KeysDown_638;
		public bool KeysDown_639;
		public bool KeysDown_640;
		public bool KeysDown_641;
		public bool KeysDown_642;
		public bool KeysDown_643;
		public bool KeysDown_644;
		public bool KeysDown_645;
		public bool KeysDown_646;
		public bool KeysDown_647;
		public bool KeysDown_648;
		public bool KeysDown_649;
		public bool KeysDown_650;
		public bool KeysDown_651;

		/// <summary>
		/// [LEGACY] Since 1.88, NavInputs[] was removed. Backends from 1.60 to 1.86 won't build. Feed gamepad inputs via io.AddKeyEvent() and ImGuiKey_GamepadXXX enums.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavInputs")]
		[NativeName(NativeNameType.Type, "float[16]")]
		public float NavInputs_0;
		public float NavInputs_1;
		public float NavInputs_2;
		public float NavInputs_3;
		public float NavInputs_4;
		public float NavInputs_5;
		public float NavInputs_6;
		public float NavInputs_7;
		public float NavInputs_8;
		public float NavInputs_9;
		public float NavInputs_10;
		public float NavInputs_11;
		public float NavInputs_12;
		public float NavInputs_13;
		public float NavInputs_14;
		public float NavInputs_15;

		/// <summary>
		/// Parent UI context (needs to be set explicitly by parent).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Ctx")]
		[NativeName(NativeNameType.Type, "ImGuiContext*")]
		public unsafe ImGuiContext* Ctx;

		/// <summary>
		/// Main Input State<br/>
		/// (this block used to be written by backend, since 1.87 it is best to NOT write to those directly, call the AddXXX functions above instead)<br/>
		/// (reading from those variables is fair game, as they are extremely unlikely to be moving anywhere) Mouse position, in pixels. Set to ImVec2(-FLT_MAX, -FLT_MAX) if mouse is unavailable (on another screen, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MousePos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 MousePos;

		/// <summary>
		/// Mouse buttons: 0=left, 1=right, 2=middle + extras (ImGuiMouseButton_COUNT == 5). Dear ImGui mostly uses left and right buttons. Other buttons allow us to track if the mouse is being used by your application + available to user as a convenience via IsMouse** API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDown")]
		[NativeName(NativeNameType.Type, "bool[5]")]
		public bool MouseDown_0;
		public bool MouseDown_1;
		public bool MouseDown_2;
		public bool MouseDown_3;
		public bool MouseDown_4;

		/// <summary>
		/// Mouse wheel Vertical: 1 unit scrolls about 5 lines text. &gt;0 scrolls Up, &lt;0 scrolls Down. Hold SHIFT to turn vertical scroll into horizontal scroll.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseWheel")]
		[NativeName(NativeNameType.Type, "float")]
		public float MouseWheel;

		/// <summary>
		/// Mouse wheel Horizontal. &gt;0 scrolls Left, &lt;0 scrolls Right. Most users don't have a mouse with a horizontal wheel, may not be filled by all backends.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseWheelH")]
		[NativeName(NativeNameType.Type, "float")]
		public float MouseWheelH;

		/// <summary>
		/// Mouse actual input peripheral (MouseTouchScreenPen).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseSource")]
		[NativeName(NativeNameType.Type, "ImGuiMouseSource")]
		public ImGuiMouseSource MouseSource;

		/// <summary>
		/// (Optional) Modify using io.AddMouseViewportEvent(). With multi-viewports: viewport the OS mouse is hovering. If possible _IGNORING_ viewports with the ImGuiViewportFlags_NoInputs flag is much better (few backends can handle that). Set io.BackendFlags |= ImGuiBackendFlags_HasMouseHoveredViewport if you can provide this info. If you don't imgui will infer the value using the rectangles and last focused time of the viewports it knows about (ignoring other OS windows).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseHoveredViewport")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int MouseHoveredViewport;

		/// <summary>
		/// Keyboard modifier down: Control<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "KeyCtrl")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte KeyCtrl;

		/// <summary>
		/// Keyboard modifier down: Shift<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "KeyShift")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte KeyShift;

		/// <summary>
		/// Keyboard modifier down: Alt<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "KeyAlt")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte KeyAlt;

		/// <summary>
		/// Keyboard modifier down: CmdSuperWindows<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "KeySuper")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte KeySuper;

		/// <summary>
		/// Other state maintained from data above + IO function calls Key mods flags (any of ImGuiMod_CtrlImGuiMod_ShiftImGuiMod_AltImGuiMod_Super flags, same as io.KeyCtrlKeyShiftKeyAltKeySuper but merged into flags. DOES NOT CONTAINS ImGuiMod_Shortcut which is pretranslated). Read-only, updated by NewFrame()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "KeyMods")]
		[NativeName(NativeNameType.Type, "ImGuiKeyChord")]
		public int KeyMods;

		/// <summary>
		/// Key state for all known keys. Use IsKeyXXX() functions to access this.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "KeysData")]
		[NativeName(NativeNameType.Type, "ImGuiKeyData[652]")]
		public ImGuiKeyData KeysData_0;
		public ImGuiKeyData KeysData_1;
		public ImGuiKeyData KeysData_2;
		public ImGuiKeyData KeysData_3;
		public ImGuiKeyData KeysData_4;
		public ImGuiKeyData KeysData_5;
		public ImGuiKeyData KeysData_6;
		public ImGuiKeyData KeysData_7;
		public ImGuiKeyData KeysData_8;
		public ImGuiKeyData KeysData_9;
		public ImGuiKeyData KeysData_10;
		public ImGuiKeyData KeysData_11;
		public ImGuiKeyData KeysData_12;
		public ImGuiKeyData KeysData_13;
		public ImGuiKeyData KeysData_14;
		public ImGuiKeyData KeysData_15;
		public ImGuiKeyData KeysData_16;
		public ImGuiKeyData KeysData_17;
		public ImGuiKeyData KeysData_18;
		public ImGuiKeyData KeysData_19;
		public ImGuiKeyData KeysData_20;
		public ImGuiKeyData KeysData_21;
		public ImGuiKeyData KeysData_22;
		public ImGuiKeyData KeysData_23;
		public ImGuiKeyData KeysData_24;
		public ImGuiKeyData KeysData_25;
		public ImGuiKeyData KeysData_26;
		public ImGuiKeyData KeysData_27;
		public ImGuiKeyData KeysData_28;
		public ImGuiKeyData KeysData_29;
		public ImGuiKeyData KeysData_30;
		public ImGuiKeyData KeysData_31;
		public ImGuiKeyData KeysData_32;
		public ImGuiKeyData KeysData_33;
		public ImGuiKeyData KeysData_34;
		public ImGuiKeyData KeysData_35;
		public ImGuiKeyData KeysData_36;
		public ImGuiKeyData KeysData_37;
		public ImGuiKeyData KeysData_38;
		public ImGuiKeyData KeysData_39;
		public ImGuiKeyData KeysData_40;
		public ImGuiKeyData KeysData_41;
		public ImGuiKeyData KeysData_42;
		public ImGuiKeyData KeysData_43;
		public ImGuiKeyData KeysData_44;
		public ImGuiKeyData KeysData_45;
		public ImGuiKeyData KeysData_46;
		public ImGuiKeyData KeysData_47;
		public ImGuiKeyData KeysData_48;
		public ImGuiKeyData KeysData_49;
		public ImGuiKeyData KeysData_50;
		public ImGuiKeyData KeysData_51;
		public ImGuiKeyData KeysData_52;
		public ImGuiKeyData KeysData_53;
		public ImGuiKeyData KeysData_54;
		public ImGuiKeyData KeysData_55;
		public ImGuiKeyData KeysData_56;
		public ImGuiKeyData KeysData_57;
		public ImGuiKeyData KeysData_58;
		public ImGuiKeyData KeysData_59;
		public ImGuiKeyData KeysData_60;
		public ImGuiKeyData KeysData_61;
		public ImGuiKeyData KeysData_62;
		public ImGuiKeyData KeysData_63;
		public ImGuiKeyData KeysData_64;
		public ImGuiKeyData KeysData_65;
		public ImGuiKeyData KeysData_66;
		public ImGuiKeyData KeysData_67;
		public ImGuiKeyData KeysData_68;
		public ImGuiKeyData KeysData_69;
		public ImGuiKeyData KeysData_70;
		public ImGuiKeyData KeysData_71;
		public ImGuiKeyData KeysData_72;
		public ImGuiKeyData KeysData_73;
		public ImGuiKeyData KeysData_74;
		public ImGuiKeyData KeysData_75;
		public ImGuiKeyData KeysData_76;
		public ImGuiKeyData KeysData_77;
		public ImGuiKeyData KeysData_78;
		public ImGuiKeyData KeysData_79;
		public ImGuiKeyData KeysData_80;
		public ImGuiKeyData KeysData_81;
		public ImGuiKeyData KeysData_82;
		public ImGuiKeyData KeysData_83;
		public ImGuiKeyData KeysData_84;
		public ImGuiKeyData KeysData_85;
		public ImGuiKeyData KeysData_86;
		public ImGuiKeyData KeysData_87;
		public ImGuiKeyData KeysData_88;
		public ImGuiKeyData KeysData_89;
		public ImGuiKeyData KeysData_90;
		public ImGuiKeyData KeysData_91;
		public ImGuiKeyData KeysData_92;
		public ImGuiKeyData KeysData_93;
		public ImGuiKeyData KeysData_94;
		public ImGuiKeyData KeysData_95;
		public ImGuiKeyData KeysData_96;
		public ImGuiKeyData KeysData_97;
		public ImGuiKeyData KeysData_98;
		public ImGuiKeyData KeysData_99;
		public ImGuiKeyData KeysData_100;
		public ImGuiKeyData KeysData_101;
		public ImGuiKeyData KeysData_102;
		public ImGuiKeyData KeysData_103;
		public ImGuiKeyData KeysData_104;
		public ImGuiKeyData KeysData_105;
		public ImGuiKeyData KeysData_106;
		public ImGuiKeyData KeysData_107;
		public ImGuiKeyData KeysData_108;
		public ImGuiKeyData KeysData_109;
		public ImGuiKeyData KeysData_110;
		public ImGuiKeyData KeysData_111;
		public ImGuiKeyData KeysData_112;
		public ImGuiKeyData KeysData_113;
		public ImGuiKeyData KeysData_114;
		public ImGuiKeyData KeysData_115;
		public ImGuiKeyData KeysData_116;
		public ImGuiKeyData KeysData_117;
		public ImGuiKeyData KeysData_118;
		public ImGuiKeyData KeysData_119;
		public ImGuiKeyData KeysData_120;
		public ImGuiKeyData KeysData_121;
		public ImGuiKeyData KeysData_122;
		public ImGuiKeyData KeysData_123;
		public ImGuiKeyData KeysData_124;
		public ImGuiKeyData KeysData_125;
		public ImGuiKeyData KeysData_126;
		public ImGuiKeyData KeysData_127;
		public ImGuiKeyData KeysData_128;
		public ImGuiKeyData KeysData_129;
		public ImGuiKeyData KeysData_130;
		public ImGuiKeyData KeysData_131;
		public ImGuiKeyData KeysData_132;
		public ImGuiKeyData KeysData_133;
		public ImGuiKeyData KeysData_134;
		public ImGuiKeyData KeysData_135;
		public ImGuiKeyData KeysData_136;
		public ImGuiKeyData KeysData_137;
		public ImGuiKeyData KeysData_138;
		public ImGuiKeyData KeysData_139;
		public ImGuiKeyData KeysData_140;
		public ImGuiKeyData KeysData_141;
		public ImGuiKeyData KeysData_142;
		public ImGuiKeyData KeysData_143;
		public ImGuiKeyData KeysData_144;
		public ImGuiKeyData KeysData_145;
		public ImGuiKeyData KeysData_146;
		public ImGuiKeyData KeysData_147;
		public ImGuiKeyData KeysData_148;
		public ImGuiKeyData KeysData_149;
		public ImGuiKeyData KeysData_150;
		public ImGuiKeyData KeysData_151;
		public ImGuiKeyData KeysData_152;
		public ImGuiKeyData KeysData_153;
		public ImGuiKeyData KeysData_154;
		public ImGuiKeyData KeysData_155;
		public ImGuiKeyData KeysData_156;
		public ImGuiKeyData KeysData_157;
		public ImGuiKeyData KeysData_158;
		public ImGuiKeyData KeysData_159;
		public ImGuiKeyData KeysData_160;
		public ImGuiKeyData KeysData_161;
		public ImGuiKeyData KeysData_162;
		public ImGuiKeyData KeysData_163;
		public ImGuiKeyData KeysData_164;
		public ImGuiKeyData KeysData_165;
		public ImGuiKeyData KeysData_166;
		public ImGuiKeyData KeysData_167;
		public ImGuiKeyData KeysData_168;
		public ImGuiKeyData KeysData_169;
		public ImGuiKeyData KeysData_170;
		public ImGuiKeyData KeysData_171;
		public ImGuiKeyData KeysData_172;
		public ImGuiKeyData KeysData_173;
		public ImGuiKeyData KeysData_174;
		public ImGuiKeyData KeysData_175;
		public ImGuiKeyData KeysData_176;
		public ImGuiKeyData KeysData_177;
		public ImGuiKeyData KeysData_178;
		public ImGuiKeyData KeysData_179;
		public ImGuiKeyData KeysData_180;
		public ImGuiKeyData KeysData_181;
		public ImGuiKeyData KeysData_182;
		public ImGuiKeyData KeysData_183;
		public ImGuiKeyData KeysData_184;
		public ImGuiKeyData KeysData_185;
		public ImGuiKeyData KeysData_186;
		public ImGuiKeyData KeysData_187;
		public ImGuiKeyData KeysData_188;
		public ImGuiKeyData KeysData_189;
		public ImGuiKeyData KeysData_190;
		public ImGuiKeyData KeysData_191;
		public ImGuiKeyData KeysData_192;
		public ImGuiKeyData KeysData_193;
		public ImGuiKeyData KeysData_194;
		public ImGuiKeyData KeysData_195;
		public ImGuiKeyData KeysData_196;
		public ImGuiKeyData KeysData_197;
		public ImGuiKeyData KeysData_198;
		public ImGuiKeyData KeysData_199;
		public ImGuiKeyData KeysData_200;
		public ImGuiKeyData KeysData_201;
		public ImGuiKeyData KeysData_202;
		public ImGuiKeyData KeysData_203;
		public ImGuiKeyData KeysData_204;
		public ImGuiKeyData KeysData_205;
		public ImGuiKeyData KeysData_206;
		public ImGuiKeyData KeysData_207;
		public ImGuiKeyData KeysData_208;
		public ImGuiKeyData KeysData_209;
		public ImGuiKeyData KeysData_210;
		public ImGuiKeyData KeysData_211;
		public ImGuiKeyData KeysData_212;
		public ImGuiKeyData KeysData_213;
		public ImGuiKeyData KeysData_214;
		public ImGuiKeyData KeysData_215;
		public ImGuiKeyData KeysData_216;
		public ImGuiKeyData KeysData_217;
		public ImGuiKeyData KeysData_218;
		public ImGuiKeyData KeysData_219;
		public ImGuiKeyData KeysData_220;
		public ImGuiKeyData KeysData_221;
		public ImGuiKeyData KeysData_222;
		public ImGuiKeyData KeysData_223;
		public ImGuiKeyData KeysData_224;
		public ImGuiKeyData KeysData_225;
		public ImGuiKeyData KeysData_226;
		public ImGuiKeyData KeysData_227;
		public ImGuiKeyData KeysData_228;
		public ImGuiKeyData KeysData_229;
		public ImGuiKeyData KeysData_230;
		public ImGuiKeyData KeysData_231;
		public ImGuiKeyData KeysData_232;
		public ImGuiKeyData KeysData_233;
		public ImGuiKeyData KeysData_234;
		public ImGuiKeyData KeysData_235;
		public ImGuiKeyData KeysData_236;
		public ImGuiKeyData KeysData_237;
		public ImGuiKeyData KeysData_238;
		public ImGuiKeyData KeysData_239;
		public ImGuiKeyData KeysData_240;
		public ImGuiKeyData KeysData_241;
		public ImGuiKeyData KeysData_242;
		public ImGuiKeyData KeysData_243;
		public ImGuiKeyData KeysData_244;
		public ImGuiKeyData KeysData_245;
		public ImGuiKeyData KeysData_246;
		public ImGuiKeyData KeysData_247;
		public ImGuiKeyData KeysData_248;
		public ImGuiKeyData KeysData_249;
		public ImGuiKeyData KeysData_250;
		public ImGuiKeyData KeysData_251;
		public ImGuiKeyData KeysData_252;
		public ImGuiKeyData KeysData_253;
		public ImGuiKeyData KeysData_254;
		public ImGuiKeyData KeysData_255;
		public ImGuiKeyData KeysData_256;
		public ImGuiKeyData KeysData_257;
		public ImGuiKeyData KeysData_258;
		public ImGuiKeyData KeysData_259;
		public ImGuiKeyData KeysData_260;
		public ImGuiKeyData KeysData_261;
		public ImGuiKeyData KeysData_262;
		public ImGuiKeyData KeysData_263;
		public ImGuiKeyData KeysData_264;
		public ImGuiKeyData KeysData_265;
		public ImGuiKeyData KeysData_266;
		public ImGuiKeyData KeysData_267;
		public ImGuiKeyData KeysData_268;
		public ImGuiKeyData KeysData_269;
		public ImGuiKeyData KeysData_270;
		public ImGuiKeyData KeysData_271;
		public ImGuiKeyData KeysData_272;
		public ImGuiKeyData KeysData_273;
		public ImGuiKeyData KeysData_274;
		public ImGuiKeyData KeysData_275;
		public ImGuiKeyData KeysData_276;
		public ImGuiKeyData KeysData_277;
		public ImGuiKeyData KeysData_278;
		public ImGuiKeyData KeysData_279;
		public ImGuiKeyData KeysData_280;
		public ImGuiKeyData KeysData_281;
		public ImGuiKeyData KeysData_282;
		public ImGuiKeyData KeysData_283;
		public ImGuiKeyData KeysData_284;
		public ImGuiKeyData KeysData_285;
		public ImGuiKeyData KeysData_286;
		public ImGuiKeyData KeysData_287;
		public ImGuiKeyData KeysData_288;
		public ImGuiKeyData KeysData_289;
		public ImGuiKeyData KeysData_290;
		public ImGuiKeyData KeysData_291;
		public ImGuiKeyData KeysData_292;
		public ImGuiKeyData KeysData_293;
		public ImGuiKeyData KeysData_294;
		public ImGuiKeyData KeysData_295;
		public ImGuiKeyData KeysData_296;
		public ImGuiKeyData KeysData_297;
		public ImGuiKeyData KeysData_298;
		public ImGuiKeyData KeysData_299;
		public ImGuiKeyData KeysData_300;
		public ImGuiKeyData KeysData_301;
		public ImGuiKeyData KeysData_302;
		public ImGuiKeyData KeysData_303;
		public ImGuiKeyData KeysData_304;
		public ImGuiKeyData KeysData_305;
		public ImGuiKeyData KeysData_306;
		public ImGuiKeyData KeysData_307;
		public ImGuiKeyData KeysData_308;
		public ImGuiKeyData KeysData_309;
		public ImGuiKeyData KeysData_310;
		public ImGuiKeyData KeysData_311;
		public ImGuiKeyData KeysData_312;
		public ImGuiKeyData KeysData_313;
		public ImGuiKeyData KeysData_314;
		public ImGuiKeyData KeysData_315;
		public ImGuiKeyData KeysData_316;
		public ImGuiKeyData KeysData_317;
		public ImGuiKeyData KeysData_318;
		public ImGuiKeyData KeysData_319;
		public ImGuiKeyData KeysData_320;
		public ImGuiKeyData KeysData_321;
		public ImGuiKeyData KeysData_322;
		public ImGuiKeyData KeysData_323;
		public ImGuiKeyData KeysData_324;
		public ImGuiKeyData KeysData_325;
		public ImGuiKeyData KeysData_326;
		public ImGuiKeyData KeysData_327;
		public ImGuiKeyData KeysData_328;
		public ImGuiKeyData KeysData_329;
		public ImGuiKeyData KeysData_330;
		public ImGuiKeyData KeysData_331;
		public ImGuiKeyData KeysData_332;
		public ImGuiKeyData KeysData_333;
		public ImGuiKeyData KeysData_334;
		public ImGuiKeyData KeysData_335;
		public ImGuiKeyData KeysData_336;
		public ImGuiKeyData KeysData_337;
		public ImGuiKeyData KeysData_338;
		public ImGuiKeyData KeysData_339;
		public ImGuiKeyData KeysData_340;
		public ImGuiKeyData KeysData_341;
		public ImGuiKeyData KeysData_342;
		public ImGuiKeyData KeysData_343;
		public ImGuiKeyData KeysData_344;
		public ImGuiKeyData KeysData_345;
		public ImGuiKeyData KeysData_346;
		public ImGuiKeyData KeysData_347;
		public ImGuiKeyData KeysData_348;
		public ImGuiKeyData KeysData_349;
		public ImGuiKeyData KeysData_350;
		public ImGuiKeyData KeysData_351;
		public ImGuiKeyData KeysData_352;
		public ImGuiKeyData KeysData_353;
		public ImGuiKeyData KeysData_354;
		public ImGuiKeyData KeysData_355;
		public ImGuiKeyData KeysData_356;
		public ImGuiKeyData KeysData_357;
		public ImGuiKeyData KeysData_358;
		public ImGuiKeyData KeysData_359;
		public ImGuiKeyData KeysData_360;
		public ImGuiKeyData KeysData_361;
		public ImGuiKeyData KeysData_362;
		public ImGuiKeyData KeysData_363;
		public ImGuiKeyData KeysData_364;
		public ImGuiKeyData KeysData_365;
		public ImGuiKeyData KeysData_366;
		public ImGuiKeyData KeysData_367;
		public ImGuiKeyData KeysData_368;
		public ImGuiKeyData KeysData_369;
		public ImGuiKeyData KeysData_370;
		public ImGuiKeyData KeysData_371;
		public ImGuiKeyData KeysData_372;
		public ImGuiKeyData KeysData_373;
		public ImGuiKeyData KeysData_374;
		public ImGuiKeyData KeysData_375;
		public ImGuiKeyData KeysData_376;
		public ImGuiKeyData KeysData_377;
		public ImGuiKeyData KeysData_378;
		public ImGuiKeyData KeysData_379;
		public ImGuiKeyData KeysData_380;
		public ImGuiKeyData KeysData_381;
		public ImGuiKeyData KeysData_382;
		public ImGuiKeyData KeysData_383;
		public ImGuiKeyData KeysData_384;
		public ImGuiKeyData KeysData_385;
		public ImGuiKeyData KeysData_386;
		public ImGuiKeyData KeysData_387;
		public ImGuiKeyData KeysData_388;
		public ImGuiKeyData KeysData_389;
		public ImGuiKeyData KeysData_390;
		public ImGuiKeyData KeysData_391;
		public ImGuiKeyData KeysData_392;
		public ImGuiKeyData KeysData_393;
		public ImGuiKeyData KeysData_394;
		public ImGuiKeyData KeysData_395;
		public ImGuiKeyData KeysData_396;
		public ImGuiKeyData KeysData_397;
		public ImGuiKeyData KeysData_398;
		public ImGuiKeyData KeysData_399;
		public ImGuiKeyData KeysData_400;
		public ImGuiKeyData KeysData_401;
		public ImGuiKeyData KeysData_402;
		public ImGuiKeyData KeysData_403;
		public ImGuiKeyData KeysData_404;
		public ImGuiKeyData KeysData_405;
		public ImGuiKeyData KeysData_406;
		public ImGuiKeyData KeysData_407;
		public ImGuiKeyData KeysData_408;
		public ImGuiKeyData KeysData_409;
		public ImGuiKeyData KeysData_410;
		public ImGuiKeyData KeysData_411;
		public ImGuiKeyData KeysData_412;
		public ImGuiKeyData KeysData_413;
		public ImGuiKeyData KeysData_414;
		public ImGuiKeyData KeysData_415;
		public ImGuiKeyData KeysData_416;
		public ImGuiKeyData KeysData_417;
		public ImGuiKeyData KeysData_418;
		public ImGuiKeyData KeysData_419;
		public ImGuiKeyData KeysData_420;
		public ImGuiKeyData KeysData_421;
		public ImGuiKeyData KeysData_422;
		public ImGuiKeyData KeysData_423;
		public ImGuiKeyData KeysData_424;
		public ImGuiKeyData KeysData_425;
		public ImGuiKeyData KeysData_426;
		public ImGuiKeyData KeysData_427;
		public ImGuiKeyData KeysData_428;
		public ImGuiKeyData KeysData_429;
		public ImGuiKeyData KeysData_430;
		public ImGuiKeyData KeysData_431;
		public ImGuiKeyData KeysData_432;
		public ImGuiKeyData KeysData_433;
		public ImGuiKeyData KeysData_434;
		public ImGuiKeyData KeysData_435;
		public ImGuiKeyData KeysData_436;
		public ImGuiKeyData KeysData_437;
		public ImGuiKeyData KeysData_438;
		public ImGuiKeyData KeysData_439;
		public ImGuiKeyData KeysData_440;
		public ImGuiKeyData KeysData_441;
		public ImGuiKeyData KeysData_442;
		public ImGuiKeyData KeysData_443;
		public ImGuiKeyData KeysData_444;
		public ImGuiKeyData KeysData_445;
		public ImGuiKeyData KeysData_446;
		public ImGuiKeyData KeysData_447;
		public ImGuiKeyData KeysData_448;
		public ImGuiKeyData KeysData_449;
		public ImGuiKeyData KeysData_450;
		public ImGuiKeyData KeysData_451;
		public ImGuiKeyData KeysData_452;
		public ImGuiKeyData KeysData_453;
		public ImGuiKeyData KeysData_454;
		public ImGuiKeyData KeysData_455;
		public ImGuiKeyData KeysData_456;
		public ImGuiKeyData KeysData_457;
		public ImGuiKeyData KeysData_458;
		public ImGuiKeyData KeysData_459;
		public ImGuiKeyData KeysData_460;
		public ImGuiKeyData KeysData_461;
		public ImGuiKeyData KeysData_462;
		public ImGuiKeyData KeysData_463;
		public ImGuiKeyData KeysData_464;
		public ImGuiKeyData KeysData_465;
		public ImGuiKeyData KeysData_466;
		public ImGuiKeyData KeysData_467;
		public ImGuiKeyData KeysData_468;
		public ImGuiKeyData KeysData_469;
		public ImGuiKeyData KeysData_470;
		public ImGuiKeyData KeysData_471;
		public ImGuiKeyData KeysData_472;
		public ImGuiKeyData KeysData_473;
		public ImGuiKeyData KeysData_474;
		public ImGuiKeyData KeysData_475;
		public ImGuiKeyData KeysData_476;
		public ImGuiKeyData KeysData_477;
		public ImGuiKeyData KeysData_478;
		public ImGuiKeyData KeysData_479;
		public ImGuiKeyData KeysData_480;
		public ImGuiKeyData KeysData_481;
		public ImGuiKeyData KeysData_482;
		public ImGuiKeyData KeysData_483;
		public ImGuiKeyData KeysData_484;
		public ImGuiKeyData KeysData_485;
		public ImGuiKeyData KeysData_486;
		public ImGuiKeyData KeysData_487;
		public ImGuiKeyData KeysData_488;
		public ImGuiKeyData KeysData_489;
		public ImGuiKeyData KeysData_490;
		public ImGuiKeyData KeysData_491;
		public ImGuiKeyData KeysData_492;
		public ImGuiKeyData KeysData_493;
		public ImGuiKeyData KeysData_494;
		public ImGuiKeyData KeysData_495;
		public ImGuiKeyData KeysData_496;
		public ImGuiKeyData KeysData_497;
		public ImGuiKeyData KeysData_498;
		public ImGuiKeyData KeysData_499;
		public ImGuiKeyData KeysData_500;
		public ImGuiKeyData KeysData_501;
		public ImGuiKeyData KeysData_502;
		public ImGuiKeyData KeysData_503;
		public ImGuiKeyData KeysData_504;
		public ImGuiKeyData KeysData_505;
		public ImGuiKeyData KeysData_506;
		public ImGuiKeyData KeysData_507;
		public ImGuiKeyData KeysData_508;
		public ImGuiKeyData KeysData_509;
		public ImGuiKeyData KeysData_510;
		public ImGuiKeyData KeysData_511;
		public ImGuiKeyData KeysData_512;
		public ImGuiKeyData KeysData_513;
		public ImGuiKeyData KeysData_514;
		public ImGuiKeyData KeysData_515;
		public ImGuiKeyData KeysData_516;
		public ImGuiKeyData KeysData_517;
		public ImGuiKeyData KeysData_518;
		public ImGuiKeyData KeysData_519;
		public ImGuiKeyData KeysData_520;
		public ImGuiKeyData KeysData_521;
		public ImGuiKeyData KeysData_522;
		public ImGuiKeyData KeysData_523;
		public ImGuiKeyData KeysData_524;
		public ImGuiKeyData KeysData_525;
		public ImGuiKeyData KeysData_526;
		public ImGuiKeyData KeysData_527;
		public ImGuiKeyData KeysData_528;
		public ImGuiKeyData KeysData_529;
		public ImGuiKeyData KeysData_530;
		public ImGuiKeyData KeysData_531;
		public ImGuiKeyData KeysData_532;
		public ImGuiKeyData KeysData_533;
		public ImGuiKeyData KeysData_534;
		public ImGuiKeyData KeysData_535;
		public ImGuiKeyData KeysData_536;
		public ImGuiKeyData KeysData_537;
		public ImGuiKeyData KeysData_538;
		public ImGuiKeyData KeysData_539;
		public ImGuiKeyData KeysData_540;
		public ImGuiKeyData KeysData_541;
		public ImGuiKeyData KeysData_542;
		public ImGuiKeyData KeysData_543;
		public ImGuiKeyData KeysData_544;
		public ImGuiKeyData KeysData_545;
		public ImGuiKeyData KeysData_546;
		public ImGuiKeyData KeysData_547;
		public ImGuiKeyData KeysData_548;
		public ImGuiKeyData KeysData_549;
		public ImGuiKeyData KeysData_550;
		public ImGuiKeyData KeysData_551;
		public ImGuiKeyData KeysData_552;
		public ImGuiKeyData KeysData_553;
		public ImGuiKeyData KeysData_554;
		public ImGuiKeyData KeysData_555;
		public ImGuiKeyData KeysData_556;
		public ImGuiKeyData KeysData_557;
		public ImGuiKeyData KeysData_558;
		public ImGuiKeyData KeysData_559;
		public ImGuiKeyData KeysData_560;
		public ImGuiKeyData KeysData_561;
		public ImGuiKeyData KeysData_562;
		public ImGuiKeyData KeysData_563;
		public ImGuiKeyData KeysData_564;
		public ImGuiKeyData KeysData_565;
		public ImGuiKeyData KeysData_566;
		public ImGuiKeyData KeysData_567;
		public ImGuiKeyData KeysData_568;
		public ImGuiKeyData KeysData_569;
		public ImGuiKeyData KeysData_570;
		public ImGuiKeyData KeysData_571;
		public ImGuiKeyData KeysData_572;
		public ImGuiKeyData KeysData_573;
		public ImGuiKeyData KeysData_574;
		public ImGuiKeyData KeysData_575;
		public ImGuiKeyData KeysData_576;
		public ImGuiKeyData KeysData_577;
		public ImGuiKeyData KeysData_578;
		public ImGuiKeyData KeysData_579;
		public ImGuiKeyData KeysData_580;
		public ImGuiKeyData KeysData_581;
		public ImGuiKeyData KeysData_582;
		public ImGuiKeyData KeysData_583;
		public ImGuiKeyData KeysData_584;
		public ImGuiKeyData KeysData_585;
		public ImGuiKeyData KeysData_586;
		public ImGuiKeyData KeysData_587;
		public ImGuiKeyData KeysData_588;
		public ImGuiKeyData KeysData_589;
		public ImGuiKeyData KeysData_590;
		public ImGuiKeyData KeysData_591;
		public ImGuiKeyData KeysData_592;
		public ImGuiKeyData KeysData_593;
		public ImGuiKeyData KeysData_594;
		public ImGuiKeyData KeysData_595;
		public ImGuiKeyData KeysData_596;
		public ImGuiKeyData KeysData_597;
		public ImGuiKeyData KeysData_598;
		public ImGuiKeyData KeysData_599;
		public ImGuiKeyData KeysData_600;
		public ImGuiKeyData KeysData_601;
		public ImGuiKeyData KeysData_602;
		public ImGuiKeyData KeysData_603;
		public ImGuiKeyData KeysData_604;
		public ImGuiKeyData KeysData_605;
		public ImGuiKeyData KeysData_606;
		public ImGuiKeyData KeysData_607;
		public ImGuiKeyData KeysData_608;
		public ImGuiKeyData KeysData_609;
		public ImGuiKeyData KeysData_610;
		public ImGuiKeyData KeysData_611;
		public ImGuiKeyData KeysData_612;
		public ImGuiKeyData KeysData_613;
		public ImGuiKeyData KeysData_614;
		public ImGuiKeyData KeysData_615;
		public ImGuiKeyData KeysData_616;
		public ImGuiKeyData KeysData_617;
		public ImGuiKeyData KeysData_618;
		public ImGuiKeyData KeysData_619;
		public ImGuiKeyData KeysData_620;
		public ImGuiKeyData KeysData_621;
		public ImGuiKeyData KeysData_622;
		public ImGuiKeyData KeysData_623;
		public ImGuiKeyData KeysData_624;
		public ImGuiKeyData KeysData_625;
		public ImGuiKeyData KeysData_626;
		public ImGuiKeyData KeysData_627;
		public ImGuiKeyData KeysData_628;
		public ImGuiKeyData KeysData_629;
		public ImGuiKeyData KeysData_630;
		public ImGuiKeyData KeysData_631;
		public ImGuiKeyData KeysData_632;
		public ImGuiKeyData KeysData_633;
		public ImGuiKeyData KeysData_634;
		public ImGuiKeyData KeysData_635;
		public ImGuiKeyData KeysData_636;
		public ImGuiKeyData KeysData_637;
		public ImGuiKeyData KeysData_638;
		public ImGuiKeyData KeysData_639;
		public ImGuiKeyData KeysData_640;
		public ImGuiKeyData KeysData_641;
		public ImGuiKeyData KeysData_642;
		public ImGuiKeyData KeysData_643;
		public ImGuiKeyData KeysData_644;
		public ImGuiKeyData KeysData_645;
		public ImGuiKeyData KeysData_646;
		public ImGuiKeyData KeysData_647;
		public ImGuiKeyData KeysData_648;
		public ImGuiKeyData KeysData_649;
		public ImGuiKeyData KeysData_650;
		public ImGuiKeyData KeysData_651;

		/// <summary>
		/// Alternative to WantCaptureMouse: (WantCaptureMouse == true &amp;&amp; WantCaptureMouseUnlessPopupClose == false) when a click over void is expected to close a popup.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WantCaptureMouseUnlessPopupClose")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantCaptureMouseUnlessPopupClose;

		/// <summary>
		/// Previous mouse position (note that MouseDelta is not necessary == MousePos-MousePosPrev, in case either position is invalid)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MousePosPrev")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 MousePosPrev;

		/// <summary>
		/// Position at time of clicking<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseClickedPos")]
		[NativeName(NativeNameType.Type, "ImVec2[5]")]
		public Vector2 MouseClickedPos_0;
		public Vector2 MouseClickedPos_1;
		public Vector2 MouseClickedPos_2;
		public Vector2 MouseClickedPos_3;
		public Vector2 MouseClickedPos_4;

		/// <summary>
		/// Time of last click (used to figure out double-click)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseClickedTime")]
		[NativeName(NativeNameType.Type, "double[5]")]
		public double MouseClickedTime_0;
		public double MouseClickedTime_1;
		public double MouseClickedTime_2;
		public double MouseClickedTime_3;
		public double MouseClickedTime_4;

		/// <summary>
		/// Mouse button went from !Down to Down (same as MouseClickedCount[x] != 0)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseClicked")]
		[NativeName(NativeNameType.Type, "bool[5]")]
		public bool MouseClicked_0;
		public bool MouseClicked_1;
		public bool MouseClicked_2;
		public bool MouseClicked_3;
		public bool MouseClicked_4;

		/// <summary>
		/// Has mouse button been double-clicked? (same as MouseClickedCount[x] == 2)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDoubleClicked")]
		[NativeName(NativeNameType.Type, "bool[5]")]
		public bool MouseDoubleClicked_0;
		public bool MouseDoubleClicked_1;
		public bool MouseDoubleClicked_2;
		public bool MouseDoubleClicked_3;
		public bool MouseDoubleClicked_4;

		/// <summary>
		/// == 0 (not clicked), == 1 (same as MouseClicked[]), == 2 (double-clicked), == 3 (triple-clicked) etc. when going from !Down to Down<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseClickedCount")]
		[NativeName(NativeNameType.Type, "ImU16[5]")]
		public ushort MouseClickedCount_0;
		public ushort MouseClickedCount_1;
		public ushort MouseClickedCount_2;
		public ushort MouseClickedCount_3;
		public ushort MouseClickedCount_4;

		/// <summary>
		/// Count successive number of clicks. Stays valid after mouse release. Reset after another click is done.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseClickedLastCount")]
		[NativeName(NativeNameType.Type, "ImU16[5]")]
		public ushort MouseClickedLastCount_0;
		public ushort MouseClickedLastCount_1;
		public ushort MouseClickedLastCount_2;
		public ushort MouseClickedLastCount_3;
		public ushort MouseClickedLastCount_4;

		/// <summary>
		/// Mouse button went from Down to !Down<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseReleased")]
		[NativeName(NativeNameType.Type, "bool[5]")]
		public bool MouseReleased_0;
		public bool MouseReleased_1;
		public bool MouseReleased_2;
		public bool MouseReleased_3;
		public bool MouseReleased_4;

		/// <summary>
		/// Track if button was clicked inside a dear imgui window or over void blocked by a popup. We don't request mouse capture from the application if click started outside ImGui bounds.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDownOwned")]
		[NativeName(NativeNameType.Type, "bool[5]")]
		public bool MouseDownOwned_0;
		public bool MouseDownOwned_1;
		public bool MouseDownOwned_2;
		public bool MouseDownOwned_3;
		public bool MouseDownOwned_4;

		/// <summary>
		/// Track if button was clicked inside a dear imgui window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDownOwnedUnlessPopupClose")]
		[NativeName(NativeNameType.Type, "bool[5]")]
		public bool MouseDownOwnedUnlessPopupClose_0;
		public bool MouseDownOwnedUnlessPopupClose_1;
		public bool MouseDownOwnedUnlessPopupClose_2;
		public bool MouseDownOwnedUnlessPopupClose_3;
		public bool MouseDownOwnedUnlessPopupClose_4;

		/// <summary>
		/// On a non-Mac system, holding SHIFT requests WheelY to perform the equivalent of a WheelX event. On a Mac system this is already enforced by the system.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseWheelRequestAxisSwap")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte MouseWheelRequestAxisSwap;

		/// <summary>
		/// Duration the mouse button has been down (0.0f == just clicked)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDownDuration")]
		[NativeName(NativeNameType.Type, "float[5]")]
		public float MouseDownDuration_0;
		public float MouseDownDuration_1;
		public float MouseDownDuration_2;
		public float MouseDownDuration_3;
		public float MouseDownDuration_4;

		/// <summary>
		/// Previous time the mouse button has been down<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDownDurationPrev")]
		[NativeName(NativeNameType.Type, "float[5]")]
		public float MouseDownDurationPrev_0;
		public float MouseDownDurationPrev_1;
		public float MouseDownDurationPrev_2;
		public float MouseDownDurationPrev_3;
		public float MouseDownDurationPrev_4;

		/// <summary>
		/// Maximum distance, absolute, on each axis, of how much mouse has traveled from the clicking point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDragMaxDistanceAbs")]
		[NativeName(NativeNameType.Type, "ImVec2[5]")]
		public Vector2 MouseDragMaxDistanceAbs_0;
		public Vector2 MouseDragMaxDistanceAbs_1;
		public Vector2 MouseDragMaxDistanceAbs_2;
		public Vector2 MouseDragMaxDistanceAbs_3;
		public Vector2 MouseDragMaxDistanceAbs_4;

		/// <summary>
		/// Squared maximum distance of how much mouse has traveled from the clicking point (used for moving thresholds)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseDragMaxDistanceSqr")]
		[NativeName(NativeNameType.Type, "float[5]")]
		public float MouseDragMaxDistanceSqr_0;
		public float MouseDragMaxDistanceSqr_1;
		public float MouseDragMaxDistanceSqr_2;
		public float MouseDragMaxDistanceSqr_3;
		public float MouseDragMaxDistanceSqr_4;

		/// <summary>
		/// TouchPen pressure (0.0f to 1.0f, should be &gt;0.0f only when MouseDown[0] == true). Helper storage currently unused by Dear ImGui.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PenPressure")]
		[NativeName(NativeNameType.Type, "float")]
		public float PenPressure;

		/// <summary>
		/// Only modify via AddFocusEvent()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "AppFocusLost")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte AppFocusLost;

		/// <summary>
		/// Only modify via SetAppAcceptingEvents()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "AppAcceptingEvents")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte AppAcceptingEvents;

		/// <summary>
		/// -1: unknown, 0: using AddKeyEvent(), 1: using legacy io.KeysDown[]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BackendUsingLegacyKeyArrays")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte BackendUsingLegacyKeyArrays;

		/// <summary>
		/// 0: using AddKeyAnalogEvent(), 1: writing to legacy io.NavInputs[] directly<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BackendUsingLegacyNavInputArray")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte BackendUsingLegacyNavInputArray;

		/// <summary>
		/// For AddInputCharacterUTF16()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InputQueueSurrogate")]
		[NativeName(NativeNameType.Type, "ImWchar16")]
		public char InputQueueSurrogate;

		/// <summary>
		/// Queue of _characters_ input (obtained by platform backend). Fill using AddInputCharacter() helper.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InputQueueCharacters")]
		[NativeName(NativeNameType.Type, "ImVector_ImWchar")]
		public ImVectorImWchar InputQueueCharacters;




		public unsafe Span<ImGuiKeyData> KeysData
		
		{
			get
			{
				fixed (ImGuiKeyData* p = &this.KeysData_0)
				{
					return new Span<ImGuiKeyData>(p, 652);
				}
			}
		}
		public unsafe Span<Vector2> MouseClickedPos
		
		{
			get
			{
				fixed (Vector2* p = &this.MouseClickedPos_0)
				{
					return new Span<Vector2>(p, 5);
				}
			}
		}
		public unsafe Span<Vector2> MouseDragMaxDistanceAbs
		
		{
			get
			{
				fixed (Vector2* p = &this.MouseDragMaxDistanceAbs_0)
				{
					return new Span<Vector2>(p, 5);
				}
			}
		}
		/// <summary>		/// Queue a gainloss of focus for the application (generally based on OSplatform focus of your window)		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddFocusEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddFocusEvent([NativeName(NativeNameType.Param, "focused")] [NativeName(NativeNameType.Type, "bool")] bool fOCUSED)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddFocusEventNative(@this, fOCUSED ? (byte)1 : (byte)0);
			}
		}

		/// <summary>		/// Queue a new character input		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharacter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddInputCharacter([NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "unsigned int")] uint c)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddInputCharacterNative(@this, c);
			}
		}

		/// <summary>		/// Queue a new characters input from a UTF-8 string		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharactersUTF8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddInputCharactersUTF8([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* sTR)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddInputCharactersUTF8Native(@this, sTR);
			}
		}

		/// <summary>		/// Queue a new characters input from a UTF-8 string		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharactersUTF8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddInputCharactersUTF8([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte sTR)
		{
			fixed (ImGuiIO* @this = &this)
			{
				fixed (byte* psTR = &sTR)
				{
					ImGui.AddInputCharactersUTF8Native(@this, (byte*)psTR);
				}
			}
		}

		/// <summary>		/// Queue a new characters input from a UTF-8 string		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharactersUTF8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddInputCharactersUTF8([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string sTR)
		{
			fixed (ImGuiIO* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (sTR != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(sTR);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(sTR, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddInputCharactersUTF8Native(@this, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>		/// Queue a new character input from a UTF-16 character, it can be a surrogate		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharacterUTF16")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddInputCharacterUTF16([NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar16")] char c)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddInputCharacterUTF16Native(@this, c);
			}
		}

		/// <summary>		/// Queue a new key downup event for analog values (e.g. ImGuiKey_Gamepad_ values). Dead-zones should be handled by the backend.		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddKeyAnalogEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddKeyAnalogEvent([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey kEY, [NativeName(NativeNameType.Param, "down")] [NativeName(NativeNameType.Type, "bool")] bool dOWN, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddKeyAnalogEventNative(@this, kEY, dOWN ? (byte)1 : (byte)0, v);
			}
		}

		/// <summary>		/// Queue a new key downup event. Key should be "translated" (as in, generally ImGuiKey_A matches the key end-user would use to emit an 'A' character)		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddKeyEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddKeyEvent([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey kEY, [NativeName(NativeNameType.Param, "down")] [NativeName(NativeNameType.Type, "bool")] bool dOWN)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddKeyEventNative(@this, kEY, dOWN ? (byte)1 : (byte)0);
			}
		}

		/// <summary>		/// Queue a mouse button change		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddMouseButtonEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddMouseButtonEvent([NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "int")] int bUTTON, [NativeName(NativeNameType.Param, "down")] [NativeName(NativeNameType.Type, "bool")] bool dOWN)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddMouseButtonEventNative(@this, bUTTON, dOWN ? (byte)1 : (byte)0);
			}
		}

		/// <summary>		/// Queue a mouse position update. Use -FLT_MAX,-FLT_MAX to signify no mouse (e.g. app not focused and not hovered)		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddMousePosEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddMousePosEvent([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddMousePosEventNative(@this, x, y);
			}
		}

		/// <summary>		/// Queue a mouse source change (MouseTouchScreenPen)		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddMouseSourceEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddMouseSourceEvent([NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ImGuiMouseSource")] ImGuiMouseSource sOURCE)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddMouseSourceEventNative(@this, sOURCE);
			}
		}

		/// <summary>		/// Queue a mouse hovered viewport. Requires backend to set ImGuiBackendFlags_HasMouseHoveredViewport to call this (for multi-viewport support).		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddMouseViewportEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddMouseViewportEvent([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] int iD)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddMouseViewportEventNative(@this, iD);
			}
		}

		/// <summary>		/// Queue a mouse wheel update. wheel_y<0: scroll down, wheel_y>0: scroll up, wheel_x<0: scroll right, wheel_x>0: scroll left.		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_AddMouseWheelEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddMouseWheelEvent([NativeName(NativeNameType.Param, "wheel_x")] [NativeName(NativeNameType.Type, "float")] float wheelX, [NativeName(NativeNameType.Param, "wheel_y")] [NativeName(NativeNameType.Type, "float")] float wheelY)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddMouseWheelEventNative(@this, wheelX, wheelY);
			}
		}

		/// <summary>		/// [Internal] Clear the text input buffer manually		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_ClearInputCharacters")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearInputCharacters()
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.ClearInputCharactersNative(@this);
			}
		}

		/// <summary>		/// [Internal] Release all keys		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_ClearInputKeys")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearInputKeys()
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.ClearInputKeysNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiIO_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>		/// Set master flag for accepting keymousetext events (default to true). Useful if you have native dialog boxes that are interrupting your application looprefresh, and you want to disable events being queued while your app is frozen.		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_SetAppAcceptingEvents")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetAppAcceptingEvents([NativeName(NativeNameType.Param, "accepting_events")] [NativeName(NativeNameType.Type, "bool")] bool acceptingEvents)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.SetAppAcceptingEventsNative(@this, acceptingEvents ? (byte)1 : (byte)0);
			}
		}

		/// <summary>		/// [Optional] Specify index for legacy <1.87 IsKeyXXX() functions with native indices + specify native keycode, scancode.		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_SetKeyEventNativeData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetKeyEventNativeData([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey kEY, [NativeName(NativeNameType.Param, "native_keycode")] [NativeName(NativeNameType.Type, "int")] int nativeKeycode, [NativeName(NativeNameType.Param, "native_scancode")] [NativeName(NativeNameType.Type, "int")] int nativeScancode, [NativeName(NativeNameType.Param, "native_legacy_index")] [NativeName(NativeNameType.Type, "int")] int nativeLegacyIndex)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.SetKeyEventNativeDataNative(@this, kEY, nativeKeycode, nativeScancode, nativeLegacyIndex);
			}
		}

		/// <summary>		/// [Optional] Specify index for legacy <1.87 IsKeyXXX() functions with native indices + specify native keycode, scancode.		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiIO_SetKeyEventNativeData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetKeyEventNativeData([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey kEY, [NativeName(NativeNameType.Param, "native_keycode")] [NativeName(NativeNameType.Type, "int")] int nativeKeycode, [NativeName(NativeNameType.Param, "native_scancode")] [NativeName(NativeNameType.Type, "int")] int nativeScancode)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.SetKeyEventNativeDataNative(@this, kEY, nativeKeycode, nativeScancode, (int)(-1));
			}
		}

	}

	/// <summary>
	/// (Optional) Support for IME (Input Method Editor) via the io.SetPlatformImeDataFn() function.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiPlatformImeData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiPlatformImeData
	{
		/// <summary>
		/// A widget wants the IME to be visible<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WantVisible")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantVisible;

		/// <summary>
		/// Position of the input cursor<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InputPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 InputPos;

		/// <summary>
		/// Line height<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InputLineHeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float InputLineHeight;




		[NativeName(NativeNameType.Func, "ImGuiPlatformImeData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiPlatformImeData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// [Internal] Storage used by IsKeyDown(), IsKeyPressed() etc functions.<br/>
	/// If prior to 1.87 you used io.KeysDownDuration[] (which was marked as internal), you should use GetKeyData(key)-&gt;DownDuration and *NOT* io.KeysData[key]-&gt;DownDuration.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiKeyData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiKeyData
	{
		/// <summary>
		/// True for if key is down<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Down")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Down;

		/// <summary>
		/// Duration the key has been down (&lt;0.0f: not pressed, 0.0f: just pressed, &gt;0.0f: time held)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DownDuration")]
		[NativeName(NativeNameType.Type, "float")]
		public float DownDuration;

		/// <summary>
		/// Last frame duration the key has been down<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DownDurationPrev")]
		[NativeName(NativeNameType.Type, "float")]
		public float DownDurationPrev;

		/// <summary>
		/// 0.0f..1.0f for gamepad values<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "AnalogValue")]
		[NativeName(NativeNameType.Type, "float")]
		public float AnalogValue;



	}

	/// <summary>
	/// (Optional) Access via ImGui::GetPlatformIO()<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiPlatformIO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiPlatformIO
	{
		/// <summary>
		/// Platform function --------------------------------------------------- Called by ----- . . U . .   Create a new platform window for the given viewport<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_CreateWindow")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformCreateWindow;

		/// <summary>
		/// N . U . D<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_DestroyWindow")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformDestroyWindow;

		/// <summary>
		/// . . U . .   Newly created windows are initially hidden so SetWindowPosSizeTitle can be called on them before showing the window<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_ShowWindow")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformShowWindow;

		/// <summary>
		/// . . U . .   Set platform window position (given the upper-left corner of client area)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_SetWindowPos")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp, ImVec2 pos)*")]
		public unsafe void* PlatformSetWindowPos;

		/// <summary>
		/// N . . . .<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_GetWindowPos")]
		[NativeName(NativeNameType.Type, "ImVec2 (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformGetWindowPos;

		/// <summary>
		/// . . U . .   Set platform window client area size (ignoring OS decorations such as OS title bar etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_SetWindowSize")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp, ImVec2 size)*")]
		public unsafe void* PlatformSetWindowSize;

		/// <summary>
		/// N . . . .   Get platform window client area size<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_GetWindowSize")]
		[NativeName(NativeNameType.Type, "ImVec2 (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformGetWindowSize;

		/// <summary>
		/// N . . . .   Move window to front and set input focus<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_SetWindowFocus")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformSetWindowFocus;

		/// <summary>
		/// . . U . .<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_GetWindowFocus")]
		[NativeName(NativeNameType.Type, "bool (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformGetWindowFocus;

		/// <summary>
		/// N . . . .   Get platform window minimized state. When minimized, we generally won't attempt to getset size and contents will be culled more easily<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_GetWindowMinimized")]
		[NativeName(NativeNameType.Type, "bool (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformGetWindowMinimized;

		/// <summary>
		/// . . U . .   Set platform window title (given an UTF-8 string)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_SetWindowTitle")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp, const char* str)*")]
		public unsafe void* PlatformSetWindowTitle;

		/// <summary>
		/// . . U . .   (Optional) Setup global transparency (not per-pixel transparency)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_SetWindowAlpha")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp, float alpha)*")]
		public unsafe void* PlatformSetWindowAlpha;

		/// <summary>
		/// . . U . .   (Optional) Called by UpdatePlatformWindows(). Optional hook to allow the platform backend from doing general book-keeping every frame.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_UpdateWindow")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformUpdateWindow;

		/// <summary>
		/// . . . R .   (Optional) Main rendering (platform side! This is often unused, or just setting a "current" context for OpenGL bindings). 'render_arg' is the value passed to RenderPlatformWindowsDefault().<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_RenderWindow")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp, void* render_arg)*")]
		public unsafe void* PlatformRenderWindow;

		/// <summary>
		/// . . . R .   (Optional) Call PresentSwapBuffers (platform side! This is often unused!). 'render_arg' is the value passed to RenderPlatformWindowsDefault().<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_SwapBuffers")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp, void* render_arg)*")]
		public unsafe void* PlatformSwapBuffers;

		/// <summary>
		/// N . . . .   (Optional) [BETA] FIXME-DPI: DPI handling: Return DPI scale for this viewport. 1.0f = 96 DPI.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_GetWindowDpiScale")]
		[NativeName(NativeNameType.Type, "float (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformGetWindowDpiScale;

		/// <summary>
		/// . F . . .   (Optional) [BETA] FIXME-DPI: DPI handling: Called during Begin() every time the viewport we are outputting into changes, so backend has a chance to swap fonts to adjust style.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_OnChangedViewport")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp)*")]
		public unsafe void* PlatformOnChangedViewport;

		/// <summary>
		/// (Optional) For a Vulkan Renderer to call into Platform code (since the surface creation needs to tie them both).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Platform_CreateVkSurface")]
		[NativeName(NativeNameType.Type, "int (*)(ImGuiViewport* vp, ImU64 vk_inst, const void* vk_allocators, ImU64* out_vk_surface)*")]
		public unsafe void* PlatformCreateVkSurface;

		/// <summary>
		/// (Optional) Renderer functions (e.g. DirectX, OpenGL, Vulkan) . . U . .   Create swap chain, frame buffers etc. (called after Platform_CreateWindow)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Renderer_CreateWindow")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp)*")]
		public unsafe void* RendererCreateWindow;

		/// <summary>
		/// N . U . D   Destroy swap chain, frame buffers etc. (called before Platform_DestroyWindow)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Renderer_DestroyWindow")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp)*")]
		public unsafe void* RendererDestroyWindow;

		/// <summary>
		/// . . U . .   Resize swap chain, frame buffers etc. (called after Platform_SetWindowSize)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Renderer_SetWindowSize")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp, ImVec2 size)*")]
		public unsafe void* RendererSetWindowSize;

		/// <summary>
		/// . . . R .   (Optional) Clear framebuffer, setup render target, then render the viewport-&gt;DrawData. 'render_arg' is the value passed to RenderPlatformWindowsDefault().<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Renderer_RenderWindow")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp, void* render_arg)*")]
		public unsafe void* RendererRenderWindow;

		/// <summary>
		/// . . . R .   (Optional) Call PresentSwapBuffers. 'render_arg' is the value passed to RenderPlatformWindowsDefault().<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Renderer_SwapBuffers")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiViewport* vp, void* render_arg)*")]
		public unsafe void* RendererSwapBuffers;

		[NativeName(NativeNameType.Field, "Monitors")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiPlatformMonitor")]
		public ImVectorImGuiPlatformMonitor Monitors;
		/// <summary>
		/// Viewports list (the list is updated by calling ImGui::EndFrame or ImGui::Render)<br/>
		/// (in the future we will attempt to organize this feature to remove the need for a "main viewport") Main viewports, followed by all secondary viewports.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Viewports")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiViewportPtr")]
		public ImVectorImGuiViewportPtr Viewports;




		[NativeName(NativeNameType.Func, "ImGuiPlatformIO_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiPlatformIO* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiPlatformMonitor")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiPlatformMonitor
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiPlatformMonitor*")]
		public unsafe ImGuiPlatformMonitor* Data;


	}

	/// <summary>
	/// (Optional) This is required when enabling multi-viewport. Represent the bounds of each connected monitordisplay and their DPI.<br/>
	/// We use this information for multiple DPI support + clamping the position of popups and tooltips so they don't straddle multiple monitors.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiPlatformMonitor")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiPlatformMonitor
	{
		/// <summary>
		/// Coordinates of the area displayed on this monitor (Min = upper left, Max = bottom right)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MainPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 MainPos;

		/// <summary>
		/// Coordinates of the area displayed on this monitor (Min = upper left, Max = bottom right)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MainSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 MainSize;

		/// <summary>
		/// Coordinates without task bars  side bars  menu bars. Used to avoid positioning popupstooltips inside this region. If you don't have this info, please copy the value for MainPosMainSize.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WorkPos;

		/// <summary>
		/// Coordinates without task bars  side bars  menu bars. Used to avoid positioning popupstooltips inside this region. If you don't have this info, please copy the value for MainPosMainSize.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WorkSize;

		/// <summary>
		/// 1.0f = 96 DPI<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DpiScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float DpiScale;

		/// <summary>
		/// Backend dependant data (e.g. HMONITOR, GLFWmonitor*, SDL Display Index, NSScreen*)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformHandle")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PlatformHandle;




		[NativeName(NativeNameType.Func, "ImGuiPlatformMonitor_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiPlatformMonitor* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiViewportPtr")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiViewportPtr
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiViewport**")]
		public unsafe ImGuiViewport** Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiStyle")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiStyle
	{
		/// <summary>
		/// Global alpha applies to everything in Dear ImGui.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Alpha")]
		[NativeName(NativeNameType.Type, "float")]
		public float Alpha;

		/// <summary>
		/// Additional alpha multiplier applied by BeginDisabled(). Multiply over current value of Alpha.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DisabledAlpha")]
		[NativeName(NativeNameType.Type, "float")]
		public float DisabledAlpha;

		/// <summary>
		/// Padding within a window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WindowPadding;

		/// <summary>
		/// Radius of window corners rounding. Set to 0.0f to have rectangular windows. Large values tend to lead to variety of artifacts and are not recommended.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowRounding")]
		[NativeName(NativeNameType.Type, "float")]
		public float WindowRounding;

		/// <summary>
		/// Thickness of border around windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPUGPU costly).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowBorderSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float WindowBorderSize;

		/// <summary>
		/// Minimum window size. This is a global setting. If you want to constrain individual windows, use SetNextWindowSizeConstraints().<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowMinSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WindowMinSize;

		/// <summary>
		/// Alignment for title bar text. Defaults to (0.0f,0.5f) for left-aligned,vertically centered.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowTitleAlign")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WindowTitleAlign;

		/// <summary>
		/// Side of the collapsingdocking button in the title bar (NoneLeftRight). Defaults to ImGuiDir_Left.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowMenuButtonPosition")]
		[NativeName(NativeNameType.Type, "ImGuiDir")]
		public ImGuiDir WindowMenuButtonPosition;

		/// <summary>
		/// Radius of child window corners rounding. Set to 0.0f to have rectangular windows.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ChildRounding")]
		[NativeName(NativeNameType.Type, "float")]
		public float ChildRounding;

		/// <summary>
		/// Thickness of border around child windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPUGPU costly).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ChildBorderSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float ChildBorderSize;

		/// <summary>
		/// Radius of popup window corners rounding. (Note that tooltip windows use WindowRounding)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PopupRounding")]
		[NativeName(NativeNameType.Type, "float")]
		public float PopupRounding;

		/// <summary>
		/// Thickness of border around popuptooltip windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPUGPU costly).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PopupBorderSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float PopupBorderSize;

		/// <summary>
		/// Padding within a framed rectangle (used by most widgets).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FramePadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 FramePadding;

		/// <summary>
		/// Radius of frame corners rounding. Set to 0.0f to have rectangular frame (used by most widgets).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FrameRounding")]
		[NativeName(NativeNameType.Type, "float")]
		public float FrameRounding;

		/// <summary>
		/// Thickness of border around frames. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPUGPU costly).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FrameBorderSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float FrameBorderSize;

		/// <summary>
		/// Horizontal and vertical spacing between widgetslines.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemSpacing")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ItemSpacing;

		/// <summary>
		/// Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemInnerSpacing")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ItemInnerSpacing;

		/// <summary>
		/// Padding within a table cell<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CellPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 CellPadding;

		/// <summary>
		/// Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TouchExtraPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 TouchExtraPadding;

		/// <summary>
		/// Horizontal indentation when e.g. entering a tree node. Generally == (FontSize + FramePadding.x*2).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IndentSpacing")]
		[NativeName(NativeNameType.Type, "float")]
		public float IndentSpacing;

		/// <summary>
		/// Minimum horizontal spacing between two columns. Preferably &gt; (FramePadding.x + 1).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsMinSpacing")]
		[NativeName(NativeNameType.Type, "float")]
		public float ColumnsMinSpacing;

		/// <summary>
		/// Width of the vertical scrollbar, Height of the horizontal scrollbar.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollbarSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollbarSize;

		/// <summary>
		/// Radius of grab corners for scrollbar.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollbarRounding")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollbarRounding;

		/// <summary>
		/// Minimum widthheight of a grab box for sliderscrollbar.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "GrabMinSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float GrabMinSize;

		/// <summary>
		/// Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "GrabRounding")]
		[NativeName(NativeNameType.Type, "float")]
		public float GrabRounding;

		/// <summary>
		/// The size in pixels of the dead-zone around zero on logarithmic sliders that cross zero.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LogSliderDeadzone")]
		[NativeName(NativeNameType.Type, "float")]
		public float LogSliderDeadzone;

		/// <summary>
		/// Radius of upper corners of a tab. Set to 0.0f to have rectangular tabs.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TabRounding")]
		[NativeName(NativeNameType.Type, "float")]
		public float TabRounding;

		/// <summary>
		/// Thickness of border around tabs.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TabBorderSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float TabBorderSize;

		/// <summary>
		/// Minimum width for close button to appear on an unselected tab when hovered. Set to 0.0f to always show when hovering, set to FLT_MAX to never show close button unless selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TabMinWidthForCloseButton")]
		[NativeName(NativeNameType.Type, "float")]
		public float TabMinWidthForCloseButton;

		/// <summary>
		/// Side of the color button in the ColorEdit4 widget (leftright). Defaults to ImGuiDir_Right.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorButtonPosition")]
		[NativeName(NativeNameType.Type, "ImGuiDir")]
		public ImGuiDir ColorButtonPosition;

		/// <summary>
		/// Alignment of button text when button is larger than text. Defaults to (0.5f, 0.5f) (centered).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ButtonTextAlign")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ButtonTextAlign;

		/// <summary>
		/// Alignment of selectable text. Defaults to (0.0f, 0.0f) (top-left aligned). It's generally important to keep this left-aligned if you want to lay multiple items on a same line.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SelectableTextAlign")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 SelectableTextAlign;

		/// <summary>
		/// Thickkness of border in SeparatorText()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SeparatorTextBorderSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float SeparatorTextBorderSize;

		/// <summary>
		/// Alignment of text within the separator. Defaults to (0.0f, 0.5f) (left aligned, center).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SeparatorTextAlign")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 SeparatorTextAlign;

		/// <summary>
		/// Horizontal offset of text from each edge of the separator + spacing on other axis. Generally small values. .y is recommended to be == FramePadding.y.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SeparatorTextPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 SeparatorTextPadding;

		/// <summary>
		/// Window position are clamped to be visible within the display area or monitors by at least this amount. Only applies to regular windows.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayWindowPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 DisplayWindowPadding;

		/// <summary>
		/// If you cannot see the edges of your screen (e.g. on a TV) increase the safe area padding. Apply to popupstooltips as well regular windows. NB: Prefer configuring your TV sets correctly!<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplaySafeAreaPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 DisplaySafeAreaPadding;

		/// <summary>
		/// Scale software rendered mouse cursor (when io.MouseDrawCursor is enabled). We apply per-monitor DPI scaling over this scale. May be removed later.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseCursorScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float MouseCursorScale;

		/// <summary>
		/// Enable anti-aliased linesborders. Disable if you are really tight on CPUGPU. Latched at the beginning of the frame (copied to ImDrawList).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "AntiAliasedLines")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte AntiAliasedLines;

		/// <summary>
		/// Enable anti-aliased linesborders using textures where possible. Require backend to render with bilinear filtering (NOT pointnearest filtering). Latched at the beginning of the frame (copied to ImDrawList).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "AntiAliasedLinesUseTex")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte AntiAliasedLinesUseTex;

		/// <summary>
		/// Enable anti-aliased edges around filled shapes (rounded rectangles, circles, etc.). Disable if you are really tight on CPUGPU. Latched at the beginning of the frame (copied to ImDrawList).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "AntiAliasedFill")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte AntiAliasedFill;

		/// <summary>
		/// Tessellation tolerance when using PathBezierCurveTo() without a specific number of segments. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CurveTessellationTol")]
		[NativeName(NativeNameType.Type, "float")]
		public float CurveTessellationTol;

		/// <summary>
		/// Maximum error (in pixels) allowed when using AddCircle()AddCircleFilled() or drawing rounded corner rectangles with no explicit segment count specified. Decrease for higher quality but more geometry.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CircleTessellationMaxError")]
		[NativeName(NativeNameType.Type, "float")]
		public float CircleTessellationMaxError;

		[NativeName(NativeNameType.Field, "Colors")]
		[NativeName(NativeNameType.Type, "ImVec4[55]")]
		public Vector4 Colors_0;
		public Vector4 Colors_1;
		public Vector4 Colors_2;
		public Vector4 Colors_3;
		public Vector4 Colors_4;
		public Vector4 Colors_5;
		public Vector4 Colors_6;
		public Vector4 Colors_7;
		public Vector4 Colors_8;
		public Vector4 Colors_9;
		public Vector4 Colors_10;
		public Vector4 Colors_11;
		public Vector4 Colors_12;
		public Vector4 Colors_13;
		public Vector4 Colors_14;
		public Vector4 Colors_15;
		public Vector4 Colors_16;
		public Vector4 Colors_17;
		public Vector4 Colors_18;
		public Vector4 Colors_19;
		public Vector4 Colors_20;
		public Vector4 Colors_21;
		public Vector4 Colors_22;
		public Vector4 Colors_23;
		public Vector4 Colors_24;
		public Vector4 Colors_25;
		public Vector4 Colors_26;
		public Vector4 Colors_27;
		public Vector4 Colors_28;
		public Vector4 Colors_29;
		public Vector4 Colors_30;
		public Vector4 Colors_31;
		public Vector4 Colors_32;
		public Vector4 Colors_33;
		public Vector4 Colors_34;
		public Vector4 Colors_35;
		public Vector4 Colors_36;
		public Vector4 Colors_37;
		public Vector4 Colors_38;
		public Vector4 Colors_39;
		public Vector4 Colors_40;
		public Vector4 Colors_41;
		public Vector4 Colors_42;
		public Vector4 Colors_43;
		public Vector4 Colors_44;
		public Vector4 Colors_45;
		public Vector4 Colors_46;
		public Vector4 Colors_47;
		public Vector4 Colors_48;
		public Vector4 Colors_49;
		public Vector4 Colors_50;
		public Vector4 Colors_51;
		public Vector4 Colors_52;
		public Vector4 Colors_53;
		public Vector4 Colors_54;
		/// <summary>
		/// Behaviors<br/>
		/// (It is possible to modify those fields mid-frame if specific behavior need it, unlike e.g. configuration fields in ImGuiIO) Delay for IsItemHovered(ImGuiHoveredFlags_Stationary). Time required to consider mouse stationary.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverStationaryDelay")]
		[NativeName(NativeNameType.Type, "float")]
		public float HoverStationaryDelay;

		/// <summary>
		/// Delay for IsItemHovered(ImGuiHoveredFlags_DelayShort). Usually used along with HoverStationaryDelay.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverDelayShort")]
		[NativeName(NativeNameType.Type, "float")]
		public float HoverDelayShort;

		/// <summary>
		/// Delay for IsItemHovered(ImGuiHoveredFlags_DelayNormal). "<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverDelayNormal")]
		[NativeName(NativeNameType.Type, "float")]
		public float HoverDelayNormal;

		/// <summary>
		/// Default flags when using IsItemHovered(ImGuiHoveredFlags_ForTooltip) or BeginItemTooltip()SetItemTooltip() while using mouse.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverFlagsForTooltipMouse")]
		[NativeName(NativeNameType.Type, "ImGuiHoveredFlags")]
		public ImGuiHoveredFlags HoverFlagsForTooltipMouse;

		/// <summary>
		/// Default flags when using IsItemHovered(ImGuiHoveredFlags_ForTooltip) or BeginItemTooltip()SetItemTooltip() while using keyboardgamepad.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverFlagsForTooltipNav")]
		[NativeName(NativeNameType.Type, "ImGuiHoveredFlags")]
		public ImGuiHoveredFlags HoverFlagsForTooltipNav;




		public unsafe Span<Vector4> Colors
		
		{
			get
			{
				fixed (Vector4* p = &this.Colors_0)
				{
					return new Span<Vector4>(p, 55);
				}
			}
		}
		[NativeName(NativeNameType.Func, "ImGuiStyle_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiStyle* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStyle_ScaleAllSizes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ScaleAllSizes([NativeName(NativeNameType.Param, "scale_factor")] [NativeName(NativeNameType.Type, "float")] float scaleFactor)
		{
			fixed (ImGuiStyle* @this = &this)
			{
				ImGui.ScaleAllSizesNative(@this, scaleFactor);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiInputEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiInputEvent
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiInputEvent*")]
		public unsafe ImGuiInputEvent* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiInputEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputEvent
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct ImGuiInputEventUnion
		{
			[NativeName(NativeNameType.Field, "MousePos")]
			[NativeName(NativeNameType.Type, "ImGuiInputEventMousePos")]
			[FieldOffset(0)]
			public ImGuiInputEventMousePos MousePos;
			[NativeName(NativeNameType.Field, "MouseWheel")]
			[NativeName(NativeNameType.Type, "ImGuiInputEventMouseWheel")]
			[FieldOffset(0)]
			public ImGuiInputEventMouseWheel MouseWheel;
			[NativeName(NativeNameType.Field, "MouseButton")]
			[NativeName(NativeNameType.Type, "ImGuiInputEventMouseButton")]
			[FieldOffset(0)]
			public ImGuiInputEventMouseButton MouseButton;
			[NativeName(NativeNameType.Field, "MouseViewport")]
			[NativeName(NativeNameType.Type, "ImGuiInputEventMouseViewport")]
			[FieldOffset(0)]
			public ImGuiInputEventMouseViewport MouseViewport;
			[NativeName(NativeNameType.Field, "Key")]
			[NativeName(NativeNameType.Type, "ImGuiInputEventKey")]
			[FieldOffset(0)]
			public ImGuiInputEventKey Key;
			[NativeName(NativeNameType.Field, "Text")]
			[NativeName(NativeNameType.Type, "ImGuiInputEventText")]
			[FieldOffset(0)]
			public ImGuiInputEventText Text;
			[NativeName(NativeNameType.Field, "AppFocused")]
			[NativeName(NativeNameType.Type, "ImGuiInputEventAppFocused")]
			[FieldOffset(0)]
			public ImGuiInputEventAppFocused AppFocused;


		}

		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "ImGuiInputEventType")]
		public ImGuiInputEventType Type;
		[NativeName(NativeNameType.Field, "Source")]
		[NativeName(NativeNameType.Type, "ImGuiInputSource")]
		public ImGuiInputSource Source;
		/// <summary>
		/// Unique, sequential increasing integer to identify an event (if you need to correlate them to other data).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "EventId")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint EventId;

		/// <summary>
		/// if Type == ImGuiInputEventType_MousePos if Type == ImGuiInputEventType_MouseWheel if Type == ImGuiInputEventType_MouseButton if Type == ImGuiInputEventType_MouseViewport if Type == ImGuiInputEventType_Key if Type == ImGuiInputEventType_Text if Type == ImGuiInputEventType_Focus<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public ImGuiInputEventUnion Union;

		[NativeName(NativeNameType.Field, "AddedByTestEngine")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte AddedByTestEngine;



		[NativeName(NativeNameType.Func, "ImGuiInputEvent_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiInputEvent* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// FIXME: Structures in the union below need to be declared as anonymous unions appears to be an extension?<br/>
	/// Using ImVec2() would fail on Clang 'union member 'MousePos' has a non-trivial default constructor'<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiInputEventMousePos")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputEventMousePos
	{
		[NativeName(NativeNameType.Field, "PosX")]
		[NativeName(NativeNameType.Type, "float")]
		public float PosX;
		[NativeName(NativeNameType.Field, "PosY")]
		[NativeName(NativeNameType.Type, "float")]
		public float PosY;
		[NativeName(NativeNameType.Field, "MouseSource")]
		[NativeName(NativeNameType.Type, "ImGuiMouseSource")]
		public ImGuiMouseSource MouseSource;


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiInputEventMouseWheel")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputEventMouseWheel
	{
		[NativeName(NativeNameType.Field, "WheelX")]
		[NativeName(NativeNameType.Type, "float")]
		public float WheelX;
		[NativeName(NativeNameType.Field, "WheelY")]
		[NativeName(NativeNameType.Type, "float")]
		public float WheelY;
		[NativeName(NativeNameType.Field, "MouseSource")]
		[NativeName(NativeNameType.Type, "ImGuiMouseSource")]
		public ImGuiMouseSource MouseSource;


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiInputEventMouseButton")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputEventMouseButton
	{
		[NativeName(NativeNameType.Field, "Button")]
		[NativeName(NativeNameType.Type, "int")]
		public int Button;
		[NativeName(NativeNameType.Field, "Down")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Down;
		[NativeName(NativeNameType.Field, "MouseSource")]
		[NativeName(NativeNameType.Type, "ImGuiMouseSource")]
		public ImGuiMouseSource MouseSource;


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiInputEventMouseViewport")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputEventMouseViewport
	{
		[NativeName(NativeNameType.Field, "HoveredViewportID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int HoveredViewportID;


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiInputEventKey")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputEventKey
	{
		[NativeName(NativeNameType.Field, "Key")]
		[NativeName(NativeNameType.Type, "ImGuiKey")]
		public ImGuiKey Key;
		[NativeName(NativeNameType.Field, "Down")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Down;
		[NativeName(NativeNameType.Field, "AnalogValue")]
		[NativeName(NativeNameType.Type, "float")]
		public float AnalogValue;


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiInputEventText")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputEventText
	{
		[NativeName(NativeNameType.Field, "Char")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Char;


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiInputEventAppFocused")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputEventAppFocused
	{
		[NativeName(NativeNameType.Field, "Focused")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Focused;


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiWindowPtr")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiWindowPtr
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiWindow**")]
		public unsafe ImGuiWindow** Data;


	}

	/// <summary>
	/// Storage for one window<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiWindow")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiWindow
	{
		/// <summary>
		/// Parent UI context (needs to be set explicitly by parent).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Ctx")]
		[NativeName(NativeNameType.Type, "ImGuiContext*")]
		public unsafe ImGuiContext* Ctx;

		/// <summary>
		/// Window name, owned by the window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "char*")]
		public unsafe byte* Name;

		/// <summary>
		/// == ImHashStr(Name)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// See enum ImGuiWindowFlags_<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiWindowFlags")]
		public ImGuiWindowFlags Flags;

		/// <summary>
		/// See enum ImGuiWindowFlags_<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FlagsPreviousFrame")]
		[NativeName(NativeNameType.Type, "ImGuiWindowFlags")]
		public ImGuiWindowFlags FlagsPreviousFrame;

		/// <summary>
		/// Advanced users only. Set with SetNextWindowClass()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowClass")]
		[NativeName(NativeNameType.Type, "ImGuiWindowClass")]
		public ImGuiWindowClass WindowClass;

		/// <summary>
		/// Always set in Begin(). Inactive windows may have a NULL value here if their viewport was discarded.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Viewport")]
		[NativeName(NativeNameType.Type, "ImGuiViewportP*")]
		public unsafe ImGuiViewportP* Viewport;

		/// <summary>
		/// We backup the viewport id (since the viewport may disappear or never be created if the window is inactive)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ViewportId;

		/// <summary>
		/// We backup the viewport position (since the viewport may disappear or never be created if the window is inactive)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ViewportPos;

		/// <summary>
		/// Reset to -1 every frame (index is guaranteed to be valid between NewFrame..EndFrame), only used in the Appearing frame of a tooltippopup to enforce clamping to a given monitor<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportAllowPlatformMonitorExtend")]
		[NativeName(NativeNameType.Type, "int")]
		public int ViewportAllowPlatformMonitorExtend;

		/// <summary>
		/// Position (always rounded-up to nearest pixel)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Pos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Pos;

		/// <summary>
		/// Current size (==SizeFull or collapsed title bar size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Size;

		/// <summary>
		/// Size when non collapsed<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SizeFull")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 SizeFull;

		/// <summary>
		/// Size of contentsscrollable client area (calculated from the extents reach of the cursor) from previous frame. Does not include window decoration or window padding.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ContentSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ContentSize;

		[NativeName(NativeNameType.Field, "ContentSizeIdeal")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ContentSizeIdeal;
		/// <summary>
		/// Size of contentsscrollable client area explicitly request by the user via SetNextWindowContentSize().<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ContentSizeExplicit")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ContentSizeExplicit;

		/// <summary>
		/// Window padding at the time of Begin().<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WindowPadding;

		/// <summary>
		/// Window rounding at the time of Begin(). May be clamped lower to avoid rendering artifacts with title bar, menu bar etc.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowRounding")]
		[NativeName(NativeNameType.Type, "float")]
		public float WindowRounding;

		/// <summary>
		/// Window border size at the time of Begin().<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowBorderSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float WindowBorderSize;

		/// <summary>
		/// LeftUp offsets. Sum of non-scrolling outer decorations (X1 generally == 0.0f. Y1 generally = TitleBarHeight + MenuBarHeight). Locked during Begin().<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DecoOuterSizeX1")]
		[NativeName(NativeNameType.Type, "float")]
		public float DecoOuterSizeX1;

		/// <summary>
		/// LeftUp offsets. Sum of non-scrolling outer decorations (X1 generally == 0.0f. Y1 generally = TitleBarHeight + MenuBarHeight). Locked during Begin().<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DecoOuterSizeY1")]
		[NativeName(NativeNameType.Type, "float")]
		public float DecoOuterSizeY1;

		/// <summary>
		/// RightDown offsets (X2 generally == ScrollbarSize.x, Y2 == ScrollbarSizes.y).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DecoOuterSizeX2")]
		[NativeName(NativeNameType.Type, "float")]
		public float DecoOuterSizeX2;

		/// <summary>
		/// RightDown offsets (X2 generally == ScrollbarSize.x, Y2 == ScrollbarSizes.y).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DecoOuterSizeY2")]
		[NativeName(NativeNameType.Type, "float")]
		public float DecoOuterSizeY2;

		/// <summary>
		/// Applied AFTEROVER InnerRect. Specialized for Tables as they use specialized form of clipping and frozen rowscolumns are inside InnerRect (and not part of regular decoration sizes).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DecoInnerSizeX1")]
		[NativeName(NativeNameType.Type, "float")]
		public float DecoInnerSizeX1;

		/// <summary>
		/// Applied AFTEROVER InnerRect. Specialized for Tables as they use specialized form of clipping and frozen rowscolumns are inside InnerRect (and not part of regular decoration sizes).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DecoInnerSizeY1")]
		[NativeName(NativeNameType.Type, "float")]
		public float DecoInnerSizeY1;

		/// <summary>
		/// Size of buffer storing Name. May be larger than strlen(Name)!<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NameBufLen")]
		[NativeName(NativeNameType.Type, "int")]
		public int NameBufLen;

		/// <summary>
		/// == window-&gt;GetID("#MOVE")<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MoveId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int MoveId;

		/// <summary>
		/// == window-&gt;GetID("#TAB")<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TabId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int TabId;

		/// <summary>
		/// ID of corresponding item in parent window (for navigation to return from child window to parent window)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ChildId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ChildId;

		[NativeName(NativeNameType.Field, "Scroll")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Scroll;
		[NativeName(NativeNameType.Field, "ScrollMax")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ScrollMax;
		/// <summary>
		/// target scroll position. stored as cursor position with scrolling canceled out, so the highest point is always 0.0f. (FLT_MAX for no change)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollTarget")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ScrollTarget;

		/// <summary>
		/// 0.0f = scroll so that target position is at top, 0.5f = scroll so that target position is centered<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollTargetCenterRatio")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ScrollTargetCenterRatio;

		/// <summary>
		/// 0.0f = no snapping, &gt;0.0f snapping threshold<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollTargetEdgeSnapDist")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ScrollTargetEdgeSnapDist;

		/// <summary>
		/// Size taken by each scrollbars on their smaller axis. Pay attention! ScrollbarSizes.x == width of the vertical scrollbar, ScrollbarSizes.y = height of the horizontal scrollbar.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollbarSizes")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ScrollbarSizes;

		/// <summary>
		/// Are scrollbars visible?<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollbarX")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ScrollbarX;

		/// <summary>
		/// Are scrollbars visible?<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollbarY")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ScrollbarY;

		[NativeName(NativeNameType.Field, "ViewportOwned")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ViewportOwned;
		/// <summary>
		/// Set to true on Begin(), unless Collapsed<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Active")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Active;

		[NativeName(NativeNameType.Field, "WasActive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WasActive;
		/// <summary>
		/// Set to true when any widget access the current window<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WriteAccessed")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WriteAccessed;

		/// <summary>
		/// Set when collapsing window to become only title-bar<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Collapsed")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Collapsed;

		[NativeName(NativeNameType.Field, "WantCollapseToggle")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantCollapseToggle;
		/// <summary>
		/// Set when items can safely be all clipped (e.g. window not visible or collapsed)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SkipItems")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte SkipItems;

		/// <summary>
		/// Set during the frame where the window is appearing (or re-appearing)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Appearing")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Appearing;

		/// <summary>
		/// Do not display (== HiddenFrames*** &gt; 0)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Hidden")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Hidden;

		/// <summary>
		/// Set on the "Debug##Default" window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IsFallbackWindow")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsFallbackWindow;

		/// <summary>
		/// Set when passed _ChildWindow, left to false by BeginDocked()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IsExplicitChild")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsExplicitChild;

		/// <summary>
		/// Set when the window has a close button (p_open != NULL)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HasCloseButton")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HasCloseButton;

		/// <summary>
		/// Current border being held for resize (-1: none, otherwise 0-3)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ResizeBorderHeld")]
		[NativeName(NativeNameType.Type, "char")]
		public byte ResizeBorderHeld;

		/// <summary>
		/// Number of Begin() during the current frame (generally 0 or 1, 1+ if appending via multiple BeginEnd pairs)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BeginCount")]
		[NativeName(NativeNameType.Type, "short")]
		public short BeginCount;

		/// <summary>
		/// Number of Begin() during the previous frame<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BeginCountPreviousFrame")]
		[NativeName(NativeNameType.Type, "short")]
		public short BeginCountPreviousFrame;

		/// <summary>
		/// Begin() order within immediate parent window, if we are a child window. Otherwise 0.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BeginOrderWithinParent")]
		[NativeName(NativeNameType.Type, "short")]
		public short BeginOrderWithinParent;

		/// <summary>
		/// Begin() order within entire imgui context. This is mostly used for debugging submission order related issues.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BeginOrderWithinContext")]
		[NativeName(NativeNameType.Type, "short")]
		public short BeginOrderWithinContext;

		/// <summary>
		/// Order within WindowsFocusOrder[], altered when windows are focused.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FocusOrder")]
		[NativeName(NativeNameType.Type, "short")]
		public short FocusOrder;

		/// <summary>
		/// ID in the popup stack when this window is used as a popupmenu (because we use generic NameID for recycling)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PopupId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int PopupId;

		[NativeName(NativeNameType.Field, "AutoFitFramesX")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte AutoFitFramesX;
		[NativeName(NativeNameType.Field, "AutoFitFramesY")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte AutoFitFramesY;
		[NativeName(NativeNameType.Field, "AutoFitChildAxises")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte AutoFitChildAxises;
		[NativeName(NativeNameType.Field, "AutoFitOnlyGrows")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte AutoFitOnlyGrows;
		[NativeName(NativeNameType.Field, "AutoPosLastDirection")]
		[NativeName(NativeNameType.Type, "ImGuiDir")]
		public ImGuiDir AutoPosLastDirection;
		/// <summary>
		/// Hide the window for N frames<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HiddenFramesCanSkipItems")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte HiddenFramesCanSkipItems;

		/// <summary>
		/// Hide the window for N frames while allowing items to be submitted so we can measure their size<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HiddenFramesCannotSkipItems")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte HiddenFramesCannotSkipItems;

		/// <summary>
		/// Hide the window until frame N at Render() time only<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HiddenFramesForRenderOnly")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte HiddenFramesForRenderOnly;

		/// <summary>
		/// Disable window interactions for N frames<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DisableInputsFrames")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte DisableInputsFrames;

		/// <summary>
		/// store acceptable condition flags for SetNextWindowPos() use.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SetWindowPosAllowFlags")]
		[NativeName(NativeNameType.Type, "ImGuiCond")]
		public ImGuiCond SetWindowPosAllowFlags;

		/// <summary>
		/// store acceptable condition flags for SetNextWindowSize() use.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SetWindowSizeAllowFlags")]
		[NativeName(NativeNameType.Type, "ImGuiCond")]
		public ImGuiCond SetWindowSizeAllowFlags;

		/// <summary>
		/// store acceptable condition flags for SetNextWindowCollapsed() use.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SetWindowCollapsedAllowFlags")]
		[NativeName(NativeNameType.Type, "ImGuiCond")]
		public ImGuiCond SetWindowCollapsedAllowFlags;

		/// <summary>
		/// store acceptable condition flags for SetNextWindowDock() use.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SetWindowDockAllowFlags")]
		[NativeName(NativeNameType.Type, "ImGuiCond")]
		public ImGuiCond SetWindowDockAllowFlags;

		/// <summary>
		/// store window position when using a non-zero Pivot (position set needs to be processed when we know the window size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SetWindowPosVal")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 SetWindowPosVal;

		/// <summary>
		/// store window pivot for positioning. ImVec2(0, 0) when positioning from top-left corner; ImVec2(0.5f, 0.5f) for centering; ImVec2(1, 1) for bottom right.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SetWindowPosPivot")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 SetWindowPosPivot;

		/// <summary>
		/// ID stack. ID are hashes seeded with the value at the top of the stack. (In theory this should be in the TempData structure)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IDStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiID")]
		public ImVectorImGuiID IDStack;

		/// <summary>
		/// Temporary per-window data, reset at the beginning of the frame. This used to be called ImGuiDrawContext, hence the "DC" variable name.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DC")]
		[NativeName(NativeNameType.Type, "ImGuiWindowTempData")]
		public ImGuiWindowTempData DC;

		/// <summary>
		/// The best way to understand what those rectangles are is to use the 'Metrics-&gt;Tools-&gt;Show Windows Rectangles' viewer.<br/>
		/// The main 'OuterRect', omitted as a field, is window-&gt;Rect(). == Window-&gt;Rect() just after setup in Begin(). == window-&gt;Rect() for root window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OuterRectClipped")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect OuterRectClipped;

		/// <summary>
		/// Inner rectangle (omit title bar, menu bar, scroll bar)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect InnerRect;

		/// <summary>
		/// == InnerRect shrunk by WindowPadding*0.5f on each side, clipped within viewport or parent clip rect.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect InnerClipRect;

		/// <summary>
		/// Initially covers the whole scrolling region. Reduced by containers e.g columnstables when active. Shrunk by WindowPadding*1.0f on each side. This is meant to replace ContentRegionRect over time (from 1.71+ onward).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect WorkRect;

		/// <summary>
		/// Backup of WorkRect before entering a container such as columnstables. Used by e.g. SpanAllColumns functions to easily access. Stacked containers are responsible for maintaining this.  FIXME-WORKRECT: Could be a stack?<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ParentWorkRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect ParentWorkRect;

		/// <summary>
		/// Current clippingscissoring rectangle, evolve as we are using PushClipRect(), etc. == DrawList-&gt;clip_rect_stack.back().<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect ClipRect;

		/// <summary>
		/// FIXME: This is currently confusingmisleading. It is essentially WorkRect but not handling of scrolling. We currently rely on it as rightbottom aligned sizing operation need some size to rely on.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ContentRegionRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect ContentRegionRect;

		/// <summary>
		/// Define an optional rectangular hole where mouse will pass-through the window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HitTestHoleSize")]
		[NativeName(NativeNameType.Type, "ImVec2ih")]
		public ImVec2Ih HitTestHoleSize;

		[NativeName(NativeNameType.Field, "HitTestHoleOffset")]
		[NativeName(NativeNameType.Type, "ImVec2ih")]
		public ImVec2Ih HitTestHoleOffset;
		/// <summary>
		/// Last frame number the window was Active.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrameActive")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameActive;

		/// <summary>
		/// Last frame number the window was made Focused.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrameJustFocused")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameJustFocused;

		/// <summary>
		/// Last timestamp the window was Active (using float as we don't need high precision there)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LastTimeActive")]
		[NativeName(NativeNameType.Type, "float")]
		public float LastTimeActive;

		[NativeName(NativeNameType.Field, "ItemWidthDefault")]
		[NativeName(NativeNameType.Type, "float")]
		public float ItemWidthDefault;
		[NativeName(NativeNameType.Field, "StateStorage")]
		[NativeName(NativeNameType.Type, "ImGuiStorage")]
		public ImGuiStorage StateStorage;
		[NativeName(NativeNameType.Field, "ColumnsStorage")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiOldColumns")]
		public ImVectorImGuiOldColumns ColumnsStorage;
		/// <summary>
		/// User scale multiplier per-window, via SetWindowFontScale()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FontWindowScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float FontWindowScale;

		[NativeName(NativeNameType.Field, "FontDpiScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float FontDpiScale;
		/// <summary>
		/// Offset into SettingsWindows[] (offsets are always valid as we only grow the array from the back)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsOffset")]
		[NativeName(NativeNameType.Type, "int")]
		public int SettingsOffset;

		/// <summary>
		/// == &amp;DrawListInst (for backward compatibility reason with code using imgui_internal.h we keep this a pointer)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawList")]
		[NativeName(NativeNameType.Type, "ImDrawList*")]
		public unsafe ImDrawList* DrawList;

		[NativeName(NativeNameType.Field, "DrawListInst")]
		[NativeName(NativeNameType.Type, "ImDrawList")]
		public ImDrawList DrawListInst;
		/// <summary>
		/// If we are a child _or_ popup _or_ docked window, this is pointing to our parent. Otherwise NULL.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ParentWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* ParentWindow;

		[NativeName(NativeNameType.Field, "ParentWindowInBeginStack")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* ParentWindowInBeginStack;
		/// <summary>
		/// Point to ourself or first ancestor that is not a child window. Doesn't cross through popupsdock nodes.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RootWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* RootWindow;

		/// <summary>
		/// Point to ourself or first ancestor that is not a child window. Cross through popups parent&lt;&gt;child.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RootWindowPopupTree")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* RootWindowPopupTree;

		/// <summary>
		/// Point to ourself or first ancestor that is not a child window. Cross through dock nodes.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RootWindowDockTree")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* RootWindowDockTree;

		/// <summary>
		/// Point to ourself or first ancestor which will display TitleBgActive color when this window is active.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RootWindowForTitleBarHighlight")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* RootWindowForTitleBarHighlight;

		/// <summary>
		/// Point to ourself or first ancestor which doesn't have the NavFlattened flag.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RootWindowForNav")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* RootWindowForNav;

		/// <summary>
		/// When going to the menu bar, we remember the child window we came from. (This could probably be made implicit if we kept g.Windows sorted by last focused including child window.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavLastChildNavWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* NavLastChildNavWindow;

		/// <summary>
		/// Last known NavId for this window, per layer (01)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavLastIds")]
		[NativeName(NativeNameType.Type, "ImGuiID[2]")]
		public uint NavLastIds_0;
		public uint NavLastIds_1;

		/// <summary>
		/// Reference rectangle, in window relative space<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavRectRel")]
		[NativeName(NativeNameType.Type, "ImRect[2]")]
		public ImRect NavRectRel_0;
		public ImRect NavRectRel_1;

		/// <summary>
		/// Preferred XY position updated when moving on a given axis, reset to FLT_MAX.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavPreferredScoringPosRel")]
		[NativeName(NativeNameType.Type, "ImVec2[2]")]
		public Vector2 NavPreferredScoringPosRel_0;
		public Vector2 NavPreferredScoringPosRel_1;

		/// <summary>
		/// Focus Scope ID at the time of Begin()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavRootFocusScopeId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int NavRootFocusScopeId;

		/// <summary>
		/// Backup of last idxvtx count, so when waking up the window we can preallocate and avoid iterative alloccopy<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MemoryDrawListIdxCapacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int MemoryDrawListIdxCapacity;

		[NativeName(NativeNameType.Field, "MemoryDrawListVtxCapacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int MemoryDrawListVtxCapacity;
		/// <summary>
		/// Set when window extraneous data have been garbage collected<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MemoryCompacted")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte MemoryCompacted;

		/// <summary>
		/// Docking When docking artifacts are actually visible. When this is set, DockNode is guaranteed to be != NULL. ~~ (DockNode != NULL) &amp;&amp; (DockNode-&gt;Windows.Size &gt; 1).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DockIsActive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DockIsActive;

		[NativeName(NativeNameType.Field, "DockNodeIsVisible")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DockNodeIsVisible;
		/// <summary>
		/// Is our window visible this frame? ~~ is the corresponding tab selected?<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DockTabIsVisible")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DockTabIsVisible;

		[NativeName(NativeNameType.Field, "DockTabWantClose")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DockTabWantClose;
		/// <summary>
		/// Order of the last time the window was visible within its DockNode. This is used to reorder windows that are reappearing on the same frame. Same value between windows that were active and windows that were none are possible.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DockOrder")]
		[NativeName(NativeNameType.Type, "short")]
		public short DockOrder;

		[NativeName(NativeNameType.Field, "DockStyle")]
		[NativeName(NativeNameType.Type, "ImGuiWindowDockStyle")]
		public ImGuiWindowDockStyle DockStyle;
		/// <summary>
		/// Which node are we docked into. Important: Prefer testing DockIsActive in many cases as this will still be set when the dock node is hidden.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DockNode")]
		[NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public unsafe ImGuiDockNode* DockNode;

		/// <summary>
		/// Which node are we owning (for parent windows)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DockNodeAsHost")]
		[NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public unsafe ImGuiDockNode* DockNodeAsHost;

		/// <summary>
		/// Backup of last valid DockNode-&gt;ID, so single window remember their dock node id even when they are not bound any more<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DockId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int DockId;

		[NativeName(NativeNameType.Field, "DockTabItemStatusFlags")]
		[NativeName(NativeNameType.Type, "ImGuiItemStatusFlags")]
		public ImGuiItemStatusFlags DockTabItemStatusFlags;
		[NativeName(NativeNameType.Field, "DockTabItemRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect DockTabItemRect;



		public unsafe Span<ImRect> NavRectRel
		
		{
			get
			{
				fixed (ImRect* p = &this.NavRectRel_0)
				{
					return new Span<ImRect>(p, 2);
				}
			}
		}
		public unsafe Span<Vector2> NavPreferredScoringPosRel
		
		{
			get
			{
				fixed (Vector2* p = &this.NavPreferredScoringPosRel_0)
				{
					return new Span<Vector2>(p, 2);
				}
			}
		}
		[NativeName(NativeNameType.Func, "ImGuiWindow_CalcFontSize")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float CalcFontSize()
		{
			fixed (ImGuiWindow* @this = &this)
			{
				float ret = ImGui.CalcFontSizeNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiWindow* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* sTR, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				int ret = ImGui.GetIDNative(@this, sTR, strEnd);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* sTR)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				int ret = ImGui.GetIDNative(@this, sTR, (byte*)(default));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte sTR, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				fixed (byte* psTR = &sTR)
				{
					int ret = ImGui.GetIDNative(@this, (byte*)psTR, strEnd);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte sTR)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				fixed (byte* psTR = &sTR)
				{
					int ret = ImGui.GetIDNative(@this, (byte*)psTR, (byte*)(default));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string sTR, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (sTR != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(sTR);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(sTR, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ImGui.GetIDNative(@this, pStr0, strEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string sTR)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (sTR != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(sTR);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(sTR, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ImGui.GetIDNative(@this, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* sTR, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte strEnd)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				fixed (byte* pstrEnd = &strEnd)
				{
					int ret = ImGui.GetIDNative(@this, sTR, (byte*)pstrEnd);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* sTR, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] string strEnd)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (strEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(strEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(strEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ImGui.GetIDNative(@this, sTR, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte sTR, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte strEnd)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				fixed (byte* psTR = &sTR)
				{
					fixed (byte* pstrEnd = &strEnd)
					{
						int ret = ImGui.GetIDNative(@this, (byte*)psTR, (byte*)pstrEnd);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string sTR, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] string strEnd)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (sTR != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(sTR);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(sTR, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (strEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(strEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(strEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = ImGui.GetIDNative(@this, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Ptr")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "const void*")] void* pTR)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				int ret = ImGui.GetIDNative(@this, pTR);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetID_Int")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetID([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				int ret = ImGui.GetIDNative(@this, n);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_GetIDFromRectangle")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe int GetIDFromRectangle([NativeName(NativeNameType.Param, "r_abs")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rAbs)
		{
			fixed (ImGuiWindow* @this = &this)
			{
				int ret = ImGui.GetIDFromRectangleNative(@this, rAbs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_MenuBarHeight")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float MenuBarHeight()
		{
			fixed (ImGuiWindow* @this = &this)
			{
				float ret = ImGui.MenuBarHeightNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindow_TitleBarHeight")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float TitleBarHeight()
		{
			fixed (ImGuiWindow* @this = &this)
			{
				float ret = ImGui.TitleBarHeightNative(@this);
				return ret;
			}
		}

	}

	/// <summary>
	/// [ALPHA] Rarely used  very advanced uses only. Use with SetNextWindowClass() and DockSpace() functions.<br/>
	/// Important: the content of this class is still highly WIP and likely to change and be refactored<br/>
	/// before we stabilize Docking features. Please be mindful if using this.<br/>
	/// Provide hints:<br/>
	/// - To the platform backend via altered viewport flags (enabledisable OS decoration, OS task bar icons, etc.)<br/>
	/// - To the platform backend for OS level parentchild relationships of viewport.<br/>
	/// - To the docking system for various options and filtering.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiWindowClass")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiWindowClass
	{
		/// <summary>
		/// User data. 0 = Default class (unclassed). Windows of different classes cannot be docked with each others.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ClassId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ClassId;

		/// <summary>
		/// Hint for the platform backend. -1: use default. 0: request platform backend to not parent the platform. != 0: request platform backend to create a parent&lt;&gt;child relationship between the platform windows. Not conforming backends are free to e.g. parent every viewport to the main viewport or not.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ParentViewportId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ParentViewportId;

		/// <summary>
		/// Viewport flags to set when a window of this class owns a viewport. This allows you to enforce OS decoration or task bar icon, override the defaults on a per-window basis.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportFlagsOverrideSet")]
		[NativeName(NativeNameType.Type, "ImGuiViewportFlags")]
		public ImGuiViewportFlags ViewportFlagsOverrideSet;

		/// <summary>
		/// Viewport flags to clear when a window of this class owns a viewport. This allows you to enforce OS decoration or task bar icon, override the defaults on a per-window basis.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportFlagsOverrideClear")]
		[NativeName(NativeNameType.Type, "ImGuiViewportFlags")]
		public ImGuiViewportFlags ViewportFlagsOverrideClear;

		/// <summary>
		/// [EXPERIMENTAL] TabItem flags to set when a window of this class gets submitted into a dock node tab bar. May use with ImGuiTabItemFlags_Leading or ImGuiTabItemFlags_Trailing.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TabItemFlagsOverrideSet")]
		[NativeName(NativeNameType.Type, "ImGuiTabItemFlags")]
		public ImGuiTabItemFlags TabItemFlagsOverrideSet;

		/// <summary>
		/// [EXPERIMENTAL] Dock node flags to set when a window of this class is hosted by a dock node (it doesn't have to be selected!)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DockNodeFlagsOverrideSet")]
		[NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")]
		public ImGuiDockNodeFlags DockNodeFlagsOverrideSet;

		/// <summary>
		/// Set to true to enforce single floating windows of this class always having their own docking node (equivalent of setting the global io.ConfigDockingAlwaysTabBar)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DockingAlwaysTabBar")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DockingAlwaysTabBar;

		/// <summary>
		/// Set to true to allow windows of this class to be dockedmerged with an unclassed window.  FIXME-DOCK: Move to DockNodeFlags override?<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DockingAllowUnclassed")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DockingAllowUnclassed;




		[NativeName(NativeNameType.Func, "ImGuiWindowClass_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiWindowClass* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// ImGuiViewport PrivateInternals fields (cardinal sin: we are using inheritance!)<br/>
	/// Every instance of ImGuiViewport is in fact a ImGuiViewportP.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiViewportP")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiViewportP
	{
		[NativeName(NativeNameType.Field, "_ImGuiViewport")]
		[NativeName(NativeNameType.Type, "ImGuiViewport")]
		public ImGuiViewport ImGuiViewport;
		/// <summary>
		/// Set when the viewport is owned by a window (and ImGuiViewportFlags_CanHostOtherWindows is NOT set)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Window")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* Window;

		[NativeName(NativeNameType.Field, "Idx")]
		[NativeName(NativeNameType.Type, "int")]
		public int Idx;
		/// <summary>
		/// Last frame number this viewport was activated by a window<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrameActive")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameActive;

		/// <summary>
		/// Last stamp number from when a window hosted by this viewport was focused (by comparing this value between two viewport we have an implicit viewport z-order we use as fallback)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFocusedStampCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFocusedStampCount;

		[NativeName(NativeNameType.Field, "LastNameHash")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int LastNameHash;
		[NativeName(NativeNameType.Field, "LastPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 LastPos;
		/// <summary>
		/// Window opacity (when dragging dockable windowsviewports we make them transparent)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Alpha")]
		[NativeName(NativeNameType.Type, "float")]
		public float Alpha;

		[NativeName(NativeNameType.Field, "LastAlpha")]
		[NativeName(NativeNameType.Type, "float")]
		public float LastAlpha;
		/// <summary>
		/// Instead of maintaining a LastFocusedWindow (which may harder to correctly maintain), we merely store weither NavWindow != NULL last time the viewport was focused.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFocusedHadNavWindow")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte LastFocusedHadNavWindow;

		[NativeName(NativeNameType.Field, "PlatformMonitor")]
		[NativeName(NativeNameType.Type, "short")]
		public short PlatformMonitor;
		/// <summary>
		/// Last frame number the background (0) and foreground (1) draw lists were used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawListsLastFrame")]
		[NativeName(NativeNameType.Type, "int[2]")]
		public int DrawListsLastFrame_0;
		public int DrawListsLastFrame_1;

		/// <summary>
		/// Convenience background (0) and foreground (1) draw lists. We use them to draw software mouser cursor when io.MouseDrawCursor is set and to draw most debug overlays.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawLists")]
		[NativeName(NativeNameType.Type, "ImDrawList*[2]")]
		public unsafe ImDrawList* DrawLists_0;
		public unsafe ImDrawList* DrawLists_1;

		[NativeName(NativeNameType.Field, "DrawDataP")]
		[NativeName(NativeNameType.Type, "ImDrawData")]
		public ImDrawData DrawDataP;
		[NativeName(NativeNameType.Field, "DrawDataBuilder")]
		[NativeName(NativeNameType.Type, "ImDrawDataBuilder")]
		public ImDrawDataBuilder DrawDataBuilder;
		[NativeName(NativeNameType.Field, "LastPlatformPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 LastPlatformPos;
		[NativeName(NativeNameType.Field, "LastPlatformSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 LastPlatformSize;
		[NativeName(NativeNameType.Field, "LastRendererSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 LastRendererSize;
		/// <summary>
		/// Work Area: Offset from Pos to top-left corner of Work Area. Generally (0,0) or (0,+main_menu_bar_height). Work Area is Full Area but without menu-barsstatus-bars (so WorkArea always fit inside PosSize!)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkOffsetMin")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WorkOffsetMin;

		/// <summary>
		/// Work Area: Offset from Pos+Size to bottom-right corner of Work Area. Generally (0,0) or (0,-status_bar_height).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkOffsetMax")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WorkOffsetMax;

		/// <summary>
		/// Work Area: Offset being built during current frame. Generally &gt;= 0.0f.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BuildWorkOffsetMin")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 BuildWorkOffsetMin;

		/// <summary>
		/// Work Area: Offset being built during current frame. Generally &lt;= 0.0f.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BuildWorkOffsetMax")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 BuildWorkOffsetMax;




		[NativeName(NativeNameType.Func, "ImGuiViewportP_ClearRequestFlags")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearRequestFlags()
		{
			fixed (ImGuiViewportP* @this = &this)
			{
				ImGui.ClearRequestFlagsNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiViewportP_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiViewportP* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>		/// Update public fields		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiViewportP_UpdateWorkRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void UpdateWorkRect()
		{
			fixed (ImGuiViewportP* @this = &this)
			{
				ImGui.UpdateWorkRectNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImDrawDataBuilder")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawDataBuilder
	{
		/// <summary>
		/// Global layers for: regular, tooltip<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Layers")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawListPtr[2]")]
		public ImVectorImDrawListPtr Layers_0;
		public ImVectorImDrawListPtr Layers_1;



		public unsafe Span<ImVectorImDrawListPtr> Layers
		
		{
			get
			{
				fixed (ImVectorImDrawListPtr* p = &this.Layers_0)
				{
					return new Span<ImVectorImDrawListPtr>(p, 2);
				}
			}
		}
		[NativeName(NativeNameType.Func, "ImDrawDataBuilder_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImDrawDataBuilder* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawDataBuilder_ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearFreeMemory()
		{
			fixed (ImDrawDataBuilder* @this = &this)
			{
				ImGui.ClearFreeMemoryNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawDataBuilder_FlattenIntoSingleLayer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void FlattenIntoSingleLayer()
		{
			fixed (ImDrawDataBuilder* @this = &this)
			{
				ImGui.FlattenIntoSingleLayerNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImDrawDataBuilder_GetDrawListCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int GetDrawListCount()
		{
			fixed (ImDrawDataBuilder* @this = &this)
			{
				int ret = ImGui.GetDrawListCountNative(@this);
				return ret;
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImDrawListPtr")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImDrawListPtr
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImDrawList**")]
		public unsafe ImDrawList** Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiID")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiID
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiID*")]
		public unsafe int* Data;


	}

	/// <summary>
	/// Transient per-window data, reset at the beginning of the frame. This used to be called ImGuiDrawContext, hence the DC variable name in ImGuiWindow.<br/>
	/// (That's theory, in practice the delimitation between ImGuiWindow and ImGuiWindowTempData is quite tenuous and could be reconsidered..)<br/>
	/// (This doesn't need a constructor because we zero-clear it as part of ImGuiWindow and all frame-temporary data are setup on Begin)<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiWindowTempData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiWindowTempData
	{
		/// <summary>
		/// Layout Current emitting position, in absolute coordinates.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CursorPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 CursorPos;

		[NativeName(NativeNameType.Field, "CursorPosPrevLine")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 CursorPosPrevLine;
		/// <summary>
		/// Initial position after Begin(), generally ~ window position + WindowPadding.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CursorStartPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 CursorStartPos;

		/// <summary>
		/// Used to implicitly calculate ContentSize at the beginning of next frame, for scrolling range and auto-resize. Always growing during the frame.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CursorMaxPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 CursorMaxPos;

		/// <summary>
		/// Used to implicitly calculate ContentSizeIdeal at the beginning of next frame, for auto-resize only. Always growing during the frame.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IdealMaxPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 IdealMaxPos;

		[NativeName(NativeNameType.Field, "CurrLineSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 CurrLineSize;
		[NativeName(NativeNameType.Field, "PrevLineSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 PrevLineSize;
		/// <summary>
		/// Baseline offset (0.0f by default on a new line, generally == style.FramePadding.y when a framed item has been added).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrLineTextBaseOffset")]
		[NativeName(NativeNameType.Type, "float")]
		public float CurrLineTextBaseOffset;

		[NativeName(NativeNameType.Field, "PrevLineTextBaseOffset")]
		[NativeName(NativeNameType.Type, "float")]
		public float PrevLineTextBaseOffset;
		[NativeName(NativeNameType.Field, "IsSameLine")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsSameLine;
		[NativeName(NativeNameType.Field, "IsSetPos")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsSetPos;
		/// <summary>
		/// Indentation  start position from left of window (increased by TreePushTreePop, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Indent")]
		[NativeName(NativeNameType.Type, "ImVec1")]
		public ImVec1 Indent;

		/// <summary>
		/// Offset to the current column (if ColumnsCurrent &gt; 0). FIXME: This and the above should be a stack to allow use cases like Tree-&gt;Column-&gt;Tree. Need revamp columns API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsOffset")]
		[NativeName(NativeNameType.Type, "ImVec1")]
		public ImVec1 ColumnsOffset;

		[NativeName(NativeNameType.Field, "GroupOffset")]
		[NativeName(NativeNameType.Type, "ImVec1")]
		public ImVec1 GroupOffset;
		/// <summary>
		/// Record the loss of precision of CursorStartPos due to really large scrolling amount. This is used by clipper to compensate and fix the most common use case of large scroll area.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CursorStartPosLossyness")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 CursorStartPosLossyness;

		/// <summary>
		/// KeyboardGamepad navigation Current layer, 0..31 (we currently only use 0..1)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavLayerCurrent")]
		[NativeName(NativeNameType.Type, "ImGuiNavLayer")]
		public ImGuiNavLayer NavLayerCurrent;

		/// <summary>
		/// Which layers have been written to (result from previous frame)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavLayersActiveMask")]
		[NativeName(NativeNameType.Type, "short")]
		public short NavLayersActiveMask;

		/// <summary>
		/// Which layers have been written to (accumulator for current frame)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavLayersActiveMaskNext")]
		[NativeName(NativeNameType.Type, "short")]
		public short NavLayersActiveMaskNext;

		/// <summary>
		/// Set when current work location may be scrolled horizontally when moving left  right. This is generally always true UNLESS within a column.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavIsScrollPushableX")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavIsScrollPushableX;

		[NativeName(NativeNameType.Field, "NavHideHighlightOneFrame")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavHideHighlightOneFrame;
		/// <summary>
		/// Set per window when scrolling can be used (== ScrollMax.y &gt; 0.0f)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowHasScrollY")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavWindowHasScrollY;

		/// <summary>
		/// Miscellaneous FIXME: Remove this<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MenuBarAppending")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte MenuBarAppending;

		/// <summary>
		/// MenuBarOffset.x is sort of equivalent of a per-layer CursorPos.x, savedrestored as we switch to the menu bar. The only situation when MenuBarOffset.y is &gt; 0 if when (SafeAreaPadding.y &gt; FramePadding.y), often used on TVs.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MenuBarOffset")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 MenuBarOffset;

		/// <summary>
		/// Simplified columns storage for menu items measurement<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MenuColumns")]
		[NativeName(NativeNameType.Type, "ImGuiMenuColumns")]
		public ImGuiMenuColumns MenuColumns;

		/// <summary>
		/// Current tree depth.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TreeDepth")]
		[NativeName(NativeNameType.Type, "int")]
		public int TreeDepth;

		/// <summary>
		/// Store a copy of !g.NavIdIsAlive for TreeDepth 0..31.. Could be turned into a ImU64 if necessary.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TreeJumpToParentOnPopMask")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint TreeJumpToParentOnPopMask;

		[NativeName(NativeNameType.Field, "ChildWindows")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr")]
		public ImVectorImGuiWindowPtr ChildWindows;
		/// <summary>
		/// Current persistent per-window storage (store e.g. tree node openclose state)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "StateStorage")]
		[NativeName(NativeNameType.Type, "ImGuiStorage*")]
		public unsafe ImGuiStorage* StateStorage;

		/// <summary>
		/// Current columns set<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentColumns")]
		[NativeName(NativeNameType.Type, "ImGuiOldColumns*")]
		public unsafe ImGuiOldColumns* CurrentColumns;

		/// <summary>
		/// Current table index (into g.Tables)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentTableIdx")]
		[NativeName(NativeNameType.Type, "int")]
		public int CurrentTableIdx;

		[NativeName(NativeNameType.Field, "LayoutType")]
		[NativeName(NativeNameType.Type, "ImGuiLayoutType")]
		public ImGuiLayoutType LayoutType;
		/// <summary>
		/// Layout type of parent window at the time of Begin()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ParentLayoutType")]
		[NativeName(NativeNameType.Type, "ImGuiLayoutType")]
		public ImGuiLayoutType ParentLayoutType;

		/// <summary>
		/// Local parameters stacks<br/>
		/// We store the current settings outside of the vectors to increase memory locality (reduce cache misses). The vectors are rarely modified. Also it allows us to not heap allocate for short-lived windows which are not using those settings. Current item width (&gt;0.0: width in pixels, &lt;0.0: align xx pixels to the right of window).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float ItemWidth;

		/// <summary>
		/// Current text wrap pos.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextWrapPos")]
		[NativeName(NativeNameType.Type, "float")]
		public float TextWrapPos;

		/// <summary>
		/// Store item widths to restore (attention: .back() is not == ItemWidth)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemWidthStack")]
		[NativeName(NativeNameType.Type, "ImVector_float")]
		public ImVectorFloat ItemWidthStack;

		/// <summary>
		/// Store text wrap pos to restore (attention: .back() is not == TextWrapPos)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextWrapPosStack")]
		[NativeName(NativeNameType.Type, "ImVector_float")]
		public ImVectorFloat TextWrapPosStack;



	}

	[NativeName(NativeNameType.StructOrClass, "ImVec1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVec1
	{
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "float")]
		public float X;



		[NativeName(NativeNameType.Func, "ImVec1_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImVec1* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// Simple column measurement, currently used for MenuItem() only.. This is very short-sightedthrow-away code and NOT a generic helper.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiMenuColumns")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiMenuColumns
	{
		[NativeName(NativeNameType.Field, "TotalWidth")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint TotalWidth;
		[NativeName(NativeNameType.Field, "NextTotalWidth")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint NextTotalWidth;
		[NativeName(NativeNameType.Field, "Spacing")]
		[NativeName(NativeNameType.Type, "ImU16")]
		public ushort Spacing;
		/// <summary>
		/// Always zero for now<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OffsetIcon")]
		[NativeName(NativeNameType.Type, "ImU16")]
		public ushort OffsetIcon;

		/// <summary>
		/// Offsets are locked in Update()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OffsetLabel")]
		[NativeName(NativeNameType.Type, "ImU16")]
		public ushort OffsetLabel;

		[NativeName(NativeNameType.Field, "OffsetShortcut")]
		[NativeName(NativeNameType.Type, "ImU16")]
		public ushort OffsetShortcut;
		[NativeName(NativeNameType.Field, "OffsetMark")]
		[NativeName(NativeNameType.Type, "ImU16")]
		public ushort OffsetMark;
		/// <summary>
		/// Width of:   Icon, Label, Shortcut, Mark  (accumulators for current frame)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Widths")]
		[NativeName(NativeNameType.Type, "ImU16[4]")]
		public ushort Widths_0;
		public ushort Widths_1;
		public ushort Widths_2;
		public ushort Widths_3;




		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_CalcNextTotalWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcNextTotalWidth([NativeName(NativeNameType.Param, "update_offsets")] [NativeName(NativeNameType.Type, "bool")] bool updateOffsets)
		{
			fixed (ImGuiMenuColumns* @this = &this)
			{
				ImGui.CalcNextTotalWidthNative(@this, updateOffsets ? (byte)1 : (byte)0);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_DeclColumns")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float DeclColumns([NativeName(NativeNameType.Param, "w_icon")] [NativeName(NativeNameType.Type, "float")] float wIcon, [NativeName(NativeNameType.Param, "w_label")] [NativeName(NativeNameType.Type, "float")] float wLabel, [NativeName(NativeNameType.Param, "w_shortcut")] [NativeName(NativeNameType.Type, "float")] float wShortcut, [NativeName(NativeNameType.Param, "w_mark")] [NativeName(NativeNameType.Type, "float")] float wMark)
		{
			fixed (ImGuiMenuColumns* @this = &this)
			{
				float ret = ImGui.DeclColumnsNative(@this, wIcon, wLabel, wShortcut, wMark);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiMenuColumns* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_Update")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Update([NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float sPACING, [NativeName(NativeNameType.Param, "window_reappearing")] [NativeName(NativeNameType.Type, "bool")] bool windowReappearing)
		{
			fixed (ImGuiMenuColumns* @this = &this)
			{
				ImGui.UpdateNative(@this, sPACING, windowReappearing ? (byte)1 : (byte)0);
			}
		}

	}

	/// <summary>
	/// Helper: Key-&gt;Value storage<br/>
	/// Typically you don't have to worry about this since a storage is held within each Window.<br/>
	/// We use it to e.g. store collapse state for a tree (Int 01)<br/>
	/// This is optimized for efficient lookup (dichotomy into a contiguous buffer) and rare insertion (typically tied to user interactions aka max once a frame)<br/>
	/// You can use it as custom user storage for temporary values. Declare your own storage if, for example:<br/>
	/// - You want to manipulate the openclose state of a particular sub-tree in your interface (tree node uses Int 01 to store their state).<br/>
	/// - You want to store custom debug data easily without adding or editing structures in your code (probably not efficient, but convenient)<br/>
	/// Types are NOT stored, so it is up to you to make sure your Key don't collide with different types.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiStorage")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiStorage
	{
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiStoragePair")]
		public ImVectorImGuiStoragePair Data;


		[NativeName(NativeNameType.Func, "ImGuiStorage_BuildSortByKey")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void BuildSortByKey()
		{
			fixed (ImGuiStorage* @this = &this)
			{
				ImGui.BuildSortByKeyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImGuiStorage* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetBool")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetBool([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int kEY, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "bool")] bool defaultVal)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				byte ret = ImGui.GetBoolNative(@this, kEY, defaultVal ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetBool")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetBool([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int kEY)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				byte ret = ImGui.GetBoolNative(@this, kEY, (byte)(0));
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetBoolRef")]
		[return: NativeName(NativeNameType.Type, "bool*")]
		public unsafe byte* GetBoolRef([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int kEY, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "bool")] bool defaultVal)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				byte* ret = ImGui.GetBoolRefNative(@this, kEY, defaultVal ? (byte)1 : (byte)0);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetBoolRef")]
		[return: NativeName(NativeNameType.Type, "bool*")]
		public unsafe byte* GetBoolRef([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int kEY)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				byte* ret = ImGui.GetBoolRefNative(@this, kEY, (byte)(0));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetFloat")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float GetFloat([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int kEY, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "float")] float defaultVal)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				float ret = ImGui.GetFloatNative(@this, kEY, defaultVal);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetFloat")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float GetFloat([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int kEY)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				float ret = ImGui.GetFloatNative(@this, kEY, (float)(0.0f));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetFloatRef")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public unsafe float* GetFloatRef([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int kEY, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "float")] float defaultVal)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				float* ret = ImGui.GetFloatRefNative(@this, kEY, defaultVal);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetFloatRef")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public unsafe float* GetFloatRef([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int kEY)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				float* ret = ImGui.GetFloatRefNative(@this, kEY, (float)(0.0f));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetInt")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int GetInt([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int kEY, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "int")] int defaultVal)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				int ret = ImGui.GetIntNative(@this, kEY, defaultVal);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetInt")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int GetInt([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int kEY)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				int ret = ImGui.GetIntNative(@this, kEY, (int)(0));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetIntRef")]
		[return: NativeName(NativeNameType.Type, "int*")]
		public unsafe int* GetIntRef([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int kEY, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "int")] int defaultVal)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				int* ret = ImGui.GetIntRefNative(@this, kEY, defaultVal);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetIntRef")]
		[return: NativeName(NativeNameType.Type, "int*")]
		public unsafe int* GetIntRef([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int kEY)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				int* ret = ImGui.GetIntRefNative(@this, kEY, (int)(0));
				return ret;
			}
		}

		/// <summary>		/// default_val is NULL		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiStorage_GetVoidPtr")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public unsafe void* GetVoidPtr([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int kEY)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				void* ret = ImGui.GetVoidPtrNative(@this, kEY);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetVoidPtrRef")]
		[return: NativeName(NativeNameType.Type, "void**")]
		public unsafe void** GetVoidPtrRef([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int kEY, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "void*")] void* defaultVal)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				void** ret = ImGui.GetVoidPtrRefNative(@this, kEY, defaultVal);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_GetVoidPtrRef")]
		[return: NativeName(NativeNameType.Type, "void**")]
		public unsafe void** GetVoidPtrRef([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int kEY)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				void** ret = ImGui.GetVoidPtrRefNative(@this, kEY, (void*)(default));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_SetAllInt")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetAllInt([NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "int")] int vAL)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				ImGui.SetAllIntNative(@this, vAL);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_SetBool")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetBool([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int kEY, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "bool")] bool vAL)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				ImGui.SetBoolNative(@this, kEY, vAL ? (byte)1 : (byte)0);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_SetFloat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetFloat([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int kEY, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "float")] float vAL)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				ImGui.SetFloatNative(@this, kEY, vAL);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_SetInt")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetInt([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int kEY, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "int")] int vAL)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				ImGui.SetIntNative(@this, kEY, vAL);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStorage_SetVoidPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetVoidPtr([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] int kEY, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "void*")] void* vAL)
		{
			fixed (ImGuiStorage* @this = &this)
			{
				ImGui.SetVoidPtrNative(@this, kEY, vAL);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiStoragePair")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiStoragePair
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiStoragePair*")]
		public unsafe ImGuiStoragePair* Data;


	}

	/// <summary>
	/// [Internal]<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiStoragePair")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiStoragePair
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct ImGuiStoragePairUnion
		{
			[NativeName(NativeNameType.Field, "val_i")]
			[NativeName(NativeNameType.Type, "int")]
			[FieldOffset(0)]
			public int ValI;
			[NativeName(NativeNameType.Field, "val_f")]
			[NativeName(NativeNameType.Type, "float")]
			[FieldOffset(0)]
			public float ValF;
			[NativeName(NativeNameType.Field, "val_p")]
			[NativeName(NativeNameType.Type, "void*")]
			[FieldOffset(0)]
			public unsafe void* ValP;


		}

		[NativeName(NativeNameType.Field, "key")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int Key;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public ImGuiStoragePairUnion Union;



		[NativeName(NativeNameType.Func, "ImGuiStoragePair_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiStoragePair* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiOldColumns")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiOldColumns
	{
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiOldColumnFlags")]
		public ImGuiOldColumnFlags Flags;
		[NativeName(NativeNameType.Field, "IsFirstFrame")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsFirstFrame;
		[NativeName(NativeNameType.Field, "IsBeingResized")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsBeingResized;
		[NativeName(NativeNameType.Field, "Current")]
		[NativeName(NativeNameType.Type, "int")]
		public int Current;
		[NativeName(NativeNameType.Field, "Count")]
		[NativeName(NativeNameType.Type, "int")]
		public int Count;
		/// <summary>
		/// Offsets from HostWorkRect.Min.x<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OffMinX")]
		[NativeName(NativeNameType.Type, "float")]
		public float OffMinX;

		/// <summary>
		/// Offsets from HostWorkRect.Min.x<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OffMaxX")]
		[NativeName(NativeNameType.Type, "float")]
		public float OffMaxX;

		[NativeName(NativeNameType.Field, "LineMinY")]
		[NativeName(NativeNameType.Type, "float")]
		public float LineMinY;
		[NativeName(NativeNameType.Field, "LineMaxY")]
		[NativeName(NativeNameType.Type, "float")]
		public float LineMaxY;
		/// <summary>
		/// Backup of CursorPos at the time of BeginColumns()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HostCursorPosY")]
		[NativeName(NativeNameType.Type, "float")]
		public float HostCursorPosY;

		/// <summary>
		/// Backup of CursorMaxPos at the time of BeginColumns()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HostCursorMaxPosX")]
		[NativeName(NativeNameType.Type, "float")]
		public float HostCursorMaxPosX;

		/// <summary>
		/// Backup of ClipRect at the time of BeginColumns()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HostInitialClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect HostInitialClipRect;

		/// <summary>
		/// Backup of ClipRect during PushColumnsBackground()PopColumnsBackground()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect HostBackupClipRect;

		/// <summary>
		/// Backup of WorkRect at the time of BeginColumns()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupParentWorkRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect HostBackupParentWorkRect;

		[NativeName(NativeNameType.Field, "Columns")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiOldColumnData")]
		public ImVectorImGuiOldColumnData Columns;
		[NativeName(NativeNameType.Field, "Splitter")]
		[NativeName(NativeNameType.Type, "ImDrawListSplitter")]
		public ImDrawListSplitter Splitter;



		[NativeName(NativeNameType.Func, "ImGuiOldColumns_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiOldColumns* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// Helper: ImRect (2D axis aligned bounding-box)<br/>
	/// NB: we can't rely on ImVec2 math operators being available here!<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImRect")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImRect
	{
		/// <summary>
		/// Upper-left<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Min")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Min;

		/// <summary>
		/// Lower-right<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Max")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Max;




		[NativeName(NativeNameType.Func, "ImRect_Add_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Add([NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.AddNative(@this, p);
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_Add_Rect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Add([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.AddNative(@this, r);
			}
		}

		/// <summary>		/// Simple version, may lead to an inverted rectangle, which is fine for ContainsOverlaps test but not for display.		/// </summary>		[NativeName(NativeNameType.Func, "ImRect_ClipWith")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClipWith([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.ClipWithNative(@this, r);
			}
		}

		/// <summary>		/// Full version, ensure both points are fully clipped.		/// </summary>		[NativeName(NativeNameType.Func, "ImRect_ClipWithFull")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClipWithFull([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.ClipWithFullNative(@this, r);
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_Contains_Vec2")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Contains([NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			fixed (ImRect* @this = &this)
			{
				byte ret = ImGui.ContainsNative(@this, p);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_Contains_Rect")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Contains([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImRect* @this = &this)
			{
				byte ret = ImGui.ContainsNative(@this, r);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_Expand_Float")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Expand([NativeName(NativeNameType.Param, "amount")] [NativeName(NativeNameType.Type, "const float")] float aMOUNT)
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.ExpandNative(@this, aMOUNT);
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_Expand_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Expand([NativeName(NativeNameType.Param, "amount")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 aMOUNT)
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.ExpandNative(@this, aMOUNT);
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_Floor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Floor()
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.FloorNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_GetArea")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float GetArea()
		{
			fixed (ImRect* @this = &this)
			{
				float ret = ImGui.GetAreaNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_GetHeight")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float GetHeight()
		{
			fixed (ImRect* @this = &this)
			{
				float ret = ImGui.GetHeightNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_GetWidth")]
		[return: NativeName(NativeNameType.Type, "float")]
		public unsafe float GetWidth()
		{
			fixed (ImRect* @this = &this)
			{
				float ret = ImGui.GetWidthNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_IsInverted")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsInverted()
		{
			fixed (ImRect* @this = &this)
			{
				byte ret = ImGui.IsInvertedNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_Overlaps")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Overlaps([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImRect* @this = &this)
			{
				byte ret = ImGui.OverlapsNative(@this, r);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_Translate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Translate([NativeName(NativeNameType.Param, "d")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 d)
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.TranslateNative(@this, d);
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_TranslateX")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void TranslateX([NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "float")] float dX)
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.TranslateXNative(@this, dX);
			}
		}

		[NativeName(NativeNameType.Func, "ImRect_TranslateY")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void TranslateY([NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "float")] float dY)
		{
			fixed (ImRect* @this = &this)
			{
				ImGui.TranslateYNative(@this, dY);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiOldColumnData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiOldColumnData
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiOldColumnData*")]
		public unsafe ImGuiOldColumnData* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiOldColumnData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiOldColumnData
	{
		/// <summary>
		/// Column start offset, normalized 0.0 (far left) -&gt; 1.0 (far right)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OffsetNorm")]
		[NativeName(NativeNameType.Type, "float")]
		public float OffsetNorm;

		[NativeName(NativeNameType.Field, "OffsetNormBeforeResize")]
		[NativeName(NativeNameType.Type, "float")]
		public float OffsetNormBeforeResize;
		/// <summary>
		/// Not exposed<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiOldColumnFlags")]
		public ImGuiOldColumnFlags Flags;

		[NativeName(NativeNameType.Field, "ClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect ClipRect;



		[NativeName(NativeNameType.Func, "ImGuiOldColumnData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiOldColumnData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// Helper: ImVec2ih (2D vector, half-size integer, for long-term packed storage)<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImVec2ih")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVec2Ih
	{
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "short")]
		public short X;
		[NativeName(NativeNameType.Field, "y")]
		[NativeName(NativeNameType.Type, "short")]
		public short Y;



		[NativeName(NativeNameType.Func, "ImVec2ih_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImVec2Ih* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiOldColumns")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiOldColumns
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiOldColumns*")]
		public unsafe ImGuiOldColumns* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiWindowDockStyle")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiWindowDockStyle
	{
		[NativeName(NativeNameType.Field, "Colors")]
		[NativeName(NativeNameType.Type, "ImU32[6]")]
		public uint Colors_0;
		public uint Colors_1;
		public uint Colors_2;
		public uint Colors_3;
		public uint Colors_4;
		public uint Colors_5;


	}

	/// <summary>
	/// sizeof() 156~192<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiDockNode")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDockNode
	{
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;
		/// <summary>
		/// (Write) Flags shared by all nodes of a same dockspace hierarchy (inherited from the root node)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SharedFlags")]
		[NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")]
		public ImGuiDockNodeFlags SharedFlags;

		/// <summary>
		/// (Write) Flags specific to this node<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LocalFlags")]
		[NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")]
		public ImGuiDockNodeFlags LocalFlags;

		/// <summary>
		/// (Write) Flags specific to this node, applied from windows<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LocalFlagsInWindows")]
		[NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")]
		public ImGuiDockNodeFlags LocalFlagsInWindows;

		/// <summary>
		/// (Read)  Effective flags (== SharedFlags | LocalFlagsInNode | LocalFlagsInWindows)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MergedFlags")]
		[NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")]
		public ImGuiDockNodeFlags MergedFlags;

		[NativeName(NativeNameType.Field, "State")]
		[NativeName(NativeNameType.Type, "ImGuiDockNodeState")]
		public ImGuiDockNodeState State;
		[NativeName(NativeNameType.Field, "ParentNode")]
		[NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public unsafe ImGuiDockNode* ParentNode;
		/// <summary>
		/// [Split node only] Child nodes (leftright or topbottom). Consider switching to an array.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ChildNodes")]
		[NativeName(NativeNameType.Type, "ImGuiDockNode*[2]")]
		public unsafe ImGuiDockNode* ChildNodes_0;
		public unsafe ImGuiDockNode* ChildNodes_1;

		/// <summary>
		/// Note: unordered list! Iterate TabBar-&gt;Tabs for user-order.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Windows")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr")]
		public ImVectorImGuiWindowPtr Windows;

		[NativeName(NativeNameType.Field, "TabBar")]
		[NativeName(NativeNameType.Type, "ImGuiTabBar*")]
		public unsafe ImGuiTabBar* TabBar;
		/// <summary>
		/// Current position<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Pos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Pos;

		/// <summary>
		/// Current size<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Size;

		/// <summary>
		/// [Split node only] Last explicitly written-to size (overridden when using a splitter affecting the node), used to calculate Size.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SizeRef")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 SizeRef;

		/// <summary>
		/// [Split node only] Split axis (X or Y)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SplitAxis")]
		[NativeName(NativeNameType.Type, "ImGuiAxis")]
		public ImGuiAxis SplitAxis;

		/// <summary>
		/// [Root node only]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowClass")]
		[NativeName(NativeNameType.Type, "ImGuiWindowClass")]
		public ImGuiWindowClass WindowClass;

		[NativeName(NativeNameType.Field, "LastBgColor")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint LastBgColor;
		[NativeName(NativeNameType.Field, "HostWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* HostWindow;
		/// <summary>
		/// Generally point to window which is ID is == SelectedTabID, but when CTRL+Tabbing this can be a different window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "VisibleWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* VisibleWindow;

		/// <summary>
		/// [Root node only] Pointer to central node.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CentralNode")]
		[NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public unsafe ImGuiDockNode* CentralNode;

		/// <summary>
		/// [Root node only] Set when there is a single visible node within the hierarchy.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OnlyNodeWithWindows")]
		[NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public unsafe ImGuiDockNode* OnlyNodeWithWindows;

		/// <summary>
		/// [Root node only]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CountNodeWithWindows")]
		[NativeName(NativeNameType.Type, "int")]
		public int CountNodeWithWindows;

		/// <summary>
		/// Last frame number the node was updated or kept alive explicitly with DockSpace() + ImGuiDockNodeFlags_KeepAliveOnly<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrameAlive")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameAlive;

		/// <summary>
		/// Last frame number the node was updated.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrameActive")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameActive;

		/// <summary>
		/// Last frame number the node was focused.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrameFocused")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameFocused;

		/// <summary>
		/// [Root node only] Which of our child docking node (any ancestor in the hierarchy) was last focused.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFocusedNodeId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int LastFocusedNodeId;

		/// <summary>
		/// [Leaf node only] Which of our tabwindow is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SelectedTabId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int SelectedTabId;

		/// <summary>
		/// [Leaf node only] Set when closing a specific tabwindow.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WantCloseTabId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int WantCloseTabId;

		/// <summary>
		/// Reference viewport ID from visible window when HostWindow == NULL.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RefViewportId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int RefViewportId;

		[NativeName(NativeNameType.Field, "AuthorityForPos")]
		[NativeName(NativeNameType.Type, "ImGuiDataAuthority")]
		public ImGuiDataAuthority AuthorityForPos;
		[NativeName(NativeNameType.Field, "AuthorityForSize")]
		[NativeName(NativeNameType.Type, "ImGuiDataAuthority")]
		public ImGuiDataAuthority AuthorityForSize;
		[NativeName(NativeNameType.Field, "AuthorityForViewport")]
		[NativeName(NativeNameType.Type, "ImGuiDataAuthority")]
		public ImGuiDataAuthority AuthorityForViewport;
		/// <summary>
		/// Set to false when the node is hidden (usually disabled as it has no active window)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IsVisible")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsVisible;

		[NativeName(NativeNameType.Field, "IsFocused")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsFocused;
		[NativeName(NativeNameType.Field, "IsBgDrawnThisFrame")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsBgDrawnThisFrame;
		/// <summary>
		/// Provide space for a close button (if any of the docked window has one). Note that button may be hidden on window without one.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HasCloseButton")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HasCloseButton;

		[NativeName(NativeNameType.Field, "HasWindowMenuButton")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HasWindowMenuButton;
		[NativeName(NativeNameType.Field, "HasCentralNodeChild")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HasCentralNodeChild;
		/// <summary>
		/// Set when closing all tabs at once.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WantCloseAll")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantCloseAll;

		[NativeName(NativeNameType.Field, "WantLockSizeOnce")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantLockSizeOnce;
		/// <summary>
		/// After a node extraction we need to transition toward moving the newly created host window<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WantMouseMove")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantMouseMove;

		[NativeName(NativeNameType.Field, "WantHiddenTabBarUpdate")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantHiddenTabBarUpdate;
		[NativeName(NativeNameType.Field, "WantHiddenTabBarToggle")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantHiddenTabBarToggle;



		[NativeName(NativeNameType.Func, "ImGuiDockNode_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiDockNode_IsCentralNode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsCentralNode()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				byte ret = ImGui.IsCentralNodeNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiDockNode_IsDockSpace")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsDockSpace()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				byte ret = ImGui.IsDockSpaceNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiDockNode_IsEmpty")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsEmpty()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				byte ret = ImGui.IsEmptyNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiDockNode_IsFloatingNode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsFloatingNode()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				byte ret = ImGui.IsFloatingNodeNative(@this);
				return ret != 0;
			}
		}

		/// <summary>		/// Hidden tab bar can be shown back by clicking the small triangle		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiDockNode_IsHiddenTabBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsHiddenTabBar()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				byte ret = ImGui.IsHiddenTabBarNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiDockNode_IsLeafNode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsLeafNode()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				byte ret = ImGui.IsLeafNodeNative(@this);
				return ret != 0;
			}
		}

		/// <summary>		/// Never show a tab bar		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiDockNode_IsNoTabBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsNoTabBar()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				byte ret = ImGui.IsNoTabBarNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiDockNode_IsRootNode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsRootNode()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				byte ret = ImGui.IsRootNodeNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiDockNode_IsSplitNode")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsSplitNode()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				byte ret = ImGui.IsSplitNodeNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiDockNode_SetLocalFlags")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetLocalFlags([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags fLAGS)
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				ImGui.SetLocalFlagsNative(@this, fLAGS);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiDockNode_UpdateMergedFlags")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void UpdateMergedFlags()
		{
			fixed (ImGuiDockNode* @this = &this)
			{
				ImGui.UpdateMergedFlagsNative(@this);
			}
		}

	}

	/// <summary>
	/// Storage for a tab bar (sizeof() 152 bytes)<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTabBar")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTabBar
	{
		[NativeName(NativeNameType.Field, "Tabs")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiTabItem")]
		public ImVectorImGuiTabItem Tabs;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiTabBarFlags")]
		public ImGuiTabBarFlags Flags;
		/// <summary>
		/// Zero for tab-bars used by docking<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// Selected tabwindow<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SelectedTabId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int SelectedTabId;

		/// <summary>
		/// Next selected tabwindow. Will also trigger a scrolling animation<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NextSelectedTabId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int NextSelectedTabId;

		/// <summary>
		/// Can occasionally be != SelectedTabId (e.g. when previewing contents for CTRL+TAB preview)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "VisibleTabId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int VisibleTabId;

		[NativeName(NativeNameType.Field, "CurrFrameVisible")]
		[NativeName(NativeNameType.Type, "int")]
		public int CurrFrameVisible;
		[NativeName(NativeNameType.Field, "PrevFrameVisible")]
		[NativeName(NativeNameType.Type, "int")]
		public int PrevFrameVisible;
		[NativeName(NativeNameType.Field, "BarRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect BarRect;
		[NativeName(NativeNameType.Field, "CurrTabsContentsHeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float CurrTabsContentsHeight;
		/// <summary>
		/// Record the height of contents submitted below the tab bar<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PrevTabsContentsHeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float PrevTabsContentsHeight;

		/// <summary>
		/// Actual width of all tabs (locked during layout)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WidthAllTabs")]
		[NativeName(NativeNameType.Type, "float")]
		public float WidthAllTabs;

		/// <summary>
		/// Ideal width if all tabs were visible and not clipped<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WidthAllTabsIdeal")]
		[NativeName(NativeNameType.Type, "float")]
		public float WidthAllTabsIdeal;

		[NativeName(NativeNameType.Field, "ScrollingAnim")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollingAnim;
		[NativeName(NativeNameType.Field, "ScrollingTarget")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollingTarget;
		[NativeName(NativeNameType.Field, "ScrollingTargetDistToVisibility")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollingTargetDistToVisibility;
		[NativeName(NativeNameType.Field, "ScrollingSpeed")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollingSpeed;
		[NativeName(NativeNameType.Field, "ScrollingRectMinX")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollingRectMinX;
		[NativeName(NativeNameType.Field, "ScrollingRectMaxX")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollingRectMaxX;
		[NativeName(NativeNameType.Field, "ReorderRequestTabId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ReorderRequestTabId;
		[NativeName(NativeNameType.Field, "ReorderRequestOffset")]
		[NativeName(NativeNameType.Type, "ImS16")]
		public short ReorderRequestOffset;
		[NativeName(NativeNameType.Field, "BeginCount")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte BeginCount;
		[NativeName(NativeNameType.Field, "WantLayout")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantLayout;
		[NativeName(NativeNameType.Field, "VisibleTabWasSubmitted")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte VisibleTabWasSubmitted;
		/// <summary>
		/// Set to true when a new tab item or button has been added to the tab bar during last frame<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TabsAddedNew")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte TabsAddedNew;

		/// <summary>
		/// Number of tabs submitted this frame.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TabsActiveCount")]
		[NativeName(NativeNameType.Type, "ImS16")]
		public short TabsActiveCount;

		/// <summary>
		/// Index of last BeginTabItem() tab for use by EndTabItem()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LastTabItemIdx")]
		[NativeName(NativeNameType.Type, "ImS16")]
		public short LastTabItemIdx;

		[NativeName(NativeNameType.Field, "ItemSpacingY")]
		[NativeName(NativeNameType.Type, "float")]
		public float ItemSpacingY;
		/// <summary>
		/// style.FramePadding locked at the time of BeginTabBar()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FramePadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 FramePadding;

		[NativeName(NativeNameType.Field, "BackupCursorPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 BackupCursorPos;
		/// <summary>
		/// For non-docking tab bar we re-append names in a contiguous buffer.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TabsNames")]
		[NativeName(NativeNameType.Type, "ImGuiTextBuffer")]
		public ImGuiTextBuffer TabsNames;




		[NativeName(NativeNameType.Func, "ImGuiTabBar_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTabBar* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiTabItem")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiTabItem
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiTabItem*")]
		public unsafe ImGuiTabItem* Data;


	}

	/// <summary>
	/// Storage for one active tab item (sizeof() 48 bytes)<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTabItem")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTabItem
	{
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiTabItemFlags")]
		public ImGuiTabItemFlags Flags;
		/// <summary>
		/// When TabItem is part of a DockNode's TabBar, we hold on to a window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Window")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* Window;

		[NativeName(NativeNameType.Field, "LastFrameVisible")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameVisible;
		/// <summary>
		/// This allows us to infer an ordered list of the last activated tabs with little maintenance<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrameSelected")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameSelected;

		/// <summary>
		/// Position relative to beginning of tab<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Offset")]
		[NativeName(NativeNameType.Type, "float")]
		public float Offset;

		/// <summary>
		/// Width currently displayed<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "float")]
		public float Width;

		/// <summary>
		/// Width of label, stored during BeginTabItem() call<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ContentWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float ContentWidth;

		/// <summary>
		/// Width optionally requested by caller, -1.0f is unused<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RequestedWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float RequestedWidth;

		/// <summary>
		/// When Window==NULL, offset to name within parent ImGuiTabBar::TabsNames<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NameOffset")]
		[NativeName(NativeNameType.Type, "ImS32")]
		public int NameOffset;

		/// <summary>
		/// BeginTabItem() order, used to re-order tabs after toggling ImGuiTabBarFlags_Reorderable<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BeginOrder")]
		[NativeName(NativeNameType.Type, "ImS16")]
		public short BeginOrder;

		/// <summary>
		/// Index only used during TabBarLayout(). Tabs gets reordered so 'Tabs[n].IndexDuringLayout == n' but may mismatch during additions.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IndexDuringLayout")]
		[NativeName(NativeNameType.Type, "ImS16")]
		public short IndexDuringLayout;

		/// <summary>
		/// Marked as closed by SetTabItemClosed()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WantClose")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantClose;




		[NativeName(NativeNameType.Func, "ImGuiTabItem_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTabItem* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// Helper: Growable text buffer for loggingaccumulating text<br/>
	/// (this could be called 'ImGuiTextBuilder'  'ImGuiStringBuilder')<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTextBuffer")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTextBuffer
	{
		[NativeName(NativeNameType.Field, "Buf")]
		[NativeName(NativeNameType.Type, "ImVector_char")]
		public ImVectorChar Buf;



		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* sTR, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				ImGui.appendNative(@this, sTR, strEnd);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* sTR)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				ImGui.appendNative(@this, sTR, (byte*)(default));
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte sTR, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				fixed (byte* psTR = &sTR)
				{
					ImGui.appendNative(@this, (byte*)psTR, strEnd);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte sTR)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				fixed (byte* psTR = &sTR)
				{
					ImGui.appendNative(@this, (byte*)psTR, (byte*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string sTR, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (sTR != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(sTR);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(sTR, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.appendNative(@this, pStr0, strEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string sTR)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (sTR != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(sTR);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(sTR, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.appendNative(@this, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* sTR, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte strEnd)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				fixed (byte* pstrEnd = &strEnd)
				{
					ImGui.appendNative(@this, sTR, (byte*)pstrEnd);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* sTR, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] string strEnd)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (strEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(strEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(strEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.appendNative(@this, sTR, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte sTR, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte strEnd)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				fixed (byte* psTR = &sTR)
				{
					fixed (byte* pstrEnd = &strEnd)
					{
						ImGui.appendNative(@this, (byte*)psTR, (byte*)pstrEnd);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string sTR, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] string strEnd)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (sTR != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(sTR);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(sTR, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (strEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(strEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(strEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.appendNative(@this, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void appendf([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fMT)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				ImGui.appendfNative(@this, fMT);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void appendf([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fMT)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				fixed (byte* pfMT = &fMT)
				{
					ImGui.appendfNative(@this, (byte*)pfMT);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void appendf([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fMT)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fMT != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fMT);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fMT, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.appendfNative(@this, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void appendfv([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fMT, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nuint aRGS)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				ImGui.appendfvNative(@this, fMT, aRGS);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void appendfv([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fMT, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nuint aRGS)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				fixed (byte* pfMT = &fMT)
				{
					ImGui.appendfvNative(@this, (byte*)pfMT, aRGS);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void appendfv([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fMT, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nuint aRGS)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fMT != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fMT);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fMT, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.appendfvNative(@this, pStr0, aRGS);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* begin()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* ret = ImGui.beginNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string beginS()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImGui.beginNative(@this));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_c_str")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* c_str()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* ret = ImGui.c_strNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_c_str")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string c_strS()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImGui.c_strNative(@this));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void clear()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				ImGui.clearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_empty")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool empty()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte ret = ImGui.emptyNative(@this);
				return ret != 0;
			}
		}

		/// <summary>		/// Buf is zero-terminated, so end() will point on the zero-terminator		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* end()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				byte* ret = ImGui.endNative(@this);
				return ret;
			}
		}

		/// <summary>		/// Buf is zero-terminated, so end() will point on the zero-terminator		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string endS()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImGui.endNative(@this));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_reserve")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void reserve([NativeName(NativeNameType.Param, "capacity")] [NativeName(NativeNameType.Type, "int")] int cAPACITY)
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				ImGui.reserveNative(@this, cAPACITY);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_size")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int size()
		{
			fixed (ImGuiTextBuffer* @this = &this)
			{
				int ret = ImGui.sizeNative(@this);
				return ret;
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_char")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorChar
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "char*")]
		public unsafe byte* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiWindowStackData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiWindowStackData
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiWindowStackData*")]
		public unsafe ImGuiWindowStackData* Data;


	}

	/// <summary>
	/// Data saved for each window pushed into the stack<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiWindowStackData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiWindowStackData
	{
		[NativeName(NativeNameType.Field, "Window")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* Window;
		[NativeName(NativeNameType.Field, "ParentLastItemDataBackup")]
		[NativeName(NativeNameType.Type, "ImGuiLastItemData")]
		public ImGuiLastItemData ParentLastItemDataBackup;
		/// <summary>
		/// Store size of various stacks for asserting<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "StackSizesOnBegin")]
		[NativeName(NativeNameType.Type, "ImGuiStackSizes")]
		public ImGuiStackSizes StackSizesOnBegin;



	}

	/// <summary>
	/// Status storage for the last submitted item<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiLastItemData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiLastItemData
	{
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;
		/// <summary>
		/// See ImGuiItemFlags_<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InFlags")]
		[NativeName(NativeNameType.Type, "ImGuiItemFlags")]
		public ImGuiItemFlags InFlags;

		/// <summary>
		/// See ImGuiItemStatusFlags_<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "StatusFlags")]
		[NativeName(NativeNameType.Type, "ImGuiItemStatusFlags")]
		public ImGuiItemStatusFlags StatusFlags;

		/// <summary>
		/// Full rectangle<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Rect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect Rect;

		/// <summary>
		/// Navigation scoring rectangle (not displayed)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect NavRect;

		/// <summary>
		/// Display rectangle (only if ImGuiItemStatusFlags_HasDisplayRect is set)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect DisplayRect;




		[NativeName(NativeNameType.Func, "ImGuiLastItemData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiLastItemData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiStackSizes")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiStackSizes
	{
		[NativeName(NativeNameType.Field, "SizeOfIDStack")]
		[NativeName(NativeNameType.Type, "short")]
		public short SizeOfIDStack;
		[NativeName(NativeNameType.Field, "SizeOfColorStack")]
		[NativeName(NativeNameType.Type, "short")]
		public short SizeOfColorStack;
		[NativeName(NativeNameType.Field, "SizeOfStyleVarStack")]
		[NativeName(NativeNameType.Type, "short")]
		public short SizeOfStyleVarStack;
		[NativeName(NativeNameType.Field, "SizeOfFontStack")]
		[NativeName(NativeNameType.Type, "short")]
		public short SizeOfFontStack;
		[NativeName(NativeNameType.Field, "SizeOfFocusScopeStack")]
		[NativeName(NativeNameType.Type, "short")]
		public short SizeOfFocusScopeStack;
		[NativeName(NativeNameType.Field, "SizeOfGroupStack")]
		[NativeName(NativeNameType.Type, "short")]
		public short SizeOfGroupStack;
		[NativeName(NativeNameType.Field, "SizeOfItemFlagsStack")]
		[NativeName(NativeNameType.Type, "short")]
		public short SizeOfItemFlagsStack;
		[NativeName(NativeNameType.Field, "SizeOfBeginPopupStack")]
		[NativeName(NativeNameType.Type, "short")]
		public short SizeOfBeginPopupStack;
		[NativeName(NativeNameType.Field, "SizeOfDisabledStack")]
		[NativeName(NativeNameType.Type, "short")]
		public short SizeOfDisabledStack;



		[NativeName(NativeNameType.Func, "ImGuiStackSizes_CompareWithContextState")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CompareWithContextState([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* cTX)
		{
			fixed (ImGuiStackSizes* @this = &this)
			{
				ImGui.CompareWithContextStateNative(@this, cTX);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStackSizes_CompareWithContextState")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CompareWithContextState([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext cTX)
		{
			fixed (ImGuiStackSizes* @this = &this)
			{
				fixed (ImGuiContext* pcTX = &cTX)
				{
					ImGui.CompareWithContextStateNative(@this, (ImGuiContext*)pcTX);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStackSizes_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiStackSizes* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStackSizes_SetToContextState")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetToContextState([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* cTX)
		{
			fixed (ImGuiStackSizes* @this = &this)
			{
				ImGui.SetToContextStateNative(@this, cTX);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiStackSizes_SetToContextState")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetToContextState([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext cTX)
		{
			fixed (ImGuiStackSizes* @this = &this)
			{
				fixed (ImGuiContext* pcTX = &cTX)
				{
					ImGui.SetToContextStateNative(@this, (ImGuiContext*)pcTX);
				}
			}
		}

	}

	/// <summary>
	/// This extends ImGuiKeyData but only for named keys (legacy keys don't support the new features)<br/>
	/// Stored in main context (1 per named key). In the future it might be merged into ImGuiKeyData.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiKeyOwnerData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiKeyOwnerData
	{
		[NativeName(NativeNameType.Field, "OwnerCurr")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int OwnerCurr;
		[NativeName(NativeNameType.Field, "OwnerNext")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int OwnerNext;
		/// <summary>
		/// Reading this key requires explicit owner id (until end of frame). Set by ImGuiInputFlags_LockThisFrame.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LockThisFrame")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte LockThisFrame;

		/// <summary>
		/// Reading this key requires explicit owner id (until key is released). Set by ImGuiInputFlags_LockUntilRelease. When this is true LockThisFrame is always true as well.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LockUntilRelease")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte LockUntilRelease;




		[NativeName(NativeNameType.Func, "ImGuiKeyOwnerData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiKeyOwnerData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// Routing table: maintain a desired owner for each possible key-chord (key + mods), and setup owner in NewFrame() when mods are matching.<br/>
	/// Stored in main context (1 instance)<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiKeyRoutingTable")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiKeyRoutingTable
	{
		/// <summary>
		/// Index of first entry in Entries[]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Index")]
		[NativeName(NativeNameType.Type, "ImGuiKeyRoutingIndex[140]")]
		public short Index_0;
		public short Index_1;
		public short Index_2;
		public short Index_3;
		public short Index_4;
		public short Index_5;
		public short Index_6;
		public short Index_7;
		public short Index_8;
		public short Index_9;
		public short Index_10;
		public short Index_11;
		public short Index_12;
		public short Index_13;
		public short Index_14;
		public short Index_15;
		public short Index_16;
		public short Index_17;
		public short Index_18;
		public short Index_19;
		public short Index_20;
		public short Index_21;
		public short Index_22;
		public short Index_23;
		public short Index_24;
		public short Index_25;
		public short Index_26;
		public short Index_27;
		public short Index_28;
		public short Index_29;
		public short Index_30;
		public short Index_31;
		public short Index_32;
		public short Index_33;
		public short Index_34;
		public short Index_35;
		public short Index_36;
		public short Index_37;
		public short Index_38;
		public short Index_39;
		public short Index_40;
		public short Index_41;
		public short Index_42;
		public short Index_43;
		public short Index_44;
		public short Index_45;
		public short Index_46;
		public short Index_47;
		public short Index_48;
		public short Index_49;
		public short Index_50;
		public short Index_51;
		public short Index_52;
		public short Index_53;
		public short Index_54;
		public short Index_55;
		public short Index_56;
		public short Index_57;
		public short Index_58;
		public short Index_59;
		public short Index_60;
		public short Index_61;
		public short Index_62;
		public short Index_63;
		public short Index_64;
		public short Index_65;
		public short Index_66;
		public short Index_67;
		public short Index_68;
		public short Index_69;
		public short Index_70;
		public short Index_71;
		public short Index_72;
		public short Index_73;
		public short Index_74;
		public short Index_75;
		public short Index_76;
		public short Index_77;
		public short Index_78;
		public short Index_79;
		public short Index_80;
		public short Index_81;
		public short Index_82;
		public short Index_83;
		public short Index_84;
		public short Index_85;
		public short Index_86;
		public short Index_87;
		public short Index_88;
		public short Index_89;
		public short Index_90;
		public short Index_91;
		public short Index_92;
		public short Index_93;
		public short Index_94;
		public short Index_95;
		public short Index_96;
		public short Index_97;
		public short Index_98;
		public short Index_99;
		public short Index_100;
		public short Index_101;
		public short Index_102;
		public short Index_103;
		public short Index_104;
		public short Index_105;
		public short Index_106;
		public short Index_107;
		public short Index_108;
		public short Index_109;
		public short Index_110;
		public short Index_111;
		public short Index_112;
		public short Index_113;
		public short Index_114;
		public short Index_115;
		public short Index_116;
		public short Index_117;
		public short Index_118;
		public short Index_119;
		public short Index_120;
		public short Index_121;
		public short Index_122;
		public short Index_123;
		public short Index_124;
		public short Index_125;
		public short Index_126;
		public short Index_127;
		public short Index_128;
		public short Index_129;
		public short Index_130;
		public short Index_131;
		public short Index_132;
		public short Index_133;
		public short Index_134;
		public short Index_135;
		public short Index_136;
		public short Index_137;
		public short Index_138;
		public short Index_139;

		[NativeName(NativeNameType.Field, "Entries")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiKeyRoutingData")]
		public ImVectorImGuiKeyRoutingData Entries;
		/// <summary>
		/// Double-buffer to avoid reallocation (could use a shared buffer)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "EntriesNext")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiKeyRoutingData")]
		public ImVectorImGuiKeyRoutingData EntriesNext;




		[NativeName(NativeNameType.Func, "ImGuiKeyRoutingTable_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImGuiKeyRoutingTable* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiKeyRoutingTable_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiKeyRoutingTable* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiKeyRoutingData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiKeyRoutingData
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiKeyRoutingData*")]
		public unsafe ImGuiKeyRoutingData* Data;


	}

	/// <summary>
	/// Routing table entry (sizeof() == 16 bytes)<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiKeyRoutingData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiKeyRoutingData
	{
		[NativeName(NativeNameType.Field, "NextEntryIndex")]
		[NativeName(NativeNameType.Type, "ImGuiKeyRoutingIndex")]
		public short NextEntryIndex;
		/// <summary>
		/// Technically we'd only need 4-bits but for simplify we store ImGuiMod_ values which need 16-bits. ImGuiMod_Shortcut is already translated to CtrlSuper.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Mods")]
		[NativeName(NativeNameType.Type, "ImU16")]
		public ushort Mods;

		/// <summary>
		/// Lower is better (0: perfect score)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RoutingNextScore")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte RoutingNextScore;

		[NativeName(NativeNameType.Field, "RoutingCurr")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int RoutingCurr;
		[NativeName(NativeNameType.Field, "RoutingNext")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int RoutingNext;



		[NativeName(NativeNameType.Func, "ImGuiKeyRoutingData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiKeyRoutingData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiNextItemData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiNextItemData
	{
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiNextItemDataFlags")]
		public ImGuiNextItemDataFlags Flags;
		/// <summary>
		/// Currently only testedused for ImGuiItemflags_AllowOverlap.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemFlags")]
		[NativeName(NativeNameType.Type, "ImGuiItemFlags")]
		public ImGuiItemFlags ItemFlags;

		/// <summary>
		/// Set by SetNextItemWidth()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "float")]
		public float Width;

		/// <summary>
		/// Set by SetNextItemMultiSelectData() (!= 0 signify value has been set, so it's an alternate version of HasSelectionData, we don't use Flags for this because they are cleared too early. This is mostly used for debugging)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FocusScopeId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int FocusScopeId;

		[NativeName(NativeNameType.Field, "OpenCond")]
		[NativeName(NativeNameType.Type, "ImGuiCond")]
		public ImGuiCond OpenCond;
		/// <summary>
		/// Set by SetNextItemOpen()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OpenVal")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte OpenVal;




		/// <summary>		/// Also cleared manually by ItemAdd()!		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiNextItemData_ClearFlags")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearFlags()
		{
			fixed (ImGuiNextItemData* @this = &this)
			{
				ImGui.ClearFlagsNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiNextItemData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiNextItemData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// Storage for SetNexWindow** functions<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiNextWindowData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiNextWindowData
	{
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiNextWindowDataFlags")]
		public ImGuiNextWindowDataFlags Flags;
		[NativeName(NativeNameType.Field, "PosCond")]
		[NativeName(NativeNameType.Type, "ImGuiCond")]
		public ImGuiCond PosCond;
		[NativeName(NativeNameType.Field, "SizeCond")]
		[NativeName(NativeNameType.Type, "ImGuiCond")]
		public ImGuiCond SizeCond;
		[NativeName(NativeNameType.Field, "CollapsedCond")]
		[NativeName(NativeNameType.Type, "ImGuiCond")]
		public ImGuiCond CollapsedCond;
		[NativeName(NativeNameType.Field, "DockCond")]
		[NativeName(NativeNameType.Type, "ImGuiCond")]
		public ImGuiCond DockCond;
		[NativeName(NativeNameType.Field, "PosVal")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 PosVal;
		[NativeName(NativeNameType.Field, "PosPivotVal")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 PosPivotVal;
		[NativeName(NativeNameType.Field, "SizeVal")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 SizeVal;
		[NativeName(NativeNameType.Field, "ContentSizeVal")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ContentSizeVal;
		[NativeName(NativeNameType.Field, "ScrollVal")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ScrollVal;
		[NativeName(NativeNameType.Field, "PosUndock")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte PosUndock;
		[NativeName(NativeNameType.Field, "CollapsedVal")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte CollapsedVal;
		[NativeName(NativeNameType.Field, "SizeConstraintRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect SizeConstraintRect;
		[NativeName(NativeNameType.Field, "SizeCallback")]
		[NativeName(NativeNameType.Type, "ImGuiSizeCallback")]
		public unsafe void* SizeCallback;
		[NativeName(NativeNameType.Field, "SizeCallbackUserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* SizeCallbackUserData;
		/// <summary>
		/// Override background alpha<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BgAlphaVal")]
		[NativeName(NativeNameType.Type, "float")]
		public float BgAlphaVal;

		[NativeName(NativeNameType.Field, "ViewportId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ViewportId;
		[NativeName(NativeNameType.Field, "DockId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int DockId;
		[NativeName(NativeNameType.Field, "WindowClass")]
		[NativeName(NativeNameType.Type, "ImGuiWindowClass")]
		public ImGuiWindowClass WindowClass;
		/// <summary>
		/// (Always on) This is not exposed publicly, so we don't clear it and it doesn't have a corresponding flag (could we? for consistency?)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MenuBarOffsetMinVal")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 MenuBarOffsetMinVal;




		[NativeName(NativeNameType.Func, "ImGuiNextWindowData_ClearFlags")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearFlags()
		{
			fixed (ImGuiNextWindowData* @this = &this)
			{
				ImGui.ClearFlagsNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiNextWindowData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiNextWindowData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// Resizing callback data to apply custom constraint. As enabled by SetNextWindowSizeConstraints(). Callback is called during the next Begin().<br/>
	/// NB: For basic minmax size constraint on each axis you don't need to use the callback! The SetNextWindowSizeConstraints() parameters are enough.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiSizeCallbackData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiSizeCallbackData
	{
		/// <summary>
		/// Read-only.   What user passed to SetNextWindowSizeConstraints(). Generally store an integer or float in here (need reinterpret_cast&lt;&gt;).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "UserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserData;

		/// <summary>
		/// Read-only.   Window position, for reference.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Pos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Pos;

		/// <summary>
		/// Read-only.   Current window size.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 CurrentSize;

		/// <summary>
		/// Read-write.  Desired size, based on user's mouse position. Write to this field to restrain resizing.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DesiredSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 DesiredSize;



	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiColorMod")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiColorMod
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiColorMod*")]
		public unsafe ImGuiColorMod* Data;


	}

	/// <summary>
	/// Stacked color modifier, backup of modified data so we can restore it<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiColorMod")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiColorMod
	{
		[NativeName(NativeNameType.Field, "Col")]
		[NativeName(NativeNameType.Type, "ImGuiCol")]
		public ImGuiCol Col;
		[NativeName(NativeNameType.Field, "BackupValue")]
		[NativeName(NativeNameType.Type, "ImVec4")]
		public Vector4 BackupValue;


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiStyleMod")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiStyleMod
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiStyleMod*")]
		public unsafe ImGuiStyleMod* Data;


	}

	/// <summary>
	/// Stacked style modifier, backup of modified data so we can restore it. Data type inferred from the variable.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiStyleMod")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiStyleMod
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct ImGuiStyleModUnion
		{
			[NativeName(NativeNameType.Field, "BackupInt")]
			[NativeName(NativeNameType.Type, "int[2]")]
			[FieldOffset(0)]
			public int BackupInt_0;
			[FieldOffset(8)]
			public int BackupInt_1;
			[NativeName(NativeNameType.Field, "BackupFloat")]
			[NativeName(NativeNameType.Type, "float[2]")]
			[FieldOffset(0)]
			public float BackupFloat_0;
			[FieldOffset(8)]
			public float BackupFloat_1;


		}

		[NativeName(NativeNameType.Field, "VarIdx")]
		[NativeName(NativeNameType.Type, "ImGuiStyleVar")]
		public ImGuiStyleVar VarIdx;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public ImGuiStyleModUnion Union;



		[NativeName(NativeNameType.Func, "ImGuiStyleMod_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiStyleMod* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiItemFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiItemFlags
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiItemFlags*")]
		public unsafe ImGuiItemFlags* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiGroupData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiGroupData
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiGroupData*")]
		public unsafe ImGuiGroupData* Data;


	}

	/// <summary>
	/// Stacked storage data for BeginGroup()EndGroup()<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiGroupData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiGroupData
	{
		[NativeName(NativeNameType.Field, "WindowID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int WindowID;
		[NativeName(NativeNameType.Field, "BackupCursorPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 BackupCursorPos;
		[NativeName(NativeNameType.Field, "BackupCursorMaxPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 BackupCursorMaxPos;
		[NativeName(NativeNameType.Field, "BackupIndent")]
		[NativeName(NativeNameType.Type, "ImVec1")]
		public ImVec1 BackupIndent;
		[NativeName(NativeNameType.Field, "BackupGroupOffset")]
		[NativeName(NativeNameType.Type, "ImVec1")]
		public ImVec1 BackupGroupOffset;
		[NativeName(NativeNameType.Field, "BackupCurrLineSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 BackupCurrLineSize;
		[NativeName(NativeNameType.Field, "BackupCurrLineTextBaseOffset")]
		[NativeName(NativeNameType.Type, "float")]
		public float BackupCurrLineTextBaseOffset;
		[NativeName(NativeNameType.Field, "BackupActiveIdIsAlive")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int BackupActiveIdIsAlive;
		[NativeName(NativeNameType.Field, "BackupActiveIdPreviousFrameIsAlive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte BackupActiveIdPreviousFrameIsAlive;
		[NativeName(NativeNameType.Field, "BackupHoveredIdIsAlive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte BackupHoveredIdIsAlive;
		[NativeName(NativeNameType.Field, "EmitItem")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte EmitItem;


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiPopupData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiPopupData
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiPopupData*")]
		public unsafe ImGuiPopupData* Data;


	}

	/// <summary>
	/// Storage for current popup stack<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiPopupData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiPopupData
	{
		/// <summary>
		/// Set on OpenPopup()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PopupId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int PopupId;

		/// <summary>
		/// Resolved on BeginPopup() - may stay unresolved if user never calls OpenPopup()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Window")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* Window;

		/// <summary>
		/// Set on OpenPopup(), a NavWindow that will be restored on popup close<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BackupNavWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* BackupNavWindow;

		/// <summary>
		/// Resolved on BeginPopup(). Actually a ImGuiNavLayer type (declared down below), initialized to -1 which is not part of an enum, but serves well-enough as "not any of layers" value<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ParentNavLayer")]
		[NativeName(NativeNameType.Type, "int")]
		public int ParentNavLayer;

		/// <summary>
		/// Set on OpenPopup()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OpenFrameCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int OpenFrameCount;

		/// <summary>
		/// Set on OpenPopup(), we need this to differentiate multiple menu sets from each others (e.g. inside menu bar vs loose menu items)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OpenParentId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int OpenParentId;

		/// <summary>
		/// Set on OpenPopup(), preferred popup position (typically == OpenMousePos when using mouse)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OpenPopupPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 OpenPopupPos;

		/// <summary>
		/// Set on OpenPopup(), copy of mouse position at the time of opening popup<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OpenMousePos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 OpenMousePos;




		[NativeName(NativeNameType.Func, "ImGuiPopupData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiPopupData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiViewportPPtr")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiViewportPPtr
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiViewportP**")]
		public unsafe ImGuiViewportP** Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiNavItemData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiNavItemData
	{
		/// <summary>
		/// Init,Move     Best candidate window (result-&gt;ItemWindow-&gt;RootWindowForNav == request-&gt;Window)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Window")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* Window;

		/// <summary>
		/// Init,Move     Best candidate item ID<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// Init,Move     Best candidate focus scope ID<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FocusScopeId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int FocusScopeId;

		/// <summary>
		/// Init,Move     Best candidate bounding box in window relative space<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RectRel")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect RectRel;

		/// <summary>
		/// ????,Move     Best candidate item flags<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InFlags")]
		[NativeName(NativeNameType.Type, "ImGuiItemFlags")]
		public ImGuiItemFlags InFlags;

		/// <summary>
		/// Move     Best candidate box distance to current NavId<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DistBox")]
		[NativeName(NativeNameType.Type, "float")]
		public float DistBox;

		/// <summary>
		/// Move     Best candidate center distance to current NavId<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DistCenter")]
		[NativeName(NativeNameType.Type, "float")]
		public float DistCenter;

		/// <summary>
		/// Move     Best candidate axial distance to current NavId<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DistAxial")]
		[NativeName(NativeNameType.Type, "float")]
		public float DistAxial;




		[NativeName(NativeNameType.Func, "ImGuiNavItemData_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImGuiNavItemData* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiNavItemData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiNavItemData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// Data payload for Drag and Drop operations: AcceptDragDropPayload(), GetDragDropPayload()<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiPayload")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiPayload
	{
		/// <summary>
		/// Members Data (copied and owned by dear imgui)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* Data;

		/// <summary>
		/// Data size<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DataSize")]
		[NativeName(NativeNameType.Type, "int")]
		public int DataSize;

		/// <summary>
		/// [Internal] Source item id<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SourceId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int SourceId;

		/// <summary>
		/// Source parent id (if available)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SourceParentId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int SourceParentId;

		/// <summary>
		/// Data timestamp<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DataFrameCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int DataFrameCount;

		/// <summary>
		/// Data type tag (short user-supplied string, 32 characters max)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DataType")]
		[NativeName(NativeNameType.Type, "char[33]")]
		public byte DataType_0;
		public byte DataType_1;
		public byte DataType_2;
		public byte DataType_3;
		public byte DataType_4;
		public byte DataType_5;
		public byte DataType_6;
		public byte DataType_7;
		public byte DataType_8;
		public byte DataType_9;
		public byte DataType_10;
		public byte DataType_11;
		public byte DataType_12;
		public byte DataType_13;
		public byte DataType_14;
		public byte DataType_15;
		public byte DataType_16;
		public byte DataType_17;
		public byte DataType_18;
		public byte DataType_19;
		public byte DataType_20;
		public byte DataType_21;
		public byte DataType_22;
		public byte DataType_23;
		public byte DataType_24;
		public byte DataType_25;
		public byte DataType_26;
		public byte DataType_27;
		public byte DataType_28;
		public byte DataType_29;
		public byte DataType_30;
		public byte DataType_31;
		public byte DataType_32;

		/// <summary>
		/// Set when AcceptDragDropPayload() was called and mouse has been hovering the target item (nb: handle overlapping drag targets)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Preview")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Preview;

		/// <summary>
		/// Set when AcceptDragDropPayload() was called and mouse button is released over the target item.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Delivery")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Delivery;




		[NativeName(NativeNameType.Func, "ImGuiPayload_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImGuiPayload* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiPayload_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiPayload* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDataType")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsDataType([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "const char*")] byte* tYPE)
		{
			fixed (ImGuiPayload* @this = &this)
			{
				byte ret = ImGui.IsDataTypeNative(@this, tYPE);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDataType")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsDataType([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "const char*")] ref byte tYPE)
		{
			fixed (ImGuiPayload* @this = &this)
			{
				fixed (byte* ptYPE = &tYPE)
				{
					byte ret = ImGui.IsDataTypeNative(@this, (byte*)ptYPE);
					return ret != 0;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDataType")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsDataType([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "const char*")] string tYPE)
		{
			fixed (ImGuiPayload* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (tYPE != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(tYPE);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(tYPE, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = ImGui.IsDataTypeNative(@this, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDelivery")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsDelivery()
		{
			fixed (ImGuiPayload* @this = &this)
			{
				byte ret = ImGui.IsDeliveryNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiPayload_IsPreview")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsPreview()
		{
			fixed (ImGuiPayload* @this = &this)
			{
				byte ret = ImGui.IsPreviewNative(@this);
				return ret != 0;
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_unsigned_char")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorUnsignedChar
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "unsigned char*")]
		public unsafe byte* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiListClipperData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiListClipperData
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiListClipperData*")]
		public unsafe ImGuiListClipperData* Data;


	}

	/// <summary>
	/// Temporary clipper data, buffers sharedreused between instances<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiListClipperData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiListClipperData
	{
		[NativeName(NativeNameType.Field, "ListClipper")]
		[NativeName(NativeNameType.Type, "ImGuiListClipper*")]
		public unsafe ImGuiListClipper* ListClipper;
		[NativeName(NativeNameType.Field, "LossynessOffset")]
		[NativeName(NativeNameType.Type, "float")]
		public float LossynessOffset;
		[NativeName(NativeNameType.Field, "StepNo")]
		[NativeName(NativeNameType.Type, "int")]
		public int StepNo;
		[NativeName(NativeNameType.Field, "ItemsFrozen")]
		[NativeName(NativeNameType.Type, "int")]
		public int ItemsFrozen;
		[NativeName(NativeNameType.Field, "Ranges")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiListClipperRange")]
		public ImVectorImGuiListClipperRange Ranges;



		[NativeName(NativeNameType.Func, "ImGuiListClipperData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiListClipperData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiListClipperData_Reset")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Reset([NativeName(NativeNameType.Param, "clipper")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ImGuiListClipper* cLIPPER)
		{
			fixed (ImGuiListClipperData* @this = &this)
			{
				ImGui.ResetNative(@this, cLIPPER);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiListClipperData_Reset")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Reset([NativeName(NativeNameType.Param, "clipper")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ref ImGuiListClipper cLIPPER)
		{
			fixed (ImGuiListClipperData* @this = &this)
			{
				fixed (ImGuiListClipper* pcLIPPER = &cLIPPER)
				{
					ImGui.ResetNative(@this, (ImGuiListClipper*)pcLIPPER);
				}
			}
		}

	}

	/// <summary>
	/// Helper: Manually clip large list of items.<br/>
	/// If you have lots evenly spaced items and you have random access to the list, you can perform coarse<br/>
	/// clipping based on visibility to only submit items that are in view.<br/>
	/// The clipper calculates the range of visible items and advance the cursor to compensate for the non-visible items we have skipped.<br/>
	/// (Dear ImGui already clip items based on their bounds but: it needs to first layout the item to do so, and generally<br/>
	/// fetchingsubmitting your own data incurs additional cost. Coarse clipping using ImGuiListClipper allows you to easily<br/>
	/// scale using lists with tens of thousands of items without a problem)<br/>
	/// Usage:<br/>
	/// ImGuiListClipper clipper;<br/>
	/// clipper.Begin(1000);          We have 1000 elements, evenly spaced.<br/>
	/// while (clipper.Step())<br/>
	/// for (int i = clipper.DisplayStart; i &lt; clipper.DisplayEnd; i++)<br/>
	/// ImGui::Text("line number %d", i);<br/>
	/// Generally what happens is:<br/>
	/// - Clipper lets you process the first element (DisplayStart = 0, DisplayEnd = 1) regardless of it being visible or not.<br/>
	/// - User code submit that one element.<br/>
	/// - Clipper can measure the height of the first element<br/>
	/// - Clipper calculate the actual range of elements to display based on the current clipping rectangle, position the cursor before the first visible element.<br/>
	/// - User code submit visible elements.<br/>
	/// - The clipper also handles various subtleties related to keyboardgamepad navigation, wrapping etc.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiListClipper")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiListClipper
	{
		/// <summary>
		/// Parent UI context<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Ctx")]
		[NativeName(NativeNameType.Type, "ImGuiContext*")]
		public unsafe ImGuiContext* Ctx;

		/// <summary>
		/// First item to display, updated by each call to Step()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayStart")]
		[NativeName(NativeNameType.Type, "int")]
		public int DisplayStart;

		/// <summary>
		/// End of items to display (exclusive)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayEnd")]
		[NativeName(NativeNameType.Type, "int")]
		public int DisplayEnd;

		/// <summary>
		/// [Internal] Number of items<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemsCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int ItemsCount;

		/// <summary>
		/// [Internal] Height of item after a first step and item submission can calculate it<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemsHeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float ItemsHeight;

		/// <summary>
		/// [Internal] Cursor position at the time of Begin() or after table frozen rows are all processed<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "StartPosY")]
		[NativeName(NativeNameType.Type, "float")]
		public float StartPosY;

		/// <summary>
		/// [Internal] Internal data<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TempData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* TempData;




		[NativeName(NativeNameType.Func, "ImGuiListClipper_Begin")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Begin([NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "items_height")] [NativeName(NativeNameType.Type, "float")] float itemsHeight)
		{
			fixed (ImGuiListClipper* @this = &this)
			{
				ImGui.BeginNative(@this, itemsCount, itemsHeight);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiListClipper_Begin")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Begin([NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			fixed (ImGuiListClipper* @this = &this)
			{
				ImGui.BeginNative(@this, itemsCount, (float)(-1.0f));
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiListClipper_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiListClipper* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>		/// Automatically called on the last call of Step() that returns false.		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiListClipper_End")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void End()
		{
			fixed (ImGuiListClipper* @this = &this)
			{
				ImGui.EndNative(@this);
			}
		}

		/// <summary>		/// item_end is exclusive e.g. use (42, 42+1) to make item 42 never clipped.		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiListClipper_IncludeRangeByIndices")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void IncludeRangeByIndices([NativeName(NativeNameType.Param, "item_begin")] [NativeName(NativeNameType.Type, "int")] int itemBegin, [NativeName(NativeNameType.Param, "item_end")] [NativeName(NativeNameType.Type, "int")] int itemEnd)
		{
			fixed (ImGuiListClipper* @this = &this)
			{
				ImGui.IncludeRangeByIndicesNative(@this, itemBegin, itemEnd);
			}
		}

		/// <summary>		/// Call until it returns false. The DisplayStartDisplayEnd fields will be set and you can processdraw those items.		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiListClipper_Step")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Step()
		{
			fixed (ImGuiListClipper* @this = &this)
			{
				byte ret = ImGui.StepNative(@this);
				return ret != 0;
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiListClipperRange")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiListClipperRange
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiListClipperRange*")]
		public unsafe ImGuiListClipperRange* Data;


	}

	/// <summary>
	/// Note that Max is exclusive, so perhaps should be using a BeginEnd convention.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiListClipperRange")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiListClipperRange
	{
		[NativeName(NativeNameType.Field, "Min")]
		[NativeName(NativeNameType.Type, "int")]
		public int Min;
		[NativeName(NativeNameType.Field, "Max")]
		[NativeName(NativeNameType.Type, "int")]
		public int Max;
		/// <summary>
		/// BeginEnd are absolute position (will be converted to indices later)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PosToIndexConvert")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte PosToIndexConvert;

		/// <summary>
		/// Add to Min after converting to indices<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PosToIndexOffsetMin")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte PosToIndexOffsetMin;

		/// <summary>
		/// Add to Min after converting to indices<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PosToIndexOffsetMax")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte PosToIndexOffsetMax;



	}

	/// <summary>
	/// FIXME-TABLE: more transient data could be stored in a stacked ImGuiTableTempData: e.g. SortSpecs, incoming RowData<br/>
	/// sizeof() ~ 580 bytes + heap allocs described in TableBeginInitMemory()<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTable")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTable
	{
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiTableFlags")]
		public ImGuiTableFlags Flags;
		/// <summary>
		/// Single allocation to hold Columns[], DisplayOrderToIndex[] and RowCellData[]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RawData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* RawData;

		/// <summary>
		/// Transient data while table is active. Point within g.CurrentTableStack[]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TempData")]
		[NativeName(NativeNameType.Type, "ImGuiTableTempData*")]
		public unsafe ImGuiTableTempData* TempData;

		/// <summary>
		/// Point within RawData[]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Columns")]
		[NativeName(NativeNameType.Type, "ImSpan_ImGuiTableColumn")]
		public ImSpanImGuiTableColumn Columns;

		/// <summary>
		/// Point within RawData[]. Store display order of columns (when not reordered, the values are 0...Count-1)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayOrderToIndex")]
		[NativeName(NativeNameType.Type, "ImSpan_ImGuiTableColumnIdx")]
		public ImSpanImGuiTableColumnIdx DisplayOrderToIndex;

		/// <summary>
		/// Point within RawData[]. Store cells background requests for current row.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RowCellData")]
		[NativeName(NativeNameType.Type, "ImSpan_ImGuiTableCellData")]
		public ImSpanImGuiTableCellData RowCellData;

		/// <summary>
		/// Column DisplayOrder -&gt; IsEnabled map<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "EnabledMaskByDisplayOrder")]
		[NativeName(NativeNameType.Type, "ImBitArrayPtr")]
		public ImBitArrayPtr EnabledMaskByDisplayOrder;

		/// <summary>
		/// Column Index -&gt; IsEnabled map (== not hidden by userapi) in a format adequate for iterating column without touching cold data<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "EnabledMaskByIndex")]
		[NativeName(NativeNameType.Type, "ImBitArrayPtr")]
		public ImBitArrayPtr EnabledMaskByIndex;

		/// <summary>
		/// Column Index -&gt; IsVisibleX|IsVisibleY map (== not hidden by userapi &amp;&amp; not hidden by scrollingcliprect)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "VisibleMaskByIndex")]
		[NativeName(NativeNameType.Type, "ImBitArrayPtr")]
		public ImBitArrayPtr VisibleMaskByIndex;

		/// <summary>
		/// Which data were loaded from the .ini file (e.g. when order is not altered we won't save order)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsLoadedFlags")]
		[NativeName(NativeNameType.Type, "ImGuiTableFlags")]
		public ImGuiTableFlags SettingsLoadedFlags;

		/// <summary>
		/// Offset in g.SettingsTables<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsOffset")]
		[NativeName(NativeNameType.Type, "int")]
		public int SettingsOffset;

		[NativeName(NativeNameType.Field, "LastFrameActive")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameActive;
		/// <summary>
		/// Number of columns declared in BeginTable()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int ColumnsCount;

		[NativeName(NativeNameType.Field, "CurrentRow")]
		[NativeName(NativeNameType.Type, "int")]
		public int CurrentRow;
		[NativeName(NativeNameType.Field, "CurrentColumn")]
		[NativeName(NativeNameType.Type, "int")]
		public int CurrentColumn;
		/// <summary>
		/// Count of BeginTable() calls with same ID in the same frame (generally 0). This is a little bit similar to BeginCount for a window, but multiple table with same ID look are multiple tables, they are just synched.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InstanceCurrent")]
		[NativeName(NativeNameType.Type, "ImS16")]
		public short InstanceCurrent;

		/// <summary>
		/// Mark which instance (generally 0) of the same ID is being interacted with<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InstanceInteracted")]
		[NativeName(NativeNameType.Type, "ImS16")]
		public short InstanceInteracted;

		[NativeName(NativeNameType.Field, "RowPosY1")]
		[NativeName(NativeNameType.Type, "float")]
		public float RowPosY1;
		[NativeName(NativeNameType.Field, "RowPosY2")]
		[NativeName(NativeNameType.Type, "float")]
		public float RowPosY2;
		/// <summary>
		/// Height submitted to TableNextRow()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RowMinHeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float RowMinHeight;

		[NativeName(NativeNameType.Field, "RowTextBaseline")]
		[NativeName(NativeNameType.Type, "float")]
		public float RowTextBaseline;
		[NativeName(NativeNameType.Field, "RowIndentOffsetX")]
		[NativeName(NativeNameType.Type, "float")]
		public float RowIndentOffsetX;
		/// <summary>
		/// Current row flags, see ImGuiTableRowFlags_<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RowFlags")]
		[NativeName(NativeNameType.Type, "ImGuiTableRowFlags")]
		public ImGuiTableRowFlags RowFlags;

		[NativeName(NativeNameType.Field, "LastRowFlags")]
		[NativeName(NativeNameType.Type, "ImGuiTableRowFlags")]
		public ImGuiTableRowFlags LastRowFlags;
		/// <summary>
		/// Counter for alternating background colors (can be fast-forwarded by e.g clipper), not same as CurrentRow because header rows typically don't increase this.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RowBgColorCounter")]
		[NativeName(NativeNameType.Type, "int")]
		public int RowBgColorCounter;

		/// <summary>
		/// Background color override for current row.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RowBgColor")]
		[NativeName(NativeNameType.Type, "ImU32[2]")]
		public uint RowBgColor_0;
		public uint RowBgColor_1;

		[NativeName(NativeNameType.Field, "BorderColorStrong")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint BorderColorStrong;
		[NativeName(NativeNameType.Field, "BorderColorLight")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint BorderColorLight;
		[NativeName(NativeNameType.Field, "BorderX1")]
		[NativeName(NativeNameType.Type, "float")]
		public float BorderX1;
		[NativeName(NativeNameType.Field, "BorderX2")]
		[NativeName(NativeNameType.Type, "float")]
		public float BorderX2;
		[NativeName(NativeNameType.Field, "HostIndentX")]
		[NativeName(NativeNameType.Type, "float")]
		public float HostIndentX;
		[NativeName(NativeNameType.Field, "MinColumnWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float MinColumnWidth;
		[NativeName(NativeNameType.Field, "OuterPaddingX")]
		[NativeName(NativeNameType.Type, "float")]
		public float OuterPaddingX;
		/// <summary>
		/// Padding from each borders<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CellPaddingX")]
		[NativeName(NativeNameType.Type, "float")]
		public float CellPaddingX;

		[NativeName(NativeNameType.Field, "CellPaddingY")]
		[NativeName(NativeNameType.Type, "float")]
		public float CellPaddingY;
		/// <summary>
		/// Spacing between non-bordered cells<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CellSpacingX1")]
		[NativeName(NativeNameType.Type, "float")]
		public float CellSpacingX1;

		[NativeName(NativeNameType.Field, "CellSpacingX2")]
		[NativeName(NativeNameType.Type, "float")]
		public float CellSpacingX2;
		/// <summary>
		/// User value passed to BeginTable(), see comments at the top of BeginTable() for details.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float InnerWidth;

		/// <summary>
		/// Sum of current column width<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsGivenWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float ColumnsGivenWidth;

		/// <summary>
		/// Sum of ideal column width in order nothing to be clipped, used for auto-fitting and content width submission in outer window<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsAutoFitWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float ColumnsAutoFitWidth;

		/// <summary>
		/// Sum of weight of all enabled stretching columns<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsStretchSumWeights")]
		[NativeName(NativeNameType.Type, "float")]
		public float ColumnsStretchSumWeights;

		[NativeName(NativeNameType.Field, "ResizedColumnNextWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float ResizedColumnNextWidth;
		/// <summary>
		/// Lock minimum contents width while resizing down in order to not create feedback loops. But we allow growing the table.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ResizeLockMinContentsX2")]
		[NativeName(NativeNameType.Type, "float")]
		public float ResizeLockMinContentsX2;

		/// <summary>
		/// Reference scale to be able to rescale columns on fontdpi changes.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RefScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float RefScale;

		/// <summary>
		/// Note: for non-scrolling table, OuterRect.Max.y is often FLT_MAX until EndTable(), unless a height has been specified in BeginTable().<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OuterRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect OuterRect;

		/// <summary>
		/// InnerRect but without decoration. As with OuterRect, for non-scrolling tables, InnerRect.Max.y is<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect InnerRect;

		[NativeName(NativeNameType.Field, "WorkRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect WorkRect;
		[NativeName(NativeNameType.Field, "InnerClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect InnerClipRect;
		/// <summary>
		/// We use this to cpu-clip cell background color fill, evolve during the frame as we cross frozen rows boundaries<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BgClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect BgClipRect;

		/// <summary>
		/// Actual ImDrawCmd clip rect for BG01 channel. This tends to be == OuterWindow-&gt;ClipRect at BeginTable() because output in BG0BG1 is cpu-clipped<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Bg0ClipRectForDrawCmd")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect Bg0ClipRectForDrawCmd;

		/// <summary>
		/// Actual ImDrawCmd clip rect for BG2 channel. This tends to be a correct, tight-fit, because output to BG2 are done by widgets relying on regular ClipRect.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Bg2ClipRectForDrawCmd")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect Bg2ClipRectForDrawCmd;

		/// <summary>
		/// This is used to check if we can eventually merge our columns draw calls into the current draw call of the current window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HostClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect HostClipRect;

		/// <summary>
		/// Backup of InnerWindow-&gt;ClipRect during PushTableBackground()PopTableBackground()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupInnerClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect HostBackupInnerClipRect;

		/// <summary>
		/// Parent window for the table<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OuterWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* OuterWindow;

		/// <summary>
		/// Window holding the table data (== OuterWindow or a child window)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* InnerWindow;

		/// <summary>
		/// Contiguous buffer holding columns names<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsNames")]
		[NativeName(NativeNameType.Type, "ImGuiTextBuffer")]
		public ImGuiTextBuffer ColumnsNames;

		/// <summary>
		/// Shortcut to TempData-&gt;DrawSplitter while in table. Isolate draw commands per columns to avoid switching clip rect constantly<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawSplitter")]
		[NativeName(NativeNameType.Type, "ImDrawListSplitter*")]
		public unsafe ImDrawListSplitter* DrawSplitter;

		[NativeName(NativeNameType.Field, "InstanceDataFirst")]
		[NativeName(NativeNameType.Type, "ImGuiTableInstanceData")]
		public ImGuiTableInstanceData InstanceDataFirst;
		/// <summary>
		/// FIXME-OPT: Using a small-vector pattern would be good.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InstanceDataExtra")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiTableInstanceData")]
		public ImVectorImGuiTableInstanceData InstanceDataExtra;

		[NativeName(NativeNameType.Field, "SortSpecsSingle")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnSortSpecs")]
		public ImGuiTableColumnSortSpecs SortSpecsSingle;
		/// <summary>
		/// FIXME-OPT: Using a small-vector pattern would be good.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SortSpecsMulti")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiTableColumnSortSpecs")]
		public ImVectorImGuiTableColumnSortSpecs SortSpecsMulti;

		/// <summary>
		/// Public facing sorts specs, this is what we return in TableGetSortSpecs()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SortSpecs")]
		[NativeName(NativeNameType.Type, "ImGuiTableSortSpecs")]
		public ImGuiTableSortSpecs SortSpecs;

		[NativeName(NativeNameType.Field, "SortSpecsCount")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte SortSpecsCount;
		/// <summary>
		/// Number of enabled columns (&lt;= ColumnsCount)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsEnabledCount")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte ColumnsEnabledCount;

		/// <summary>
		/// Number of enabled columns (&lt;= ColumnsCount)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsEnabledFixedCount")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte ColumnsEnabledFixedCount;

		/// <summary>
		/// Count calls to TableSetupColumn()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DeclColumnsCount")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte DeclColumnsCount;

		/// <summary>
		/// Index of column whose visible region is being hovered. Important: == ColumnsCount when hovering empty region after the right-most column!<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredColumnBody")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte HoveredColumnBody;

		/// <summary>
		/// Index of column whose right-border is being hovered (for resizing).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredColumnBorder")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte HoveredColumnBorder;

		/// <summary>
		/// Index of single column requesting auto-fit.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "AutoFitSingleColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte AutoFitSingleColumn;

		/// <summary>
		/// Index of column being resized. Reset when InstanceCurrent==0.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ResizedColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte ResizedColumn;

		/// <summary>
		/// Index of column being resized from previous frame.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LastResizedColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte LastResizedColumn;

		/// <summary>
		/// Index of column header being held.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HeldHeaderColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte HeldHeaderColumn;

		/// <summary>
		/// Index of column being reordered. (not cleared)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ReorderColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte ReorderColumn;

		/// <summary>
		/// -1 or +1<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ReorderColumnDir")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte ReorderColumnDir;

		/// <summary>
		/// Index of left-most non-hidden column.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LeftMostEnabledColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte LeftMostEnabledColumn;

		/// <summary>
		/// Index of right-most non-hidden column.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RightMostEnabledColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte RightMostEnabledColumn;

		/// <summary>
		/// Index of left-most stretched column.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LeftMostStretchedColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte LeftMostStretchedColumn;

		/// <summary>
		/// Index of right-most stretched column.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RightMostStretchedColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte RightMostStretchedColumn;

		/// <summary>
		/// Column right-clicked on, of -1 if opening context menu from a neutralempty spot<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ContextPopupColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte ContextPopupColumn;

		/// <summary>
		/// Requested frozen rows count<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FreezeRowsRequest")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte FreezeRowsRequest;

		/// <summary>
		/// Actual frozen row count (== FreezeRowsRequest, or == 0 when no scrolling offset)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FreezeRowsCount")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte FreezeRowsCount;

		/// <summary>
		/// Requested frozen columns count<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FreezeColumnsRequest")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte FreezeColumnsRequest;

		/// <summary>
		/// Actual frozen columns count (== FreezeColumnsRequest, or == 0 when no scrolling offset)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FreezeColumnsCount")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte FreezeColumnsCount;

		/// <summary>
		/// Index of current RowCellData[] entry in current row<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RowCellDataCurrent")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte RowCellDataCurrent;

		/// <summary>
		/// Redirect non-visible columns here.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DummyDrawChannel")]
		[NativeName(NativeNameType.Type, "ImGuiTableDrawChannelIdx")]
		public byte DummyDrawChannel;

		/// <summary>
		/// For Selectable() and other widgets drawing across columns after the freezing line. Index within DrawSplitter.Channels[]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Bg2DrawChannelCurrent")]
		[NativeName(NativeNameType.Type, "ImGuiTableDrawChannelIdx")]
		public byte Bg2DrawChannelCurrent;

		[NativeName(NativeNameType.Field, "Bg2DrawChannelUnfrozen")]
		[NativeName(NativeNameType.Type, "ImGuiTableDrawChannelIdx")]
		public byte Bg2DrawChannelUnfrozen;
		/// <summary>
		/// Set by TableUpdateLayout() which is called when beginning the first row.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IsLayoutLocked")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsLayoutLocked;

		/// <summary>
		/// Set when inside TableBeginRow()TableEndRow().<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IsInsideRow")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsInsideRow;

		[NativeName(NativeNameType.Field, "IsInitializing")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsInitializing;
		[NativeName(NativeNameType.Field, "IsSortSpecsDirty")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsSortSpecsDirty;
		/// <summary>
		/// Set when the first row had the ImGuiTableRowFlags_Headers flag.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IsUsingHeaders")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsUsingHeaders;

		/// <summary>
		/// Set when default context menu is open (also see: ContextPopupColumn, InstanceInteracted).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IsContextPopupOpen")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsContextPopupOpen;

		[NativeName(NativeNameType.Field, "IsSettingsRequestLoad")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsSettingsRequestLoad;
		/// <summary>
		/// Set when table settings have changed and needs to be reported into ImGuiTableSetttings data.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IsSettingsDirty")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsSettingsDirty;

		/// <summary>
		/// Set when display order is unchanged from default (DisplayOrder contains 0...Count-1)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IsDefaultDisplayOrder")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsDefaultDisplayOrder;

		[NativeName(NativeNameType.Field, "IsResetAllRequest")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsResetAllRequest;
		[NativeName(NativeNameType.Field, "IsResetDisplayOrderRequest")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsResetDisplayOrderRequest;
		/// <summary>
		/// Set when we got past the frozen row.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IsUnfrozenRows")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsUnfrozenRows;

		/// <summary>
		/// Set if user didn't explicitly set a sizing policy in BeginTable()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IsDefaultSizingPolicy")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsDefaultSizingPolicy;

		/// <summary>
		/// Whether ANY instance of this table had a vertical scrollbar during the current frame.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HasScrollbarYCurr")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HasScrollbarYCurr;

		/// <summary>
		/// Whether ANY instance of this table had a vertical scrollbar during the previous.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HasScrollbarYPrev")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HasScrollbarYPrev;

		[NativeName(NativeNameType.Field, "MemoryCompacted")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte MemoryCompacted;
		/// <summary>
		/// Backup of InnerWindow-&gt;SkipItem at the end of BeginTable(), because we will overwrite InnerWindow-&gt;SkipItem on a per-column basis<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HostSkipItems")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HostSkipItems;




		[NativeName(NativeNameType.Func, "ImGuiTable_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTable* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// Transient data that are only needed between BeginTable() and EndTable(), those buffers are shared (1 per level of stacked table).<br/>
	/// - Accessing those requires chasing an extra pointer so for very frequently used data we leave them in the main table structure.<br/>
	/// - We also leave out of this structure data that tend to be particularly useful for debuggingmetrics.<br/>
	/// sizeof() ~ 112 bytes.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTableTempData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableTempData
	{
		/// <summary>
		/// Index in g.Tables.Buf[] pool<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TableIndex")]
		[NativeName(NativeNameType.Type, "int")]
		public int TableIndex;

		/// <summary>
		/// Last timestamp this structure was used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LastTimeActive")]
		[NativeName(NativeNameType.Type, "float")]
		public float LastTimeActive;

		/// <summary>
		/// outer_size.x passed to BeginTable()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "UserOuterSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 UserOuterSize;

		[NativeName(NativeNameType.Field, "DrawSplitter")]
		[NativeName(NativeNameType.Type, "ImDrawListSplitter")]
		public ImDrawListSplitter DrawSplitter;
		/// <summary>
		/// Backup of InnerWindow-&gt;WorkRect at the end of BeginTable()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupWorkRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect HostBackupWorkRect;

		/// <summary>
		/// Backup of InnerWindow-&gt;ParentWorkRect at the end of BeginTable()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupParentWorkRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect HostBackupParentWorkRect;

		/// <summary>
		/// Backup of InnerWindow-&gt;DC.PrevLineSize at the end of BeginTable()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupPrevLineSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 HostBackupPrevLineSize;

		/// <summary>
		/// Backup of InnerWindow-&gt;DC.CurrLineSize at the end of BeginTable()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupCurrLineSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 HostBackupCurrLineSize;

		/// <summary>
		/// Backup of InnerWindow-&gt;DC.CursorMaxPos at the end of BeginTable()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupCursorMaxPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 HostBackupCursorMaxPos;

		/// <summary>
		/// Backup of OuterWindow-&gt;DC.ColumnsOffset at the end of BeginTable()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupColumnsOffset")]
		[NativeName(NativeNameType.Type, "ImVec1")]
		public ImVec1 HostBackupColumnsOffset;

		/// <summary>
		/// Backup of OuterWindow-&gt;DC.ItemWidth at the end of BeginTable()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupItemWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float HostBackupItemWidth;

		/// <summary>
		/// Backup of OuterWindow-&gt;DC.ItemWidthStack.Size at the end of BeginTable()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HostBackupItemWidthStackSize")]
		[NativeName(NativeNameType.Type, "int")]
		public int HostBackupItemWidthStackSize;




		[NativeName(NativeNameType.Func, "ImGuiTableTempData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTableTempData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImSpan_ImGuiTableColumn")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImSpanImGuiTableColumn
	{
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumn*")]
		public unsafe ImGuiTableColumn* Data;
		[NativeName(NativeNameType.Field, "DataEnd")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumn*")]
		public unsafe ImGuiTableColumn* DataEnd;


	}

	/// <summary>
	/// [Internal] sizeof() ~ 112<br/>
	/// We use the terminology "Enabled" to refer to a column that is not Hidden by userapi.<br/>
	/// We use the terminology "Clipped" to refer to a column that is out of sight because of scrollingclipping.<br/>
	/// This is in contrast with some user-facing api such as IsItemVisible()  IsRectVisible() which use "Visible" to mean "not clipped".<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTableColumn")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableColumn
	{
		/// <summary>
		/// Flags after some patching (not directly same as provided by user). See ImGuiTableColumnFlags_<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")]
		public ImGuiTableColumnFlags Flags;

		/// <summary>
		/// Finalactual width visible == (MaxX - MinX), locked in TableUpdateLayout(). May be &gt; WidthRequest to honor minimum width, may be &lt; WidthRequest to honor shrinking columns down in tight space.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WidthGiven")]
		[NativeName(NativeNameType.Type, "float")]
		public float WidthGiven;

		/// <summary>
		/// Absolute positions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MinX")]
		[NativeName(NativeNameType.Type, "float")]
		public float MinX;

		[NativeName(NativeNameType.Field, "MaxX")]
		[NativeName(NativeNameType.Type, "float")]
		public float MaxX;
		/// <summary>
		/// Master width absolute value when !(Flags &amp; _WidthStretch). When Stretch this is derived every frame from StretchWeight in TableUpdateLayout()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WidthRequest")]
		[NativeName(NativeNameType.Type, "float")]
		public float WidthRequest;

		/// <summary>
		/// Automatic width<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WidthAuto")]
		[NativeName(NativeNameType.Type, "float")]
		public float WidthAuto;

		/// <summary>
		/// Master width weight when (Flags &amp; _WidthStretch). Often around ~1.0f initially.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "StretchWeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float StretchWeight;

		/// <summary>
		/// Value passed to TableSetupColumn(). For Width it is a content width (_without padding_).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InitStretchWeightOrWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float InitStretchWeightOrWidth;

		/// <summary>
		/// Clipping rectangle for the column<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect ClipRect;

		/// <summary>
		/// Optional, value passed to TableSetupColumn()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "UserID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int UserID;

		/// <summary>
		/// Contents region min ~(MinX + CellPaddingX + CellSpacingX1) == cursor start position when entering column<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkMinX")]
		[NativeName(NativeNameType.Type, "float")]
		public float WorkMinX;

		/// <summary>
		/// Contents region max ~(MaxX - CellPaddingX - CellSpacingX2)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkMaxX")]
		[NativeName(NativeNameType.Type, "float")]
		public float WorkMaxX;

		/// <summary>
		/// Current item width for the column, preserved across rows<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float ItemWidth;

		/// <summary>
		/// Contents maximum position for frozen rows (apart from headers), from which we can infer content width.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ContentMaxXFrozen")]
		[NativeName(NativeNameType.Type, "float")]
		public float ContentMaxXFrozen;

		[NativeName(NativeNameType.Field, "ContentMaxXUnfrozen")]
		[NativeName(NativeNameType.Type, "float")]
		public float ContentMaxXUnfrozen;
		/// <summary>
		/// Contents maximum position for headers rows (regardless of freezing). TableHeader() automatically softclip itself + report ideal desired size, to avoid creating extraneous draw calls<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ContentMaxXHeadersUsed")]
		[NativeName(NativeNameType.Type, "float")]
		public float ContentMaxXHeadersUsed;

		[NativeName(NativeNameType.Field, "ContentMaxXHeadersIdeal")]
		[NativeName(NativeNameType.Type, "float")]
		public float ContentMaxXHeadersIdeal;
		/// <summary>
		/// Offset into parent ColumnsNames[]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NameOffset")]
		[NativeName(NativeNameType.Type, "ImS16")]
		public short NameOffset;

		/// <summary>
		/// Index within Table's IndexToDisplayOrder[] (column may be reordered by users)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayOrder")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte DisplayOrder;

		/// <summary>
		/// Index within enabledvisible set (&lt;= IndexToDisplayOrder)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IndexWithinEnabledSet")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte IndexWithinEnabledSet;

		/// <summary>
		/// Index of prev enabledvisible column within Columns[], -1 if first enabledvisible column<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PrevEnabledColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte PrevEnabledColumn;

		/// <summary>
		/// Index of next enabledvisible column within Columns[], -1 if last enabledvisible column<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NextEnabledColumn")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte NextEnabledColumn;

		/// <summary>
		/// Index of this column within sort specs, -1 if not sorting on this column, 0 for single-sort, may be &gt;0 on multi-sort<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SortOrder")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte SortOrder;

		/// <summary>
		/// Index within DrawSplitter.Channels[]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawChannelCurrent")]
		[NativeName(NativeNameType.Type, "ImGuiTableDrawChannelIdx")]
		public byte DrawChannelCurrent;

		/// <summary>
		/// Draw channels for frozen rows (often headers)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawChannelFrozen")]
		[NativeName(NativeNameType.Type, "ImGuiTableDrawChannelIdx")]
		public byte DrawChannelFrozen;

		/// <summary>
		/// Draw channels for unfrozen rows<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawChannelUnfrozen")]
		[NativeName(NativeNameType.Type, "ImGuiTableDrawChannelIdx")]
		public byte DrawChannelUnfrozen;

		/// <summary>
		/// IsUserEnabled &amp;&amp; (Flags &amp; ImGuiTableColumnFlags_Disabled) == 0<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IsEnabled")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsEnabled;

		/// <summary>
		/// Is the column not marked Hidden by the user? (unrelated to being off view, e.g. clipped by scrolling).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IsUserEnabled")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsUserEnabled;

		[NativeName(NativeNameType.Field, "IsUserEnabledNextFrame")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsUserEnabledNextFrame;
		/// <summary>
		/// Is actually in view (e.g. overlapping the host window clipping rectangle, not scrolled).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IsVisibleX")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsVisibleX;

		[NativeName(NativeNameType.Field, "IsVisibleY")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsVisibleY;
		/// <summary>
		/// Return value for TableSetColumnIndex()  TableNextColumn(): whether we request user to output contents or not.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IsRequestOutput")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsRequestOutput;

		/// <summary>
		/// Do we want item submissions to this column to be completely ignored (no layout will happen).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IsSkipItems")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsSkipItems;

		[NativeName(NativeNameType.Field, "IsPreserveWidthAuto")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsPreserveWidthAuto;
		/// <summary>
		/// ImGuiNavLayer in 1 byte<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NavLayerCurrent")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte NavLayerCurrent;

		/// <summary>
		/// Queue of 8 values for the next 8 frames to request auto-fit<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "AutoFitQueue")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte AutoFitQueue;

		/// <summary>
		/// Queue of 8 values for the next 8 frames to disable ClippedSkipItem<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CannotSkipItemsQueue")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte CannotSkipItemsQueue;

		/// <summary>
		/// ImGuiSortDirection_Ascending or ImGuiSortDirection_Descending<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SortDirection")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte SortDirection;

		/// <summary>
		/// Number of available sort directions (0 to 3)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SortDirectionsAvailCount")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte SortDirectionsAvailCount;

		/// <summary>
		/// Mask of available sort directions (1-bit each)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SortDirectionsAvailMask")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte SortDirectionsAvailMask;

		/// <summary>
		/// Ordered list of available sort directions (2-bits each, total 8-bits)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SortDirectionsAvailList")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte SortDirectionsAvailList;




		[NativeName(NativeNameType.Func, "ImGuiTableColumn_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTableColumn* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImSpan_ImGuiTableColumnIdx")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImSpanImGuiTableColumnIdx
	{
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx*")]
		public unsafe sbyte* Data;
		[NativeName(NativeNameType.Field, "DataEnd")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx*")]
		public unsafe sbyte* DataEnd;


	}

	[NativeName(NativeNameType.StructOrClass, "ImSpan_ImGuiTableCellData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImSpanImGuiTableCellData
	{
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiTableCellData*")]
		public unsafe ImGuiTableCellData* Data;
		[NativeName(NativeNameType.Field, "DataEnd")]
		[NativeName(NativeNameType.Type, "ImGuiTableCellData*")]
		public unsafe ImGuiTableCellData* DataEnd;


	}

	/// <summary>
	/// Transient cell data stored per row.<br/>
	/// sizeof() ~ 6<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTableCellData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableCellData
	{
		/// <summary>
		/// Actual color<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BgColor")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint BgColor;

		/// <summary>
		/// Column number<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Column")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte Column;



	}

	/// <summary>
	/// Per-instance data that needs preserving across frames (seemingly most others do not need to be preserved aside from debug needs. Does that means they could be moved to ImGuiTableTempData?)<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTableInstanceData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableInstanceData
	{
		[NativeName(NativeNameType.Field, "TableInstanceID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int TableInstanceID;
		/// <summary>
		/// Outer height from last frame<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LastOuterHeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float LastOuterHeight;

		/// <summary>
		/// Height of first row from last frame (FIXME: this is used as "header height" and may be reworked)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFirstRowHeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float LastFirstRowHeight;

		/// <summary>
		/// Height of frozen section from last frame<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrozenHeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float LastFrozenHeight;




		[NativeName(NativeNameType.Func, "ImGuiTableInstanceData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTableInstanceData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiTableInstanceData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiTableInstanceData
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiTableInstanceData*")]
		public unsafe ImGuiTableInstanceData* Data;


	}

	/// <summary>
	/// Sorting specification for one column of a table (sizeof == 12 bytes)<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTableColumnSortSpecs")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableColumnSortSpecs
	{
		/// <summary>
		/// User id of the column (if specified by a TableSetupColumn() call)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnUserID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ColumnUserID;

		/// <summary>
		/// Index of the column<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnIndex")]
		[NativeName(NativeNameType.Type, "ImS16")]
		public short ColumnIndex;

		/// <summary>
		/// Index within parent ImGuiTableSortSpecs (always stored in order starting from 0, tables sorted on a single criteria will always have a 0 here)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SortOrder")]
		[NativeName(NativeNameType.Type, "ImS16")]
		public short SortOrder;

		/// <summary>
		/// ImGuiSortDirection_Ascending or ImGuiSortDirection_Descending (you can use this or SortSign, whichever is more convenient for your sort function)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SortDirection")]
		[NativeName(NativeNameType.Type, "ImGuiSortDirection")]
		public ImGuiSortDirection SortDirection;




		[NativeName(NativeNameType.Func, "ImGuiTableColumnSortSpecs_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTableColumnSortSpecs* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiTableColumnSortSpecs")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiTableColumnSortSpecs
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnSortSpecs*")]
		public unsafe ImGuiTableColumnSortSpecs* Data;


	}

	/// <summary>
	/// Sorting specifications for a table (often handling sort specs for a single column, occasionally more)<br/>
	/// Obtained by calling TableGetSortSpecs().<br/>
	/// When 'SpecsDirty == true' you can sort your data. It will be true with sorting specs have changed since last call, or the first time.<br/>
	/// Make sure to set 'SpecsDirty = false' after sorting, else you may wastefully sort your data every frame!<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTableSortSpecs")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableSortSpecs
	{
		/// <summary>
		/// Pointer to sort spec array.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Specs")]
		[NativeName(NativeNameType.Type, "const ImGuiTableColumnSortSpecs*")]
		public unsafe ImGuiTableColumnSortSpecs* Specs;

		/// <summary>
		/// Sort spec count. Most often 1. May be &gt; 1 when ImGuiTableFlags_SortMulti is enabled. May be == 0 when ImGuiTableFlags_SortTristate is enabled.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SpecsCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int SpecsCount;

		/// <summary>
		/// Set to true when specs have changed since last time! Use this to sort again, then clear the flag.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SpecsDirty")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte SpecsDirty;




		[NativeName(NativeNameType.Func, "ImGuiTableSortSpecs_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTableSortSpecs* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiTableTempData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiTableTempData
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiTableTempData*")]
		public unsafe ImGuiTableTempData* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImPool_ImGuiTable")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImPoolImGuiTable
	{
		[NativeName(NativeNameType.Field, "Buf")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiTable")]
		public ImVectorImGuiTable Buf;
		[NativeName(NativeNameType.Field, "Map")]
		[NativeName(NativeNameType.Type, "ImGuiStorage")]
		public ImGuiStorage Map;
		[NativeName(NativeNameType.Field, "FreeIdx")]
		[NativeName(NativeNameType.Type, "ImPoolIdx")]
		public int FreeIdx;
		[NativeName(NativeNameType.Field, "AliveCount")]
		[NativeName(NativeNameType.Type, "ImPoolIdx")]
		public int AliveCount;


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiTable")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiTable
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiTable*")]
		public unsafe ImGuiTable* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImPool_ImGuiTabBar")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImPoolImGuiTabBar
	{
		[NativeName(NativeNameType.Field, "Buf")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiTabBar")]
		public ImVectorImGuiTabBar Buf;
		[NativeName(NativeNameType.Field, "Map")]
		[NativeName(NativeNameType.Type, "ImGuiStorage")]
		public ImGuiStorage Map;
		[NativeName(NativeNameType.Field, "FreeIdx")]
		[NativeName(NativeNameType.Type, "ImPoolIdx")]
		public int FreeIdx;
		[NativeName(NativeNameType.Field, "AliveCount")]
		[NativeName(NativeNameType.Type, "ImPoolIdx")]
		public int AliveCount;


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiTabBar")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiTabBar
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiTabBar*")]
		public unsafe ImGuiTabBar* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiPtrOrIndex")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiPtrOrIndex
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiPtrOrIndex*")]
		public unsafe ImGuiPtrOrIndex* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiPtrOrIndex")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiPtrOrIndex
	{
		/// <summary>
		/// Either field can be set, not both. e.g. Dock node tab bars are loose while BeginTabBar() ones are in a pool.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Ptr")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* Ptr;

		/// <summary>
		/// Usually index in a main pool.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Index")]
		[NativeName(NativeNameType.Type, "int")]
		public int Index;




		[NativeName(NativeNameType.Func, "ImGuiPtrOrIndex_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiPtrOrIndex* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiShrinkWidthItem")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiShrinkWidthItem
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiShrinkWidthItem*")]
		public unsafe ImGuiShrinkWidthItem* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiShrinkWidthItem")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiShrinkWidthItem
	{
		[NativeName(NativeNameType.Field, "Index")]
		[NativeName(NativeNameType.Type, "int")]
		public int Index;
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "float")]
		public float Width;
		[NativeName(NativeNameType.Field, "InitialWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float InitialWidth;


	}

	/// <summary>
	/// Internal state of the currently focusededited text input box<br/>
	/// For a given item ID, access with ImGui::GetInputTextState()<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiInputTextState")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputTextState
	{
		/// <summary>
		/// parent UI context (needs to be set explicitly by parent).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Ctx")]
		[NativeName(NativeNameType.Type, "ImGuiContext*")]
		public unsafe ImGuiContext* Ctx;

		/// <summary>
		/// widget id owning the text state<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// we need to maintain our buffer length in both UTF-8 and wchar format. UTF-8 length is valid even if TextA is not.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CurLenW")]
		[NativeName(NativeNameType.Type, "int")]
		public int CurLenW;

		/// <summary>
		/// we need to maintain our buffer length in both UTF-8 and wchar format. UTF-8 length is valid even if TextA is not.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CurLenA")]
		[NativeName(NativeNameType.Type, "int")]
		public int CurLenA;

		/// <summary>
		/// edit buffer, we need to persist but can't guarantee the persistence of the user-provided buffer. so we copy into own buffer.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextW")]
		[NativeName(NativeNameType.Type, "ImVector_ImWchar")]
		public ImVectorImWchar TextW;

		/// <summary>
		/// temporary UTF8 buffer for callbacks and other operations. this is not updated in every code-path! size=capacity.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextA")]
		[NativeName(NativeNameType.Type, "ImVector_char")]
		public ImVectorChar TextA;

		/// <summary>
		/// backup of end-user buffer at the time of focus (in UTF-8, unaltered)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InitialTextA")]
		[NativeName(NativeNameType.Type, "ImVector_char")]
		public ImVectorChar InitialTextA;

		/// <summary>
		/// temporary UTF8 buffer is not initially valid before we make the widget active (until then we pull the data from user argument)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextAIsValid")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte TextAIsValid;

		/// <summary>
		/// end-user buffer capacity<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BufCapacityA")]
		[NativeName(NativeNameType.Type, "int")]
		public int BufCapacityA;

		/// <summary>
		/// horizontal scrollingoffset<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollX")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollX;

		/// <summary>
		/// state for stb_textedit.h<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Stb")]
		[NativeName(NativeNameType.Type, "STB_TexteditState")]
		public STBTexteditState Stb;

		/// <summary>
		/// timer for cursor blink, reset on every user action so the cursor reappears immediately<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CursorAnim")]
		[NativeName(NativeNameType.Type, "float")]
		public float CursorAnim;

		/// <summary>
		/// set when we want scrolling to follow the current cursor position (not always!)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CursorFollow")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte CursorFollow;

		/// <summary>
		/// after a double-click to select all, we ignore further mouse drags to update selection<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SelectedAllMouseLock")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte SelectedAllMouseLock;

		/// <summary>
		/// edited this frame<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Edited")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Edited;

		/// <summary>
		/// copy of InputText() flags. may be used to check if e.g. ImGuiInputTextFlags_Password is set.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiInputTextFlags")]
		public ImGuiInputTextFlags Flags;




		[NativeName(NativeNameType.Func, "ImGuiInputTextState_ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearFreeMemory()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				ImGui.ClearFreeMemoryNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_ClearSelection")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearSelection()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				ImGui.ClearSelectionNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_ClearText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearText()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				ImGui.ClearTextNative(@this);
			}
		}

		/// <summary>		/// After a user-input the cursor stays on for a while without blinking		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiInputTextState_CursorAnimReset")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CursorAnimReset()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				ImGui.CursorAnimResetNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_CursorClamp")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CursorClamp()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				ImGui.CursorClampNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_GetCursorPos")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int GetCursorPos()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				int ret = ImGui.GetCursorPosNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_GetRedoAvailCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int GetRedoAvailCount()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				int ret = ImGui.GetRedoAvailCountNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_GetSelectionEnd")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int GetSelectionEnd()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				int ret = ImGui.GetSelectionEndNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_GetSelectionStart")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int GetSelectionStart()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				int ret = ImGui.GetSelectionStartNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_GetUndoAvailCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int GetUndoAvailCount()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				int ret = ImGui.GetUndoAvailCountNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_HasSelection")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool HasSelection()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				byte ret = ImGui.HasSelectionNative(@this);
				return ret != 0;
			}
		}

		/// <summary>		/// Cannot be inline because we call in code in stb_textedit.h implementation		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiInputTextState_OnKeyPressed")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void OnKeyPressed([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "int")] int kEY)
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				ImGui.OnKeyPressedNative(@this, kEY);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextState_SelectAll")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SelectAll()
		{
			fixed (ImGuiInputTextState* @this = &this)
			{
				ImGui.SelectAllNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "STB_TexteditState")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct STBTexteditState
	{
		[NativeName(NativeNameType.Field, "cursor")]
		[NativeName(NativeNameType.Type, "int")]
		public int Cursor;
		/// <summary>
		/// selection start point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "select_start")]
		[NativeName(NativeNameType.Type, "int")]
		public int SelectStart;

		[NativeName(NativeNameType.Field, "select_end")]
		[NativeName(NativeNameType.Type, "int")]
		public int SelectEnd;
		[NativeName(NativeNameType.Field, "insert_mode")]
		[NativeName(NativeNameType.Type, "unsigned char")]
		public byte InsertMode;
		[NativeName(NativeNameType.Field, "row_count_per_page")]
		[NativeName(NativeNameType.Type, "int")]
		public int RowCountPerPage;
		/// <summary>
		/// private data<br/>
		/// not implemented yet<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cursor_at_end_of_line")]
		[NativeName(NativeNameType.Type, "unsigned char")]
		public byte CursorAtEndOfLine;

		[NativeName(NativeNameType.Field, "initialized")]
		[NativeName(NativeNameType.Type, "unsigned char")]
		public byte Initialized;
		[NativeName(NativeNameType.Field, "has_preferred_x")]
		[NativeName(NativeNameType.Type, "unsigned char")]
		public byte HasPreferredX;
		[NativeName(NativeNameType.Field, "single_line")]
		[NativeName(NativeNameType.Type, "unsigned char")]
		public byte SingleLine;
		[NativeName(NativeNameType.Field, "padding1")]
		[NativeName(NativeNameType.Type, "unsigned char")]
		public byte Padding1;
		[NativeName(NativeNameType.Field, "padding2")]
		[NativeName(NativeNameType.Type, "unsigned char")]
		public byte Padding2;
		[NativeName(NativeNameType.Field, "padding3")]
		[NativeName(NativeNameType.Type, "unsigned char")]
		public byte Padding3;
		/// <summary>
		/// this determines where the cursor updown tries to seek to along x<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "preferred_x")]
		[NativeName(NativeNameType.Type, "float")]
		public float PreferredX;

		[NativeName(NativeNameType.Field, "undostate")]
		[NativeName(NativeNameType.Type, "StbUndoState")]
		public StbUndoState Undostate;


	}

	[NativeName(NativeNameType.StructOrClass, "StbUndoState")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StbUndoState
	{
		[NativeName(NativeNameType.Field, "undo_rec")]
		[NativeName(NativeNameType.Type, "StbUndoRecord[99]")]
		public StbUndoRecord UndoRec_0;
		public StbUndoRecord UndoRec_1;
		public StbUndoRecord UndoRec_2;
		public StbUndoRecord UndoRec_3;
		public StbUndoRecord UndoRec_4;
		public StbUndoRecord UndoRec_5;
		public StbUndoRecord UndoRec_6;
		public StbUndoRecord UndoRec_7;
		public StbUndoRecord UndoRec_8;
		public StbUndoRecord UndoRec_9;
		public StbUndoRecord UndoRec_10;
		public StbUndoRecord UndoRec_11;
		public StbUndoRecord UndoRec_12;
		public StbUndoRecord UndoRec_13;
		public StbUndoRecord UndoRec_14;
		public StbUndoRecord UndoRec_15;
		public StbUndoRecord UndoRec_16;
		public StbUndoRecord UndoRec_17;
		public StbUndoRecord UndoRec_18;
		public StbUndoRecord UndoRec_19;
		public StbUndoRecord UndoRec_20;
		public StbUndoRecord UndoRec_21;
		public StbUndoRecord UndoRec_22;
		public StbUndoRecord UndoRec_23;
		public StbUndoRecord UndoRec_24;
		public StbUndoRecord UndoRec_25;
		public StbUndoRecord UndoRec_26;
		public StbUndoRecord UndoRec_27;
		public StbUndoRecord UndoRec_28;
		public StbUndoRecord UndoRec_29;
		public StbUndoRecord UndoRec_30;
		public StbUndoRecord UndoRec_31;
		public StbUndoRecord UndoRec_32;
		public StbUndoRecord UndoRec_33;
		public StbUndoRecord UndoRec_34;
		public StbUndoRecord UndoRec_35;
		public StbUndoRecord UndoRec_36;
		public StbUndoRecord UndoRec_37;
		public StbUndoRecord UndoRec_38;
		public StbUndoRecord UndoRec_39;
		public StbUndoRecord UndoRec_40;
		public StbUndoRecord UndoRec_41;
		public StbUndoRecord UndoRec_42;
		public StbUndoRecord UndoRec_43;
		public StbUndoRecord UndoRec_44;
		public StbUndoRecord UndoRec_45;
		public StbUndoRecord UndoRec_46;
		public StbUndoRecord UndoRec_47;
		public StbUndoRecord UndoRec_48;
		public StbUndoRecord UndoRec_49;
		public StbUndoRecord UndoRec_50;
		public StbUndoRecord UndoRec_51;
		public StbUndoRecord UndoRec_52;
		public StbUndoRecord UndoRec_53;
		public StbUndoRecord UndoRec_54;
		public StbUndoRecord UndoRec_55;
		public StbUndoRecord UndoRec_56;
		public StbUndoRecord UndoRec_57;
		public StbUndoRecord UndoRec_58;
		public StbUndoRecord UndoRec_59;
		public StbUndoRecord UndoRec_60;
		public StbUndoRecord UndoRec_61;
		public StbUndoRecord UndoRec_62;
		public StbUndoRecord UndoRec_63;
		public StbUndoRecord UndoRec_64;
		public StbUndoRecord UndoRec_65;
		public StbUndoRecord UndoRec_66;
		public StbUndoRecord UndoRec_67;
		public StbUndoRecord UndoRec_68;
		public StbUndoRecord UndoRec_69;
		public StbUndoRecord UndoRec_70;
		public StbUndoRecord UndoRec_71;
		public StbUndoRecord UndoRec_72;
		public StbUndoRecord UndoRec_73;
		public StbUndoRecord UndoRec_74;
		public StbUndoRecord UndoRec_75;
		public StbUndoRecord UndoRec_76;
		public StbUndoRecord UndoRec_77;
		public StbUndoRecord UndoRec_78;
		public StbUndoRecord UndoRec_79;
		public StbUndoRecord UndoRec_80;
		public StbUndoRecord UndoRec_81;
		public StbUndoRecord UndoRec_82;
		public StbUndoRecord UndoRec_83;
		public StbUndoRecord UndoRec_84;
		public StbUndoRecord UndoRec_85;
		public StbUndoRecord UndoRec_86;
		public StbUndoRecord UndoRec_87;
		public StbUndoRecord UndoRec_88;
		public StbUndoRecord UndoRec_89;
		public StbUndoRecord UndoRec_90;
		public StbUndoRecord UndoRec_91;
		public StbUndoRecord UndoRec_92;
		public StbUndoRecord UndoRec_93;
		public StbUndoRecord UndoRec_94;
		public StbUndoRecord UndoRec_95;
		public StbUndoRecord UndoRec_96;
		public StbUndoRecord UndoRec_97;
		public StbUndoRecord UndoRec_98;
		[NativeName(NativeNameType.Field, "undo_char")]
		[NativeName(NativeNameType.Type, "ImWchar[999]")]
		public ushort UndoChar_0;
		public ushort UndoChar_1;
		public ushort UndoChar_2;
		public ushort UndoChar_3;
		public ushort UndoChar_4;
		public ushort UndoChar_5;
		public ushort UndoChar_6;
		public ushort UndoChar_7;
		public ushort UndoChar_8;
		public ushort UndoChar_9;
		public ushort UndoChar_10;
		public ushort UndoChar_11;
		public ushort UndoChar_12;
		public ushort UndoChar_13;
		public ushort UndoChar_14;
		public ushort UndoChar_15;
		public ushort UndoChar_16;
		public ushort UndoChar_17;
		public ushort UndoChar_18;
		public ushort UndoChar_19;
		public ushort UndoChar_20;
		public ushort UndoChar_21;
		public ushort UndoChar_22;
		public ushort UndoChar_23;
		public ushort UndoChar_24;
		public ushort UndoChar_25;
		public ushort UndoChar_26;
		public ushort UndoChar_27;
		public ushort UndoChar_28;
		public ushort UndoChar_29;
		public ushort UndoChar_30;
		public ushort UndoChar_31;
		public ushort UndoChar_32;
		public ushort UndoChar_33;
		public ushort UndoChar_34;
		public ushort UndoChar_35;
		public ushort UndoChar_36;
		public ushort UndoChar_37;
		public ushort UndoChar_38;
		public ushort UndoChar_39;
		public ushort UndoChar_40;
		public ushort UndoChar_41;
		public ushort UndoChar_42;
		public ushort UndoChar_43;
		public ushort UndoChar_44;
		public ushort UndoChar_45;
		public ushort UndoChar_46;
		public ushort UndoChar_47;
		public ushort UndoChar_48;
		public ushort UndoChar_49;
		public ushort UndoChar_50;
		public ushort UndoChar_51;
		public ushort UndoChar_52;
		public ushort UndoChar_53;
		public ushort UndoChar_54;
		public ushort UndoChar_55;
		public ushort UndoChar_56;
		public ushort UndoChar_57;
		public ushort UndoChar_58;
		public ushort UndoChar_59;
		public ushort UndoChar_60;
		public ushort UndoChar_61;
		public ushort UndoChar_62;
		public ushort UndoChar_63;
		public ushort UndoChar_64;
		public ushort UndoChar_65;
		public ushort UndoChar_66;
		public ushort UndoChar_67;
		public ushort UndoChar_68;
		public ushort UndoChar_69;
		public ushort UndoChar_70;
		public ushort UndoChar_71;
		public ushort UndoChar_72;
		public ushort UndoChar_73;
		public ushort UndoChar_74;
		public ushort UndoChar_75;
		public ushort UndoChar_76;
		public ushort UndoChar_77;
		public ushort UndoChar_78;
		public ushort UndoChar_79;
		public ushort UndoChar_80;
		public ushort UndoChar_81;
		public ushort UndoChar_82;
		public ushort UndoChar_83;
		public ushort UndoChar_84;
		public ushort UndoChar_85;
		public ushort UndoChar_86;
		public ushort UndoChar_87;
		public ushort UndoChar_88;
		public ushort UndoChar_89;
		public ushort UndoChar_90;
		public ushort UndoChar_91;
		public ushort UndoChar_92;
		public ushort UndoChar_93;
		public ushort UndoChar_94;
		public ushort UndoChar_95;
		public ushort UndoChar_96;
		public ushort UndoChar_97;
		public ushort UndoChar_98;
		public ushort UndoChar_99;
		public ushort UndoChar_100;
		public ushort UndoChar_101;
		public ushort UndoChar_102;
		public ushort UndoChar_103;
		public ushort UndoChar_104;
		public ushort UndoChar_105;
		public ushort UndoChar_106;
		public ushort UndoChar_107;
		public ushort UndoChar_108;
		public ushort UndoChar_109;
		public ushort UndoChar_110;
		public ushort UndoChar_111;
		public ushort UndoChar_112;
		public ushort UndoChar_113;
		public ushort UndoChar_114;
		public ushort UndoChar_115;
		public ushort UndoChar_116;
		public ushort UndoChar_117;
		public ushort UndoChar_118;
		public ushort UndoChar_119;
		public ushort UndoChar_120;
		public ushort UndoChar_121;
		public ushort UndoChar_122;
		public ushort UndoChar_123;
		public ushort UndoChar_124;
		public ushort UndoChar_125;
		public ushort UndoChar_126;
		public ushort UndoChar_127;
		public ushort UndoChar_128;
		public ushort UndoChar_129;
		public ushort UndoChar_130;
		public ushort UndoChar_131;
		public ushort UndoChar_132;
		public ushort UndoChar_133;
		public ushort UndoChar_134;
		public ushort UndoChar_135;
		public ushort UndoChar_136;
		public ushort UndoChar_137;
		public ushort UndoChar_138;
		public ushort UndoChar_139;
		public ushort UndoChar_140;
		public ushort UndoChar_141;
		public ushort UndoChar_142;
		public ushort UndoChar_143;
		public ushort UndoChar_144;
		public ushort UndoChar_145;
		public ushort UndoChar_146;
		public ushort UndoChar_147;
		public ushort UndoChar_148;
		public ushort UndoChar_149;
		public ushort UndoChar_150;
		public ushort UndoChar_151;
		public ushort UndoChar_152;
		public ushort UndoChar_153;
		public ushort UndoChar_154;
		public ushort UndoChar_155;
		public ushort UndoChar_156;
		public ushort UndoChar_157;
		public ushort UndoChar_158;
		public ushort UndoChar_159;
		public ushort UndoChar_160;
		public ushort UndoChar_161;
		public ushort UndoChar_162;
		public ushort UndoChar_163;
		public ushort UndoChar_164;
		public ushort UndoChar_165;
		public ushort UndoChar_166;
		public ushort UndoChar_167;
		public ushort UndoChar_168;
		public ushort UndoChar_169;
		public ushort UndoChar_170;
		public ushort UndoChar_171;
		public ushort UndoChar_172;
		public ushort UndoChar_173;
		public ushort UndoChar_174;
		public ushort UndoChar_175;
		public ushort UndoChar_176;
		public ushort UndoChar_177;
		public ushort UndoChar_178;
		public ushort UndoChar_179;
		public ushort UndoChar_180;
		public ushort UndoChar_181;
		public ushort UndoChar_182;
		public ushort UndoChar_183;
		public ushort UndoChar_184;
		public ushort UndoChar_185;
		public ushort UndoChar_186;
		public ushort UndoChar_187;
		public ushort UndoChar_188;
		public ushort UndoChar_189;
		public ushort UndoChar_190;
		public ushort UndoChar_191;
		public ushort UndoChar_192;
		public ushort UndoChar_193;
		public ushort UndoChar_194;
		public ushort UndoChar_195;
		public ushort UndoChar_196;
		public ushort UndoChar_197;
		public ushort UndoChar_198;
		public ushort UndoChar_199;
		public ushort UndoChar_200;
		public ushort UndoChar_201;
		public ushort UndoChar_202;
		public ushort UndoChar_203;
		public ushort UndoChar_204;
		public ushort UndoChar_205;
		public ushort UndoChar_206;
		public ushort UndoChar_207;
		public ushort UndoChar_208;
		public ushort UndoChar_209;
		public ushort UndoChar_210;
		public ushort UndoChar_211;
		public ushort UndoChar_212;
		public ushort UndoChar_213;
		public ushort UndoChar_214;
		public ushort UndoChar_215;
		public ushort UndoChar_216;
		public ushort UndoChar_217;
		public ushort UndoChar_218;
		public ushort UndoChar_219;
		public ushort UndoChar_220;
		public ushort UndoChar_221;
		public ushort UndoChar_222;
		public ushort UndoChar_223;
		public ushort UndoChar_224;
		public ushort UndoChar_225;
		public ushort UndoChar_226;
		public ushort UndoChar_227;
		public ushort UndoChar_228;
		public ushort UndoChar_229;
		public ushort UndoChar_230;
		public ushort UndoChar_231;
		public ushort UndoChar_232;
		public ushort UndoChar_233;
		public ushort UndoChar_234;
		public ushort UndoChar_235;
		public ushort UndoChar_236;
		public ushort UndoChar_237;
		public ushort UndoChar_238;
		public ushort UndoChar_239;
		public ushort UndoChar_240;
		public ushort UndoChar_241;
		public ushort UndoChar_242;
		public ushort UndoChar_243;
		public ushort UndoChar_244;
		public ushort UndoChar_245;
		public ushort UndoChar_246;
		public ushort UndoChar_247;
		public ushort UndoChar_248;
		public ushort UndoChar_249;
		public ushort UndoChar_250;
		public ushort UndoChar_251;
		public ushort UndoChar_252;
		public ushort UndoChar_253;
		public ushort UndoChar_254;
		public ushort UndoChar_255;
		public ushort UndoChar_256;
		public ushort UndoChar_257;
		public ushort UndoChar_258;
		public ushort UndoChar_259;
		public ushort UndoChar_260;
		public ushort UndoChar_261;
		public ushort UndoChar_262;
		public ushort UndoChar_263;
		public ushort UndoChar_264;
		public ushort UndoChar_265;
		public ushort UndoChar_266;
		public ushort UndoChar_267;
		public ushort UndoChar_268;
		public ushort UndoChar_269;
		public ushort UndoChar_270;
		public ushort UndoChar_271;
		public ushort UndoChar_272;
		public ushort UndoChar_273;
		public ushort UndoChar_274;
		public ushort UndoChar_275;
		public ushort UndoChar_276;
		public ushort UndoChar_277;
		public ushort UndoChar_278;
		public ushort UndoChar_279;
		public ushort UndoChar_280;
		public ushort UndoChar_281;
		public ushort UndoChar_282;
		public ushort UndoChar_283;
		public ushort UndoChar_284;
		public ushort UndoChar_285;
		public ushort UndoChar_286;
		public ushort UndoChar_287;
		public ushort UndoChar_288;
		public ushort UndoChar_289;
		public ushort UndoChar_290;
		public ushort UndoChar_291;
		public ushort UndoChar_292;
		public ushort UndoChar_293;
		public ushort UndoChar_294;
		public ushort UndoChar_295;
		public ushort UndoChar_296;
		public ushort UndoChar_297;
		public ushort UndoChar_298;
		public ushort UndoChar_299;
		public ushort UndoChar_300;
		public ushort UndoChar_301;
		public ushort UndoChar_302;
		public ushort UndoChar_303;
		public ushort UndoChar_304;
		public ushort UndoChar_305;
		public ushort UndoChar_306;
		public ushort UndoChar_307;
		public ushort UndoChar_308;
		public ushort UndoChar_309;
		public ushort UndoChar_310;
		public ushort UndoChar_311;
		public ushort UndoChar_312;
		public ushort UndoChar_313;
		public ushort UndoChar_314;
		public ushort UndoChar_315;
		public ushort UndoChar_316;
		public ushort UndoChar_317;
		public ushort UndoChar_318;
		public ushort UndoChar_319;
		public ushort UndoChar_320;
		public ushort UndoChar_321;
		public ushort UndoChar_322;
		public ushort UndoChar_323;
		public ushort UndoChar_324;
		public ushort UndoChar_325;
		public ushort UndoChar_326;
		public ushort UndoChar_327;
		public ushort UndoChar_328;
		public ushort UndoChar_329;
		public ushort UndoChar_330;
		public ushort UndoChar_331;
		public ushort UndoChar_332;
		public ushort UndoChar_333;
		public ushort UndoChar_334;
		public ushort UndoChar_335;
		public ushort UndoChar_336;
		public ushort UndoChar_337;
		public ushort UndoChar_338;
		public ushort UndoChar_339;
		public ushort UndoChar_340;
		public ushort UndoChar_341;
		public ushort UndoChar_342;
		public ushort UndoChar_343;
		public ushort UndoChar_344;
		public ushort UndoChar_345;
		public ushort UndoChar_346;
		public ushort UndoChar_347;
		public ushort UndoChar_348;
		public ushort UndoChar_349;
		public ushort UndoChar_350;
		public ushort UndoChar_351;
		public ushort UndoChar_352;
		public ushort UndoChar_353;
		public ushort UndoChar_354;
		public ushort UndoChar_355;
		public ushort UndoChar_356;
		public ushort UndoChar_357;
		public ushort UndoChar_358;
		public ushort UndoChar_359;
		public ushort UndoChar_360;
		public ushort UndoChar_361;
		public ushort UndoChar_362;
		public ushort UndoChar_363;
		public ushort UndoChar_364;
		public ushort UndoChar_365;
		public ushort UndoChar_366;
		public ushort UndoChar_367;
		public ushort UndoChar_368;
		public ushort UndoChar_369;
		public ushort UndoChar_370;
		public ushort UndoChar_371;
		public ushort UndoChar_372;
		public ushort UndoChar_373;
		public ushort UndoChar_374;
		public ushort UndoChar_375;
		public ushort UndoChar_376;
		public ushort UndoChar_377;
		public ushort UndoChar_378;
		public ushort UndoChar_379;
		public ushort UndoChar_380;
		public ushort UndoChar_381;
		public ushort UndoChar_382;
		public ushort UndoChar_383;
		public ushort UndoChar_384;
		public ushort UndoChar_385;
		public ushort UndoChar_386;
		public ushort UndoChar_387;
		public ushort UndoChar_388;
		public ushort UndoChar_389;
		public ushort UndoChar_390;
		public ushort UndoChar_391;
		public ushort UndoChar_392;
		public ushort UndoChar_393;
		public ushort UndoChar_394;
		public ushort UndoChar_395;
		public ushort UndoChar_396;
		public ushort UndoChar_397;
		public ushort UndoChar_398;
		public ushort UndoChar_399;
		public ushort UndoChar_400;
		public ushort UndoChar_401;
		public ushort UndoChar_402;
		public ushort UndoChar_403;
		public ushort UndoChar_404;
		public ushort UndoChar_405;
		public ushort UndoChar_406;
		public ushort UndoChar_407;
		public ushort UndoChar_408;
		public ushort UndoChar_409;
		public ushort UndoChar_410;
		public ushort UndoChar_411;
		public ushort UndoChar_412;
		public ushort UndoChar_413;
		public ushort UndoChar_414;
		public ushort UndoChar_415;
		public ushort UndoChar_416;
		public ushort UndoChar_417;
		public ushort UndoChar_418;
		public ushort UndoChar_419;
		public ushort UndoChar_420;
		public ushort UndoChar_421;
		public ushort UndoChar_422;
		public ushort UndoChar_423;
		public ushort UndoChar_424;
		public ushort UndoChar_425;
		public ushort UndoChar_426;
		public ushort UndoChar_427;
		public ushort UndoChar_428;
		public ushort UndoChar_429;
		public ushort UndoChar_430;
		public ushort UndoChar_431;
		public ushort UndoChar_432;
		public ushort UndoChar_433;
		public ushort UndoChar_434;
		public ushort UndoChar_435;
		public ushort UndoChar_436;
		public ushort UndoChar_437;
		public ushort UndoChar_438;
		public ushort UndoChar_439;
		public ushort UndoChar_440;
		public ushort UndoChar_441;
		public ushort UndoChar_442;
		public ushort UndoChar_443;
		public ushort UndoChar_444;
		public ushort UndoChar_445;
		public ushort UndoChar_446;
		public ushort UndoChar_447;
		public ushort UndoChar_448;
		public ushort UndoChar_449;
		public ushort UndoChar_450;
		public ushort UndoChar_451;
		public ushort UndoChar_452;
		public ushort UndoChar_453;
		public ushort UndoChar_454;
		public ushort UndoChar_455;
		public ushort UndoChar_456;
		public ushort UndoChar_457;
		public ushort UndoChar_458;
		public ushort UndoChar_459;
		public ushort UndoChar_460;
		public ushort UndoChar_461;
		public ushort UndoChar_462;
		public ushort UndoChar_463;
		public ushort UndoChar_464;
		public ushort UndoChar_465;
		public ushort UndoChar_466;
		public ushort UndoChar_467;
		public ushort UndoChar_468;
		public ushort UndoChar_469;
		public ushort UndoChar_470;
		public ushort UndoChar_471;
		public ushort UndoChar_472;
		public ushort UndoChar_473;
		public ushort UndoChar_474;
		public ushort UndoChar_475;
		public ushort UndoChar_476;
		public ushort UndoChar_477;
		public ushort UndoChar_478;
		public ushort UndoChar_479;
		public ushort UndoChar_480;
		public ushort UndoChar_481;
		public ushort UndoChar_482;
		public ushort UndoChar_483;
		public ushort UndoChar_484;
		public ushort UndoChar_485;
		public ushort UndoChar_486;
		public ushort UndoChar_487;
		public ushort UndoChar_488;
		public ushort UndoChar_489;
		public ushort UndoChar_490;
		public ushort UndoChar_491;
		public ushort UndoChar_492;
		public ushort UndoChar_493;
		public ushort UndoChar_494;
		public ushort UndoChar_495;
		public ushort UndoChar_496;
		public ushort UndoChar_497;
		public ushort UndoChar_498;
		public ushort UndoChar_499;
		public ushort UndoChar_500;
		public ushort UndoChar_501;
		public ushort UndoChar_502;
		public ushort UndoChar_503;
		public ushort UndoChar_504;
		public ushort UndoChar_505;
		public ushort UndoChar_506;
		public ushort UndoChar_507;
		public ushort UndoChar_508;
		public ushort UndoChar_509;
		public ushort UndoChar_510;
		public ushort UndoChar_511;
		public ushort UndoChar_512;
		public ushort UndoChar_513;
		public ushort UndoChar_514;
		public ushort UndoChar_515;
		public ushort UndoChar_516;
		public ushort UndoChar_517;
		public ushort UndoChar_518;
		public ushort UndoChar_519;
		public ushort UndoChar_520;
		public ushort UndoChar_521;
		public ushort UndoChar_522;
		public ushort UndoChar_523;
		public ushort UndoChar_524;
		public ushort UndoChar_525;
		public ushort UndoChar_526;
		public ushort UndoChar_527;
		public ushort UndoChar_528;
		public ushort UndoChar_529;
		public ushort UndoChar_530;
		public ushort UndoChar_531;
		public ushort UndoChar_532;
		public ushort UndoChar_533;
		public ushort UndoChar_534;
		public ushort UndoChar_535;
		public ushort UndoChar_536;
		public ushort UndoChar_537;
		public ushort UndoChar_538;
		public ushort UndoChar_539;
		public ushort UndoChar_540;
		public ushort UndoChar_541;
		public ushort UndoChar_542;
		public ushort UndoChar_543;
		public ushort UndoChar_544;
		public ushort UndoChar_545;
		public ushort UndoChar_546;
		public ushort UndoChar_547;
		public ushort UndoChar_548;
		public ushort UndoChar_549;
		public ushort UndoChar_550;
		public ushort UndoChar_551;
		public ushort UndoChar_552;
		public ushort UndoChar_553;
		public ushort UndoChar_554;
		public ushort UndoChar_555;
		public ushort UndoChar_556;
		public ushort UndoChar_557;
		public ushort UndoChar_558;
		public ushort UndoChar_559;
		public ushort UndoChar_560;
		public ushort UndoChar_561;
		public ushort UndoChar_562;
		public ushort UndoChar_563;
		public ushort UndoChar_564;
		public ushort UndoChar_565;
		public ushort UndoChar_566;
		public ushort UndoChar_567;
		public ushort UndoChar_568;
		public ushort UndoChar_569;
		public ushort UndoChar_570;
		public ushort UndoChar_571;
		public ushort UndoChar_572;
		public ushort UndoChar_573;
		public ushort UndoChar_574;
		public ushort UndoChar_575;
		public ushort UndoChar_576;
		public ushort UndoChar_577;
		public ushort UndoChar_578;
		public ushort UndoChar_579;
		public ushort UndoChar_580;
		public ushort UndoChar_581;
		public ushort UndoChar_582;
		public ushort UndoChar_583;
		public ushort UndoChar_584;
		public ushort UndoChar_585;
		public ushort UndoChar_586;
		public ushort UndoChar_587;
		public ushort UndoChar_588;
		public ushort UndoChar_589;
		public ushort UndoChar_590;
		public ushort UndoChar_591;
		public ushort UndoChar_592;
		public ushort UndoChar_593;
		public ushort UndoChar_594;
		public ushort UndoChar_595;
		public ushort UndoChar_596;
		public ushort UndoChar_597;
		public ushort UndoChar_598;
		public ushort UndoChar_599;
		public ushort UndoChar_600;
		public ushort UndoChar_601;
		public ushort UndoChar_602;
		public ushort UndoChar_603;
		public ushort UndoChar_604;
		public ushort UndoChar_605;
		public ushort UndoChar_606;
		public ushort UndoChar_607;
		public ushort UndoChar_608;
		public ushort UndoChar_609;
		public ushort UndoChar_610;
		public ushort UndoChar_611;
		public ushort UndoChar_612;
		public ushort UndoChar_613;
		public ushort UndoChar_614;
		public ushort UndoChar_615;
		public ushort UndoChar_616;
		public ushort UndoChar_617;
		public ushort UndoChar_618;
		public ushort UndoChar_619;
		public ushort UndoChar_620;
		public ushort UndoChar_621;
		public ushort UndoChar_622;
		public ushort UndoChar_623;
		public ushort UndoChar_624;
		public ushort UndoChar_625;
		public ushort UndoChar_626;
		public ushort UndoChar_627;
		public ushort UndoChar_628;
		public ushort UndoChar_629;
		public ushort UndoChar_630;
		public ushort UndoChar_631;
		public ushort UndoChar_632;
		public ushort UndoChar_633;
		public ushort UndoChar_634;
		public ushort UndoChar_635;
		public ushort UndoChar_636;
		public ushort UndoChar_637;
		public ushort UndoChar_638;
		public ushort UndoChar_639;
		public ushort UndoChar_640;
		public ushort UndoChar_641;
		public ushort UndoChar_642;
		public ushort UndoChar_643;
		public ushort UndoChar_644;
		public ushort UndoChar_645;
		public ushort UndoChar_646;
		public ushort UndoChar_647;
		public ushort UndoChar_648;
		public ushort UndoChar_649;
		public ushort UndoChar_650;
		public ushort UndoChar_651;
		public ushort UndoChar_652;
		public ushort UndoChar_653;
		public ushort UndoChar_654;
		public ushort UndoChar_655;
		public ushort UndoChar_656;
		public ushort UndoChar_657;
		public ushort UndoChar_658;
		public ushort UndoChar_659;
		public ushort UndoChar_660;
		public ushort UndoChar_661;
		public ushort UndoChar_662;
		public ushort UndoChar_663;
		public ushort UndoChar_664;
		public ushort UndoChar_665;
		public ushort UndoChar_666;
		public ushort UndoChar_667;
		public ushort UndoChar_668;
		public ushort UndoChar_669;
		public ushort UndoChar_670;
		public ushort UndoChar_671;
		public ushort UndoChar_672;
		public ushort UndoChar_673;
		public ushort UndoChar_674;
		public ushort UndoChar_675;
		public ushort UndoChar_676;
		public ushort UndoChar_677;
		public ushort UndoChar_678;
		public ushort UndoChar_679;
		public ushort UndoChar_680;
		public ushort UndoChar_681;
		public ushort UndoChar_682;
		public ushort UndoChar_683;
		public ushort UndoChar_684;
		public ushort UndoChar_685;
		public ushort UndoChar_686;
		public ushort UndoChar_687;
		public ushort UndoChar_688;
		public ushort UndoChar_689;
		public ushort UndoChar_690;
		public ushort UndoChar_691;
		public ushort UndoChar_692;
		public ushort UndoChar_693;
		public ushort UndoChar_694;
		public ushort UndoChar_695;
		public ushort UndoChar_696;
		public ushort UndoChar_697;
		public ushort UndoChar_698;
		public ushort UndoChar_699;
		public ushort UndoChar_700;
		public ushort UndoChar_701;
		public ushort UndoChar_702;
		public ushort UndoChar_703;
		public ushort UndoChar_704;
		public ushort UndoChar_705;
		public ushort UndoChar_706;
		public ushort UndoChar_707;
		public ushort UndoChar_708;
		public ushort UndoChar_709;
		public ushort UndoChar_710;
		public ushort UndoChar_711;
		public ushort UndoChar_712;
		public ushort UndoChar_713;
		public ushort UndoChar_714;
		public ushort UndoChar_715;
		public ushort UndoChar_716;
		public ushort UndoChar_717;
		public ushort UndoChar_718;
		public ushort UndoChar_719;
		public ushort UndoChar_720;
		public ushort UndoChar_721;
		public ushort UndoChar_722;
		public ushort UndoChar_723;
		public ushort UndoChar_724;
		public ushort UndoChar_725;
		public ushort UndoChar_726;
		public ushort UndoChar_727;
		public ushort UndoChar_728;
		public ushort UndoChar_729;
		public ushort UndoChar_730;
		public ushort UndoChar_731;
		public ushort UndoChar_732;
		public ushort UndoChar_733;
		public ushort UndoChar_734;
		public ushort UndoChar_735;
		public ushort UndoChar_736;
		public ushort UndoChar_737;
		public ushort UndoChar_738;
		public ushort UndoChar_739;
		public ushort UndoChar_740;
		public ushort UndoChar_741;
		public ushort UndoChar_742;
		public ushort UndoChar_743;
		public ushort UndoChar_744;
		public ushort UndoChar_745;
		public ushort UndoChar_746;
		public ushort UndoChar_747;
		public ushort UndoChar_748;
		public ushort UndoChar_749;
		public ushort UndoChar_750;
		public ushort UndoChar_751;
		public ushort UndoChar_752;
		public ushort UndoChar_753;
		public ushort UndoChar_754;
		public ushort UndoChar_755;
		public ushort UndoChar_756;
		public ushort UndoChar_757;
		public ushort UndoChar_758;
		public ushort UndoChar_759;
		public ushort UndoChar_760;
		public ushort UndoChar_761;
		public ushort UndoChar_762;
		public ushort UndoChar_763;
		public ushort UndoChar_764;
		public ushort UndoChar_765;
		public ushort UndoChar_766;
		public ushort UndoChar_767;
		public ushort UndoChar_768;
		public ushort UndoChar_769;
		public ushort UndoChar_770;
		public ushort UndoChar_771;
		public ushort UndoChar_772;
		public ushort UndoChar_773;
		public ushort UndoChar_774;
		public ushort UndoChar_775;
		public ushort UndoChar_776;
		public ushort UndoChar_777;
		public ushort UndoChar_778;
		public ushort UndoChar_779;
		public ushort UndoChar_780;
		public ushort UndoChar_781;
		public ushort UndoChar_782;
		public ushort UndoChar_783;
		public ushort UndoChar_784;
		public ushort UndoChar_785;
		public ushort UndoChar_786;
		public ushort UndoChar_787;
		public ushort UndoChar_788;
		public ushort UndoChar_789;
		public ushort UndoChar_790;
		public ushort UndoChar_791;
		public ushort UndoChar_792;
		public ushort UndoChar_793;
		public ushort UndoChar_794;
		public ushort UndoChar_795;
		public ushort UndoChar_796;
		public ushort UndoChar_797;
		public ushort UndoChar_798;
		public ushort UndoChar_799;
		public ushort UndoChar_800;
		public ushort UndoChar_801;
		public ushort UndoChar_802;
		public ushort UndoChar_803;
		public ushort UndoChar_804;
		public ushort UndoChar_805;
		public ushort UndoChar_806;
		public ushort UndoChar_807;
		public ushort UndoChar_808;
		public ushort UndoChar_809;
		public ushort UndoChar_810;
		public ushort UndoChar_811;
		public ushort UndoChar_812;
		public ushort UndoChar_813;
		public ushort UndoChar_814;
		public ushort UndoChar_815;
		public ushort UndoChar_816;
		public ushort UndoChar_817;
		public ushort UndoChar_818;
		public ushort UndoChar_819;
		public ushort UndoChar_820;
		public ushort UndoChar_821;
		public ushort UndoChar_822;
		public ushort UndoChar_823;
		public ushort UndoChar_824;
		public ushort UndoChar_825;
		public ushort UndoChar_826;
		public ushort UndoChar_827;
		public ushort UndoChar_828;
		public ushort UndoChar_829;
		public ushort UndoChar_830;
		public ushort UndoChar_831;
		public ushort UndoChar_832;
		public ushort UndoChar_833;
		public ushort UndoChar_834;
		public ushort UndoChar_835;
		public ushort UndoChar_836;
		public ushort UndoChar_837;
		public ushort UndoChar_838;
		public ushort UndoChar_839;
		public ushort UndoChar_840;
		public ushort UndoChar_841;
		public ushort UndoChar_842;
		public ushort UndoChar_843;
		public ushort UndoChar_844;
		public ushort UndoChar_845;
		public ushort UndoChar_846;
		public ushort UndoChar_847;
		public ushort UndoChar_848;
		public ushort UndoChar_849;
		public ushort UndoChar_850;
		public ushort UndoChar_851;
		public ushort UndoChar_852;
		public ushort UndoChar_853;
		public ushort UndoChar_854;
		public ushort UndoChar_855;
		public ushort UndoChar_856;
		public ushort UndoChar_857;
		public ushort UndoChar_858;
		public ushort UndoChar_859;
		public ushort UndoChar_860;
		public ushort UndoChar_861;
		public ushort UndoChar_862;
		public ushort UndoChar_863;
		public ushort UndoChar_864;
		public ushort UndoChar_865;
		public ushort UndoChar_866;
		public ushort UndoChar_867;
		public ushort UndoChar_868;
		public ushort UndoChar_869;
		public ushort UndoChar_870;
		public ushort UndoChar_871;
		public ushort UndoChar_872;
		public ushort UndoChar_873;
		public ushort UndoChar_874;
		public ushort UndoChar_875;
		public ushort UndoChar_876;
		public ushort UndoChar_877;
		public ushort UndoChar_878;
		public ushort UndoChar_879;
		public ushort UndoChar_880;
		public ushort UndoChar_881;
		public ushort UndoChar_882;
		public ushort UndoChar_883;
		public ushort UndoChar_884;
		public ushort UndoChar_885;
		public ushort UndoChar_886;
		public ushort UndoChar_887;
		public ushort UndoChar_888;
		public ushort UndoChar_889;
		public ushort UndoChar_890;
		public ushort UndoChar_891;
		public ushort UndoChar_892;
		public ushort UndoChar_893;
		public ushort UndoChar_894;
		public ushort UndoChar_895;
		public ushort UndoChar_896;
		public ushort UndoChar_897;
		public ushort UndoChar_898;
		public ushort UndoChar_899;
		public ushort UndoChar_900;
		public ushort UndoChar_901;
		public ushort UndoChar_902;
		public ushort UndoChar_903;
		public ushort UndoChar_904;
		public ushort UndoChar_905;
		public ushort UndoChar_906;
		public ushort UndoChar_907;
		public ushort UndoChar_908;
		public ushort UndoChar_909;
		public ushort UndoChar_910;
		public ushort UndoChar_911;
		public ushort UndoChar_912;
		public ushort UndoChar_913;
		public ushort UndoChar_914;
		public ushort UndoChar_915;
		public ushort UndoChar_916;
		public ushort UndoChar_917;
		public ushort UndoChar_918;
		public ushort UndoChar_919;
		public ushort UndoChar_920;
		public ushort UndoChar_921;
		public ushort UndoChar_922;
		public ushort UndoChar_923;
		public ushort UndoChar_924;
		public ushort UndoChar_925;
		public ushort UndoChar_926;
		public ushort UndoChar_927;
		public ushort UndoChar_928;
		public ushort UndoChar_929;
		public ushort UndoChar_930;
		public ushort UndoChar_931;
		public ushort UndoChar_932;
		public ushort UndoChar_933;
		public ushort UndoChar_934;
		public ushort UndoChar_935;
		public ushort UndoChar_936;
		public ushort UndoChar_937;
		public ushort UndoChar_938;
		public ushort UndoChar_939;
		public ushort UndoChar_940;
		public ushort UndoChar_941;
		public ushort UndoChar_942;
		public ushort UndoChar_943;
		public ushort UndoChar_944;
		public ushort UndoChar_945;
		public ushort UndoChar_946;
		public ushort UndoChar_947;
		public ushort UndoChar_948;
		public ushort UndoChar_949;
		public ushort UndoChar_950;
		public ushort UndoChar_951;
		public ushort UndoChar_952;
		public ushort UndoChar_953;
		public ushort UndoChar_954;
		public ushort UndoChar_955;
		public ushort UndoChar_956;
		public ushort UndoChar_957;
		public ushort UndoChar_958;
		public ushort UndoChar_959;
		public ushort UndoChar_960;
		public ushort UndoChar_961;
		public ushort UndoChar_962;
		public ushort UndoChar_963;
		public ushort UndoChar_964;
		public ushort UndoChar_965;
		public ushort UndoChar_966;
		public ushort UndoChar_967;
		public ushort UndoChar_968;
		public ushort UndoChar_969;
		public ushort UndoChar_970;
		public ushort UndoChar_971;
		public ushort UndoChar_972;
		public ushort UndoChar_973;
		public ushort UndoChar_974;
		public ushort UndoChar_975;
		public ushort UndoChar_976;
		public ushort UndoChar_977;
		public ushort UndoChar_978;
		public ushort UndoChar_979;
		public ushort UndoChar_980;
		public ushort UndoChar_981;
		public ushort UndoChar_982;
		public ushort UndoChar_983;
		public ushort UndoChar_984;
		public ushort UndoChar_985;
		public ushort UndoChar_986;
		public ushort UndoChar_987;
		public ushort UndoChar_988;
		public ushort UndoChar_989;
		public ushort UndoChar_990;
		public ushort UndoChar_991;
		public ushort UndoChar_992;
		public ushort UndoChar_993;
		public ushort UndoChar_994;
		public ushort UndoChar_995;
		public ushort UndoChar_996;
		public ushort UndoChar_997;
		public ushort UndoChar_998;
		[NativeName(NativeNameType.Field, "undo_point")]
		[NativeName(NativeNameType.Type, "short")]
		public short UndoPoint;
		[NativeName(NativeNameType.Field, "redo_point")]
		[NativeName(NativeNameType.Type, "short")]
		public short RedoPoint;
		[NativeName(NativeNameType.Field, "undo_char_point")]
		[NativeName(NativeNameType.Type, "int")]
		public int UndoCharPoint;
		[NativeName(NativeNameType.Field, "redo_char_point")]
		[NativeName(NativeNameType.Type, "int")]
		public int RedoCharPoint;


		public unsafe Span<StbUndoRecord> UndoRec
		
		{
			get
			{
				fixed (StbUndoRecord* p = &this.UndoRec_0)
				{
					return new Span<StbUndoRecord>(p, 99);
				}
			}
		}
	}

	/// <summary>
	/// STB_TexteditState<br/>
	/// Definition of STB_TexteditState which you should store<br/>
	/// per-textfield; it includes cursor position, selection state,<br/>
	/// and undo state.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "StbUndoRecord")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StbUndoRecord
	{
		[NativeName(NativeNameType.Field, "where")]
		[NativeName(NativeNameType.Type, "int")]
		public int Where;
		[NativeName(NativeNameType.Field, "insert_length")]
		[NativeName(NativeNameType.Type, "int")]
		public int InsertLength;
		[NativeName(NativeNameType.Field, "delete_length")]
		[NativeName(NativeNameType.Type, "int")]
		public int DeleteLength;
		[NativeName(NativeNameType.Field, "char_storage")]
		[NativeName(NativeNameType.Type, "int")]
		public int CharStorage;


	}

	/// <summary>
	/// Internal temporary state for deactivating InputText() instances.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiInputTextDeactivatedState")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputTextDeactivatedState
	{
		/// <summary>
		/// widget id owning the text state (which just got deactivated)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// text buffer<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextA")]
		[NativeName(NativeNameType.Type, "ImVector_char")]
		public ImVectorChar TextA;




		[NativeName(NativeNameType.Func, "ImGuiInputTextDeactivatedState_ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearFreeMemory()
		{
			fixed (ImGuiInputTextDeactivatedState* @this = &this)
			{
				ImGui.ClearFreeMemoryNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextDeactivatedState_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiInputTextDeactivatedState* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// Storage data for BeginComboPreview()EndComboPreview()<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiComboPreviewData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiComboPreviewData
	{
		[NativeName(NativeNameType.Field, "PreviewRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect PreviewRect;
		[NativeName(NativeNameType.Field, "BackupCursorPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 BackupCursorPos;
		[NativeName(NativeNameType.Field, "BackupCursorMaxPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 BackupCursorMaxPos;
		[NativeName(NativeNameType.Field, "BackupCursorPosPrevLine")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 BackupCursorPosPrevLine;
		[NativeName(NativeNameType.Field, "BackupPrevLineTextBaseOffset")]
		[NativeName(NativeNameType.Type, "float")]
		public float BackupPrevLineTextBaseOffset;
		[NativeName(NativeNameType.Field, "BackupLayout")]
		[NativeName(NativeNameType.Type, "ImGuiLayoutType")]
		public ImGuiLayoutType BackupLayout;



		[NativeName(NativeNameType.Func, "ImGuiComboPreviewData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiComboPreviewData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiDockContext")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDockContext
	{
		/// <summary>
		/// Map ID -&gt; ImGuiDockNode*: Active nodes<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Nodes")]
		[NativeName(NativeNameType.Type, "ImGuiStorage")]
		public ImGuiStorage Nodes;

		[NativeName(NativeNameType.Field, "Requests")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiDockRequest")]
		public ImVectorImGuiDockRequest Requests;
		[NativeName(NativeNameType.Field, "NodesSettings")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiDockNodeSettings")]
		public ImVectorImGuiDockNodeSettings NodesSettings;
		[NativeName(NativeNameType.Field, "WantFullRebuild")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantFullRebuild;



		[NativeName(NativeNameType.Func, "ImGuiDockContext_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiDockContext* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiDockRequest")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiDockRequest
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiDockRequest*")]
		public unsafe ImGuiDockRequest* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiDockRequest")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDockRequest
	{


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiDockNodeSettings")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiDockNodeSettings
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiDockNodeSettings*")]
		public unsafe ImGuiDockNodeSettings* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiDockNodeSettings")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDockNodeSettings
	{


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiSettingsHandler")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiSettingsHandler
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiSettingsHandler*")]
		public unsafe ImGuiSettingsHandler* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiSettingsHandler")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiSettingsHandler
	{
		/// <summary>
		/// Short description stored in .ini file. Disallowed characters: '[' ']'<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TypeName")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* TypeName;

		/// <summary>
		/// == ImHashStr(TypeName)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TypeHash")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int TypeHash;

		/// <summary>
		/// Clear all settings data<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ClearAllFn")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiContext* ctx, ImGuiSettingsHandler* handler)*")]
		public unsafe void* ClearAllFn;

		/// <summary>
		/// Read: Called before reading (in registration order)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ReadInitFn")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiContext* ctx, ImGuiSettingsHandler* handler)*")]
		public unsafe void* ReadInitFn;

		/// <summary>
		/// Read: Called when entering into a new ini entry e.g. "[Window][Name]"<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ReadOpenFn")]
		[NativeName(NativeNameType.Type, "void* (*)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, const char* name)*")]
		public unsafe void* ReadOpenFn;

		/// <summary>
		/// Read: Called for every line of text within an ini entry<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ReadLineFn")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, void* entry, const char* line)*")]
		public unsafe void* ReadLineFn;

		/// <summary>
		/// Read: Called after reading (in registration order)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ApplyAllFn")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiContext* ctx, ImGuiSettingsHandler* handler)*")]
		public unsafe void* ApplyAllFn;

		/// <summary>
		/// Write: Output every entries into 'out_buf'<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WriteAllFn")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGuiTextBuffer* out_buf)*")]
		public unsafe void* WriteAllFn;

		[NativeName(NativeNameType.Field, "UserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserData;



		[NativeName(NativeNameType.Func, "ImGuiSettingsHandler_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiSettingsHandler* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImChunkStream_ImGuiWindowSettings")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImChunkStreamImGuiWindowSettings
	{
		[NativeName(NativeNameType.Field, "Buf")]
		[NativeName(NativeNameType.Type, "ImVector_char")]
		public ImVectorChar Buf;


	}

	[NativeName(NativeNameType.StructOrClass, "ImChunkStream_ImGuiTableSettings")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImChunkStreamImGuiTableSettings
	{
		[NativeName(NativeNameType.Field, "Buf")]
		[NativeName(NativeNameType.Type, "ImVector_char")]
		public ImVectorChar Buf;


	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiContextHook")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiContextHook
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiContextHook*")]
		public unsafe ImGuiContextHook* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiContextHook")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiContextHook
	{
		/// <summary>
		/// A unique ID assigned by AddContextHook()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HookId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int HookId;

		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "ImGuiContextHookType")]
		public ImGuiContextHookType Type;
		[NativeName(NativeNameType.Field, "Owner")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int Owner;
		[NativeName(NativeNameType.Field, "Callback")]
		[NativeName(NativeNameType.Type, "ImGuiContextHookCallback")]
		public unsafe void* Callback;
		[NativeName(NativeNameType.Field, "UserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserData;



		[NativeName(NativeNameType.Func, "ImGuiContextHook_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiContextHook* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// Helper: ImGuiTextIndex&lt;&gt;<br/>
	/// Maintain a line index for a text buffer. This is a strong candidate to be moved into the public API.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTextIndex")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTextIndex
	{
		[NativeName(NativeNameType.Field, "LineOffsets")]
		[NativeName(NativeNameType.Type, "ImVector_int")]
		public ImVectorInt LineOffsets;
		/// <summary>
		/// Because we don't own text buffer we need to maintain EndOffset (may bake in LineOffsets?)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "EndOffset")]
		[NativeName(NativeNameType.Type, "int")]
		public int EndOffset;



		[NativeName(NativeNameType.Func, "ImGuiTextIndex_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "old_size")] [NativeName(NativeNameType.Type, "int")] int oldSize, [NativeName(NativeNameType.Param, "new_size")] [NativeName(NativeNameType.Type, "int")] int newSize)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				ImGui.appendNative(@this, baseValue, oldSize, newSize);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ref byte baseValue, [NativeName(NativeNameType.Param, "old_size")] [NativeName(NativeNameType.Type, "int")] int oldSize, [NativeName(NativeNameType.Param, "new_size")] [NativeName(NativeNameType.Type, "int")] int newSize)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					ImGui.appendNative(@this, (byte*)pbaseValue, oldSize, newSize);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void append([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] string baseValue, [NativeName(NativeNameType.Param, "old_size")] [NativeName(NativeNameType.Type, "int")] int oldSize, [NativeName(NativeNameType.Param, "new_size")] [NativeName(NativeNameType.Type, "int")] int newSize)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.appendNative(@this, pStr0, oldSize, newSize);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void clear()
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				ImGui.clearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* get_line_begin([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				byte* ret = ImGui.get_line_beginNative(@this, baseValue, n);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string get_line_beginS([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImGui.get_line_beginNative(@this, baseValue, n));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* get_line_begin([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ref byte baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					byte* ret = ImGui.get_line_beginNative(@this, (byte*)pbaseValue, n);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string get_line_beginS([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ref byte baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					string ret = Utils.DecodeStringUTF8(ImGui.get_line_beginNative(@this, (byte*)pbaseValue, n));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* get_line_begin([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] string baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = ImGui.get_line_beginNative(@this, pStr0, n);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string get_line_beginS([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] string baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(ImGui.get_line_beginNative(@this, pStr0, n));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* get_line_end([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				byte* ret = ImGui.get_line_endNative(@this, baseValue, n);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string get_line_endS([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImGui.get_line_endNative(@this, baseValue, n));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* get_line_end([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ref byte baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					byte* ret = ImGui.get_line_endNative(@this, (byte*)pbaseValue, n);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string get_line_endS([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ref byte baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					string ret = Utils.DecodeStringUTF8(ImGui.get_line_endNative(@this, (byte*)pbaseValue, n));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* get_line_end([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] string baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = ImGui.get_line_endNative(@this, pStr0, n);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public unsafe string get_line_endS([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] string baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(ImGui.get_line_endNative(@this, pStr0, n));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextIndex_size")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int size()
		{
			fixed (ImGuiTextIndex* @this = &this)
			{
				int ret = ImGui.sizeNative(@this);
				return ret;
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_int")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorInt
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "int*")]
		public unsafe int* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiMetricsConfig")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiMetricsConfig
	{
		[NativeName(NativeNameType.Field, "ShowDebugLog")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ShowDebugLog;
		[NativeName(NativeNameType.Field, "ShowStackTool")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ShowStackTool;
		[NativeName(NativeNameType.Field, "ShowWindowsRects")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ShowWindowsRects;
		[NativeName(NativeNameType.Field, "ShowWindowsBeginOrder")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ShowWindowsBeginOrder;
		[NativeName(NativeNameType.Field, "ShowTablesRects")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ShowTablesRects;
		[NativeName(NativeNameType.Field, "ShowDrawCmdMesh")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ShowDrawCmdMesh;
		[NativeName(NativeNameType.Field, "ShowDrawCmdBoundingBoxes")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ShowDrawCmdBoundingBoxes;
		[NativeName(NativeNameType.Field, "ShowAtlasTintedWithTextColor")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ShowAtlasTintedWithTextColor;
		[NativeName(NativeNameType.Field, "ShowDockingNodes")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ShowDockingNodes;
		[NativeName(NativeNameType.Field, "ShowWindowsRectsType")]
		[NativeName(NativeNameType.Type, "int")]
		public int ShowWindowsRectsType;
		[NativeName(NativeNameType.Field, "ShowTablesRectsType")]
		[NativeName(NativeNameType.Type, "int")]
		public int ShowTablesRectsType;


	}

	/// <summary>
	/// State for Stack tool queries<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiStackTool")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiStackTool
	{
		[NativeName(NativeNameType.Field, "LastActiveFrame")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastActiveFrame;
		/// <summary>
		/// -1: query stack and resize Results, &gt;= 0: individual stack level<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "StackLevel")]
		[NativeName(NativeNameType.Type, "int")]
		public int StackLevel;

		/// <summary>
		/// ID to query details for<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "QueryId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int QueryId;

		[NativeName(NativeNameType.Field, "Results")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiStackLevelInfo")]
		public ImVectorImGuiStackLevelInfo Results;
		[NativeName(NativeNameType.Field, "CopyToClipboardOnCtrlC")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte CopyToClipboardOnCtrlC;
		[NativeName(NativeNameType.Field, "CopyToClipboardLastTime")]
		[NativeName(NativeNameType.Type, "float")]
		public float CopyToClipboardLastTime;



		[NativeName(NativeNameType.Func, "ImGuiStackTool_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiStackTool* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiStackLevelInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiStackLevelInfo
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiStackLevelInfo*")]
		public unsafe ImGuiStackLevelInfo* Data;


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiStackLevelInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiStackLevelInfo
	{
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;
		/// <summary>
		/// &gt;= 1: Query in progress<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "QueryFrameCount")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public sbyte QueryFrameCount;

		/// <summary>
		/// Obtained result from DebugHookIdInfo()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "QuerySuccess")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte QuerySuccess;

		[NativeName(NativeNameType.Field, "DataType")]
		[NativeName(NativeNameType.Type, "ImGuiDataType")]
		public ImGuiDataType DataType;
		/// <summary>
		/// Arbitrarily sized buffer to hold a result (FIXME: could replace Results[] with a chunk stream?) FIXME: Now that we added CTRL+C this should be fixed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Desc")]
		[NativeName(NativeNameType.Type, "char[57]")]
		public byte Desc_0;
		public byte Desc_1;
		public byte Desc_2;
		public byte Desc_3;
		public byte Desc_4;
		public byte Desc_5;
		public byte Desc_6;
		public byte Desc_7;
		public byte Desc_8;
		public byte Desc_9;
		public byte Desc_10;
		public byte Desc_11;
		public byte Desc_12;
		public byte Desc_13;
		public byte Desc_14;
		public byte Desc_15;
		public byte Desc_16;
		public byte Desc_17;
		public byte Desc_18;
		public byte Desc_19;
		public byte Desc_20;
		public byte Desc_21;
		public byte Desc_22;
		public byte Desc_23;
		public byte Desc_24;
		public byte Desc_25;
		public byte Desc_26;
		public byte Desc_27;
		public byte Desc_28;
		public byte Desc_29;
		public byte Desc_30;
		public byte Desc_31;
		public byte Desc_32;
		public byte Desc_33;
		public byte Desc_34;
		public byte Desc_35;
		public byte Desc_36;
		public byte Desc_37;
		public byte Desc_38;
		public byte Desc_39;
		public byte Desc_40;
		public byte Desc_41;
		public byte Desc_42;
		public byte Desc_43;
		public byte Desc_44;
		public byte Desc_45;
		public byte Desc_46;
		public byte Desc_47;
		public byte Desc_48;
		public byte Desc_49;
		public byte Desc_50;
		public byte Desc_51;
		public byte Desc_52;
		public byte Desc_53;
		public byte Desc_54;
		public byte Desc_55;
		public byte Desc_56;




		[NativeName(NativeNameType.Func, "ImGuiStackLevelInfo_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiStackLevelInfo* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// Shared state of InputText(), passed as an argument to your callback when a ImGuiInputTextFlags_Callback* flag is used.<br/>
	/// The callback function should return 0 by default.<br/>
	/// Callbacks (follow a flag name and see comments in ImGuiInputTextFlags_ declarations for more details)<br/>
	/// - ImGuiInputTextFlags_CallbackEdit:        Callback on buffer edit (note that InputText() already returns true on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active)<br/>
	/// - ImGuiInputTextFlags_CallbackAlways:      Callback on each iteration<br/>
	/// - ImGuiInputTextFlags_CallbackCompletion:  Callback on pressing TAB<br/>
	/// - ImGuiInputTextFlags_CallbackHistory:     Callback on pressing UpDown arrows<br/>
	/// - ImGuiInputTextFlags_CallbackCharFilter:  Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.<br/>
	/// - ImGuiInputTextFlags_CallbackResize:      Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiInputTextCallbackData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputTextCallbackData
	{
		/// <summary>
		/// Parent UI context<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Ctx")]
		[NativeName(NativeNameType.Type, "ImGuiContext*")]
		public unsafe ImGuiContext* Ctx;

		/// <summary>
		/// One ImGuiInputTextFlags_Callback*     Read-only<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "EventFlag")]
		[NativeName(NativeNameType.Type, "ImGuiInputTextFlags")]
		public ImGuiInputTextFlags EventFlag;

		/// <summary>
		/// What user passed to InputText()       Read-only<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiInputTextFlags")]
		public ImGuiInputTextFlags Flags;

		/// <summary>
		/// What user passed to InputText()       Read-only<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "UserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserData;

		/// <summary>
		/// Arguments for the different callback events<br/>
		/// - To modify the text buffer in a callback, prefer using the InsertChars()  DeleteChars() function. InsertChars() will take care of calling the resize callback if necessary.<br/>
		/// - If you know your edits are not going to resize the underlying buffer allocation, you may modify the contents of 'Buf[]' directly. You need to update 'BufTextLen' accordingly (0 &lt;= BufTextLen &lt; BufSize) and set 'BufDirty'' to true so InputText can update its internal state. Character input                       Read-write    [CharFilter] Replace character with another one, or set to zero to drop. return 1 is equivalent to setting EventChar=0;<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "EventChar")]
		[NativeName(NativeNameType.Type, "ImWchar")]
		public char EventChar;

		/// <summary>
		/// Key pressed (UpDownTAB)             Read-only     [Completion,History]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "EventKey")]
		[NativeName(NativeNameType.Type, "ImGuiKey")]
		public ImGuiKey EventKey;

		/// <summary>
		/// Text buffer                           Read-write    [Resize] Can replace pointer  [Completion,History,Always] Only write to pointed data, don't replace the actual pointer!<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Buf")]
		[NativeName(NativeNameType.Type, "char*")]
		public unsafe byte* Buf;

		/// <summary>
		/// Text length (in bytes)                Read-write    [Resize,Completion,History,Always] Exclude zero-terminator storage. In C land: == strlen(some_text), in C++ land: string.length()<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BufTextLen")]
		[NativeName(NativeNameType.Type, "int")]
		public int BufTextLen;

		/// <summary>
		/// Buffer size (in bytes) = capacity+1   Read-only     [Resize,Completion,History,Always] Include zero-terminator storage. In C land == ARRAYSIZE(my_char_array), in C++ land: string.capacity()+1<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BufSize")]
		[NativeName(NativeNameType.Type, "int")]
		public int BufSize;

		/// <summary>
		/// Set if you modify BufBufTextLen!     Write         [Completion,History,Always]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BufDirty")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte BufDirty;

		/// <summary>
		/// Read-write    [Completion,History,Always]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CursorPos")]
		[NativeName(NativeNameType.Type, "int")]
		public int CursorPos;

		/// <summary>
		/// Read-write    [Completion,History,Always] == to SelectionEnd when no selection)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SelectionStart")]
		[NativeName(NativeNameType.Type, "int")]
		public int SelectionStart;

		/// <summary>
		/// Read-write    [Completion,History,Always]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SelectionEnd")]
		[NativeName(NativeNameType.Type, "int")]
		public int SelectionEnd;




		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_ClearSelection")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearSelection()
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.ClearSelectionNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_DeleteChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void DeleteChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pOS, [NativeName(NativeNameType.Param, "bytes_count")] [NativeName(NativeNameType.Type, "int")] int bytesCount)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.DeleteCharsNative(@this, pOS, bytesCount);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_HasSelection")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool HasSelection()
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				byte ret = ImGui.HasSelectionNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pOS, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.InsertCharsNative(@this, pOS, tEXT, textEnd);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pOS, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* tEXT)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.InsertCharsNative(@this, pOS, tEXT, (byte*)(default));
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pOS, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				fixed (byte* ptEXT = &tEXT)
				{
					ImGui.InsertCharsNative(@this, pOS, (byte*)ptEXT, textEnd);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pOS, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte tEXT)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				fixed (byte* ptEXT = &tEXT)
				{
					ImGui.InsertCharsNative(@this, pOS, (byte*)ptEXT, (byte*)(default));
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pOS, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (tEXT != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(tEXT);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(tEXT, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.InsertCharsNative(@this, pOS, pStr0, textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pOS, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string tEXT)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (tEXT != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(tEXT);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(tEXT, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.InsertCharsNative(@this, pOS, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pOS, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.InsertCharsNative(@this, pOS, tEXT, (byte*)ptextEnd);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pOS, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.InsertCharsNative(@this, pOS, tEXT, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pOS, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				fixed (byte* ptEXT = &tEXT)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.InsertCharsNative(@this, pOS, (byte*)ptEXT, (byte*)ptextEnd);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pOS, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (tEXT != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(tEXT);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(tEXT, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.InsertCharsNative(@this, pOS, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_SelectAll")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SelectAll()
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.SelectAllNative(@this);
			}
		}

	}

	/// <summary>
	/// Helper: Execute a block of code at maximum once a frame. Convenient if you want to quickly create a UI within deep-nested code that runs multiple times every frame.<br/>
	/// Usage: static ImGuiOnceUponAFrame oaf; if (oaf) ImGui::Text("This will be called only once per frame");<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiOnceUponAFrame")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiOnceUponAFrame
	{
		[NativeName(NativeNameType.Field, "RefFrame")]
		[NativeName(NativeNameType.Type, "int")]
		public int RefFrame;



		[NativeName(NativeNameType.Func, "ImGuiOnceUponAFrame_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiOnceUponAFrame* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// Helper: Parse and apply text filters. In format "aaaaa[,bbbb][,ccccc]"<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTextFilter")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTextFilter
	{
		[NativeName(NativeNameType.Field, "InputBuf")]
		[NativeName(NativeNameType.Type, "char[256]")]
		public byte InputBuf_0;
		public byte InputBuf_1;
		public byte InputBuf_2;
		public byte InputBuf_3;
		public byte InputBuf_4;
		public byte InputBuf_5;
		public byte InputBuf_6;
		public byte InputBuf_7;
		public byte InputBuf_8;
		public byte InputBuf_9;
		public byte InputBuf_10;
		public byte InputBuf_11;
		public byte InputBuf_12;
		public byte InputBuf_13;
		public byte InputBuf_14;
		public byte InputBuf_15;
		public byte InputBuf_16;
		public byte InputBuf_17;
		public byte InputBuf_18;
		public byte InputBuf_19;
		public byte InputBuf_20;
		public byte InputBuf_21;
		public byte InputBuf_22;
		public byte InputBuf_23;
		public byte InputBuf_24;
		public byte InputBuf_25;
		public byte InputBuf_26;
		public byte InputBuf_27;
		public byte InputBuf_28;
		public byte InputBuf_29;
		public byte InputBuf_30;
		public byte InputBuf_31;
		public byte InputBuf_32;
		public byte InputBuf_33;
		public byte InputBuf_34;
		public byte InputBuf_35;
		public byte InputBuf_36;
		public byte InputBuf_37;
		public byte InputBuf_38;
		public byte InputBuf_39;
		public byte InputBuf_40;
		public byte InputBuf_41;
		public byte InputBuf_42;
		public byte InputBuf_43;
		public byte InputBuf_44;
		public byte InputBuf_45;
		public byte InputBuf_46;
		public byte InputBuf_47;
		public byte InputBuf_48;
		public byte InputBuf_49;
		public byte InputBuf_50;
		public byte InputBuf_51;
		public byte InputBuf_52;
		public byte InputBuf_53;
		public byte InputBuf_54;
		public byte InputBuf_55;
		public byte InputBuf_56;
		public byte InputBuf_57;
		public byte InputBuf_58;
		public byte InputBuf_59;
		public byte InputBuf_60;
		public byte InputBuf_61;
		public byte InputBuf_62;
		public byte InputBuf_63;
		public byte InputBuf_64;
		public byte InputBuf_65;
		public byte InputBuf_66;
		public byte InputBuf_67;
		public byte InputBuf_68;
		public byte InputBuf_69;
		public byte InputBuf_70;
		public byte InputBuf_71;
		public byte InputBuf_72;
		public byte InputBuf_73;
		public byte InputBuf_74;
		public byte InputBuf_75;
		public byte InputBuf_76;
		public byte InputBuf_77;
		public byte InputBuf_78;
		public byte InputBuf_79;
		public byte InputBuf_80;
		public byte InputBuf_81;
		public byte InputBuf_82;
		public byte InputBuf_83;
		public byte InputBuf_84;
		public byte InputBuf_85;
		public byte InputBuf_86;
		public byte InputBuf_87;
		public byte InputBuf_88;
		public byte InputBuf_89;
		public byte InputBuf_90;
		public byte InputBuf_91;
		public byte InputBuf_92;
		public byte InputBuf_93;
		public byte InputBuf_94;
		public byte InputBuf_95;
		public byte InputBuf_96;
		public byte InputBuf_97;
		public byte InputBuf_98;
		public byte InputBuf_99;
		public byte InputBuf_100;
		public byte InputBuf_101;
		public byte InputBuf_102;
		public byte InputBuf_103;
		public byte InputBuf_104;
		public byte InputBuf_105;
		public byte InputBuf_106;
		public byte InputBuf_107;
		public byte InputBuf_108;
		public byte InputBuf_109;
		public byte InputBuf_110;
		public byte InputBuf_111;
		public byte InputBuf_112;
		public byte InputBuf_113;
		public byte InputBuf_114;
		public byte InputBuf_115;
		public byte InputBuf_116;
		public byte InputBuf_117;
		public byte InputBuf_118;
		public byte InputBuf_119;
		public byte InputBuf_120;
		public byte InputBuf_121;
		public byte InputBuf_122;
		public byte InputBuf_123;
		public byte InputBuf_124;
		public byte InputBuf_125;
		public byte InputBuf_126;
		public byte InputBuf_127;
		public byte InputBuf_128;
		public byte InputBuf_129;
		public byte InputBuf_130;
		public byte InputBuf_131;
		public byte InputBuf_132;
		public byte InputBuf_133;
		public byte InputBuf_134;
		public byte InputBuf_135;
		public byte InputBuf_136;
		public byte InputBuf_137;
		public byte InputBuf_138;
		public byte InputBuf_139;
		public byte InputBuf_140;
		public byte InputBuf_141;
		public byte InputBuf_142;
		public byte InputBuf_143;
		public byte InputBuf_144;
		public byte InputBuf_145;
		public byte InputBuf_146;
		public byte InputBuf_147;
		public byte InputBuf_148;
		public byte InputBuf_149;
		public byte InputBuf_150;
		public byte InputBuf_151;
		public byte InputBuf_152;
		public byte InputBuf_153;
		public byte InputBuf_154;
		public byte InputBuf_155;
		public byte InputBuf_156;
		public byte InputBuf_157;
		public byte InputBuf_158;
		public byte InputBuf_159;
		public byte InputBuf_160;
		public byte InputBuf_161;
		public byte InputBuf_162;
		public byte InputBuf_163;
		public byte InputBuf_164;
		public byte InputBuf_165;
		public byte InputBuf_166;
		public byte InputBuf_167;
		public byte InputBuf_168;
		public byte InputBuf_169;
		public byte InputBuf_170;
		public byte InputBuf_171;
		public byte InputBuf_172;
		public byte InputBuf_173;
		public byte InputBuf_174;
		public byte InputBuf_175;
		public byte InputBuf_176;
		public byte InputBuf_177;
		public byte InputBuf_178;
		public byte InputBuf_179;
		public byte InputBuf_180;
		public byte InputBuf_181;
		public byte InputBuf_182;
		public byte InputBuf_183;
		public byte InputBuf_184;
		public byte InputBuf_185;
		public byte InputBuf_186;
		public byte InputBuf_187;
		public byte InputBuf_188;
		public byte InputBuf_189;
		public byte InputBuf_190;
		public byte InputBuf_191;
		public byte InputBuf_192;
		public byte InputBuf_193;
		public byte InputBuf_194;
		public byte InputBuf_195;
		public byte InputBuf_196;
		public byte InputBuf_197;
		public byte InputBuf_198;
		public byte InputBuf_199;
		public byte InputBuf_200;
		public byte InputBuf_201;
		public byte InputBuf_202;
		public byte InputBuf_203;
		public byte InputBuf_204;
		public byte InputBuf_205;
		public byte InputBuf_206;
		public byte InputBuf_207;
		public byte InputBuf_208;
		public byte InputBuf_209;
		public byte InputBuf_210;
		public byte InputBuf_211;
		public byte InputBuf_212;
		public byte InputBuf_213;
		public byte InputBuf_214;
		public byte InputBuf_215;
		public byte InputBuf_216;
		public byte InputBuf_217;
		public byte InputBuf_218;
		public byte InputBuf_219;
		public byte InputBuf_220;
		public byte InputBuf_221;
		public byte InputBuf_222;
		public byte InputBuf_223;
		public byte InputBuf_224;
		public byte InputBuf_225;
		public byte InputBuf_226;
		public byte InputBuf_227;
		public byte InputBuf_228;
		public byte InputBuf_229;
		public byte InputBuf_230;
		public byte InputBuf_231;
		public byte InputBuf_232;
		public byte InputBuf_233;
		public byte InputBuf_234;
		public byte InputBuf_235;
		public byte InputBuf_236;
		public byte InputBuf_237;
		public byte InputBuf_238;
		public byte InputBuf_239;
		public byte InputBuf_240;
		public byte InputBuf_241;
		public byte InputBuf_242;
		public byte InputBuf_243;
		public byte InputBuf_244;
		public byte InputBuf_245;
		public byte InputBuf_246;
		public byte InputBuf_247;
		public byte InputBuf_248;
		public byte InputBuf_249;
		public byte InputBuf_250;
		public byte InputBuf_251;
		public byte InputBuf_252;
		public byte InputBuf_253;
		public byte InputBuf_254;
		public byte InputBuf_255;
		[NativeName(NativeNameType.Field, "Filters")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiTextRange")]
		public ImVectorImGuiTextRange Filters;
		[NativeName(NativeNameType.Field, "CountGrep")]
		[NativeName(NativeNameType.Type, "int")]
		public int CountGrep;



		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Build")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Build()
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				ImGui.BuildNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>		/// Helper calling InputText+Build		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Draw([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* lABEL, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float wIDTH)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte ret = ImGui.DrawNative(@this, lABEL, wIDTH);
				return ret != 0;
			}
		}

		/// <summary>		/// Helper calling InputText+Build		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Draw([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* lABEL)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte ret = ImGui.DrawNative(@this, lABEL, (float)(0.0f));
				return ret != 0;
			}
		}

		/// <summary>		/// Helper calling InputText+Build		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Draw()
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				bool ret = ImGui.Draw(@this, (string)"Filter(inc,-exc)", (float)(0.0f));
				return ret;
			}
		}

		/// <summary>		/// Helper calling InputText+Build		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Draw([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float wIDTH)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				bool ret = ImGui.Draw(@this, (string)"Filter(inc,-exc)", wIDTH);
				return ret;
			}
		}

		/// <summary>		/// Helper calling InputText+Build		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Draw([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte lABEL, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float wIDTH)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				fixed (byte* plABEL = &lABEL)
				{
					byte ret = ImGui.DrawNative(@this, (byte*)plABEL, wIDTH);
					return ret != 0;
				}
			}
		}

		/// <summary>		/// Helper calling InputText+Build		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Draw([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte lABEL)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				fixed (byte* plABEL = &lABEL)
				{
					byte ret = ImGui.DrawNative(@this, (byte*)plABEL, (float)(0.0f));
					return ret != 0;
				}
			}
		}

		/// <summary>		/// Helper calling InputText+Build		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Draw([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string lABEL, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float wIDTH)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (lABEL != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(lABEL);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(lABEL, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = ImGui.DrawNative(@this, pStr0, wIDTH);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>		/// Helper calling InputText+Build		/// </summary>		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Draw([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string lABEL)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (lABEL != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(lABEL);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(lABEL, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = ImGui.DrawNative(@this, pStr0, (float)(0.0f));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_IsActive")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsActive()
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte ret = ImGui.IsActiveNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool PassFilter([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte ret = ImGui.PassFilterNative(@this, tEXT, textEnd);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool PassFilter([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* tEXT)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte ret = ImGui.PassFilterNative(@this, tEXT, (byte*)(default));
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool PassFilter([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				fixed (byte* ptEXT = &tEXT)
				{
					byte ret = ImGui.PassFilterNative(@this, (byte*)ptEXT, textEnd);
					return ret != 0;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool PassFilter([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte tEXT)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				fixed (byte* ptEXT = &tEXT)
				{
					byte ret = ImGui.PassFilterNative(@this, (byte*)ptEXT, (byte*)(default));
					return ret != 0;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool PassFilter([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (tEXT != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(tEXT);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(tEXT, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = ImGui.PassFilterNative(@this, pStr0, textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool PassFilter([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string tEXT)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (tEXT != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(tEXT);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(tEXT, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = ImGui.PassFilterNative(@this, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool PassFilter([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					byte ret = ImGui.PassFilterNative(@this, tEXT, (byte*)ptextEnd);
					return ret != 0;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool PassFilter([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = ImGui.PassFilterNative(@this, tEXT, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool PassFilter([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				fixed (byte* ptEXT = &tEXT)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						byte ret = ImGui.PassFilterNative(@this, (byte*)ptEXT, (byte*)ptextEnd);
						return ret != 0;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool PassFilter([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string tEXT, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (tEXT != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(tEXT);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(tEXT, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = ImGui.PassFilterNative(@this, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_ImGuiTextRange")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiTextRange
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImGuiTextRange*")]
		public unsafe ImGuiTextRange* Data;


	}

	/// <summary>
	/// [Internal]<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTextRange")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTextRange
	{
		[NativeName(NativeNameType.Field, "b")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* B;
		[NativeName(NativeNameType.Field, "e")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* E;



		[NativeName(NativeNameType.Func, "ImGuiTextRange_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTextRange* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextRange_empty")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool empty()
		{
			fixed (ImGuiTextRange* @this = &this)
			{
				byte ret = ImGui.emptyNative(@this);
				return ret != 0;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextRange_split")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void split([NativeName(NativeNameType.Param, "separator")] [NativeName(NativeNameType.Type, "char")] byte sEPARATOR, [NativeName(NativeNameType.Param, "out")] [NativeName(NativeNameType.Type, "ImVector_ImGuiTextRange*")] ImVectorImGuiTextRange* output)
		{
			fixed (ImGuiTextRange* @this = &this)
			{
				ImGui.splitNative(@this, sEPARATOR, output);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTextRange_split")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void split([NativeName(NativeNameType.Param, "separator")] [NativeName(NativeNameType.Type, "char")] byte sEPARATOR, [NativeName(NativeNameType.Param, "out")] [NativeName(NativeNameType.Type, "ImVector_ImGuiTextRange*")] ref ImVectorImGuiTextRange output)
		{
			fixed (ImGuiTextRange* @this = &this)
			{
				fixed (ImVectorImGuiTextRange* poutput = &output)
				{
					ImGui.splitNative(@this, sEPARATOR, (ImVectorImGuiTextRange*)poutput);
				}
			}
		}

	}

	/// <summary>
	/// Helper: ImBitVector<br/>
	/// Store 1-bit per value.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImBitVector")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImBitVector
	{
		[NativeName(NativeNameType.Field, "Storage")]
		[NativeName(NativeNameType.Type, "ImVector_ImU32")]
		public ImVectorImU32 Storage;


		[NativeName(NativeNameType.Func, "ImBitVector_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImBitVector* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImBitVector_ClearBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearBit([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImBitVector* @this = &this)
			{
				ImGui.ClearBitNative(@this, n);
			}
		}

		[NativeName(NativeNameType.Func, "ImBitVector_Create")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Create([NativeName(NativeNameType.Param, "sz")] [NativeName(NativeNameType.Type, "int")] int sZ)
		{
			fixed (ImBitVector* @this = &this)
			{
				ImGui.CreateNative(@this, sZ);
			}
		}

		[NativeName(NativeNameType.Func, "ImBitVector_SetBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetBit([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImBitVector* @this = &this)
			{
				ImGui.SetBitNative(@this, n);
			}
		}

		[NativeName(NativeNameType.Func, "ImBitVector_TestBit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool TestBit([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImBitVector* @this = &this)
			{
				byte ret = ImGui.TestBitNative(@this, n);
				return ret != 0;
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiDataVarInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDataVarInfo
	{
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "ImGuiDataType")]
		public ImGuiDataType Type;
		/// <summary>
		/// 1+<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Count")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint Count;

		/// <summary>
		/// Offset in parent structure<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Offset")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint Offset;



		[NativeName(NativeNameType.Func, "ImGuiDataVarInfo_GetVarPtr")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public unsafe void* GetVarPtr([NativeName(NativeNameType.Param, "parent")] [NativeName(NativeNameType.Type, "void*")] void* pARENT)
		{
			fixed (ImGuiDataVarInfo* @this = &this)
			{
				void* ret = ImGui.GetVarPtrNative(@this, pARENT);
				return ret;
			}
		}

	}

	/// <summary>
	/// Type information associated to one ImGuiDataType. Retrieve with DataTypeGetInfo().<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiDataTypeInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDataTypeInfo
	{
		/// <summary>
		/// Size in bytes<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "size_t")]
		public nuint Size;

		/// <summary>
		/// Short descriptive name for the type, for debugging<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Name;

		/// <summary>
		/// Default printf format for the type<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PrintFmt")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* PrintFmt;

		/// <summary>
		/// Default scanf format for the type<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ScanFmt")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* ScanFmt;



	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiInputTextDeactivateData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputTextDeactivateData
	{


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiLocEntry")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiLocEntry
	{
		[NativeName(NativeNameType.Field, "Key")]
		[NativeName(NativeNameType.Type, "ImGuiLocKey")]
		public ImGuiLocKey Key;
		[NativeName(NativeNameType.Field, "Text")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Text;


	}

	/// <summary>
	/// This is designed to be stored in a single ImChunkStream (1 header followed by N ImGuiTableColumnSettings, etc.)<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTableSettings")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableSettings
	{
		/// <summary>
		/// Set to 0 to invalidatedelete the setting<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;

		/// <summary>
		/// Indicate data we want to save using the ResizableReorderableSortableHideable flags (could be using its own flags..)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SaveFlags")]
		[NativeName(NativeNameType.Type, "ImGuiTableFlags")]
		public ImGuiTableFlags SaveFlags;

		/// <summary>
		/// Reference scale to be able to rescale columns on fontdpi changes.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RefScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float RefScale;

		[NativeName(NativeNameType.Field, "ColumnsCount")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte ColumnsCount;
		/// <summary>
		/// Maximum number of columns this settings instance can store, we can recycle a settings instance with lower number of columns but not higher<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ColumnsCountMax")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte ColumnsCountMax;

		/// <summary>
		/// Set when loaded from .ini data (to enable mergingloading .ini data into an already running context)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WantApply")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantApply;




		[NativeName(NativeNameType.Func, "ImGuiTableSettings_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTableSettings* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiTableSettings_GetColumnSettings")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableColumnSettings*")]
		public unsafe ImGuiTableColumnSettings* GetColumnSettings()
		{
			fixed (ImGuiTableSettings* @this = &this)
			{
				ImGuiTableColumnSettings* ret = ImGui.GetColumnSettingsNative(@this);
				return ret;
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiTableColumnsSettings")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableColumnsSettings
	{


	}

	/// <summary>
	/// Windows data saved in imgui.ini file<br/>
	/// Because we never destroy or rename ImGuiWindowSettings, we can store the names in a separate buffer easily.<br/>
	/// (this is designed to be stored in a ImChunkStream buffer, with the variable-length Name following our structure)<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiWindowSettings")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiWindowSettings
	{
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ID;
		/// <summary>
		/// NB: Settings position are stored RELATIVE to the viewport! Whereas runtime ones are absolute positions.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Pos")]
		[NativeName(NativeNameType.Type, "ImVec2ih")]
		public ImVec2Ih Pos;

		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "ImVec2ih")]
		public ImVec2Ih Size;
		[NativeName(NativeNameType.Field, "ViewportPos")]
		[NativeName(NativeNameType.Type, "ImVec2ih")]
		public ImVec2Ih ViewportPos;
		[NativeName(NativeNameType.Field, "ViewportId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ViewportId;
		/// <summary>
		/// ID of last known DockNode (even if the DockNode is invisible because it has only 1 active window), or 0 if none.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DockId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int DockId;

		/// <summary>
		/// ID of window class if specified<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ClassId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int ClassId;

		/// <summary>
		/// Order of the last time the window was visible within its DockNode. This is used to reorder windows that are reappearing on the same frame. Same value between windows that were active and windows that were none are possible.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DockOrder")]
		[NativeName(NativeNameType.Type, "short")]
		public short DockOrder;

		[NativeName(NativeNameType.Field, "Collapsed")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Collapsed;
		/// <summary>
		/// Set when loaded from .ini data (to enable mergingloading .ini data into an already running context)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WantApply")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantApply;

		/// <summary>
		/// Set to invalidatedelete the settings entry<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "WantDelete")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantDelete;




		[NativeName(NativeNameType.Func, "ImGuiWindowSettings_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiWindowSettings* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindowSettings_GetName")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public unsafe byte* GetName()
		{
			fixed (ImGuiWindowSettings* @this = &this)
			{
				byte* ret = ImGui.GetNameNative(@this);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImGuiWindowSettings_GetName")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public unsafe string GetNameS()
		{
			fixed (ImGuiWindowSettings* @this = &this)
			{
				string ret = Utils.DecodeStringUTF8(ImGui.GetNameNative(@this));
				return ret;
			}
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ImVector_const_charPtr")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorConstCharPtr
	{
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;
		[NativeName(NativeNameType.Field, "Capacity")]
		[NativeName(NativeNameType.Type, "int")]
		public int Capacity;
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "const char**")]
		public unsafe byte** Data;


	}

	/// <summary>
	/// result of layout query<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "StbTexteditRow")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StbTexteditRow
	{
		/// <summary>
		/// starting x location, end x location (allows for align=right, etc)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "x0")]
		[NativeName(NativeNameType.Type, "float")]
		public float X0;

		/// <summary>
		/// starting x location, end x location (allows for align=right, etc)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "x1")]
		[NativeName(NativeNameType.Type, "float")]
		public float X1;

		/// <summary>
		/// position of baseline relative to previous row's baseline<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "baseline_y_delta")]
		[NativeName(NativeNameType.Type, "float")]
		public float BaselineYDelta;

		/// <summary>
		/// height of row above and below baseline<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ymin")]
		[NativeName(NativeNameType.Type, "float")]
		public float Ymin;

		/// <summary>
		/// height of row above and below baseline<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ymax")]
		[NativeName(NativeNameType.Type, "float")]
		public float Ymax;

		[NativeName(NativeNameType.Field, "num_chars")]
		[NativeName(NativeNameType.Type, "int")]
		public int NumChars;


	}

	[NativeName(NativeNameType.StructOrClass, "ImGuiDataTypeTempStorage")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDataTypeTempStorage
	{
		/// <summary>
		/// Can fit any data up to ImGuiDataType_COUNT<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "ImU8[8]")]
		public byte Data_0;
		public byte Data_1;
		public byte Data_2;
		public byte Data_3;
		public byte Data_4;
		public byte Data_5;
		public byte Data_6;
		public byte Data_7;



	}

	[NativeName(NativeNameType.StructOrClass, "ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImBitArrayImGuiKeyNamedKeyCOUNTLessImGuiKeyNamedKeyBEGIN
	{
		[NativeName(NativeNameType.Field, "Storage")]
		[NativeName(NativeNameType.Type, "ImU32[5]")]
		public uint Storage_0;
		public uint Storage_1;
		public uint Storage_2;
		public uint Storage_3;
		public uint Storage_4;


	}

	/// <summary>
	/// sizeof() ~ 12<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTableColumnSettings")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableColumnSettings
	{
		[NativeName(NativeNameType.Field, "WidthOrWeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float WidthOrWeight;
		[NativeName(NativeNameType.Field, "UserID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public int UserID;
		[NativeName(NativeNameType.Field, "Index")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte Index;
		[NativeName(NativeNameType.Field, "DisplayOrder")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte DisplayOrder;
		[NativeName(NativeNameType.Field, "SortOrder")]
		[NativeName(NativeNameType.Type, "ImGuiTableColumnIdx")]
		public sbyte SortOrder;
		[NativeName(NativeNameType.Field, "SortDirection")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte SortDirection;
		/// <summary>
		/// "Visible" in ini file<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IsEnabled")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte IsEnabled;

		[NativeName(NativeNameType.Field, "IsStretch")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte IsStretch;



		[NativeName(NativeNameType.Func, "ImGuiTableColumnSettings_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTableColumnSettings* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

}
