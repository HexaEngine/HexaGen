// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		public static bool DragFloat3( byte* label,  float* v,  byte* format)
		{
			byte ret = DragFloat3Native(label, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (int)(0));
			return ret != 0;
		}

		public static bool DragFloat3( byte* label,  float* v,  float vSpeed,  float vMin,  float vMax,  int flags)
		{
			bool ret = DragFloat3(label, v, vSpeed, vMin, vMax, (string)"%.3f", flags);
			return ret;
		}

		public static bool DragFloat3( byte* label,  float* v,  float vSpeed,  float vMin,  int flags)
		{
			bool ret = DragFloat3(label, v, vSpeed, vMin, (float)(0.0f), (string)"%.3f", flags);
			return ret;
		}

		public static bool DragFloat3( byte* label,  float* v,  float vSpeed,  int flags)
		{
			bool ret = DragFloat3(label, v, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
			return ret;
		}

		public static bool DragFloat3( byte* label,  float* v,  int flags)
		{
			bool ret = DragFloat3(label, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
			return ret;
		}

		public static bool DragFloat3( byte* label,  float* v,  float vSpeed,  float vMin,  byte* format,  int flags)
		{
			byte ret = DragFloat3Native(label, v, vSpeed, vMin, (float)(0.0f), format, flags);
			return ret != 0;
		}

		public static bool DragFloat3( byte* label,  float* v,  float vSpeed,  byte* format,  int flags)
		{
			byte ret = DragFloat3Native(label, v, vSpeed, (float)(0.0f), (float)(0.0f), format, flags);
			return ret != 0;
		}

		public static bool DragFloat3( byte* label,  float* v,  byte* format,  int flags)
		{
			byte ret = DragFloat3Native(label, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, flags);
			return ret != 0;
		}

		public static bool DragFloat3( byte* label,  ref float v,  float vSpeed,  float vMin,  float vMax,  byte* format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloat3Native(label, (float*)pv, vSpeed, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  float vSpeed,  float vMin,  float vMax,  byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloat3Native(label, (float*)pv, vSpeed, vMin, vMax, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  float vSpeed,  float vMin,  float vMax)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat3(label, (float*)pv, vSpeed, vMin, vMax, (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  float vSpeed,  float vMin)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat3(label, (float*)pv, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  float vSpeed)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat3(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool DragFloat3( byte* label,  ref float v)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat3(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  float vSpeed,  float vMin,  byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloat3Native(label, (float*)pv, vSpeed, vMin, (float)(0.0f), format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  float vSpeed,  byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloat3Native(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloat3Native(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  float vSpeed,  float vMin,  float vMax,  int flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat3(label, (float*)pv, vSpeed, vMin, vMax, (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  float vSpeed,  float vMin,  int flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat3(label, (float*)pv, vSpeed, vMin, (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  float vSpeed,  int flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat3(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  int flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat3(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  float vSpeed,  float vMin,  byte* format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloat3Native(label, (float*)pv, vSpeed, vMin, (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  float vSpeed,  byte* format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloat3Native(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  byte* format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloat3Native(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  float vSpeed,  float vMin,  float vMax,  byte* format,  int flags)
		{
			fixed (Vector3* pv = &v)
			{
				byte ret = DragFloat3Native(label, (float*)pv, vSpeed, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  float vSpeed,  float vMin,  float vMax,  byte* format)
		{
			fixed (Vector3* pv = &v)
			{
				byte ret = DragFloat3Native(label, (float*)pv, vSpeed, vMin, vMax, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  float vSpeed,  float vMin,  float vMax)
		{
			fixed (Vector3* pv = &v)
			{
				bool ret = DragFloat3(label, (float*)pv, vSpeed, vMin, vMax, (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  float vSpeed,  float vMin)
		{
			fixed (Vector3* pv = &v)
			{
				bool ret = DragFloat3(label, (float*)pv, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  float vSpeed)
		{
			fixed (Vector3* pv = &v)
			{
				bool ret = DragFloat3(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v)
		{
			fixed (Vector3* pv = &v)
			{
				bool ret = DragFloat3(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  float vSpeed,  float vMin,  byte* format)
		{
			fixed (Vector3* pv = &v)
			{
				byte ret = DragFloat3Native(label, (float*)pv, vSpeed, vMin, (float)(0.0f), format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  float vSpeed,  byte* format)
		{
			fixed (Vector3* pv = &v)
			{
				byte ret = DragFloat3Native(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  byte* format)
		{
			fixed (Vector3* pv = &v)
			{
				byte ret = DragFloat3Native(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  float vSpeed,  float vMin,  float vMax,  int flags)
		{
			fixed (Vector3* pv = &v)
			{
				bool ret = DragFloat3(label, (float*)pv, vSpeed, vMin, vMax, (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  float vSpeed,  float vMin,  int flags)
		{
			fixed (Vector3* pv = &v)
			{
				bool ret = DragFloat3(label, (float*)pv, vSpeed, vMin, (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  float vSpeed,  int flags)
		{
			fixed (Vector3* pv = &v)
			{
				bool ret = DragFloat3(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  int flags)
		{
			fixed (Vector3* pv = &v)
			{
				bool ret = DragFloat3(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  float vSpeed,  float vMin,  byte* format,  int flags)
		{
			fixed (Vector3* pv = &v)
			{
				byte ret = DragFloat3Native(label, (float*)pv, vSpeed, vMin, (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  float vSpeed,  byte* format,  int flags)
		{
			fixed (Vector3* pv = &v)
			{
				byte ret = DragFloat3Native(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  byte* format,  int flags)
		{
			fixed (Vector3* pv = &v)
			{
				byte ret = DragFloat3Native(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  float* v,  float vSpeed,  float vMin,  float vMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloat3Native(label, v, vSpeed, vMin, vMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  float* v,  float vSpeed,  float vMin,  float vMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloat3Native(label, v, vSpeed, vMin, vMax, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  float* v,  float vSpeed,  float vMin,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloat3Native(label, v, vSpeed, vMin, (float)(0.0f), (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  float* v,  float vSpeed,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloat3Native(label, v, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  float* v,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloat3Native(label, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  float* v,  float vSpeed,  float vMin,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloat3Native(label, v, vSpeed, vMin, (float)(0.0f), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  float* v,  float vSpeed,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloat3Native(label, v, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  float* v,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloat3Native(label, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  float* v,  float vSpeed,  float vMin,  float vMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloat3Native(label, v, vSpeed, vMin, vMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloat3( byte* label,  float* v,  float vSpeed,  float vMin,  float vMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloat3Native(label, v, vSpeed, vMin, vMax, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloat3( byte* label,  float* v,  float vSpeed,  float vMin,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloat3Native(label, v, vSpeed, vMin, (float)(0.0f), pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloat3( byte* label,  float* v,  float vSpeed,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloat3Native(label, v, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloat3( byte* label,  float* v,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloat3Native(label, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloat3( byte* label,  float* v,  float vSpeed,  float vMin,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloat3Native(label, v, vSpeed, vMin, (float)(0.0f), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloat3( byte* label,  float* v,  float vSpeed,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloat3Native(label, v, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloat3( byte* label,  float* v,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloat3Native(label, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloat3( byte* label,  ref float v,  float vSpeed,  float vMin,  float vMax,  ref byte format,  int flags)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloat3Native(label, (float*)pv, vSpeed, vMin, vMax, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  float vSpeed,  float vMin,  float vMax,  ref byte format)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloat3Native(label, (float*)pv, vSpeed, vMin, vMax, (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  float vSpeed,  float vMin,  ref byte format)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloat3Native(label, (float*)pv, vSpeed, vMin, (float)(0.0f), (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  float vSpeed,  ref byte format)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloat3Native(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  ref byte format)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloat3Native(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  float vSpeed,  float vMin,  ref byte format,  int flags)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloat3Native(label, (float*)pv, vSpeed, vMin, (float)(0.0f), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  float vSpeed,  ref byte format,  int flags)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloat3Native(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloat3( byte* label,  ref float v,  ref byte format,  int flags)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloat3Native(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  float vSpeed,  float vMin,  float vMax,  string format,  int flags)
		{
			fixed (Vector3* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloat3Native(label, (float*)pv, vSpeed, vMin, vMax, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  float vSpeed,  float vMin,  float vMax,  string format)
		{
			fixed (Vector3* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloat3Native(label, (float*)pv, vSpeed, vMin, vMax, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  float vSpeed,  float vMin,  string format)
		{
			fixed (Vector3* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloat3Native(label, (float*)pv, vSpeed, vMin, (float)(0.0f), pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  float vSpeed,  string format)
		{
			fixed (Vector3* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloat3Native(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  string format)
		{
			fixed (Vector3* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloat3Native(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  float vSpeed,  float vMin,  string format,  int flags)
		{
			fixed (Vector3* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloat3Native(label, (float*)pv, vSpeed, vMin, (float)(0.0f), pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  float vSpeed,  string format,  int flags)
		{
			fixed (Vector3* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloat3Native(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloat3( byte* label,  ref Vector3 v,  string format,  int flags)
		{
			fixed (Vector3* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloat3Native(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDragFloat4")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte DragFloat4Native(byte* label, float* v, float vSpeed, float vMin, float vMax, byte* format, int flags);

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  float vMin,  float vMax,  byte* format,  int flags)
		{
			byte ret = DragFloat4Native(label, v, vSpeed, vMin, vMax, format, flags);
			return ret != 0;
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  float vMin,  float vMax,  byte* format)
		{
			byte ret = DragFloat4Native(label, v, vSpeed, vMin, vMax, format, (int)(0));
			return ret != 0;
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  float vMin,  float vMax)
		{
			bool ret = DragFloat4(label, v, vSpeed, vMin, vMax, (string)"%.3f", (int)(0));
			return ret;
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  float vMin)
		{
			bool ret = DragFloat4(label, v, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (int)(0));
			return ret;
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed)
		{
			bool ret = DragFloat4(label, v, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (int)(0));
			return ret;
		}

		public static bool DragFloat4( byte* label,  float* v)
		{
			bool ret = DragFloat4(label, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (int)(0));
			return ret;
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  float vMin,  byte* format)
		{
			byte ret = DragFloat4Native(label, v, vSpeed, vMin, (float)(0.0f), format, (int)(0));
			return ret != 0;
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  byte* format)
		{
			byte ret = DragFloat4Native(label, v, vSpeed, (float)(0.0f), (float)(0.0f), format, (int)(0));
			return ret != 0;
		}

		public static bool DragFloat4( byte* label,  float* v,  byte* format)
		{
			byte ret = DragFloat4Native(label, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (int)(0));
			return ret != 0;
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  float vMin,  float vMax,  int flags)
		{
			bool ret = DragFloat4(label, v, vSpeed, vMin, vMax, (string)"%.3f", flags);
			return ret;
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  float vMin,  int flags)
		{
			bool ret = DragFloat4(label, v, vSpeed, vMin, (float)(0.0f), (string)"%.3f", flags);
			return ret;
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  int flags)
		{
			bool ret = DragFloat4(label, v, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
			return ret;
		}

		public static bool DragFloat4( byte* label,  float* v,  int flags)
		{
			bool ret = DragFloat4(label, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
			return ret;
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  float vMin,  byte* format,  int flags)
		{
			byte ret = DragFloat4Native(label, v, vSpeed, vMin, (float)(0.0f), format, flags);
			return ret != 0;
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  byte* format,  int flags)
		{
			byte ret = DragFloat4Native(label, v, vSpeed, (float)(0.0f), (float)(0.0f), format, flags);
			return ret != 0;
		}

		public static bool DragFloat4( byte* label,  float* v,  byte* format,  int flags)
		{
			byte ret = DragFloat4Native(label, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, flags);
			return ret != 0;
		}

		public static bool DragFloat4( byte* label,  ref float v,  float vSpeed,  float vMin,  float vMax,  byte* format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloat4Native(label, (float*)pv, vSpeed, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  float vSpeed,  float vMin,  float vMax,  byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloat4Native(label, (float*)pv, vSpeed, vMin, vMax, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  float vSpeed,  float vMin,  float vMax)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat4(label, (float*)pv, vSpeed, vMin, vMax, (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  float vSpeed,  float vMin)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat4(label, (float*)pv, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  float vSpeed)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat4(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool DragFloat4( byte* label,  ref float v)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat4(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  float vSpeed,  float vMin,  byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloat4Native(label, (float*)pv, vSpeed, vMin, (float)(0.0f), format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  float vSpeed,  byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloat4Native(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloat4Native(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  float vSpeed,  float vMin,  float vMax,  int flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat4(label, (float*)pv, vSpeed, vMin, vMax, (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  float vSpeed,  float vMin,  int flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat4(label, (float*)pv, vSpeed, vMin, (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  float vSpeed,  int flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat4(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  int flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat4(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  float vSpeed,  float vMin,  byte* format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloat4Native(label, (float*)pv, vSpeed, vMin, (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  float vSpeed,  byte* format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloat4Native(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  byte* format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloat4Native(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  float vSpeed,  float vMin,  float vMax,  byte* format,  int flags)
		{
			fixed (Vector4* pv = &v)
			{
				byte ret = DragFloat4Native(label, (float*)pv, vSpeed, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  float vSpeed,  float vMin,  float vMax,  byte* format)
		{
			fixed (Vector4* pv = &v)
			{
				byte ret = DragFloat4Native(label, (float*)pv, vSpeed, vMin, vMax, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  float vSpeed,  float vMin,  float vMax)
		{
			fixed (Vector4* pv = &v)
			{
				bool ret = DragFloat4(label, (float*)pv, vSpeed, vMin, vMax, (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  float vSpeed,  float vMin)
		{
			fixed (Vector4* pv = &v)
			{
				bool ret = DragFloat4(label, (float*)pv, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  float vSpeed)
		{
			fixed (Vector4* pv = &v)
			{
				bool ret = DragFloat4(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v)
		{
			fixed (Vector4* pv = &v)
			{
				bool ret = DragFloat4(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  float vSpeed,  float vMin,  byte* format)
		{
			fixed (Vector4* pv = &v)
			{
				byte ret = DragFloat4Native(label, (float*)pv, vSpeed, vMin, (float)(0.0f), format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  float vSpeed,  byte* format)
		{
			fixed (Vector4* pv = &v)
			{
				byte ret = DragFloat4Native(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  byte* format)
		{
			fixed (Vector4* pv = &v)
			{
				byte ret = DragFloat4Native(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  float vSpeed,  float vMin,  float vMax,  int flags)
		{
			fixed (Vector4* pv = &v)
			{
				bool ret = DragFloat4(label, (float*)pv, vSpeed, vMin, vMax, (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  float vSpeed,  float vMin,  int flags)
		{
			fixed (Vector4* pv = &v)
			{
				bool ret = DragFloat4(label, (float*)pv, vSpeed, vMin, (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  float vSpeed,  int flags)
		{
			fixed (Vector4* pv = &v)
			{
				bool ret = DragFloat4(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  int flags)
		{
			fixed (Vector4* pv = &v)
			{
				bool ret = DragFloat4(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  float vSpeed,  float vMin,  byte* format,  int flags)
		{
			fixed (Vector4* pv = &v)
			{
				byte ret = DragFloat4Native(label, (float*)pv, vSpeed, vMin, (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  float vSpeed,  byte* format,  int flags)
		{
			fixed (Vector4* pv = &v)
			{
				byte ret = DragFloat4Native(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  byte* format,  int flags)
		{
			fixed (Vector4* pv = &v)
			{
				byte ret = DragFloat4Native(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  float vMin,  float vMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloat4Native(label, v, vSpeed, vMin, vMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  float vMin,  float vMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloat4Native(label, v, vSpeed, vMin, vMax, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  float vMin,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloat4Native(label, v, vSpeed, vMin, (float)(0.0f), (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloat4Native(label, v, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  float* v,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloat4Native(label, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  float vMin,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloat4Native(label, v, vSpeed, vMin, (float)(0.0f), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloat4Native(label, v, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  float* v,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloat4Native(label, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  float vMin,  float vMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloat4Native(label, v, vSpeed, vMin, vMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  float vMin,  float vMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloat4Native(label, v, vSpeed, vMin, vMax, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  float vMin,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloat4Native(label, v, vSpeed, vMin, (float)(0.0f), pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloat4Native(label, v, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloat4( byte* label,  float* v,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloat4Native(label, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  float vMin,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloat4Native(label, v, vSpeed, vMin, (float)(0.0f), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloat4( byte* label,  float* v,  float vSpeed,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloat4Native(label, v, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloat4( byte* label,  float* v,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloat4Native(label, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloat4( byte* label,  ref float v,  float vSpeed,  float vMin,  float vMax,  ref byte format,  int flags)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloat4Native(label, (float*)pv, vSpeed, vMin, vMax, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  float vSpeed,  float vMin,  float vMax,  ref byte format)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloat4Native(label, (float*)pv, vSpeed, vMin, vMax, (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  float vSpeed,  float vMin,  ref byte format)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloat4Native(label, (float*)pv, vSpeed, vMin, (float)(0.0f), (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  float vSpeed,  ref byte format)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloat4Native(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  ref byte format)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloat4Native(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  float vSpeed,  float vMin,  ref byte format,  int flags)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloat4Native(label, (float*)pv, vSpeed, vMin, (float)(0.0f), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  float vSpeed,  ref byte format,  int flags)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloat4Native(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloat4( byte* label,  ref float v,  ref byte format,  int flags)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloat4Native(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  float vSpeed,  float vMin,  float vMax,  string format,  int flags)
		{
			fixed (Vector4* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloat4Native(label, (float*)pv, vSpeed, vMin, vMax, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  float vSpeed,  float vMin,  float vMax,  string format)
		{
			fixed (Vector4* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloat4Native(label, (float*)pv, vSpeed, vMin, vMax, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  float vSpeed,  float vMin,  string format)
		{
			fixed (Vector4* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloat4Native(label, (float*)pv, vSpeed, vMin, (float)(0.0f), pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  float vSpeed,  string format)
		{
			fixed (Vector4* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloat4Native(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  string format)
		{
			fixed (Vector4* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloat4Native(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  float vSpeed,  float vMin,  string format,  int flags)
		{
			fixed (Vector4* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloat4Native(label, (float*)pv, vSpeed, vMin, (float)(0.0f), pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  float vSpeed,  string format,  int flags)
		{
			fixed (Vector4* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloat4Native(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloat4( byte* label,  ref Vector4 v,  string format,  int flags)
		{
			fixed (Vector4* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloat4Native(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDragFloatRange2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte DragFloatRange2Native(byte* label, float* vCurrentMin, float* vCurrentMax, float vSpeed, float vMin, float vMax, byte* format, byte* formatMax, int flags);

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  byte* formatMax,  int flags)
		{
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, format, formatMax, flags);
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  byte* formatMax)
		{
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, format, formatMax, (int)(0));
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format)
		{
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, format, (byte*)(default), (int)(0));
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax)
		{
			bool ret = DragFloatRange2(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, (string)"%.3f", (byte*)(default), (int)(0));
			return ret;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin)
		{
			bool ret = DragFloatRange2(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (byte*)(default), (int)(0));
			return ret;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed)
		{
			bool ret = DragFloatRange2(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (byte*)(default), (int)(0));
			return ret;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax)
		{
			bool ret = DragFloatRange2(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (byte*)(default), (int)(0));
			return ret;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  byte* format)
		{
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), format, (byte*)(default), (int)(0));
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  byte* format)
		{
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, (byte*)(default), (int)(0));
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  byte* format)
		{
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (byte*)(default), (int)(0));
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  byte* format,  byte* formatMax)
		{
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), format, formatMax, (int)(0));
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  byte* format,  byte* formatMax)
		{
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, formatMax, (int)(0));
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  byte* format,  byte* formatMax)
		{
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, formatMax, (int)(0));
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  int flags)
		{
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, format, (byte*)(default), flags);
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  int flags)
		{
			bool ret = DragFloatRange2(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, (string)"%.3f", (byte*)(default), flags);
			return ret;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  int flags)
		{
			bool ret = DragFloatRange2(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (byte*)(default), flags);
			return ret;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  int flags)
		{
			bool ret = DragFloatRange2(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (byte*)(default), flags);
			return ret;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  int flags)
		{
			bool ret = DragFloatRange2(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (byte*)(default), flags);
			return ret;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  byte* format,  int flags)
		{
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), format, (byte*)(default), flags);
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  byte* format,  int flags)
		{
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, (byte*)(default), flags);
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  byte* format,  int flags)
		{
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (byte*)(default), flags);
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  byte* format,  byte* formatMax,  int flags)
		{
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), format, formatMax, flags);
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  byte* format,  byte* formatMax,  int flags)
		{
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, formatMax, flags);
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  byte* format,  byte* formatMax,  int flags)
		{
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, formatMax, flags);
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, format, formatMax, flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, format, formatMax, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, format, (byte*)(default), (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				bool ret = DragFloatRange2(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, (string)"%.3f", (byte*)(default), (int)(0));
				return ret;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				bool ret = DragFloatRange2(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (byte*)(default), (int)(0));
				return ret;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				bool ret = DragFloatRange2(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (byte*)(default), (int)(0));
				return ret;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				bool ret = DragFloatRange2(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (byte*)(default), (int)(0));
				return ret;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  byte* format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), format, (byte*)(default), (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  byte* format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, (byte*)(default), (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  byte* format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (byte*)(default), (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  byte* format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), format, formatMax, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  byte* format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, formatMax, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  byte* format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, formatMax, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, format, (byte*)(default), flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				bool ret = DragFloatRange2(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, (string)"%.3f", (byte*)(default), flags);
				return ret;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				bool ret = DragFloatRange2(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (byte*)(default), flags);
				return ret;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				bool ret = DragFloatRange2(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (byte*)(default), flags);
				return ret;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				bool ret = DragFloatRange2(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (byte*)(default), flags);
				return ret;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  byte* format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), format, (byte*)(default), flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  byte* format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, (byte*)(default), flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  byte* format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (byte*)(default), flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  byte* format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), format, formatMax, flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  byte* format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, formatMax, flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  byte* format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, formatMax, flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, format, formatMax, flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  byte* formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, format, formatMax, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, format, (byte*)(default), (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				bool ret = DragFloatRange2(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, (string)"%.3f", (byte*)(default), (int)(0));
				return ret;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				bool ret = DragFloatRange2(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (byte*)(default), (int)(0));
				return ret;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				bool ret = DragFloatRange2(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (byte*)(default), (int)(0));
				return ret;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				bool ret = DragFloatRange2(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (byte*)(default), (int)(0));
				return ret;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  byte* format)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), format, (byte*)(default), (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  byte* format)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, (byte*)(default), (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  byte* format)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (byte*)(default), (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  byte* format,  byte* formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), format, formatMax, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  byte* format,  byte* formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, formatMax, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  byte* format,  byte* formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, formatMax, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, format, (byte*)(default), flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				bool ret = DragFloatRange2(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, (string)"%.3f", (byte*)(default), flags);
				return ret;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				bool ret = DragFloatRange2(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (byte*)(default), flags);
				return ret;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				bool ret = DragFloatRange2(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (byte*)(default), flags);
				return ret;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				bool ret = DragFloatRange2(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (byte*)(default), flags);
				return ret;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  byte* format,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), format, (byte*)(default), flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  byte* format,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, (byte*)(default), flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  byte* format,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (byte*)(default), flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  byte* format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), format, formatMax, flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  byte* format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, formatMax, flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  byte* format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, formatMax, flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, format, formatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, format, formatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, format, (byte*)(default), (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					bool ret = DragFloatRange2(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, (string)"%.3f", (byte*)(default), (int)(0));
					return ret;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					bool ret = DragFloatRange2(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (byte*)(default), (int)(0));
					return ret;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					bool ret = DragFloatRange2(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (byte*)(default), (int)(0));
					return ret;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					bool ret = DragFloatRange2(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (byte*)(default), (int)(0));
					return ret;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  byte* format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), format, (byte*)(default), (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  byte* format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, (byte*)(default), (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  byte* format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (byte*)(default), (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  byte* format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), format, formatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  byte* format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, formatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  byte* format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, formatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, format, (byte*)(default), flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					bool ret = DragFloatRange2(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, (string)"%.3f", (byte*)(default), flags);
					return ret;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					bool ret = DragFloatRange2(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (byte*)(default), flags);
					return ret;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					bool ret = DragFloatRange2(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (byte*)(default), flags);
					return ret;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					bool ret = DragFloatRange2(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (byte*)(default), flags);
					return ret;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  byte* format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), format, (byte*)(default), flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  byte* format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, (byte*)(default), flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  byte* format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (byte*)(default), flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  byte* format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), format, formatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  byte* format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, formatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  byte* format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, formatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format,  byte* formatMax,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, formatMax, flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format,  byte* formatMax)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, formatMax, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, (byte*)(default), (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, (byte*)(default), (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)(default), (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)(default), (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  ref byte format,  byte* formatMax)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, formatMax, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  ref byte format,  byte* formatMax)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, formatMax, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  ref byte format,  byte* formatMax)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, formatMax, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, (byte*)(default), flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, (byte*)(default), flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)(default), flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)(default), flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  ref byte format,  byte* formatMax,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, formatMax, flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  ref byte format,  byte* formatMax,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, formatMax, flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  ref byte format,  byte* formatMax,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, formatMax, flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format,  byte* formatMax,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, pStr0, formatMax, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format,  byte* formatMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, pStr0, formatMax, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, pStr0, (byte*)(default), (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, (byte*)(default), (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, (byte*)(default), (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, (byte*)(default), (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  string format,  byte* formatMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, formatMax, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  string format,  byte* formatMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, formatMax, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  string format,  byte* formatMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, formatMax, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, pStr0, (byte*)(default), flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, (byte*)(default), flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, (byte*)(default), flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, (byte*)(default), flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  string format,  byte* formatMax,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, formatMax, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  string format,  byte* formatMax,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, formatMax, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  string format,  byte* formatMax,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, formatMax, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, formatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, formatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, (byte*)(default), (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  ref byte format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, (byte*)(default), (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  ref byte format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)(default), (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  ref byte format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)(default), (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  ref byte format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, formatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  ref byte format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, formatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  ref byte format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, formatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, (byte*)(default), flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  ref byte format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, (byte*)(default), flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  ref byte format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)(default), flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  ref byte format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)(default), flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  ref byte format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, formatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  ref byte format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, formatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  ref byte format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, formatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, pStr0, formatMax, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, pStr0, formatMax, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, pStr0, (byte*)(default), (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  string format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, (byte*)(default), (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  string format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, (byte*)(default), (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  string format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, (byte*)(default), (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  string format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, formatMax, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  string format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, formatMax, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  string format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, formatMax, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, pStr0, (byte*)(default), flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  string format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, (byte*)(default), flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  string format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, (byte*)(default), flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  string format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, (byte*)(default), flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  string format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, formatMax, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  string format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, formatMax, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  string format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, formatMax, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, formatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format,  byte* formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, formatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, (byte*)(default), (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  ref byte format)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, (byte*)(default), (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  ref byte format)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)(default), (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  ref byte format)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)(default), (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  ref byte format,  byte* formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, formatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  ref byte format,  byte* formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, formatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  ref byte format,  byte* formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, formatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, (byte*)(default), flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  ref byte format,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, (byte*)(default), flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  ref byte format,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)(default), flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  ref byte format,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)(default), flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  ref byte format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, formatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  ref byte format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, formatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  ref byte format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, formatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, pStr0, formatMax, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format,  byte* formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, pStr0, formatMax, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, pStr0, (byte*)(default), (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  string format)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, (byte*)(default), (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  string format)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, (byte*)(default), (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  string format)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, (byte*)(default), (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  string format,  byte* formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, formatMax, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  string format,  byte* formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, formatMax, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  string format,  byte* formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, formatMax, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, pStr0, (byte*)(default), flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  string format,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, (byte*)(default), flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  string format,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, (byte*)(default), flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  string format,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, (byte*)(default), flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  string format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, formatMax, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  string format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, formatMax, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  string format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, formatMax, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, formatMax, flags);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, formatMax, (int)(0));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, (byte*)(default), (int)(0));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  ref byte format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, (byte*)(default), (int)(0));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  ref byte format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)(default), (int)(0));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  ref byte format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)(default), (int)(0));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  ref byte format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, formatMax, (int)(0));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  ref byte format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, formatMax, (int)(0));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  ref byte format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, formatMax, (int)(0));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, (byte*)(default), flags);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  ref byte format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, (byte*)(default), flags);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  ref byte format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)(default), flags);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  ref byte format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)(default), flags);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  ref byte format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, formatMax, flags);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  ref byte format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, formatMax, flags);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  ref byte format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, formatMax, flags);
						return ret != 0;
					}
				}
			}
		}
	}
}
