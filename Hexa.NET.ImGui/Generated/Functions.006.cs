// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  void* pMin,  int flags)
		{
			byte ret = DragScalarNNative(label, dataType, pData, components, (float)(1.0f), pMin, (void*)(default), (byte*)(default), flags);
			return ret != 0;
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  void* pMin,  void* pMax,  int flags)
		{
			byte ret = DragScalarNNative(label, dataType, pData, components, (float)(1.0f), pMin, pMax, (byte*)(default), flags);
			return ret != 0;
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  float vSpeed,  void* pMin,  byte* format,  int flags)
		{
			byte ret = DragScalarNNative(label, dataType, pData, components, vSpeed, pMin, (void*)(default), format, flags);
			return ret != 0;
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  float vSpeed,  byte* format,  int flags)
		{
			byte ret = DragScalarNNative(label, dataType, pData, components, vSpeed, (void*)(default), (void*)(default), format, flags);
			return ret != 0;
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  byte* format,  int flags)
		{
			byte ret = DragScalarNNative(label, dataType, pData, components, (float)(1.0f), (void*)(default), (void*)(default), format, flags);
			return ret != 0;
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  void* pMin,  byte* format,  int flags)
		{
			byte ret = DragScalarNNative(label, dataType, pData, components, (float)(1.0f), pMin, (void*)(default), format, flags);
			return ret != 0;
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  void* pMin,  void* pMax,  byte* format,  int flags)
		{
			byte ret = DragScalarNNative(label, dataType, pData, components, (float)(1.0f), pMin, pMax, format, flags);
			return ret != 0;
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  float vSpeed,  void* pMin,  void* pMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragScalarNNative(label, dataType, pData, components, vSpeed, pMin, pMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  float vSpeed,  void* pMin,  void* pMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragScalarNNative(label, dataType, pData, components, vSpeed, pMin, pMax, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  float vSpeed,  void* pMin,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragScalarNNative(label, dataType, pData, components, vSpeed, pMin, (void*)(default), (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  float vSpeed,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragScalarNNative(label, dataType, pData, components, vSpeed, (void*)(default), (void*)(default), (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragScalarNNative(label, dataType, pData, components, (float)(1.0f), (void*)(default), (void*)(default), (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  void* pMin,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragScalarNNative(label, dataType, pData, components, (float)(1.0f), pMin, (void*)(default), (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  void* pMin,  void* pMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragScalarNNative(label, dataType, pData, components, (float)(1.0f), pMin, pMax, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  float vSpeed,  void* pMin,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragScalarNNative(label, dataType, pData, components, vSpeed, pMin, (void*)(default), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  float vSpeed,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragScalarNNative(label, dataType, pData, components, vSpeed, (void*)(default), (void*)(default), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragScalarNNative(label, dataType, pData, components, (float)(1.0f), (void*)(default), (void*)(default), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  void* pMin,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragScalarNNative(label, dataType, pData, components, (float)(1.0f), pMin, (void*)(default), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  void* pMin,  void* pMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragScalarNNative(label, dataType, pData, components, (float)(1.0f), pMin, pMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  float vSpeed,  void* pMin,  void* pMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragScalarNNative(label, dataType, pData, components, vSpeed, pMin, pMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  float vSpeed,  void* pMin,  void* pMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragScalarNNative(label, dataType, pData, components, vSpeed, pMin, pMax, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  float vSpeed,  void* pMin,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragScalarNNative(label, dataType, pData, components, vSpeed, pMin, (void*)(default), pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  float vSpeed,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragScalarNNative(label, dataType, pData, components, vSpeed, (void*)(default), (void*)(default), pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragScalarNNative(label, dataType, pData, components, (float)(1.0f), (void*)(default), (void*)(default), pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  void* pMin,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragScalarNNative(label, dataType, pData, components, (float)(1.0f), pMin, (void*)(default), pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  void* pMin,  void* pMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragScalarNNative(label, dataType, pData, components, (float)(1.0f), pMin, pMax, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  float vSpeed,  void* pMin,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragScalarNNative(label, dataType, pData, components, vSpeed, pMin, (void*)(default), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  float vSpeed,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragScalarNNative(label, dataType, pData, components, vSpeed, (void*)(default), (void*)(default), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragScalarNNative(label, dataType, pData, components, (float)(1.0f), (void*)(default), (void*)(default), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  void* pMin,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragScalarNNative(label, dataType, pData, components, (float)(1.0f), pMin, (void*)(default), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragScalarN( byte* label,  int dataType,  void* pData,  int components,  void* pMin,  void* pMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragScalarNNative(label, dataType, pData, components, (float)(1.0f), pMin, pMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSliderFloat")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SliderFloatNative(byte* label, float* v, float vMin, float vMax, byte* format, int flags);

		public static bool SliderFloat( byte* label,  float* v,  float vMin,  float vMax,  byte* format,  int flags)
		{
			byte ret = SliderFloatNative(label, v, vMin, vMax, format, flags);
			return ret != 0;
		}

		public static bool SliderFloat( byte* label,  float* v,  float vMin,  float vMax,  byte* format)
		{
			byte ret = SliderFloatNative(label, v, vMin, vMax, format, (int)(0));
			return ret != 0;
		}

		public static bool SliderFloat( byte* label,  float* v,  float vMin,  float vMax)
		{
			bool ret = SliderFloat(label, v, vMin, vMax, (string)"%.3f", (int)(0));
			return ret;
		}

		public static bool SliderFloat( byte* label,  float* v,  float vMin,  float vMax,  int flags)
		{
			bool ret = SliderFloat(label, v, vMin, vMax, (string)"%.3f", flags);
			return ret;
		}

		public static bool SliderFloat( byte* label,  ref float v,  float vMin,  float vMax,  byte* format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = SliderFloatNative(label, (float*)pv, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		public static bool SliderFloat( byte* label,  ref float v,  float vMin,  float vMax,  byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = SliderFloatNative(label, (float*)pv, vMin, vMax, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderFloat( byte* label,  ref float v,  float vMin,  float vMax)
		{
			fixed (float* pv = &v)
			{
				bool ret = SliderFloat(label, (float*)pv, vMin, vMax, (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool SliderFloat( byte* label,  ref float v,  float vMin,  float vMax,  int flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = SliderFloat(label, (float*)pv, vMin, vMax, (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool SliderFloat( byte* label,  float* v,  float vMin,  float vMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderFloatNative(label, v, vMin, vMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool SliderFloat( byte* label,  float* v,  float vMin,  float vMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderFloatNative(label, v, vMin, vMax, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderFloat( byte* label,  float* v,  float vMin,  float vMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderFloatNative(label, v, vMin, vMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderFloat( byte* label,  float* v,  float vMin,  float vMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderFloatNative(label, v, vMin, vMax, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderFloat( byte* label,  ref float v,  float vMin,  float vMax,  ref byte format,  int flags)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderFloatNative(label, (float*)pv, vMin, vMax, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool SliderFloat( byte* label,  ref float v,  float vMin,  float vMax,  ref byte format)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderFloatNative(label, (float*)pv, vMin, vMax, (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool SliderFloat( byte* label,  ref float v,  float vMin,  float vMax,  string format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderFloatNative(label, (float*)pv, vMin, vMax, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool SliderFloat( byte* label,  ref float v,  float vMin,  float vMax,  string format)
		{
			fixed (float* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderFloatNative(label, (float*)pv, vMin, vMax, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSliderFloat2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SliderFloat2Native(byte* label, float* v, float vMin, float vMax, byte* format, int flags);

		public static bool SliderFloat2( byte* label,  float* v,  float vMin,  float vMax,  byte* format,  int flags)
		{
			byte ret = SliderFloat2Native(label, v, vMin, vMax, format, flags);
			return ret != 0;
		}

		public static bool SliderFloat2( byte* label,  float* v,  float vMin,  float vMax,  byte* format)
		{
			byte ret = SliderFloat2Native(label, v, vMin, vMax, format, (int)(0));
			return ret != 0;
		}

		public static bool SliderFloat2( byte* label,  float* v,  float vMin,  float vMax)
		{
			bool ret = SliderFloat2(label, v, vMin, vMax, (string)"%.3f", (int)(0));
			return ret;
		}

		public static bool SliderFloat2( byte* label,  float* v,  float vMin,  float vMax,  int flags)
		{
			bool ret = SliderFloat2(label, v, vMin, vMax, (string)"%.3f", flags);
			return ret;
		}

		public static bool SliderFloat2( byte* label,  ref float v,  float vMin,  float vMax,  byte* format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = SliderFloat2Native(label, (float*)pv, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		public static bool SliderFloat2( byte* label,  ref float v,  float vMin,  float vMax,  byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = SliderFloat2Native(label, (float*)pv, vMin, vMax, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderFloat2( byte* label,  ref float v,  float vMin,  float vMax)
		{
			fixed (float* pv = &v)
			{
				bool ret = SliderFloat2(label, (float*)pv, vMin, vMax, (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool SliderFloat2( byte* label,  ref float v,  float vMin,  float vMax,  int flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = SliderFloat2(label, (float*)pv, vMin, vMax, (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool SliderFloat2( byte* label,  ref Vector2 v,  float vMin,  float vMax,  byte* format,  int flags)
		{
			fixed (Vector2* pv = &v)
			{
				byte ret = SliderFloat2Native(label, (float*)pv, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		public static bool SliderFloat2( byte* label,  ref Vector2 v,  float vMin,  float vMax,  byte* format)
		{
			fixed (Vector2* pv = &v)
			{
				byte ret = SliderFloat2Native(label, (float*)pv, vMin, vMax, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderFloat2( byte* label,  ref Vector2 v,  float vMin,  float vMax)
		{
			fixed (Vector2* pv = &v)
			{
				bool ret = SliderFloat2(label, (float*)pv, vMin, vMax, (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool SliderFloat2( byte* label,  ref Vector2 v,  float vMin,  float vMax,  int flags)
		{
			fixed (Vector2* pv = &v)
			{
				bool ret = SliderFloat2(label, (float*)pv, vMin, vMax, (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool SliderFloat2( byte* label,  float* v,  float vMin,  float vMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderFloat2Native(label, v, vMin, vMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool SliderFloat2( byte* label,  float* v,  float vMin,  float vMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderFloat2Native(label, v, vMin, vMax, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderFloat2( byte* label,  float* v,  float vMin,  float vMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderFloat2Native(label, v, vMin, vMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderFloat2( byte* label,  float* v,  float vMin,  float vMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderFloat2Native(label, v, vMin, vMax, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderFloat2( byte* label,  ref float v,  float vMin,  float vMax,  ref byte format,  int flags)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderFloat2Native(label, (float*)pv, vMin, vMax, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool SliderFloat2( byte* label,  ref float v,  float vMin,  float vMax,  ref byte format)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderFloat2Native(label, (float*)pv, vMin, vMax, (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool SliderFloat2( byte* label,  ref Vector2 v,  float vMin,  float vMax,  string format,  int flags)
		{
			fixed (Vector2* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderFloat2Native(label, (float*)pv, vMin, vMax, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool SliderFloat2( byte* label,  ref Vector2 v,  float vMin,  float vMax,  string format)
		{
			fixed (Vector2* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderFloat2Native(label, (float*)pv, vMin, vMax, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSliderFloat3")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SliderFloat3Native(byte* label, float* v, float vMin, float vMax, byte* format, int flags);

		public static bool SliderFloat3( byte* label,  float* v,  float vMin,  float vMax,  byte* format,  int flags)
		{
			byte ret = SliderFloat3Native(label, v, vMin, vMax, format, flags);
			return ret != 0;
		}

		public static bool SliderFloat3( byte* label,  float* v,  float vMin,  float vMax,  byte* format)
		{
			byte ret = SliderFloat3Native(label, v, vMin, vMax, format, (int)(0));
			return ret != 0;
		}

		public static bool SliderFloat3( byte* label,  float* v,  float vMin,  float vMax)
		{
			bool ret = SliderFloat3(label, v, vMin, vMax, (string)"%.3f", (int)(0));
			return ret;
		}

		public static bool SliderFloat3( byte* label,  float* v,  float vMin,  float vMax,  int flags)
		{
			bool ret = SliderFloat3(label, v, vMin, vMax, (string)"%.3f", flags);
			return ret;
		}

		public static bool SliderFloat3( byte* label,  ref float v,  float vMin,  float vMax,  byte* format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = SliderFloat3Native(label, (float*)pv, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		public static bool SliderFloat3( byte* label,  ref float v,  float vMin,  float vMax,  byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = SliderFloat3Native(label, (float*)pv, vMin, vMax, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderFloat3( byte* label,  ref float v,  float vMin,  float vMax)
		{
			fixed (float* pv = &v)
			{
				bool ret = SliderFloat3(label, (float*)pv, vMin, vMax, (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool SliderFloat3( byte* label,  ref float v,  float vMin,  float vMax,  int flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = SliderFloat3(label, (float*)pv, vMin, vMax, (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool SliderFloat3( byte* label,  ref Vector3 v,  float vMin,  float vMax,  byte* format,  int flags)
		{
			fixed (Vector3* pv = &v)
			{
				byte ret = SliderFloat3Native(label, (float*)pv, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		public static bool SliderFloat3( byte* label,  ref Vector3 v,  float vMin,  float vMax,  byte* format)
		{
			fixed (Vector3* pv = &v)
			{
				byte ret = SliderFloat3Native(label, (float*)pv, vMin, vMax, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderFloat3( byte* label,  ref Vector3 v,  float vMin,  float vMax)
		{
			fixed (Vector3* pv = &v)
			{
				bool ret = SliderFloat3(label, (float*)pv, vMin, vMax, (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool SliderFloat3( byte* label,  ref Vector3 v,  float vMin,  float vMax,  int flags)
		{
			fixed (Vector3* pv = &v)
			{
				bool ret = SliderFloat3(label, (float*)pv, vMin, vMax, (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool SliderFloat3( byte* label,  float* v,  float vMin,  float vMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderFloat3Native(label, v, vMin, vMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool SliderFloat3( byte* label,  float* v,  float vMin,  float vMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderFloat3Native(label, v, vMin, vMax, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderFloat3( byte* label,  float* v,  float vMin,  float vMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderFloat3Native(label, v, vMin, vMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderFloat3( byte* label,  float* v,  float vMin,  float vMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderFloat3Native(label, v, vMin, vMax, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderFloat3( byte* label,  ref float v,  float vMin,  float vMax,  ref byte format,  int flags)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderFloat3Native(label, (float*)pv, vMin, vMax, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool SliderFloat3( byte* label,  ref float v,  float vMin,  float vMax,  ref byte format)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderFloat3Native(label, (float*)pv, vMin, vMax, (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool SliderFloat3( byte* label,  ref Vector3 v,  float vMin,  float vMax,  string format,  int flags)
		{
			fixed (Vector3* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderFloat3Native(label, (float*)pv, vMin, vMax, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool SliderFloat3( byte* label,  ref Vector3 v,  float vMin,  float vMax,  string format)
		{
			fixed (Vector3* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderFloat3Native(label, (float*)pv, vMin, vMax, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSliderFloat4")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SliderFloat4Native(byte* label, float* v, float vMin, float vMax, byte* format, int flags);

		public static bool SliderFloat4( byte* label,  float* v,  float vMin,  float vMax,  byte* format,  int flags)
		{
			byte ret = SliderFloat4Native(label, v, vMin, vMax, format, flags);
			return ret != 0;
		}

		public static bool SliderFloat4( byte* label,  float* v,  float vMin,  float vMax,  byte* format)
		{
			byte ret = SliderFloat4Native(label, v, vMin, vMax, format, (int)(0));
			return ret != 0;
		}

		public static bool SliderFloat4( byte* label,  float* v,  float vMin,  float vMax)
		{
			bool ret = SliderFloat4(label, v, vMin, vMax, (string)"%.3f", (int)(0));
			return ret;
		}

		public static bool SliderFloat4( byte* label,  float* v,  float vMin,  float vMax,  int flags)
		{
			bool ret = SliderFloat4(label, v, vMin, vMax, (string)"%.3f", flags);
			return ret;
		}

		public static bool SliderFloat4( byte* label,  ref float v,  float vMin,  float vMax,  byte* format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = SliderFloat4Native(label, (float*)pv, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		public static bool SliderFloat4( byte* label,  ref float v,  float vMin,  float vMax,  byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = SliderFloat4Native(label, (float*)pv, vMin, vMax, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderFloat4( byte* label,  ref float v,  float vMin,  float vMax)
		{
			fixed (float* pv = &v)
			{
				bool ret = SliderFloat4(label, (float*)pv, vMin, vMax, (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool SliderFloat4( byte* label,  ref float v,  float vMin,  float vMax,  int flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = SliderFloat4(label, (float*)pv, vMin, vMax, (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool SliderFloat4( byte* label,  ref Vector4 v,  float vMin,  float vMax,  byte* format,  int flags)
		{
			fixed (Vector4* pv = &v)
			{
				byte ret = SliderFloat4Native(label, (float*)pv, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		public static bool SliderFloat4( byte* label,  ref Vector4 v,  float vMin,  float vMax,  byte* format)
		{
			fixed (Vector4* pv = &v)
			{
				byte ret = SliderFloat4Native(label, (float*)pv, vMin, vMax, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderFloat4( byte* label,  ref Vector4 v,  float vMin,  float vMax)
		{
			fixed (Vector4* pv = &v)
			{
				bool ret = SliderFloat4(label, (float*)pv, vMin, vMax, (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool SliderFloat4( byte* label,  ref Vector4 v,  float vMin,  float vMax,  int flags)
		{
			fixed (Vector4* pv = &v)
			{
				bool ret = SliderFloat4(label, (float*)pv, vMin, vMax, (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool SliderFloat4( byte* label,  float* v,  float vMin,  float vMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderFloat4Native(label, v, vMin, vMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool SliderFloat4( byte* label,  float* v,  float vMin,  float vMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderFloat4Native(label, v, vMin, vMax, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderFloat4( byte* label,  float* v,  float vMin,  float vMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderFloat4Native(label, v, vMin, vMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderFloat4( byte* label,  float* v,  float vMin,  float vMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderFloat4Native(label, v, vMin, vMax, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderFloat4( byte* label,  ref float v,  float vMin,  float vMax,  ref byte format,  int flags)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderFloat4Native(label, (float*)pv, vMin, vMax, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool SliderFloat4( byte* label,  ref float v,  float vMin,  float vMax,  ref byte format)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderFloat4Native(label, (float*)pv, vMin, vMax, (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool SliderFloat4( byte* label,  ref Vector4 v,  float vMin,  float vMax,  string format,  int flags)
		{
			fixed (Vector4* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderFloat4Native(label, (float*)pv, vMin, vMax, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool SliderFloat4( byte* label,  ref Vector4 v,  float vMin,  float vMax,  string format)
		{
			fixed (Vector4* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderFloat4Native(label, (float*)pv, vMin, vMax, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSliderAngle")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SliderAngleNative(byte* label, float* vRad, float vDegreesMin, float vDegreesMax, byte* format, int flags);

		public static bool SliderAngle( byte* label,  float* vRad,  float vDegreesMin,  float vDegreesMax,  byte* format,  int flags)
		{
			byte ret = SliderAngleNative(label, vRad, vDegreesMin, vDegreesMax, format, flags);
			return ret != 0;
		}

		public static bool SliderAngle( byte* label,  float* vRad,  float vDegreesMin,  float vDegreesMax,  byte* format)
		{
			byte ret = SliderAngleNative(label, vRad, vDegreesMin, vDegreesMax, format, (int)(0));
			return ret != 0;
		}

		public static bool SliderAngle( byte* label,  float* vRad,  float vDegreesMin,  float vDegreesMax)
		{
			bool ret = SliderAngle(label, vRad, vDegreesMin, vDegreesMax, (string)"%.0f deg", (int)(0));
			return ret;
		}

		public static bool SliderAngle( byte* label,  float* vRad,  float vDegreesMin)
		{
			bool ret = SliderAngle(label, vRad, vDegreesMin, (float)(+360.0f), (string)"%.0f deg", (int)(0));
			return ret;
		}

		public static bool SliderAngle( byte* label,  float* vRad)
		{
			bool ret = SliderAngle(label, vRad, (float)(-360.0f), (float)(+360.0f), (string)"%.0f deg", (int)(0));
			return ret;
		}

		public static bool SliderAngle( byte* label,  float* vRad,  float vDegreesMin,  byte* format)
		{
			byte ret = SliderAngleNative(label, vRad, vDegreesMin, (float)(+360.0f), format, (int)(0));
			return ret != 0;
		}

		public static bool SliderAngle( byte* label,  float* vRad,  byte* format)
		{
			byte ret = SliderAngleNative(label, vRad, (float)(-360.0f), (float)(+360.0f), format, (int)(0));
			return ret != 0;
		}

		public static bool SliderAngle( byte* label,  float* vRad,  float vDegreesMin,  float vDegreesMax,  int flags)
		{
			bool ret = SliderAngle(label, vRad, vDegreesMin, vDegreesMax, (string)"%.0f deg", flags);
			return ret;
		}

		public static bool SliderAngle( byte* label,  float* vRad,  float vDegreesMin,  int flags)
		{
			bool ret = SliderAngle(label, vRad, vDegreesMin, (float)(+360.0f), (string)"%.0f deg", flags);
			return ret;
		}

		public static bool SliderAngle( byte* label,  float* vRad,  int flags)
		{
			bool ret = SliderAngle(label, vRad, (float)(-360.0f), (float)(+360.0f), (string)"%.0f deg", flags);
			return ret;
		}

		public static bool SliderAngle( byte* label,  float* vRad,  float vDegreesMin,  byte* format,  int flags)
		{
			byte ret = SliderAngleNative(label, vRad, vDegreesMin, (float)(+360.0f), format, flags);
			return ret != 0;
		}

		public static bool SliderAngle( byte* label,  float* vRad,  byte* format,  int flags)
		{
			byte ret = SliderAngleNative(label, vRad, (float)(-360.0f), (float)(+360.0f), format, flags);
			return ret != 0;
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  float vDegreesMin,  float vDegreesMax,  byte* format,  int flags)
		{
			fixed (float* pvRad = &vRad)
			{
				byte ret = SliderAngleNative(label, (float*)pvRad, vDegreesMin, vDegreesMax, format, flags);
				return ret != 0;
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  float vDegreesMin,  float vDegreesMax,  byte* format)
		{
			fixed (float* pvRad = &vRad)
			{
				byte ret = SliderAngleNative(label, (float*)pvRad, vDegreesMin, vDegreesMax, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  float vDegreesMin,  float vDegreesMax)
		{
			fixed (float* pvRad = &vRad)
			{
				bool ret = SliderAngle(label, (float*)pvRad, vDegreesMin, vDegreesMax, (string)"%.0f deg", (int)(0));
				return ret;
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  float vDegreesMin)
		{
			fixed (float* pvRad = &vRad)
			{
				bool ret = SliderAngle(label, (float*)pvRad, vDegreesMin, (float)(+360.0f), (string)"%.0f deg", (int)(0));
				return ret;
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad)
		{
			fixed (float* pvRad = &vRad)
			{
				bool ret = SliderAngle(label, (float*)pvRad, (float)(-360.0f), (float)(+360.0f), (string)"%.0f deg", (int)(0));
				return ret;
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  float vDegreesMin,  byte* format)
		{
			fixed (float* pvRad = &vRad)
			{
				byte ret = SliderAngleNative(label, (float*)pvRad, vDegreesMin, (float)(+360.0f), format, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  byte* format)
		{
			fixed (float* pvRad = &vRad)
			{
				byte ret = SliderAngleNative(label, (float*)pvRad, (float)(-360.0f), (float)(+360.0f), format, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  float vDegreesMin,  float vDegreesMax,  int flags)
		{
			fixed (float* pvRad = &vRad)
			{
				bool ret = SliderAngle(label, (float*)pvRad, vDegreesMin, vDegreesMax, (string)"%.0f deg", flags);
				return ret;
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  float vDegreesMin,  int flags)
		{
			fixed (float* pvRad = &vRad)
			{
				bool ret = SliderAngle(label, (float*)pvRad, vDegreesMin, (float)(+360.0f), (string)"%.0f deg", flags);
				return ret;
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  int flags)
		{
			fixed (float* pvRad = &vRad)
			{
				bool ret = SliderAngle(label, (float*)pvRad, (float)(-360.0f), (float)(+360.0f), (string)"%.0f deg", flags);
				return ret;
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  float vDegreesMin,  byte* format,  int flags)
		{
			fixed (float* pvRad = &vRad)
			{
				byte ret = SliderAngleNative(label, (float*)pvRad, vDegreesMin, (float)(+360.0f), format, flags);
				return ret != 0;
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  byte* format,  int flags)
		{
			fixed (float* pvRad = &vRad)
			{
				byte ret = SliderAngleNative(label, (float*)pvRad, (float)(-360.0f), (float)(+360.0f), format, flags);
				return ret != 0;
			}
		}

		public static bool SliderAngle( byte* label,  float* vRad,  float vDegreesMin,  float vDegreesMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderAngleNative(label, vRad, vDegreesMin, vDegreesMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool SliderAngle( byte* label,  float* vRad,  float vDegreesMin,  float vDegreesMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderAngleNative(label, vRad, vDegreesMin, vDegreesMax, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderAngle( byte* label,  float* vRad,  float vDegreesMin,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderAngleNative(label, vRad, vDegreesMin, (float)(+360.0f), (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderAngle( byte* label,  float* vRad,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderAngleNative(label, vRad, (float)(-360.0f), (float)(+360.0f), (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderAngle( byte* label,  float* vRad,  float vDegreesMin,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderAngleNative(label, vRad, vDegreesMin, (float)(+360.0f), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool SliderAngle( byte* label,  float* vRad,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderAngleNative(label, vRad, (float)(-360.0f), (float)(+360.0f), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool SliderAngle( byte* label,  float* vRad,  float vDegreesMin,  float vDegreesMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderAngleNative(label, vRad, vDegreesMin, vDegreesMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderAngle( byte* label,  float* vRad,  float vDegreesMin,  float vDegreesMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderAngleNative(label, vRad, vDegreesMin, vDegreesMax, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderAngle( byte* label,  float* vRad,  float vDegreesMin,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderAngleNative(label, vRad, vDegreesMin, (float)(+360.0f), pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderAngle( byte* label,  float* vRad,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderAngleNative(label, vRad, (float)(-360.0f), (float)(+360.0f), pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderAngle( byte* label,  float* vRad,  float vDegreesMin,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderAngleNative(label, vRad, vDegreesMin, (float)(+360.0f), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderAngle( byte* label,  float* vRad,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderAngleNative(label, vRad, (float)(-360.0f), (float)(+360.0f), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  float vDegreesMin,  float vDegreesMax,  ref byte format,  int flags)
		{
			fixed (float* pvRad = &vRad)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderAngleNative(label, (float*)pvRad, vDegreesMin, vDegreesMax, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  float vDegreesMin,  float vDegreesMax,  ref byte format)
		{
			fixed (float* pvRad = &vRad)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderAngleNative(label, (float*)pvRad, vDegreesMin, vDegreesMax, (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  float vDegreesMin,  ref byte format)
		{
			fixed (float* pvRad = &vRad)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderAngleNative(label, (float*)pvRad, vDegreesMin, (float)(+360.0f), (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  ref byte format)
		{
			fixed (float* pvRad = &vRad)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderAngleNative(label, (float*)pvRad, (float)(-360.0f), (float)(+360.0f), (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  float vDegreesMin,  ref byte format,  int flags)
		{
			fixed (float* pvRad = &vRad)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderAngleNative(label, (float*)pvRad, vDegreesMin, (float)(+360.0f), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  ref byte format,  int flags)
		{
			fixed (float* pvRad = &vRad)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderAngleNative(label, (float*)pvRad, (float)(-360.0f), (float)(+360.0f), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  float vDegreesMin,  float vDegreesMax,  string format,  int flags)
		{
			fixed (float* pvRad = &vRad)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderAngleNative(label, (float*)pvRad, vDegreesMin, vDegreesMax, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  float vDegreesMin,  float vDegreesMax,  string format)
		{
			fixed (float* pvRad = &vRad)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderAngleNative(label, (float*)pvRad, vDegreesMin, vDegreesMax, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  float vDegreesMin,  string format)
		{
			fixed (float* pvRad = &vRad)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderAngleNative(label, (float*)pvRad, vDegreesMin, (float)(+360.0f), pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  string format)
		{
			fixed (float* pvRad = &vRad)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderAngleNative(label, (float*)pvRad, (float)(-360.0f), (float)(+360.0f), pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  float vDegreesMin,  string format,  int flags)
		{
			fixed (float* pvRad = &vRad)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderAngleNative(label, (float*)pvRad, vDegreesMin, (float)(+360.0f), pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool SliderAngle( byte* label,  ref float vRad,  string format,  int flags)
		{
			fixed (float* pvRad = &vRad)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderAngleNative(label, (float*)pvRad, (float)(-360.0f), (float)(+360.0f), pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSliderInt")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SliderIntNative(byte* label, int* v, int vMin, int vMax, byte* format, int flags);

		public static bool SliderInt( byte* label,  int* v,  int vMin,  int vMax,  byte* format,  int flags)
		{
			byte ret = SliderIntNative(label, v, vMin, vMax, format, flags);
			return ret != 0;
		}

		public static bool SliderInt( byte* label,  int* v,  int vMin,  int vMax,  byte* format)
		{
			byte ret = SliderIntNative(label, v, vMin, vMax, format, (int)(0));
			return ret != 0;
		}

		public static bool SliderInt( byte* label,  int* v,  int vMin,  int vMax)
		{
			bool ret = SliderInt(label, v, vMin, vMax, (string)"%d", (int)(0));
			return ret;
		}

		public static bool SliderInt( byte* label,  int* v,  int vMin,  int vMax,  int flags)
		{
			bool ret = SliderInt(label, v, vMin, vMax, (string)"%d", flags);
			return ret;
		}

		public static bool SliderInt( byte* label,  ref int v,  int vMin,  int vMax,  byte* format,  int flags)
		{
			fixed (int* pv = &v)
			{
				byte ret = SliderIntNative(label, (int*)pv, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		public static bool SliderInt( byte* label,  ref int v,  int vMin,  int vMax,  byte* format)
		{
			fixed (int* pv = &v)
			{
				byte ret = SliderIntNative(label, (int*)pv, vMin, vMax, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderInt( byte* label,  ref int v,  int vMin,  int vMax)
		{
			fixed (int* pv = &v)
			{
				bool ret = SliderInt(label, (int*)pv, vMin, vMax, (string)"%d", (int)(0));
				return ret;
			}
		}

		public static bool SliderInt( byte* label,  ref int v,  int vMin,  int vMax,  int flags)
		{
			fixed (int* pv = &v)
			{
				bool ret = SliderInt(label, (int*)pv, vMin, vMax, (string)"%d", flags);
				return ret;
			}
		}

		public static bool SliderInt( byte* label,  int* v,  int vMin,  int vMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderIntNative(label, v, vMin, vMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool SliderInt( byte* label,  int* v,  int vMin,  int vMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderIntNative(label, v, vMin, vMax, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderInt( byte* label,  int* v,  int vMin,  int vMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderIntNative(label, v, vMin, vMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderInt( byte* label,  int* v,  int vMin,  int vMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderIntNative(label, v, vMin, vMax, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderInt( byte* label,  ref int v,  int vMin,  int vMax,  ref byte format,  int flags)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderIntNative(label, (int*)pv, vMin, vMax, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool SliderInt( byte* label,  ref int v,  int vMin,  int vMax,  ref byte format)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderIntNative(label, (int*)pv, vMin, vMax, (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool SliderInt( byte* label,  ref int v,  int vMin,  int vMax,  string format,  int flags)
		{
			fixed (int* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderIntNative(label, (int*)pv, vMin, vMax, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool SliderInt( byte* label,  ref int v,  int vMin,  int vMax,  string format)
		{
			fixed (int* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderIntNative(label, (int*)pv, vMin, vMax, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSliderInt2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SliderInt2Native(byte* label, int* v, int vMin, int vMax, byte* format, int flags);

		public static bool SliderInt2( byte* label,  int* v,  int vMin,  int vMax,  byte* format,  int flags)
		{
			byte ret = SliderInt2Native(label, v, vMin, vMax, format, flags);
			return ret != 0;
		}

		public static bool SliderInt2( byte* label,  int* v,  int vMin,  int vMax,  byte* format)
		{
			byte ret = SliderInt2Native(label, v, vMin, vMax, format, (int)(0));
			return ret != 0;
		}

		public static bool SliderInt2( byte* label,  int* v,  int vMin,  int vMax)
		{
			bool ret = SliderInt2(label, v, vMin, vMax, (string)"%d", (int)(0));
			return ret;
		}

		public static bool SliderInt2( byte* label,  int* v,  int vMin,  int vMax,  int flags)
		{
			bool ret = SliderInt2(label, v, vMin, vMax, (string)"%d", flags);
			return ret;
		}

		public static bool SliderInt2( byte* label,  ref int v,  int vMin,  int vMax,  byte* format,  int flags)
		{
			fixed (int* pv = &v)
			{
				byte ret = SliderInt2Native(label, (int*)pv, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		public static bool SliderInt2( byte* label,  ref int v,  int vMin,  int vMax,  byte* format)
		{
			fixed (int* pv = &v)
			{
				byte ret = SliderInt2Native(label, (int*)pv, vMin, vMax, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderInt2( byte* label,  ref int v,  int vMin,  int vMax)
		{
			fixed (int* pv = &v)
			{
				bool ret = SliderInt2(label, (int*)pv, vMin, vMax, (string)"%d", (int)(0));
				return ret;
			}
		}

		public static bool SliderInt2( byte* label,  ref int v,  int vMin,  int vMax,  int flags)
		{
			fixed (int* pv = &v)
			{
				bool ret = SliderInt2(label, (int*)pv, vMin, vMax, (string)"%d", flags);
				return ret;
			}
		}

		public static bool SliderInt2( byte* label,  int* v,  int vMin,  int vMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderInt2Native(label, v, vMin, vMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool SliderInt2( byte* label,  int* v,  int vMin,  int vMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderInt2Native(label, v, vMin, vMax, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderInt2( byte* label,  int* v,  int vMin,  int vMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderInt2Native(label, v, vMin, vMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderInt2( byte* label,  int* v,  int vMin,  int vMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderInt2Native(label, v, vMin, vMax, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderInt2( byte* label,  ref int v,  int vMin,  int vMax,  ref byte format,  int flags)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderInt2Native(label, (int*)pv, vMin, vMax, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool SliderInt2( byte* label,  ref int v,  int vMin,  int vMax,  ref byte format)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderInt2Native(label, (int*)pv, vMin, vMax, (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool SliderInt2( byte* label,  ref int v,  int vMin,  int vMax,  string format,  int flags)
		{
			fixed (int* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderInt2Native(label, (int*)pv, vMin, vMax, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool SliderInt2( byte* label,  ref int v,  int vMin,  int vMax,  string format)
		{
			fixed (int* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderInt2Native(label, (int*)pv, vMin, vMax, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSliderInt3")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SliderInt3Native(byte* label, int* v, int vMin, int vMax, byte* format, int flags);

		public static bool SliderInt3( byte* label,  int* v,  int vMin,  int vMax,  byte* format,  int flags)
		{
			byte ret = SliderInt3Native(label, v, vMin, vMax, format, flags);
			return ret != 0;
		}

		public static bool SliderInt3( byte* label,  int* v,  int vMin,  int vMax,  byte* format)
		{
			byte ret = SliderInt3Native(label, v, vMin, vMax, format, (int)(0));
			return ret != 0;
		}

		public static bool SliderInt3( byte* label,  int* v,  int vMin,  int vMax)
		{
			bool ret = SliderInt3(label, v, vMin, vMax, (string)"%d", (int)(0));
			return ret;
		}

		public static bool SliderInt3( byte* label,  int* v,  int vMin,  int vMax,  int flags)
		{
			bool ret = SliderInt3(label, v, vMin, vMax, (string)"%d", flags);
			return ret;
		}

		public static bool SliderInt3( byte* label,  ref int v,  int vMin,  int vMax,  byte* format,  int flags)
		{
			fixed (int* pv = &v)
			{
				byte ret = SliderInt3Native(label, (int*)pv, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		public static bool SliderInt3( byte* label,  ref int v,  int vMin,  int vMax,  byte* format)
		{
			fixed (int* pv = &v)
			{
				byte ret = SliderInt3Native(label, (int*)pv, vMin, vMax, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderInt3( byte* label,  ref int v,  int vMin,  int vMax)
		{
			fixed (int* pv = &v)
			{
				bool ret = SliderInt3(label, (int*)pv, vMin, vMax, (string)"%d", (int)(0));
				return ret;
			}
		}

		public static bool SliderInt3( byte* label,  ref int v,  int vMin,  int vMax,  int flags)
		{
			fixed (int* pv = &v)
			{
				bool ret = SliderInt3(label, (int*)pv, vMin, vMax, (string)"%d", flags);
				return ret;
			}
		}

		public static bool SliderInt3( byte* label,  int* v,  int vMin,  int vMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderInt3Native(label, v, vMin, vMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool SliderInt3( byte* label,  int* v,  int vMin,  int vMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderInt3Native(label, v, vMin, vMax, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderInt3( byte* label,  int* v,  int vMin,  int vMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderInt3Native(label, v, vMin, vMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderInt3( byte* label,  int* v,  int vMin,  int vMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderInt3Native(label, v, vMin, vMax, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderInt3( byte* label,  ref int v,  int vMin,  int vMax,  ref byte format,  int flags)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderInt3Native(label, (int*)pv, vMin, vMax, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool SliderInt3( byte* label,  ref int v,  int vMin,  int vMax,  ref byte format)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderInt3Native(label, (int*)pv, vMin, vMax, (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool SliderInt3( byte* label,  ref int v,  int vMin,  int vMax,  string format,  int flags)
		{
			fixed (int* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderInt3Native(label, (int*)pv, vMin, vMax, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool SliderInt3( byte* label,  ref int v,  int vMin,  int vMax,  string format)
		{
			fixed (int* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderInt3Native(label, (int*)pv, vMin, vMax, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSliderInt4")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SliderInt4Native(byte* label, int* v, int vMin, int vMax, byte* format, int flags);

		public static bool SliderInt4( byte* label,  int* v,  int vMin,  int vMax,  byte* format,  int flags)
		{
			byte ret = SliderInt4Native(label, v, vMin, vMax, format, flags);
			return ret != 0;
		}

		public static bool SliderInt4( byte* label,  int* v,  int vMin,  int vMax,  byte* format)
		{
			byte ret = SliderInt4Native(label, v, vMin, vMax, format, (int)(0));
			return ret != 0;
		}

		public static bool SliderInt4( byte* label,  int* v,  int vMin,  int vMax)
		{
			bool ret = SliderInt4(label, v, vMin, vMax, (string)"%d", (int)(0));
			return ret;
		}

		public static bool SliderInt4( byte* label,  int* v,  int vMin,  int vMax,  int flags)
		{
			bool ret = SliderInt4(label, v, vMin, vMax, (string)"%d", flags);
			return ret;
		}

		public static bool SliderInt4( byte* label,  ref int v,  int vMin,  int vMax,  byte* format,  int flags)
		{
			fixed (int* pv = &v)
			{
				byte ret = SliderInt4Native(label, (int*)pv, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		public static bool SliderInt4( byte* label,  ref int v,  int vMin,  int vMax,  byte* format)
		{
			fixed (int* pv = &v)
			{
				byte ret = SliderInt4Native(label, (int*)pv, vMin, vMax, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderInt4( byte* label,  ref int v,  int vMin,  int vMax)
		{
			fixed (int* pv = &v)
			{
				bool ret = SliderInt4(label, (int*)pv, vMin, vMax, (string)"%d", (int)(0));
				return ret;
			}
		}

		public static bool SliderInt4( byte* label,  ref int v,  int vMin,  int vMax,  int flags)
		{
			fixed (int* pv = &v)
			{
				bool ret = SliderInt4(label, (int*)pv, vMin, vMax, (string)"%d", flags);
				return ret;
			}
		}

		public static bool SliderInt4( byte* label,  int* v,  int vMin,  int vMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderInt4Native(label, v, vMin, vMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool SliderInt4( byte* label,  int* v,  int vMin,  int vMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderInt4Native(label, v, vMin, vMax, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderInt4( byte* label,  int* v,  int vMin,  int vMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderInt4Native(label, v, vMin, vMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderInt4( byte* label,  int* v,  int vMin,  int vMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderInt4Native(label, v, vMin, vMax, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderInt4( byte* label,  ref int v,  int vMin,  int vMax,  ref byte format,  int flags)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderInt4Native(label, (int*)pv, vMin, vMax, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool SliderInt4( byte* label,  ref int v,  int vMin,  int vMax,  ref byte format)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = SliderInt4Native(label, (int*)pv, vMin, vMax, (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool SliderInt4( byte* label,  ref int v,  int vMin,  int vMax,  string format,  int flags)
		{
			fixed (int* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderInt4Native(label, (int*)pv, vMin, vMax, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool SliderInt4( byte* label,  ref int v,  int vMin,  int vMax,  string format)
		{
			fixed (int* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SliderInt4Native(label, (int*)pv, vMin, vMax, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSliderScalar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SliderScalarNative(byte* label, int dataType, void* pData, void* pMin, void* pMax, byte* format, int flags);

		public static bool SliderScalar( byte* label,  int dataType,  void* pData,  void* pMin,  void* pMax,  byte* format,  int flags)
		{
			byte ret = SliderScalarNative(label, dataType, pData, pMin, pMax, format, flags);
			return ret != 0;
		}

		public static bool SliderScalar( byte* label,  int dataType,  void* pData,  void* pMin,  void* pMax,  byte* format)
		{
			byte ret = SliderScalarNative(label, dataType, pData, pMin, pMax, format, (int)(0));
			return ret != 0;
		}

		public static bool SliderScalar( byte* label,  int dataType,  void* pData,  void* pMin,  void* pMax)
		{
			byte ret = SliderScalarNative(label, dataType, pData, pMin, pMax, (byte*)(default), (int)(0));
			return ret != 0;
		}

		public static bool SliderScalar( byte* label,  int dataType,  void* pData,  void* pMin,  void* pMax,  int flags)
		{
			byte ret = SliderScalarNative(label, dataType, pData, pMin, pMax, (byte*)(default), flags);
			return ret != 0;
		}

		public static bool SliderScalar( byte* label,  int dataType,  void* pData,  void* pMin,  void* pMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderScalarNative(label, dataType, pData, pMin, pMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool SliderScalar( byte* label,  int dataType,  void* pData,  void* pMin,  void* pMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderScalarNative(label, dataType, pData, pMin, pMax, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderScalar( byte* label,  int dataType,  void* pData,  void* pMin,  void* pMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderScalarNative(label, dataType, pData, pMin, pMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderScalar( byte* label,  int dataType,  void* pData,  void* pMin,  void* pMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderScalarNative(label, dataType, pData, pMin, pMax, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSliderScalarN")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SliderScalarNNative(byte* label, int dataType, void* pData, int components, void* pMin, void* pMax, byte* format, int flags);

		public static bool SliderScalarN( byte* label,  int dataType,  void* pData,  int components,  void* pMin,  void* pMax,  byte* format,  int flags)
		{
			byte ret = SliderScalarNNative(label, dataType, pData, components, pMin, pMax, format, flags);
			return ret != 0;
		}

		public static bool SliderScalarN( byte* label,  int dataType,  void* pData,  int components,  void* pMin,  void* pMax,  byte* format)
		{
			byte ret = SliderScalarNNative(label, dataType, pData, components, pMin, pMax, format, (int)(0));
			return ret != 0;
		}

		public static bool SliderScalarN( byte* label,  int dataType,  void* pData,  int components,  void* pMin,  void* pMax)
		{
			byte ret = SliderScalarNNative(label, dataType, pData, components, pMin, pMax, (byte*)(default), (int)(0));
			return ret != 0;
		}

		public static bool SliderScalarN( byte* label,  int dataType,  void* pData,  int components,  void* pMin,  void* pMax,  int flags)
		{
			byte ret = SliderScalarNNative(label, dataType, pData, components, pMin, pMax, (byte*)(default), flags);
			return ret != 0;
		}

		public static bool SliderScalarN( byte* label,  int dataType,  void* pData,  int components,  void* pMin,  void* pMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderScalarNNative(label, dataType, pData, components, pMin, pMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool SliderScalarN( byte* label,  int dataType,  void* pData,  int components,  void* pMin,  void* pMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderScalarNNative(label, dataType, pData, components, pMin, pMax, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool SliderScalarN( byte* label,  int dataType,  void* pData,  int components,  void* pMin,  void* pMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderScalarNNative(label, dataType, pData, components, pMin, pMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool SliderScalarN( byte* label,  int dataType,  void* pData,  int components,  void* pMin,  void* pMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderScalarNNative(label, dataType, pData, components, pMin, pMax, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igVSliderFloat")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte VSliderFloatNative(byte* label, Vector2 size, float* v, float vMin, float vMax, byte* format, int flags);

		public static bool VSliderFloat( byte* label,  Vector2 size,  float* v,  float vMin,  float vMax,  byte* format,  int flags)
		{
			byte ret = VSliderFloatNative(label, size, v, vMin, vMax, format, flags);
			return ret != 0;
		}

		public static bool VSliderFloat( byte* label,  Vector2 size,  float* v,  float vMin,  float vMax,  byte* format)
		{
			byte ret = VSliderFloatNative(label, size, v, vMin, vMax, format, (int)(0));
			return ret != 0;
		}

		public static bool VSliderFloat( byte* label,  Vector2 size,  float* v,  float vMin,  float vMax)
		{
			bool ret = VSliderFloat(label, size, v, vMin, vMax, (string)"%.3f", (int)(0));
			return ret;
		}

		public static bool VSliderFloat( byte* label,  Vector2 size,  float* v,  float vMin,  float vMax,  int flags)
		{
			bool ret = VSliderFloat(label, size, v, vMin, vMax, (string)"%.3f", flags);
			return ret;
		}

		public static bool VSliderFloat( byte* label,  Vector2 size,  ref float v,  float vMin,  float vMax,  byte* format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = VSliderFloatNative(label, size, (float*)pv, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		public static bool VSliderFloat( byte* label,  Vector2 size,  ref float v,  float vMin,  float vMax,  byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = VSliderFloatNative(label, size, (float*)pv, vMin, vMax, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool VSliderFloat( byte* label,  Vector2 size,  ref float v,  float vMin,  float vMax)
		{
			fixed (float* pv = &v)
			{
				bool ret = VSliderFloat(label, size, (float*)pv, vMin, vMax, (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool VSliderFloat( byte* label,  Vector2 size,  ref float v,  float vMin,  float vMax,  int flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = VSliderFloat(label, size, (float*)pv, vMin, vMax, (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool VSliderFloat( byte* label,  Vector2 size,  float* v,  float vMin,  float vMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = VSliderFloatNative(label, size, v, vMin, vMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool VSliderFloat( byte* label,  Vector2 size,  float* v,  float vMin,  float vMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = VSliderFloatNative(label, size, v, vMin, vMax, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool VSliderFloat( byte* label,  Vector2 size,  float* v,  float vMin,  float vMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = VSliderFloatNative(label, size, v, vMin, vMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool VSliderFloat( byte* label,  Vector2 size,  float* v,  float vMin,  float vMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = VSliderFloatNative(label, size, v, vMin, vMax, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool VSliderFloat( byte* label,  Vector2 size,  ref float v,  float vMin,  float vMax,  ref byte format,  int flags)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = VSliderFloatNative(label, size, (float*)pv, vMin, vMax, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool VSliderFloat( byte* label,  Vector2 size,  ref float v,  float vMin,  float vMax,  ref byte format)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = VSliderFloatNative(label, size, (float*)pv, vMin, vMax, (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool VSliderFloat( byte* label,  Vector2 size,  ref float v,  float vMin,  float vMax,  string format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = VSliderFloatNative(label, size, (float*)pv, vMin, vMax, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool VSliderFloat( byte* label,  Vector2 size,  ref float v,  float vMin,  float vMax,  string format)
		{
			fixed (float* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = VSliderFloatNative(label, size, (float*)pv, vMin, vMax, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igVSliderInt")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte VSliderIntNative(byte* label, Vector2 size, int* v, int vMin, int vMax, byte* format, int flags);

		public static bool VSliderInt( byte* label,  Vector2 size,  int* v,  int vMin,  int vMax,  byte* format,  int flags)
		{
			byte ret = VSliderIntNative(label, size, v, vMin, vMax, format, flags);
			return ret != 0;
		}

		public static bool VSliderInt( byte* label,  Vector2 size,  int* v,  int vMin,  int vMax,  byte* format)
		{
			byte ret = VSliderIntNative(label, size, v, vMin, vMax, format, (int)(0));
			return ret != 0;
		}

		public static bool VSliderInt( byte* label,  Vector2 size,  int* v,  int vMin,  int vMax)
		{
			bool ret = VSliderInt(label, size, v, vMin, vMax, (string)"%d", (int)(0));
			return ret;
		}

		public static bool VSliderInt( byte* label,  Vector2 size,  int* v,  int vMin,  int vMax,  int flags)
		{
			bool ret = VSliderInt(label, size, v, vMin, vMax, (string)"%d", flags);
			return ret;
		}

		public static bool VSliderInt( byte* label,  Vector2 size,  ref int v,  int vMin,  int vMax,  byte* format,  int flags)
		{
			fixed (int* pv = &v)
			{
				byte ret = VSliderIntNative(label, size, (int*)pv, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		public static bool VSliderInt( byte* label,  Vector2 size,  ref int v,  int vMin,  int vMax,  byte* format)
		{
			fixed (int* pv = &v)
			{
				byte ret = VSliderIntNative(label, size, (int*)pv, vMin, vMax, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool VSliderInt( byte* label,  Vector2 size,  ref int v,  int vMin,  int vMax)
		{
			fixed (int* pv = &v)
			{
				bool ret = VSliderInt(label, size, (int*)pv, vMin, vMax, (string)"%d", (int)(0));
				return ret;
			}
		}

		public static bool VSliderInt( byte* label,  Vector2 size,  ref int v,  int vMin,  int vMax,  int flags)
		{
			fixed (int* pv = &v)
			{
				bool ret = VSliderInt(label, size, (int*)pv, vMin, vMax, (string)"%d", flags);
				return ret;
			}
		}

		public static bool VSliderInt( byte* label,  Vector2 size,  int* v,  int vMin,  int vMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = VSliderIntNative(label, size, v, vMin, vMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool VSliderInt( byte* label,  Vector2 size,  int* v,  int vMin,  int vMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = VSliderIntNative(label, size, v, vMin, vMax, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool VSliderInt( byte* label,  Vector2 size,  int* v,  int vMin,  int vMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = VSliderIntNative(label, size, v, vMin, vMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool VSliderInt( byte* label,  Vector2 size,  int* v,  int vMin,  int vMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = VSliderIntNative(label, size, v, vMin, vMax, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool VSliderInt( byte* label,  Vector2 size,  ref int v,  int vMin,  int vMax,  ref byte format,  int flags)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = VSliderIntNative(label, size, (int*)pv, vMin, vMax, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool VSliderInt( byte* label,  Vector2 size,  ref int v,  int vMin,  int vMax,  ref byte format)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = VSliderIntNative(label, size, (int*)pv, vMin, vMax, (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool VSliderInt( byte* label,  Vector2 size,  ref int v,  int vMin,  int vMax,  string format,  int flags)
		{
			fixed (int* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = VSliderIntNative(label, size, (int*)pv, vMin, vMax, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool VSliderInt( byte* label,  Vector2 size,  ref int v,  int vMin,  int vMax,  string format)
		{
			fixed (int* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = VSliderIntNative(label, size, (int*)pv, vMin, vMax, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igVSliderScalar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte VSliderScalarNative(byte* label, Vector2 size, int dataType, void* pData, void* pMin, void* pMax, byte* format, int flags);

		public static bool VSliderScalar( byte* label,  Vector2 size,  int dataType,  void* pData,  void* pMin,  void* pMax,  byte* format,  int flags)
		{
			byte ret = VSliderScalarNative(label, size, dataType, pData, pMin, pMax, format, flags);
			return ret != 0;
		}

		public static bool VSliderScalar( byte* label,  Vector2 size,  int dataType,  void* pData,  void* pMin,  void* pMax,  byte* format)
		{
			byte ret = VSliderScalarNative(label, size, dataType, pData, pMin, pMax, format, (int)(0));
			return ret != 0;
		}

		public static bool VSliderScalar( byte* label,  Vector2 size,  int dataType,  void* pData,  void* pMin,  void* pMax)
		{
			byte ret = VSliderScalarNative(label, size, dataType, pData, pMin, pMax, (byte*)(default), (int)(0));
			return ret != 0;
		}

		public static bool VSliderScalar( byte* label,  Vector2 size,  int dataType,  void* pData,  void* pMin,  void* pMax,  int flags)
		{
			byte ret = VSliderScalarNative(label, size, dataType, pData, pMin, pMax, (byte*)(default), flags);
			return ret != 0;
		}

		public static bool VSliderScalar( byte* label,  Vector2 size,  int dataType,  void* pData,  void* pMin,  void* pMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = VSliderScalarNative(label, size, dataType, pData, pMin, pMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool VSliderScalar( byte* label,  Vector2 size,  int dataType,  void* pData,  void* pMin,  void* pMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = VSliderScalarNative(label, size, dataType, pData, pMin, pMax, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool VSliderScalar( byte* label,  Vector2 size,  int dataType,  void* pData,  void* pMin,  void* pMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = VSliderScalarNative(label, size, dataType, pData, pMin, pMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool VSliderScalar( byte* label,  Vector2 size,  int dataType,  void* pData,  void* pMin,  void* pMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = VSliderScalarNative(label, size, dataType, pData, pMin, pMax, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igInputFloat")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte InputFloatNative(byte* label, float* v, float step, float stepFast, byte* format, int flags);

		public static bool InputFloat( byte* label,  float* v,  float step,  float stepFast,  byte* format,  int flags)
		{
			byte ret = InputFloatNative(label, v, step, stepFast, format, flags);
			return ret != 0;
		}

		public static bool InputFloat( byte* label,  float* v,  float step,  float stepFast,  byte* format)
		{
			byte ret = InputFloatNative(label, v, step, stepFast, format, (int)(0));
			return ret != 0;
		}

		public static bool InputFloat( byte* label,  float* v,  float step,  float stepFast)
		{
			bool ret = InputFloat(label, v, step, stepFast, (string)"%.3f", (int)(0));
			return ret;
		}

		public static bool InputFloat( byte* label,  float* v,  float step)
		{
			bool ret = InputFloat(label, v, step, (float)(0.0f), (string)"%.3f", (int)(0));
			return ret;
		}

		public static bool InputFloat( byte* label,  float* v)
		{
			bool ret = InputFloat(label, v, (float)(0.0f), (float)(0.0f), (string)"%.3f", (int)(0));
			return ret;
		}

		public static bool InputFloat( byte* label,  float* v,  float step,  byte* format)
		{
			byte ret = InputFloatNative(label, v, step, (float)(0.0f), format, (int)(0));
			return ret != 0;
		}

		public static bool InputFloat( byte* label,  float* v,  byte* format)
		{
			byte ret = InputFloatNative(label, v, (float)(0.0f), (float)(0.0f), format, (int)(0));
			return ret != 0;
		}

		public static bool InputFloat( byte* label,  float* v,  float step,  float stepFast,  int flags)
		{
			bool ret = InputFloat(label, v, step, stepFast, (string)"%.3f", flags);
			return ret;
		}

		public static bool InputFloat( byte* label,  float* v,  float step,  int flags)
		{
			bool ret = InputFloat(label, v, step, (float)(0.0f), (string)"%.3f", flags);
			return ret;
		}

		public static bool InputFloat( byte* label,  float* v,  int flags)
		{
			bool ret = InputFloat(label, v, (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
			return ret;
		}

		public static bool InputFloat( byte* label,  float* v,  float step,  byte* format,  int flags)
		{
			byte ret = InputFloatNative(label, v, step, (float)(0.0f), format, flags);
			return ret != 0;
		}

		public static bool InputFloat( byte* label,  float* v,  byte* format,  int flags)
		{
			byte ret = InputFloatNative(label, v, (float)(0.0f), (float)(0.0f), format, flags);
			return ret != 0;
		}

		public static bool InputFloat( byte* label,  ref float v,  float step,  float stepFast,  byte* format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = InputFloatNative(label, (float*)pv, step, stepFast, format, flags);
				return ret != 0;
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  float step,  float stepFast,  byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = InputFloatNative(label, (float*)pv, step, stepFast, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  float step,  float stepFast)
		{
			fixed (float* pv = &v)
			{
				bool ret = InputFloat(label, (float*)pv, step, stepFast, (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  float step)
		{
			fixed (float* pv = &v)
			{
				bool ret = InputFloat(label, (float*)pv, step, (float)(0.0f), (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool InputFloat( byte* label,  ref float v)
		{
			fixed (float* pv = &v)
			{
				bool ret = InputFloat(label, (float*)pv, (float)(0.0f), (float)(0.0f), (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  float step,  byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = InputFloatNative(label, (float*)pv, step, (float)(0.0f), format, (int)(0));
				return ret != 0;
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = InputFloatNative(label, (float*)pv, (float)(0.0f), (float)(0.0f), format, (int)(0));
				return ret != 0;
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  float step,  float stepFast,  int flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = InputFloat(label, (float*)pv, step, stepFast, (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  float step,  int flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = InputFloat(label, (float*)pv, step, (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  int flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = InputFloat(label, (float*)pv, (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  float step,  byte* format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = InputFloatNative(label, (float*)pv, step, (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  byte* format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = InputFloatNative(label, (float*)pv, (float)(0.0f), (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		public static bool InputFloat( byte* label,  float* v,  float step,  float stepFast,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputFloatNative(label, v, step, stepFast, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool InputFloat( byte* label,  float* v,  float step,  float stepFast,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputFloatNative(label, v, step, stepFast, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool InputFloat( byte* label,  float* v,  float step,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputFloatNative(label, v, step, (float)(0.0f), (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool InputFloat( byte* label,  float* v,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputFloatNative(label, v, (float)(0.0f), (float)(0.0f), (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool InputFloat( byte* label,  float* v,  float step,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputFloatNative(label, v, step, (float)(0.0f), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool InputFloat( byte* label,  float* v,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputFloatNative(label, v, (float)(0.0f), (float)(0.0f), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool InputFloat( byte* label,  float* v,  float step,  float stepFast,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputFloatNative(label, v, step, stepFast, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool InputFloat( byte* label,  float* v,  float step,  float stepFast,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputFloatNative(label, v, step, stepFast, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool InputFloat( byte* label,  float* v,  float step,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputFloatNative(label, v, step, (float)(0.0f), pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool InputFloat( byte* label,  float* v,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputFloatNative(label, v, (float)(0.0f), (float)(0.0f), pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool InputFloat( byte* label,  float* v,  float step,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputFloatNative(label, v, step, (float)(0.0f), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool InputFloat( byte* label,  float* v,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputFloatNative(label, v, (float)(0.0f), (float)(0.0f), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool InputFloat( byte* label,  ref float v,  float step,  float stepFast,  ref byte format,  int flags)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputFloatNative(label, (float*)pv, step, stepFast, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  float step,  float stepFast,  ref byte format)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputFloatNative(label, (float*)pv, step, stepFast, (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  float step,  ref byte format)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputFloatNative(label, (float*)pv, step, (float)(0.0f), (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  ref byte format)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputFloatNative(label, (float*)pv, (float)(0.0f), (float)(0.0f), (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  float step,  ref byte format,  int flags)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputFloatNative(label, (float*)pv, step, (float)(0.0f), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  ref byte format,  int flags)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputFloatNative(label, (float*)pv, (float)(0.0f), (float)(0.0f), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  float step,  float stepFast,  string format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = InputFloatNative(label, (float*)pv, step, stepFast, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  float step,  float stepFast,  string format)
		{
			fixed (float* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = InputFloatNative(label, (float*)pv, step, stepFast, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  float step,  string format)
		{
			fixed (float* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = InputFloatNative(label, (float*)pv, step, (float)(0.0f), pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  string format)
		{
			fixed (float* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = InputFloatNative(label, (float*)pv, (float)(0.0f), (float)(0.0f), pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  float step,  string format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = InputFloatNative(label, (float*)pv, step, (float)(0.0f), pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool InputFloat( byte* label,  ref float v,  string format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = InputFloatNative(label, (float*)pv, (float)(0.0f), (float)(0.0f), pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igInputFloat2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte InputFloat2Native(byte* label, float* v, byte* format, int flags);

		public static bool InputFloat2( byte* label,  float* v,  byte* format,  int flags)
		{
			byte ret = InputFloat2Native(label, v, format, flags);
			return ret != 0;
		}

		public static bool InputFloat2( byte* label,  float* v,  byte* format)
		{
			byte ret = InputFloat2Native(label, v, format, (int)(0));
			return ret != 0;
		}

		public static bool InputFloat2( byte* label,  float* v)
		{
			bool ret = InputFloat2(label, v, (string)"%.3f", (int)(0));
			return ret;
		}

		public static bool InputFloat2( byte* label,  float* v,  int flags)
		{
			bool ret = InputFloat2(label, v, (string)"%.3f", flags);
			return ret;
		}

		public static bool InputFloat2( byte* label,  ref float v,  byte* format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = InputFloat2Native(label, (float*)pv, format, flags);
				return ret != 0;
			}
		}

		public static bool InputFloat2( byte* label,  ref float v,  byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = InputFloat2Native(label, (float*)pv, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool InputFloat2( byte* label,  ref float v)
		{
			fixed (float* pv = &v)
			{
				bool ret = InputFloat2(label, (float*)pv, (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool InputFloat2( byte* label,  ref float v,  int flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = InputFloat2(label, (float*)pv, (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool InputFloat2( byte* label,  ref Vector2 v,  byte* format,  int flags)
		{
			fixed (Vector2* pv = &v)
			{
				byte ret = InputFloat2Native(label, (float*)pv, format, flags);
				return ret != 0;
			}
		}

		public static bool InputFloat2( byte* label,  ref Vector2 v,  byte* format)
		{
			fixed (Vector2* pv = &v)
			{
				byte ret = InputFloat2Native(label, (float*)pv, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool InputFloat2( byte* label,  ref Vector2 v)
		{
			fixed (Vector2* pv = &v)
			{
				bool ret = InputFloat2(label, (float*)pv, (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool InputFloat2( byte* label,  ref Vector2 v,  int flags)
		{
			fixed (Vector2* pv = &v)
			{
				bool ret = InputFloat2(label, (float*)pv, (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool InputFloat2( byte* label,  float* v,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputFloat2Native(label, v, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool InputFloat2( byte* label,  float* v,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputFloat2Native(label, v, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool InputFloat2( byte* label,  float* v,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputFloat2Native(label, v, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool InputFloat2( byte* label,  float* v,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputFloat2Native(label, v, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool InputFloat2( byte* label,  ref float v,  ref byte format,  int flags)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputFloat2Native(label, (float*)pv, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool InputFloat2( byte* label,  ref float v,  ref byte format)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputFloat2Native(label, (float*)pv, (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool InputFloat2( byte* label,  ref Vector2 v,  string format,  int flags)
		{
			fixed (Vector2* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = InputFloat2Native(label, (float*)pv, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool InputFloat2( byte* label,  ref Vector2 v,  string format)
		{
			fixed (Vector2* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = InputFloat2Native(label, (float*)pv, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igInputFloat3")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte InputFloat3Native(byte* label, float* v, byte* format, int flags);

		public static bool InputFloat3( byte* label,  float* v,  byte* format,  int flags)
		{
			byte ret = InputFloat3Native(label, v, format, flags);
			return ret != 0;
		}

		public static bool InputFloat3( byte* label,  float* v,  byte* format)
		{
			byte ret = InputFloat3Native(label, v, format, (int)(0));
			return ret != 0;
		}

		public static bool InputFloat3( byte* label,  float* v)
		{
			bool ret = InputFloat3(label, v, (string)"%.3f", (int)(0));
			return ret;
		}

		public static bool InputFloat3( byte* label,  float* v,  int flags)
		{
			bool ret = InputFloat3(label, v, (string)"%.3f", flags);
			return ret;
		}

		public static bool InputFloat3( byte* label,  ref float v,  byte* format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = InputFloat3Native(label, (float*)pv, format, flags);
				return ret != 0;
			}
		}

		public static bool InputFloat3( byte* label,  ref float v,  byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = InputFloat3Native(label, (float*)pv, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool InputFloat3( byte* label,  ref float v)
		{
			fixed (float* pv = &v)
			{
				bool ret = InputFloat3(label, (float*)pv, (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool InputFloat3( byte* label,  ref float v,  int flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = InputFloat3(label, (float*)pv, (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool InputFloat3( byte* label,  ref Vector3 v,  byte* format,  int flags)
		{
			fixed (Vector3* pv = &v)
			{
				byte ret = InputFloat3Native(label, (float*)pv, format, flags);
				return ret != 0;
			}
		}

		public static bool InputFloat3( byte* label,  ref Vector3 v,  byte* format)
		{
			fixed (Vector3* pv = &v)
			{
				byte ret = InputFloat3Native(label, (float*)pv, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool InputFloat3( byte* label,  ref Vector3 v)
		{
			fixed (Vector3* pv = &v)
			{
				bool ret = InputFloat3(label, (float*)pv, (string)"%.3f", (int)(0));
				return ret;
			}
		}

		public static bool InputFloat3( byte* label,  ref Vector3 v,  int flags)
		{
			fixed (Vector3* pv = &v)
			{
				bool ret = InputFloat3(label, (float*)pv, (string)"%.3f", flags);
				return ret;
			}
		}

		public static bool InputFloat3( byte* label,  float* v,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputFloat3Native(label, v, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool InputFloat3( byte* label,  float* v,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputFloat3Native(label, v, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool InputFloat3( byte* label,  float* v,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputFloat3Native(label, v, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool InputFloat3( byte* label,  float* v,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputFloat3Native(label, v, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool InputFloat3( byte* label,  ref float v,  ref byte format,  int flags)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputFloat3Native(label, (float*)pv, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool InputFloat3( byte* label,  ref float v,  ref byte format)
		{
			fixed (float* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputFloat3Native(label, (float*)pv, (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool InputFloat3( byte* label,  ref Vector3 v,  string format,  int flags)
		{
			fixed (Vector3* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = InputFloat3Native(label, (float*)pv, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool InputFloat3( byte* label,  ref Vector3 v,  string format)
		{
			fixed (Vector3* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = InputFloat3Native(label, (float*)pv, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igInputFloat4")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte InputFloat4Native(byte* label, float* v, byte* format, int flags);

		public static bool InputFloat4( byte* label,  float* v,  byte* format,  int flags)
		{
			byte ret = InputFloat4Native(label, v, format, flags);
			return ret != 0;
		}

		public static bool InputFloat4( byte* label,  float* v,  byte* format)
		{
			byte ret = InputFloat4Native(label, v, format, (int)(0));
			return ret != 0;
		}

		public static bool InputFloat4( byte* label,  float* v)
		{
			bool ret = InputFloat4(label, v, (string)"%.3f", (int)(0));
			return ret;
		}

		public static bool InputFloat4( byte* label,  float* v,  int flags)
		{
			bool ret = InputFloat4(label, v, (string)"%.3f", flags);
			return ret;
		}

		public static bool InputFloat4( byte* label,  ref float v,  byte* format,  int flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = InputFloat4Native(label, (float*)pv, format, flags);
				return ret != 0;
			}
		}

		public static bool InputFloat4( byte* label,  ref float v,  byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = InputFloat4Native(label, (float*)pv, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool InputFloat4( byte* label,  ref float v)
		{
			fixed (float* pv = &v)
			{
				bool ret = InputFloat4(label, (float*)pv, (string)"%.3f", (int)(0));
				return ret;
			}
		}
	}
}
