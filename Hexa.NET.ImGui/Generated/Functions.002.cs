// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, pStr0, formatMax, flags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, pStr0, formatMax, (int)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, pStr0, (byte*)(default), (int)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  string format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, (byte*)(default), (int)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  string format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, (byte*)(default), (int)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  string format)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, (byte*)(default), (int)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  string format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, formatMax, (int)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  string format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, formatMax, (int)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  string format,  byte* formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, formatMax, (int)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, pStr0, (byte*)(default), flags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  string format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, (byte*)(default), flags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  string format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, (byte*)(default), flags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  string format,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, (byte*)(default), flags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  string format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, formatMax, flags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  string format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, formatMax, flags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  string format,  byte* formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, formatMax, flags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  ref byte formatMax,  int flags)
		{
			fixed (byte* pformatMax = &formatMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, format, (byte*)pformatMax, flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  ref byte formatMax)
		{
			fixed (byte* pformatMax = &formatMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, format, (byte*)pformatMax, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  byte* format,  ref byte formatMax)
		{
			fixed (byte* pformatMax = &formatMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), format, (byte*)pformatMax, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  byte* format,  ref byte formatMax)
		{
			fixed (byte* pformatMax = &formatMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, (byte*)pformatMax, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  byte* format,  ref byte formatMax)
		{
			fixed (byte* pformatMax = &formatMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (byte*)pformatMax, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  byte* format,  ref byte formatMax,  int flags)
		{
			fixed (byte* pformatMax = &formatMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), format, (byte*)pformatMax, flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  byte* format,  ref byte formatMax,  int flags)
		{
			fixed (byte* pformatMax = &formatMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, (byte*)pformatMax, flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  byte* format,  ref byte formatMax,  int flags)
		{
			fixed (byte* pformatMax = &formatMax)
			{
				byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (byte*)pformatMax, flags);
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  string formatMax,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (formatMax != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(formatMax);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, format, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  string formatMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (formatMax != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(formatMax);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, format, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  byte* format,  string formatMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (formatMax != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(formatMax);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), format, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  byte* format,  string formatMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (formatMax != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(formatMax);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  byte* format,  string formatMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (formatMax != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(formatMax);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  byte* format,  string formatMax,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (formatMax != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(formatMax);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), format, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  byte* format,  string formatMax,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (formatMax != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(formatMax);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  byte* format,  string formatMax,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (formatMax != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(formatMax);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, format, (byte*)pformatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, format, (byte*)pformatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  byte* format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), format, (byte*)pformatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  byte* format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, (byte*)pformatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  byte* format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (byte*)pformatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  byte* format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), format, (byte*)pformatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  byte* format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, (byte*)pformatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  byte* format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (byte*)pformatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (formatMax != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, format, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  string formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (formatMax != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, format, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  byte* format,  string formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (formatMax != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), format, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  byte* format,  string formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (formatMax != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  byte* format,  string formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (formatMax != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  byte* format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (formatMax != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), format, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  byte* format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (formatMax != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  byte* format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (formatMax != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, format, (byte*)pformatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, format, (byte*)pformatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  byte* format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), format, (byte*)pformatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  byte* format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, (byte*)pformatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  byte* format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (byte*)pformatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  byte* format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), format, (byte*)pformatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  byte* format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, (byte*)pformatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  byte* format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (byte*)pformatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (formatMax != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, format, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  string formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (formatMax != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, format, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  byte* format,  string formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (formatMax != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), format, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  byte* format,  string formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (formatMax != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  byte* format,  string formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (formatMax != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  byte* format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (formatMax != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), format, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  byte* format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (formatMax != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  byte* format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (formatMax != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, format, (byte*)pformatMax, flags);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, format, (byte*)pformatMax, (int)(0));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  byte* format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), format, (byte*)pformatMax, (int)(0));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  byte* format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, (byte*)pformatMax, (int)(0));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  byte* format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (byte*)pformatMax, (int)(0));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  byte* format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), format, (byte*)pformatMax, flags);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  byte* format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, (byte*)pformatMax, flags);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  byte* format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (byte*)pformatMax, flags);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (formatMax != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(formatMax);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, format, pStr0, flags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  byte* format,  string formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (formatMax != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(formatMax);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, format, pStr0, (int)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  byte* format,  string formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (formatMax != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(formatMax);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), format, pStr0, (int)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  byte* format,  string formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (formatMax != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(formatMax);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, pStr0, (int)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  byte* format,  string formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (formatMax != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(formatMax);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, pStr0, (int)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  byte* format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (formatMax != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(formatMax);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), format, pStr0, flags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  byte* format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (formatMax != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(formatMax);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), format, pStr0, flags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  byte* format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (formatMax != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(formatMax);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(formatMax, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, pStr0, flags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format,  ref byte formatMax,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, (byte*)pformatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format,  ref byte formatMax)
		{
			fixed (byte* pformat = &format)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, (byte*)pformatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  ref byte format,  ref byte formatMax)
		{
			fixed (byte* pformat = &format)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, (byte*)pformatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  ref byte format,  ref byte formatMax)
		{
			fixed (byte* pformat = &format)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)pformatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  ref byte format,  ref byte formatMax)
		{
			fixed (byte* pformat = &format)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)pformatMax, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  ref byte format,  ref byte formatMax,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, (byte*)pformatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  ref byte format,  ref byte formatMax,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)pformatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  ref byte format,  ref byte formatMax,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				fixed (byte* pformatMax = &formatMax)
				{
					byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)pformatMax, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format,  string formatMax,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (formatMax != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(formatMax);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, pStr0, pStr1, flags);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format,  string formatMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (formatMax != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(formatMax);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, vMax, pStr0, pStr1, (int)(0));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  string format,  string formatMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (formatMax != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(formatMax);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, pStr1, (int)(0));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  string format,  string formatMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (formatMax != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(formatMax);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, pStr1, (int)(0));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  string format,  string formatMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (formatMax != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(formatMax);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, pStr1, (int)(0));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  string format,  string formatMax,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (formatMax != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(formatMax);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, pStr1, flags);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  float vSpeed,  string format,  string formatMax,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (formatMax != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(formatMax);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, pStr1, flags);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  float* vCurrentMax,  string format,  string formatMax,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (formatMax != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(formatMax);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = DragFloatRange2Native(label, vCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, pStr1, flags);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, (byte*)pformatMax, flags);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, (byte*)pformatMax, (int)(0));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  ref byte format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, (byte*)pformatMax, (int)(0));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  ref byte format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)pformatMax, (int)(0));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  ref byte format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)pformatMax, (int)(0));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  ref byte format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, (byte*)pformatMax, flags);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  ref byte format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)pformatMax, flags);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  ref byte format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (byte* pformat = &format)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)pformatMax, flags);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (formatMax != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, pStr0, pStr1, flags);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format,  string formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (formatMax != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, vMax, pStr0, pStr1, (int)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  string format,  string formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (formatMax != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, pStr1, (int)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  string format,  string formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (formatMax != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, pStr1, (int)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  string format,  string formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (formatMax != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, pStr1, (int)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  float vMin,  string format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (formatMax != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, pStr1, flags);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  float vSpeed,  string format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (formatMax != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, pStr1, flags);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  float* vCurrentMax,  string format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (formatMax != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, vCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, pStr1, flags);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, (byte*)pformatMax, flags);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, (byte*)pformatMax, (int)(0));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  ref byte format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, (byte*)pformatMax, (int)(0));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  ref byte format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)pformatMax, (int)(0));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  ref byte format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)pformatMax, (int)(0));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  ref byte format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, (byte*)pformatMax, flags);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  ref byte format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)pformatMax, flags);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  ref byte format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				fixed (byte* pformat = &format)
				{
					fixed (byte* pformatMax = &formatMax)
					{
						byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)pformatMax, flags);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (formatMax != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, pStr0, pStr1, flags);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format,  string formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (formatMax != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, pStr0, pStr1, (int)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  string format,  string formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (formatMax != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, pStr1, (int)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  string format,  string formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (formatMax != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, pStr1, (int)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  string format,  string formatMax)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (formatMax != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, pStr1, (int)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  string format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (formatMax != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, pStr1, flags);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  float vSpeed,  string format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (formatMax != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, pStr1, flags);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  float* vCurrentMin,  ref float vCurrentMax,  string format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMax = &vCurrentMax)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (formatMax != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(formatMax);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = DragFloatRange2Native(label, vCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, pStr1, flags);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						fixed (byte* pformatMax = &formatMax)
						{
							byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, (byte*)pformatMax, flags);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  ref byte format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						fixed (byte* pformatMax = &formatMax)
						{
							byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, (byte*)pformat, (byte*)pformatMax, (int)(0));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  ref byte format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						fixed (byte* pformatMax = &formatMax)
						{
							byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, (byte*)pformatMax, (int)(0));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  ref byte format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						fixed (byte* pformatMax = &formatMax)
						{
							byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)pformatMax, (int)(0));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  ref byte format,  ref byte formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						fixed (byte* pformatMax = &formatMax)
						{
							byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)pformatMax, (int)(0));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  ref byte format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						fixed (byte* pformatMax = &formatMax)
						{
							byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), (byte*)pformat, (byte*)pformatMax, flags);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  ref byte format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						fixed (byte* pformatMax = &formatMax)
						{
							byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)pformatMax, flags);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  ref byte format,  ref byte formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					fixed (byte* pformat = &format)
					{
						fixed (byte* pformatMax = &formatMax)
						{
							byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), (byte*)pformat, (byte*)pformatMax, flags);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (formatMax != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(formatMax);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, pStr0, pStr1, flags);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  float vMax,  string format,  string formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (formatMax != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(formatMax);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, vMax, pStr0, pStr1, (int)(0));
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  string format,  string formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (formatMax != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(formatMax);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, pStr1, (int)(0));
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  string format,  string formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (formatMax != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(formatMax);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, pStr1, (int)(0));
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  string format,  string formatMax)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (formatMax != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(formatMax);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, pStr1, (int)(0));
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  float vMin,  string format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (formatMax != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(formatMax);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, vMin, (float)(0.0f), pStr0, pStr1, flags);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  float vSpeed,  string format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (formatMax != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(formatMax);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, vSpeed, (float)(0.0f), (float)(0.0f), pStr0, pStr1, flags);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		public static bool DragFloatRange2( byte* label,  ref float vCurrentMin,  ref float vCurrentMax,  string format,  string formatMax,  int flags)
		{
			fixed (float* pvCurrentMin = &vCurrentMin)
			{
				fixed (float* pvCurrentMax = &vCurrentMax)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (format != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(format);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (formatMax != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(formatMax);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(formatMax, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					byte ret = DragFloatRange2Native(label, (float*)pvCurrentMin, (float*)pvCurrentMax, (float)(1.0f), (float)(0.0f), (float)(0.0f), pStr0, pStr1, flags);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDragInt")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte DragIntNative(byte* label, int* v, float vSpeed, int vMin, int vMax, byte* format, int flags);

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  int vMin,  int vMax,  byte* format,  int flags)
		{
			byte ret = DragIntNative(label, v, vSpeed, vMin, vMax, format, flags);
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  int vMin,  int vMax,  byte* format)
		{
			byte ret = DragIntNative(label, v, vSpeed, vMin, vMax, format, (int)(0));
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  int vMin,  int vMax)
		{
			bool ret = DragInt(label, v, vSpeed, vMin, vMax, (string)"%d", (int)(0));
			return ret;
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  int vMin)
		{
			bool ret = DragInt(label, v, vSpeed, vMin, (int)(0), (string)"%d", (int)(0));
			return ret;
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed)
		{
			bool ret = DragInt(label, v, vSpeed, (int)(0), (int)(0), (string)"%d", (int)(0));
			return ret;
		}

		public static bool DragInt( byte* label,  int* v)
		{
			bool ret = DragInt(label, v, (float)(1.0f), (int)(0), (int)(0), (string)"%d", (int)(0));
			return ret;
		}

		public static bool DragInt( byte* label,  int* v,  int vMin)
		{
			bool ret = DragInt(label, v, (float)(1.0f), vMin, (int)(0), (string)"%d", (int)(0));
			return ret;
		}

		public static bool DragInt( byte* label,  int* v,  int vMin,  int vMax)
		{
			bool ret = DragInt(label, v, (float)(1.0f), vMin, vMax, (string)"%d", (int)(0));
			return ret;
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  int vMin,  byte* format)
		{
			byte ret = DragIntNative(label, v, vSpeed, vMin, (int)(0), format, (int)(0));
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  byte* format)
		{
			byte ret = DragIntNative(label, v, vSpeed, (int)(0), (int)(0), format, (int)(0));
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  byte* format)
		{
			byte ret = DragIntNative(label, v, (float)(1.0f), (int)(0), (int)(0), format, (int)(0));
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  int vMin,  byte* format)
		{
			byte ret = DragIntNative(label, v, (float)(1.0f), vMin, (int)(0), format, (int)(0));
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  int vMin,  int vMax,  byte* format)
		{
			byte ret = DragIntNative(label, v, (float)(1.0f), vMin, vMax, format, (int)(0));
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  int vMin,  int vMax,  int flags)
		{
			bool ret = DragInt(label, v, vSpeed, vMin, vMax, (string)"%d", flags);
			return ret;
		}

		public static bool DragInt( byte* label,  int* v,  int vMin,  int vMax,  int flags)
		{
			bool ret = DragInt(label, v, (float)(1.0f), vMin, vMax, (string)"%d", flags);
			return ret;
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  int vMin,  byte* format,  int flags)
		{
			byte ret = DragIntNative(label, v, vSpeed, vMin, (int)(0), format, flags);
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  byte* format,  int flags)
		{
			byte ret = DragIntNative(label, v, vSpeed, (int)(0), (int)(0), format, flags);
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  byte* format,  int flags)
		{
			byte ret = DragIntNative(label, v, (float)(1.0f), (int)(0), (int)(0), format, flags);
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  int vMin,  byte* format,  int flags)
		{
			byte ret = DragIntNative(label, v, (float)(1.0f), vMin, (int)(0), format, flags);
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  int vMin,  int vMax,  byte* format,  int flags)
		{
			byte ret = DragIntNative(label, v, (float)(1.0f), vMin, vMax, format, flags);
			return ret != 0;
		}

		public static bool DragInt( byte* label,  ref int v,  float vSpeed,  int vMin,  int vMax,  byte* format,  int flags)
		{
			fixed (int* pv = &v)
			{
				byte ret = DragIntNative(label, (int*)pv, vSpeed, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  float vSpeed,  int vMin,  int vMax,  byte* format)
		{
			fixed (int* pv = &v)
			{
				byte ret = DragIntNative(label, (int*)pv, vSpeed, vMin, vMax, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  float vSpeed,  int vMin,  int vMax)
		{
			fixed (int* pv = &v)
			{
				bool ret = DragInt(label, (int*)pv, vSpeed, vMin, vMax, (string)"%d", (int)(0));
				return ret;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  float vSpeed,  int vMin)
		{
			fixed (int* pv = &v)
			{
				bool ret = DragInt(label, (int*)pv, vSpeed, vMin, (int)(0), (string)"%d", (int)(0));
				return ret;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  float vSpeed)
		{
			fixed (int* pv = &v)
			{
				bool ret = DragInt(label, (int*)pv, vSpeed, (int)(0), (int)(0), (string)"%d", (int)(0));
				return ret;
			}
		}

		public static bool DragInt( byte* label,  ref int v)
		{
			fixed (int* pv = &v)
			{
				bool ret = DragInt(label, (int*)pv, (float)(1.0f), (int)(0), (int)(0), (string)"%d", (int)(0));
				return ret;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  int vMin)
		{
			fixed (int* pv = &v)
			{
				bool ret = DragInt(label, (int*)pv, (float)(1.0f), vMin, (int)(0), (string)"%d", (int)(0));
				return ret;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  int vMin,  int vMax)
		{
			fixed (int* pv = &v)
			{
				bool ret = DragInt(label, (int*)pv, (float)(1.0f), vMin, vMax, (string)"%d", (int)(0));
				return ret;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  float vSpeed,  int vMin,  byte* format)
		{
			fixed (int* pv = &v)
			{
				byte ret = DragIntNative(label, (int*)pv, vSpeed, vMin, (int)(0), format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  float vSpeed,  byte* format)
		{
			fixed (int* pv = &v)
			{
				byte ret = DragIntNative(label, (int*)pv, vSpeed, (int)(0), (int)(0), format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  byte* format)
		{
			fixed (int* pv = &v)
			{
				byte ret = DragIntNative(label, (int*)pv, (float)(1.0f), (int)(0), (int)(0), format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  int vMin,  byte* format)
		{
			fixed (int* pv = &v)
			{
				byte ret = DragIntNative(label, (int*)pv, (float)(1.0f), vMin, (int)(0), format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  int vMin,  int vMax,  byte* format)
		{
			fixed (int* pv = &v)
			{
				byte ret = DragIntNative(label, (int*)pv, (float)(1.0f), vMin, vMax, format, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  float vSpeed,  int vMin,  int vMax,  int flags)
		{
			fixed (int* pv = &v)
			{
				bool ret = DragInt(label, (int*)pv, vSpeed, vMin, vMax, (string)"%d", flags);
				return ret;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  int vMin,  int vMax,  int flags)
		{
			fixed (int* pv = &v)
			{
				bool ret = DragInt(label, (int*)pv, (float)(1.0f), vMin, vMax, (string)"%d", flags);
				return ret;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  float vSpeed,  int vMin,  byte* format,  int flags)
		{
			fixed (int* pv = &v)
			{
				byte ret = DragIntNative(label, (int*)pv, vSpeed, vMin, (int)(0), format, flags);
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  float vSpeed,  byte* format,  int flags)
		{
			fixed (int* pv = &v)
			{
				byte ret = DragIntNative(label, (int*)pv, vSpeed, (int)(0), (int)(0), format, flags);
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  byte* format,  int flags)
		{
			fixed (int* pv = &v)
			{
				byte ret = DragIntNative(label, (int*)pv, (float)(1.0f), (int)(0), (int)(0), format, flags);
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  int vMin,  byte* format,  int flags)
		{
			fixed (int* pv = &v)
			{
				byte ret = DragIntNative(label, (int*)pv, (float)(1.0f), vMin, (int)(0), format, flags);
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  int vMin,  int vMax,  byte* format,  int flags)
		{
			fixed (int* pv = &v)
			{
				byte ret = DragIntNative(label, (int*)pv, (float)(1.0f), vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  int vMin,  int vMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragIntNative(label, v, vSpeed, vMin, vMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  int vMin,  int vMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragIntNative(label, v, vSpeed, vMin, vMax, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  int vMin,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragIntNative(label, v, vSpeed, vMin, (int)(0), (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragIntNative(label, v, vSpeed, (int)(0), (int)(0), (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  int* v,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragIntNative(label, v, (float)(1.0f), (int)(0), (int)(0), (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  int* v,  int vMin,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragIntNative(label, v, (float)(1.0f), vMin, (int)(0), (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  int* v,  int vMin,  int vMax,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragIntNative(label, v, (float)(1.0f), vMin, vMax, (byte*)pformat, (int)(0));
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  int vMin,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragIntNative(label, v, vSpeed, vMin, (int)(0), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragIntNative(label, v, vSpeed, (int)(0), (int)(0), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  int* v,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragIntNative(label, v, (float)(1.0f), (int)(0), (int)(0), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  int* v,  int vMin,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragIntNative(label, v, (float)(1.0f), vMin, (int)(0), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  int* v,  int vMin,  int vMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragIntNative(label, v, (float)(1.0f), vMin, vMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  int vMin,  int vMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragIntNative(label, v, vSpeed, vMin, vMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  int vMin,  int vMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragIntNative(label, v, vSpeed, vMin, vMax, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  int vMin,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragIntNative(label, v, vSpeed, vMin, (int)(0), pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragIntNative(label, v, vSpeed, (int)(0), (int)(0), pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragIntNative(label, v, (float)(1.0f), (int)(0), (int)(0), pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  int vMin,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragIntNative(label, v, (float)(1.0f), vMin, (int)(0), pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  int vMin,  int vMax,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragIntNative(label, v, (float)(1.0f), vMin, vMax, pStr0, (int)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  int vMin,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragIntNative(label, v, vSpeed, vMin, (int)(0), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  float vSpeed,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragIntNative(label, v, vSpeed, (int)(0), (int)(0), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragIntNative(label, v, (float)(1.0f), (int)(0), (int)(0), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  int vMin,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragIntNative(label, v, (float)(1.0f), vMin, (int)(0), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragInt( byte* label,  int* v,  int vMin,  int vMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragIntNative(label, v, (float)(1.0f), vMin, vMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DragInt( byte* label,  ref int v,  float vSpeed,  int vMin,  int vMax,  ref byte format,  int flags)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragIntNative(label, (int*)pv, vSpeed, vMin, vMax, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragInt( byte* label,  ref int v,  float vSpeed,  int vMin,  int vMax,  ref byte format)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragIntNative(label, (int*)pv, vSpeed, vMin, vMax, (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragInt( byte* label,  ref int v,  float vSpeed,  int vMin,  ref byte format)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragIntNative(label, (int*)pv, vSpeed, vMin, (int)(0), (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragInt( byte* label,  ref int v,  float vSpeed,  ref byte format)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragIntNative(label, (int*)pv, vSpeed, (int)(0), (int)(0), (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragInt( byte* label,  ref int v,  ref byte format)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragIntNative(label, (int*)pv, (float)(1.0f), (int)(0), (int)(0), (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragInt( byte* label,  ref int v,  int vMin,  ref byte format)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragIntNative(label, (int*)pv, (float)(1.0f), vMin, (int)(0), (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragInt( byte* label,  ref int v,  int vMin,  int vMax,  ref byte format)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragIntNative(label, (int*)pv, (float)(1.0f), vMin, vMax, (byte*)pformat, (int)(0));
					return ret != 0;
				}
			}
		}

		public static bool DragInt( byte* label,  ref int v,  float vSpeed,  int vMin,  ref byte format,  int flags)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragIntNative(label, (int*)pv, vSpeed, vMin, (int)(0), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragInt( byte* label,  ref int v,  float vSpeed,  ref byte format,  int flags)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragIntNative(label, (int*)pv, vSpeed, (int)(0), (int)(0), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragInt( byte* label,  ref int v,  ref byte format,  int flags)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragIntNative(label, (int*)pv, (float)(1.0f), (int)(0), (int)(0), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragInt( byte* label,  ref int v,  int vMin,  ref byte format,  int flags)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragIntNative(label, (int*)pv, (float)(1.0f), vMin, (int)(0), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragInt( byte* label,  ref int v,  int vMin,  int vMax,  ref byte format,  int flags)
		{
			fixed (int* pv = &v)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DragIntNative(label, (int*)pv, (float)(1.0f), vMin, vMax, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		public static bool DragInt( byte* label,  ref int v,  float vSpeed,  int vMin,  int vMax,  string format,  int flags)
		{
			fixed (int* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragIntNative(label, (int*)pv, vSpeed, vMin, vMax, pStr0, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  float vSpeed,  int vMin,  int vMax,  string format)
		{
			fixed (int* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragIntNative(label, (int*)pv, vSpeed, vMin, vMax, pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  float vSpeed,  int vMin,  string format)
		{
			fixed (int* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragIntNative(label, (int*)pv, vSpeed, vMin, (int)(0), pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  float vSpeed,  string format)
		{
			fixed (int* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragIntNative(label, (int*)pv, vSpeed, (int)(0), (int)(0), pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool DragInt( byte* label,  ref int v,  string format)
		{
			fixed (int* pv = &v)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (format != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(format);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DragIntNative(label, (int*)pv, (float)(1.0f), (int)(0), (int)(0), pStr0, (int)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}
	}
}
