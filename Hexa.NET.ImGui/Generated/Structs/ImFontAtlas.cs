// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Load and rasterize multiple TTFOTF fonts into a same texture. The font atlas will build a single texture holding:<br/>
	/// - One or more fonts.<br/>
	/// - Custom graphics data needed to render the shapes needed by Dear ImGui.<br/>
	/// - Mouse cursor shapes for software cursor rendering (unless setting 'Flags |= ImFontAtlasFlags_NoMouseCursors' in the font atlas).<br/>
	/// It is the user-code responsibility to setupbuild the atlas, then upload the pixel data into a texture accessible by your graphics api.<br/>
	/// - Optionally, call any of the AddFont*** functions. If you don't call any, the default font embedded in the code will be loaded for you.<br/>
	/// - Call GetTexDataAsAlpha8() or GetTexDataAsRGBA32() to build and retrieve pixels data.<br/>
	/// - Upload the pixels data into a texture within your graphics system (see imgui_impl_xxxx.cpp examples)<br/>
	/// - Call SetTexID(my_tex_id); and pass the pointeridentifier to your texture in a format natural to your graphics API.<br/>
	/// This value will be passed back to you during rendering to identify the texture. Read FAQ entry about ImTextureID for more details.<br/>
	/// Common pitfalls:<br/>
	/// - If you pass a 'glyph_ranges' array to AddFont*** functions, you need to make sure that your array persist up until the<br/>
	/// atlas is build (when calling GetTexData*** or Build()). We only copy the pointer, not the data.<br/>
	/// - Important: By default, AddFontFromMemoryTTF() takes ownership of the data. Even though we are not writing to it, we will free the pointer on destruction.<br/>
	/// You can set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed,<br/>
	/// - Even though many functions are suffixed with "TTF", OTF data is supported just as well.<br/>
	/// - This is an old API and it is currently awkward for those and various other reasons! We will address them in the future!<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImFontAtlas")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontAtlas
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImFontAtlasFlags")]
		public ImFontAtlasFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexID")]
		[NativeName(NativeNameType.Type, "ImTextureID")]
		public ImTextureID TexID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexDesiredWidth")]
		[NativeName(NativeNameType.Type, "int")]
		public int TexDesiredWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexGlyphPadding")]
		[NativeName(NativeNameType.Type, "int")]
		public int TexGlyphPadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Locked")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Locked;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "UserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexReady")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte TexReady;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexPixelsUseColors")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte TexPixelsUseColors;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexPixelsAlpha8")]
		[NativeName(NativeNameType.Type, "unsigned char*")]
		public unsafe byte* TexPixelsAlpha8;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexPixelsRGBA32")]
		[NativeName(NativeNameType.Type, "unsigned int*")]
		public unsafe uint* TexPixelsRGBA32;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexWidth")]
		[NativeName(NativeNameType.Type, "int")]
		public int TexWidth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexHeight")]
		[NativeName(NativeNameType.Type, "int")]
		public int TexHeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexUvScale")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 TexUvScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexUvWhitePixel")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 TexUvWhitePixel;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Fonts")]
		[NativeName(NativeNameType.Type, "ImVector_ImFontPtr")]
		public ImVectorImFontPtr Fonts;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CustomRects")]
		[NativeName(NativeNameType.Type, "ImVector_ImFontAtlasCustomRect")]
		public ImVectorImFontAtlasCustomRect CustomRects;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigData")]
		[NativeName(NativeNameType.Type, "ImVector_ImFontConfig")]
		public ImVectorImFontConfig ConfigData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TexUvLines")]
		[NativeName(NativeNameType.Type, "ImVec4[64]")]
		public Vector4 TexUvLines_0;
		public Vector4 TexUvLines_1;
		public Vector4 TexUvLines_2;
		public Vector4 TexUvLines_3;
		public Vector4 TexUvLines_4;
		public Vector4 TexUvLines_5;
		public Vector4 TexUvLines_6;
		public Vector4 TexUvLines_7;
		public Vector4 TexUvLines_8;
		public Vector4 TexUvLines_9;
		public Vector4 TexUvLines_10;
		public Vector4 TexUvLines_11;
		public Vector4 TexUvLines_12;
		public Vector4 TexUvLines_13;
		public Vector4 TexUvLines_14;
		public Vector4 TexUvLines_15;
		public Vector4 TexUvLines_16;
		public Vector4 TexUvLines_17;
		public Vector4 TexUvLines_18;
		public Vector4 TexUvLines_19;
		public Vector4 TexUvLines_20;
		public Vector4 TexUvLines_21;
		public Vector4 TexUvLines_22;
		public Vector4 TexUvLines_23;
		public Vector4 TexUvLines_24;
		public Vector4 TexUvLines_25;
		public Vector4 TexUvLines_26;
		public Vector4 TexUvLines_27;
		public Vector4 TexUvLines_28;
		public Vector4 TexUvLines_29;
		public Vector4 TexUvLines_30;
		public Vector4 TexUvLines_31;
		public Vector4 TexUvLines_32;
		public Vector4 TexUvLines_33;
		public Vector4 TexUvLines_34;
		public Vector4 TexUvLines_35;
		public Vector4 TexUvLines_36;
		public Vector4 TexUvLines_37;
		public Vector4 TexUvLines_38;
		public Vector4 TexUvLines_39;
		public Vector4 TexUvLines_40;
		public Vector4 TexUvLines_41;
		public Vector4 TexUvLines_42;
		public Vector4 TexUvLines_43;
		public Vector4 TexUvLines_44;
		public Vector4 TexUvLines_45;
		public Vector4 TexUvLines_46;
		public Vector4 TexUvLines_47;
		public Vector4 TexUvLines_48;
		public Vector4 TexUvLines_49;
		public Vector4 TexUvLines_50;
		public Vector4 TexUvLines_51;
		public Vector4 TexUvLines_52;
		public Vector4 TexUvLines_53;
		public Vector4 TexUvLines_54;
		public Vector4 TexUvLines_55;
		public Vector4 TexUvLines_56;
		public Vector4 TexUvLines_57;
		public Vector4 TexUvLines_58;
		public Vector4 TexUvLines_59;
		public Vector4 TexUvLines_60;
		public Vector4 TexUvLines_61;
		public Vector4 TexUvLines_62;
		public Vector4 TexUvLines_63;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontBuilderIO")]
		[NativeName(NativeNameType.Type, "const ImFontBuilderIO*")]
		public unsafe ImFontBuilderIO* FontBuilderIO;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontBuilderFlags")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint FontBuilderFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PackIdMouseCursors")]
		[NativeName(NativeNameType.Type, "int")]
		public int PackIdMouseCursors;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PackIdLines")]
		[NativeName(NativeNameType.Type, "int")]
		public int PackIdLines;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImFontAtlas(ImFontAtlasFlags flags = default, ImTextureID texId = default, int texDesiredWidth = default, int texGlyphPadding = default, bool locked = default, void* userData = default, bool texReady = default, bool texPixelsUseColors = default, byte* texPixelsAlpha8 = default, uint* texPixelsRgba32 = default, int texWidth = default, int texHeight = default, Vector2 texUvScale = default, Vector2 texUvWhitePixel = default, ImVectorImFontPtr fonts = default, ImVectorImFontAtlasCustomRect customRects = default, ImVectorImFontConfig configData = default, Vector4* texUvLines = default, ImFontBuilderIO* fontBuilderIo = default, uint fontBuilderFlags = default, int packIdMouseCursors = default, int packIdLines = default)
		{
			Flags = flags;
			TexID = texId;
			TexDesiredWidth = texDesiredWidth;
			TexGlyphPadding = texGlyphPadding;
			Locked = locked ? (byte)1 : (byte)0;
			UserData = userData;
			TexReady = texReady ? (byte)1 : (byte)0;
			TexPixelsUseColors = texPixelsUseColors ? (byte)1 : (byte)0;
			TexPixelsAlpha8 = texPixelsAlpha8;
			TexPixelsRGBA32 = texPixelsRgba32;
			TexWidth = texWidth;
			TexHeight = texHeight;
			TexUvScale = texUvScale;
			TexUvWhitePixel = texUvWhitePixel;
			Fonts = fonts;
			CustomRects = customRects;
			ConfigData = configData;
			if (texUvLines != default(Vector4*))
			{
				TexUvLines_0 = texUvLines[0];
				TexUvLines_1 = texUvLines[1];
				TexUvLines_2 = texUvLines[2];
				TexUvLines_3 = texUvLines[3];
				TexUvLines_4 = texUvLines[4];
				TexUvLines_5 = texUvLines[5];
				TexUvLines_6 = texUvLines[6];
				TexUvLines_7 = texUvLines[7];
				TexUvLines_8 = texUvLines[8];
				TexUvLines_9 = texUvLines[9];
				TexUvLines_10 = texUvLines[10];
				TexUvLines_11 = texUvLines[11];
				TexUvLines_12 = texUvLines[12];
				TexUvLines_13 = texUvLines[13];
				TexUvLines_14 = texUvLines[14];
				TexUvLines_15 = texUvLines[15];
				TexUvLines_16 = texUvLines[16];
				TexUvLines_17 = texUvLines[17];
				TexUvLines_18 = texUvLines[18];
				TexUvLines_19 = texUvLines[19];
				TexUvLines_20 = texUvLines[20];
				TexUvLines_21 = texUvLines[21];
				TexUvLines_22 = texUvLines[22];
				TexUvLines_23 = texUvLines[23];
				TexUvLines_24 = texUvLines[24];
				TexUvLines_25 = texUvLines[25];
				TexUvLines_26 = texUvLines[26];
				TexUvLines_27 = texUvLines[27];
				TexUvLines_28 = texUvLines[28];
				TexUvLines_29 = texUvLines[29];
				TexUvLines_30 = texUvLines[30];
				TexUvLines_31 = texUvLines[31];
				TexUvLines_32 = texUvLines[32];
				TexUvLines_33 = texUvLines[33];
				TexUvLines_34 = texUvLines[34];
				TexUvLines_35 = texUvLines[35];
				TexUvLines_36 = texUvLines[36];
				TexUvLines_37 = texUvLines[37];
				TexUvLines_38 = texUvLines[38];
				TexUvLines_39 = texUvLines[39];
				TexUvLines_40 = texUvLines[40];
				TexUvLines_41 = texUvLines[41];
				TexUvLines_42 = texUvLines[42];
				TexUvLines_43 = texUvLines[43];
				TexUvLines_44 = texUvLines[44];
				TexUvLines_45 = texUvLines[45];
				TexUvLines_46 = texUvLines[46];
				TexUvLines_47 = texUvLines[47];
				TexUvLines_48 = texUvLines[48];
				TexUvLines_49 = texUvLines[49];
				TexUvLines_50 = texUvLines[50];
				TexUvLines_51 = texUvLines[51];
				TexUvLines_52 = texUvLines[52];
				TexUvLines_53 = texUvLines[53];
				TexUvLines_54 = texUvLines[54];
				TexUvLines_55 = texUvLines[55];
				TexUvLines_56 = texUvLines[56];
				TexUvLines_57 = texUvLines[57];
				TexUvLines_58 = texUvLines[58];
				TexUvLines_59 = texUvLines[59];
				TexUvLines_60 = texUvLines[60];
				TexUvLines_61 = texUvLines[61];
				TexUvLines_62 = texUvLines[62];
				TexUvLines_63 = texUvLines[63];
			}
			FontBuilderIO = fontBuilderIo;
			FontBuilderFlags = fontBuilderFlags;
			PackIdMouseCursors = packIdMouseCursors;
			PackIdLines = packIdLines;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImFontAtlas(ImFontAtlasFlags flags = default, ImTextureID texId = default, int texDesiredWidth = default, int texGlyphPadding = default, bool locked = default, void* userData = default, bool texReady = default, bool texPixelsUseColors = default, byte* texPixelsAlpha8 = default, uint* texPixelsRgba32 = default, int texWidth = default, int texHeight = default, Vector2 texUvScale = default, Vector2 texUvWhitePixel = default, ImVectorImFontPtr fonts = default, ImVectorImFontAtlasCustomRect customRects = default, ImVectorImFontConfig configData = default, Span<Vector4> texUvLines = default, ImFontBuilderIO* fontBuilderIo = default, uint fontBuilderFlags = default, int packIdMouseCursors = default, int packIdLines = default)
		{
			Flags = flags;
			TexID = texId;
			TexDesiredWidth = texDesiredWidth;
			TexGlyphPadding = texGlyphPadding;
			Locked = locked ? (byte)1 : (byte)0;
			UserData = userData;
			TexReady = texReady ? (byte)1 : (byte)0;
			TexPixelsUseColors = texPixelsUseColors ? (byte)1 : (byte)0;
			TexPixelsAlpha8 = texPixelsAlpha8;
			TexPixelsRGBA32 = texPixelsRgba32;
			TexWidth = texWidth;
			TexHeight = texHeight;
			TexUvScale = texUvScale;
			TexUvWhitePixel = texUvWhitePixel;
			Fonts = fonts;
			CustomRects = customRects;
			ConfigData = configData;
			if (texUvLines != default(Span<Vector4>))
			{
				TexUvLines_0 = texUvLines[0];
				TexUvLines_1 = texUvLines[1];
				TexUvLines_2 = texUvLines[2];
				TexUvLines_3 = texUvLines[3];
				TexUvLines_4 = texUvLines[4];
				TexUvLines_5 = texUvLines[5];
				TexUvLines_6 = texUvLines[6];
				TexUvLines_7 = texUvLines[7];
				TexUvLines_8 = texUvLines[8];
				TexUvLines_9 = texUvLines[9];
				TexUvLines_10 = texUvLines[10];
				TexUvLines_11 = texUvLines[11];
				TexUvLines_12 = texUvLines[12];
				TexUvLines_13 = texUvLines[13];
				TexUvLines_14 = texUvLines[14];
				TexUvLines_15 = texUvLines[15];
				TexUvLines_16 = texUvLines[16];
				TexUvLines_17 = texUvLines[17];
				TexUvLines_18 = texUvLines[18];
				TexUvLines_19 = texUvLines[19];
				TexUvLines_20 = texUvLines[20];
				TexUvLines_21 = texUvLines[21];
				TexUvLines_22 = texUvLines[22];
				TexUvLines_23 = texUvLines[23];
				TexUvLines_24 = texUvLines[24];
				TexUvLines_25 = texUvLines[25];
				TexUvLines_26 = texUvLines[26];
				TexUvLines_27 = texUvLines[27];
				TexUvLines_28 = texUvLines[28];
				TexUvLines_29 = texUvLines[29];
				TexUvLines_30 = texUvLines[30];
				TexUvLines_31 = texUvLines[31];
				TexUvLines_32 = texUvLines[32];
				TexUvLines_33 = texUvLines[33];
				TexUvLines_34 = texUvLines[34];
				TexUvLines_35 = texUvLines[35];
				TexUvLines_36 = texUvLines[36];
				TexUvLines_37 = texUvLines[37];
				TexUvLines_38 = texUvLines[38];
				TexUvLines_39 = texUvLines[39];
				TexUvLines_40 = texUvLines[40];
				TexUvLines_41 = texUvLines[41];
				TexUvLines_42 = texUvLines[42];
				TexUvLines_43 = texUvLines[43];
				TexUvLines_44 = texUvLines[44];
				TexUvLines_45 = texUvLines[45];
				TexUvLines_46 = texUvLines[46];
				TexUvLines_47 = texUvLines[47];
				TexUvLines_48 = texUvLines[48];
				TexUvLines_49 = texUvLines[49];
				TexUvLines_50 = texUvLines[50];
				TexUvLines_51 = texUvLines[51];
				TexUvLines_52 = texUvLines[52];
				TexUvLines_53 = texUvLines[53];
				TexUvLines_54 = texUvLines[54];
				TexUvLines_55 = texUvLines[55];
				TexUvLines_56 = texUvLines[56];
				TexUvLines_57 = texUvLines[57];
				TexUvLines_58 = texUvLines[58];
				TexUvLines_59 = texUvLines[59];
				TexUvLines_60 = texUvLines[60];
				TexUvLines_61 = texUvLines[61];
				TexUvLines_62 = texUvLines[62];
				TexUvLines_63 = texUvLines[63];
			}
			FontBuilderIO = fontBuilderIo;
			FontBuilderFlags = fontBuilderFlags;
			PackIdMouseCursors = packIdMouseCursors;
			PackIdLines = packIdLines;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Vector4> TexUvLines
		
		{
			get
			{
				fixed (Vector4* p = &this.TexUvLines_0)
				{
					return new Span<Vector4>(p, 64);
				}
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int AddCustomRectFontGlyph([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 offset)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				int ret = ImGui.AddCustomRectFontGlyphNative(@this, font, id, width, height, advanceX, offset);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int AddCustomRectFontGlyph([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				int ret = ImGui.AddCustomRectFontGlyphNative(@this, font, id, width, height, advanceX, (Vector2)(new Vector2(0,0)));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int AddCustomRectFontGlyph([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 offset)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					int ret = ImGui.AddCustomRectFontGlyphNative(@this, (ImFont*)pfont, id, width, height, advanceX, offset);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int AddCustomRectFontGlyph([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFont* pfont = &font)
				{
					int ret = ImGui.AddCustomRectFontGlyphNative(@this, (ImFont*)pfont, id, width, height, advanceX, (Vector2)(new Vector2(0,0)));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectRegular")]
		[return: NativeName(NativeNameType.Type, "int")]
		public unsafe int AddCustomRectRegular([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				int ret = ImGui.AddCustomRectRegularNative(@this, width, height);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFont")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFont([NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontNative(@this, fontCfg);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFont")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFont([NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontNative(@this, (ImFontConfig*)pfontCfg);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontDefault")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontDefault([NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontDefaultNative(@this, fontCfg);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontDefault")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontDefault()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontDefaultNative(@this, (ImFontConfig*)(default));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontDefault")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontDefault([NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontDefaultNative(@this, (ImFontConfig*)pfontCfg);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, filename, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, filename, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, filename, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, filename, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = &filename)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, fontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = &filename)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, fontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = &filename)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = &filename)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = filename)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, fontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = filename)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, fontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = filename)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = filename)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, fontCfg, glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, fontCfg, (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, (ImFontConfig*)(default), (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, (ImFontConfig*)(default), glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, filename, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, filename, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = &filename)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = &filename)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = filename)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = filename)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, filename, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, filename, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = &filename)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, fontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = &filename)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = filename)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, fontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = filename)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, fontCfg, (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, filename, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = &filename)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						fixed (char* pglyphRanges = &glyphRanges)
						{
							ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pfilename = filename)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						fixed (char* pglyphRanges = &glyphRanges)
						{
							ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromFileTTFNative(@this, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDatabase85, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDatabase85, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDatabase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, fontCfg, glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, fontCfg, (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, (ImFontConfig*)(default), (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, (ImFontConfig*)(default), glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDatabase85, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, fontCfg, (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, compressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						fixed (char* pglyphRanges = &glyphRanges)
						{
							ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						fixed (char* pglyphRanges = &glyphRanges)
						{
							ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedBase85TTFNative(@this, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontDataSize, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontDataSize, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontDataSize, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromMemoryCompressedTTFNative(@this, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontDataSize, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontDataSize, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontDataSize, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontDataSize, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontDataSize, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontDataSize, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontDataSize, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = ImGui.AddFontFromMemoryTTFNative(@this, fontData, fontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Build pixels data. This is called automatically for you by the GetTexData*** functions.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_Build")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Build()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte ret = ImGui.BuildNative(@this);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ImFontAtlasCustomRect* rect, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.CalcCustomRectUVNative(@this, rect, outUvMin, outUvMax);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ref ImFontAtlasCustomRect rect, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontAtlasCustomRect* prect = &rect)
				{
					ImGui.CalcCustomRectUVNative(@this, (ImFontAtlasCustomRect*)prect, outUvMin, outUvMax);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ImFontAtlasCustomRect* rect, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvMin = &outUvMin)
				{
					ImGui.CalcCustomRectUVNative(@this, rect, (Vector2*)poutUvMin, outUvMax);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ref ImFontAtlasCustomRect rect, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontAtlasCustomRect* prect = &rect)
				{
					fixed (Vector2* poutUvMin = &outUvMin)
					{
						ImGui.CalcCustomRectUVNative(@this, (ImFontAtlasCustomRect*)prect, (Vector2*)poutUvMin, outUvMax);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ImFontAtlasCustomRect* rect, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvMax = &outUvMax)
				{
					ImGui.CalcCustomRectUVNative(@this, rect, outUvMin, (Vector2*)poutUvMax);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ref ImFontAtlasCustomRect rect, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontAtlasCustomRect* prect = &rect)
				{
					fixed (Vector2* poutUvMax = &outUvMax)
					{
						ImGui.CalcCustomRectUVNative(@this, (ImFontAtlasCustomRect*)prect, outUvMin, (Vector2*)poutUvMax);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ImFontAtlasCustomRect* rect, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvMin = &outUvMin)
				{
					fixed (Vector2* poutUvMax = &outUvMax)
					{
						ImGui.CalcCustomRectUVNative(@this, rect, (Vector2*)poutUvMin, (Vector2*)poutUvMax);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void CalcCustomRectUV([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ref ImFontAtlasCustomRect rect, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outUvMax)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (ImFontAtlasCustomRect* prect = &rect)
				{
					fixed (Vector2* poutUvMin = &outUvMin)
					{
						fixed (Vector2* poutUvMax = &outUvMax)
						{
							ImGui.CalcCustomRectUVNative(@this, (ImFontAtlasCustomRect*)prect, (Vector2*)poutUvMin, (Vector2*)poutUvMax);
						}
					}
				}
			}
		}

		/// <summary>
		/// Clear all input and output.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		/// <summary>
		/// Clear output font data (glyphs storage, UV coordinates).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_ClearFonts")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearFonts()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.ClearFontsNative(@this);
			}
		}

		/// <summary>
		/// Clear input data (all ImFontConfig structures including sizes, TTF data, glyph ranges, etc.) = all the data used to build the texture and fonts.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_ClearInputData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearInputData()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.ClearInputDataNative(@this);
			}
		}

		/// <summary>
		/// Clear output texture data (CPU side). Saves RAM once the texture has been copied to graphics memory.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_ClearTexData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearTexData()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.ClearTexDataNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetCustomRectByIndex")]
		[return: NativeName(NativeNameType.Type, "ImFontAtlasCustomRect*")]
		public unsafe ImFontAtlasCustomRect* GetCustomRectByIndex([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "int")] int index)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImFontAtlasCustomRect* ret = ImGui.GetCustomRectByIndexNative(@this, index);
				return ret;
			}
		}

		/// <summary>
		/// Default + Half-Width + Japanese HiraganaKatakana + full set of about 21000 CJK Unified Ideographs<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesChineseFull")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesChineseFull()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesChineseFullNative(@this);
				return ret;
			}
		}

		/// <summary>
		/// Default + Half-Width + Japanese HiraganaKatakana + set of 2500 CJK Unified Ideographs for common simplified Chinese<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesChineseSimplifiedCommon()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesChineseSimplifiedCommonNative(@this);
				return ret;
			}
		}

		/// <summary>
		/// Default + about 400 Cyrillic characters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesCyrillic")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesCyrillic()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesCyrillicNative(@this);
				return ret;
			}
		}

		/// <summary>
		/// Basic Latin, Extended Latin<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesDefault")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesDefault()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesDefaultNative(@this);
				return ret;
			}
		}

		/// <summary>
		/// Default + Greek and Coptic<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesGreek")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesGreek()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesGreekNative(@this);
				return ret;
			}
		}

		/// <summary>
		/// Default + Hiragana, Katakana, Half-Width, Selection of 2999 Ideographs<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesJapanese")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesJapanese()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesJapaneseNative(@this);
				return ret;
			}
		}

		/// <summary>
		/// Default + Korean characters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesKorean")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesKorean()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesKoreanNative(@this);
				return ret;
			}
		}

		/// <summary>
		/// Default + Thai characters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesThai")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesThai()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesThaiNative(@this);
				return ret;
			}
		}

		/// <summary>
		/// Default + Vietnamese characters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesVietnamese")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public unsafe char* GetGlyphRangesVietnamese()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				char* ret = ImGui.GetGlyphRangesVietnameseNative(@this);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, outSize, outUvBorder, outUvFill);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, outSize, outUvBorder, outUvFill);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, (Vector2*)poutSize, outUvBorder, outUvFill);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, outUvBorder, outUvFill);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvBorder = &outUvBorder)
				{
					byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, outSize, (Vector2*)poutUvBorder, outUvFill);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ReadOnlySpan<Vector2> outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvBorder = outUvBorder)
				{
					byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, outSize, (Vector2*)poutUvBorder, outUvFill);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, outUvFill);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ReadOnlySpan<Vector2> outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvBorder = outUvBorder)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, outUvFill);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ReadOnlySpan<Vector2> outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = outUvBorder)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvBorder = &outUvBorder)
						{
							byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ReadOnlySpan<Vector2> outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvBorder = outUvBorder)
						{
							byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, outUvFill);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvFill = &outUvFill)
				{
					byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, outSize, outUvBorder, (Vector2*)poutUvFill);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ReadOnlySpan<Vector2> outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvFill = outUvFill)
				{
					byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, outSize, outUvBorder, (Vector2*)poutUvFill);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, outSize, outUvBorder, (Vector2*)poutUvFill);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ReadOnlySpan<Vector2> outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvFill = outUvFill)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, outSize, outUvBorder, (Vector2*)poutUvFill);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ReadOnlySpan<Vector2> outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvFill = outUvFill)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvFill = &outUvFill)
						{
							byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] Vector2* outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ReadOnlySpan<Vector2> outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvFill = outUvFill)
						{
							byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, outUvBorder, (Vector2*)poutUvFill);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvBorder = &outUvBorder)
				{
					fixed (Vector2* poutUvFill = &outUvFill)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ReadOnlySpan<Vector2> outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ReadOnlySpan<Vector2> outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutUvBorder = outUvBorder)
				{
					fixed (Vector2* poutUvFill = outUvFill)
					{
						byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						fixed (Vector2* poutUvFill = &outUvFill)
						{
							byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ReadOnlySpan<Vector2> outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ReadOnlySpan<Vector2> outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutUvBorder = outUvBorder)
					{
						fixed (Vector2* poutUvFill = outUvFill)
						{
							byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, outSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = &outUvBorder)
					{
						fixed (Vector2* poutUvFill = &outUvFill)
						{
							byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ReadOnlySpan<Vector2> outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ReadOnlySpan<Vector2> outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutSize = &outSize)
				{
					fixed (Vector2* poutUvBorder = outUvBorder)
					{
						fixed (Vector2* poutUvFill = outUvFill)
						{
							byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, outOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ref Vector2 outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvBorder = &outUvBorder)
						{
							fixed (Vector2* poutUvFill = &outUvFill)
							{
								byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetMouseCursorTexData")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetMouseCursorTexData([NativeName(NativeNameType.Param, "cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor cursor, [NativeName(NativeNameType.Param, "out_offset")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outOffset, [NativeName(NativeNameType.Param, "out_size")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outSize, [NativeName(NativeNameType.Param, "out_uv_border")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ReadOnlySpan<Vector2> outUvBorder, [NativeName(NativeNameType.Param, "out_uv_fill")] [NativeName(NativeNameType.Type, "ImVec2[2]")] ReadOnlySpan<Vector2> outUvFill)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (Vector2* poutOffset = &outOffset)
				{
					fixed (Vector2* poutSize = &outSize)
					{
						fixed (Vector2* poutUvBorder = outUvBorder)
						{
							fixed (Vector2* poutUvFill = outUvFill)
							{
								byte ret = ImGui.GetMouseCursorTexDataNative(@this, cursor, (Vector2*)poutOffset, (Vector2*)poutSize, (Vector2*)poutUvBorder, (Vector2*)poutUvFill);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.GetTexDataAsAlpha8Native(@this, outPixels, outWidth, outHeight, outBytesPerPixel);
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.GetTexDataAsAlpha8Native(@this, outPixels, outWidth, outHeight, (int*)(default));
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, outWidth, outHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, outWidth, outHeight, (int*)(default));
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, outPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, outPixels, (int*)poutWidth, outHeight, (int*)(default));
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, outPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, outPixels, outWidth, (int*)poutHeight, (int*)(default));
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, outPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
						}
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					ImGui.GetTexDataAsAlpha8Native(@this, outPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, outPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutHeight = &outHeight)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGui.GetTexDataAsAlpha8Native(@this, outPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGui.GetTexDataAsAlpha8Native(@this, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							fixed (int* poutBytesPerPixel = &outBytesPerPixel)
							{
								ImGui.GetTexDataAsAlpha8Native(@this, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.GetTexDataAsRGBA32Native(@this, outPixels, outWidth, outHeight, outBytesPerPixel);
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.GetTexDataAsRGBA32Native(@this, outPixels, outWidth, outHeight, (int*)(default));
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, outWidth, outHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, outWidth, outHeight, (int*)(default));
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, outPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, outPixels, (int*)poutWidth, outHeight, (int*)(default));
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, outPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutHeight = &outHeight)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, outPixels, outWidth, (int*)poutHeight, (int*)(default));
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, outPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
						}
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					ImGui.GetTexDataAsRGBA32Native(@this, outPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, outPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutHeight = &outHeight)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						ImGui.GetTexDataAsRGBA32Native(@this, outPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							ImGui.GetTexDataAsRGBA32Native(@this, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							fixed (int* poutBytesPerPixel = &outBytesPerPixel)
							{
								ImGui.GetTexDataAsRGBA32Native(@this, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Bit ambiguous: used to detect when user didn't build texture but effectively we should check TexID != 0 except that would be backend dependent...<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_IsBuilt")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsBuilt()
		{
			fixed (ImFontAtlas* @this = &this)
			{
				byte ret = ImGui.IsBuiltNative(@this);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_SetTexID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetTexID([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID id)
		{
			fixed (ImFontAtlas* @this = &this)
			{
				ImGui.SetTexIDNative(@this, id);
			}
		}

	}

}
