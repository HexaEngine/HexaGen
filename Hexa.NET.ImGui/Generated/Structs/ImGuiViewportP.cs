// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiViewportP")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiViewportP
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_ImGuiViewport")]
		[NativeName(NativeNameType.Type, "ImGuiViewport")]
		public ImGuiViewport ImGuiViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Window")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* Window;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Idx")]
		[NativeName(NativeNameType.Type, "int")]
		public int Idx;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrameActive")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFocusedStampCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFocusedStampCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastNameHash")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint LastNameHash;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 LastPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Alpha")]
		[NativeName(NativeNameType.Type, "float")]
		public float Alpha;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastAlpha")]
		[NativeName(NativeNameType.Type, "float")]
		public float LastAlpha;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFocusedHadNavWindow")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte LastFocusedHadNavWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformMonitor")]
		[NativeName(NativeNameType.Type, "short")]
		public short PlatformMonitor;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BgFgDrawListsLastFrame")]
		[NativeName(NativeNameType.Type, "int[2]")]
		public int BgFgDrawListsLastFrame_0;
		public int BgFgDrawListsLastFrame_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BgFgDrawLists")]
		[NativeName(NativeNameType.Type, "ImDrawList*[2]")]
		public unsafe ImDrawList* BgFgDrawLists_0;
		public unsafe ImDrawList* BgFgDrawLists_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawDataP")]
		[NativeName(NativeNameType.Type, "ImDrawData")]
		public ImDrawData DrawDataP;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawDataBuilder")]
		[NativeName(NativeNameType.Type, "ImDrawDataBuilder")]
		public ImDrawDataBuilder DrawDataBuilder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastPlatformPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 LastPlatformPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastPlatformSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 LastPlatformSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastRendererSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 LastRendererSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkOffsetMin")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WorkOffsetMin;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkOffsetMax")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WorkOffsetMax;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BuildWorkOffsetMin")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 BuildWorkOffsetMin;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BuildWorkOffsetMax")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 BuildWorkOffsetMax;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiViewportP(ImGuiViewport imGuiViewport = default, ImGuiWindow* window = default, int idx = default, int lastFrameActive = default, int lastFocusedStampCount = default, uint lastNameHash = default, Vector2 lastPos = default, float alpha = default, float lastAlpha = default, bool lastFocusedHadNavWindow = default, short platformMonitor = default, int* bgFgDrawListsLastFrame = default, ImDrawList** bgFgDrawLists = default, ImDrawData drawDataP = default, ImDrawDataBuilder drawDataBuilder = default, Vector2 lastPlatformPos = default, Vector2 lastPlatformSize = default, Vector2 lastRendererSize = default, Vector2 workOffsetMin = default, Vector2 workOffsetMax = default, Vector2 buildWorkOffsetMin = default, Vector2 buildWorkOffsetMax = default)
		{
			ImGuiViewport = imGuiViewport;
			Window = window;
			Idx = idx;
			LastFrameActive = lastFrameActive;
			LastFocusedStampCount = lastFocusedStampCount;
			LastNameHash = lastNameHash;
			LastPos = lastPos;
			Alpha = alpha;
			LastAlpha = lastAlpha;
			LastFocusedHadNavWindow = lastFocusedHadNavWindow ? (byte)1 : (byte)0;
			PlatformMonitor = platformMonitor;
			if (bgFgDrawListsLastFrame != default(int*))
			{
				BgFgDrawListsLastFrame_0 = bgFgDrawListsLastFrame[0];
				BgFgDrawListsLastFrame_1 = bgFgDrawListsLastFrame[1];
			}
			if (bgFgDrawLists != default(ImDrawList**))
			{
				BgFgDrawLists_0 = bgFgDrawLists[0];
				BgFgDrawLists_1 = bgFgDrawLists[1];
			}
			DrawDataP = drawDataP;
			DrawDataBuilder = drawDataBuilder;
			LastPlatformPos = lastPlatformPos;
			LastPlatformSize = lastPlatformSize;
			LastRendererSize = lastRendererSize;
			WorkOffsetMin = workOffsetMin;
			WorkOffsetMax = workOffsetMax;
			BuildWorkOffsetMin = buildWorkOffsetMin;
			BuildWorkOffsetMax = buildWorkOffsetMax;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiViewportP(ImGuiViewport imGuiViewport = default, ImGuiWindow* window = default, int idx = default, int lastFrameActive = default, int lastFocusedStampCount = default, uint lastNameHash = default, Vector2 lastPos = default, float alpha = default, float lastAlpha = default, bool lastFocusedHadNavWindow = default, short platformMonitor = default, Span<int> bgFgDrawListsLastFrame = default, Span<Pointer<ImDrawList>> bgFgDrawLists = default, ImDrawData drawDataP = default, ImDrawDataBuilder drawDataBuilder = default, Vector2 lastPlatformPos = default, Vector2 lastPlatformSize = default, Vector2 lastRendererSize = default, Vector2 workOffsetMin = default, Vector2 workOffsetMax = default, Vector2 buildWorkOffsetMin = default, Vector2 buildWorkOffsetMax = default)
		{
			ImGuiViewport = imGuiViewport;
			Window = window;
			Idx = idx;
			LastFrameActive = lastFrameActive;
			LastFocusedStampCount = lastFocusedStampCount;
			LastNameHash = lastNameHash;
			LastPos = lastPos;
			Alpha = alpha;
			LastAlpha = lastAlpha;
			LastFocusedHadNavWindow = lastFocusedHadNavWindow ? (byte)1 : (byte)0;
			PlatformMonitor = platformMonitor;
			if (bgFgDrawListsLastFrame != default(Span<int>))
			{
				BgFgDrawListsLastFrame_0 = bgFgDrawListsLastFrame[0];
				BgFgDrawListsLastFrame_1 = bgFgDrawListsLastFrame[1];
			}
			if (bgFgDrawLists != default(Span<Pointer<ImDrawList>>))
			{
				BgFgDrawLists_0 = bgFgDrawLists[0];
				BgFgDrawLists_1 = bgFgDrawLists[1];
			}
			DrawDataP = drawDataP;
			DrawDataBuilder = drawDataBuilder;
			LastPlatformPos = lastPlatformPos;
			LastPlatformSize = lastPlatformSize;
			LastRendererSize = lastRendererSize;
			WorkOffsetMin = workOffsetMin;
			WorkOffsetMax = workOffsetMax;
			BuildWorkOffsetMin = buildWorkOffsetMin;
			BuildWorkOffsetMax = buildWorkOffsetMax;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Pointer<ImDrawList>> BgFgDrawLists
		
		{
			get
			{
				fixed (ImDrawList** p = &this.BgFgDrawLists_0)
				{
					return new Span<Pointer<ImDrawList>>(p, 2);
				}
			}
		}
	}

}
