// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// SplitMerge functions are used to split the draw list into different layers which can be drawn into out of order.<br/>
	/// This is used by the ColumnsTables API, so items of each column can be batched together in a same draw call.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImDrawListSplitter")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawListSplitter
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_Current")]
		[NativeName(NativeNameType.Type, "int")]
		public int Current;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_Count")]
		[NativeName(NativeNameType.Type, "int")]
		public int Count;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_Channels")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawChannel")]
		public ImVectorImDrawChannel Channels;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImDrawListSplitter(int current = default, int count = default, ImVectorImDrawChannel channels = default)
		{
			Current = current;
			Count = count;
			Channels = channels;
		}


		/// <summary>
		/// Do not clear Channels[] so our allocations are reused next frame<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearFreeMemory()
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGui.ClearFreeMemoryNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Merge")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Merge([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGui.MergeNative(@this, drawList);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Merge")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Merge([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGui.MergeNative(@this, (ImDrawList*)pdrawList);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_SetCurrentChannel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetCurrentChannel([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "channel_idx")] [NativeName(NativeNameType.Type, "int")] int channelIdx)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGui.SetCurrentChannelNative(@this, drawList, channelIdx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_SetCurrentChannel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetCurrentChannel([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "channel_idx")] [NativeName(NativeNameType.Type, "int")] int channelIdx)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGui.SetCurrentChannelNative(@this, (ImDrawList*)pdrawList, channelIdx);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Split")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Split([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				ImGui.SplitNative(@this, drawList, count);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Split")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Split([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (ImDrawListSplitter* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGui.SplitNative(@this, (ImDrawList*)pdrawList, count);
				}
			}
		}

	}

}
