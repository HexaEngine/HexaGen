// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// - Currently represents the Platform Window created by the application which is hosting our Dear ImGui windows.<br/>
	/// - With multi-viewport enabled, we extend this concept to have multiple active viewports.<br/>
	/// - In the future we will extend this concept further to also represent Platform Monitor and support a "no main platform window" operation mode.<br/>
	/// - About Main Area vs Work Area:<br/>
	/// - Main Area = entire viewport.<br/>
	/// - Work Area = entire viewport minus sections used by main menu bars (for platform windows), or by task bar (for platform monitor).<br/>
	/// - Windows are generally trying to stay within the Work Area of their host viewport.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiViewport")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiViewport
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiViewportFlags")]
		public ImGuiViewportFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Pos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Pos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WorkPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WorkSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DpiScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float DpiScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ParentViewportId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint ParentViewportId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawData")]
		[NativeName(NativeNameType.Type, "ImDrawData*")]
		public unsafe ImDrawData* DrawData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RendererUserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* RendererUserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformUserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PlatformUserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformHandle")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PlatformHandle;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformHandleRaw")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PlatformHandleRaw;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformWindowCreated")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte PlatformWindowCreated;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformRequestMove")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte PlatformRequestMove;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformRequestResize")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte PlatformRequestResize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformRequestClose")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte PlatformRequestClose;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiViewport(uint id = default, ImGuiViewportFlags flags = default, Vector2 pos = default, Vector2 size = default, Vector2 workPos = default, Vector2 workSize = default, float dpiScale = default, uint parentViewportId = default, ImDrawData* drawData = default, void* rendererUserData = default, void* platformUserData = default, void* platformHandle = default, void* platformHandleRaw = default, bool platformWindowCreated = default, bool platformRequestMove = default, bool platformRequestResize = default, bool platformRequestClose = default)
		{
			ID = id;
			Flags = flags;
			Pos = pos;
			Size = size;
			WorkPos = workPos;
			WorkSize = workSize;
			DpiScale = dpiScale;
			ParentViewportId = parentViewportId;
			DrawData = drawData;
			RendererUserData = rendererUserData;
			PlatformUserData = platformUserData;
			PlatformHandle = platformHandle;
			PlatformHandleRaw = platformHandleRaw;
			PlatformWindowCreated = platformWindowCreated ? (byte)1 : (byte)0;
			PlatformRequestMove = platformRequestMove ? (byte)1 : (byte)0;
			PlatformRequestResize = platformRequestResize ? (byte)1 : (byte)0;
			PlatformRequestClose = platformRequestClose ? (byte)1 : (byte)0;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiViewport_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiViewport* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

}
