// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// (Optional) This is required when enabling multi-viewport. Represent the bounds of each connected monitordisplay and their DPI.<br/>
	/// We use this information for multiple DPI support + clamping the position of popups and tooltips so they don't straddle multiple monitors.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiPlatformMonitor")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiPlatformMonitor
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MainPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 MainPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MainSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 MainSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WorkPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WorkSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WorkSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DpiScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float DpiScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformHandle")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PlatformHandle;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiPlatformMonitor(Vector2 mainPos = default, Vector2 mainSize = default, Vector2 workPos = default, Vector2 workSize = default, float dpiScale = default, void* platformHandle = default)
		{
			MainPos = mainPos;
			MainSize = mainSize;
			WorkPos = workPos;
			WorkSize = workSize;
			DpiScale = dpiScale;
			PlatformHandle = platformHandle;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPlatformMonitor_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiPlatformMonitor* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

}
