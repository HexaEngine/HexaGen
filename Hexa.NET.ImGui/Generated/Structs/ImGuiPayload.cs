// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Data payload for Drag and Drop operations: AcceptDragDropPayload(), GetDragDropPayload()<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiPayload")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiPayload
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Data")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* Data;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DataSize")]
		[NativeName(NativeNameType.Type, "int")]
		public int DataSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SourceId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint SourceId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SourceParentId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint SourceParentId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DataFrameCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int DataFrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DataType")]
		[NativeName(NativeNameType.Type, "char[33]")]
		public byte DataType_0;
		public byte DataType_1;
		public byte DataType_2;
		public byte DataType_3;
		public byte DataType_4;
		public byte DataType_5;
		public byte DataType_6;
		public byte DataType_7;
		public byte DataType_8;
		public byte DataType_9;
		public byte DataType_10;
		public byte DataType_11;
		public byte DataType_12;
		public byte DataType_13;
		public byte DataType_14;
		public byte DataType_15;
		public byte DataType_16;
		public byte DataType_17;
		public byte DataType_18;
		public byte DataType_19;
		public byte DataType_20;
		public byte DataType_21;
		public byte DataType_22;
		public byte DataType_23;
		public byte DataType_24;
		public byte DataType_25;
		public byte DataType_26;
		public byte DataType_27;
		public byte DataType_28;
		public byte DataType_29;
		public byte DataType_30;
		public byte DataType_31;
		public byte DataType_32;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Preview")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Preview;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Delivery")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Delivery;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiPayload(void* data = default, int dataSize = default, uint sourceId = default, uint sourceParentId = default, int dataFrameCount = default, byte* dataType = default, bool preview = default, bool delivery = default)
		{
			Data = data;
			DataSize = dataSize;
			SourceId = sourceId;
			SourceParentId = sourceParentId;
			DataFrameCount = dataFrameCount;
			if (dataType != default(byte*))
			{
				DataType_0 = dataType[0];
				DataType_1 = dataType[1];
				DataType_2 = dataType[2];
				DataType_3 = dataType[3];
				DataType_4 = dataType[4];
				DataType_5 = dataType[5];
				DataType_6 = dataType[6];
				DataType_7 = dataType[7];
				DataType_8 = dataType[8];
				DataType_9 = dataType[9];
				DataType_10 = dataType[10];
				DataType_11 = dataType[11];
				DataType_12 = dataType[12];
				DataType_13 = dataType[13];
				DataType_14 = dataType[14];
				DataType_15 = dataType[15];
				DataType_16 = dataType[16];
				DataType_17 = dataType[17];
				DataType_18 = dataType[18];
				DataType_19 = dataType[19];
				DataType_20 = dataType[20];
				DataType_21 = dataType[21];
				DataType_22 = dataType[22];
				DataType_23 = dataType[23];
				DataType_24 = dataType[24];
				DataType_25 = dataType[25];
				DataType_26 = dataType[26];
				DataType_27 = dataType[27];
				DataType_28 = dataType[28];
				DataType_29 = dataType[29];
				DataType_30 = dataType[30];
				DataType_31 = dataType[31];
				DataType_32 = dataType[32];
			}
			Preview = preview ? (byte)1 : (byte)0;
			Delivery = delivery ? (byte)1 : (byte)0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiPayload(void* data = default, int dataSize = default, uint sourceId = default, uint sourceParentId = default, int dataFrameCount = default, Span<byte> dataType = default, bool preview = default, bool delivery = default)
		{
			Data = data;
			DataSize = dataSize;
			SourceId = sourceId;
			SourceParentId = sourceParentId;
			DataFrameCount = dataFrameCount;
			if (dataType != default(Span<byte>))
			{
				DataType_0 = dataType[0];
				DataType_1 = dataType[1];
				DataType_2 = dataType[2];
				DataType_3 = dataType[3];
				DataType_4 = dataType[4];
				DataType_5 = dataType[5];
				DataType_6 = dataType[6];
				DataType_7 = dataType[7];
				DataType_8 = dataType[8];
				DataType_9 = dataType[9];
				DataType_10 = dataType[10];
				DataType_11 = dataType[11];
				DataType_12 = dataType[12];
				DataType_13 = dataType[13];
				DataType_14 = dataType[14];
				DataType_15 = dataType[15];
				DataType_16 = dataType[16];
				DataType_17 = dataType[17];
				DataType_18 = dataType[18];
				DataType_19 = dataType[19];
				DataType_20 = dataType[20];
				DataType_21 = dataType[21];
				DataType_22 = dataType[22];
				DataType_23 = dataType[23];
				DataType_24 = dataType[24];
				DataType_25 = dataType[25];
				DataType_26 = dataType[26];
				DataType_27 = dataType[27];
				DataType_28 = dataType[28];
				DataType_29 = dataType[29];
				DataType_30 = dataType[30];
				DataType_31 = dataType[31];
				DataType_32 = dataType[32];
			}
			Preview = preview ? (byte)1 : (byte)0;
			Delivery = delivery ? (byte)1 : (byte)0;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImGuiPayload* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiPayload* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDataType")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsDataType([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "const char*")] byte* type)
		{
			fixed (ImGuiPayload* @this = &this)
			{
				byte ret = ImGui.IsDataTypeNative(@this, type);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDataType")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsDataType([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "const char*")] ref byte type)
		{
			fixed (ImGuiPayload* @this = &this)
			{
				fixed (byte* ptype = &type)
				{
					byte ret = ImGui.IsDataTypeNative(@this, (byte*)ptype);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDataType")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsDataType([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> type)
		{
			fixed (ImGuiPayload* @this = &this)
			{
				fixed (byte* ptype = type)
				{
					byte ret = ImGui.IsDataTypeNative(@this, (byte*)ptype);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDataType")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsDataType([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "const char*")] string type)
		{
			fixed (ImGuiPayload* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (type != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(type);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(type, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = ImGui.IsDataTypeNative(@this, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDelivery")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsDelivery()
		{
			fixed (ImGuiPayload* @this = &this)
			{
				byte ret = ImGui.IsDeliveryNative(@this);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsPreview")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool IsPreview()
		{
			fixed (ImGuiPayload* @this = &this)
			{
				byte ret = ImGui.IsPreviewNative(@this);
				return ret != 0;
			}
		}

	}

}
