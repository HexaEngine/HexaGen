// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiDockNode")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDockNode
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SharedFlags")]
		[NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")]
		public ImGuiDockNodeFlags SharedFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LocalFlags")]
		[NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")]
		public ImGuiDockNodeFlags LocalFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LocalFlagsInWindows")]
		[NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")]
		public ImGuiDockNodeFlags LocalFlagsInWindows;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MergedFlags")]
		[NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")]
		public ImGuiDockNodeFlags MergedFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "State")]
		[NativeName(NativeNameType.Type, "ImGuiDockNodeState")]
		public ImGuiDockNodeState State;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ParentNode")]
		[NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public unsafe ImGuiDockNode* ParentNode;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ChildNodes")]
		[NativeName(NativeNameType.Type, "ImGuiDockNode*[2]")]
		public unsafe ImGuiDockNode* ChildNodes_0;
		public unsafe ImGuiDockNode* ChildNodes_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Windows")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr")]
		public ImVectorImGuiWindowPtr Windows;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TabBar")]
		[NativeName(NativeNameType.Type, "ImGuiTabBar*")]
		public unsafe ImGuiTabBar* TabBar;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Pos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Pos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SizeRef")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 SizeRef;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SplitAxis")]
		[NativeName(NativeNameType.Type, "ImGuiAxis")]
		public ImGuiAxis SplitAxis;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowClass")]
		[NativeName(NativeNameType.Type, "ImGuiWindowClass")]
		public ImGuiWindowClass WindowClass;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastBgColor")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint LastBgColor;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HostWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* HostWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "VisibleWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* VisibleWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CentralNode")]
		[NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public unsafe ImGuiDockNode* CentralNode;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OnlyNodeWithWindows")]
		[NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public unsafe ImGuiDockNode* OnlyNodeWithWindows;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CountNodeWithWindows")]
		[NativeName(NativeNameType.Type, "int")]
		public int CountNodeWithWindows;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrameAlive")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameAlive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrameActive")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFrameFocused")]
		[NativeName(NativeNameType.Type, "int")]
		public int LastFrameFocused;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastFocusedNodeId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint LastFocusedNodeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SelectedTabId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint SelectedTabId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantCloseTabId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint WantCloseTabId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RefViewportId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint RefViewportId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AuthorityForPos")]
		[NativeName(NativeNameType.Type, "ImGuiDataAuthority")]
		public ImGuiDataAuthority AuthorityForPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AuthorityForSize")]
		[NativeName(NativeNameType.Type, "ImGuiDataAuthority")]
		public ImGuiDataAuthority AuthorityForSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AuthorityForViewport")]
		[NativeName(NativeNameType.Type, "ImGuiDataAuthority")]
		public ImGuiDataAuthority AuthorityForViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsVisible")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsVisible;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsFocused")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsFocused;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IsBgDrawnThisFrame")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsBgDrawnThisFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HasCloseButton")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HasCloseButton;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HasWindowMenuButton")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HasWindowMenuButton;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HasCentralNodeChild")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HasCentralNodeChild;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantCloseAll")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantCloseAll;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantLockSizeOnce")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantLockSizeOnce;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantMouseMove")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantMouseMove;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantHiddenTabBarUpdate")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantHiddenTabBarUpdate;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantHiddenTabBarToggle")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WantHiddenTabBarToggle;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiDockNode(uint id = default, ImGuiDockNodeFlags sharedFlags = default, ImGuiDockNodeFlags localFlags = default, ImGuiDockNodeFlags localFlagsInWindows = default, ImGuiDockNodeFlags mergedFlags = default, ImGuiDockNodeState state = default, ImGuiDockNode* parentNode = default, ImGuiDockNode** childNodes = default, ImVectorImGuiWindowPtr windows = default, ImGuiTabBar* tabBar = default, Vector2 pos = default, Vector2 size = default, Vector2 sizeRef = default, ImGuiAxis splitAxis = default, ImGuiWindowClass windowClass = default, uint lastBgColor = default, ImGuiWindow* hostWindow = default, ImGuiWindow* visibleWindow = default, ImGuiDockNode* centralNode = default, ImGuiDockNode* onlyNodeWithWindows = default, int countNodeWithWindows = default, int lastFrameAlive = default, int lastFrameActive = default, int lastFrameFocused = default, uint lastFocusedNodeId = default, uint selectedTabId = default, uint wantCloseTabId = default, uint refViewportId = default, ImGuiDataAuthority authorityForPos = default, ImGuiDataAuthority authorityForSize = default, ImGuiDataAuthority authorityForViewport = default, bool isVisible = default, bool isFocused = default, bool isBgDrawnThisFrame = default, bool hasCloseButton = default, bool hasWindowMenuButton = default, bool hasCentralNodeChild = default, bool wantCloseAll = default, bool wantLockSizeOnce = default, bool wantMouseMove = default, bool wantHiddenTabBarUpdate = default, bool wantHiddenTabBarToggle = default)
		{
			ID = id;
			SharedFlags = sharedFlags;
			LocalFlags = localFlags;
			LocalFlagsInWindows = localFlagsInWindows;
			MergedFlags = mergedFlags;
			State = state;
			ParentNode = parentNode;
			if (childNodes != default(ImGuiDockNode**))
			{
				ChildNodes_0 = childNodes[0];
				ChildNodes_1 = childNodes[1];
			}
			Windows = windows;
			TabBar = tabBar;
			Pos = pos;
			Size = size;
			SizeRef = sizeRef;
			SplitAxis = splitAxis;
			WindowClass = windowClass;
			LastBgColor = lastBgColor;
			HostWindow = hostWindow;
			VisibleWindow = visibleWindow;
			CentralNode = centralNode;
			OnlyNodeWithWindows = onlyNodeWithWindows;
			CountNodeWithWindows = countNodeWithWindows;
			LastFrameAlive = lastFrameAlive;
			LastFrameActive = lastFrameActive;
			LastFrameFocused = lastFrameFocused;
			LastFocusedNodeId = lastFocusedNodeId;
			SelectedTabId = selectedTabId;
			WantCloseTabId = wantCloseTabId;
			RefViewportId = refViewportId;
			AuthorityForPos = authorityForPos;
			AuthorityForSize = authorityForSize;
			AuthorityForViewport = authorityForViewport;
			IsVisible = isVisible ? (byte)1 : (byte)0;
			IsFocused = isFocused ? (byte)1 : (byte)0;
			IsBgDrawnThisFrame = isBgDrawnThisFrame ? (byte)1 : (byte)0;
			HasCloseButton = hasCloseButton ? (byte)1 : (byte)0;
			HasWindowMenuButton = hasWindowMenuButton ? (byte)1 : (byte)0;
			HasCentralNodeChild = hasCentralNodeChild ? (byte)1 : (byte)0;
			WantCloseAll = wantCloseAll ? (byte)1 : (byte)0;
			WantLockSizeOnce = wantLockSizeOnce ? (byte)1 : (byte)0;
			WantMouseMove = wantMouseMove ? (byte)1 : (byte)0;
			WantHiddenTabBarUpdate = wantHiddenTabBarUpdate ? (byte)1 : (byte)0;
			WantHiddenTabBarToggle = wantHiddenTabBarToggle ? (byte)1 : (byte)0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiDockNode(uint id = default, ImGuiDockNodeFlags sharedFlags = default, ImGuiDockNodeFlags localFlags = default, ImGuiDockNodeFlags localFlagsInWindows = default, ImGuiDockNodeFlags mergedFlags = default, ImGuiDockNodeState state = default, ImGuiDockNode* parentNode = default, Span<Pointer<ImGuiDockNode>> childNodes = default, ImVectorImGuiWindowPtr windows = default, ImGuiTabBar* tabBar = default, Vector2 pos = default, Vector2 size = default, Vector2 sizeRef = default, ImGuiAxis splitAxis = default, ImGuiWindowClass windowClass = default, uint lastBgColor = default, ImGuiWindow* hostWindow = default, ImGuiWindow* visibleWindow = default, ImGuiDockNode* centralNode = default, ImGuiDockNode* onlyNodeWithWindows = default, int countNodeWithWindows = default, int lastFrameAlive = default, int lastFrameActive = default, int lastFrameFocused = default, uint lastFocusedNodeId = default, uint selectedTabId = default, uint wantCloseTabId = default, uint refViewportId = default, ImGuiDataAuthority authorityForPos = default, ImGuiDataAuthority authorityForSize = default, ImGuiDataAuthority authorityForViewport = default, bool isVisible = default, bool isFocused = default, bool isBgDrawnThisFrame = default, bool hasCloseButton = default, bool hasWindowMenuButton = default, bool hasCentralNodeChild = default, bool wantCloseAll = default, bool wantLockSizeOnce = default, bool wantMouseMove = default, bool wantHiddenTabBarUpdate = default, bool wantHiddenTabBarToggle = default)
		{
			ID = id;
			SharedFlags = sharedFlags;
			LocalFlags = localFlags;
			LocalFlagsInWindows = localFlagsInWindows;
			MergedFlags = mergedFlags;
			State = state;
			ParentNode = parentNode;
			if (childNodes != default(Span<Pointer<ImGuiDockNode>>))
			{
				ChildNodes_0 = childNodes[0];
				ChildNodes_1 = childNodes[1];
			}
			Windows = windows;
			TabBar = tabBar;
			Pos = pos;
			Size = size;
			SizeRef = sizeRef;
			SplitAxis = splitAxis;
			WindowClass = windowClass;
			LastBgColor = lastBgColor;
			HostWindow = hostWindow;
			VisibleWindow = visibleWindow;
			CentralNode = centralNode;
			OnlyNodeWithWindows = onlyNodeWithWindows;
			CountNodeWithWindows = countNodeWithWindows;
			LastFrameAlive = lastFrameAlive;
			LastFrameActive = lastFrameActive;
			LastFrameFocused = lastFrameFocused;
			LastFocusedNodeId = lastFocusedNodeId;
			SelectedTabId = selectedTabId;
			WantCloseTabId = wantCloseTabId;
			RefViewportId = refViewportId;
			AuthorityForPos = authorityForPos;
			AuthorityForSize = authorityForSize;
			AuthorityForViewport = authorityForViewport;
			IsVisible = isVisible ? (byte)1 : (byte)0;
			IsFocused = isFocused ? (byte)1 : (byte)0;
			IsBgDrawnThisFrame = isBgDrawnThisFrame ? (byte)1 : (byte)0;
			HasCloseButton = hasCloseButton ? (byte)1 : (byte)0;
			HasWindowMenuButton = hasWindowMenuButton ? (byte)1 : (byte)0;
			HasCentralNodeChild = hasCentralNodeChild ? (byte)1 : (byte)0;
			WantCloseAll = wantCloseAll ? (byte)1 : (byte)0;
			WantLockSizeOnce = wantLockSizeOnce ? (byte)1 : (byte)0;
			WantMouseMove = wantMouseMove ? (byte)1 : (byte)0;
			WantHiddenTabBarUpdate = wantHiddenTabBarUpdate ? (byte)1 : (byte)0;
			WantHiddenTabBarToggle = wantHiddenTabBarToggle ? (byte)1 : (byte)0;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Pointer<ImGuiDockNode>> ChildNodes
		
		{
			get
			{
				fixed (ImGuiDockNode** p = &this.ChildNodes_0)
				{
					return new Span<Pointer<ImGuiDockNode>>(p, 2);
				}
			}
		}
	}

}
