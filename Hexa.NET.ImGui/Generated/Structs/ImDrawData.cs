// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// All draw data to render a Dear ImGui frame<br/>
	/// (NB: the style and the naming convention here is a little inconsistent, we currently preserve them for backward compatibility purpose,<br/>
	/// as this is one of the oldest structure exposed by the library! Basically, ImDrawList == CmdList)<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImDrawData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Valid")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Valid;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CmdListsCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int CmdListsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TotalIdxCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int TotalIdxCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TotalVtxCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int TotalVtxCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CmdLists")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawListPtr")]
		public ImVectorImDrawListPtr CmdLists;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 DisplayPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplaySize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 DisplaySize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FramebufferScale")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 FramebufferScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OwnerViewport")]
		[NativeName(NativeNameType.Type, "ImGuiViewport*")]
		public unsafe ImGuiViewport* OwnerViewport;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImDrawData(bool valid = default, int cmdListsCount = default, int totalIdxCount = default, int totalVtxCount = default, ImVectorImDrawListPtr cmdLists = default, Vector2 displayPos = default, Vector2 displaySize = default, Vector2 framebufferScale = default, ImGuiViewport* ownerViewport = default)
		{
			Valid = valid ? (byte)1 : (byte)0;
			CmdListsCount = cmdListsCount;
			TotalIdxCount = totalIdxCount;
			TotalVtxCount = totalVtxCount;
			CmdLists = cmdLists;
			DisplayPos = displayPos;
			DisplaySize = displaySize;
			FramebufferScale = framebufferScale;
			OwnerViewport = ownerViewport;
		}


		/// <summary>
		/// Helper to add an external draw list into an existing ImDrawData.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_AddDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddDrawList([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList)
		{
			fixed (ImDrawData* @this = &this)
			{
				ImGui.AddDrawListNative(@this, drawList);
			}
		}

		/// <summary>
		/// Helper to add an external draw list into an existing ImDrawData.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_AddDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void AddDrawList([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList)
		{
			fixed (ImDrawData* @this = &this)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					ImGui.AddDrawListNative(@this, (ImDrawList*)pdrawList);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImDrawData* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		/// <summary>
		/// Helper to convert all buffers from indexed to non-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_DeIndexAllBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void DeIndexAllBuffers()
		{
			fixed (ImDrawData* @this = &this)
			{
				ImGui.DeIndexAllBuffersNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImDrawData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>
		/// Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than Dear ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_ScaleClipRects")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ScaleClipRects([NativeName(NativeNameType.Param, "fb_scale")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 fbScale)
		{
			fixed (ImDrawData* @this = &this)
			{
				ImGui.ScaleClipRectsNative(@this, fbScale);
			}
		}

	}

}
