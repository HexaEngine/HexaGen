// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Typically, 1 command = 1 GPU draw call (unless command is a callback)<br/>
	/// - VtxOffset: When 'io.BackendFlags &amp; ImGuiBackendFlags_RendererHasVtxOffset' is enabled,<br/>
	/// this fields allow us to render meshes larger than 64K vertices while keeping 16-bit indices.<br/>
	/// Backends made for &lt;1.71. will typically ignore the VtxOffset fields.<br/>
	/// - The ClipRectTextureIdVtxOffset fields must be contiguous as we memcmp() them together (this is asserted for).<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImDrawCmd")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawCmd
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ClipRect")]
		[NativeName(NativeNameType.Type, "ImVec4")]
		public Vector4 ClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureId")]
		[NativeName(NativeNameType.Type, "ImTextureID")]
		public ImTextureID TextureId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "VtxOffset")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint VtxOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IdxOffset")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint IdxOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ElemCount")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint ElemCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "UserCallback")]
		[NativeName(NativeNameType.Type, "ImDrawCallback")]
		public unsafe void* UserCallback;
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "UserCallbackData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserCallbackData;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImDrawCmd(Vector4 clipRect = default, ImTextureID textureId = default, uint vtxOffset = default, uint idxOffset = default, uint elemCount = default, ImDrawCallback userCallback = default, void* userCallbackData = default)
		{
			ClipRect = clipRect;
			TextureId = textureId;
			VtxOffset = vtxOffset;
			IdxOffset = idxOffset;
			ElemCount = elemCount;
			UserCallback = (void*)Marshal.GetFunctionPointerForDelegate(userCallback);
			UserCallbackData = userCallbackData;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawCmd_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImDrawCmd* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawCmd_GetTexID")]
		[return: NativeName(NativeNameType.Type, "ImTextureID")]
		public unsafe ImTextureID GetTexID()
		{
			fixed (ImDrawCmd* @this = &this)
			{
				ImTextureID ret = ImGui.GetTexIDNative(@this);
				return ret;
			}
		}

	}

}
