// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Helper: Manually clip large list of items.<br/>
	/// If you have lots evenly spaced items and you have random access to the list, you can perform coarse<br/>
	/// clipping based on visibility to only submit items that are in view.<br/>
	/// The clipper calculates the range of visible items and advance the cursor to compensate for the non-visible items we have skipped.<br/>
	/// (Dear ImGui already clip items based on their bounds but: it needs to first layout the item to do so, and generally<br/>
	/// fetchingsubmitting your own data incurs additional cost. Coarse clipping using ImGuiListClipper allows you to easily<br/>
	/// scale using lists with tens of thousands of items without a problem)<br/>
	/// Usage:<br/>
	/// ImGuiListClipper clipper;<br/>
	/// clipper.Begin(1000);          We have 1000 elements, evenly spaced.<br/>
	/// while (clipper.Step())<br/>
	/// for (int i = clipper.DisplayStart; i &lt; clipper.DisplayEnd; i++)<br/>
	/// ImGui::Text("line number %d", i);<br/>
	/// Generally what happens is:<br/>
	/// - Clipper lets you process the first element (DisplayStart = 0, DisplayEnd = 1) regardless of it being visible or not.<br/>
	/// - User code submit that one element.<br/>
	/// - Clipper can measure the height of the first element<br/>
	/// - Clipper calculate the actual range of elements to display based on the current clipping rectangle, position the cursor before the first visible element.<br/>
	/// - User code submit visible elements.<br/>
	/// - The clipper also handles various subtleties related to keyboardgamepad navigation, wrapping etc.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiListClipper")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiListClipper
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Ctx")]
		[NativeName(NativeNameType.Type, "ImGuiContext*")]
		public unsafe ImGuiContext* Ctx;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayStart")]
		[NativeName(NativeNameType.Type, "int")]
		public int DisplayStart;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayEnd")]
		[NativeName(NativeNameType.Type, "int")]
		public int DisplayEnd;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemsCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int ItemsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemsHeight")]
		[NativeName(NativeNameType.Type, "float")]
		public float ItemsHeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "StartPosY")]
		[NativeName(NativeNameType.Type, "float")]
		public float StartPosY;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "StartSeekOffsetY")]
		[NativeName(NativeNameType.Type, "double")]
		public double StartSeekOffsetY;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TempData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* TempData;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiListClipper(ImGuiContext* ctx = default, int displayStart = default, int displayEnd = default, int itemsCount = default, float itemsHeight = default, float startPosY = default, double startSeekOffsetY = default, void* tempData = default)
		{
			Ctx = ctx;
			DisplayStart = displayStart;
			DisplayEnd = displayEnd;
			ItemsCount = itemsCount;
			ItemsHeight = itemsHeight;
			StartPosY = startPosY;
			StartSeekOffsetY = startSeekOffsetY;
			TempData = tempData;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_Begin")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Begin([NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "items_height")] [NativeName(NativeNameType.Type, "float")] float itemsHeight)
		{
			fixed (ImGuiListClipper* @this = &this)
			{
				ImGui.BeginNative(@this, itemsCount, itemsHeight);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_Begin")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Begin([NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			fixed (ImGuiListClipper* @this = &this)
			{
				ImGui.BeginNative(@this, itemsCount, (float)(-1.0f));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiListClipper* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>
		/// Automatically called on the last call of Step() that returns false.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_End")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void End()
		{
			fixed (ImGuiListClipper* @this = &this)
			{
				ImGui.EndNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_IncludeItemByIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void IncludeItemByIndex([NativeName(NativeNameType.Param, "item_index")] [NativeName(NativeNameType.Type, "int")] int itemIndex)
		{
			fixed (ImGuiListClipper* @this = &this)
			{
				ImGui.IncludeItemByIndexNative(@this, itemIndex);
			}
		}

		/// <summary>
		/// item_end is exclusive e.g. use (42, 42+1) to make item 42 never clipped.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_IncludeItemsByIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void IncludeItemsByIndex([NativeName(NativeNameType.Param, "item_begin")] [NativeName(NativeNameType.Type, "int")] int itemBegin, [NativeName(NativeNameType.Param, "item_end")] [NativeName(NativeNameType.Type, "int")] int itemEnd)
		{
			fixed (ImGuiListClipper* @this = &this)
			{
				ImGui.IncludeItemsByIndexNative(@this, itemBegin, itemEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_SeekCursorForItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SeekCursorForItem([NativeName(NativeNameType.Param, "item_index")] [NativeName(NativeNameType.Type, "int")] int itemIndex)
		{
			fixed (ImGuiListClipper* @this = &this)
			{
				ImGui.SeekCursorForItemNative(@this, itemIndex);
			}
		}

		/// <summary>
		/// Call until it returns false. The DisplayStartDisplayEnd fields will be set and you can processdraw those items.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_Step")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Step()
		{
			fixed (ImGuiListClipper* @this = &this)
			{
				byte ret = ImGui.StepNative(@this);
				return ret != 0;
			}
		}

	}

}
