// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Shared state of InputText(), passed as an argument to your callback when a ImGuiInputTextFlags_Callback* flag is used.<br/>
	/// The callback function should return 0 by default.<br/>
	/// Callbacks (follow a flag name and see comments in ImGuiInputTextFlags_ declarations for more details)<br/>
	/// - ImGuiInputTextFlags_CallbackEdit:        Callback on buffer edit (note that InputText() already returns true on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active)<br/>
	/// - ImGuiInputTextFlags_CallbackAlways:      Callback on each iteration<br/>
	/// - ImGuiInputTextFlags_CallbackCompletion:  Callback on pressing TAB<br/>
	/// - ImGuiInputTextFlags_CallbackHistory:     Callback on pressing UpDown arrows<br/>
	/// - ImGuiInputTextFlags_CallbackCharFilter:  Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.<br/>
	/// - ImGuiInputTextFlags_CallbackResize:      Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiInputTextCallbackData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputTextCallbackData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Ctx")]
		[NativeName(NativeNameType.Type, "ImGuiContext*")]
		public unsafe ImGuiContext* Ctx;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EventFlag")]
		[NativeName(NativeNameType.Type, "ImGuiInputTextFlags")]
		public ImGuiInputTextFlags EventFlag;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiInputTextFlags")]
		public ImGuiInputTextFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "UserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EventChar")]
		[NativeName(NativeNameType.Type, "ImWchar")]
		public char EventChar;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EventKey")]
		[NativeName(NativeNameType.Type, "ImGuiKey")]
		public ImGuiKey EventKey;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Buf")]
		[NativeName(NativeNameType.Type, "char*")]
		public unsafe byte* Buf;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BufTextLen")]
		[NativeName(NativeNameType.Type, "int")]
		public int BufTextLen;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BufSize")]
		[NativeName(NativeNameType.Type, "int")]
		public int BufSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BufDirty")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte BufDirty;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CursorPos")]
		[NativeName(NativeNameType.Type, "int")]
		public int CursorPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SelectionStart")]
		[NativeName(NativeNameType.Type, "int")]
		public int SelectionStart;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SelectionEnd")]
		[NativeName(NativeNameType.Type, "int")]
		public int SelectionEnd;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiInputTextCallbackData(ImGuiContext* ctx = default, ImGuiInputTextFlags eventFlag = default, ImGuiInputTextFlags flags = default, void* userData = default, char eventChar = default, ImGuiKey eventKey = default, byte* buf = default, int bufTextLen = default, int bufSize = default, bool bufDirty = default, int cursorPos = default, int selectionStart = default, int selectionEnd = default)
		{
			Ctx = ctx;
			EventFlag = eventFlag;
			Flags = flags;
			UserData = userData;
			EventChar = eventChar;
			EventKey = eventKey;
			Buf = buf;
			BufTextLen = bufTextLen;
			BufSize = bufSize;
			BufDirty = bufDirty ? (byte)1 : (byte)0;
			CursorPos = cursorPos;
			SelectionStart = selectionStart;
			SelectionEnd = selectionEnd;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_ClearSelection")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ClearSelection()
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.ClearSelectionNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_DeleteChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void DeleteChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "bytes_count")] [NativeName(NativeNameType.Type, "int")] int bytesCount)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.DeleteCharsNative(@this, pos, bytesCount);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_HasSelection")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool HasSelection()
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				byte ret = ImGui.HasSelectionNative(@this);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.InsertCharsNative(@this, pos, text, textEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.InsertCharsNative(@this, pos, text, (byte*)(default));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					ImGui.InsertCharsNative(@this, pos, (byte*)ptext, textEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					ImGui.InsertCharsNative(@this, pos, (byte*)ptext, (byte*)(default));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				fixed (byte* ptext = text)
				{
					ImGui.InsertCharsNative(@this, pos, (byte*)ptext, textEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				fixed (byte* ptext = text)
				{
					ImGui.InsertCharsNative(@this, pos, (byte*)ptext, (byte*)(default));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.InsertCharsNative(@this, pos, pStr0, textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.InsertCharsNative(@this, pos, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.InsertCharsNative(@this, pos, text, (byte*)ptextEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					ImGui.InsertCharsNative(@this, pos, text, (byte*)ptextEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.InsertCharsNative(@this, pos, text, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.InsertCharsNative(@this, pos, (byte*)ptext, (byte*)ptextEnd);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				fixed (byte* ptext = text)
				{
					fixed (byte* ptextEnd = textEnd)
					{
						ImGui.InsertCharsNative(@this, pos, (byte*)ptext, (byte*)ptextEnd);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void InsertChars([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.InsertCharsNative(@this, pos, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_SelectAll")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SelectAll()
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.SelectAllNative(@this);
			}
		}

	}

}
