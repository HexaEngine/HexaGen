// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Optional helper to store multi-selection state + apply multi-selection requests.<br/>
	/// - Used by our demos and provided as a convenience to easily implement basic multi-selection.<br/>
	/// - Iterate selection with 'void* it = NULL; ImGuiID id; while (selection.GetNextSelectedItem(&amp;it, &amp;id))  ... '<br/>
	/// Or you can check 'if (Contains(id))  ... ' for each possible object if their number is not too high to iterate.<br/>
	/// - USING THIS IS NOT MANDATORY. This is only a helper and not a required API.<br/>
	/// To store a multi-selection, in your application you could:<br/>
	/// - Use this helper as a convenience. We use our simple key-&gt;value ImGuiStorage as a std::set&lt;ImGuiID&gt; replacement.<br/>
	/// - Use your own external storage: e.g. std::set&lt;MyObjectId&gt;, std::vector&lt;MyObjectId&gt;, interval trees, intrusively stored selection etc.<br/>
	/// In ImGuiSelectionBasicStorage we:<br/>
	/// - always use indices in the multi-selection API (passed to SetNextItemSelectionUserData(), retrieved in ImGuiMultiSelectIO)<br/>
	/// - use the AdapterIndexToStorageId() indirection layer to abstract how persistent selection data is derived from an index.<br/>
	/// - use decently optimized logic to allow queries and insertion of very large selection sets.<br/>
	/// - do not preserve selection order.<br/>
	/// Many combinations are possible depending on how you prefer to store your items and how you prefer to store your selection.<br/>
	/// Large applications are likely to eventually want to get rid of this indirection layer and do their own thing.<br/>
	/// See https:github.comocornutimguiwikiMulti-Select for details and pseudo-code using this helper.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiSelectionBasicStorage")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiSelectionBasicStorage
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "int")]
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PreserveOrder")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte PreserveOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "UserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AdapterIndexToStorageId")]
		[NativeName(NativeNameType.Type, "ImGuiID (*)(ImGuiSelectionBasicStorage* self, int idx)*")]
		public unsafe void* AdapterIndexToStorageId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_SelectionOrder")]
		[NativeName(NativeNameType.Type, "int")]
		public int SelectionOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_Storage")]
		[NativeName(NativeNameType.Type, "ImGuiStorage")]
		public ImGuiStorage Storage;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiSelectionBasicStorage(int size = default, bool preserveOrder = default, void* userData = default, delegate*<ImGuiSelectionBasicStorage*, int, uint> adapterIndexToStorageId = default, int selectionOrder = default, ImGuiStorage storage = default)
		{
			Size = size;
			PreserveOrder = preserveOrder ? (byte)1 : (byte)0;
			UserData = userData;
			AdapterIndexToStorageId = (void*)adapterIndexToStorageId;
			SelectionOrder = selectionOrder;
			Storage = storage;
		}


		/// <summary>
		/// Apply selection requests coming from BeginMultiSelect() and EndMultiSelect() functions. It uses 'items_count' passed to BeginMultiSelect()<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_ApplyRequests")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ApplyRequests([NativeName(NativeNameType.Param, "ms_io")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectIO*")] ImGuiMultiSelectIO* msIo)
		{
			fixed (ImGuiSelectionBasicStorage* @this = &this)
			{
				ImGui.ApplyRequestsNative(@this, msIo);
			}
		}

		/// <summary>
		/// Apply selection requests coming from BeginMultiSelect() and EndMultiSelect() functions. It uses 'items_count' passed to BeginMultiSelect()<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_ApplyRequests")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void ApplyRequests([NativeName(NativeNameType.Param, "ms_io")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectIO*")] ref ImGuiMultiSelectIO msIo)
		{
			fixed (ImGuiSelectionBasicStorage* @this = &this)
			{
				fixed (ImGuiMultiSelectIO* pmsIo = &msIo)
				{
					ImGui.ApplyRequestsNative(@this, (ImGuiMultiSelectIO*)pmsIo);
				}
			}
		}

		/// <summary>
		/// Clear selection<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Clear()
		{
			fixed (ImGuiSelectionBasicStorage* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		/// <summary>
		/// Query if an item id is in selection.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_Contains")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool Contains([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			fixed (ImGuiSelectionBasicStorage* @this = &this)
			{
				byte ret = ImGui.ContainsNative(@this, id);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiSelectionBasicStorage* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>
		/// Iterate selection with 'void* it = NULL; ImGuiId id; while (selection.GetNextSelectedItem(&amp;it, &amp;id))  ... '<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_GetNextSelectedItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetNextSelectedItem([NativeName(NativeNameType.Param, "opaque_it")] [NativeName(NativeNameType.Type, "void**")] void** opaqueIt, [NativeName(NativeNameType.Param, "out_id")] [NativeName(NativeNameType.Type, "ImGuiID*")] uint* outId)
		{
			fixed (ImGuiSelectionBasicStorage* @this = &this)
			{
				byte ret = ImGui.GetNextSelectedItemNative(@this, opaqueIt, outId);
				return ret != 0;
			}
		}

		/// <summary>
		/// Iterate selection with 'void* it = NULL; ImGuiId id; while (selection.GetNextSelectedItem(&amp;it, &amp;id))  ... '<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_GetNextSelectedItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public unsafe bool GetNextSelectedItem([NativeName(NativeNameType.Param, "opaque_it")] [NativeName(NativeNameType.Type, "void**")] void** opaqueIt, [NativeName(NativeNameType.Param, "out_id")] [NativeName(NativeNameType.Type, "ImGuiID*")] ref uint outId)
		{
			fixed (ImGuiSelectionBasicStorage* @this = &this)
			{
				fixed (uint* poutId = &outId)
				{
					byte ret = ImGui.GetNextSelectedItemNative(@this, opaqueIt, (uint*)poutId);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Convert index to item id based on provided adapter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_GetStorageIdFromIndex")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public unsafe uint GetStorageIdFromIndex([NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "int")] int idx)
		{
			fixed (ImGuiSelectionBasicStorage* @this = &this)
			{
				uint ret = ImGui.GetStorageIdFromIndexNative(@this, idx);
				return ret;
			}
		}

		/// <summary>
		/// Addremove an item from selection (generally done by ApplyRequests() function)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_SetItemSelected")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetItemSelected([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected)
		{
			fixed (ImGuiSelectionBasicStorage* @this = &this)
			{
				ImGui.SetItemSelectedNative(@this, id, selected ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// Swap two selections<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_Swap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Swap([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* r)
		{
			fixed (ImGuiSelectionBasicStorage* @this = &this)
			{
				ImGui.SwapNative(@this, r);
			}
		}

		/// <summary>
		/// Swap two selections<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_Swap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Swap([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ref ImGuiSelectionBasicStorage r)
		{
			fixed (ImGuiSelectionBasicStorage* @this = &this)
			{
				fixed (ImGuiSelectionBasicStorage* pr = &r)
				{
					ImGui.SwapNative(@this, (ImGuiSelectionBasicStorage*)pr);
				}
			}
		}

	}

}
