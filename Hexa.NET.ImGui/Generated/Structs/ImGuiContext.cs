// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiContext")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiContext
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Initialized")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Initialized;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontAtlasOwnedByContext")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte FontAtlasOwnedByContext;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IO")]
		[NativeName(NativeNameType.Type, "ImGuiIO")]
		public ImGuiIO IO;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformIO")]
		[NativeName(NativeNameType.Type, "ImGuiPlatformIO")]
		public ImGuiPlatformIO PlatformIO;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Style")]
		[NativeName(NativeNameType.Type, "ImGuiStyle")]
		public ImGuiStyle Style;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigFlagsCurrFrame")]
		[NativeName(NativeNameType.Type, "ImGuiConfigFlags")]
		public ImGuiConfigFlags ConfigFlagsCurrFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigFlagsLastFrame")]
		[NativeName(NativeNameType.Type, "ImGuiConfigFlags")]
		public ImGuiConfigFlags ConfigFlagsLastFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Font")]
		[NativeName(NativeNameType.Type, "ImFont*")]
		public unsafe ImFont* Font;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float FontSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontBaseSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float FontBaseSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float FontScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentDpiScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float CurrentDpiScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawListSharedData")]
		[NativeName(NativeNameType.Type, "ImDrawListSharedData")]
		public ImDrawListSharedData DrawListSharedData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Time")]
		[NativeName(NativeNameType.Type, "double")]
		public double Time;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FrameCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int FrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FrameCountEnded")]
		[NativeName(NativeNameType.Type, "int")]
		public int FrameCountEnded;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FrameCountPlatformEnded")]
		[NativeName(NativeNameType.Type, "int")]
		public int FrameCountPlatformEnded;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FrameCountRendered")]
		[NativeName(NativeNameType.Type, "int")]
		public int FrameCountRendered;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WithinFrameScope")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WithinFrameScope;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WithinFrameScopeWithImplicitWindow")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WithinFrameScopeWithImplicitWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WithinEndChild")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WithinEndChild;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "GcCompactAll")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte GcCompactAll;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TestEngineHookItems")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte TestEngineHookItems;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TestEngine")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* TestEngine;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ContextName")]
		[NativeName(NativeNameType.Type, "char[16]")]
		public byte ContextName_0;
		public byte ContextName_1;
		public byte ContextName_2;
		public byte ContextName_3;
		public byte ContextName_4;
		public byte ContextName_5;
		public byte ContextName_6;
		public byte ContextName_7;
		public byte ContextName_8;
		public byte ContextName_9;
		public byte ContextName_10;
		public byte ContextName_11;
		public byte ContextName_12;
		public byte ContextName_13;
		public byte ContextName_14;
		public byte ContextName_15;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InputEventsQueue")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiInputEvent")]
		public ImVectorImGuiInputEvent InputEventsQueue;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InputEventsTrail")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiInputEvent")]
		public ImVectorImGuiInputEvent InputEventsTrail;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InputEventsNextMouseSource")]
		[NativeName(NativeNameType.Type, "ImGuiMouseSource")]
		public ImGuiMouseSource InputEventsNextMouseSource;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InputEventsNextEventId")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint InputEventsNextEventId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Windows")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr")]
		public ImVectorImGuiWindowPtr Windows;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowsFocusOrder")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr")]
		public ImVectorImGuiWindowPtr WindowsFocusOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowsTempSortBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr")]
		public ImVectorImGuiWindowPtr WindowsTempSortBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentWindowStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiWindowStackData")]
		public ImVectorImGuiWindowStackData CurrentWindowStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowsById")]
		[NativeName(NativeNameType.Type, "ImGuiStorage")]
		public ImGuiStorage WindowsById;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowsActiveCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int WindowsActiveCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowsHoverPadding")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WindowsHoverPadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugBreakInWindow")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint DebugBreakInWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* CurrentWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* HoveredWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredWindowUnderMovingWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* HoveredWindowUnderMovingWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredWindowBeforeClear")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* HoveredWindowBeforeClear;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MovingWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* MovingWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WheelingWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* WheelingWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WheelingWindowRefMousePos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WheelingWindowRefMousePos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WheelingWindowStartFrame")]
		[NativeName(NativeNameType.Type, "int")]
		public int WheelingWindowStartFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WheelingWindowScrolledFrame")]
		[NativeName(NativeNameType.Type, "int")]
		public int WheelingWindowScrolledFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WheelingWindowReleaseTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float WheelingWindowReleaseTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WheelingWindowWheelRemainder")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WheelingWindowWheelRemainder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WheelingAxisAvg")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 WheelingAxisAvg;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugHookIdInfo")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint DebugHookIdInfo;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint HoveredId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredIdPreviousFrame")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint HoveredIdPreviousFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredIdTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float HoveredIdTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredIdNotActiveTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float HoveredIdNotActiveTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredIdAllowOverlap")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HoveredIdAllowOverlap;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoveredIdIsDisabled")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte HoveredIdIsDisabled;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemUnclipByLog")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ItemUnclipByLog;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint ActiveId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdIsAlive")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint ActiveIdIsAlive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float ActiveIdTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdIsJustActivated")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdIsJustActivated;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdAllowOverlap")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdAllowOverlap;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdNoClearOnFocusLoss")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdNoClearOnFocusLoss;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdHasBeenPressedBefore")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdHasBeenPressedBefore;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdHasBeenEditedBefore")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdHasBeenEditedBefore;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdHasBeenEditedThisFrame")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdHasBeenEditedThisFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdFromShortcut")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdFromShortcut;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdMouseButton")]
		[NativeName(NativeNameType.Type, "int")]
		public int ActiveIdMouseButton;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdClickOffset")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 ActiveIdClickOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* ActiveIdWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdSource")]
		[NativeName(NativeNameType.Type, "ImGuiInputSource")]
		public ImGuiInputSource ActiveIdSource;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdPreviousFrame")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint ActiveIdPreviousFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdPreviousFrameIsAlive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdPreviousFrameIsAlive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdPreviousFrameHasBeenEditedBefore")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdPreviousFrameHasBeenEditedBefore;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdPreviousFrameWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* ActiveIdPreviousFrameWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastActiveId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint LastActiveId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastActiveIdTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float LastActiveIdTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastKeyModsChangeTime")]
		[NativeName(NativeNameType.Type, "double")]
		public double LastKeyModsChangeTime;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastKeyModsChangeFromNoneTime")]
		[NativeName(NativeNameType.Type, "double")]
		public double LastKeyModsChangeFromNoneTime;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastKeyboardKeyPressTime")]
		[NativeName(NativeNameType.Type, "double")]
		public double LastKeyboardKeyPressTime;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "KeysMayBeCharInput")]
		[NativeName(NativeNameType.Type, "ImBitArrayForNamedKeys")]
		public nuint KeysMayBeCharInput;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "KeysOwnerData")]
		[NativeName(NativeNameType.Type, "ImGuiKeyOwnerData[154]")]
		public ImGuiKeyOwnerData KeysOwnerData_0;
		public ImGuiKeyOwnerData KeysOwnerData_1;
		public ImGuiKeyOwnerData KeysOwnerData_2;
		public ImGuiKeyOwnerData KeysOwnerData_3;
		public ImGuiKeyOwnerData KeysOwnerData_4;
		public ImGuiKeyOwnerData KeysOwnerData_5;
		public ImGuiKeyOwnerData KeysOwnerData_6;
		public ImGuiKeyOwnerData KeysOwnerData_7;
		public ImGuiKeyOwnerData KeysOwnerData_8;
		public ImGuiKeyOwnerData KeysOwnerData_9;
		public ImGuiKeyOwnerData KeysOwnerData_10;
		public ImGuiKeyOwnerData KeysOwnerData_11;
		public ImGuiKeyOwnerData KeysOwnerData_12;
		public ImGuiKeyOwnerData KeysOwnerData_13;
		public ImGuiKeyOwnerData KeysOwnerData_14;
		public ImGuiKeyOwnerData KeysOwnerData_15;
		public ImGuiKeyOwnerData KeysOwnerData_16;
		public ImGuiKeyOwnerData KeysOwnerData_17;
		public ImGuiKeyOwnerData KeysOwnerData_18;
		public ImGuiKeyOwnerData KeysOwnerData_19;
		public ImGuiKeyOwnerData KeysOwnerData_20;
		public ImGuiKeyOwnerData KeysOwnerData_21;
		public ImGuiKeyOwnerData KeysOwnerData_22;
		public ImGuiKeyOwnerData KeysOwnerData_23;
		public ImGuiKeyOwnerData KeysOwnerData_24;
		public ImGuiKeyOwnerData KeysOwnerData_25;
		public ImGuiKeyOwnerData KeysOwnerData_26;
		public ImGuiKeyOwnerData KeysOwnerData_27;
		public ImGuiKeyOwnerData KeysOwnerData_28;
		public ImGuiKeyOwnerData KeysOwnerData_29;
		public ImGuiKeyOwnerData KeysOwnerData_30;
		public ImGuiKeyOwnerData KeysOwnerData_31;
		public ImGuiKeyOwnerData KeysOwnerData_32;
		public ImGuiKeyOwnerData KeysOwnerData_33;
		public ImGuiKeyOwnerData KeysOwnerData_34;
		public ImGuiKeyOwnerData KeysOwnerData_35;
		public ImGuiKeyOwnerData KeysOwnerData_36;
		public ImGuiKeyOwnerData KeysOwnerData_37;
		public ImGuiKeyOwnerData KeysOwnerData_38;
		public ImGuiKeyOwnerData KeysOwnerData_39;
		public ImGuiKeyOwnerData KeysOwnerData_40;
		public ImGuiKeyOwnerData KeysOwnerData_41;
		public ImGuiKeyOwnerData KeysOwnerData_42;
		public ImGuiKeyOwnerData KeysOwnerData_43;
		public ImGuiKeyOwnerData KeysOwnerData_44;
		public ImGuiKeyOwnerData KeysOwnerData_45;
		public ImGuiKeyOwnerData KeysOwnerData_46;
		public ImGuiKeyOwnerData KeysOwnerData_47;
		public ImGuiKeyOwnerData KeysOwnerData_48;
		public ImGuiKeyOwnerData KeysOwnerData_49;
		public ImGuiKeyOwnerData KeysOwnerData_50;
		public ImGuiKeyOwnerData KeysOwnerData_51;
		public ImGuiKeyOwnerData KeysOwnerData_52;
		public ImGuiKeyOwnerData KeysOwnerData_53;
		public ImGuiKeyOwnerData KeysOwnerData_54;
		public ImGuiKeyOwnerData KeysOwnerData_55;
		public ImGuiKeyOwnerData KeysOwnerData_56;
		public ImGuiKeyOwnerData KeysOwnerData_57;
		public ImGuiKeyOwnerData KeysOwnerData_58;
		public ImGuiKeyOwnerData KeysOwnerData_59;
		public ImGuiKeyOwnerData KeysOwnerData_60;
		public ImGuiKeyOwnerData KeysOwnerData_61;
		public ImGuiKeyOwnerData KeysOwnerData_62;
		public ImGuiKeyOwnerData KeysOwnerData_63;
		public ImGuiKeyOwnerData KeysOwnerData_64;
		public ImGuiKeyOwnerData KeysOwnerData_65;
		public ImGuiKeyOwnerData KeysOwnerData_66;
		public ImGuiKeyOwnerData KeysOwnerData_67;
		public ImGuiKeyOwnerData KeysOwnerData_68;
		public ImGuiKeyOwnerData KeysOwnerData_69;
		public ImGuiKeyOwnerData KeysOwnerData_70;
		public ImGuiKeyOwnerData KeysOwnerData_71;
		public ImGuiKeyOwnerData KeysOwnerData_72;
		public ImGuiKeyOwnerData KeysOwnerData_73;
		public ImGuiKeyOwnerData KeysOwnerData_74;
		public ImGuiKeyOwnerData KeysOwnerData_75;
		public ImGuiKeyOwnerData KeysOwnerData_76;
		public ImGuiKeyOwnerData KeysOwnerData_77;
		public ImGuiKeyOwnerData KeysOwnerData_78;
		public ImGuiKeyOwnerData KeysOwnerData_79;
		public ImGuiKeyOwnerData KeysOwnerData_80;
		public ImGuiKeyOwnerData KeysOwnerData_81;
		public ImGuiKeyOwnerData KeysOwnerData_82;
		public ImGuiKeyOwnerData KeysOwnerData_83;
		public ImGuiKeyOwnerData KeysOwnerData_84;
		public ImGuiKeyOwnerData KeysOwnerData_85;
		public ImGuiKeyOwnerData KeysOwnerData_86;
		public ImGuiKeyOwnerData KeysOwnerData_87;
		public ImGuiKeyOwnerData KeysOwnerData_88;
		public ImGuiKeyOwnerData KeysOwnerData_89;
		public ImGuiKeyOwnerData KeysOwnerData_90;
		public ImGuiKeyOwnerData KeysOwnerData_91;
		public ImGuiKeyOwnerData KeysOwnerData_92;
		public ImGuiKeyOwnerData KeysOwnerData_93;
		public ImGuiKeyOwnerData KeysOwnerData_94;
		public ImGuiKeyOwnerData KeysOwnerData_95;
		public ImGuiKeyOwnerData KeysOwnerData_96;
		public ImGuiKeyOwnerData KeysOwnerData_97;
		public ImGuiKeyOwnerData KeysOwnerData_98;
		public ImGuiKeyOwnerData KeysOwnerData_99;
		public ImGuiKeyOwnerData KeysOwnerData_100;
		public ImGuiKeyOwnerData KeysOwnerData_101;
		public ImGuiKeyOwnerData KeysOwnerData_102;
		public ImGuiKeyOwnerData KeysOwnerData_103;
		public ImGuiKeyOwnerData KeysOwnerData_104;
		public ImGuiKeyOwnerData KeysOwnerData_105;
		public ImGuiKeyOwnerData KeysOwnerData_106;
		public ImGuiKeyOwnerData KeysOwnerData_107;
		public ImGuiKeyOwnerData KeysOwnerData_108;
		public ImGuiKeyOwnerData KeysOwnerData_109;
		public ImGuiKeyOwnerData KeysOwnerData_110;
		public ImGuiKeyOwnerData KeysOwnerData_111;
		public ImGuiKeyOwnerData KeysOwnerData_112;
		public ImGuiKeyOwnerData KeysOwnerData_113;
		public ImGuiKeyOwnerData KeysOwnerData_114;
		public ImGuiKeyOwnerData KeysOwnerData_115;
		public ImGuiKeyOwnerData KeysOwnerData_116;
		public ImGuiKeyOwnerData KeysOwnerData_117;
		public ImGuiKeyOwnerData KeysOwnerData_118;
		public ImGuiKeyOwnerData KeysOwnerData_119;
		public ImGuiKeyOwnerData KeysOwnerData_120;
		public ImGuiKeyOwnerData KeysOwnerData_121;
		public ImGuiKeyOwnerData KeysOwnerData_122;
		public ImGuiKeyOwnerData KeysOwnerData_123;
		public ImGuiKeyOwnerData KeysOwnerData_124;
		public ImGuiKeyOwnerData KeysOwnerData_125;
		public ImGuiKeyOwnerData KeysOwnerData_126;
		public ImGuiKeyOwnerData KeysOwnerData_127;
		public ImGuiKeyOwnerData KeysOwnerData_128;
		public ImGuiKeyOwnerData KeysOwnerData_129;
		public ImGuiKeyOwnerData KeysOwnerData_130;
		public ImGuiKeyOwnerData KeysOwnerData_131;
		public ImGuiKeyOwnerData KeysOwnerData_132;
		public ImGuiKeyOwnerData KeysOwnerData_133;
		public ImGuiKeyOwnerData KeysOwnerData_134;
		public ImGuiKeyOwnerData KeysOwnerData_135;
		public ImGuiKeyOwnerData KeysOwnerData_136;
		public ImGuiKeyOwnerData KeysOwnerData_137;
		public ImGuiKeyOwnerData KeysOwnerData_138;
		public ImGuiKeyOwnerData KeysOwnerData_139;
		public ImGuiKeyOwnerData KeysOwnerData_140;
		public ImGuiKeyOwnerData KeysOwnerData_141;
		public ImGuiKeyOwnerData KeysOwnerData_142;
		public ImGuiKeyOwnerData KeysOwnerData_143;
		public ImGuiKeyOwnerData KeysOwnerData_144;
		public ImGuiKeyOwnerData KeysOwnerData_145;
		public ImGuiKeyOwnerData KeysOwnerData_146;
		public ImGuiKeyOwnerData KeysOwnerData_147;
		public ImGuiKeyOwnerData KeysOwnerData_148;
		public ImGuiKeyOwnerData KeysOwnerData_149;
		public ImGuiKeyOwnerData KeysOwnerData_150;
		public ImGuiKeyOwnerData KeysOwnerData_151;
		public ImGuiKeyOwnerData KeysOwnerData_152;
		public ImGuiKeyOwnerData KeysOwnerData_153;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "KeysRoutingTable")]
		[NativeName(NativeNameType.Type, "ImGuiKeyRoutingTable")]
		public ImGuiKeyRoutingTable KeysRoutingTable;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdUsingNavDirMask")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint ActiveIdUsingNavDirMask;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ActiveIdUsingAllKeyboardKeys")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte ActiveIdUsingAllKeyboardKeys;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugBreakInShortcutRouting")]
		[NativeName(NativeNameType.Type, "ImGuiKeyChord")]
		public int DebugBreakInShortcutRouting;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentFocusScopeId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint CurrentFocusScopeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentItemFlags")]
		[NativeName(NativeNameType.Type, "ImGuiItemFlags")]
		public ImGuiItemFlags CurrentItemFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugLocateId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint DebugLocateId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NextItemData")]
		[NativeName(NativeNameType.Type, "ImGuiNextItemData")]
		public ImGuiNextItemData NextItemData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LastItemData")]
		[NativeName(NativeNameType.Type, "ImGuiLastItemData")]
		public ImGuiLastItemData LastItemData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NextWindowData")]
		[NativeName(NativeNameType.Type, "ImGuiNextWindowData")]
		public ImGuiNextWindowData NextWindowData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugShowGroupRects")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DebugShowGroupRects;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugFlashStyleColorIdx")]
		[NativeName(NativeNameType.Type, "ImGuiCol")]
		public ImGuiCol DebugFlashStyleColorIdx;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiColorMod")]
		public ImVectorImGuiColorMod ColorStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "StyleVarStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiStyleMod")]
		public ImVectorImGuiStyleMod StyleVarStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FontStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImFontPtr")]
		public ImVectorImFontPtr FontStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FocusScopeStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiFocusScopeData")]
		public ImVectorImGuiFocusScopeData FocusScopeStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemFlagsStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiItemFlags")]
		public ImVectorImGuiItemFlags ItemFlagsStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "GroupStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiGroupData")]
		public ImVectorImGuiGroupData GroupStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OpenPopupStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiPopupData")]
		public ImVectorImGuiPopupData OpenPopupStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BeginPopupStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiPopupData")]
		public ImVectorImGuiPopupData BeginPopupStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TreeNodeStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiTreeNodeStackData")]
		public ImVectorImGuiTreeNodeStackData TreeNodeStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Viewports")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiViewportPPtr")]
		public ImVectorImGuiViewportPPtr Viewports;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentViewport")]
		[NativeName(NativeNameType.Type, "ImGuiViewportP*")]
		public unsafe ImGuiViewportP* CurrentViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseViewport")]
		[NativeName(NativeNameType.Type, "ImGuiViewportP*")]
		public unsafe ImGuiViewportP* MouseViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseLastHoveredViewport")]
		[NativeName(NativeNameType.Type, "ImGuiViewportP*")]
		public unsafe ImGuiViewportP* MouseLastHoveredViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformLastFocusedViewportId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint PlatformLastFocusedViewportId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FallbackMonitor")]
		[NativeName(NativeNameType.Type, "ImGuiPlatformMonitor")]
		public ImGuiPlatformMonitor FallbackMonitor;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformMonitorsFullWorkRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect PlatformMonitorsFullWorkRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportCreatedCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int ViewportCreatedCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformWindowsCreatedCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int PlatformWindowsCreatedCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportFocusedStampCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int ViewportFocusedStampCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* NavWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint NavId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavFocusScopeId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint NavFocusScopeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavLayer")]
		[NativeName(NativeNameType.Type, "ImGuiNavLayer")]
		public ImGuiNavLayer NavLayer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavActivateId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint NavActivateId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavActivateDownId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint NavActivateDownId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavActivatePressedId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint NavActivatePressedId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavActivateFlags")]
		[NativeName(NativeNameType.Type, "ImGuiActivateFlags")]
		public ImGuiActivateFlags NavActivateFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavFocusRoute")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiFocusScopeData")]
		public ImVectorImGuiFocusScopeData NavFocusRoute;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavHighlightActivatedId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint NavHighlightActivatedId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavHighlightActivatedTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float NavHighlightActivatedTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavNextActivateId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint NavNextActivateId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavNextActivateFlags")]
		[NativeName(NativeNameType.Type, "ImGuiActivateFlags")]
		public ImGuiActivateFlags NavNextActivateFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavInputSource")]
		[NativeName(NativeNameType.Type, "ImGuiInputSource")]
		public ImGuiInputSource NavInputSource;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavLastValidSelectionUserData")]
		[NativeName(NativeNameType.Type, "ImGuiSelectionUserData")]
		public long NavLastValidSelectionUserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavIdIsAlive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavIdIsAlive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMousePosDirty")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavMousePosDirty;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavDisableHighlight")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavDisableHighlight;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavDisableMouseHover")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavDisableMouseHover;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavAnyRequest")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavAnyRequest;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavInitRequest")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavInitRequest;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavInitRequestFromMove")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavInitRequestFromMove;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavInitResult")]
		[NativeName(NativeNameType.Type, "ImGuiNavItemData")]
		public ImGuiNavItemData NavInitResult;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveSubmitted")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavMoveSubmitted;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveScoringItems")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavMoveScoringItems;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveForwardToNextFrame")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavMoveForwardToNextFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveFlags")]
		[NativeName(NativeNameType.Type, "ImGuiNavMoveFlags")]
		public ImGuiNavMoveFlags NavMoveFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveScrollFlags")]
		[NativeName(NativeNameType.Type, "ImGuiScrollFlags")]
		public ImGuiScrollFlags NavMoveScrollFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveKeyMods")]
		[NativeName(NativeNameType.Type, "ImGuiKeyChord")]
		public int NavMoveKeyMods;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveDir")]
		[NativeName(NativeNameType.Type, "ImGuiDir")]
		public ImGuiDir NavMoveDir;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveDirForDebug")]
		[NativeName(NativeNameType.Type, "ImGuiDir")]
		public ImGuiDir NavMoveDirForDebug;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveClipDir")]
		[NativeName(NativeNameType.Type, "ImGuiDir")]
		public ImGuiDir NavMoveClipDir;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavScoringRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect NavScoringRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavScoringNoClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect NavScoringNoClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavScoringDebugCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int NavScoringDebugCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavTabbingDir")]
		[NativeName(NativeNameType.Type, "int")]
		public int NavTabbingDir;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavTabbingCounter")]
		[NativeName(NativeNameType.Type, "int")]
		public int NavTabbingCounter;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveResultLocal")]
		[NativeName(NativeNameType.Type, "ImGuiNavItemData")]
		public ImGuiNavItemData NavMoveResultLocal;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveResultLocalVisible")]
		[NativeName(NativeNameType.Type, "ImGuiNavItemData")]
		public ImGuiNavItemData NavMoveResultLocalVisible;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavMoveResultOther")]
		[NativeName(NativeNameType.Type, "ImGuiNavItemData")]
		public ImGuiNavItemData NavMoveResultOther;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavTabbingResultFirst")]
		[NativeName(NativeNameType.Type, "ImGuiNavItemData")]
		public ImGuiNavItemData NavTabbingResultFirst;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavJustMovedFromFocusScopeId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint NavJustMovedFromFocusScopeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavJustMovedToId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint NavJustMovedToId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavJustMovedToFocusScopeId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint NavJustMovedToFocusScopeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavJustMovedToKeyMods")]
		[NativeName(NativeNameType.Type, "ImGuiKeyChord")]
		public int NavJustMovedToKeyMods;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavJustMovedToIsTabbing")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavJustMovedToIsTabbing;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavJustMovedToHasSelectionData")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavJustMovedToHasSelectionData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigNavWindowingKeyNext")]
		[NativeName(NativeNameType.Type, "ImGuiKeyChord")]
		public int ConfigNavWindowingKeyNext;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigNavWindowingKeyPrev")]
		[NativeName(NativeNameType.Type, "ImGuiKeyChord")]
		public int ConfigNavWindowingKeyPrev;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowingTarget")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* NavWindowingTarget;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowingTargetAnim")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* NavWindowingTargetAnim;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowingListWindow")]
		[NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public unsafe ImGuiWindow* NavWindowingListWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowingTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float NavWindowingTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowingHighlightAlpha")]
		[NativeName(NativeNameType.Type, "float")]
		public float NavWindowingHighlightAlpha;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowingToggleLayer")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte NavWindowingToggleLayer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowingToggleKey")]
		[NativeName(NativeNameType.Type, "ImGuiKey")]
		public ImGuiKey NavWindowingToggleKey;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowingAccumDeltaPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 NavWindowingAccumDeltaPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NavWindowingAccumDeltaSize")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 NavWindowingAccumDeltaSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DimBgRatio")]
		[NativeName(NativeNameType.Type, "float")]
		public float DimBgRatio;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropActive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DragDropActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropWithinSource")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DragDropWithinSource;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropWithinTarget")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DragDropWithinTarget;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropSourceFlags")]
		[NativeName(NativeNameType.Type, "ImGuiDragDropFlags")]
		public ImGuiDragDropFlags DragDropSourceFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropSourceFrameCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int DragDropSourceFrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropMouseButton")]
		[NativeName(NativeNameType.Type, "int")]
		public int DragDropMouseButton;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropPayload")]
		[NativeName(NativeNameType.Type, "ImGuiPayload")]
		public ImGuiPayload DragDropPayload;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropTargetRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect DragDropTargetRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropTargetClipRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect DragDropTargetClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropTargetId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint DragDropTargetId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropAcceptFlags")]
		[NativeName(NativeNameType.Type, "ImGuiDragDropFlags")]
		public ImGuiDragDropFlags DragDropAcceptFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropAcceptIdCurrRectSurface")]
		[NativeName(NativeNameType.Type, "float")]
		public float DragDropAcceptIdCurrRectSurface;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropAcceptIdCurr")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint DragDropAcceptIdCurr;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropAcceptIdPrev")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint DragDropAcceptIdPrev;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropAcceptFrameCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int DragDropAcceptFrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropHoldJustPressedId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint DragDropHoldJustPressedId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropPayloadBufHeap")]
		[NativeName(NativeNameType.Type, "ImVector_unsigned_char")]
		public ImVectorUnsignedChar DragDropPayloadBufHeap;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragDropPayloadBufLocal")]
		[NativeName(NativeNameType.Type, "unsigned char[16]")]
		public byte DragDropPayloadBufLocal_0;
		public byte DragDropPayloadBufLocal_1;
		public byte DragDropPayloadBufLocal_2;
		public byte DragDropPayloadBufLocal_3;
		public byte DragDropPayloadBufLocal_4;
		public byte DragDropPayloadBufLocal_5;
		public byte DragDropPayloadBufLocal_6;
		public byte DragDropPayloadBufLocal_7;
		public byte DragDropPayloadBufLocal_8;
		public byte DragDropPayloadBufLocal_9;
		public byte DragDropPayloadBufLocal_10;
		public byte DragDropPayloadBufLocal_11;
		public byte DragDropPayloadBufLocal_12;
		public byte DragDropPayloadBufLocal_13;
		public byte DragDropPayloadBufLocal_14;
		public byte DragDropPayloadBufLocal_15;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ClipperTempDataStacked")]
		[NativeName(NativeNameType.Type, "int")]
		public int ClipperTempDataStacked;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ClipperTempData")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiListClipperData")]
		public ImVectorImGuiListClipperData ClipperTempData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentTable")]
		[NativeName(NativeNameType.Type, "ImGuiTable*")]
		public unsafe ImGuiTable* CurrentTable;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugBreakInTable")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint DebugBreakInTable;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TablesTempDataStacked")]
		[NativeName(NativeNameType.Type, "int")]
		public int TablesTempDataStacked;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TablesTempData")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiTableTempData")]
		public ImVectorImGuiTableTempData TablesTempData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Tables")]
		[NativeName(NativeNameType.Type, "ImPool_ImGuiTable")]
		public ImPoolImGuiTable Tables;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TablesLastTimeActive")]
		[NativeName(NativeNameType.Type, "ImVector_float")]
		public ImVectorFloat TablesLastTimeActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawChannelsTempMergeBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawChannel")]
		public ImVectorImDrawChannel DrawChannelsTempMergeBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentTabBar")]
		[NativeName(NativeNameType.Type, "ImGuiTabBar*")]
		public unsafe ImGuiTabBar* CurrentTabBar;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TabBars")]
		[NativeName(NativeNameType.Type, "ImPool_ImGuiTabBar")]
		public ImPoolImGuiTabBar TabBars;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentTabBarStack")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiPtrOrIndex")]
		public ImVectorImGuiPtrOrIndex CurrentTabBarStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ShrinkWidthBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiShrinkWidthItem")]
		public ImVectorImGuiShrinkWidthItem ShrinkWidthBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BoxSelectState")]
		[NativeName(NativeNameType.Type, "ImGuiBoxSelectState")]
		public ImGuiBoxSelectState BoxSelectState;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CurrentMultiSelect")]
		[NativeName(NativeNameType.Type, "ImGuiMultiSelectTempData*")]
		public unsafe ImGuiMultiSelectTempData* CurrentMultiSelect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MultiSelectTempDataStacked")]
		[NativeName(NativeNameType.Type, "int")]
		public int MultiSelectTempDataStacked;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MultiSelectTempData")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiMultiSelectTempData")]
		public ImVectorImGuiMultiSelectTempData MultiSelectTempData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MultiSelectStorage")]
		[NativeName(NativeNameType.Type, "ImPool_ImGuiMultiSelectState")]
		public ImPoolImGuiMultiSelectState MultiSelectStorage;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverItemDelayId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint HoverItemDelayId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverItemDelayIdPreviousFrame")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint HoverItemDelayIdPreviousFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverItemDelayTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float HoverItemDelayTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverItemDelayClearTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float HoverItemDelayClearTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverItemUnlockedStationaryId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint HoverItemUnlockedStationaryId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HoverWindowUnlockedStationaryId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint HoverWindowUnlockedStationaryId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseCursor")]
		[NativeName(NativeNameType.Type, "ImGuiMouseCursor")]
		public ImGuiMouseCursor MouseCursor;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseStationaryTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float MouseStationaryTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MouseLastValidPos")]
		[NativeName(NativeNameType.Type, "ImVec2")]
		public Vector2 MouseLastValidPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InputTextState")]
		[NativeName(NativeNameType.Type, "ImGuiInputTextState")]
		public ImGuiInputTextState InputTextState;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InputTextDeactivatedState")]
		[NativeName(NativeNameType.Type, "ImGuiInputTextDeactivatedState")]
		public ImGuiInputTextDeactivatedState InputTextDeactivatedState;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InputTextPasswordFont")]
		[NativeName(NativeNameType.Type, "ImFont")]
		public ImFont InputTextPasswordFont;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TempInputId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint TempInputId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DataTypeZeroValue")]
		[NativeName(NativeNameType.Type, "ImGuiDataTypeStorage")]
		public ImGuiDataTypeStorage DataTypeZeroValue;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BeginMenuDepth")]
		[NativeName(NativeNameType.Type, "int")]
		public int BeginMenuDepth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BeginComboDepth")]
		[NativeName(NativeNameType.Type, "int")]
		public int BeginComboDepth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorEditOptions")]
		[NativeName(NativeNameType.Type, "ImGuiColorEditFlags")]
		public ImGuiColorEditFlags ColorEditOptions;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorEditCurrentID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint ColorEditCurrentID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorEditSavedID")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint ColorEditSavedID;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorEditSavedHue")]
		[NativeName(NativeNameType.Type, "float")]
		public float ColorEditSavedHue;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorEditSavedSat")]
		[NativeName(NativeNameType.Type, "float")]
		public float ColorEditSavedSat;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorEditSavedColor")]
		[NativeName(NativeNameType.Type, "ImU32")]
		public uint ColorEditSavedColor;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ColorPickerRef")]
		[NativeName(NativeNameType.Type, "ImVec4")]
		public Vector4 ColorPickerRef;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ComboPreviewData")]
		[NativeName(NativeNameType.Type, "ImGuiComboPreviewData")]
		public ImGuiComboPreviewData ComboPreviewData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowResizeBorderExpectedRect")]
		[NativeName(NativeNameType.Type, "ImRect")]
		public ImRect WindowResizeBorderExpectedRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WindowResizeRelativeMode")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte WindowResizeRelativeMode;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollbarSeekMode")]
		[NativeName(NativeNameType.Type, "short")]
		public short ScrollbarSeekMode;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ScrollbarClickDeltaToGrabCenter")]
		[NativeName(NativeNameType.Type, "float")]
		public float ScrollbarClickDeltaToGrabCenter;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SliderGrabClickOffset")]
		[NativeName(NativeNameType.Type, "float")]
		public float SliderGrabClickOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SliderCurrentAccum")]
		[NativeName(NativeNameType.Type, "float")]
		public float SliderCurrentAccum;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SliderCurrentAccumDirty")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte SliderCurrentAccumDirty;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragCurrentAccumDirty")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DragCurrentAccumDirty;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragCurrentAccum")]
		[NativeName(NativeNameType.Type, "float")]
		public float DragCurrentAccum;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DragSpeedDefaultRatio")]
		[NativeName(NativeNameType.Type, "float")]
		public float DragSpeedDefaultRatio;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisabledAlphaBackup")]
		[NativeName(NativeNameType.Type, "float")]
		public float DisabledAlphaBackup;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisabledStackSize")]
		[NativeName(NativeNameType.Type, "short")]
		public short DisabledStackSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LockMarkEdited")]
		[NativeName(NativeNameType.Type, "short")]
		public short LockMarkEdited;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TooltipOverrideCount")]
		[NativeName(NativeNameType.Type, "short")]
		public short TooltipOverrideCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ClipboardHandlerData")]
		[NativeName(NativeNameType.Type, "ImVector_char")]
		public ImVectorChar ClipboardHandlerData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MenusIdSubmittedThisFrame")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiID")]
		public ImVectorImGuiID MenusIdSubmittedThisFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TypingSelectState")]
		[NativeName(NativeNameType.Type, "ImGuiTypingSelectState")]
		public ImGuiTypingSelectState TypingSelectState;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformImeData")]
		[NativeName(NativeNameType.Type, "ImGuiPlatformImeData")]
		public ImGuiPlatformImeData PlatformImeData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformImeDataPrev")]
		[NativeName(NativeNameType.Type, "ImGuiPlatformImeData")]
		public ImGuiPlatformImeData PlatformImeDataPrev;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PlatformImeViewport")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint PlatformImeViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockContext")]
		[NativeName(NativeNameType.Type, "ImGuiDockContext")]
		public ImGuiDockContext DockContext;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockNodeWindowMenuHandler")]
		[NativeName(NativeNameType.Type, "void (*)(ImGuiContext* ctx, ImGuiDockNode* node, ImGuiTabBar* tab_bar)*")]
		public unsafe void* DockNodeWindowMenuHandler;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsLoaded")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte SettingsLoaded;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsDirtyTimer")]
		[NativeName(NativeNameType.Type, "float")]
		public float SettingsDirtyTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsIniData")]
		[NativeName(NativeNameType.Type, "ImGuiTextBuffer")]
		public ImGuiTextBuffer SettingsIniData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsHandlers")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiSettingsHandler")]
		public ImVectorImGuiSettingsHandler SettingsHandlers;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsWindows")]
		[NativeName(NativeNameType.Type, "ImChunkStream_ImGuiWindowSettings")]
		public ImChunkStreamImGuiWindowSettings SettingsWindows;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SettingsTables")]
		[NativeName(NativeNameType.Type, "ImChunkStream_ImGuiTableSettings")]
		public ImChunkStreamImGuiTableSettings SettingsTables;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Hooks")]
		[NativeName(NativeNameType.Type, "ImVector_ImGuiContextHook")]
		public ImVectorImGuiContextHook Hooks;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HookIdNext")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint HookIdNext;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LocalizationTable")]
		[NativeName(NativeNameType.Type, "const char*[12]")]
		public unsafe byte* LocalizationTable_0;
		public unsafe byte* LocalizationTable_1;
		public unsafe byte* LocalizationTable_2;
		public unsafe byte* LocalizationTable_3;
		public unsafe byte* LocalizationTable_4;
		public unsafe byte* LocalizationTable_5;
		public unsafe byte* LocalizationTable_6;
		public unsafe byte* LocalizationTable_7;
		public unsafe byte* LocalizationTable_8;
		public unsafe byte* LocalizationTable_9;
		public unsafe byte* LocalizationTable_10;
		public unsafe byte* LocalizationTable_11;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogEnabled")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte LogEnabled;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogType")]
		[NativeName(NativeNameType.Type, "ImGuiLogType")]
		public ImGuiLogType LogType;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogFile")]
		[NativeName(NativeNameType.Type, "ImFileHandle")]
		public ImFileHandle LogFile;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogBuffer")]
		[NativeName(NativeNameType.Type, "ImGuiTextBuffer")]
		public ImGuiTextBuffer LogBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogNextPrefix")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* LogNextPrefix;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogNextSuffix")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* LogNextSuffix;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogLinePosY")]
		[NativeName(NativeNameType.Type, "float")]
		public float LogLinePosY;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogLineFirstItem")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte LogLineFirstItem;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogDepthRef")]
		[NativeName(NativeNameType.Type, "int")]
		public int LogDepthRef;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogDepthToExpand")]
		[NativeName(NativeNameType.Type, "int")]
		public int LogDepthToExpand;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LogDepthToExpandDefault")]
		[NativeName(NativeNameType.Type, "int")]
		public int LogDepthToExpandDefault;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugLogFlags")]
		[NativeName(NativeNameType.Type, "ImGuiDebugLogFlags")]
		public ImGuiDebugLogFlags DebugLogFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugLogBuf")]
		[NativeName(NativeNameType.Type, "ImGuiTextBuffer")]
		public ImGuiTextBuffer DebugLogBuf;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugLogIndex")]
		[NativeName(NativeNameType.Type, "ImGuiTextIndex")]
		public ImGuiTextIndex DebugLogIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugLogAutoDisableFlags")]
		[NativeName(NativeNameType.Type, "ImGuiDebugLogFlags")]
		public ImGuiDebugLogFlags DebugLogAutoDisableFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugLogAutoDisableFrames")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte DebugLogAutoDisableFrames;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugLocateFrames")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte DebugLocateFrames;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugBreakInLocateId")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DebugBreakInLocateId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugBreakKeyChord")]
		[NativeName(NativeNameType.Type, "ImGuiKeyChord")]
		public int DebugBreakKeyChord;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugBeginReturnValueCullDepth")]
		[NativeName(NativeNameType.Type, "ImS8")]
		public byte DebugBeginReturnValueCullDepth;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugItemPickerActive")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DebugItemPickerActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugItemPickerMouseButton")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte DebugItemPickerMouseButton;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugItemPickerBreakId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint DebugItemPickerBreakId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugFlashStyleColorTime")]
		[NativeName(NativeNameType.Type, "float")]
		public float DebugFlashStyleColorTime;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugFlashStyleColorBackup")]
		[NativeName(NativeNameType.Type, "ImVec4")]
		public Vector4 DebugFlashStyleColorBackup;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugMetricsConfig")]
		[NativeName(NativeNameType.Type, "ImGuiMetricsConfig")]
		public ImGuiMetricsConfig DebugMetricsConfig;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugIDStackTool")]
		[NativeName(NativeNameType.Type, "ImGuiIDStackTool")]
		public ImGuiIDStackTool DebugIDStackTool;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugAllocInfo")]
		[NativeName(NativeNameType.Type, "ImGuiDebugAllocInfo")]
		public ImGuiDebugAllocInfo DebugAllocInfo;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DebugHoveredDockNode")]
		[NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public unsafe ImGuiDockNode* DebugHoveredDockNode;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FramerateSecPerFrame")]
		[NativeName(NativeNameType.Type, "float[60]")]
		public float FramerateSecPerFrame_0;
		public float FramerateSecPerFrame_1;
		public float FramerateSecPerFrame_2;
		public float FramerateSecPerFrame_3;
		public float FramerateSecPerFrame_4;
		public float FramerateSecPerFrame_5;
		public float FramerateSecPerFrame_6;
		public float FramerateSecPerFrame_7;
		public float FramerateSecPerFrame_8;
		public float FramerateSecPerFrame_9;
		public float FramerateSecPerFrame_10;
		public float FramerateSecPerFrame_11;
		public float FramerateSecPerFrame_12;
		public float FramerateSecPerFrame_13;
		public float FramerateSecPerFrame_14;
		public float FramerateSecPerFrame_15;
		public float FramerateSecPerFrame_16;
		public float FramerateSecPerFrame_17;
		public float FramerateSecPerFrame_18;
		public float FramerateSecPerFrame_19;
		public float FramerateSecPerFrame_20;
		public float FramerateSecPerFrame_21;
		public float FramerateSecPerFrame_22;
		public float FramerateSecPerFrame_23;
		public float FramerateSecPerFrame_24;
		public float FramerateSecPerFrame_25;
		public float FramerateSecPerFrame_26;
		public float FramerateSecPerFrame_27;
		public float FramerateSecPerFrame_28;
		public float FramerateSecPerFrame_29;
		public float FramerateSecPerFrame_30;
		public float FramerateSecPerFrame_31;
		public float FramerateSecPerFrame_32;
		public float FramerateSecPerFrame_33;
		public float FramerateSecPerFrame_34;
		public float FramerateSecPerFrame_35;
		public float FramerateSecPerFrame_36;
		public float FramerateSecPerFrame_37;
		public float FramerateSecPerFrame_38;
		public float FramerateSecPerFrame_39;
		public float FramerateSecPerFrame_40;
		public float FramerateSecPerFrame_41;
		public float FramerateSecPerFrame_42;
		public float FramerateSecPerFrame_43;
		public float FramerateSecPerFrame_44;
		public float FramerateSecPerFrame_45;
		public float FramerateSecPerFrame_46;
		public float FramerateSecPerFrame_47;
		public float FramerateSecPerFrame_48;
		public float FramerateSecPerFrame_49;
		public float FramerateSecPerFrame_50;
		public float FramerateSecPerFrame_51;
		public float FramerateSecPerFrame_52;
		public float FramerateSecPerFrame_53;
		public float FramerateSecPerFrame_54;
		public float FramerateSecPerFrame_55;
		public float FramerateSecPerFrame_56;
		public float FramerateSecPerFrame_57;
		public float FramerateSecPerFrame_58;
		public float FramerateSecPerFrame_59;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FramerateSecPerFrameIdx")]
		[NativeName(NativeNameType.Type, "int")]
		public int FramerateSecPerFrameIdx;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FramerateSecPerFrameCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int FramerateSecPerFrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FramerateSecPerFrameAccum")]
		[NativeName(NativeNameType.Type, "float")]
		public float FramerateSecPerFrameAccum;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantCaptureMouseNextFrame")]
		[NativeName(NativeNameType.Type, "int")]
		public int WantCaptureMouseNextFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantCaptureKeyboardNextFrame")]
		[NativeName(NativeNameType.Type, "int")]
		public int WantCaptureKeyboardNextFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "WantTextInputNextFrame")]
		[NativeName(NativeNameType.Type, "int")]
		public int WantTextInputNextFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TempBuffer")]
		[NativeName(NativeNameType.Type, "ImVector_char")]
		public ImVectorChar TempBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TempKeychordName")]
		[NativeName(NativeNameType.Type, "char[64]")]
		public byte TempKeychordName_0;
		public byte TempKeychordName_1;
		public byte TempKeychordName_2;
		public byte TempKeychordName_3;
		public byte TempKeychordName_4;
		public byte TempKeychordName_5;
		public byte TempKeychordName_6;
		public byte TempKeychordName_7;
		public byte TempKeychordName_8;
		public byte TempKeychordName_9;
		public byte TempKeychordName_10;
		public byte TempKeychordName_11;
		public byte TempKeychordName_12;
		public byte TempKeychordName_13;
		public byte TempKeychordName_14;
		public byte TempKeychordName_15;
		public byte TempKeychordName_16;
		public byte TempKeychordName_17;
		public byte TempKeychordName_18;
		public byte TempKeychordName_19;
		public byte TempKeychordName_20;
		public byte TempKeychordName_21;
		public byte TempKeychordName_22;
		public byte TempKeychordName_23;
		public byte TempKeychordName_24;
		public byte TempKeychordName_25;
		public byte TempKeychordName_26;
		public byte TempKeychordName_27;
		public byte TempKeychordName_28;
		public byte TempKeychordName_29;
		public byte TempKeychordName_30;
		public byte TempKeychordName_31;
		public byte TempKeychordName_32;
		public byte TempKeychordName_33;
		public byte TempKeychordName_34;
		public byte TempKeychordName_35;
		public byte TempKeychordName_36;
		public byte TempKeychordName_37;
		public byte TempKeychordName_38;
		public byte TempKeychordName_39;
		public byte TempKeychordName_40;
		public byte TempKeychordName_41;
		public byte TempKeychordName_42;
		public byte TempKeychordName_43;
		public byte TempKeychordName_44;
		public byte TempKeychordName_45;
		public byte TempKeychordName_46;
		public byte TempKeychordName_47;
		public byte TempKeychordName_48;
		public byte TempKeychordName_49;
		public byte TempKeychordName_50;
		public byte TempKeychordName_51;
		public byte TempKeychordName_52;
		public byte TempKeychordName_53;
		public byte TempKeychordName_54;
		public byte TempKeychordName_55;
		public byte TempKeychordName_56;
		public byte TempKeychordName_57;
		public byte TempKeychordName_58;
		public byte TempKeychordName_59;
		public byte TempKeychordName_60;
		public byte TempKeychordName_61;
		public byte TempKeychordName_62;
		public byte TempKeychordName_63;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiContext(bool initialized = default, bool fontAtlasOwnedByContext = default, ImGuiIO io = default, ImGuiPlatformIO platformIo = default, ImGuiStyle style = default, ImGuiConfigFlags configFlagsCurrFrame = default, ImGuiConfigFlags configFlagsLastFrame = default, ImFont* font = default, float fontSize = default, float fontBaseSize = default, float fontScale = default, float currentDpiScale = default, ImDrawListSharedData drawListSharedData = default, double time = default, int frameCount = default, int frameCountEnded = default, int frameCountPlatformEnded = default, int frameCountRendered = default, bool withinFrameScope = default, bool withinFrameScopeWithImplicitWindow = default, bool withinEndChild = default, bool gcCompactAll = default, bool testEngineHookItems = default, void* testEngine = default, byte* contextName = default, ImVectorImGuiInputEvent inputEventsQueue = default, ImVectorImGuiInputEvent inputEventsTrail = default, ImGuiMouseSource inputEventsNextMouseSource = default, uint inputEventsNextEventId = default, ImVectorImGuiWindowPtr windows = default, ImVectorImGuiWindowPtr windowsFocusOrder = default, ImVectorImGuiWindowPtr windowsTempSortBuffer = default, ImVectorImGuiWindowStackData currentWindowStack = default, ImGuiStorage windowsById = default, int windowsActiveCount = default, Vector2 windowsHoverPadding = default, uint debugBreakInWindow = default, ImGuiWindow* currentWindow = default, ImGuiWindow* hoveredWindow = default, ImGuiWindow* hoveredWindowUnderMovingWindow = default, ImGuiWindow* hoveredWindowBeforeClear = default, ImGuiWindow* movingWindow = default, ImGuiWindow* wheelingWindow = default, Vector2 wheelingWindowRefMousePos = default, int wheelingWindowStartFrame = default, int wheelingWindowScrolledFrame = default, float wheelingWindowReleaseTimer = default, Vector2 wheelingWindowWheelRemainder = default, Vector2 wheelingAxisAvg = default, uint debugHookIdInfo = default, uint hoveredId = default, uint hoveredIdPreviousFrame = default, float hoveredIdTimer = default, float hoveredIdNotActiveTimer = default, bool hoveredIdAllowOverlap = default, bool hoveredIdIsDisabled = default, bool itemUnclipByLog = default, uint activeId = default, uint activeIdIsAlive = default, float activeIdTimer = default, bool activeIdIsJustActivated = default, bool activeIdAllowOverlap = default, bool activeIdNoClearOnFocusLoss = default, bool activeIdHasBeenPressedBefore = default, bool activeIdHasBeenEditedBefore = default, bool activeIdHasBeenEditedThisFrame = default, bool activeIdFromShortcut = default, int activeIdMouseButton = default, Vector2 activeIdClickOffset = default, ImGuiWindow* activeIdWindow = default, ImGuiInputSource activeIdSource = default, uint activeIdPreviousFrame = default, bool activeIdPreviousFrameIsAlive = default, bool activeIdPreviousFrameHasBeenEditedBefore = default, ImGuiWindow* activeIdPreviousFrameWindow = default, uint lastActiveId = default, float lastActiveIdTimer = default, double lastKeyModsChangeTime = default, double lastKeyModsChangeFromNoneTime = default, double lastKeyboardKeyPressTime = default, nuint keysMayBeCharInput = default, ImGuiKeyOwnerData* keysOwnerData = default, ImGuiKeyRoutingTable keysRoutingTable = default, uint activeIdUsingNavDirMask = default, bool activeIdUsingAllKeyboardKeys = default, int debugBreakInShortcutRouting = default, uint currentFocusScopeId = default, ImGuiItemFlags currentItemFlags = default, uint debugLocateId = default, ImGuiNextItemData nextItemData = default, ImGuiLastItemData lastItemData = default, ImGuiNextWindowData nextWindowData = default, bool debugShowGroupRects = default, ImGuiCol debugFlashStyleColorIdx = default, ImVectorImGuiColorMod colorStack = default, ImVectorImGuiStyleMod styleVarStack = default, ImVectorImFontPtr fontStack = default, ImVectorImGuiFocusScopeData focusScopeStack = default, ImVectorImGuiItemFlags itemFlagsStack = default, ImVectorImGuiGroupData groupStack = default, ImVectorImGuiPopupData openPopupStack = default, ImVectorImGuiPopupData beginPopupStack = default, ImVectorImGuiTreeNodeStackData treeNodeStack = default, ImVectorImGuiViewportPPtr viewports = default, ImGuiViewportP* currentViewport = default, ImGuiViewportP* mouseViewport = default, ImGuiViewportP* mouseLastHoveredViewport = default, uint platformLastFocusedViewportId = default, ImGuiPlatformMonitor fallbackMonitor = default, ImRect platformMonitorsFullWorkRect = default, int viewportCreatedCount = default, int platformWindowsCreatedCount = default, int viewportFocusedStampCount = default, ImGuiWindow* navWindow = default, uint navId = default, uint navFocusScopeId = default, ImGuiNavLayer navLayer = default, uint navActivateId = default, uint navActivateDownId = default, uint navActivatePressedId = default, ImGuiActivateFlags navActivateFlags = default, ImVectorImGuiFocusScopeData navFocusRoute = default, uint navHighlightActivatedId = default, float navHighlightActivatedTimer = default, uint navNextActivateId = default, ImGuiActivateFlags navNextActivateFlags = default, ImGuiInputSource navInputSource = default, long navLastValidSelectionUserData = default, bool navIdIsAlive = default, bool navMousePosDirty = default, bool navDisableHighlight = default, bool navDisableMouseHover = default, bool navAnyRequest = default, bool navInitRequest = default, bool navInitRequestFromMove = default, ImGuiNavItemData navInitResult = default, bool navMoveSubmitted = default, bool navMoveScoringItems = default, bool navMoveForwardToNextFrame = default, ImGuiNavMoveFlags navMoveFlags = default, ImGuiScrollFlags navMoveScrollFlags = default, int navMoveKeyMods = default, ImGuiDir navMoveDir = default, ImGuiDir navMoveDirForDebug = default, ImGuiDir navMoveClipDir = default, ImRect navScoringRect = default, ImRect navScoringNoClipRect = default, int navScoringDebugCount = default, int navTabbingDir = default, int navTabbingCounter = default, ImGuiNavItemData navMoveResultLocal = default, ImGuiNavItemData navMoveResultLocalVisible = default, ImGuiNavItemData navMoveResultOther = default, ImGuiNavItemData navTabbingResultFirst = default, uint navJustMovedFromFocusScopeId = default, uint navJustMovedToId = default, uint navJustMovedToFocusScopeId = default, int navJustMovedToKeyMods = default, bool navJustMovedToIsTabbing = default, bool navJustMovedToHasSelectionData = default, int configNavWindowingKeyNext = default, int configNavWindowingKeyPrev = default, ImGuiWindow* navWindowingTarget = default, ImGuiWindow* navWindowingTargetAnim = default, ImGuiWindow* navWindowingListWindow = default, float navWindowingTimer = default, float navWindowingHighlightAlpha = default, bool navWindowingToggleLayer = default, ImGuiKey navWindowingToggleKey = default, Vector2 navWindowingAccumDeltaPos = default, Vector2 navWindowingAccumDeltaSize = default, float dimBgRatio = default, bool dragDropActive = default, bool dragDropWithinSource = default, bool dragDropWithinTarget = default, ImGuiDragDropFlags dragDropSourceFlags = default, int dragDropSourceFrameCount = default, int dragDropMouseButton = default, ImGuiPayload dragDropPayload = default, ImRect dragDropTargetRect = default, ImRect dragDropTargetClipRect = default, uint dragDropTargetId = default, ImGuiDragDropFlags dragDropAcceptFlags = default, float dragDropAcceptIdCurrRectSurface = default, uint dragDropAcceptIdCurr = default, uint dragDropAcceptIdPrev = default, int dragDropAcceptFrameCount = default, uint dragDropHoldJustPressedId = default, ImVectorUnsignedChar dragDropPayloadBufHeap = default, byte* dragDropPayloadBufLocal = default, int clipperTempDataStacked = default, ImVectorImGuiListClipperData clipperTempData = default, ImGuiTable* currentTable = default, uint debugBreakInTable = default, int tablesTempDataStacked = default, ImVectorImGuiTableTempData tablesTempData = default, ImPoolImGuiTable tables = default, ImVectorFloat tablesLastTimeActive = default, ImVectorImDrawChannel drawChannelsTempMergeBuffer = default, ImGuiTabBar* currentTabBar = default, ImPoolImGuiTabBar tabBars = default, ImVectorImGuiPtrOrIndex currentTabBarStack = default, ImVectorImGuiShrinkWidthItem shrinkWidthBuffer = default, ImGuiBoxSelectState boxSelectState = default, ImGuiMultiSelectTempData* currentMultiSelect = default, int multiSelectTempDataStacked = default, ImVectorImGuiMultiSelectTempData multiSelectTempData = default, ImPoolImGuiMultiSelectState multiSelectStorage = default, uint hoverItemDelayId = default, uint hoverItemDelayIdPreviousFrame = default, float hoverItemDelayTimer = default, float hoverItemDelayClearTimer = default, uint hoverItemUnlockedStationaryId = default, uint hoverWindowUnlockedStationaryId = default, ImGuiMouseCursor mouseCursor = default, float mouseStationaryTimer = default, Vector2 mouseLastValidPos = default, ImGuiInputTextState inputTextState = default, ImGuiInputTextDeactivatedState inputTextDeactivatedState = default, ImFont inputTextPasswordFont = default, uint tempInputId = default, ImGuiDataTypeStorage dataTypeZeroValue = default, int beginMenuDepth = default, int beginComboDepth = default, ImGuiColorEditFlags colorEditOptions = default, uint colorEditCurrentId = default, uint colorEditSavedId = default, float colorEditSavedHue = default, float colorEditSavedSat = default, uint colorEditSavedColor = default, Vector4 colorPickerRef = default, ImGuiComboPreviewData comboPreviewData = default, ImRect windowResizeBorderExpectedRect = default, bool windowResizeRelativeMode = default, short scrollbarSeekMode = default, float scrollbarClickDeltaToGrabCenter = default, float sliderGrabClickOffset = default, float sliderCurrentAccum = default, bool sliderCurrentAccumDirty = default, bool dragCurrentAccumDirty = default, float dragCurrentAccum = default, float dragSpeedDefaultRatio = default, float disabledAlphaBackup = default, short disabledStackSize = default, short lockMarkEdited = default, short tooltipOverrideCount = default, ImVectorChar clipboardHandlerData = default, ImVectorImGuiID menusIdSubmittedThisFrame = default, ImGuiTypingSelectState typingSelectState = default, ImGuiPlatformImeData platformImeData = default, ImGuiPlatformImeData platformImeDataPrev = default, uint platformImeViewport = default, ImGuiDockContext dockContext = default, delegate*<ImGuiContext*, ImGuiDockNode*, ImGuiTabBar*, void> dockNodeWindowMenuHandler = default, bool settingsLoaded = default, float settingsDirtyTimer = default, ImGuiTextBuffer settingsIniData = default, ImVectorImGuiSettingsHandler settingsHandlers = default, ImChunkStreamImGuiWindowSettings settingsWindows = default, ImChunkStreamImGuiTableSettings settingsTables = default, ImVectorImGuiContextHook hooks = default, uint hookIdNext = default, byte** localizationTable = default, bool logEnabled = default, ImGuiLogType logType = default, ImFileHandle logFile = default, ImGuiTextBuffer logBuffer = default, byte* logNextPrefix = default, byte* logNextSuffix = default, float logLinePosY = default, bool logLineFirstItem = default, int logDepthRef = default, int logDepthToExpand = default, int logDepthToExpandDefault = default, ImGuiDebugLogFlags debugLogFlags = default, ImGuiTextBuffer debugLogBuf = default, ImGuiTextIndex debugLogIndex = default, ImGuiDebugLogFlags debugLogAutoDisableFlags = default, byte debugLogAutoDisableFrames = default, byte debugLocateFrames = default, bool debugBreakInLocateId = default, int debugBreakKeyChord = default, byte debugBeginReturnValueCullDepth = default, bool debugItemPickerActive = default, byte debugItemPickerMouseButton = default, uint debugItemPickerBreakId = default, float debugFlashStyleColorTime = default, Vector4 debugFlashStyleColorBackup = default, ImGuiMetricsConfig debugMetricsConfig = default, ImGuiIDStackTool debugIdStackTool = default, ImGuiDebugAllocInfo debugAllocInfo = default, ImGuiDockNode* debugHoveredDockNode = default, float* framerateSecPerFrame = default, int framerateSecPerFrameIdx = default, int framerateSecPerFrameCount = default, float framerateSecPerFrameAccum = default, int wantCaptureMouseNextFrame = default, int wantCaptureKeyboardNextFrame = default, int wantTextInputNextFrame = default, ImVectorChar tempBuffer = default, byte* tempKeychordName = default)
		{
			Initialized = initialized ? (byte)1 : (byte)0;
			FontAtlasOwnedByContext = fontAtlasOwnedByContext ? (byte)1 : (byte)0;
			IO = io;
			PlatformIO = platformIo;
			Style = style;
			ConfigFlagsCurrFrame = configFlagsCurrFrame;
			ConfigFlagsLastFrame = configFlagsLastFrame;
			Font = font;
			FontSize = fontSize;
			FontBaseSize = fontBaseSize;
			FontScale = fontScale;
			CurrentDpiScale = currentDpiScale;
			DrawListSharedData = drawListSharedData;
			Time = time;
			FrameCount = frameCount;
			FrameCountEnded = frameCountEnded;
			FrameCountPlatformEnded = frameCountPlatformEnded;
			FrameCountRendered = frameCountRendered;
			WithinFrameScope = withinFrameScope ? (byte)1 : (byte)0;
			WithinFrameScopeWithImplicitWindow = withinFrameScopeWithImplicitWindow ? (byte)1 : (byte)0;
			WithinEndChild = withinEndChild ? (byte)1 : (byte)0;
			GcCompactAll = gcCompactAll ? (byte)1 : (byte)0;
			TestEngineHookItems = testEngineHookItems ? (byte)1 : (byte)0;
			TestEngine = testEngine;
			if (contextName != default(byte*))
			{
				ContextName_0 = contextName[0];
				ContextName_1 = contextName[1];
				ContextName_2 = contextName[2];
				ContextName_3 = contextName[3];
				ContextName_4 = contextName[4];
				ContextName_5 = contextName[5];
				ContextName_6 = contextName[6];
				ContextName_7 = contextName[7];
				ContextName_8 = contextName[8];
				ContextName_9 = contextName[9];
				ContextName_10 = contextName[10];
				ContextName_11 = contextName[11];
				ContextName_12 = contextName[12];
				ContextName_13 = contextName[13];
				ContextName_14 = contextName[14];
				ContextName_15 = contextName[15];
			}
			InputEventsQueue = inputEventsQueue;
			InputEventsTrail = inputEventsTrail;
			InputEventsNextMouseSource = inputEventsNextMouseSource;
			InputEventsNextEventId = inputEventsNextEventId;
			Windows = windows;
			WindowsFocusOrder = windowsFocusOrder;
			WindowsTempSortBuffer = windowsTempSortBuffer;
			CurrentWindowStack = currentWindowStack;
			WindowsById = windowsById;
			WindowsActiveCount = windowsActiveCount;
			WindowsHoverPadding = windowsHoverPadding;
			DebugBreakInWindow = debugBreakInWindow;
			CurrentWindow = currentWindow;
			HoveredWindow = hoveredWindow;
			HoveredWindowUnderMovingWindow = hoveredWindowUnderMovingWindow;
			HoveredWindowBeforeClear = hoveredWindowBeforeClear;
			MovingWindow = movingWindow;
			WheelingWindow = wheelingWindow;
			WheelingWindowRefMousePos = wheelingWindowRefMousePos;
			WheelingWindowStartFrame = wheelingWindowStartFrame;
			WheelingWindowScrolledFrame = wheelingWindowScrolledFrame;
			WheelingWindowReleaseTimer = wheelingWindowReleaseTimer;
			WheelingWindowWheelRemainder = wheelingWindowWheelRemainder;
			WheelingAxisAvg = wheelingAxisAvg;
			DebugHookIdInfo = debugHookIdInfo;
			HoveredId = hoveredId;
			HoveredIdPreviousFrame = hoveredIdPreviousFrame;
			HoveredIdTimer = hoveredIdTimer;
			HoveredIdNotActiveTimer = hoveredIdNotActiveTimer;
			HoveredIdAllowOverlap = hoveredIdAllowOverlap ? (byte)1 : (byte)0;
			HoveredIdIsDisabled = hoveredIdIsDisabled ? (byte)1 : (byte)0;
			ItemUnclipByLog = itemUnclipByLog ? (byte)1 : (byte)0;
			ActiveId = activeId;
			ActiveIdIsAlive = activeIdIsAlive;
			ActiveIdTimer = activeIdTimer;
			ActiveIdIsJustActivated = activeIdIsJustActivated ? (byte)1 : (byte)0;
			ActiveIdAllowOverlap = activeIdAllowOverlap ? (byte)1 : (byte)0;
			ActiveIdNoClearOnFocusLoss = activeIdNoClearOnFocusLoss ? (byte)1 : (byte)0;
			ActiveIdHasBeenPressedBefore = activeIdHasBeenPressedBefore ? (byte)1 : (byte)0;
			ActiveIdHasBeenEditedBefore = activeIdHasBeenEditedBefore ? (byte)1 : (byte)0;
			ActiveIdHasBeenEditedThisFrame = activeIdHasBeenEditedThisFrame ? (byte)1 : (byte)0;
			ActiveIdFromShortcut = activeIdFromShortcut ? (byte)1 : (byte)0;
			ActiveIdMouseButton = activeIdMouseButton;
			ActiveIdClickOffset = activeIdClickOffset;
			ActiveIdWindow = activeIdWindow;
			ActiveIdSource = activeIdSource;
			ActiveIdPreviousFrame = activeIdPreviousFrame;
			ActiveIdPreviousFrameIsAlive = activeIdPreviousFrameIsAlive ? (byte)1 : (byte)0;
			ActiveIdPreviousFrameHasBeenEditedBefore = activeIdPreviousFrameHasBeenEditedBefore ? (byte)1 : (byte)0;
			ActiveIdPreviousFrameWindow = activeIdPreviousFrameWindow;
			LastActiveId = lastActiveId;
			LastActiveIdTimer = lastActiveIdTimer;
			LastKeyModsChangeTime = lastKeyModsChangeTime;
			LastKeyModsChangeFromNoneTime = lastKeyModsChangeFromNoneTime;
			LastKeyboardKeyPressTime = lastKeyboardKeyPressTime;
			KeysMayBeCharInput = keysMayBeCharInput;
			if (keysOwnerData != default(ImGuiKeyOwnerData*))
			{
				KeysOwnerData_0 = keysOwnerData[0];
				KeysOwnerData_1 = keysOwnerData[1];
				KeysOwnerData_2 = keysOwnerData[2];
				KeysOwnerData_3 = keysOwnerData[3];
				KeysOwnerData_4 = keysOwnerData[4];
				KeysOwnerData_5 = keysOwnerData[5];
				KeysOwnerData_6 = keysOwnerData[6];
				KeysOwnerData_7 = keysOwnerData[7];
				KeysOwnerData_8 = keysOwnerData[8];
				KeysOwnerData_9 = keysOwnerData[9];
				KeysOwnerData_10 = keysOwnerData[10];
				KeysOwnerData_11 = keysOwnerData[11];
				KeysOwnerData_12 = keysOwnerData[12];
				KeysOwnerData_13 = keysOwnerData[13];
				KeysOwnerData_14 = keysOwnerData[14];
				KeysOwnerData_15 = keysOwnerData[15];
				KeysOwnerData_16 = keysOwnerData[16];
				KeysOwnerData_17 = keysOwnerData[17];
				KeysOwnerData_18 = keysOwnerData[18];
				KeysOwnerData_19 = keysOwnerData[19];
				KeysOwnerData_20 = keysOwnerData[20];
				KeysOwnerData_21 = keysOwnerData[21];
				KeysOwnerData_22 = keysOwnerData[22];
				KeysOwnerData_23 = keysOwnerData[23];
				KeysOwnerData_24 = keysOwnerData[24];
				KeysOwnerData_25 = keysOwnerData[25];
				KeysOwnerData_26 = keysOwnerData[26];
				KeysOwnerData_27 = keysOwnerData[27];
				KeysOwnerData_28 = keysOwnerData[28];
				KeysOwnerData_29 = keysOwnerData[29];
				KeysOwnerData_30 = keysOwnerData[30];
				KeysOwnerData_31 = keysOwnerData[31];
				KeysOwnerData_32 = keysOwnerData[32];
				KeysOwnerData_33 = keysOwnerData[33];
				KeysOwnerData_34 = keysOwnerData[34];
				KeysOwnerData_35 = keysOwnerData[35];
				KeysOwnerData_36 = keysOwnerData[36];
				KeysOwnerData_37 = keysOwnerData[37];
				KeysOwnerData_38 = keysOwnerData[38];
				KeysOwnerData_39 = keysOwnerData[39];
				KeysOwnerData_40 = keysOwnerData[40];
				KeysOwnerData_41 = keysOwnerData[41];
				KeysOwnerData_42 = keysOwnerData[42];
				KeysOwnerData_43 = keysOwnerData[43];
				KeysOwnerData_44 = keysOwnerData[44];
				KeysOwnerData_45 = keysOwnerData[45];
				KeysOwnerData_46 = keysOwnerData[46];
				KeysOwnerData_47 = keysOwnerData[47];
				KeysOwnerData_48 = keysOwnerData[48];
				KeysOwnerData_49 = keysOwnerData[49];
				KeysOwnerData_50 = keysOwnerData[50];
				KeysOwnerData_51 = keysOwnerData[51];
				KeysOwnerData_52 = keysOwnerData[52];
				KeysOwnerData_53 = keysOwnerData[53];
				KeysOwnerData_54 = keysOwnerData[54];
				KeysOwnerData_55 = keysOwnerData[55];
				KeysOwnerData_56 = keysOwnerData[56];
				KeysOwnerData_57 = keysOwnerData[57];
				KeysOwnerData_58 = keysOwnerData[58];
				KeysOwnerData_59 = keysOwnerData[59];
				KeysOwnerData_60 = keysOwnerData[60];
				KeysOwnerData_61 = keysOwnerData[61];
				KeysOwnerData_62 = keysOwnerData[62];
				KeysOwnerData_63 = keysOwnerData[63];
				KeysOwnerData_64 = keysOwnerData[64];
				KeysOwnerData_65 = keysOwnerData[65];
				KeysOwnerData_66 = keysOwnerData[66];
				KeysOwnerData_67 = keysOwnerData[67];
				KeysOwnerData_68 = keysOwnerData[68];
				KeysOwnerData_69 = keysOwnerData[69];
				KeysOwnerData_70 = keysOwnerData[70];
				KeysOwnerData_71 = keysOwnerData[71];
				KeysOwnerData_72 = keysOwnerData[72];
				KeysOwnerData_73 = keysOwnerData[73];
				KeysOwnerData_74 = keysOwnerData[74];
				KeysOwnerData_75 = keysOwnerData[75];
				KeysOwnerData_76 = keysOwnerData[76];
				KeysOwnerData_77 = keysOwnerData[77];
				KeysOwnerData_78 = keysOwnerData[78];
				KeysOwnerData_79 = keysOwnerData[79];
				KeysOwnerData_80 = keysOwnerData[80];
				KeysOwnerData_81 = keysOwnerData[81];
				KeysOwnerData_82 = keysOwnerData[82];
				KeysOwnerData_83 = keysOwnerData[83];
				KeysOwnerData_84 = keysOwnerData[84];
				KeysOwnerData_85 = keysOwnerData[85];
				KeysOwnerData_86 = keysOwnerData[86];
				KeysOwnerData_87 = keysOwnerData[87];
				KeysOwnerData_88 = keysOwnerData[88];
				KeysOwnerData_89 = keysOwnerData[89];
				KeysOwnerData_90 = keysOwnerData[90];
				KeysOwnerData_91 = keysOwnerData[91];
				KeysOwnerData_92 = keysOwnerData[92];
				KeysOwnerData_93 = keysOwnerData[93];
				KeysOwnerData_94 = keysOwnerData[94];
				KeysOwnerData_95 = keysOwnerData[95];
				KeysOwnerData_96 = keysOwnerData[96];
				KeysOwnerData_97 = keysOwnerData[97];
				KeysOwnerData_98 = keysOwnerData[98];
				KeysOwnerData_99 = keysOwnerData[99];
				KeysOwnerData_100 = keysOwnerData[100];
				KeysOwnerData_101 = keysOwnerData[101];
				KeysOwnerData_102 = keysOwnerData[102];
				KeysOwnerData_103 = keysOwnerData[103];
				KeysOwnerData_104 = keysOwnerData[104];
				KeysOwnerData_105 = keysOwnerData[105];
				KeysOwnerData_106 = keysOwnerData[106];
				KeysOwnerData_107 = keysOwnerData[107];
				KeysOwnerData_108 = keysOwnerData[108];
				KeysOwnerData_109 = keysOwnerData[109];
				KeysOwnerData_110 = keysOwnerData[110];
				KeysOwnerData_111 = keysOwnerData[111];
				KeysOwnerData_112 = keysOwnerData[112];
				KeysOwnerData_113 = keysOwnerData[113];
				KeysOwnerData_114 = keysOwnerData[114];
				KeysOwnerData_115 = keysOwnerData[115];
				KeysOwnerData_116 = keysOwnerData[116];
				KeysOwnerData_117 = keysOwnerData[117];
				KeysOwnerData_118 = keysOwnerData[118];
				KeysOwnerData_119 = keysOwnerData[119];
				KeysOwnerData_120 = keysOwnerData[120];
				KeysOwnerData_121 = keysOwnerData[121];
				KeysOwnerData_122 = keysOwnerData[122];
				KeysOwnerData_123 = keysOwnerData[123];
				KeysOwnerData_124 = keysOwnerData[124];
				KeysOwnerData_125 = keysOwnerData[125];
				KeysOwnerData_126 = keysOwnerData[126];
				KeysOwnerData_127 = keysOwnerData[127];
				KeysOwnerData_128 = keysOwnerData[128];
				KeysOwnerData_129 = keysOwnerData[129];
				KeysOwnerData_130 = keysOwnerData[130];
				KeysOwnerData_131 = keysOwnerData[131];
				KeysOwnerData_132 = keysOwnerData[132];
				KeysOwnerData_133 = keysOwnerData[133];
				KeysOwnerData_134 = keysOwnerData[134];
				KeysOwnerData_135 = keysOwnerData[135];
				KeysOwnerData_136 = keysOwnerData[136];
				KeysOwnerData_137 = keysOwnerData[137];
				KeysOwnerData_138 = keysOwnerData[138];
				KeysOwnerData_139 = keysOwnerData[139];
				KeysOwnerData_140 = keysOwnerData[140];
				KeysOwnerData_141 = keysOwnerData[141];
				KeysOwnerData_142 = keysOwnerData[142];
				KeysOwnerData_143 = keysOwnerData[143];
				KeysOwnerData_144 = keysOwnerData[144];
				KeysOwnerData_145 = keysOwnerData[145];
				KeysOwnerData_146 = keysOwnerData[146];
				KeysOwnerData_147 = keysOwnerData[147];
				KeysOwnerData_148 = keysOwnerData[148];
				KeysOwnerData_149 = keysOwnerData[149];
				KeysOwnerData_150 = keysOwnerData[150];
				KeysOwnerData_151 = keysOwnerData[151];
				KeysOwnerData_152 = keysOwnerData[152];
				KeysOwnerData_153 = keysOwnerData[153];
			}
			KeysRoutingTable = keysRoutingTable;
			ActiveIdUsingNavDirMask = activeIdUsingNavDirMask;
			ActiveIdUsingAllKeyboardKeys = activeIdUsingAllKeyboardKeys ? (byte)1 : (byte)0;
			DebugBreakInShortcutRouting = debugBreakInShortcutRouting;
			CurrentFocusScopeId = currentFocusScopeId;
			CurrentItemFlags = currentItemFlags;
			DebugLocateId = debugLocateId;
			NextItemData = nextItemData;
			LastItemData = lastItemData;
			NextWindowData = nextWindowData;
			DebugShowGroupRects = debugShowGroupRects ? (byte)1 : (byte)0;
			DebugFlashStyleColorIdx = debugFlashStyleColorIdx;
			ColorStack = colorStack;
			StyleVarStack = styleVarStack;
			FontStack = fontStack;
			FocusScopeStack = focusScopeStack;
			ItemFlagsStack = itemFlagsStack;
			GroupStack = groupStack;
			OpenPopupStack = openPopupStack;
			BeginPopupStack = beginPopupStack;
			TreeNodeStack = treeNodeStack;
			Viewports = viewports;
			CurrentViewport = currentViewport;
			MouseViewport = mouseViewport;
			MouseLastHoveredViewport = mouseLastHoveredViewport;
			PlatformLastFocusedViewportId = platformLastFocusedViewportId;
			FallbackMonitor = fallbackMonitor;
			PlatformMonitorsFullWorkRect = platformMonitorsFullWorkRect;
			ViewportCreatedCount = viewportCreatedCount;
			PlatformWindowsCreatedCount = platformWindowsCreatedCount;
			ViewportFocusedStampCount = viewportFocusedStampCount;
			NavWindow = navWindow;
			NavId = navId;
			NavFocusScopeId = navFocusScopeId;
			NavLayer = navLayer;
			NavActivateId = navActivateId;
			NavActivateDownId = navActivateDownId;
			NavActivatePressedId = navActivatePressedId;
			NavActivateFlags = navActivateFlags;
			NavFocusRoute = navFocusRoute;
			NavHighlightActivatedId = navHighlightActivatedId;
			NavHighlightActivatedTimer = navHighlightActivatedTimer;
			NavNextActivateId = navNextActivateId;
			NavNextActivateFlags = navNextActivateFlags;
			NavInputSource = navInputSource;
			NavLastValidSelectionUserData = navLastValidSelectionUserData;
			NavIdIsAlive = navIdIsAlive ? (byte)1 : (byte)0;
			NavMousePosDirty = navMousePosDirty ? (byte)1 : (byte)0;
			NavDisableHighlight = navDisableHighlight ? (byte)1 : (byte)0;
			NavDisableMouseHover = navDisableMouseHover ? (byte)1 : (byte)0;
			NavAnyRequest = navAnyRequest ? (byte)1 : (byte)0;
			NavInitRequest = navInitRequest ? (byte)1 : (byte)0;
			NavInitRequestFromMove = navInitRequestFromMove ? (byte)1 : (byte)0;
			NavInitResult = navInitResult;
			NavMoveSubmitted = navMoveSubmitted ? (byte)1 : (byte)0;
			NavMoveScoringItems = navMoveScoringItems ? (byte)1 : (byte)0;
			NavMoveForwardToNextFrame = navMoveForwardToNextFrame ? (byte)1 : (byte)0;
			NavMoveFlags = navMoveFlags;
			NavMoveScrollFlags = navMoveScrollFlags;
			NavMoveKeyMods = navMoveKeyMods;
			NavMoveDir = navMoveDir;
			NavMoveDirForDebug = navMoveDirForDebug;
			NavMoveClipDir = navMoveClipDir;
			NavScoringRect = navScoringRect;
			NavScoringNoClipRect = navScoringNoClipRect;
			NavScoringDebugCount = navScoringDebugCount;
			NavTabbingDir = navTabbingDir;
			NavTabbingCounter = navTabbingCounter;
			NavMoveResultLocal = navMoveResultLocal;
			NavMoveResultLocalVisible = navMoveResultLocalVisible;
			NavMoveResultOther = navMoveResultOther;
			NavTabbingResultFirst = navTabbingResultFirst;
			NavJustMovedFromFocusScopeId = navJustMovedFromFocusScopeId;
			NavJustMovedToId = navJustMovedToId;
			NavJustMovedToFocusScopeId = navJustMovedToFocusScopeId;
			NavJustMovedToKeyMods = navJustMovedToKeyMods;
			NavJustMovedToIsTabbing = navJustMovedToIsTabbing ? (byte)1 : (byte)0;
			NavJustMovedToHasSelectionData = navJustMovedToHasSelectionData ? (byte)1 : (byte)0;
			ConfigNavWindowingKeyNext = configNavWindowingKeyNext;
			ConfigNavWindowingKeyPrev = configNavWindowingKeyPrev;
			NavWindowingTarget = navWindowingTarget;
			NavWindowingTargetAnim = navWindowingTargetAnim;
			NavWindowingListWindow = navWindowingListWindow;
			NavWindowingTimer = navWindowingTimer;
			NavWindowingHighlightAlpha = navWindowingHighlightAlpha;
			NavWindowingToggleLayer = navWindowingToggleLayer ? (byte)1 : (byte)0;
			NavWindowingToggleKey = navWindowingToggleKey;
			NavWindowingAccumDeltaPos = navWindowingAccumDeltaPos;
			NavWindowingAccumDeltaSize = navWindowingAccumDeltaSize;
			DimBgRatio = dimBgRatio;
			DragDropActive = dragDropActive ? (byte)1 : (byte)0;
			DragDropWithinSource = dragDropWithinSource ? (byte)1 : (byte)0;
			DragDropWithinTarget = dragDropWithinTarget ? (byte)1 : (byte)0;
			DragDropSourceFlags = dragDropSourceFlags;
			DragDropSourceFrameCount = dragDropSourceFrameCount;
			DragDropMouseButton = dragDropMouseButton;
			DragDropPayload = dragDropPayload;
			DragDropTargetRect = dragDropTargetRect;
			DragDropTargetClipRect = dragDropTargetClipRect;
			DragDropTargetId = dragDropTargetId;
			DragDropAcceptFlags = dragDropAcceptFlags;
			DragDropAcceptIdCurrRectSurface = dragDropAcceptIdCurrRectSurface;
			DragDropAcceptIdCurr = dragDropAcceptIdCurr;
			DragDropAcceptIdPrev = dragDropAcceptIdPrev;
			DragDropAcceptFrameCount = dragDropAcceptFrameCount;
			DragDropHoldJustPressedId = dragDropHoldJustPressedId;
			DragDropPayloadBufHeap = dragDropPayloadBufHeap;
			if (dragDropPayloadBufLocal != default(byte*))
			{
				DragDropPayloadBufLocal_0 = dragDropPayloadBufLocal[0];
				DragDropPayloadBufLocal_1 = dragDropPayloadBufLocal[1];
				DragDropPayloadBufLocal_2 = dragDropPayloadBufLocal[2];
				DragDropPayloadBufLocal_3 = dragDropPayloadBufLocal[3];
				DragDropPayloadBufLocal_4 = dragDropPayloadBufLocal[4];
				DragDropPayloadBufLocal_5 = dragDropPayloadBufLocal[5];
				DragDropPayloadBufLocal_6 = dragDropPayloadBufLocal[6];
				DragDropPayloadBufLocal_7 = dragDropPayloadBufLocal[7];
				DragDropPayloadBufLocal_8 = dragDropPayloadBufLocal[8];
				DragDropPayloadBufLocal_9 = dragDropPayloadBufLocal[9];
				DragDropPayloadBufLocal_10 = dragDropPayloadBufLocal[10];
				DragDropPayloadBufLocal_11 = dragDropPayloadBufLocal[11];
				DragDropPayloadBufLocal_12 = dragDropPayloadBufLocal[12];
				DragDropPayloadBufLocal_13 = dragDropPayloadBufLocal[13];
				DragDropPayloadBufLocal_14 = dragDropPayloadBufLocal[14];
				DragDropPayloadBufLocal_15 = dragDropPayloadBufLocal[15];
			}
			ClipperTempDataStacked = clipperTempDataStacked;
			ClipperTempData = clipperTempData;
			CurrentTable = currentTable;
			DebugBreakInTable = debugBreakInTable;
			TablesTempDataStacked = tablesTempDataStacked;
			TablesTempData = tablesTempData;
			Tables = tables;
			TablesLastTimeActive = tablesLastTimeActive;
			DrawChannelsTempMergeBuffer = drawChannelsTempMergeBuffer;
			CurrentTabBar = currentTabBar;
			TabBars = tabBars;
			CurrentTabBarStack = currentTabBarStack;
			ShrinkWidthBuffer = shrinkWidthBuffer;
			BoxSelectState = boxSelectState;
			CurrentMultiSelect = currentMultiSelect;
			MultiSelectTempDataStacked = multiSelectTempDataStacked;
			MultiSelectTempData = multiSelectTempData;
			MultiSelectStorage = multiSelectStorage;
			HoverItemDelayId = hoverItemDelayId;
			HoverItemDelayIdPreviousFrame = hoverItemDelayIdPreviousFrame;
			HoverItemDelayTimer = hoverItemDelayTimer;
			HoverItemDelayClearTimer = hoverItemDelayClearTimer;
			HoverItemUnlockedStationaryId = hoverItemUnlockedStationaryId;
			HoverWindowUnlockedStationaryId = hoverWindowUnlockedStationaryId;
			MouseCursor = mouseCursor;
			MouseStationaryTimer = mouseStationaryTimer;
			MouseLastValidPos = mouseLastValidPos;
			InputTextState = inputTextState;
			InputTextDeactivatedState = inputTextDeactivatedState;
			InputTextPasswordFont = inputTextPasswordFont;
			TempInputId = tempInputId;
			DataTypeZeroValue = dataTypeZeroValue;
			BeginMenuDepth = beginMenuDepth;
			BeginComboDepth = beginComboDepth;
			ColorEditOptions = colorEditOptions;
			ColorEditCurrentID = colorEditCurrentId;
			ColorEditSavedID = colorEditSavedId;
			ColorEditSavedHue = colorEditSavedHue;
			ColorEditSavedSat = colorEditSavedSat;
			ColorEditSavedColor = colorEditSavedColor;
			ColorPickerRef = colorPickerRef;
			ComboPreviewData = comboPreviewData;
			WindowResizeBorderExpectedRect = windowResizeBorderExpectedRect;
			WindowResizeRelativeMode = windowResizeRelativeMode ? (byte)1 : (byte)0;
			ScrollbarSeekMode = scrollbarSeekMode;
			ScrollbarClickDeltaToGrabCenter = scrollbarClickDeltaToGrabCenter;
			SliderGrabClickOffset = sliderGrabClickOffset;
			SliderCurrentAccum = sliderCurrentAccum;
			SliderCurrentAccumDirty = sliderCurrentAccumDirty ? (byte)1 : (byte)0;
			DragCurrentAccumDirty = dragCurrentAccumDirty ? (byte)1 : (byte)0;
			DragCurrentAccum = dragCurrentAccum;
			DragSpeedDefaultRatio = dragSpeedDefaultRatio;
			DisabledAlphaBackup = disabledAlphaBackup;
			DisabledStackSize = disabledStackSize;
			LockMarkEdited = lockMarkEdited;
			TooltipOverrideCount = tooltipOverrideCount;
			ClipboardHandlerData = clipboardHandlerData;
			MenusIdSubmittedThisFrame = menusIdSubmittedThisFrame;
			TypingSelectState = typingSelectState;
			PlatformImeData = platformImeData;
			PlatformImeDataPrev = platformImeDataPrev;
			PlatformImeViewport = platformImeViewport;
			DockContext = dockContext;
			DockNodeWindowMenuHandler = (void*)dockNodeWindowMenuHandler;
			SettingsLoaded = settingsLoaded ? (byte)1 : (byte)0;
			SettingsDirtyTimer = settingsDirtyTimer;
			SettingsIniData = settingsIniData;
			SettingsHandlers = settingsHandlers;
			SettingsWindows = settingsWindows;
			SettingsTables = settingsTables;
			Hooks = hooks;
			HookIdNext = hookIdNext;
			if (localizationTable != default(byte**))
			{
				LocalizationTable_0 = localizationTable[0];
				LocalizationTable_1 = localizationTable[1];
				LocalizationTable_2 = localizationTable[2];
				LocalizationTable_3 = localizationTable[3];
				LocalizationTable_4 = localizationTable[4];
				LocalizationTable_5 = localizationTable[5];
				LocalizationTable_6 = localizationTable[6];
				LocalizationTable_7 = localizationTable[7];
				LocalizationTable_8 = localizationTable[8];
				LocalizationTable_9 = localizationTable[9];
				LocalizationTable_10 = localizationTable[10];
				LocalizationTable_11 = localizationTable[11];
			}
			LogEnabled = logEnabled ? (byte)1 : (byte)0;
			LogType = logType;
			LogFile = logFile;
			LogBuffer = logBuffer;
			LogNextPrefix = logNextPrefix;
			LogNextSuffix = logNextSuffix;
			LogLinePosY = logLinePosY;
			LogLineFirstItem = logLineFirstItem ? (byte)1 : (byte)0;
			LogDepthRef = logDepthRef;
			LogDepthToExpand = logDepthToExpand;
			LogDepthToExpandDefault = logDepthToExpandDefault;
			DebugLogFlags = debugLogFlags;
			DebugLogBuf = debugLogBuf;
			DebugLogIndex = debugLogIndex;
			DebugLogAutoDisableFlags = debugLogAutoDisableFlags;
			DebugLogAutoDisableFrames = debugLogAutoDisableFrames;
			DebugLocateFrames = debugLocateFrames;
			DebugBreakInLocateId = debugBreakInLocateId ? (byte)1 : (byte)0;
			DebugBreakKeyChord = debugBreakKeyChord;
			DebugBeginReturnValueCullDepth = debugBeginReturnValueCullDepth;
			DebugItemPickerActive = debugItemPickerActive ? (byte)1 : (byte)0;
			DebugItemPickerMouseButton = debugItemPickerMouseButton;
			DebugItemPickerBreakId = debugItemPickerBreakId;
			DebugFlashStyleColorTime = debugFlashStyleColorTime;
			DebugFlashStyleColorBackup = debugFlashStyleColorBackup;
			DebugMetricsConfig = debugMetricsConfig;
			DebugIDStackTool = debugIdStackTool;
			DebugAllocInfo = debugAllocInfo;
			DebugHoveredDockNode = debugHoveredDockNode;
			if (framerateSecPerFrame != default(float*))
			{
				FramerateSecPerFrame_0 = framerateSecPerFrame[0];
				FramerateSecPerFrame_1 = framerateSecPerFrame[1];
				FramerateSecPerFrame_2 = framerateSecPerFrame[2];
				FramerateSecPerFrame_3 = framerateSecPerFrame[3];
				FramerateSecPerFrame_4 = framerateSecPerFrame[4];
				FramerateSecPerFrame_5 = framerateSecPerFrame[5];
				FramerateSecPerFrame_6 = framerateSecPerFrame[6];
				FramerateSecPerFrame_7 = framerateSecPerFrame[7];
				FramerateSecPerFrame_8 = framerateSecPerFrame[8];
				FramerateSecPerFrame_9 = framerateSecPerFrame[9];
				FramerateSecPerFrame_10 = framerateSecPerFrame[10];
				FramerateSecPerFrame_11 = framerateSecPerFrame[11];
				FramerateSecPerFrame_12 = framerateSecPerFrame[12];
				FramerateSecPerFrame_13 = framerateSecPerFrame[13];
				FramerateSecPerFrame_14 = framerateSecPerFrame[14];
				FramerateSecPerFrame_15 = framerateSecPerFrame[15];
				FramerateSecPerFrame_16 = framerateSecPerFrame[16];
				FramerateSecPerFrame_17 = framerateSecPerFrame[17];
				FramerateSecPerFrame_18 = framerateSecPerFrame[18];
				FramerateSecPerFrame_19 = framerateSecPerFrame[19];
				FramerateSecPerFrame_20 = framerateSecPerFrame[20];
				FramerateSecPerFrame_21 = framerateSecPerFrame[21];
				FramerateSecPerFrame_22 = framerateSecPerFrame[22];
				FramerateSecPerFrame_23 = framerateSecPerFrame[23];
				FramerateSecPerFrame_24 = framerateSecPerFrame[24];
				FramerateSecPerFrame_25 = framerateSecPerFrame[25];
				FramerateSecPerFrame_26 = framerateSecPerFrame[26];
				FramerateSecPerFrame_27 = framerateSecPerFrame[27];
				FramerateSecPerFrame_28 = framerateSecPerFrame[28];
				FramerateSecPerFrame_29 = framerateSecPerFrame[29];
				FramerateSecPerFrame_30 = framerateSecPerFrame[30];
				FramerateSecPerFrame_31 = framerateSecPerFrame[31];
				FramerateSecPerFrame_32 = framerateSecPerFrame[32];
				FramerateSecPerFrame_33 = framerateSecPerFrame[33];
				FramerateSecPerFrame_34 = framerateSecPerFrame[34];
				FramerateSecPerFrame_35 = framerateSecPerFrame[35];
				FramerateSecPerFrame_36 = framerateSecPerFrame[36];
				FramerateSecPerFrame_37 = framerateSecPerFrame[37];
				FramerateSecPerFrame_38 = framerateSecPerFrame[38];
				FramerateSecPerFrame_39 = framerateSecPerFrame[39];
				FramerateSecPerFrame_40 = framerateSecPerFrame[40];
				FramerateSecPerFrame_41 = framerateSecPerFrame[41];
				FramerateSecPerFrame_42 = framerateSecPerFrame[42];
				FramerateSecPerFrame_43 = framerateSecPerFrame[43];
				FramerateSecPerFrame_44 = framerateSecPerFrame[44];
				FramerateSecPerFrame_45 = framerateSecPerFrame[45];
				FramerateSecPerFrame_46 = framerateSecPerFrame[46];
				FramerateSecPerFrame_47 = framerateSecPerFrame[47];
				FramerateSecPerFrame_48 = framerateSecPerFrame[48];
				FramerateSecPerFrame_49 = framerateSecPerFrame[49];
				FramerateSecPerFrame_50 = framerateSecPerFrame[50];
				FramerateSecPerFrame_51 = framerateSecPerFrame[51];
				FramerateSecPerFrame_52 = framerateSecPerFrame[52];
				FramerateSecPerFrame_53 = framerateSecPerFrame[53];
				FramerateSecPerFrame_54 = framerateSecPerFrame[54];
				FramerateSecPerFrame_55 = framerateSecPerFrame[55];
				FramerateSecPerFrame_56 = framerateSecPerFrame[56];
				FramerateSecPerFrame_57 = framerateSecPerFrame[57];
				FramerateSecPerFrame_58 = framerateSecPerFrame[58];
				FramerateSecPerFrame_59 = framerateSecPerFrame[59];
			}
			FramerateSecPerFrameIdx = framerateSecPerFrameIdx;
			FramerateSecPerFrameCount = framerateSecPerFrameCount;
			FramerateSecPerFrameAccum = framerateSecPerFrameAccum;
			WantCaptureMouseNextFrame = wantCaptureMouseNextFrame;
			WantCaptureKeyboardNextFrame = wantCaptureKeyboardNextFrame;
			WantTextInputNextFrame = wantTextInputNextFrame;
			TempBuffer = tempBuffer;
			if (tempKeychordName != default(byte*))
			{
				TempKeychordName_0 = tempKeychordName[0];
				TempKeychordName_1 = tempKeychordName[1];
				TempKeychordName_2 = tempKeychordName[2];
				TempKeychordName_3 = tempKeychordName[3];
				TempKeychordName_4 = tempKeychordName[4];
				TempKeychordName_5 = tempKeychordName[5];
				TempKeychordName_6 = tempKeychordName[6];
				TempKeychordName_7 = tempKeychordName[7];
				TempKeychordName_8 = tempKeychordName[8];
				TempKeychordName_9 = tempKeychordName[9];
				TempKeychordName_10 = tempKeychordName[10];
				TempKeychordName_11 = tempKeychordName[11];
				TempKeychordName_12 = tempKeychordName[12];
				TempKeychordName_13 = tempKeychordName[13];
				TempKeychordName_14 = tempKeychordName[14];
				TempKeychordName_15 = tempKeychordName[15];
				TempKeychordName_16 = tempKeychordName[16];
				TempKeychordName_17 = tempKeychordName[17];
				TempKeychordName_18 = tempKeychordName[18];
				TempKeychordName_19 = tempKeychordName[19];
				TempKeychordName_20 = tempKeychordName[20];
				TempKeychordName_21 = tempKeychordName[21];
				TempKeychordName_22 = tempKeychordName[22];
				TempKeychordName_23 = tempKeychordName[23];
				TempKeychordName_24 = tempKeychordName[24];
				TempKeychordName_25 = tempKeychordName[25];
				TempKeychordName_26 = tempKeychordName[26];
				TempKeychordName_27 = tempKeychordName[27];
				TempKeychordName_28 = tempKeychordName[28];
				TempKeychordName_29 = tempKeychordName[29];
				TempKeychordName_30 = tempKeychordName[30];
				TempKeychordName_31 = tempKeychordName[31];
				TempKeychordName_32 = tempKeychordName[32];
				TempKeychordName_33 = tempKeychordName[33];
				TempKeychordName_34 = tempKeychordName[34];
				TempKeychordName_35 = tempKeychordName[35];
				TempKeychordName_36 = tempKeychordName[36];
				TempKeychordName_37 = tempKeychordName[37];
				TempKeychordName_38 = tempKeychordName[38];
				TempKeychordName_39 = tempKeychordName[39];
				TempKeychordName_40 = tempKeychordName[40];
				TempKeychordName_41 = tempKeychordName[41];
				TempKeychordName_42 = tempKeychordName[42];
				TempKeychordName_43 = tempKeychordName[43];
				TempKeychordName_44 = tempKeychordName[44];
				TempKeychordName_45 = tempKeychordName[45];
				TempKeychordName_46 = tempKeychordName[46];
				TempKeychordName_47 = tempKeychordName[47];
				TempKeychordName_48 = tempKeychordName[48];
				TempKeychordName_49 = tempKeychordName[49];
				TempKeychordName_50 = tempKeychordName[50];
				TempKeychordName_51 = tempKeychordName[51];
				TempKeychordName_52 = tempKeychordName[52];
				TempKeychordName_53 = tempKeychordName[53];
				TempKeychordName_54 = tempKeychordName[54];
				TempKeychordName_55 = tempKeychordName[55];
				TempKeychordName_56 = tempKeychordName[56];
				TempKeychordName_57 = tempKeychordName[57];
				TempKeychordName_58 = tempKeychordName[58];
				TempKeychordName_59 = tempKeychordName[59];
				TempKeychordName_60 = tempKeychordName[60];
				TempKeychordName_61 = tempKeychordName[61];
				TempKeychordName_62 = tempKeychordName[62];
				TempKeychordName_63 = tempKeychordName[63];
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiContext(bool initialized = default, bool fontAtlasOwnedByContext = default, ImGuiIO io = default, ImGuiPlatformIO platformIo = default, ImGuiStyle style = default, ImGuiConfigFlags configFlagsCurrFrame = default, ImGuiConfigFlags configFlagsLastFrame = default, ImFont* font = default, float fontSize = default, float fontBaseSize = default, float fontScale = default, float currentDpiScale = default, ImDrawListSharedData drawListSharedData = default, double time = default, int frameCount = default, int frameCountEnded = default, int frameCountPlatformEnded = default, int frameCountRendered = default, bool withinFrameScope = default, bool withinFrameScopeWithImplicitWindow = default, bool withinEndChild = default, bool gcCompactAll = default, bool testEngineHookItems = default, void* testEngine = default, Span<byte> contextName = default, ImVectorImGuiInputEvent inputEventsQueue = default, ImVectorImGuiInputEvent inputEventsTrail = default, ImGuiMouseSource inputEventsNextMouseSource = default, uint inputEventsNextEventId = default, ImVectorImGuiWindowPtr windows = default, ImVectorImGuiWindowPtr windowsFocusOrder = default, ImVectorImGuiWindowPtr windowsTempSortBuffer = default, ImVectorImGuiWindowStackData currentWindowStack = default, ImGuiStorage windowsById = default, int windowsActiveCount = default, Vector2 windowsHoverPadding = default, uint debugBreakInWindow = default, ImGuiWindow* currentWindow = default, ImGuiWindow* hoveredWindow = default, ImGuiWindow* hoveredWindowUnderMovingWindow = default, ImGuiWindow* hoveredWindowBeforeClear = default, ImGuiWindow* movingWindow = default, ImGuiWindow* wheelingWindow = default, Vector2 wheelingWindowRefMousePos = default, int wheelingWindowStartFrame = default, int wheelingWindowScrolledFrame = default, float wheelingWindowReleaseTimer = default, Vector2 wheelingWindowWheelRemainder = default, Vector2 wheelingAxisAvg = default, uint debugHookIdInfo = default, uint hoveredId = default, uint hoveredIdPreviousFrame = default, float hoveredIdTimer = default, float hoveredIdNotActiveTimer = default, bool hoveredIdAllowOverlap = default, bool hoveredIdIsDisabled = default, bool itemUnclipByLog = default, uint activeId = default, uint activeIdIsAlive = default, float activeIdTimer = default, bool activeIdIsJustActivated = default, bool activeIdAllowOverlap = default, bool activeIdNoClearOnFocusLoss = default, bool activeIdHasBeenPressedBefore = default, bool activeIdHasBeenEditedBefore = default, bool activeIdHasBeenEditedThisFrame = default, bool activeIdFromShortcut = default, int activeIdMouseButton = default, Vector2 activeIdClickOffset = default, ImGuiWindow* activeIdWindow = default, ImGuiInputSource activeIdSource = default, uint activeIdPreviousFrame = default, bool activeIdPreviousFrameIsAlive = default, bool activeIdPreviousFrameHasBeenEditedBefore = default, ImGuiWindow* activeIdPreviousFrameWindow = default, uint lastActiveId = default, float lastActiveIdTimer = default, double lastKeyModsChangeTime = default, double lastKeyModsChangeFromNoneTime = default, double lastKeyboardKeyPressTime = default, nuint keysMayBeCharInput = default, Span<ImGuiKeyOwnerData> keysOwnerData = default, ImGuiKeyRoutingTable keysRoutingTable = default, uint activeIdUsingNavDirMask = default, bool activeIdUsingAllKeyboardKeys = default, int debugBreakInShortcutRouting = default, uint currentFocusScopeId = default, ImGuiItemFlags currentItemFlags = default, uint debugLocateId = default, ImGuiNextItemData nextItemData = default, ImGuiLastItemData lastItemData = default, ImGuiNextWindowData nextWindowData = default, bool debugShowGroupRects = default, ImGuiCol debugFlashStyleColorIdx = default, ImVectorImGuiColorMod colorStack = default, ImVectorImGuiStyleMod styleVarStack = default, ImVectorImFontPtr fontStack = default, ImVectorImGuiFocusScopeData focusScopeStack = default, ImVectorImGuiItemFlags itemFlagsStack = default, ImVectorImGuiGroupData groupStack = default, ImVectorImGuiPopupData openPopupStack = default, ImVectorImGuiPopupData beginPopupStack = default, ImVectorImGuiTreeNodeStackData treeNodeStack = default, ImVectorImGuiViewportPPtr viewports = default, ImGuiViewportP* currentViewport = default, ImGuiViewportP* mouseViewport = default, ImGuiViewportP* mouseLastHoveredViewport = default, uint platformLastFocusedViewportId = default, ImGuiPlatformMonitor fallbackMonitor = default, ImRect platformMonitorsFullWorkRect = default, int viewportCreatedCount = default, int platformWindowsCreatedCount = default, int viewportFocusedStampCount = default, ImGuiWindow* navWindow = default, uint navId = default, uint navFocusScopeId = default, ImGuiNavLayer navLayer = default, uint navActivateId = default, uint navActivateDownId = default, uint navActivatePressedId = default, ImGuiActivateFlags navActivateFlags = default, ImVectorImGuiFocusScopeData navFocusRoute = default, uint navHighlightActivatedId = default, float navHighlightActivatedTimer = default, uint navNextActivateId = default, ImGuiActivateFlags navNextActivateFlags = default, ImGuiInputSource navInputSource = default, long navLastValidSelectionUserData = default, bool navIdIsAlive = default, bool navMousePosDirty = default, bool navDisableHighlight = default, bool navDisableMouseHover = default, bool navAnyRequest = default, bool navInitRequest = default, bool navInitRequestFromMove = default, ImGuiNavItemData navInitResult = default, bool navMoveSubmitted = default, bool navMoveScoringItems = default, bool navMoveForwardToNextFrame = default, ImGuiNavMoveFlags navMoveFlags = default, ImGuiScrollFlags navMoveScrollFlags = default, int navMoveKeyMods = default, ImGuiDir navMoveDir = default, ImGuiDir navMoveDirForDebug = default, ImGuiDir navMoveClipDir = default, ImRect navScoringRect = default, ImRect navScoringNoClipRect = default, int navScoringDebugCount = default, int navTabbingDir = default, int navTabbingCounter = default, ImGuiNavItemData navMoveResultLocal = default, ImGuiNavItemData navMoveResultLocalVisible = default, ImGuiNavItemData navMoveResultOther = default, ImGuiNavItemData navTabbingResultFirst = default, uint navJustMovedFromFocusScopeId = default, uint navJustMovedToId = default, uint navJustMovedToFocusScopeId = default, int navJustMovedToKeyMods = default, bool navJustMovedToIsTabbing = default, bool navJustMovedToHasSelectionData = default, int configNavWindowingKeyNext = default, int configNavWindowingKeyPrev = default, ImGuiWindow* navWindowingTarget = default, ImGuiWindow* navWindowingTargetAnim = default, ImGuiWindow* navWindowingListWindow = default, float navWindowingTimer = default, float navWindowingHighlightAlpha = default, bool navWindowingToggleLayer = default, ImGuiKey navWindowingToggleKey = default, Vector2 navWindowingAccumDeltaPos = default, Vector2 navWindowingAccumDeltaSize = default, float dimBgRatio = default, bool dragDropActive = default, bool dragDropWithinSource = default, bool dragDropWithinTarget = default, ImGuiDragDropFlags dragDropSourceFlags = default, int dragDropSourceFrameCount = default, int dragDropMouseButton = default, ImGuiPayload dragDropPayload = default, ImRect dragDropTargetRect = default, ImRect dragDropTargetClipRect = default, uint dragDropTargetId = default, ImGuiDragDropFlags dragDropAcceptFlags = default, float dragDropAcceptIdCurrRectSurface = default, uint dragDropAcceptIdCurr = default, uint dragDropAcceptIdPrev = default, int dragDropAcceptFrameCount = default, uint dragDropHoldJustPressedId = default, ImVectorUnsignedChar dragDropPayloadBufHeap = default, Span<byte> dragDropPayloadBufLocal = default, int clipperTempDataStacked = default, ImVectorImGuiListClipperData clipperTempData = default, ImGuiTable* currentTable = default, uint debugBreakInTable = default, int tablesTempDataStacked = default, ImVectorImGuiTableTempData tablesTempData = default, ImPoolImGuiTable tables = default, ImVectorFloat tablesLastTimeActive = default, ImVectorImDrawChannel drawChannelsTempMergeBuffer = default, ImGuiTabBar* currentTabBar = default, ImPoolImGuiTabBar tabBars = default, ImVectorImGuiPtrOrIndex currentTabBarStack = default, ImVectorImGuiShrinkWidthItem shrinkWidthBuffer = default, ImGuiBoxSelectState boxSelectState = default, ImGuiMultiSelectTempData* currentMultiSelect = default, int multiSelectTempDataStacked = default, ImVectorImGuiMultiSelectTempData multiSelectTempData = default, ImPoolImGuiMultiSelectState multiSelectStorage = default, uint hoverItemDelayId = default, uint hoverItemDelayIdPreviousFrame = default, float hoverItemDelayTimer = default, float hoverItemDelayClearTimer = default, uint hoverItemUnlockedStationaryId = default, uint hoverWindowUnlockedStationaryId = default, ImGuiMouseCursor mouseCursor = default, float mouseStationaryTimer = default, Vector2 mouseLastValidPos = default, ImGuiInputTextState inputTextState = default, ImGuiInputTextDeactivatedState inputTextDeactivatedState = default, ImFont inputTextPasswordFont = default, uint tempInputId = default, ImGuiDataTypeStorage dataTypeZeroValue = default, int beginMenuDepth = default, int beginComboDepth = default, ImGuiColorEditFlags colorEditOptions = default, uint colorEditCurrentId = default, uint colorEditSavedId = default, float colorEditSavedHue = default, float colorEditSavedSat = default, uint colorEditSavedColor = default, Vector4 colorPickerRef = default, ImGuiComboPreviewData comboPreviewData = default, ImRect windowResizeBorderExpectedRect = default, bool windowResizeRelativeMode = default, short scrollbarSeekMode = default, float scrollbarClickDeltaToGrabCenter = default, float sliderGrabClickOffset = default, float sliderCurrentAccum = default, bool sliderCurrentAccumDirty = default, bool dragCurrentAccumDirty = default, float dragCurrentAccum = default, float dragSpeedDefaultRatio = default, float disabledAlphaBackup = default, short disabledStackSize = default, short lockMarkEdited = default, short tooltipOverrideCount = default, ImVectorChar clipboardHandlerData = default, ImVectorImGuiID menusIdSubmittedThisFrame = default, ImGuiTypingSelectState typingSelectState = default, ImGuiPlatformImeData platformImeData = default, ImGuiPlatformImeData platformImeDataPrev = default, uint platformImeViewport = default, ImGuiDockContext dockContext = default, delegate*<ImGuiContext*, ImGuiDockNode*, ImGuiTabBar*, void> dockNodeWindowMenuHandler = default, bool settingsLoaded = default, float settingsDirtyTimer = default, ImGuiTextBuffer settingsIniData = default, ImVectorImGuiSettingsHandler settingsHandlers = default, ImChunkStreamImGuiWindowSettings settingsWindows = default, ImChunkStreamImGuiTableSettings settingsTables = default, ImVectorImGuiContextHook hooks = default, uint hookIdNext = default, Span<Pointer<byte>> localizationTable = default, bool logEnabled = default, ImGuiLogType logType = default, ImFileHandle logFile = default, ImGuiTextBuffer logBuffer = default, byte* logNextPrefix = default, byte* logNextSuffix = default, float logLinePosY = default, bool logLineFirstItem = default, int logDepthRef = default, int logDepthToExpand = default, int logDepthToExpandDefault = default, ImGuiDebugLogFlags debugLogFlags = default, ImGuiTextBuffer debugLogBuf = default, ImGuiTextIndex debugLogIndex = default, ImGuiDebugLogFlags debugLogAutoDisableFlags = default, byte debugLogAutoDisableFrames = default, byte debugLocateFrames = default, bool debugBreakInLocateId = default, int debugBreakKeyChord = default, byte debugBeginReturnValueCullDepth = default, bool debugItemPickerActive = default, byte debugItemPickerMouseButton = default, uint debugItemPickerBreakId = default, float debugFlashStyleColorTime = default, Vector4 debugFlashStyleColorBackup = default, ImGuiMetricsConfig debugMetricsConfig = default, ImGuiIDStackTool debugIdStackTool = default, ImGuiDebugAllocInfo debugAllocInfo = default, ImGuiDockNode* debugHoveredDockNode = default, Span<float> framerateSecPerFrame = default, int framerateSecPerFrameIdx = default, int framerateSecPerFrameCount = default, float framerateSecPerFrameAccum = default, int wantCaptureMouseNextFrame = default, int wantCaptureKeyboardNextFrame = default, int wantTextInputNextFrame = default, ImVectorChar tempBuffer = default, Span<byte> tempKeychordName = default)
		{
			Initialized = initialized ? (byte)1 : (byte)0;
			FontAtlasOwnedByContext = fontAtlasOwnedByContext ? (byte)1 : (byte)0;
			IO = io;
			PlatformIO = platformIo;
			Style = style;
			ConfigFlagsCurrFrame = configFlagsCurrFrame;
			ConfigFlagsLastFrame = configFlagsLastFrame;
			Font = font;
			FontSize = fontSize;
			FontBaseSize = fontBaseSize;
			FontScale = fontScale;
			CurrentDpiScale = currentDpiScale;
			DrawListSharedData = drawListSharedData;
			Time = time;
			FrameCount = frameCount;
			FrameCountEnded = frameCountEnded;
			FrameCountPlatformEnded = frameCountPlatformEnded;
			FrameCountRendered = frameCountRendered;
			WithinFrameScope = withinFrameScope ? (byte)1 : (byte)0;
			WithinFrameScopeWithImplicitWindow = withinFrameScopeWithImplicitWindow ? (byte)1 : (byte)0;
			WithinEndChild = withinEndChild ? (byte)1 : (byte)0;
			GcCompactAll = gcCompactAll ? (byte)1 : (byte)0;
			TestEngineHookItems = testEngineHookItems ? (byte)1 : (byte)0;
			TestEngine = testEngine;
			if (contextName != default(Span<byte>))
			{
				ContextName_0 = contextName[0];
				ContextName_1 = contextName[1];
				ContextName_2 = contextName[2];
				ContextName_3 = contextName[3];
				ContextName_4 = contextName[4];
				ContextName_5 = contextName[5];
				ContextName_6 = contextName[6];
				ContextName_7 = contextName[7];
				ContextName_8 = contextName[8];
				ContextName_9 = contextName[9];
				ContextName_10 = contextName[10];
				ContextName_11 = contextName[11];
				ContextName_12 = contextName[12];
				ContextName_13 = contextName[13];
				ContextName_14 = contextName[14];
				ContextName_15 = contextName[15];
			}
			InputEventsQueue = inputEventsQueue;
			InputEventsTrail = inputEventsTrail;
			InputEventsNextMouseSource = inputEventsNextMouseSource;
			InputEventsNextEventId = inputEventsNextEventId;
			Windows = windows;
			WindowsFocusOrder = windowsFocusOrder;
			WindowsTempSortBuffer = windowsTempSortBuffer;
			CurrentWindowStack = currentWindowStack;
			WindowsById = windowsById;
			WindowsActiveCount = windowsActiveCount;
			WindowsHoverPadding = windowsHoverPadding;
			DebugBreakInWindow = debugBreakInWindow;
			CurrentWindow = currentWindow;
			HoveredWindow = hoveredWindow;
			HoveredWindowUnderMovingWindow = hoveredWindowUnderMovingWindow;
			HoveredWindowBeforeClear = hoveredWindowBeforeClear;
			MovingWindow = movingWindow;
			WheelingWindow = wheelingWindow;
			WheelingWindowRefMousePos = wheelingWindowRefMousePos;
			WheelingWindowStartFrame = wheelingWindowStartFrame;
			WheelingWindowScrolledFrame = wheelingWindowScrolledFrame;
			WheelingWindowReleaseTimer = wheelingWindowReleaseTimer;
			WheelingWindowWheelRemainder = wheelingWindowWheelRemainder;
			WheelingAxisAvg = wheelingAxisAvg;
			DebugHookIdInfo = debugHookIdInfo;
			HoveredId = hoveredId;
			HoveredIdPreviousFrame = hoveredIdPreviousFrame;
			HoveredIdTimer = hoveredIdTimer;
			HoveredIdNotActiveTimer = hoveredIdNotActiveTimer;
			HoveredIdAllowOverlap = hoveredIdAllowOverlap ? (byte)1 : (byte)0;
			HoveredIdIsDisabled = hoveredIdIsDisabled ? (byte)1 : (byte)0;
			ItemUnclipByLog = itemUnclipByLog ? (byte)1 : (byte)0;
			ActiveId = activeId;
			ActiveIdIsAlive = activeIdIsAlive;
			ActiveIdTimer = activeIdTimer;
			ActiveIdIsJustActivated = activeIdIsJustActivated ? (byte)1 : (byte)0;
			ActiveIdAllowOverlap = activeIdAllowOverlap ? (byte)1 : (byte)0;
			ActiveIdNoClearOnFocusLoss = activeIdNoClearOnFocusLoss ? (byte)1 : (byte)0;
			ActiveIdHasBeenPressedBefore = activeIdHasBeenPressedBefore ? (byte)1 : (byte)0;
			ActiveIdHasBeenEditedBefore = activeIdHasBeenEditedBefore ? (byte)1 : (byte)0;
			ActiveIdHasBeenEditedThisFrame = activeIdHasBeenEditedThisFrame ? (byte)1 : (byte)0;
			ActiveIdFromShortcut = activeIdFromShortcut ? (byte)1 : (byte)0;
			ActiveIdMouseButton = activeIdMouseButton;
			ActiveIdClickOffset = activeIdClickOffset;
			ActiveIdWindow = activeIdWindow;
			ActiveIdSource = activeIdSource;
			ActiveIdPreviousFrame = activeIdPreviousFrame;
			ActiveIdPreviousFrameIsAlive = activeIdPreviousFrameIsAlive ? (byte)1 : (byte)0;
			ActiveIdPreviousFrameHasBeenEditedBefore = activeIdPreviousFrameHasBeenEditedBefore ? (byte)1 : (byte)0;
			ActiveIdPreviousFrameWindow = activeIdPreviousFrameWindow;
			LastActiveId = lastActiveId;
			LastActiveIdTimer = lastActiveIdTimer;
			LastKeyModsChangeTime = lastKeyModsChangeTime;
			LastKeyModsChangeFromNoneTime = lastKeyModsChangeFromNoneTime;
			LastKeyboardKeyPressTime = lastKeyboardKeyPressTime;
			KeysMayBeCharInput = keysMayBeCharInput;
			if (keysOwnerData != default(Span<ImGuiKeyOwnerData>))
			{
				KeysOwnerData_0 = keysOwnerData[0];
				KeysOwnerData_1 = keysOwnerData[1];
				KeysOwnerData_2 = keysOwnerData[2];
				KeysOwnerData_3 = keysOwnerData[3];
				KeysOwnerData_4 = keysOwnerData[4];
				KeysOwnerData_5 = keysOwnerData[5];
				KeysOwnerData_6 = keysOwnerData[6];
				KeysOwnerData_7 = keysOwnerData[7];
				KeysOwnerData_8 = keysOwnerData[8];
				KeysOwnerData_9 = keysOwnerData[9];
				KeysOwnerData_10 = keysOwnerData[10];
				KeysOwnerData_11 = keysOwnerData[11];
				KeysOwnerData_12 = keysOwnerData[12];
				KeysOwnerData_13 = keysOwnerData[13];
				KeysOwnerData_14 = keysOwnerData[14];
				KeysOwnerData_15 = keysOwnerData[15];
				KeysOwnerData_16 = keysOwnerData[16];
				KeysOwnerData_17 = keysOwnerData[17];
				KeysOwnerData_18 = keysOwnerData[18];
				KeysOwnerData_19 = keysOwnerData[19];
				KeysOwnerData_20 = keysOwnerData[20];
				KeysOwnerData_21 = keysOwnerData[21];
				KeysOwnerData_22 = keysOwnerData[22];
				KeysOwnerData_23 = keysOwnerData[23];
				KeysOwnerData_24 = keysOwnerData[24];
				KeysOwnerData_25 = keysOwnerData[25];
				KeysOwnerData_26 = keysOwnerData[26];
				KeysOwnerData_27 = keysOwnerData[27];
				KeysOwnerData_28 = keysOwnerData[28];
				KeysOwnerData_29 = keysOwnerData[29];
				KeysOwnerData_30 = keysOwnerData[30];
				KeysOwnerData_31 = keysOwnerData[31];
				KeysOwnerData_32 = keysOwnerData[32];
				KeysOwnerData_33 = keysOwnerData[33];
				KeysOwnerData_34 = keysOwnerData[34];
				KeysOwnerData_35 = keysOwnerData[35];
				KeysOwnerData_36 = keysOwnerData[36];
				KeysOwnerData_37 = keysOwnerData[37];
				KeysOwnerData_38 = keysOwnerData[38];
				KeysOwnerData_39 = keysOwnerData[39];
				KeysOwnerData_40 = keysOwnerData[40];
				KeysOwnerData_41 = keysOwnerData[41];
				KeysOwnerData_42 = keysOwnerData[42];
				KeysOwnerData_43 = keysOwnerData[43];
				KeysOwnerData_44 = keysOwnerData[44];
				KeysOwnerData_45 = keysOwnerData[45];
				KeysOwnerData_46 = keysOwnerData[46];
				KeysOwnerData_47 = keysOwnerData[47];
				KeysOwnerData_48 = keysOwnerData[48];
				KeysOwnerData_49 = keysOwnerData[49];
				KeysOwnerData_50 = keysOwnerData[50];
				KeysOwnerData_51 = keysOwnerData[51];
				KeysOwnerData_52 = keysOwnerData[52];
				KeysOwnerData_53 = keysOwnerData[53];
				KeysOwnerData_54 = keysOwnerData[54];
				KeysOwnerData_55 = keysOwnerData[55];
				KeysOwnerData_56 = keysOwnerData[56];
				KeysOwnerData_57 = keysOwnerData[57];
				KeysOwnerData_58 = keysOwnerData[58];
				KeysOwnerData_59 = keysOwnerData[59];
				KeysOwnerData_60 = keysOwnerData[60];
				KeysOwnerData_61 = keysOwnerData[61];
				KeysOwnerData_62 = keysOwnerData[62];
				KeysOwnerData_63 = keysOwnerData[63];
				KeysOwnerData_64 = keysOwnerData[64];
				KeysOwnerData_65 = keysOwnerData[65];
				KeysOwnerData_66 = keysOwnerData[66];
				KeysOwnerData_67 = keysOwnerData[67];
				KeysOwnerData_68 = keysOwnerData[68];
				KeysOwnerData_69 = keysOwnerData[69];
				KeysOwnerData_70 = keysOwnerData[70];
				KeysOwnerData_71 = keysOwnerData[71];
				KeysOwnerData_72 = keysOwnerData[72];
				KeysOwnerData_73 = keysOwnerData[73];
				KeysOwnerData_74 = keysOwnerData[74];
				KeysOwnerData_75 = keysOwnerData[75];
				KeysOwnerData_76 = keysOwnerData[76];
				KeysOwnerData_77 = keysOwnerData[77];
				KeysOwnerData_78 = keysOwnerData[78];
				KeysOwnerData_79 = keysOwnerData[79];
				KeysOwnerData_80 = keysOwnerData[80];
				KeysOwnerData_81 = keysOwnerData[81];
				KeysOwnerData_82 = keysOwnerData[82];
				KeysOwnerData_83 = keysOwnerData[83];
				KeysOwnerData_84 = keysOwnerData[84];
				KeysOwnerData_85 = keysOwnerData[85];
				KeysOwnerData_86 = keysOwnerData[86];
				KeysOwnerData_87 = keysOwnerData[87];
				KeysOwnerData_88 = keysOwnerData[88];
				KeysOwnerData_89 = keysOwnerData[89];
				KeysOwnerData_90 = keysOwnerData[90];
				KeysOwnerData_91 = keysOwnerData[91];
				KeysOwnerData_92 = keysOwnerData[92];
				KeysOwnerData_93 = keysOwnerData[93];
				KeysOwnerData_94 = keysOwnerData[94];
				KeysOwnerData_95 = keysOwnerData[95];
				KeysOwnerData_96 = keysOwnerData[96];
				KeysOwnerData_97 = keysOwnerData[97];
				KeysOwnerData_98 = keysOwnerData[98];
				KeysOwnerData_99 = keysOwnerData[99];
				KeysOwnerData_100 = keysOwnerData[100];
				KeysOwnerData_101 = keysOwnerData[101];
				KeysOwnerData_102 = keysOwnerData[102];
				KeysOwnerData_103 = keysOwnerData[103];
				KeysOwnerData_104 = keysOwnerData[104];
				KeysOwnerData_105 = keysOwnerData[105];
				KeysOwnerData_106 = keysOwnerData[106];
				KeysOwnerData_107 = keysOwnerData[107];
				KeysOwnerData_108 = keysOwnerData[108];
				KeysOwnerData_109 = keysOwnerData[109];
				KeysOwnerData_110 = keysOwnerData[110];
				KeysOwnerData_111 = keysOwnerData[111];
				KeysOwnerData_112 = keysOwnerData[112];
				KeysOwnerData_113 = keysOwnerData[113];
				KeysOwnerData_114 = keysOwnerData[114];
				KeysOwnerData_115 = keysOwnerData[115];
				KeysOwnerData_116 = keysOwnerData[116];
				KeysOwnerData_117 = keysOwnerData[117];
				KeysOwnerData_118 = keysOwnerData[118];
				KeysOwnerData_119 = keysOwnerData[119];
				KeysOwnerData_120 = keysOwnerData[120];
				KeysOwnerData_121 = keysOwnerData[121];
				KeysOwnerData_122 = keysOwnerData[122];
				KeysOwnerData_123 = keysOwnerData[123];
				KeysOwnerData_124 = keysOwnerData[124];
				KeysOwnerData_125 = keysOwnerData[125];
				KeysOwnerData_126 = keysOwnerData[126];
				KeysOwnerData_127 = keysOwnerData[127];
				KeysOwnerData_128 = keysOwnerData[128];
				KeysOwnerData_129 = keysOwnerData[129];
				KeysOwnerData_130 = keysOwnerData[130];
				KeysOwnerData_131 = keysOwnerData[131];
				KeysOwnerData_132 = keysOwnerData[132];
				KeysOwnerData_133 = keysOwnerData[133];
				KeysOwnerData_134 = keysOwnerData[134];
				KeysOwnerData_135 = keysOwnerData[135];
				KeysOwnerData_136 = keysOwnerData[136];
				KeysOwnerData_137 = keysOwnerData[137];
				KeysOwnerData_138 = keysOwnerData[138];
				KeysOwnerData_139 = keysOwnerData[139];
				KeysOwnerData_140 = keysOwnerData[140];
				KeysOwnerData_141 = keysOwnerData[141];
				KeysOwnerData_142 = keysOwnerData[142];
				KeysOwnerData_143 = keysOwnerData[143];
				KeysOwnerData_144 = keysOwnerData[144];
				KeysOwnerData_145 = keysOwnerData[145];
				KeysOwnerData_146 = keysOwnerData[146];
				KeysOwnerData_147 = keysOwnerData[147];
				KeysOwnerData_148 = keysOwnerData[148];
				KeysOwnerData_149 = keysOwnerData[149];
				KeysOwnerData_150 = keysOwnerData[150];
				KeysOwnerData_151 = keysOwnerData[151];
				KeysOwnerData_152 = keysOwnerData[152];
				KeysOwnerData_153 = keysOwnerData[153];
			}
			KeysRoutingTable = keysRoutingTable;
			ActiveIdUsingNavDirMask = activeIdUsingNavDirMask;
			ActiveIdUsingAllKeyboardKeys = activeIdUsingAllKeyboardKeys ? (byte)1 : (byte)0;
			DebugBreakInShortcutRouting = debugBreakInShortcutRouting;
			CurrentFocusScopeId = currentFocusScopeId;
			CurrentItemFlags = currentItemFlags;
			DebugLocateId = debugLocateId;
			NextItemData = nextItemData;
			LastItemData = lastItemData;
			NextWindowData = nextWindowData;
			DebugShowGroupRects = debugShowGroupRects ? (byte)1 : (byte)0;
			DebugFlashStyleColorIdx = debugFlashStyleColorIdx;
			ColorStack = colorStack;
			StyleVarStack = styleVarStack;
			FontStack = fontStack;
			FocusScopeStack = focusScopeStack;
			ItemFlagsStack = itemFlagsStack;
			GroupStack = groupStack;
			OpenPopupStack = openPopupStack;
			BeginPopupStack = beginPopupStack;
			TreeNodeStack = treeNodeStack;
			Viewports = viewports;
			CurrentViewport = currentViewport;
			MouseViewport = mouseViewport;
			MouseLastHoveredViewport = mouseLastHoveredViewport;
			PlatformLastFocusedViewportId = platformLastFocusedViewportId;
			FallbackMonitor = fallbackMonitor;
			PlatformMonitorsFullWorkRect = platformMonitorsFullWorkRect;
			ViewportCreatedCount = viewportCreatedCount;
			PlatformWindowsCreatedCount = platformWindowsCreatedCount;
			ViewportFocusedStampCount = viewportFocusedStampCount;
			NavWindow = navWindow;
			NavId = navId;
			NavFocusScopeId = navFocusScopeId;
			NavLayer = navLayer;
			NavActivateId = navActivateId;
			NavActivateDownId = navActivateDownId;
			NavActivatePressedId = navActivatePressedId;
			NavActivateFlags = navActivateFlags;
			NavFocusRoute = navFocusRoute;
			NavHighlightActivatedId = navHighlightActivatedId;
			NavHighlightActivatedTimer = navHighlightActivatedTimer;
			NavNextActivateId = navNextActivateId;
			NavNextActivateFlags = navNextActivateFlags;
			NavInputSource = navInputSource;
			NavLastValidSelectionUserData = navLastValidSelectionUserData;
			NavIdIsAlive = navIdIsAlive ? (byte)1 : (byte)0;
			NavMousePosDirty = navMousePosDirty ? (byte)1 : (byte)0;
			NavDisableHighlight = navDisableHighlight ? (byte)1 : (byte)0;
			NavDisableMouseHover = navDisableMouseHover ? (byte)1 : (byte)0;
			NavAnyRequest = navAnyRequest ? (byte)1 : (byte)0;
			NavInitRequest = navInitRequest ? (byte)1 : (byte)0;
			NavInitRequestFromMove = navInitRequestFromMove ? (byte)1 : (byte)0;
			NavInitResult = navInitResult;
			NavMoveSubmitted = navMoveSubmitted ? (byte)1 : (byte)0;
			NavMoveScoringItems = navMoveScoringItems ? (byte)1 : (byte)0;
			NavMoveForwardToNextFrame = navMoveForwardToNextFrame ? (byte)1 : (byte)0;
			NavMoveFlags = navMoveFlags;
			NavMoveScrollFlags = navMoveScrollFlags;
			NavMoveKeyMods = navMoveKeyMods;
			NavMoveDir = navMoveDir;
			NavMoveDirForDebug = navMoveDirForDebug;
			NavMoveClipDir = navMoveClipDir;
			NavScoringRect = navScoringRect;
			NavScoringNoClipRect = navScoringNoClipRect;
			NavScoringDebugCount = navScoringDebugCount;
			NavTabbingDir = navTabbingDir;
			NavTabbingCounter = navTabbingCounter;
			NavMoveResultLocal = navMoveResultLocal;
			NavMoveResultLocalVisible = navMoveResultLocalVisible;
			NavMoveResultOther = navMoveResultOther;
			NavTabbingResultFirst = navTabbingResultFirst;
			NavJustMovedFromFocusScopeId = navJustMovedFromFocusScopeId;
			NavJustMovedToId = navJustMovedToId;
			NavJustMovedToFocusScopeId = navJustMovedToFocusScopeId;
			NavJustMovedToKeyMods = navJustMovedToKeyMods;
			NavJustMovedToIsTabbing = navJustMovedToIsTabbing ? (byte)1 : (byte)0;
			NavJustMovedToHasSelectionData = navJustMovedToHasSelectionData ? (byte)1 : (byte)0;
			ConfigNavWindowingKeyNext = configNavWindowingKeyNext;
			ConfigNavWindowingKeyPrev = configNavWindowingKeyPrev;
			NavWindowingTarget = navWindowingTarget;
			NavWindowingTargetAnim = navWindowingTargetAnim;
			NavWindowingListWindow = navWindowingListWindow;
			NavWindowingTimer = navWindowingTimer;
			NavWindowingHighlightAlpha = navWindowingHighlightAlpha;
			NavWindowingToggleLayer = navWindowingToggleLayer ? (byte)1 : (byte)0;
			NavWindowingToggleKey = navWindowingToggleKey;
			NavWindowingAccumDeltaPos = navWindowingAccumDeltaPos;
			NavWindowingAccumDeltaSize = navWindowingAccumDeltaSize;
			DimBgRatio = dimBgRatio;
			DragDropActive = dragDropActive ? (byte)1 : (byte)0;
			DragDropWithinSource = dragDropWithinSource ? (byte)1 : (byte)0;
			DragDropWithinTarget = dragDropWithinTarget ? (byte)1 : (byte)0;
			DragDropSourceFlags = dragDropSourceFlags;
			DragDropSourceFrameCount = dragDropSourceFrameCount;
			DragDropMouseButton = dragDropMouseButton;
			DragDropPayload = dragDropPayload;
			DragDropTargetRect = dragDropTargetRect;
			DragDropTargetClipRect = dragDropTargetClipRect;
			DragDropTargetId = dragDropTargetId;
			DragDropAcceptFlags = dragDropAcceptFlags;
			DragDropAcceptIdCurrRectSurface = dragDropAcceptIdCurrRectSurface;
			DragDropAcceptIdCurr = dragDropAcceptIdCurr;
			DragDropAcceptIdPrev = dragDropAcceptIdPrev;
			DragDropAcceptFrameCount = dragDropAcceptFrameCount;
			DragDropHoldJustPressedId = dragDropHoldJustPressedId;
			DragDropPayloadBufHeap = dragDropPayloadBufHeap;
			if (dragDropPayloadBufLocal != default(Span<byte>))
			{
				DragDropPayloadBufLocal_0 = dragDropPayloadBufLocal[0];
				DragDropPayloadBufLocal_1 = dragDropPayloadBufLocal[1];
				DragDropPayloadBufLocal_2 = dragDropPayloadBufLocal[2];
				DragDropPayloadBufLocal_3 = dragDropPayloadBufLocal[3];
				DragDropPayloadBufLocal_4 = dragDropPayloadBufLocal[4];
				DragDropPayloadBufLocal_5 = dragDropPayloadBufLocal[5];
				DragDropPayloadBufLocal_6 = dragDropPayloadBufLocal[6];
				DragDropPayloadBufLocal_7 = dragDropPayloadBufLocal[7];
				DragDropPayloadBufLocal_8 = dragDropPayloadBufLocal[8];
				DragDropPayloadBufLocal_9 = dragDropPayloadBufLocal[9];
				DragDropPayloadBufLocal_10 = dragDropPayloadBufLocal[10];
				DragDropPayloadBufLocal_11 = dragDropPayloadBufLocal[11];
				DragDropPayloadBufLocal_12 = dragDropPayloadBufLocal[12];
				DragDropPayloadBufLocal_13 = dragDropPayloadBufLocal[13];
				DragDropPayloadBufLocal_14 = dragDropPayloadBufLocal[14];
				DragDropPayloadBufLocal_15 = dragDropPayloadBufLocal[15];
			}
			ClipperTempDataStacked = clipperTempDataStacked;
			ClipperTempData = clipperTempData;
			CurrentTable = currentTable;
			DebugBreakInTable = debugBreakInTable;
			TablesTempDataStacked = tablesTempDataStacked;
			TablesTempData = tablesTempData;
			Tables = tables;
			TablesLastTimeActive = tablesLastTimeActive;
			DrawChannelsTempMergeBuffer = drawChannelsTempMergeBuffer;
			CurrentTabBar = currentTabBar;
			TabBars = tabBars;
			CurrentTabBarStack = currentTabBarStack;
			ShrinkWidthBuffer = shrinkWidthBuffer;
			BoxSelectState = boxSelectState;
			CurrentMultiSelect = currentMultiSelect;
			MultiSelectTempDataStacked = multiSelectTempDataStacked;
			MultiSelectTempData = multiSelectTempData;
			MultiSelectStorage = multiSelectStorage;
			HoverItemDelayId = hoverItemDelayId;
			HoverItemDelayIdPreviousFrame = hoverItemDelayIdPreviousFrame;
			HoverItemDelayTimer = hoverItemDelayTimer;
			HoverItemDelayClearTimer = hoverItemDelayClearTimer;
			HoverItemUnlockedStationaryId = hoverItemUnlockedStationaryId;
			HoverWindowUnlockedStationaryId = hoverWindowUnlockedStationaryId;
			MouseCursor = mouseCursor;
			MouseStationaryTimer = mouseStationaryTimer;
			MouseLastValidPos = mouseLastValidPos;
			InputTextState = inputTextState;
			InputTextDeactivatedState = inputTextDeactivatedState;
			InputTextPasswordFont = inputTextPasswordFont;
			TempInputId = tempInputId;
			DataTypeZeroValue = dataTypeZeroValue;
			BeginMenuDepth = beginMenuDepth;
			BeginComboDepth = beginComboDepth;
			ColorEditOptions = colorEditOptions;
			ColorEditCurrentID = colorEditCurrentId;
			ColorEditSavedID = colorEditSavedId;
			ColorEditSavedHue = colorEditSavedHue;
			ColorEditSavedSat = colorEditSavedSat;
			ColorEditSavedColor = colorEditSavedColor;
			ColorPickerRef = colorPickerRef;
			ComboPreviewData = comboPreviewData;
			WindowResizeBorderExpectedRect = windowResizeBorderExpectedRect;
			WindowResizeRelativeMode = windowResizeRelativeMode ? (byte)1 : (byte)0;
			ScrollbarSeekMode = scrollbarSeekMode;
			ScrollbarClickDeltaToGrabCenter = scrollbarClickDeltaToGrabCenter;
			SliderGrabClickOffset = sliderGrabClickOffset;
			SliderCurrentAccum = sliderCurrentAccum;
			SliderCurrentAccumDirty = sliderCurrentAccumDirty ? (byte)1 : (byte)0;
			DragCurrentAccumDirty = dragCurrentAccumDirty ? (byte)1 : (byte)0;
			DragCurrentAccum = dragCurrentAccum;
			DragSpeedDefaultRatio = dragSpeedDefaultRatio;
			DisabledAlphaBackup = disabledAlphaBackup;
			DisabledStackSize = disabledStackSize;
			LockMarkEdited = lockMarkEdited;
			TooltipOverrideCount = tooltipOverrideCount;
			ClipboardHandlerData = clipboardHandlerData;
			MenusIdSubmittedThisFrame = menusIdSubmittedThisFrame;
			TypingSelectState = typingSelectState;
			PlatformImeData = platformImeData;
			PlatformImeDataPrev = platformImeDataPrev;
			PlatformImeViewport = platformImeViewport;
			DockContext = dockContext;
			DockNodeWindowMenuHandler = (void*)dockNodeWindowMenuHandler;
			SettingsLoaded = settingsLoaded ? (byte)1 : (byte)0;
			SettingsDirtyTimer = settingsDirtyTimer;
			SettingsIniData = settingsIniData;
			SettingsHandlers = settingsHandlers;
			SettingsWindows = settingsWindows;
			SettingsTables = settingsTables;
			Hooks = hooks;
			HookIdNext = hookIdNext;
			if (localizationTable != default(Span<Pointer<byte>>))
			{
				LocalizationTable_0 = localizationTable[0];
				LocalizationTable_1 = localizationTable[1];
				LocalizationTable_2 = localizationTable[2];
				LocalizationTable_3 = localizationTable[3];
				LocalizationTable_4 = localizationTable[4];
				LocalizationTable_5 = localizationTable[5];
				LocalizationTable_6 = localizationTable[6];
				LocalizationTable_7 = localizationTable[7];
				LocalizationTable_8 = localizationTable[8];
				LocalizationTable_9 = localizationTable[9];
				LocalizationTable_10 = localizationTable[10];
				LocalizationTable_11 = localizationTable[11];
			}
			LogEnabled = logEnabled ? (byte)1 : (byte)0;
			LogType = logType;
			LogFile = logFile;
			LogBuffer = logBuffer;
			LogNextPrefix = logNextPrefix;
			LogNextSuffix = logNextSuffix;
			LogLinePosY = logLinePosY;
			LogLineFirstItem = logLineFirstItem ? (byte)1 : (byte)0;
			LogDepthRef = logDepthRef;
			LogDepthToExpand = logDepthToExpand;
			LogDepthToExpandDefault = logDepthToExpandDefault;
			DebugLogFlags = debugLogFlags;
			DebugLogBuf = debugLogBuf;
			DebugLogIndex = debugLogIndex;
			DebugLogAutoDisableFlags = debugLogAutoDisableFlags;
			DebugLogAutoDisableFrames = debugLogAutoDisableFrames;
			DebugLocateFrames = debugLocateFrames;
			DebugBreakInLocateId = debugBreakInLocateId ? (byte)1 : (byte)0;
			DebugBreakKeyChord = debugBreakKeyChord;
			DebugBeginReturnValueCullDepth = debugBeginReturnValueCullDepth;
			DebugItemPickerActive = debugItemPickerActive ? (byte)1 : (byte)0;
			DebugItemPickerMouseButton = debugItemPickerMouseButton;
			DebugItemPickerBreakId = debugItemPickerBreakId;
			DebugFlashStyleColorTime = debugFlashStyleColorTime;
			DebugFlashStyleColorBackup = debugFlashStyleColorBackup;
			DebugMetricsConfig = debugMetricsConfig;
			DebugIDStackTool = debugIdStackTool;
			DebugAllocInfo = debugAllocInfo;
			DebugHoveredDockNode = debugHoveredDockNode;
			if (framerateSecPerFrame != default(Span<float>))
			{
				FramerateSecPerFrame_0 = framerateSecPerFrame[0];
				FramerateSecPerFrame_1 = framerateSecPerFrame[1];
				FramerateSecPerFrame_2 = framerateSecPerFrame[2];
				FramerateSecPerFrame_3 = framerateSecPerFrame[3];
				FramerateSecPerFrame_4 = framerateSecPerFrame[4];
				FramerateSecPerFrame_5 = framerateSecPerFrame[5];
				FramerateSecPerFrame_6 = framerateSecPerFrame[6];
				FramerateSecPerFrame_7 = framerateSecPerFrame[7];
				FramerateSecPerFrame_8 = framerateSecPerFrame[8];
				FramerateSecPerFrame_9 = framerateSecPerFrame[9];
				FramerateSecPerFrame_10 = framerateSecPerFrame[10];
				FramerateSecPerFrame_11 = framerateSecPerFrame[11];
				FramerateSecPerFrame_12 = framerateSecPerFrame[12];
				FramerateSecPerFrame_13 = framerateSecPerFrame[13];
				FramerateSecPerFrame_14 = framerateSecPerFrame[14];
				FramerateSecPerFrame_15 = framerateSecPerFrame[15];
				FramerateSecPerFrame_16 = framerateSecPerFrame[16];
				FramerateSecPerFrame_17 = framerateSecPerFrame[17];
				FramerateSecPerFrame_18 = framerateSecPerFrame[18];
				FramerateSecPerFrame_19 = framerateSecPerFrame[19];
				FramerateSecPerFrame_20 = framerateSecPerFrame[20];
				FramerateSecPerFrame_21 = framerateSecPerFrame[21];
				FramerateSecPerFrame_22 = framerateSecPerFrame[22];
				FramerateSecPerFrame_23 = framerateSecPerFrame[23];
				FramerateSecPerFrame_24 = framerateSecPerFrame[24];
				FramerateSecPerFrame_25 = framerateSecPerFrame[25];
				FramerateSecPerFrame_26 = framerateSecPerFrame[26];
				FramerateSecPerFrame_27 = framerateSecPerFrame[27];
				FramerateSecPerFrame_28 = framerateSecPerFrame[28];
				FramerateSecPerFrame_29 = framerateSecPerFrame[29];
				FramerateSecPerFrame_30 = framerateSecPerFrame[30];
				FramerateSecPerFrame_31 = framerateSecPerFrame[31];
				FramerateSecPerFrame_32 = framerateSecPerFrame[32];
				FramerateSecPerFrame_33 = framerateSecPerFrame[33];
				FramerateSecPerFrame_34 = framerateSecPerFrame[34];
				FramerateSecPerFrame_35 = framerateSecPerFrame[35];
				FramerateSecPerFrame_36 = framerateSecPerFrame[36];
				FramerateSecPerFrame_37 = framerateSecPerFrame[37];
				FramerateSecPerFrame_38 = framerateSecPerFrame[38];
				FramerateSecPerFrame_39 = framerateSecPerFrame[39];
				FramerateSecPerFrame_40 = framerateSecPerFrame[40];
				FramerateSecPerFrame_41 = framerateSecPerFrame[41];
				FramerateSecPerFrame_42 = framerateSecPerFrame[42];
				FramerateSecPerFrame_43 = framerateSecPerFrame[43];
				FramerateSecPerFrame_44 = framerateSecPerFrame[44];
				FramerateSecPerFrame_45 = framerateSecPerFrame[45];
				FramerateSecPerFrame_46 = framerateSecPerFrame[46];
				FramerateSecPerFrame_47 = framerateSecPerFrame[47];
				FramerateSecPerFrame_48 = framerateSecPerFrame[48];
				FramerateSecPerFrame_49 = framerateSecPerFrame[49];
				FramerateSecPerFrame_50 = framerateSecPerFrame[50];
				FramerateSecPerFrame_51 = framerateSecPerFrame[51];
				FramerateSecPerFrame_52 = framerateSecPerFrame[52];
				FramerateSecPerFrame_53 = framerateSecPerFrame[53];
				FramerateSecPerFrame_54 = framerateSecPerFrame[54];
				FramerateSecPerFrame_55 = framerateSecPerFrame[55];
				FramerateSecPerFrame_56 = framerateSecPerFrame[56];
				FramerateSecPerFrame_57 = framerateSecPerFrame[57];
				FramerateSecPerFrame_58 = framerateSecPerFrame[58];
				FramerateSecPerFrame_59 = framerateSecPerFrame[59];
			}
			FramerateSecPerFrameIdx = framerateSecPerFrameIdx;
			FramerateSecPerFrameCount = framerateSecPerFrameCount;
			FramerateSecPerFrameAccum = framerateSecPerFrameAccum;
			WantCaptureMouseNextFrame = wantCaptureMouseNextFrame;
			WantCaptureKeyboardNextFrame = wantCaptureKeyboardNextFrame;
			WantTextInputNextFrame = wantTextInputNextFrame;
			TempBuffer = tempBuffer;
			if (tempKeychordName != default(Span<byte>))
			{
				TempKeychordName_0 = tempKeychordName[0];
				TempKeychordName_1 = tempKeychordName[1];
				TempKeychordName_2 = tempKeychordName[2];
				TempKeychordName_3 = tempKeychordName[3];
				TempKeychordName_4 = tempKeychordName[4];
				TempKeychordName_5 = tempKeychordName[5];
				TempKeychordName_6 = tempKeychordName[6];
				TempKeychordName_7 = tempKeychordName[7];
				TempKeychordName_8 = tempKeychordName[8];
				TempKeychordName_9 = tempKeychordName[9];
				TempKeychordName_10 = tempKeychordName[10];
				TempKeychordName_11 = tempKeychordName[11];
				TempKeychordName_12 = tempKeychordName[12];
				TempKeychordName_13 = tempKeychordName[13];
				TempKeychordName_14 = tempKeychordName[14];
				TempKeychordName_15 = tempKeychordName[15];
				TempKeychordName_16 = tempKeychordName[16];
				TempKeychordName_17 = tempKeychordName[17];
				TempKeychordName_18 = tempKeychordName[18];
				TempKeychordName_19 = tempKeychordName[19];
				TempKeychordName_20 = tempKeychordName[20];
				TempKeychordName_21 = tempKeychordName[21];
				TempKeychordName_22 = tempKeychordName[22];
				TempKeychordName_23 = tempKeychordName[23];
				TempKeychordName_24 = tempKeychordName[24];
				TempKeychordName_25 = tempKeychordName[25];
				TempKeychordName_26 = tempKeychordName[26];
				TempKeychordName_27 = tempKeychordName[27];
				TempKeychordName_28 = tempKeychordName[28];
				TempKeychordName_29 = tempKeychordName[29];
				TempKeychordName_30 = tempKeychordName[30];
				TempKeychordName_31 = tempKeychordName[31];
				TempKeychordName_32 = tempKeychordName[32];
				TempKeychordName_33 = tempKeychordName[33];
				TempKeychordName_34 = tempKeychordName[34];
				TempKeychordName_35 = tempKeychordName[35];
				TempKeychordName_36 = tempKeychordName[36];
				TempKeychordName_37 = tempKeychordName[37];
				TempKeychordName_38 = tempKeychordName[38];
				TempKeychordName_39 = tempKeychordName[39];
				TempKeychordName_40 = tempKeychordName[40];
				TempKeychordName_41 = tempKeychordName[41];
				TempKeychordName_42 = tempKeychordName[42];
				TempKeychordName_43 = tempKeychordName[43];
				TempKeychordName_44 = tempKeychordName[44];
				TempKeychordName_45 = tempKeychordName[45];
				TempKeychordName_46 = tempKeychordName[46];
				TempKeychordName_47 = tempKeychordName[47];
				TempKeychordName_48 = tempKeychordName[48];
				TempKeychordName_49 = tempKeychordName[49];
				TempKeychordName_50 = tempKeychordName[50];
				TempKeychordName_51 = tempKeychordName[51];
				TempKeychordName_52 = tempKeychordName[52];
				TempKeychordName_53 = tempKeychordName[53];
				TempKeychordName_54 = tempKeychordName[54];
				TempKeychordName_55 = tempKeychordName[55];
				TempKeychordName_56 = tempKeychordName[56];
				TempKeychordName_57 = tempKeychordName[57];
				TempKeychordName_58 = tempKeychordName[58];
				TempKeychordName_59 = tempKeychordName[59];
				TempKeychordName_60 = tempKeychordName[60];
				TempKeychordName_61 = tempKeychordName[61];
				TempKeychordName_62 = tempKeychordName[62];
				TempKeychordName_63 = tempKeychordName[63];
			}
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<ImGuiKeyOwnerData> KeysOwnerData
		
		{
			get
			{
				fixed (ImGuiKeyOwnerData* p = &this.KeysOwnerData_0)
				{
					return new Span<ImGuiKeyOwnerData>(p, 154);
				}
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Pointer<byte>> LocalizationTable
		
		{
			get
			{
				fixed (byte** p = &this.LocalizationTable_0)
				{
					return new Span<Pointer<byte>>(p, 12);
				}
			}
		}
	}

}
