// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiNextItemData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiNextItemData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "ImGuiNextItemDataFlags")]
		public ImGuiNextItemDataFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ItemFlags")]
		[NativeName(NativeNameType.Type, "ImGuiItemFlags")]
		public ImGuiItemFlags ItemFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FocusScopeId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint FocusScopeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SelectionUserData")]
		[NativeName(NativeNameType.Type, "ImGuiSelectionUserData")]
		public long SelectionUserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "float")]
		public float Width;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Shortcut")]
		[NativeName(NativeNameType.Type, "ImGuiKeyChord")]
		public int Shortcut;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ShortcutFlags")]
		[NativeName(NativeNameType.Type, "ImGuiInputFlags")]
		public ImGuiInputFlags ShortcutFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OpenVal")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte OpenVal;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OpenCond")]
		[NativeName(NativeNameType.Type, "ImU8")]
		public byte OpenCond;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RefVal")]
		[NativeName(NativeNameType.Type, "ImGuiDataTypeStorage")]
		public ImGuiDataTypeStorage RefVal;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "StorageId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint StorageId;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiNextItemData(ImGuiNextItemDataFlags flags = default, ImGuiItemFlags itemFlags = default, uint focusScopeId = default, long selectionUserData = default, float width = default, int shortcut = default, ImGuiInputFlags shortcutFlags = default, bool openVal = default, byte openCond = default, ImGuiDataTypeStorage refVal = default, uint storageId = default)
		{
			Flags = flags;
			ItemFlags = itemFlags;
			FocusScopeId = focusScopeId;
			SelectionUserData = selectionUserData;
			Width = width;
			Shortcut = shortcut;
			ShortcutFlags = shortcutFlags;
			OpenVal = openVal ? (byte)1 : (byte)0;
			OpenCond = openCond;
			RefVal = refVal;
			StorageId = storageId;
		}


	}

}
