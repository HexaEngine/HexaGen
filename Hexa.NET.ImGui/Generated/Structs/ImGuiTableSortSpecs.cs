// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Sorting specifications for a table (often handling sort specs for a single column, occasionally more)<br/>
	/// Obtained by calling TableGetSortSpecs().<br/>
	/// When 'SpecsDirty == true' you can sort your data. It will be true with sorting specs have changed since last call, or the first time.<br/>
	/// Make sure to set 'SpecsDirty = false' after sorting, else you may wastefully sort your data every frame!<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiTableSortSpecs")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableSortSpecs
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Specs")]
		[NativeName(NativeNameType.Type, "const ImGuiTableColumnSortSpecs*")]
		public unsafe ImGuiTableColumnSortSpecs* Specs;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SpecsCount")]
		[NativeName(NativeNameType.Type, "int")]
		public int SpecsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SpecsDirty")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte SpecsDirty;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiTableSortSpecs(ImGuiTableColumnSortSpecs* specs = default, int specsCount = default, bool specsDirty = default)
		{
			Specs = specs;
			SpecsCount = specsCount;
			SpecsDirty = specsDirty ? (byte)1 : (byte)0;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableSortSpecs_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiTableSortSpecs* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

}
