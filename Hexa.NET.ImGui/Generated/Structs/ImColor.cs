// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Helpers: ImVec2ImVec4 operators<br/>
	/// - It is important that we are keeping those disabled by default so they don't leak in user space.<br/>
	/// - This is in order to allow user enabling implicit cast operators between ImVec2ImVec4 and their own types (using IM_VEC2_CLASS_EXTRA in imconfig.h)<br/>
	/// - You can use '#define IMGUI_DEFINE_MATH_OPERATORS' to import our operators, provided as a courtesy.<br/>
	/// Helpers macros to generate 32-bit encoded colors<br/>
	/// User can declare their own format by #defining the 5 _SHIFT_MASK macros in their imconfig file.<br/>
	/// Helper: ImColor() implicitly converts colors to either ImU32 (packed 4x1 byte) or ImVec4 (4x1 float)<br/>
	/// Prefer using IM_COL32() macros if you want a guaranteed compile-time ImU32 for usage with ImDrawList API.<br/>
	/// **Avoid storing ImColor! Store either u32 of ImVec4. This is not a full-featured color class. MAY OBSOLETE.<br/>
	/// **None of the ImGui API are using ImColor directly but you can use it as a convenience to pass colors in either ImU32 or ImVec4 formats. Explicitly cast to ImU32 or ImVec4 if needed.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImColor")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImColor
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Value")]
		[NativeName(NativeNameType.Type, "ImVec4")]
		public Vector4 Value;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImColor(Vector4 value = default)
		{
			Value = value;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImColor* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_HSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void HSV([NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "float")] float a)
		{
			fixed (ImColor* @this = &this)
			{
				ImGui.HSVNative(@this, h, s, v, a);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_HSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void HSV([NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v)
		{
			fixed (ImColor* @this = &this)
			{
				ImGui.HSVNative(@this, h, s, v, (float)(1.0f));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_SetHSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetHSV([NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "float")] float a)
		{
			fixed (ImColor* @this = &this)
			{
				ImGui.SetHSVNative(@this, h, s, v, a);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_SetHSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void SetHSV([NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v)
		{
			fixed (ImColor* @this = &this)
			{
				ImGui.SetHSVNative(@this, h, s, v, (float)(1.0f));
			}
		}

	}

}
