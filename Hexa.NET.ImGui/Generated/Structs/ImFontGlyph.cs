// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Hold rendering data for one glyph.<br/>
	/// (Note: some language parsers may fail to convert the 31+1 bitfield members, in this case maybe drop store a single u32 or we can rework this)<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImFontGlyph")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontGlyph
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Colored")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Colored;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Visible")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Visible;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Codepoint")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Codepoint;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AdvanceX")]
		[NativeName(NativeNameType.Type, "float")]
		public float AdvanceX;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "X0")]
		[NativeName(NativeNameType.Type, "float")]
		public float X0;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Y0")]
		[NativeName(NativeNameType.Type, "float")]
		public float Y0;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "X1")]
		[NativeName(NativeNameType.Type, "float")]
		public float X1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Y1")]
		[NativeName(NativeNameType.Type, "float")]
		public float Y1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "U0")]
		[NativeName(NativeNameType.Type, "float")]
		public float U0;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "V0")]
		[NativeName(NativeNameType.Type, "float")]
		public float V0;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "U1")]
		[NativeName(NativeNameType.Type, "float")]
		public float U1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "V1")]
		[NativeName(NativeNameType.Type, "float")]
		public float V1;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImFontGlyph(uint colored = default, uint visible = default, uint codepoint = default, float advanceX = default, float x0 = default, float y0 = default, float x1 = default, float y1 = default, float u0 = default, float v0 = default, float u1 = default, float v1 = default)
		{
			Colored = colored;
			Visible = visible;
			Codepoint = codepoint;
			AdvanceX = advanceX;
			X0 = x0;
			Y0 = y0;
			X1 = x1;
			Y1 = y1;
			U0 = u0;
			V0 = v0;
			U1 = u1;
			V1 = v1;
		}


	}

}
