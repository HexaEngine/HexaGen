// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImDrawDataBuilder")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawDataBuilder
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Layers")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawListPtr*[2]")]
		public unsafe ImVectorImDrawListPtr* Layers_0;
		public unsafe ImVectorImDrawListPtr* Layers_1;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "LayerData1")]
		[NativeName(NativeNameType.Type, "ImVector_ImDrawListPtr")]
		public ImVectorImDrawListPtr LayerData1;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImDrawDataBuilder(ImVectorImDrawListPtr** layers = default, ImVectorImDrawListPtr layerData1 = default)
		{
			if (layers != default(ImVectorImDrawListPtr**))
			{
				Layers_0 = layers[0];
				Layers_1 = layers[1];
			}
			LayerData1 = layerData1;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImDrawDataBuilder(Span<Pointer<ImVectorImDrawListPtr>> layers = default, ImVectorImDrawListPtr layerData1 = default)
		{
			if (layers != default(Span<Pointer<ImVectorImDrawListPtr>>))
			{
				Layers_0 = layers[0];
				Layers_1 = layers[1];
			}
			LayerData1 = layerData1;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Pointer<ImVectorImDrawListPtr>> Layers
		
		{
			get
			{
				fixed (ImVectorImDrawListPtr** p = &this.Layers_0)
				{
					return new Span<Pointer<ImVectorImDrawListPtr>>(p, 2);
				}
			}
		}
	}

}
