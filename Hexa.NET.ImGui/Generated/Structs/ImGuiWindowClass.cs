// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// [ALPHA] Rarely used  very advanced uses only. Use with SetNextWindowClass() and DockSpace() functions.<br/>
	/// Important: the content of this class is still highly WIP and likely to change and be refactored<br/>
	/// before we stabilize Docking features. Please be mindful if using this.<br/>
	/// Provide hints:<br/>
	/// - To the platform backend via altered viewport flags (enabledisable OS decoration, OS task bar icons, etc.)<br/>
	/// - To the platform backend for OS level parentchild relationships of viewport.<br/>
	/// - To the docking system for various options and filtering.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "ImGuiWindowClass")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiWindowClass
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ClassId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint ClassId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ParentViewportId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint ParentViewportId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FocusRouteParentWindowId")]
		[NativeName(NativeNameType.Type, "ImGuiID")]
		public uint FocusRouteParentWindowId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportFlagsOverrideSet")]
		[NativeName(NativeNameType.Type, "ImGuiViewportFlags")]
		public ImGuiViewportFlags ViewportFlagsOverrideSet;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ViewportFlagsOverrideClear")]
		[NativeName(NativeNameType.Type, "ImGuiViewportFlags")]
		public ImGuiViewportFlags ViewportFlagsOverrideClear;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TabItemFlagsOverrideSet")]
		[NativeName(NativeNameType.Type, "ImGuiTabItemFlags")]
		public ImGuiTabItemFlags TabItemFlagsOverrideSet;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockNodeFlagsOverrideSet")]
		[NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")]
		public ImGuiDockNodeFlags DockNodeFlagsOverrideSet;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockingAlwaysTabBar")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DockingAlwaysTabBar;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DockingAllowUnclassed")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DockingAllowUnclassed;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindowClass(uint classId = default, uint parentViewportId = default, uint focusRouteParentWindowId = default, ImGuiViewportFlags viewportFlagsOverrideSet = default, ImGuiViewportFlags viewportFlagsOverrideClear = default, ImGuiTabItemFlags tabItemFlagsOverrideSet = default, ImGuiDockNodeFlags dockNodeFlagsOverrideSet = default, bool dockingAlwaysTabBar = default, bool dockingAllowUnclassed = default)
		{
			ClassId = classId;
			ParentViewportId = parentViewportId;
			FocusRouteParentWindowId = focusRouteParentWindowId;
			ViewportFlagsOverrideSet = viewportFlagsOverrideSet;
			ViewportFlagsOverrideClear = viewportFlagsOverrideClear;
			TabItemFlagsOverrideSet = tabItemFlagsOverrideSet;
			DockNodeFlagsOverrideSet = dockNodeFlagsOverrideSet;
			DockingAlwaysTabBar = dockingAlwaysTabBar ? (byte)1 : (byte)0;
			DockingAllowUnclassed = dockingAllowUnclassed ? (byte)1 : (byte)0;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiWindowClass_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public unsafe void Destroy()
		{
			fixed (ImGuiWindowClass* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

}
