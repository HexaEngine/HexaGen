// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.Enum, "ImGuiInputTextFlags_")]
	[Flags]
	public enum ImGuiInputTextFlags : int
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_None")]
		[NativeName(NativeNameType.Value, "0")]
		None = unchecked(0),

		/// <summary>
		/// Allow 0123456789.+-*<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_CharsDecimal")]
		[NativeName(NativeNameType.Value, "1")]
		CharsDecimal = unchecked(1),

		/// <summary>
		/// Allow 0123456789ABCDEFabcdef<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_CharsHexadecimal")]
		[NativeName(NativeNameType.Value, "2")]
		CharsHexadecimal = unchecked(2),

		/// <summary>
		/// Allow 0123456789.+-*eE (Scientific notation input)<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_CharsScientific")]
		[NativeName(NativeNameType.Value, "4")]
		CharsScientific = unchecked(4),

		/// <summary>
		/// Turn a..z into A..Z<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_CharsUppercase")]
		[NativeName(NativeNameType.Value, "8")]
		CharsUppercase = unchecked(8),

		/// <summary>
		/// Filter out spaces, tabs<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_CharsNoBlank")]
		[NativeName(NativeNameType.Value, "16")]
		CharsNoBlank = unchecked(16),

		/// <summary>
		/// Pressing TAB input a '\t' character into the text field<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_AllowTabInput")]
		[NativeName(NativeNameType.Value, "32")]
		AllowTabInput = unchecked(32),

		/// <summary>
		/// Return 'true' when Enter is pressed (as opposed to every time the value was modified). Consider looking at the IsItemDeactivatedAfterEdit() function.<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_EnterReturnsTrue")]
		[NativeName(NativeNameType.Value, "64")]
		EnterReturnsTrue = unchecked(64),

		/// <summary>
		/// Escape key clears content if not empty, and deactivate otherwise (contrast to default behavior of Escape to revert)<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_EscapeClearsAll")]
		[NativeName(NativeNameType.Value, "128")]
		EscapeClearsAll = unchecked(128),

		/// <summary>
		/// In multi-line mode, validate with Enter, add new line with Ctrl+Enter (default is opposite: validate with Ctrl+Enter, add line with Enter).<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_CtrlEnterForNewLine")]
		[NativeName(NativeNameType.Value, "256")]
		CtrlEnterForNewLine = unchecked(256),

		/// <summary>
		/// Read-only mode<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_ReadOnly")]
		[NativeName(NativeNameType.Value, "512")]
		ReadOnly = unchecked(512),

		/// <summary>
		/// Password mode, display all characters as '*', disable copy<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_Password")]
		[NativeName(NativeNameType.Value, "1024")]
		Password = unchecked(1024),

		/// <summary>
		/// Overwrite mode<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_AlwaysOverwrite")]
		[NativeName(NativeNameType.Value, "2048")]
		AlwaysOverwrite = unchecked(2048),

		/// <summary>
		/// Select entire text when first taking mouse focus<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_AutoSelectAll")]
		[NativeName(NativeNameType.Value, "4096")]
		AutoSelectAll = unchecked(4096),

		/// <summary>
		/// InputFloat(), InputInt(), InputScalar() etc. only: parse empty string as zero value.<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_ParseEmptyRefVal")]
		[NativeName(NativeNameType.Value, "8192")]
		ParseEmptyRefVal = unchecked(8192),

		/// <summary>
		/// InputFloat(), InputInt(), InputScalar() etc. only: when value is zero, do not display it. Generally used with ImGuiInputTextFlags_ParseEmptyRefVal.<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_DisplayEmptyRefVal")]
		[NativeName(NativeNameType.Value, "16384")]
		DisplayEmptyRefVal = unchecked(16384),

		/// <summary>
		/// Disable following the cursor horizontally<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_NoHorizontalScroll")]
		[NativeName(NativeNameType.Value, "32768")]
		NoHorizontalScroll = unchecked(32768),

		/// <summary>
		/// Disable undoredo. Note that input text owns the text data while active, if you want to provide your own undoredo stack you need e.g. to call ClearActiveID().<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_NoUndoRedo")]
		[NativeName(NativeNameType.Value, "65536")]
		NoUndoRedo = unchecked(65536),

		/// <summary>
		/// Callback on pressing TAB (for completion handling)<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_CallbackCompletion")]
		[NativeName(NativeNameType.Value, "131072")]
		CallbackCompletion = unchecked(131072),

		/// <summary>
		/// Callback on pressing UpDown arrows (for history handling)<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_CallbackHistory")]
		[NativeName(NativeNameType.Value, "262144")]
		CallbackHistory = unchecked(262144),

		/// <summary>
		/// Callback on each iteration. User code may query cursor position, modify text buffer.<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_CallbackAlways")]
		[NativeName(NativeNameType.Value, "524288")]
		CallbackAlways = unchecked(524288),

		/// <summary>
		/// Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_CallbackCharFilter")]
		[NativeName(NativeNameType.Value, "1048576")]
		CallbackCharFilter = unchecked(1048576),

		/// <summary>
		/// Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it. (see misccppimgui_stdlib.h for an example of using this)<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_CallbackResize")]
		[NativeName(NativeNameType.Value, "2097152")]
		CallbackResize = unchecked(2097152),

		/// <summary>
		/// Callback on any edit (note that InputText() already returns true on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active)<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "ImGuiInputTextFlags_CallbackEdit")]
		[NativeName(NativeNameType.Value, "4194304")]
		CallbackEdit = unchecked(4194304),
	}
}
