// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImDrawChannel
	{

		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiTypingSelectState(ImGuiTypingSelectRequest request = default, Span<byte> searchBuffer = default, uint focusScope = default, int lastRequestFrame = default, float lastRequestTime = default, bool singleCharModeLock = default)
		{
			Request = request;
			if (searchBuffer != default)
			{
				SearchBuffer_0 = searchBuffer[0];
				SearchBuffer_1 = searchBuffer[1];
				SearchBuffer_2 = searchBuffer[2];
				SearchBuffer_3 = searchBuffer[3];
				SearchBuffer_4 = searchBuffer[4];
				SearchBuffer_5 = searchBuffer[5];
				SearchBuffer_6 = searchBuffer[6];
				SearchBuffer_7 = searchBuffer[7];
				SearchBuffer_8 = searchBuffer[8];
				SearchBuffer_9 = searchBuffer[9];
				SearchBuffer_10 = searchBuffer[10];
				SearchBuffer_11 = searchBuffer[11];
				SearchBuffer_12 = searchBuffer[12];
				SearchBuffer_13 = searchBuffer[13];
				SearchBuffer_14 = searchBuffer[14];
				SearchBuffer_15 = searchBuffer[15];
				SearchBuffer_16 = searchBuffer[16];
				SearchBuffer_17 = searchBuffer[17];
				SearchBuffer_18 = searchBuffer[18];
				SearchBuffer_19 = searchBuffer[19];
				SearchBuffer_20 = searchBuffer[20];
				SearchBuffer_21 = searchBuffer[21];
				SearchBuffer_22 = searchBuffer[22];
				SearchBuffer_23 = searchBuffer[23];
				SearchBuffer_24 = searchBuffer[24];
				SearchBuffer_25 = searchBuffer[25];
				SearchBuffer_26 = searchBuffer[26];
				SearchBuffer_27 = searchBuffer[27];
				SearchBuffer_28 = searchBuffer[28];
				SearchBuffer_29 = searchBuffer[29];
				SearchBuffer_30 = searchBuffer[30];
				SearchBuffer_31 = searchBuffer[31];
				SearchBuffer_32 = searchBuffer[32];
				SearchBuffer_33 = searchBuffer[33];
				SearchBuffer_34 = searchBuffer[34];
				SearchBuffer_35 = searchBuffer[35];
				SearchBuffer_36 = searchBuffer[36];
				SearchBuffer_37 = searchBuffer[37];
				SearchBuffer_38 = searchBuffer[38];
				SearchBuffer_39 = searchBuffer[39];
				SearchBuffer_40 = searchBuffer[40];
				SearchBuffer_41 = searchBuffer[41];
				SearchBuffer_42 = searchBuffer[42];
				SearchBuffer_43 = searchBuffer[43];
				SearchBuffer_44 = searchBuffer[44];
				SearchBuffer_45 = searchBuffer[45];
				SearchBuffer_46 = searchBuffer[46];
				SearchBuffer_47 = searchBuffer[47];
				SearchBuffer_48 = searchBuffer[48];
				SearchBuffer_49 = searchBuffer[49];
				SearchBuffer_50 = searchBuffer[50];
				SearchBuffer_51 = searchBuffer[51];
				SearchBuffer_52 = searchBuffer[52];
				SearchBuffer_53 = searchBuffer[53];
				SearchBuffer_54 = searchBuffer[54];
				SearchBuffer_55 = searchBuffer[55];
				SearchBuffer_56 = searchBuffer[56];
				SearchBuffer_57 = searchBuffer[57];
				SearchBuffer_58 = searchBuffer[58];
				SearchBuffer_59 = searchBuffer[59];
				SearchBuffer_60 = searchBuffer[60];
				SearchBuffer_61 = searchBuffer[61];
				SearchBuffer_62 = searchBuffer[62];
				SearchBuffer_63 = searchBuffer[63];
			}
			FocusScope = focusScope;
			LastRequestFrame = lastRequestFrame;
			LastRequestTime = lastRequestTime;
			SingleCharModeLock = singleCharModeLock ? (byte)1 : (byte)0;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTypingSelectRequest
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public int Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int SearchBufferLen;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* SearchBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte SelectRequest;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte SingleCharMode;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte SingleCharSize;


		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiTypingSelectRequest(int flags = default, int searchBufferLen = default, byte* searchBuffer = default, bool selectRequest = default, bool singleCharMode = default, byte singleCharSize = default)
		{
			Flags = flags;
			SearchBufferLen = searchBufferLen;
			SearchBuffer = searchBuffer;
			SelectRequest = selectRequest ? (byte)1 : (byte)0;
			SingleCharMode = singleCharMode ? (byte)1 : (byte)0;
			SingleCharSize = singleCharSize;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDockContext
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiStorage Nodes;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVectorImGuiDockRequest Requests;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVectorImGuiDockNodeSettings NodesSettings;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WantFullRebuild;


		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiDockContext(ImGuiStorage nodes = default, ImVectorImGuiDockRequest requests = default, ImVectorImGuiDockNodeSettings nodesSettings = default, bool wantFullRebuild = default)
		{
			Nodes = nodes;
			Requests = requests;
			NodesSettings = nodesSettings;
			WantFullRebuild = wantFullRebuild ? (byte)1 : (byte)0;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiDockRequest
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiDockRequest* Data;


		/// <summary>/// To be documented./// </summary>		public unsafe ImVectorImGuiDockRequest(int size = default, int capacity = default, ImGuiDockRequest* data = default)
		{
			Size = size;
			Capacity = capacity;
			Data = data;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDockRequest
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiDockNodeSettings
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiDockNodeSettings* Data;


		/// <summary>/// To be documented./// </summary>		public unsafe ImVectorImGuiDockNodeSettings(int size = default, int capacity = default, ImGuiDockNodeSettings* data = default)
		{
			Size = size;
			Capacity = capacity;
			Data = data;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDockNodeSettings
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiSettingsHandler
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiSettingsHandler* Data;


		/// <summary>/// To be documented./// </summary>		public unsafe ImVectorImGuiSettingsHandler(int size = default, int capacity = default, ImGuiSettingsHandler* data = default)
		{
			Size = size;
			Capacity = capacity;
			Data = data;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiSettingsHandler
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* TypeName;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint TypeHash;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* ClearAllFn;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* ReadInitFn;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* ReadOpenFn;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* ReadLineFn;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* ApplyAllFn;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* WriteAllFn;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* UserData;


		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiSettingsHandler(byte* typeName = default, uint typeHash = default, delegate*<ImGuiContext*, ImGuiSettingsHandler*, void> clearAllFn = default, delegate*<ImGuiContext*, ImGuiSettingsHandler*, void> readInitFn = default, delegate*<ImGuiContext*, ImGuiSettingsHandler*, byte*, void*> readOpenFn = default, delegate*<ImGuiContext*, ImGuiSettingsHandler*, void*, byte*, void> readLineFn = default, delegate*<ImGuiContext*, ImGuiSettingsHandler*, void> applyAllFn = default, delegate*<ImGuiContext*, ImGuiSettingsHandler*, ImGuiTextBuffer*, void> writeAllFn = default, void* userData = default)
		{
			TypeName = typeName;
			TypeHash = typeHash;
			ClearAllFn = (void*)clearAllFn;
			ReadInitFn = (void*)readInitFn;
			ReadOpenFn = (void*)readOpenFn;
			ReadLineFn = (void*)readLineFn;
			ApplyAllFn = (void*)applyAllFn;
			WriteAllFn = (void*)writeAllFn;
			UserData = userData;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImChunkStreamImGuiWindowSettings
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVectorChar Buf;


		/// <summary>/// To be documented./// </summary>		public unsafe ImChunkStreamImGuiWindowSettings(ImVectorChar buf = default)
		{
			Buf = buf;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImChunkStreamImGuiTableSettings
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVectorChar Buf;


		/// <summary>/// To be documented./// </summary>		public unsafe ImChunkStreamImGuiTableSettings(ImVectorChar buf = default)
		{
			Buf = buf;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiContextHook
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiContextHook* Data;


		/// <summary>/// To be documented./// </summary>		public unsafe ImVectorImGuiContextHook(int size = default, int capacity = default, ImGuiContextHook* data = default)
		{
			Size = size;
			Capacity = capacity;
			Data = data;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiContextHook
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint HookId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiContextHookType Type;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint Owner;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* Callback;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* UserData;


		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiContextHook(uint hookId = default, ImGuiContextHookType type = default, uint owner = default, delegate*<void> callback = default, void* userData = default)
		{
			HookId = hookId;
			Type = type;
			Owner = owner;
			Callback = (void*)callback;
			UserData = userData;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTextIndex
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVectorInt LineOffsets;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int EndOffset;


		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiTextIndex(ImVectorInt lineOffsets = default, int endOffset = default)
		{
			LineOffsets = lineOffsets;
			EndOffset = endOffset;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorInt
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe int* Data;


		/// <summary>/// To be documented./// </summary>		public unsafe ImVectorInt(int size = default, int capacity = default, int* data = default)
		{
			Size = size;
			Capacity = capacity;
			Data = data;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiMetricsConfig
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ShowDebugLog;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ShowIDStackTool;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ShowWindowsRects;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ShowWindowsBeginOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ShowTablesRects;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ShowDrawCmdMesh;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ShowDrawCmdBoundingBoxes;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ShowAtlasTintedWithTextColor;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ShowDockingNodes;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ShowWindowsRectsType;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ShowTablesRectsType;


		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiMetricsConfig(bool showDebugLog = default, bool showIdStackTool = default, bool showWindowsRects = default, bool showWindowsBeginOrder = default, bool showTablesRects = default, bool showDrawCmdMesh = default, bool showDrawCmdBoundingBoxes = default, bool showAtlasTintedWithTextColor = default, bool showDockingNodes = default, int showWindowsRectsType = default, int showTablesRectsType = default)
		{
			ShowDebugLog = showDebugLog ? (byte)1 : (byte)0;
			ShowIDStackTool = showIdStackTool ? (byte)1 : (byte)0;
			ShowWindowsRects = showWindowsRects ? (byte)1 : (byte)0;
			ShowWindowsBeginOrder = showWindowsBeginOrder ? (byte)1 : (byte)0;
			ShowTablesRects = showTablesRects ? (byte)1 : (byte)0;
			ShowDrawCmdMesh = showDrawCmdMesh ? (byte)1 : (byte)0;
			ShowDrawCmdBoundingBoxes = showDrawCmdBoundingBoxes ? (byte)1 : (byte)0;
			ShowAtlasTintedWithTextColor = showAtlasTintedWithTextColor ? (byte)1 : (byte)0;
			ShowDockingNodes = showDockingNodes ? (byte)1 : (byte)0;
			ShowWindowsRectsType = showWindowsRectsType;
			ShowTablesRectsType = showTablesRectsType;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiIDStackTool
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public int LastActiveFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int StackLevel;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint QueryId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVectorImGuiStackLevelInfo Results;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte CopyToClipboardOnCtrlC;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float CopyToClipboardLastTime;


		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiIDStackTool(int lastActiveFrame = default, int stackLevel = default, uint queryId = default, ImVectorImGuiStackLevelInfo results = default, bool copyToClipboardOnCtrlC = default, float copyToClipboardLastTime = default)
		{
			LastActiveFrame = lastActiveFrame;
			StackLevel = stackLevel;
			QueryId = queryId;
			Results = results;
			CopyToClipboardOnCtrlC = copyToClipboardOnCtrlC ? (byte)1 : (byte)0;
			CopyToClipboardLastTime = copyToClipboardLastTime;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiStackLevelInfo
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiStackLevelInfo* Data;


		/// <summary>/// To be documented./// </summary>		public unsafe ImVectorImGuiStackLevelInfo(int size = default, int capacity = default, ImGuiStackLevelInfo* data = default)
		{
			Size = size;
			Capacity = capacity;
			Data = data;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiStackLevelInfo
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte QueryFrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte QuerySuccess;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int DataType;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte Desc_0;
		public byte Desc_1;
		public byte Desc_2;
		public byte Desc_3;
		public byte Desc_4;
		public byte Desc_5;
		public byte Desc_6;
		public byte Desc_7;
		public byte Desc_8;
		public byte Desc_9;
		public byte Desc_10;
		public byte Desc_11;
		public byte Desc_12;
		public byte Desc_13;
		public byte Desc_14;
		public byte Desc_15;
		public byte Desc_16;
		public byte Desc_17;
		public byte Desc_18;
		public byte Desc_19;
		public byte Desc_20;
		public byte Desc_21;
		public byte Desc_22;
		public byte Desc_23;
		public byte Desc_24;
		public byte Desc_25;
		public byte Desc_26;
		public byte Desc_27;
		public byte Desc_28;
		public byte Desc_29;
		public byte Desc_30;
		public byte Desc_31;
		public byte Desc_32;
		public byte Desc_33;
		public byte Desc_34;
		public byte Desc_35;
		public byte Desc_36;
		public byte Desc_37;
		public byte Desc_38;
		public byte Desc_39;
		public byte Desc_40;
		public byte Desc_41;
		public byte Desc_42;
		public byte Desc_43;
		public byte Desc_44;
		public byte Desc_45;
		public byte Desc_46;
		public byte Desc_47;
		public byte Desc_48;
		public byte Desc_49;
		public byte Desc_50;
		public byte Desc_51;
		public byte Desc_52;
		public byte Desc_53;
		public byte Desc_54;
		public byte Desc_55;
		public byte Desc_56;


		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiStackLevelInfo(uint id = default, byte queryFrameCount = default, bool querySuccess = default, int dataType = default, byte* desc = default)
		{
			ID = id;
			QueryFrameCount = queryFrameCount;
			QuerySuccess = querySuccess ? (byte)1 : (byte)0;
			DataType = dataType;
			if (desc != default)
			{
				Desc_0 = desc[0];
				Desc_1 = desc[1];
				Desc_2 = desc[2];
				Desc_3 = desc[3];
				Desc_4 = desc[4];
				Desc_5 = desc[5];
				Desc_6 = desc[6];
				Desc_7 = desc[7];
				Desc_8 = desc[8];
				Desc_9 = desc[9];
				Desc_10 = desc[10];
				Desc_11 = desc[11];
				Desc_12 = desc[12];
				Desc_13 = desc[13];
				Desc_14 = desc[14];
				Desc_15 = desc[15];
				Desc_16 = desc[16];
				Desc_17 = desc[17];
				Desc_18 = desc[18];
				Desc_19 = desc[19];
				Desc_20 = desc[20];
				Desc_21 = desc[21];
				Desc_22 = desc[22];
				Desc_23 = desc[23];
				Desc_24 = desc[24];
				Desc_25 = desc[25];
				Desc_26 = desc[26];
				Desc_27 = desc[27];
				Desc_28 = desc[28];
				Desc_29 = desc[29];
				Desc_30 = desc[30];
				Desc_31 = desc[31];
				Desc_32 = desc[32];
				Desc_33 = desc[33];
				Desc_34 = desc[34];
				Desc_35 = desc[35];
				Desc_36 = desc[36];
				Desc_37 = desc[37];
				Desc_38 = desc[38];
				Desc_39 = desc[39];
				Desc_40 = desc[40];
				Desc_41 = desc[41];
				Desc_42 = desc[42];
				Desc_43 = desc[43];
				Desc_44 = desc[44];
				Desc_45 = desc[45];
				Desc_46 = desc[46];
				Desc_47 = desc[47];
				Desc_48 = desc[48];
				Desc_49 = desc[49];
				Desc_50 = desc[50];
				Desc_51 = desc[51];
				Desc_52 = desc[52];
				Desc_53 = desc[53];
				Desc_54 = desc[54];
				Desc_55 = desc[55];
				Desc_56 = desc[56];
			}
		}

		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiStackLevelInfo(uint id = default, byte queryFrameCount = default, bool querySuccess = default, int dataType = default, Span<byte> desc = default)
		{
			ID = id;
			QueryFrameCount = queryFrameCount;
			QuerySuccess = querySuccess ? (byte)1 : (byte)0;
			DataType = dataType;
			if (desc != default)
			{
				Desc_0 = desc[0];
				Desc_1 = desc[1];
				Desc_2 = desc[2];
				Desc_3 = desc[3];
				Desc_4 = desc[4];
				Desc_5 = desc[5];
				Desc_6 = desc[6];
				Desc_7 = desc[7];
				Desc_8 = desc[8];
				Desc_9 = desc[9];
				Desc_10 = desc[10];
				Desc_11 = desc[11];
				Desc_12 = desc[12];
				Desc_13 = desc[13];
				Desc_14 = desc[14];
				Desc_15 = desc[15];
				Desc_16 = desc[16];
				Desc_17 = desc[17];
				Desc_18 = desc[18];
				Desc_19 = desc[19];
				Desc_20 = desc[20];
				Desc_21 = desc[21];
				Desc_22 = desc[22];
				Desc_23 = desc[23];
				Desc_24 = desc[24];
				Desc_25 = desc[25];
				Desc_26 = desc[26];
				Desc_27 = desc[27];
				Desc_28 = desc[28];
				Desc_29 = desc[29];
				Desc_30 = desc[30];
				Desc_31 = desc[31];
				Desc_32 = desc[32];
				Desc_33 = desc[33];
				Desc_34 = desc[34];
				Desc_35 = desc[35];
				Desc_36 = desc[36];
				Desc_37 = desc[37];
				Desc_38 = desc[38];
				Desc_39 = desc[39];
				Desc_40 = desc[40];
				Desc_41 = desc[41];
				Desc_42 = desc[42];
				Desc_43 = desc[43];
				Desc_44 = desc[44];
				Desc_45 = desc[45];
				Desc_46 = desc[46];
				Desc_47 = desc[47];
				Desc_48 = desc[48];
				Desc_49 = desc[49];
				Desc_50 = desc[50];
				Desc_51 = desc[51];
				Desc_52 = desc[52];
				Desc_53 = desc[53];
				Desc_54 = desc[54];
				Desc_55 = desc[55];
				Desc_56 = desc[56];
			}
		}


		/// <summary>
		/// To be documented.
		/// </summary>
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDebugAllocInfo
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public int TotalAllocCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int TotalFreeCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short LastEntriesIdx;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDebugAllocEntry LastEntriesBuf_0;
		public ImGuiDebugAllocEntry LastEntriesBuf_1;
		public ImGuiDebugAllocEntry LastEntriesBuf_2;
		public ImGuiDebugAllocEntry LastEntriesBuf_3;
		public ImGuiDebugAllocEntry LastEntriesBuf_4;
		public ImGuiDebugAllocEntry LastEntriesBuf_5;


		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiDebugAllocInfo(int totalAllocCount = default, int totalFreeCount = default, short lastEntriesIdx = default, ImGuiDebugAllocEntry* lastEntriesBuf = default)
		{
			TotalAllocCount = totalAllocCount;
			TotalFreeCount = totalFreeCount;
			LastEntriesIdx = lastEntriesIdx;
			if (lastEntriesBuf != default)
			{
				LastEntriesBuf_0 = lastEntriesBuf[0];
				LastEntriesBuf_1 = lastEntriesBuf[1];
				LastEntriesBuf_2 = lastEntriesBuf[2];
				LastEntriesBuf_3 = lastEntriesBuf[3];
				LastEntriesBuf_4 = lastEntriesBuf[4];
				LastEntriesBuf_5 = lastEntriesBuf[5];
			}
		}

		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiDebugAllocInfo(int totalAllocCount = default, int totalFreeCount = default, short lastEntriesIdx = default, Span<ImGuiDebugAllocEntry> lastEntriesBuf = default)
		{
			TotalAllocCount = totalAllocCount;
			TotalFreeCount = totalFreeCount;
			LastEntriesIdx = lastEntriesIdx;
			if (lastEntriesBuf != default)
			{
				LastEntriesBuf_0 = lastEntriesBuf[0];
				LastEntriesBuf_1 = lastEntriesBuf[1];
				LastEntriesBuf_2 = lastEntriesBuf[2];
				LastEntriesBuf_3 = lastEntriesBuf[3];
				LastEntriesBuf_4 = lastEntriesBuf[4];
				LastEntriesBuf_5 = lastEntriesBuf[5];
			}
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<ImGuiDebugAllocEntry> LastEntriesBuf
		
		{
			get
			{
				fixed (ImGuiDebugAllocEntry* p = &this.LastEntriesBuf_0)
				{
					return new Span<ImGuiDebugAllocEntry>(p, 6);
				}
			}
		}
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDebugAllocEntry
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public int FrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short AllocCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short FreeCount;


		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiDebugAllocEntry(int frameCount = default, short allocCount = default, short freeCount = default)
		{
			FrameCount = frameCount;
			AllocCount = allocCount;
			FreeCount = freeCount;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputTextCallbackData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiContext* Ctx;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int EventFlag;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* UserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort EventChar;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiKey EventKey;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* Buf;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int BufTextLen;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int BufSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte BufDirty;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int CursorPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int SelectionStart;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int SelectionEnd;



		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiInputTextCallbackData(ImGuiContext* ctx = default, int eventFlag = default, int flags = default, void* userData = default, ushort eventChar = default, ImGuiKey eventKey = default, byte* buf = default, int bufTextLen = default, int bufSize = default, bool bufDirty = default, int cursorPos = default, int selectionStart = default, int selectionEnd = default)
		{
			Ctx = ctx;
			EventFlag = eventFlag;
			Flags = flags;
			UserData = userData;
			EventChar = eventChar;
			EventKey = eventKey;
			Buf = buf;
			BufTextLen = bufTextLen;
			BufSize = bufSize;
			BufDirty = bufDirty ? (byte)1 : (byte)0;
			CursorPos = cursorPos;
			SelectionStart = selectionStart;
			SelectionEnd = selectionEnd;
		}


		public unsafe void ClearSelection()
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.ClearSelectionNative(@this);
			}
		}

		public unsafe void DeleteChars( int pos,  int bytesCount)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.DeleteCharsNative(@this, pos, bytesCount);
			}
		}

		public unsafe void Destroy()
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		public unsafe bool HasSelection()
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				byte ret = ImGui.HasSelectionNative(@this);
				return ret != 0;
			}
		}

		public unsafe void InsertChars( int pos,  byte* text,  byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.InsertCharsNative(@this, pos, text, textEnd);
			}
		}

		public unsafe void InsertChars( int pos,  byte* text)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.InsertCharsNative(@this, pos, text, (byte*)(default));
			}
		}

		public unsafe void InsertChars( int pos,  ref byte text,  byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					ImGui.InsertCharsNative(@this, pos, (byte*)ptext, textEnd);
				}
			}
		}

		public unsafe void InsertChars( int pos,  ref byte text)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					ImGui.InsertCharsNative(@this, pos, (byte*)ptext, (byte*)(default));
				}
			}
		}

		public unsafe void InsertChars( int pos,  string text,  byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.InsertCharsNative(@this, pos, pStr0, textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public unsafe void InsertChars( int pos,  string text)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.InsertCharsNative(@this, pos, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public unsafe void InsertChars( int pos,  byte* text,  ref byte textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					ImGui.InsertCharsNative(@this, pos, text, (byte*)ptextEnd);
				}
			}
		}

		public unsafe void InsertChars( int pos,  byte* text,  string textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.InsertCharsNative(@this, pos, text, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public unsafe void InsertChars( int pos,  ref byte text,  ref byte textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						ImGui.InsertCharsNative(@this, pos, (byte*)ptext, (byte*)ptextEnd);
					}
				}
			}
		}

		public unsafe void InsertChars( int pos,  string text,  string textEnd)
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				ImGui.InsertCharsNative(@this, pos, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public unsafe void SelectAll()
		{
			fixed (ImGuiInputTextCallbackData* @this = &this)
			{
				ImGui.SelectAllNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiOnceUponAFrame
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public int RefFrame;



		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiOnceUponAFrame(int refFrame = default)
		{
			RefFrame = refFrame;
		}


		public unsafe void Destroy()
		{
			fixed (ImGuiOnceUponAFrame* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiSizeCallbackData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* UserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 Pos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 CurrentSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 DesiredSize;


		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiSizeCallbackData(void* userData = default, Vector2 pos = default, Vector2 currentSize = default, Vector2 desiredSize = default)
		{
			UserData = userData;
			Pos = pos;
			CurrentSize = currentSize;
			DesiredSize = desiredSize;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTextFilter
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte InputBuf_0;
		public byte InputBuf_1;
		public byte InputBuf_2;
		public byte InputBuf_3;
		public byte InputBuf_4;
		public byte InputBuf_5;
		public byte InputBuf_6;
		public byte InputBuf_7;
		public byte InputBuf_8;
		public byte InputBuf_9;
		public byte InputBuf_10;
		public byte InputBuf_11;
		public byte InputBuf_12;
		public byte InputBuf_13;
		public byte InputBuf_14;
		public byte InputBuf_15;
		public byte InputBuf_16;
		public byte InputBuf_17;
		public byte InputBuf_18;
		public byte InputBuf_19;
		public byte InputBuf_20;
		public byte InputBuf_21;
		public byte InputBuf_22;
		public byte InputBuf_23;
		public byte InputBuf_24;
		public byte InputBuf_25;
		public byte InputBuf_26;
		public byte InputBuf_27;
		public byte InputBuf_28;
		public byte InputBuf_29;
		public byte InputBuf_30;
		public byte InputBuf_31;
		public byte InputBuf_32;
		public byte InputBuf_33;
		public byte InputBuf_34;
		public byte InputBuf_35;
		public byte InputBuf_36;
		public byte InputBuf_37;
		public byte InputBuf_38;
		public byte InputBuf_39;
		public byte InputBuf_40;
		public byte InputBuf_41;
		public byte InputBuf_42;
		public byte InputBuf_43;
		public byte InputBuf_44;
		public byte InputBuf_45;
		public byte InputBuf_46;
		public byte InputBuf_47;
		public byte InputBuf_48;
		public byte InputBuf_49;
		public byte InputBuf_50;
		public byte InputBuf_51;
		public byte InputBuf_52;
		public byte InputBuf_53;
		public byte InputBuf_54;
		public byte InputBuf_55;
		public byte InputBuf_56;
		public byte InputBuf_57;
		public byte InputBuf_58;
		public byte InputBuf_59;
		public byte InputBuf_60;
		public byte InputBuf_61;
		public byte InputBuf_62;
		public byte InputBuf_63;
		public byte InputBuf_64;
		public byte InputBuf_65;
		public byte InputBuf_66;
		public byte InputBuf_67;
		public byte InputBuf_68;
		public byte InputBuf_69;
		public byte InputBuf_70;
		public byte InputBuf_71;
		public byte InputBuf_72;
		public byte InputBuf_73;
		public byte InputBuf_74;
		public byte InputBuf_75;
		public byte InputBuf_76;
		public byte InputBuf_77;
		public byte InputBuf_78;
		public byte InputBuf_79;
		public byte InputBuf_80;
		public byte InputBuf_81;
		public byte InputBuf_82;
		public byte InputBuf_83;
		public byte InputBuf_84;
		public byte InputBuf_85;
		public byte InputBuf_86;
		public byte InputBuf_87;
		public byte InputBuf_88;
		public byte InputBuf_89;
		public byte InputBuf_90;
		public byte InputBuf_91;
		public byte InputBuf_92;
		public byte InputBuf_93;
		public byte InputBuf_94;
		public byte InputBuf_95;
		public byte InputBuf_96;
		public byte InputBuf_97;
		public byte InputBuf_98;
		public byte InputBuf_99;
		public byte InputBuf_100;
		public byte InputBuf_101;
		public byte InputBuf_102;
		public byte InputBuf_103;
		public byte InputBuf_104;
		public byte InputBuf_105;
		public byte InputBuf_106;
		public byte InputBuf_107;
		public byte InputBuf_108;
		public byte InputBuf_109;
		public byte InputBuf_110;
		public byte InputBuf_111;
		public byte InputBuf_112;
		public byte InputBuf_113;
		public byte InputBuf_114;
		public byte InputBuf_115;
		public byte InputBuf_116;
		public byte InputBuf_117;
		public byte InputBuf_118;
		public byte InputBuf_119;
		public byte InputBuf_120;
		public byte InputBuf_121;
		public byte InputBuf_122;
		public byte InputBuf_123;
		public byte InputBuf_124;
		public byte InputBuf_125;
		public byte InputBuf_126;
		public byte InputBuf_127;
		public byte InputBuf_128;
		public byte InputBuf_129;
		public byte InputBuf_130;
		public byte InputBuf_131;
		public byte InputBuf_132;
		public byte InputBuf_133;
		public byte InputBuf_134;
		public byte InputBuf_135;
		public byte InputBuf_136;
		public byte InputBuf_137;
		public byte InputBuf_138;
		public byte InputBuf_139;
		public byte InputBuf_140;
		public byte InputBuf_141;
		public byte InputBuf_142;
		public byte InputBuf_143;
		public byte InputBuf_144;
		public byte InputBuf_145;
		public byte InputBuf_146;
		public byte InputBuf_147;
		public byte InputBuf_148;
		public byte InputBuf_149;
		public byte InputBuf_150;
		public byte InputBuf_151;
		public byte InputBuf_152;
		public byte InputBuf_153;
		public byte InputBuf_154;
		public byte InputBuf_155;
		public byte InputBuf_156;
		public byte InputBuf_157;
		public byte InputBuf_158;
		public byte InputBuf_159;
		public byte InputBuf_160;
		public byte InputBuf_161;
		public byte InputBuf_162;
		public byte InputBuf_163;
		public byte InputBuf_164;
		public byte InputBuf_165;
		public byte InputBuf_166;
		public byte InputBuf_167;
		public byte InputBuf_168;
		public byte InputBuf_169;
		public byte InputBuf_170;
		public byte InputBuf_171;
		public byte InputBuf_172;
		public byte InputBuf_173;
		public byte InputBuf_174;
		public byte InputBuf_175;
		public byte InputBuf_176;
		public byte InputBuf_177;
		public byte InputBuf_178;
		public byte InputBuf_179;
		public byte InputBuf_180;
		public byte InputBuf_181;
		public byte InputBuf_182;
		public byte InputBuf_183;
		public byte InputBuf_184;
		public byte InputBuf_185;
		public byte InputBuf_186;
		public byte InputBuf_187;
		public byte InputBuf_188;
		public byte InputBuf_189;
		public byte InputBuf_190;
		public byte InputBuf_191;
		public byte InputBuf_192;
		public byte InputBuf_193;
		public byte InputBuf_194;
		public byte InputBuf_195;
		public byte InputBuf_196;
		public byte InputBuf_197;
		public byte InputBuf_198;
		public byte InputBuf_199;
		public byte InputBuf_200;
		public byte InputBuf_201;
		public byte InputBuf_202;
		public byte InputBuf_203;
		public byte InputBuf_204;
		public byte InputBuf_205;
		public byte InputBuf_206;
		public byte InputBuf_207;
		public byte InputBuf_208;
		public byte InputBuf_209;
		public byte InputBuf_210;
		public byte InputBuf_211;
		public byte InputBuf_212;
		public byte InputBuf_213;
		public byte InputBuf_214;
		public byte InputBuf_215;
		public byte InputBuf_216;
		public byte InputBuf_217;
		public byte InputBuf_218;
		public byte InputBuf_219;
		public byte InputBuf_220;
		public byte InputBuf_221;
		public byte InputBuf_222;
		public byte InputBuf_223;
		public byte InputBuf_224;
		public byte InputBuf_225;
		public byte InputBuf_226;
		public byte InputBuf_227;
		public byte InputBuf_228;
		public byte InputBuf_229;
		public byte InputBuf_230;
		public byte InputBuf_231;
		public byte InputBuf_232;
		public byte InputBuf_233;
		public byte InputBuf_234;
		public byte InputBuf_235;
		public byte InputBuf_236;
		public byte InputBuf_237;
		public byte InputBuf_238;
		public byte InputBuf_239;
		public byte InputBuf_240;
		public byte InputBuf_241;
		public byte InputBuf_242;
		public byte InputBuf_243;
		public byte InputBuf_244;
		public byte InputBuf_245;
		public byte InputBuf_246;
		public byte InputBuf_247;
		public byte InputBuf_248;
		public byte InputBuf_249;
		public byte InputBuf_250;
		public byte InputBuf_251;
		public byte InputBuf_252;
		public byte InputBuf_253;
		public byte InputBuf_254;
		public byte InputBuf_255;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVectorImGuiTextRange Filters;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int CountGrep;



		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiTextFilter(byte* inputBuf = default, ImVectorImGuiTextRange filters = default, int countGrep = default)
		{
			if (inputBuf != default)
			{
				InputBuf_0 = inputBuf[0];
				InputBuf_1 = inputBuf[1];
				InputBuf_2 = inputBuf[2];
				InputBuf_3 = inputBuf[3];
				InputBuf_4 = inputBuf[4];
				InputBuf_5 = inputBuf[5];
				InputBuf_6 = inputBuf[6];
				InputBuf_7 = inputBuf[7];
				InputBuf_8 = inputBuf[8];
				InputBuf_9 = inputBuf[9];
				InputBuf_10 = inputBuf[10];
				InputBuf_11 = inputBuf[11];
				InputBuf_12 = inputBuf[12];
				InputBuf_13 = inputBuf[13];
				InputBuf_14 = inputBuf[14];
				InputBuf_15 = inputBuf[15];
				InputBuf_16 = inputBuf[16];
				InputBuf_17 = inputBuf[17];
				InputBuf_18 = inputBuf[18];
				InputBuf_19 = inputBuf[19];
				InputBuf_20 = inputBuf[20];
				InputBuf_21 = inputBuf[21];
				InputBuf_22 = inputBuf[22];
				InputBuf_23 = inputBuf[23];
				InputBuf_24 = inputBuf[24];
				InputBuf_25 = inputBuf[25];
				InputBuf_26 = inputBuf[26];
				InputBuf_27 = inputBuf[27];
				InputBuf_28 = inputBuf[28];
				InputBuf_29 = inputBuf[29];
				InputBuf_30 = inputBuf[30];
				InputBuf_31 = inputBuf[31];
				InputBuf_32 = inputBuf[32];
				InputBuf_33 = inputBuf[33];
				InputBuf_34 = inputBuf[34];
				InputBuf_35 = inputBuf[35];
				InputBuf_36 = inputBuf[36];
				InputBuf_37 = inputBuf[37];
				InputBuf_38 = inputBuf[38];
				InputBuf_39 = inputBuf[39];
				InputBuf_40 = inputBuf[40];
				InputBuf_41 = inputBuf[41];
				InputBuf_42 = inputBuf[42];
				InputBuf_43 = inputBuf[43];
				InputBuf_44 = inputBuf[44];
				InputBuf_45 = inputBuf[45];
				InputBuf_46 = inputBuf[46];
				InputBuf_47 = inputBuf[47];
				InputBuf_48 = inputBuf[48];
				InputBuf_49 = inputBuf[49];
				InputBuf_50 = inputBuf[50];
				InputBuf_51 = inputBuf[51];
				InputBuf_52 = inputBuf[52];
				InputBuf_53 = inputBuf[53];
				InputBuf_54 = inputBuf[54];
				InputBuf_55 = inputBuf[55];
				InputBuf_56 = inputBuf[56];
				InputBuf_57 = inputBuf[57];
				InputBuf_58 = inputBuf[58];
				InputBuf_59 = inputBuf[59];
				InputBuf_60 = inputBuf[60];
				InputBuf_61 = inputBuf[61];
				InputBuf_62 = inputBuf[62];
				InputBuf_63 = inputBuf[63];
				InputBuf_64 = inputBuf[64];
				InputBuf_65 = inputBuf[65];
				InputBuf_66 = inputBuf[66];
				InputBuf_67 = inputBuf[67];
				InputBuf_68 = inputBuf[68];
				InputBuf_69 = inputBuf[69];
				InputBuf_70 = inputBuf[70];
				InputBuf_71 = inputBuf[71];
				InputBuf_72 = inputBuf[72];
				InputBuf_73 = inputBuf[73];
				InputBuf_74 = inputBuf[74];
				InputBuf_75 = inputBuf[75];
				InputBuf_76 = inputBuf[76];
				InputBuf_77 = inputBuf[77];
				InputBuf_78 = inputBuf[78];
				InputBuf_79 = inputBuf[79];
				InputBuf_80 = inputBuf[80];
				InputBuf_81 = inputBuf[81];
				InputBuf_82 = inputBuf[82];
				InputBuf_83 = inputBuf[83];
				InputBuf_84 = inputBuf[84];
				InputBuf_85 = inputBuf[85];
				InputBuf_86 = inputBuf[86];
				InputBuf_87 = inputBuf[87];
				InputBuf_88 = inputBuf[88];
				InputBuf_89 = inputBuf[89];
				InputBuf_90 = inputBuf[90];
				InputBuf_91 = inputBuf[91];
				InputBuf_92 = inputBuf[92];
				InputBuf_93 = inputBuf[93];
				InputBuf_94 = inputBuf[94];
				InputBuf_95 = inputBuf[95];
				InputBuf_96 = inputBuf[96];
				InputBuf_97 = inputBuf[97];
				InputBuf_98 = inputBuf[98];
				InputBuf_99 = inputBuf[99];
				InputBuf_100 = inputBuf[100];
				InputBuf_101 = inputBuf[101];
				InputBuf_102 = inputBuf[102];
				InputBuf_103 = inputBuf[103];
				InputBuf_104 = inputBuf[104];
				InputBuf_105 = inputBuf[105];
				InputBuf_106 = inputBuf[106];
				InputBuf_107 = inputBuf[107];
				InputBuf_108 = inputBuf[108];
				InputBuf_109 = inputBuf[109];
				InputBuf_110 = inputBuf[110];
				InputBuf_111 = inputBuf[111];
				InputBuf_112 = inputBuf[112];
				InputBuf_113 = inputBuf[113];
				InputBuf_114 = inputBuf[114];
				InputBuf_115 = inputBuf[115];
				InputBuf_116 = inputBuf[116];
				InputBuf_117 = inputBuf[117];
				InputBuf_118 = inputBuf[118];
				InputBuf_119 = inputBuf[119];
				InputBuf_120 = inputBuf[120];
				InputBuf_121 = inputBuf[121];
				InputBuf_122 = inputBuf[122];
				InputBuf_123 = inputBuf[123];
				InputBuf_124 = inputBuf[124];
				InputBuf_125 = inputBuf[125];
				InputBuf_126 = inputBuf[126];
				InputBuf_127 = inputBuf[127];
				InputBuf_128 = inputBuf[128];
				InputBuf_129 = inputBuf[129];
				InputBuf_130 = inputBuf[130];
				InputBuf_131 = inputBuf[131];
				InputBuf_132 = inputBuf[132];
				InputBuf_133 = inputBuf[133];
				InputBuf_134 = inputBuf[134];
				InputBuf_135 = inputBuf[135];
				InputBuf_136 = inputBuf[136];
				InputBuf_137 = inputBuf[137];
				InputBuf_138 = inputBuf[138];
				InputBuf_139 = inputBuf[139];
				InputBuf_140 = inputBuf[140];
				InputBuf_141 = inputBuf[141];
				InputBuf_142 = inputBuf[142];
				InputBuf_143 = inputBuf[143];
				InputBuf_144 = inputBuf[144];
				InputBuf_145 = inputBuf[145];
				InputBuf_146 = inputBuf[146];
				InputBuf_147 = inputBuf[147];
				InputBuf_148 = inputBuf[148];
				InputBuf_149 = inputBuf[149];
				InputBuf_150 = inputBuf[150];
				InputBuf_151 = inputBuf[151];
				InputBuf_152 = inputBuf[152];
				InputBuf_153 = inputBuf[153];
				InputBuf_154 = inputBuf[154];
				InputBuf_155 = inputBuf[155];
				InputBuf_156 = inputBuf[156];
				InputBuf_157 = inputBuf[157];
				InputBuf_158 = inputBuf[158];
				InputBuf_159 = inputBuf[159];
				InputBuf_160 = inputBuf[160];
				InputBuf_161 = inputBuf[161];
				InputBuf_162 = inputBuf[162];
				InputBuf_163 = inputBuf[163];
				InputBuf_164 = inputBuf[164];
				InputBuf_165 = inputBuf[165];
				InputBuf_166 = inputBuf[166];
				InputBuf_167 = inputBuf[167];
				InputBuf_168 = inputBuf[168];
				InputBuf_169 = inputBuf[169];
				InputBuf_170 = inputBuf[170];
				InputBuf_171 = inputBuf[171];
				InputBuf_172 = inputBuf[172];
				InputBuf_173 = inputBuf[173];
				InputBuf_174 = inputBuf[174];
				InputBuf_175 = inputBuf[175];
				InputBuf_176 = inputBuf[176];
				InputBuf_177 = inputBuf[177];
				InputBuf_178 = inputBuf[178];
				InputBuf_179 = inputBuf[179];
				InputBuf_180 = inputBuf[180];
				InputBuf_181 = inputBuf[181];
				InputBuf_182 = inputBuf[182];
				InputBuf_183 = inputBuf[183];
				InputBuf_184 = inputBuf[184];
				InputBuf_185 = inputBuf[185];
				InputBuf_186 = inputBuf[186];
				InputBuf_187 = inputBuf[187];
				InputBuf_188 = inputBuf[188];
				InputBuf_189 = inputBuf[189];
				InputBuf_190 = inputBuf[190];
				InputBuf_191 = inputBuf[191];
				InputBuf_192 = inputBuf[192];
				InputBuf_193 = inputBuf[193];
				InputBuf_194 = inputBuf[194];
				InputBuf_195 = inputBuf[195];
				InputBuf_196 = inputBuf[196];
				InputBuf_197 = inputBuf[197];
				InputBuf_198 = inputBuf[198];
				InputBuf_199 = inputBuf[199];
				InputBuf_200 = inputBuf[200];
				InputBuf_201 = inputBuf[201];
				InputBuf_202 = inputBuf[202];
				InputBuf_203 = inputBuf[203];
				InputBuf_204 = inputBuf[204];
				InputBuf_205 = inputBuf[205];
				InputBuf_206 = inputBuf[206];
				InputBuf_207 = inputBuf[207];
				InputBuf_208 = inputBuf[208];
				InputBuf_209 = inputBuf[209];
				InputBuf_210 = inputBuf[210];
				InputBuf_211 = inputBuf[211];
				InputBuf_212 = inputBuf[212];
				InputBuf_213 = inputBuf[213];
				InputBuf_214 = inputBuf[214];
				InputBuf_215 = inputBuf[215];
				InputBuf_216 = inputBuf[216];
				InputBuf_217 = inputBuf[217];
				InputBuf_218 = inputBuf[218];
				InputBuf_219 = inputBuf[219];
				InputBuf_220 = inputBuf[220];
				InputBuf_221 = inputBuf[221];
				InputBuf_222 = inputBuf[222];
				InputBuf_223 = inputBuf[223];
				InputBuf_224 = inputBuf[224];
				InputBuf_225 = inputBuf[225];
				InputBuf_226 = inputBuf[226];
				InputBuf_227 = inputBuf[227];
				InputBuf_228 = inputBuf[228];
				InputBuf_229 = inputBuf[229];
				InputBuf_230 = inputBuf[230];
				InputBuf_231 = inputBuf[231];
				InputBuf_232 = inputBuf[232];
				InputBuf_233 = inputBuf[233];
				InputBuf_234 = inputBuf[234];
				InputBuf_235 = inputBuf[235];
				InputBuf_236 = inputBuf[236];
				InputBuf_237 = inputBuf[237];
				InputBuf_238 = inputBuf[238];
				InputBuf_239 = inputBuf[239];
				InputBuf_240 = inputBuf[240];
				InputBuf_241 = inputBuf[241];
				InputBuf_242 = inputBuf[242];
				InputBuf_243 = inputBuf[243];
				InputBuf_244 = inputBuf[244];
				InputBuf_245 = inputBuf[245];
				InputBuf_246 = inputBuf[246];
				InputBuf_247 = inputBuf[247];
				InputBuf_248 = inputBuf[248];
				InputBuf_249 = inputBuf[249];
				InputBuf_250 = inputBuf[250];
				InputBuf_251 = inputBuf[251];
				InputBuf_252 = inputBuf[252];
				InputBuf_253 = inputBuf[253];
				InputBuf_254 = inputBuf[254];
				InputBuf_255 = inputBuf[255];
			}
			Filters = filters;
			CountGrep = countGrep;
		}

		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiTextFilter(Span<byte> inputBuf = default, ImVectorImGuiTextRange filters = default, int countGrep = default)
		{
			if (inputBuf != default)
			{
				InputBuf_0 = inputBuf[0];
				InputBuf_1 = inputBuf[1];
				InputBuf_2 = inputBuf[2];
				InputBuf_3 = inputBuf[3];
				InputBuf_4 = inputBuf[4];
				InputBuf_5 = inputBuf[5];
				InputBuf_6 = inputBuf[6];
				InputBuf_7 = inputBuf[7];
				InputBuf_8 = inputBuf[8];
				InputBuf_9 = inputBuf[9];
				InputBuf_10 = inputBuf[10];
				InputBuf_11 = inputBuf[11];
				InputBuf_12 = inputBuf[12];
				InputBuf_13 = inputBuf[13];
				InputBuf_14 = inputBuf[14];
				InputBuf_15 = inputBuf[15];
				InputBuf_16 = inputBuf[16];
				InputBuf_17 = inputBuf[17];
				InputBuf_18 = inputBuf[18];
				InputBuf_19 = inputBuf[19];
				InputBuf_20 = inputBuf[20];
				InputBuf_21 = inputBuf[21];
				InputBuf_22 = inputBuf[22];
				InputBuf_23 = inputBuf[23];
				InputBuf_24 = inputBuf[24];
				InputBuf_25 = inputBuf[25];
				InputBuf_26 = inputBuf[26];
				InputBuf_27 = inputBuf[27];
				InputBuf_28 = inputBuf[28];
				InputBuf_29 = inputBuf[29];
				InputBuf_30 = inputBuf[30];
				InputBuf_31 = inputBuf[31];
				InputBuf_32 = inputBuf[32];
				InputBuf_33 = inputBuf[33];
				InputBuf_34 = inputBuf[34];
				InputBuf_35 = inputBuf[35];
				InputBuf_36 = inputBuf[36];
				InputBuf_37 = inputBuf[37];
				InputBuf_38 = inputBuf[38];
				InputBuf_39 = inputBuf[39];
				InputBuf_40 = inputBuf[40];
				InputBuf_41 = inputBuf[41];
				InputBuf_42 = inputBuf[42];
				InputBuf_43 = inputBuf[43];
				InputBuf_44 = inputBuf[44];
				InputBuf_45 = inputBuf[45];
				InputBuf_46 = inputBuf[46];
				InputBuf_47 = inputBuf[47];
				InputBuf_48 = inputBuf[48];
				InputBuf_49 = inputBuf[49];
				InputBuf_50 = inputBuf[50];
				InputBuf_51 = inputBuf[51];
				InputBuf_52 = inputBuf[52];
				InputBuf_53 = inputBuf[53];
				InputBuf_54 = inputBuf[54];
				InputBuf_55 = inputBuf[55];
				InputBuf_56 = inputBuf[56];
				InputBuf_57 = inputBuf[57];
				InputBuf_58 = inputBuf[58];
				InputBuf_59 = inputBuf[59];
				InputBuf_60 = inputBuf[60];
				InputBuf_61 = inputBuf[61];
				InputBuf_62 = inputBuf[62];
				InputBuf_63 = inputBuf[63];
				InputBuf_64 = inputBuf[64];
				InputBuf_65 = inputBuf[65];
				InputBuf_66 = inputBuf[66];
				InputBuf_67 = inputBuf[67];
				InputBuf_68 = inputBuf[68];
				InputBuf_69 = inputBuf[69];
				InputBuf_70 = inputBuf[70];
				InputBuf_71 = inputBuf[71];
				InputBuf_72 = inputBuf[72];
				InputBuf_73 = inputBuf[73];
				InputBuf_74 = inputBuf[74];
				InputBuf_75 = inputBuf[75];
				InputBuf_76 = inputBuf[76];
				InputBuf_77 = inputBuf[77];
				InputBuf_78 = inputBuf[78];
				InputBuf_79 = inputBuf[79];
				InputBuf_80 = inputBuf[80];
				InputBuf_81 = inputBuf[81];
				InputBuf_82 = inputBuf[82];
				InputBuf_83 = inputBuf[83];
				InputBuf_84 = inputBuf[84];
				InputBuf_85 = inputBuf[85];
				InputBuf_86 = inputBuf[86];
				InputBuf_87 = inputBuf[87];
				InputBuf_88 = inputBuf[88];
				InputBuf_89 = inputBuf[89];
				InputBuf_90 = inputBuf[90];
				InputBuf_91 = inputBuf[91];
				InputBuf_92 = inputBuf[92];
				InputBuf_93 = inputBuf[93];
				InputBuf_94 = inputBuf[94];
				InputBuf_95 = inputBuf[95];
				InputBuf_96 = inputBuf[96];
				InputBuf_97 = inputBuf[97];
				InputBuf_98 = inputBuf[98];
				InputBuf_99 = inputBuf[99];
				InputBuf_100 = inputBuf[100];
				InputBuf_101 = inputBuf[101];
				InputBuf_102 = inputBuf[102];
				InputBuf_103 = inputBuf[103];
				InputBuf_104 = inputBuf[104];
				InputBuf_105 = inputBuf[105];
				InputBuf_106 = inputBuf[106];
				InputBuf_107 = inputBuf[107];
				InputBuf_108 = inputBuf[108];
				InputBuf_109 = inputBuf[109];
				InputBuf_110 = inputBuf[110];
				InputBuf_111 = inputBuf[111];
				InputBuf_112 = inputBuf[112];
				InputBuf_113 = inputBuf[113];
				InputBuf_114 = inputBuf[114];
				InputBuf_115 = inputBuf[115];
				InputBuf_116 = inputBuf[116];
				InputBuf_117 = inputBuf[117];
				InputBuf_118 = inputBuf[118];
				InputBuf_119 = inputBuf[119];
				InputBuf_120 = inputBuf[120];
				InputBuf_121 = inputBuf[121];
				InputBuf_122 = inputBuf[122];
				InputBuf_123 = inputBuf[123];
				InputBuf_124 = inputBuf[124];
				InputBuf_125 = inputBuf[125];
				InputBuf_126 = inputBuf[126];
				InputBuf_127 = inputBuf[127];
				InputBuf_128 = inputBuf[128];
				InputBuf_129 = inputBuf[129];
				InputBuf_130 = inputBuf[130];
				InputBuf_131 = inputBuf[131];
				InputBuf_132 = inputBuf[132];
				InputBuf_133 = inputBuf[133];
				InputBuf_134 = inputBuf[134];
				InputBuf_135 = inputBuf[135];
				InputBuf_136 = inputBuf[136];
				InputBuf_137 = inputBuf[137];
				InputBuf_138 = inputBuf[138];
				InputBuf_139 = inputBuf[139];
				InputBuf_140 = inputBuf[140];
				InputBuf_141 = inputBuf[141];
				InputBuf_142 = inputBuf[142];
				InputBuf_143 = inputBuf[143];
				InputBuf_144 = inputBuf[144];
				InputBuf_145 = inputBuf[145];
				InputBuf_146 = inputBuf[146];
				InputBuf_147 = inputBuf[147];
				InputBuf_148 = inputBuf[148];
				InputBuf_149 = inputBuf[149];
				InputBuf_150 = inputBuf[150];
				InputBuf_151 = inputBuf[151];
				InputBuf_152 = inputBuf[152];
				InputBuf_153 = inputBuf[153];
				InputBuf_154 = inputBuf[154];
				InputBuf_155 = inputBuf[155];
				InputBuf_156 = inputBuf[156];
				InputBuf_157 = inputBuf[157];
				InputBuf_158 = inputBuf[158];
				InputBuf_159 = inputBuf[159];
				InputBuf_160 = inputBuf[160];
				InputBuf_161 = inputBuf[161];
				InputBuf_162 = inputBuf[162];
				InputBuf_163 = inputBuf[163];
				InputBuf_164 = inputBuf[164];
				InputBuf_165 = inputBuf[165];
				InputBuf_166 = inputBuf[166];
				InputBuf_167 = inputBuf[167];
				InputBuf_168 = inputBuf[168];
				InputBuf_169 = inputBuf[169];
				InputBuf_170 = inputBuf[170];
				InputBuf_171 = inputBuf[171];
				InputBuf_172 = inputBuf[172];
				InputBuf_173 = inputBuf[173];
				InputBuf_174 = inputBuf[174];
				InputBuf_175 = inputBuf[175];
				InputBuf_176 = inputBuf[176];
				InputBuf_177 = inputBuf[177];
				InputBuf_178 = inputBuf[178];
				InputBuf_179 = inputBuf[179];
				InputBuf_180 = inputBuf[180];
				InputBuf_181 = inputBuf[181];
				InputBuf_182 = inputBuf[182];
				InputBuf_183 = inputBuf[183];
				InputBuf_184 = inputBuf[184];
				InputBuf_185 = inputBuf[185];
				InputBuf_186 = inputBuf[186];
				InputBuf_187 = inputBuf[187];
				InputBuf_188 = inputBuf[188];
				InputBuf_189 = inputBuf[189];
				InputBuf_190 = inputBuf[190];
				InputBuf_191 = inputBuf[191];
				InputBuf_192 = inputBuf[192];
				InputBuf_193 = inputBuf[193];
				InputBuf_194 = inputBuf[194];
				InputBuf_195 = inputBuf[195];
				InputBuf_196 = inputBuf[196];
				InputBuf_197 = inputBuf[197];
				InputBuf_198 = inputBuf[198];
				InputBuf_199 = inputBuf[199];
				InputBuf_200 = inputBuf[200];
				InputBuf_201 = inputBuf[201];
				InputBuf_202 = inputBuf[202];
				InputBuf_203 = inputBuf[203];
				InputBuf_204 = inputBuf[204];
				InputBuf_205 = inputBuf[205];
				InputBuf_206 = inputBuf[206];
				InputBuf_207 = inputBuf[207];
				InputBuf_208 = inputBuf[208];
				InputBuf_209 = inputBuf[209];
				InputBuf_210 = inputBuf[210];
				InputBuf_211 = inputBuf[211];
				InputBuf_212 = inputBuf[212];
				InputBuf_213 = inputBuf[213];
				InputBuf_214 = inputBuf[214];
				InputBuf_215 = inputBuf[215];
				InputBuf_216 = inputBuf[216];
				InputBuf_217 = inputBuf[217];
				InputBuf_218 = inputBuf[218];
				InputBuf_219 = inputBuf[219];
				InputBuf_220 = inputBuf[220];
				InputBuf_221 = inputBuf[221];
				InputBuf_222 = inputBuf[222];
				InputBuf_223 = inputBuf[223];
				InputBuf_224 = inputBuf[224];
				InputBuf_225 = inputBuf[225];
				InputBuf_226 = inputBuf[226];
				InputBuf_227 = inputBuf[227];
				InputBuf_228 = inputBuf[228];
				InputBuf_229 = inputBuf[229];
				InputBuf_230 = inputBuf[230];
				InputBuf_231 = inputBuf[231];
				InputBuf_232 = inputBuf[232];
				InputBuf_233 = inputBuf[233];
				InputBuf_234 = inputBuf[234];
				InputBuf_235 = inputBuf[235];
				InputBuf_236 = inputBuf[236];
				InputBuf_237 = inputBuf[237];
				InputBuf_238 = inputBuf[238];
				InputBuf_239 = inputBuf[239];
				InputBuf_240 = inputBuf[240];
				InputBuf_241 = inputBuf[241];
				InputBuf_242 = inputBuf[242];
				InputBuf_243 = inputBuf[243];
				InputBuf_244 = inputBuf[244];
				InputBuf_245 = inputBuf[245];
				InputBuf_246 = inputBuf[246];
				InputBuf_247 = inputBuf[247];
				InputBuf_248 = inputBuf[248];
				InputBuf_249 = inputBuf[249];
				InputBuf_250 = inputBuf[250];
				InputBuf_251 = inputBuf[251];
				InputBuf_252 = inputBuf[252];
				InputBuf_253 = inputBuf[253];
				InputBuf_254 = inputBuf[254];
				InputBuf_255 = inputBuf[255];
			}
			Filters = filters;
			CountGrep = countGrep;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Build()
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				ImGui.BuildNative(@this);
			}
		}

		public unsafe void Clear()
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				ImGui.ClearNative(@this);
			}
		}

		public unsafe void Destroy()
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		public unsafe bool Draw( byte* label,  float width)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte ret = ImGui.DrawNative(@this, label, width);
				return ret != 0;
			}
		}

		public unsafe bool Draw( byte* label)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte ret = ImGui.DrawNative(@this, label, (float)(0.0f));
				return ret != 0;
			}
		}

		public unsafe bool Draw()
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				bool ret = ImGui.Draw(@this, (string)"Filter(inc,-exc)", (float)(0.0f));
				return ret;
			}
		}

		public unsafe bool Draw( float width)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				bool ret = ImGui.Draw(@this, (string)"Filter(inc,-exc)", width);
				return ret;
			}
		}

		public unsafe bool Draw( ref byte label,  float width)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				fixed (byte* plabel = &label)
				{
					byte ret = ImGui.DrawNative(@this, (byte*)plabel, width);
					return ret != 0;
				}
			}
		}

		public unsafe bool Draw( ref byte label)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				fixed (byte* plabel = &label)
				{
					byte ret = ImGui.DrawNative(@this, (byte*)plabel, (float)(0.0f));
					return ret != 0;
				}
			}
		}

		public unsafe bool Draw( string label,  float width)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = ImGui.DrawNative(@this, pStr0, width);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public unsafe bool Draw( string label)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = ImGui.DrawNative(@this, pStr0, (float)(0.0f));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public unsafe bool IsActive()
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte ret = ImGui.IsActiveNative(@this);
				return ret != 0;
			}
		}

		public unsafe bool PassFilter( byte* text,  byte* textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte ret = ImGui.PassFilterNative(@this, text, textEnd);
				return ret != 0;
			}
		}

		public unsafe bool PassFilter( byte* text)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte ret = ImGui.PassFilterNative(@this, text, (byte*)(default));
				return ret != 0;
			}
		}

		public unsafe bool PassFilter( ref byte text,  byte* textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					byte ret = ImGui.PassFilterNative(@this, (byte*)ptext, textEnd);
					return ret != 0;
				}
			}
		}

		public unsafe bool PassFilter( ref byte text)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					byte ret = ImGui.PassFilterNative(@this, (byte*)ptext, (byte*)(default));
					return ret != 0;
				}
			}
		}

		public unsafe bool PassFilter( string text,  byte* textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = ImGui.PassFilterNative(@this, pStr0, textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public unsafe bool PassFilter( string text)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = ImGui.PassFilterNative(@this, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public unsafe bool PassFilter( byte* text,  ref byte textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					byte ret = ImGui.PassFilterNative(@this, text, (byte*)ptextEnd);
					return ret != 0;
				}
			}
		}

		public unsafe bool PassFilter( byte* text,  string textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = ImGui.PassFilterNative(@this, text, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public unsafe bool PassFilter( ref byte text,  ref byte textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						byte ret = ImGui.PassFilterNative(@this, (byte*)ptext, (byte*)ptextEnd);
						return ret != 0;
					}
				}
			}
		}

		public unsafe bool PassFilter( string text,  string textEnd)
		{
			fixed (ImGuiTextFilter* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = ImGui.PassFilterNative(@this, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorImGuiTextRange
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiTextRange* Data;


		/// <summary>/// To be documented./// </summary>		public unsafe ImVectorImGuiTextRange(int size = default, int capacity = default, ImGuiTextRange* data = default)
		{
			Size = size;
			Capacity = capacity;
			Data = data;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTextRange
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* B;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* E;



		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiTextRange(byte* b = default, byte* e = default)
		{
			B = b;
			E = e;
		}


		public unsafe void Destroy()
		{
			fixed (ImGuiTextRange* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		public unsafe bool empty()
		{
			fixed (ImGuiTextRange* @this = &this)
			{
				byte ret = ImGui.emptyNative(@this);
				return ret != 0;
			}
		}

		public unsafe void split( byte separator,  ImVectorImGuiTextRange* output)
		{
			fixed (ImGuiTextRange* @this = &this)
			{
				ImGui.splitNative(@this, separator, output);
			}
		}

		public unsafe void split( byte separator,  ref ImVectorImGuiTextRange output)
		{
			fixed (ImGuiTextRange* @this = &this)
			{
				fixed (ImVectorImGuiTextRange* poutput = &output)
				{
					ImGui.splitNative(@this, separator, (ImVectorImGuiTextRange*)poutput);
				}
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImBitVector
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVectorImU32 Storage;


		/// <summary>/// To be documented./// </summary>		public unsafe ImBitVector(ImVectorImU32 storage = default)
		{
			Storage = storage;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDataVarInfo
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public int Type;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint Count;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint Offset;


		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiDataVarInfo(int type = default, uint count = default, uint offset = default)
		{
			Type = type;
			Count = count;
			Offset = offset;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDataTypeInfo
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ulong Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* Name;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* PrintFmt;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* ScanFmt;


		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiDataTypeInfo(ulong size = default, byte* name = default, byte* printFmt = default, byte* scanFmt = default)
		{
			Size = size;
			Name = name;
			PrintFmt = printFmt;
			ScanFmt = scanFmt;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiInputTextDeactivateData
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiLocEntry
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiLocKey Key;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* Text;


		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiLocEntry(ImGuiLocKey key = default, byte* text = default)
		{
			Key = key;
			Text = text;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableSettings
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int SaveFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float RefScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short ColumnsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short ColumnsCountMax;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WantApply;


		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiTableSettings(uint id = default, int saveFlags = default, float refScale = default, short columnsCount = default, short columnsCountMax = default, bool wantApply = default)
		{
			ID = id;
			SaveFlags = saveFlags;
			RefScale = refScale;
			ColumnsCount = columnsCount;
			ColumnsCountMax = columnsCountMax;
			WantApply = wantApply ? (byte)1 : (byte)0;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableColumnsSettings
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiWindowSettings
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVec2Ih Pos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVec2Ih Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVec2Ih ViewportPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ViewportId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DockId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ClassId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short DockOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte Collapsed;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WantApply;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WantDelete;


		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiWindowSettings(uint id = default, ImVec2Ih pos = default, ImVec2Ih size = default, ImVec2Ih viewportPos = default, uint viewportId = default, uint dockId = default, uint classId = default, short dockOrder = default, bool collapsed = default, bool wantApply = default, bool wantDelete = default)
		{
			ID = id;
			Pos = pos;
			Size = size;
			ViewportPos = viewportPos;
			ViewportId = viewportId;
			DockId = dockId;
			ClassId = classId;
			DockOrder = dockOrder;
			Collapsed = collapsed ? (byte)1 : (byte)0;
			WantApply = wantApply ? (byte)1 : (byte)0;
			WantDelete = wantDelete ? (byte)1 : (byte)0;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImVectorConstCharPtr
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public int Size;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int Capacity;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte** Data;


		/// <summary>/// To be documented./// </summary>		public unsafe ImVectorConstCharPtr(int size = default, int capacity = default, byte** data = default)
		{
			Size = size;
			Capacity = capacity;
			Data = data;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StbTexteditRow
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public float X0;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float X1;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float BaselineYDelta;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float Ymin;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float Ymax;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int NumChars;


		/// <summary>/// To be documented./// </summary>		public unsafe StbTexteditRow(float x0 = default, float x1 = default, float baselineYDelta = default, float ymin = default, float ymax = default, int numChars = default)
		{
			X0 = x0;
			X1 = x1;
			BaselineYDelta = baselineYDelta;
			Ymin = ymin;
			Ymax = ymax;
			NumChars = numChars;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiDataTypeTempStorage
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte Data_0;
		public byte Data_1;
		public byte Data_2;
		public byte Data_3;
		public byte Data_4;
		public byte Data_5;
		public byte Data_6;
		public byte Data_7;


		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiDataTypeTempStorage(byte* data = default)
		{
			if (data != default)
			{
				Data_0 = data[0];
				Data_1 = data[1];
				Data_2 = data[2];
				Data_3 = data[3];
				Data_4 = data[4];
				Data_5 = data[5];
				Data_6 = data[6];
				Data_7 = data[7];
			}
		}

		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiDataTypeTempStorage(Span<byte> data = default)
		{
			if (data != default)
			{
				Data_0 = data[0];
				Data_1 = data[1];
				Data_2 = data[2];
				Data_3 = data[3];
				Data_4 = data[4];
				Data_5 = data[5];
				Data_6 = data[6];
				Data_7 = data[7];
			}
		}


		/// <summary>
		/// To be documented.
		/// </summary>
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImBitArrayImGuiKeyNamedKeyCOUNTLessImGuiKeyNamedKeyBEGIN
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint Storage_0;
		public uint Storage_1;
		public uint Storage_2;
		public uint Storage_3;
		public uint Storage_4;


		/// <summary>/// To be documented./// </summary>		public unsafe ImBitArrayImGuiKeyNamedKeyCOUNTLessImGuiKeyNamedKeyBEGIN(uint* storage = default)
		{
			if (storage != default)
			{
				Storage_0 = storage[0];
				Storage_1 = storage[1];
				Storage_2 = storage[2];
				Storage_3 = storage[3];
				Storage_4 = storage[4];
			}
		}

		/// <summary>/// To be documented./// </summary>		public unsafe ImBitArrayImGuiKeyNamedKeyCOUNTLessImGuiKeyNamedKeyBEGIN(Span<uint> storage = default)
		{
			if (storage != default)
			{
				Storage_0 = storage[0];
				Storage_1 = storage[1];
				Storage_2 = storage[2];
				Storage_3 = storage[3];
				Storage_4 = storage[4];
			}
		}


		/// <summary>
		/// To be documented.
		/// </summary>
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableColumnSettings
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public float WidthOrWeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint UserID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte Index;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte DisplayOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte SortOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte SortDirection;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsEnabled;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsStretch;


		/// <summary>/// To be documented./// </summary>		public unsafe ImGuiTableColumnSettings(float widthOrWeight = default, uint userId = default, sbyte index = default, sbyte displayOrder = default, sbyte sortOrder = default, byte sortDirection = default, byte isEnabled = default, byte isStretch = default)
		{
			WidthOrWeight = widthOrWeight;
			UserID = userId;
			Index = index;
			DisplayOrder = displayOrder;
			SortOrder = sortOrder;
			SortDirection = sortDirection;
			IsEnabled = isEnabled;
			IsStretch = isStretch;
		}


	}

}
