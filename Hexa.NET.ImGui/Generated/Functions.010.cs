// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		public static void AddRect( ImDrawList* self,  Vector2 pMin,  Vector2 pMax,  uint col,  float rounding,  int flags)
		{
			AddRectNative(self, pMin, pMax, col, rounding, flags, (float)(1.0f));
		}

		public static void AddRect( ImDrawList* self,  Vector2 pMin,  Vector2 pMax,  uint col,  float rounding)
		{
			AddRectNative(self, pMin, pMax, col, rounding, (int)(0), (float)(1.0f));
		}

		public static void AddRect( ImDrawList* self,  Vector2 pMin,  Vector2 pMax,  uint col)
		{
			AddRectNative(self, pMin, pMax, col, (float)(0.0f), (int)(0), (float)(1.0f));
		}

		public static void AddRect( ImDrawList* self,  Vector2 pMin,  Vector2 pMax,  uint col,  int flags)
		{
			AddRectNative(self, pMin, pMax, col, (float)(0.0f), flags, (float)(1.0f));
		}

		public static void AddRect( ImDrawList* self,  Vector2 pMin,  Vector2 pMax,  uint col,  float rounding,  float thickness)
		{
			AddRectNative(self, pMin, pMax, col, rounding, (int)(0), thickness);
		}

		public static void AddRect( ImDrawList* self,  Vector2 pMin,  Vector2 pMax,  uint col,  int flags,  float thickness)
		{
			AddRectNative(self, pMin, pMax, col, (float)(0.0f), flags, thickness);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddRectFilled")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddRectFilledNative(ImDrawList* self, Vector2 pMin, Vector2 pMax, uint col, float rounding, int flags);

		public static void AddRectFilled( ImDrawList* self,  Vector2 pMin,  Vector2 pMax,  uint col,  float rounding,  int flags)
		{
			AddRectFilledNative(self, pMin, pMax, col, rounding, flags);
		}

		public static void AddRectFilled( ImDrawList* self,  Vector2 pMin,  Vector2 pMax,  uint col,  float rounding)
		{
			AddRectFilledNative(self, pMin, pMax, col, rounding, (int)(0));
		}

		public static void AddRectFilled( ImDrawList* self,  Vector2 pMin,  Vector2 pMax,  uint col)
		{
			AddRectFilledNative(self, pMin, pMax, col, (float)(0.0f), (int)(0));
		}

		public static void AddRectFilled( ImDrawList* self,  Vector2 pMin,  Vector2 pMax,  uint col,  int flags)
		{
			AddRectFilledNative(self, pMin, pMax, col, (float)(0.0f), flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddRectFilledMultiColor")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddRectFilledMultiColorNative(ImDrawList* self, Vector2 pMin, Vector2 pMax, uint colUprLeft, uint colUprRight, uint colBotRight, uint colBotLeft);

		public static void AddRectFilledMultiColor( ImDrawList* self,  Vector2 pMin,  Vector2 pMax,  uint colUprLeft,  uint colUprRight,  uint colBotRight,  uint colBotLeft)
		{
			AddRectFilledMultiColorNative(self, pMin, pMax, colUprLeft, colUprRight, colBotRight, colBotLeft);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddQuad")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddQuadNative(ImDrawList* self, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness);

		public static void AddQuad( ImDrawList* self,  Vector2 p1,  Vector2 p2,  Vector2 p3,  Vector2 p4,  uint col,  float thickness)
		{
			AddQuadNative(self, p1, p2, p3, p4, col, thickness);
		}

		public static void AddQuad( ImDrawList* self,  Vector2 p1,  Vector2 p2,  Vector2 p3,  Vector2 p4,  uint col)
		{
			AddQuadNative(self, p1, p2, p3, p4, col, (float)(1.0f));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddQuadFilled")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddQuadFilledNative(ImDrawList* self, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col);

		public static void AddQuadFilled( ImDrawList* self,  Vector2 p1,  Vector2 p2,  Vector2 p3,  Vector2 p4,  uint col)
		{
			AddQuadFilledNative(self, p1, p2, p3, p4, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddTriangle")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddTriangleNative(ImDrawList* self, Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness);

		public static void AddTriangle( ImDrawList* self,  Vector2 p1,  Vector2 p2,  Vector2 p3,  uint col,  float thickness)
		{
			AddTriangleNative(self, p1, p2, p3, col, thickness);
		}

		public static void AddTriangle( ImDrawList* self,  Vector2 p1,  Vector2 p2,  Vector2 p3,  uint col)
		{
			AddTriangleNative(self, p1, p2, p3, col, (float)(1.0f));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddTriangleFilled")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddTriangleFilledNative(ImDrawList* self, Vector2 p1, Vector2 p2, Vector2 p3, uint col);

		public static void AddTriangleFilled( ImDrawList* self,  Vector2 p1,  Vector2 p2,  Vector2 p3,  uint col)
		{
			AddTriangleFilledNative(self, p1, p2, p3, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddCircle")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddCircleNative(ImDrawList* self, Vector2 center, float radius, uint col, int numSegments, float thickness);

		public static void AddCircle( ImDrawList* self,  Vector2 center,  float radius,  uint col,  int numSegments,  float thickness)
		{
			AddCircleNative(self, center, radius, col, numSegments, thickness);
		}

		public static void AddCircle( ImDrawList* self,  Vector2 center,  float radius,  uint col,  int numSegments)
		{
			AddCircleNative(self, center, radius, col, numSegments, (float)(1.0f));
		}

		public static void AddCircle( ImDrawList* self,  Vector2 center,  float radius,  uint col)
		{
			AddCircleNative(self, center, radius, col, (int)(0), (float)(1.0f));
		}

		public static void AddCircle( ImDrawList* self,  Vector2 center,  float radius,  uint col,  float thickness)
		{
			AddCircleNative(self, center, radius, col, (int)(0), thickness);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddCircleFilled")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddCircleFilledNative(ImDrawList* self, Vector2 center, float radius, uint col, int numSegments);

		public static void AddCircleFilled( ImDrawList* self,  Vector2 center,  float radius,  uint col,  int numSegments)
		{
			AddCircleFilledNative(self, center, radius, col, numSegments);
		}

		public static void AddCircleFilled( ImDrawList* self,  Vector2 center,  float radius,  uint col)
		{
			AddCircleFilledNative(self, center, radius, col, (int)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddNgon")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddNgonNative(ImDrawList* self, Vector2 center, float radius, uint col, int numSegments, float thickness);

		public static void AddNgon( ImDrawList* self,  Vector2 center,  float radius,  uint col,  int numSegments,  float thickness)
		{
			AddNgonNative(self, center, radius, col, numSegments, thickness);
		}

		public static void AddNgon( ImDrawList* self,  Vector2 center,  float radius,  uint col,  int numSegments)
		{
			AddNgonNative(self, center, radius, col, numSegments, (float)(1.0f));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddNgonFilled")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddNgonFilledNative(ImDrawList* self, Vector2 center, float radius, uint col, int numSegments);

		public static void AddNgonFilled( ImDrawList* self,  Vector2 center,  float radius,  uint col,  int numSegments)
		{
			AddNgonFilledNative(self, center, radius, col, numSegments);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddEllipse")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddEllipseNative(ImDrawList* self, Vector2 center, float radiusX, float radiusY, uint col, float rot, int numSegments, float thickness);

		public static void AddEllipse( ImDrawList* self,  Vector2 center,  float radiusX,  float radiusY,  uint col,  float rot,  int numSegments,  float thickness)
		{
			AddEllipseNative(self, center, radiusX, radiusY, col, rot, numSegments, thickness);
		}

		public static void AddEllipse( ImDrawList* self,  Vector2 center,  float radiusX,  float radiusY,  uint col,  float rot,  int numSegments)
		{
			AddEllipseNative(self, center, radiusX, radiusY, col, rot, numSegments, (float)(1.0f));
		}

		public static void AddEllipse( ImDrawList* self,  Vector2 center,  float radiusX,  float radiusY,  uint col,  float rot)
		{
			AddEllipseNative(self, center, radiusX, radiusY, col, rot, (int)(0), (float)(1.0f));
		}

		public static void AddEllipse( ImDrawList* self,  Vector2 center,  float radiusX,  float radiusY,  uint col)
		{
			AddEllipseNative(self, center, radiusX, radiusY, col, (float)(0.0f), (int)(0), (float)(1.0f));
		}

		public static void AddEllipse( ImDrawList* self,  Vector2 center,  float radiusX,  float radiusY,  uint col,  int numSegments)
		{
			AddEllipseNative(self, center, radiusX, radiusY, col, (float)(0.0f), numSegments, (float)(1.0f));
		}

		public static void AddEllipse( ImDrawList* self,  Vector2 center,  float radiusX,  float radiusY,  uint col,  float rot,  float thickness)
		{
			AddEllipseNative(self, center, radiusX, radiusY, col, rot, (int)(0), thickness);
		}

		public static void AddEllipse( ImDrawList* self,  Vector2 center,  float radiusX,  float radiusY,  uint col,  int numSegments,  float thickness)
		{
			AddEllipseNative(self, center, radiusX, radiusY, col, (float)(0.0f), numSegments, thickness);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddEllipseFilled")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddEllipseFilledNative(ImDrawList* self, Vector2 center, float radiusX, float radiusY, uint col, float rot, int numSegments);

		public static void AddEllipseFilled( ImDrawList* self,  Vector2 center,  float radiusX,  float radiusY,  uint col,  float rot,  int numSegments)
		{
			AddEllipseFilledNative(self, center, radiusX, radiusY, col, rot, numSegments);
		}

		public static void AddEllipseFilled( ImDrawList* self,  Vector2 center,  float radiusX,  float radiusY,  uint col,  float rot)
		{
			AddEllipseFilledNative(self, center, radiusX, radiusY, col, rot, (int)(0));
		}

		public static void AddEllipseFilled( ImDrawList* self,  Vector2 center,  float radiusX,  float radiusY,  uint col)
		{
			AddEllipseFilledNative(self, center, radiusX, radiusY, col, (float)(0.0f), (int)(0));
		}

		public static void AddEllipseFilled( ImDrawList* self,  Vector2 center,  float radiusX,  float radiusY,  uint col,  int numSegments)
		{
			AddEllipseFilledNative(self, center, radiusX, radiusY, col, (float)(0.0f), numSegments);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddText_Vec2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddTextNative(ImDrawList* self, Vector2 pos, uint col, byte* textBegin, byte* textEnd);

		public static void AddText( ImDrawList* self,  Vector2 pos,  uint col,  byte* textBegin,  byte* textEnd)
		{
			AddTextNative(self, pos, col, textBegin, textEnd);
		}

		public static void AddText( ImDrawList* self,  Vector2 pos,  uint col,  byte* textBegin)
		{
			AddTextNative(self, pos, col, textBegin, (byte*)(default));
		}

		public static void AddText( ImDrawList* self,  Vector2 pos,  uint col,  ref byte textBegin,  byte* textEnd)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				AddTextNative(self, pos, col, (byte*)ptextBegin, textEnd);
			}
		}

		public static void AddText( ImDrawList* self,  Vector2 pos,  uint col,  ref byte textBegin)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				AddTextNative(self, pos, col, (byte*)ptextBegin, (byte*)(default));
			}
		}

		public static void AddText( ImDrawList* self,  Vector2 pos,  uint col,  string textBegin,  byte* textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, pos, col, pStr0, textEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImDrawList* self,  Vector2 pos,  uint col,  string textBegin)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, pos, col, pStr0, (byte*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImDrawList* self,  Vector2 pos,  uint col,  byte* textBegin,  ref byte textEnd)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				AddTextNative(self, pos, col, textBegin, (byte*)ptextEnd);
			}
		}

		public static void AddText( ImDrawList* self,  Vector2 pos,  uint col,  byte* textBegin,  string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, pos, col, textBegin, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImDrawList* self,  Vector2 pos,  uint col,  ref byte textBegin,  ref byte textEnd)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					AddTextNative(self, pos, col, (byte*)ptextBegin, (byte*)ptextEnd);
				}
			}
		}

		public static void AddText( ImDrawList* self,  Vector2 pos,  uint col,  string textBegin,  string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			AddTextNative(self, pos, col, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddText_FontPtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddTextNative(ImDrawList* self, ImFont* font, float fontSize, Vector2 pos, uint col, byte* textBegin, byte* textEnd, float wrapWidth, Vector4* cpuFineClipRect);

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  byte* textEnd,  float wrapWidth,  Vector4* cpuFineClipRect)
		{
			AddTextNative(self, font, fontSize, pos, col, textBegin, textEnd, wrapWidth, cpuFineClipRect);
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  byte* textEnd,  float wrapWidth)
		{
			AddTextNative(self, font, fontSize, pos, col, textBegin, textEnd, wrapWidth, (Vector4*)(default));
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  byte* textEnd)
		{
			AddTextNative(self, font, fontSize, pos, col, textBegin, textEnd, (float)(0.0f), (Vector4*)(default));
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin)
		{
			AddTextNative(self, font, fontSize, pos, col, textBegin, (byte*)(default), (float)(0.0f), (Vector4*)(default));
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  float wrapWidth)
		{
			AddTextNative(self, font, fontSize, pos, col, textBegin, (byte*)(default), wrapWidth, (Vector4*)(default));
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  byte* textEnd,  Vector4* cpuFineClipRect)
		{
			AddTextNative(self, font, fontSize, pos, col, textBegin, textEnd, (float)(0.0f), cpuFineClipRect);
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  Vector4* cpuFineClipRect)
		{
			AddTextNative(self, font, fontSize, pos, col, textBegin, (byte*)(default), (float)(0.0f), cpuFineClipRect);
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  float wrapWidth,  Vector4* cpuFineClipRect)
		{
			AddTextNative(self, font, fontSize, pos, col, textBegin, (byte*)(default), wrapWidth, cpuFineClipRect);
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  byte* textEnd,  float wrapWidth,  Vector4* cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, textEnd, wrapWidth, cpuFineClipRect);
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  byte* textEnd,  float wrapWidth)
		{
			fixed (ImFont* pfont = &font)
			{
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, textEnd, wrapWidth, (Vector4*)(default));
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  byte* textEnd)
		{
			fixed (ImFont* pfont = &font)
			{
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, textEnd, (float)(0.0f), (Vector4*)(default));
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin)
		{
			fixed (ImFont* pfont = &font)
			{
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)(default), (float)(0.0f), (Vector4*)(default));
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  float wrapWidth)
		{
			fixed (ImFont* pfont = &font)
			{
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)(default), wrapWidth, (Vector4*)(default));
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  byte* textEnd,  Vector4* cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, textEnd, (float)(0.0f), cpuFineClipRect);
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  Vector4* cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)(default), (float)(0.0f), cpuFineClipRect);
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  float wrapWidth,  Vector4* cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)(default), wrapWidth, cpuFineClipRect);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  byte* textEnd,  float wrapWidth,  Vector4* cpuFineClipRect)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				AddTextNative(self, font, fontSize, pos, col, (byte*)ptextBegin, textEnd, wrapWidth, cpuFineClipRect);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  byte* textEnd,  float wrapWidth)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				AddTextNative(self, font, fontSize, pos, col, (byte*)ptextBegin, textEnd, wrapWidth, (Vector4*)(default));
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  byte* textEnd)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				AddTextNative(self, font, fontSize, pos, col, (byte*)ptextBegin, textEnd, (float)(0.0f), (Vector4*)(default));
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				AddTextNative(self, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), (float)(0.0f), (Vector4*)(default));
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  float wrapWidth)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				AddTextNative(self, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), wrapWidth, (Vector4*)(default));
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  byte* textEnd,  Vector4* cpuFineClipRect)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				AddTextNative(self, font, fontSize, pos, col, (byte*)ptextBegin, textEnd, (float)(0.0f), cpuFineClipRect);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  Vector4* cpuFineClipRect)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				AddTextNative(self, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), (float)(0.0f), cpuFineClipRect);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  float wrapWidth,  Vector4* cpuFineClipRect)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				AddTextNative(self, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), wrapWidth, cpuFineClipRect);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  byte* textEnd,  float wrapWidth,  Vector4* cpuFineClipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, font, fontSize, pos, col, pStr0, textEnd, wrapWidth, cpuFineClipRect);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  byte* textEnd,  float wrapWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, font, fontSize, pos, col, pStr0, textEnd, wrapWidth, (Vector4*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  byte* textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, font, fontSize, pos, col, pStr0, textEnd, (float)(0.0f), (Vector4*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  string textBegin)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, font, fontSize, pos, col, pStr0, (byte*)(default), (float)(0.0f), (Vector4*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  float wrapWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, font, fontSize, pos, col, pStr0, (byte*)(default), wrapWidth, (Vector4*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  byte* textEnd,  Vector4* cpuFineClipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, font, fontSize, pos, col, pStr0, textEnd, (float)(0.0f), cpuFineClipRect);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  Vector4* cpuFineClipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, font, fontSize, pos, col, pStr0, (byte*)(default), (float)(0.0f), cpuFineClipRect);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  float wrapWidth,  Vector4* cpuFineClipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, font, fontSize, pos, col, pStr0, (byte*)(default), wrapWidth, cpuFineClipRect);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  byte* textEnd,  float wrapWidth,  Vector4* cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, textEnd, wrapWidth, cpuFineClipRect);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  byte* textEnd,  float wrapWidth)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, textEnd, wrapWidth, (Vector4*)(default));
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  byte* textEnd)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, textEnd, (float)(0.0f), (Vector4*)(default));
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), (float)(0.0f), (Vector4*)(default));
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  float wrapWidth)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), wrapWidth, (Vector4*)(default));
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  byte* textEnd,  Vector4* cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, textEnd, (float)(0.0f), cpuFineClipRect);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  Vector4* cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), (float)(0.0f), cpuFineClipRect);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  float wrapWidth,  Vector4* cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), wrapWidth, cpuFineClipRect);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  byte* textEnd,  float wrapWidth,  Vector4* cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, pStr0, textEnd, wrapWidth, cpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  byte* textEnd,  float wrapWidth)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, pStr0, textEnd, wrapWidth, (Vector4*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  byte* textEnd)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, pStr0, textEnd, (float)(0.0f), (Vector4*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  string textBegin)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, pStr0, (byte*)(default), (float)(0.0f), (Vector4*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  float wrapWidth)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, pStr0, (byte*)(default), wrapWidth, (Vector4*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  byte* textEnd,  Vector4* cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, pStr0, textEnd, (float)(0.0f), cpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  Vector4* cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, pStr0, (byte*)(default), (float)(0.0f), cpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  float wrapWidth,  Vector4* cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, pStr0, (byte*)(default), wrapWidth, cpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  ref byte textEnd,  float wrapWidth,  Vector4* cpuFineClipRect)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				AddTextNative(self, font, fontSize, pos, col, textBegin, (byte*)ptextEnd, wrapWidth, cpuFineClipRect);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  ref byte textEnd,  float wrapWidth)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				AddTextNative(self, font, fontSize, pos, col, textBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)(default));
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  ref byte textEnd)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				AddTextNative(self, font, fontSize, pos, col, textBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)(default));
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  ref byte textEnd,  Vector4* cpuFineClipRect)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				AddTextNative(self, font, fontSize, pos, col, textBegin, (byte*)ptextEnd, (float)(0.0f), cpuFineClipRect);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  string textEnd,  float wrapWidth,  Vector4* cpuFineClipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, font, fontSize, pos, col, textBegin, pStr0, wrapWidth, cpuFineClipRect);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  string textEnd,  float wrapWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, font, fontSize, pos, col, textBegin, pStr0, wrapWidth, (Vector4*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, font, fontSize, pos, col, textBegin, pStr0, (float)(0.0f), (Vector4*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  string textEnd,  Vector4* cpuFineClipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, font, fontSize, pos, col, textBegin, pStr0, (float)(0.0f), cpuFineClipRect);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  ref byte textEnd,  float wrapWidth,  Vector4* cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)ptextEnd, wrapWidth, cpuFineClipRect);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  ref byte textEnd,  float wrapWidth)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)(default));
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  ref byte textEnd)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)(default));
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  ref byte textEnd,  Vector4* cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)ptextEnd, (float)(0.0f), cpuFineClipRect);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  string textEnd,  float wrapWidth,  Vector4* cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, pStr0, wrapWidth, cpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  string textEnd,  float wrapWidth)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, pStr0, wrapWidth, (Vector4*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  string textEnd)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, pStr0, (float)(0.0f), (Vector4*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  string textEnd,  Vector4* cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, pStr0, (float)(0.0f), cpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  ref byte textEnd,  float wrapWidth,  Vector4* cpuFineClipRect)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					AddTextNative(self, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, cpuFineClipRect);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  ref byte textEnd,  float wrapWidth)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					AddTextNative(self, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)(default));
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  ref byte textEnd)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					AddTextNative(self, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)(default));
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  ref byte textEnd,  Vector4* cpuFineClipRect)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					AddTextNative(self, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), cpuFineClipRect);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  string textEnd,  float wrapWidth,  Vector4* cpuFineClipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			AddTextNative(self, font, fontSize, pos, col, pStr0, pStr1, wrapWidth, cpuFineClipRect);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  string textEnd,  float wrapWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			AddTextNative(self, font, fontSize, pos, col, pStr0, pStr1, wrapWidth, (Vector4*)(default));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			AddTextNative(self, font, fontSize, pos, col, pStr0, pStr1, (float)(0.0f), (Vector4*)(default));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  string textEnd,  Vector4* cpuFineClipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			AddTextNative(self, font, fontSize, pos, col, pStr0, pStr1, (float)(0.0f), cpuFineClipRect);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  ref byte textEnd,  float wrapWidth,  Vector4* cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, cpuFineClipRect);
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  ref byte textEnd,  float wrapWidth)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)(default));
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  ref byte textEnd)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)(default));
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  ref byte textEnd,  Vector4* cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), cpuFineClipRect);
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  string textEnd,  float wrapWidth,  Vector4* cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, pStr0, pStr1, wrapWidth, cpuFineClipRect);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  string textEnd,  float wrapWidth)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, pStr0, pStr1, wrapWidth, (Vector4*)(default));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  string textEnd)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, pStr0, pStr1, (float)(0.0f), (Vector4*)(default));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  string textEnd,  Vector4* cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, pStr0, pStr1, (float)(0.0f), cpuFineClipRect);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  byte* textEnd,  float wrapWidth,  ref Vector4 cpuFineClipRect)
		{
			fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
			{
				AddTextNative(self, font, fontSize, pos, col, textBegin, textEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  byte* textEnd,  ref Vector4 cpuFineClipRect)
		{
			fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
			{
				AddTextNative(self, font, fontSize, pos, col, textBegin, textEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  ref Vector4 cpuFineClipRect)
		{
			fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
			{
				AddTextNative(self, font, fontSize, pos, col, textBegin, (byte*)(default), (float)(0.0f), (Vector4*)pcpuFineClipRect);
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  float wrapWidth,  ref Vector4 cpuFineClipRect)
		{
			fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
			{
				AddTextNative(self, font, fontSize, pos, col, textBegin, (byte*)(default), wrapWidth, (Vector4*)pcpuFineClipRect);
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  byte* textEnd,  float wrapWidth,  ref Vector4 cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, textEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  byte* textEnd,  ref Vector4 cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, textEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  ref Vector4 cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)(default), (float)(0.0f), (Vector4*)pcpuFineClipRect);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  float wrapWidth,  ref Vector4 cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)(default), wrapWidth, (Vector4*)pcpuFineClipRect);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  byte* textEnd,  float wrapWidth,  ref Vector4 cpuFineClipRect)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					AddTextNative(self, font, fontSize, pos, col, (byte*)ptextBegin, textEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  byte* textEnd,  ref Vector4 cpuFineClipRect)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					AddTextNative(self, font, fontSize, pos, col, (byte*)ptextBegin, textEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  ref Vector4 cpuFineClipRect)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					AddTextNative(self, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), (float)(0.0f), (Vector4*)pcpuFineClipRect);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  float wrapWidth,  ref Vector4 cpuFineClipRect)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					AddTextNative(self, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), wrapWidth, (Vector4*)pcpuFineClipRect);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  byte* textEnd,  float wrapWidth,  ref Vector4 cpuFineClipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
			{
				AddTextNative(self, font, fontSize, pos, col, pStr0, textEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  byte* textEnd,  ref Vector4 cpuFineClipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
			{
				AddTextNative(self, font, fontSize, pos, col, pStr0, textEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  ref Vector4 cpuFineClipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
			{
				AddTextNative(self, font, fontSize, pos, col, pStr0, (byte*)(default), (float)(0.0f), (Vector4*)pcpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  float wrapWidth,  ref Vector4 cpuFineClipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
			{
				AddTextNative(self, font, fontSize, pos, col, pStr0, (byte*)(default), wrapWidth, (Vector4*)pcpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  byte* textEnd,  float wrapWidth,  ref Vector4 cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, textEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  byte* textEnd,  ref Vector4 cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, textEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  ref Vector4 cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), (float)(0.0f), (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  float wrapWidth,  ref Vector4 cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)(default), wrapWidth, (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  byte* textEnd,  float wrapWidth,  ref Vector4 cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, pStr0, textEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  byte* textEnd,  ref Vector4 cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, pStr0, textEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  ref Vector4 cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, pStr0, (byte*)(default), (float)(0.0f), (Vector4*)pcpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  float wrapWidth,  ref Vector4 cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, pStr0, (byte*)(default), wrapWidth, (Vector4*)pcpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  ref byte textEnd,  float wrapWidth,  ref Vector4 cpuFineClipRect)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					AddTextNative(self, font, fontSize, pos, col, textBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  ref byte textEnd,  ref Vector4 cpuFineClipRect)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					AddTextNative(self, font, fontSize, pos, col, textBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  string textEnd,  float wrapWidth,  ref Vector4 cpuFineClipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
			{
				AddTextNative(self, font, fontSize, pos, col, textBegin, pStr0, wrapWidth, (Vector4*)pcpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  string textEnd,  ref Vector4 cpuFineClipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
			{
				AddTextNative(self, font, fontSize, pos, col, textBegin, pStr0, (float)(0.0f), (Vector4*)pcpuFineClipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  ref byte textEnd,  float wrapWidth,  ref Vector4 cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  ref byte textEnd,  ref Vector4 cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  string textEnd,  float wrapWidth,  ref Vector4 cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, pStr0, wrapWidth, (Vector4*)pcpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  byte* textBegin,  string textEnd,  ref Vector4 cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, textBegin, pStr0, (float)(0.0f), (Vector4*)pcpuFineClipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  ref byte textEnd,  float wrapWidth,  ref Vector4 cpuFineClipRect)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						AddTextNative(self, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  ref byte textEnd,  ref Vector4 cpuFineClipRect)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
					{
						AddTextNative(self, font, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  string textEnd,  float wrapWidth,  ref Vector4 cpuFineClipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
			{
				AddTextNative(self, font, fontSize, pos, col, pStr0, pStr1, wrapWidth, (Vector4*)pcpuFineClipRect);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ImFont* font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  string textEnd,  ref Vector4 cpuFineClipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
			{
				AddTextNative(self, font, fontSize, pos, col, pStr0, pStr1, (float)(0.0f), (Vector4*)pcpuFineClipRect);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  ref byte textEnd,  float wrapWidth,  ref Vector4 cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
						{
							AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, wrapWidth, (Vector4*)pcpuFineClipRect);
						}
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  ref byte textBegin,  ref byte textEnd,  ref Vector4 cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
						{
							AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, (byte*)ptextBegin, (byte*)ptextEnd, (float)(0.0f), (Vector4*)pcpuFineClipRect);
						}
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  string textEnd,  float wrapWidth,  ref Vector4 cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, pStr0, pStr1, wrapWidth, (Vector4*)pcpuFineClipRect);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		public static void AddText( ImDrawList* self,  ref ImFont font,  float fontSize,  Vector2 pos,  uint col,  string textBegin,  string textEnd,  ref Vector4 cpuFineClipRect)
		{
			fixed (ImFont* pfont = &font)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textBegin != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textBegin);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (Vector4* pcpuFineClipRect = &cpuFineClipRect)
				{
					AddTextNative(self, (ImFont*)pfont, fontSize, pos, col, pStr0, pStr1, (float)(0.0f), (Vector4*)pcpuFineClipRect);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddPolyline")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddPolylineNative(ImDrawList* self, Vector2* points, int numPoints, uint col, int flags, float thickness);

		public static void AddPolyline( ImDrawList* self,  Vector2* points,  int numPoints,  uint col,  int flags,  float thickness)
		{
			AddPolylineNative(self, points, numPoints, col, flags, thickness);
		}

		public static void AddPolyline( ImDrawList* self,  ref Vector2 points,  int numPoints,  uint col,  int flags,  float thickness)
		{
			fixed (Vector2* ppoints = &points)
			{
				AddPolylineNative(self, (Vector2*)ppoints, numPoints, col, flags, thickness);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddConvexPolyFilled")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddConvexPolyFilledNative(ImDrawList* self, Vector2* points, int numPoints, uint col);

		public static void AddConvexPolyFilled( ImDrawList* self,  Vector2* points,  int numPoints,  uint col)
		{
			AddConvexPolyFilledNative(self, points, numPoints, col);
		}

		public static void AddConvexPolyFilled( ImDrawList* self,  ref Vector2 points,  int numPoints,  uint col)
		{
			fixed (Vector2* ppoints = &points)
			{
				AddConvexPolyFilledNative(self, (Vector2*)ppoints, numPoints, col);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddBezierCubic")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddBezierCubicNative(ImDrawList* self, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness, int numSegments);

		public static void AddBezierCubic( ImDrawList* self,  Vector2 p1,  Vector2 p2,  Vector2 p3,  Vector2 p4,  uint col,  float thickness,  int numSegments)
		{
			AddBezierCubicNative(self, p1, p2, p3, p4, col, thickness, numSegments);
		}

		public static void AddBezierCubic( ImDrawList* self,  Vector2 p1,  Vector2 p2,  Vector2 p3,  Vector2 p4,  uint col,  float thickness)
		{
			AddBezierCubicNative(self, p1, p2, p3, p4, col, thickness, (int)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddBezierQuadratic")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddBezierQuadraticNative(ImDrawList* self, Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness, int numSegments);

		public static void AddBezierQuadratic( ImDrawList* self,  Vector2 p1,  Vector2 p2,  Vector2 p3,  uint col,  float thickness,  int numSegments)
		{
			AddBezierQuadraticNative(self, p1, p2, p3, col, thickness, numSegments);
		}

		public static void AddBezierQuadratic( ImDrawList* self,  Vector2 p1,  Vector2 p2,  Vector2 p3,  uint col,  float thickness)
		{
			AddBezierQuadraticNative(self, p1, p2, p3, col, thickness, (int)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddImage")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddImageNative(ImDrawList* self, ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, Vector2 uvMax, uint col);

		public static void AddImage( ImDrawList* self,  ImTextureID userTextureId,  Vector2 pMin,  Vector2 pMax,  Vector2 uvMin,  Vector2 uvMax,  uint col)
		{
			AddImageNative(self, userTextureId, pMin, pMax, uvMin, uvMax, col);
		}

		public static void AddImage( ImDrawList* self,  ImTextureID userTextureId,  Vector2 pMin,  Vector2 pMax,  Vector2 uvMin,  Vector2 uvMax)
		{
			AddImageNative(self, userTextureId, pMin, pMax, uvMin, uvMax, (uint)(4294967295));
		}

		public static void AddImage( ImDrawList* self,  ImTextureID userTextureId,  Vector2 pMin,  Vector2 pMax,  Vector2 uvMin)
		{
			AddImageNative(self, userTextureId, pMin, pMax, uvMin, (Vector2)(new Vector2(1,1)), (uint)(4294967295));
		}

		public static void AddImage( ImDrawList* self,  ImTextureID userTextureId,  Vector2 pMin,  Vector2 pMax)
		{
			AddImageNative(self, userTextureId, pMin, pMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (uint)(4294967295));
		}

		public static void AddImage( ImDrawList* self,  ImTextureID userTextureId,  Vector2 pMin,  Vector2 pMax,  Vector2 uvMin,  uint col)
		{
			AddImageNative(self, userTextureId, pMin, pMax, uvMin, (Vector2)(new Vector2(1,1)), col);
		}

		public static void AddImage( ImDrawList* self,  ImTextureID userTextureId,  Vector2 pMin,  Vector2 pMax,  uint col)
		{
			AddImageNative(self, userTextureId, pMin, pMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddImageQuad")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddImageQuadNative(ImDrawList* self, ImTextureID userTextureId, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector2 uv4, uint col);

		public static void AddImageQuad( ImDrawList* self,  ImTextureID userTextureId,  Vector2 p1,  Vector2 p2,  Vector2 p3,  Vector2 p4,  Vector2 uv1,  Vector2 uv2,  Vector2 uv3,  Vector2 uv4,  uint col)
		{
			AddImageQuadNative(self, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, uv4, col);
		}

		public static void AddImageQuad( ImDrawList* self,  ImTextureID userTextureId,  Vector2 p1,  Vector2 p2,  Vector2 p3,  Vector2 p4,  Vector2 uv1,  Vector2 uv2,  Vector2 uv3,  Vector2 uv4)
		{
			AddImageQuadNative(self, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, uv4, (uint)(4294967295));
		}

		public static void AddImageQuad( ImDrawList* self,  ImTextureID userTextureId,  Vector2 p1,  Vector2 p2,  Vector2 p3,  Vector2 p4,  Vector2 uv1,  Vector2 uv2,  Vector2 uv3)
		{
			AddImageQuadNative(self, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, (Vector2)(new Vector2(0,1)), (uint)(4294967295));
		}

		public static void AddImageQuad( ImDrawList* self,  ImTextureID userTextureId,  Vector2 p1,  Vector2 p2,  Vector2 p3,  Vector2 p4,  Vector2 uv1,  Vector2 uv2)
		{
			AddImageQuadNative(self, userTextureId, p1, p2, p3, p4, uv1, uv2, (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
		}

		public static void AddImageQuad( ImDrawList* self,  ImTextureID userTextureId,  Vector2 p1,  Vector2 p2,  Vector2 p3,  Vector2 p4,  Vector2 uv1)
		{
			AddImageQuadNative(self, userTextureId, p1, p2, p3, p4, uv1, (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
		}

		public static void AddImageQuad( ImDrawList* self,  ImTextureID userTextureId,  Vector2 p1,  Vector2 p2,  Vector2 p3,  Vector2 p4)
		{
			AddImageQuadNative(self, userTextureId, p1, p2, p3, p4, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), (uint)(4294967295));
		}

		public static void AddImageQuad( ImDrawList* self,  ImTextureID userTextureId,  Vector2 p1,  Vector2 p2,  Vector2 p3,  Vector2 p4,  Vector2 uv1,  Vector2 uv2,  Vector2 uv3,  uint col)
		{
			AddImageQuadNative(self, userTextureId, p1, p2, p3, p4, uv1, uv2, uv3, (Vector2)(new Vector2(0,1)), col);
		}

		public static void AddImageQuad( ImDrawList* self,  ImTextureID userTextureId,  Vector2 p1,  Vector2 p2,  Vector2 p3,  Vector2 p4,  Vector2 uv1,  Vector2 uv2,  uint col)
		{
			AddImageQuadNative(self, userTextureId, p1, p2, p3, p4, uv1, uv2, (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), col);
		}

		public static void AddImageQuad( ImDrawList* self,  ImTextureID userTextureId,  Vector2 p1,  Vector2 p2,  Vector2 p3,  Vector2 p4,  Vector2 uv1,  uint col)
		{
			AddImageQuadNative(self, userTextureId, p1, p2, p3, p4, uv1, (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), col);
		}

		public static void AddImageQuad( ImDrawList* self,  ImTextureID userTextureId,  Vector2 p1,  Vector2 p2,  Vector2 p3,  Vector2 p4,  uint col)
		{
			AddImageQuadNative(self, userTextureId, p1, p2, p3, p4, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,0)), (Vector2)(new Vector2(1,1)), (Vector2)(new Vector2(0,1)), col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddImageRounded")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddImageRoundedNative(ImDrawList* self, ImTextureID userTextureId, Vector2 pMin, Vector2 pMax, Vector2 uvMin, Vector2 uvMax, uint col, float rounding, int flags);

		public static void AddImageRounded( ImDrawList* self,  ImTextureID userTextureId,  Vector2 pMin,  Vector2 pMax,  Vector2 uvMin,  Vector2 uvMax,  uint col,  float rounding,  int flags)
		{
			AddImageRoundedNative(self, userTextureId, pMin, pMax, uvMin, uvMax, col, rounding, flags);
		}

		public static void AddImageRounded( ImDrawList* self,  ImTextureID userTextureId,  Vector2 pMin,  Vector2 pMax,  Vector2 uvMin,  Vector2 uvMax,  uint col,  float rounding)
		{
			AddImageRoundedNative(self, userTextureId, pMin, pMax, uvMin, uvMax, col, rounding, (int)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_PathClear")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PathClearNative(ImDrawList* self);

		public static void PathClear( ImDrawList* self)
		{
			PathClearNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_PathLineTo")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PathLineToNative(ImDrawList* self, Vector2 pos);

		public static void PathLineTo( ImDrawList* self,  Vector2 pos)
		{
			PathLineToNative(self, pos);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_PathLineToMergeDuplicate")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PathLineToMergeDuplicateNative(ImDrawList* self, Vector2 pos);

		public static void PathLineToMergeDuplicate( ImDrawList* self,  Vector2 pos)
		{
			PathLineToMergeDuplicateNative(self, pos);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_PathFillConvex")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PathFillConvexNative(ImDrawList* self, uint col);

		public static void PathFillConvex( ImDrawList* self,  uint col)
		{
			PathFillConvexNative(self, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_PathStroke")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PathStrokeNative(ImDrawList* self, uint col, int flags, float thickness);

		public static void PathStroke( ImDrawList* self,  uint col,  int flags,  float thickness)
		{
			PathStrokeNative(self, col, flags, thickness);
		}

		public static void PathStroke( ImDrawList* self,  uint col,  int flags)
		{
			PathStrokeNative(self, col, flags, (float)(1.0f));
		}

		public static void PathStroke( ImDrawList* self,  uint col)
		{
			PathStrokeNative(self, col, (int)(0), (float)(1.0f));
		}

		public static void PathStroke( ImDrawList* self,  uint col,  float thickness)
		{
			PathStrokeNative(self, col, (int)(0), thickness);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_PathArcTo")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PathArcToNative(ImDrawList* self, Vector2 center, float radius, float aMin, float aMax, int numSegments);

		public static void PathArcTo( ImDrawList* self,  Vector2 center,  float radius,  float aMin,  float aMax,  int numSegments)
		{
			PathArcToNative(self, center, radius, aMin, aMax, numSegments);
		}

		public static void PathArcTo( ImDrawList* self,  Vector2 center,  float radius,  float aMin,  float aMax)
		{
			PathArcToNative(self, center, radius, aMin, aMax, (int)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_PathArcToFast")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PathArcToFastNative(ImDrawList* self, Vector2 center, float radius, int aMinOf12, int aMaxOf12);

		public static void PathArcToFast( ImDrawList* self,  Vector2 center,  float radius,  int aMinOf12,  int aMaxOf12)
		{
			PathArcToFastNative(self, center, radius, aMinOf12, aMaxOf12);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_PathEllipticalArcTo")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PathEllipticalArcToNative(ImDrawList* self, Vector2 center, float radiusX, float radiusY, float rot, float aMin, float aMax, int numSegments);

		public static void PathEllipticalArcTo( ImDrawList* self,  Vector2 center,  float radiusX,  float radiusY,  float rot,  float aMin,  float aMax,  int numSegments)
		{
			PathEllipticalArcToNative(self, center, radiusX, radiusY, rot, aMin, aMax, numSegments);
		}

		public static void PathEllipticalArcTo( ImDrawList* self,  Vector2 center,  float radiusX,  float radiusY,  float rot,  float aMin,  float aMax)
		{
			PathEllipticalArcToNative(self, center, radiusX, radiusY, rot, aMin, aMax, (int)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_PathBezierCubicCurveTo")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PathBezierCubicCurveToNative(ImDrawList* self, Vector2 p2, Vector2 p3, Vector2 p4, int numSegments);

		public static void PathBezierCubicCurveTo( ImDrawList* self,  Vector2 p2,  Vector2 p3,  Vector2 p4,  int numSegments)
		{
			PathBezierCubicCurveToNative(self, p2, p3, p4, numSegments);
		}

		public static void PathBezierCubicCurveTo( ImDrawList* self,  Vector2 p2,  Vector2 p3,  Vector2 p4)
		{
			PathBezierCubicCurveToNative(self, p2, p3, p4, (int)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_PathBezierQuadraticCurveTo")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PathBezierQuadraticCurveToNative(ImDrawList* self, Vector2 p2, Vector2 p3, int numSegments);

		public static void PathBezierQuadraticCurveTo( ImDrawList* self,  Vector2 p2,  Vector2 p3,  int numSegments)
		{
			PathBezierQuadraticCurveToNative(self, p2, p3, numSegments);
		}

		public static void PathBezierQuadraticCurveTo( ImDrawList* self,  Vector2 p2,  Vector2 p3)
		{
			PathBezierQuadraticCurveToNative(self, p2, p3, (int)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_PathRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PathRectNative(ImDrawList* self, Vector2 rectMin, Vector2 rectMax, float rounding, int flags);

		public static void PathRect( ImDrawList* self,  Vector2 rectMin,  Vector2 rectMax,  float rounding,  int flags)
		{
			PathRectNative(self, rectMin, rectMax, rounding, flags);
		}

		public static void PathRect( ImDrawList* self,  Vector2 rectMin,  Vector2 rectMax,  float rounding)
		{
			PathRectNative(self, rectMin, rectMax, rounding, (int)(0));
		}

		public static void PathRect( ImDrawList* self,  Vector2 rectMin,  Vector2 rectMax)
		{
			PathRectNative(self, rectMin, rectMax, (float)(0.0f), (int)(0));
		}

		public static void PathRect( ImDrawList* self,  Vector2 rectMin,  Vector2 rectMax,  int flags)
		{
			PathRectNative(self, rectMin, rectMax, (float)(0.0f), flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddCallback")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddCallbackNative(ImDrawList* self, ImDrawCallback callback, void* callbackData);

		public static void AddCallback( ImDrawList* self,  ImDrawCallback callback,  void* callbackData)
		{
			AddCallbackNative(self, callback, callbackData);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_AddDrawCmd")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddDrawCmdNative(ImDrawList* self);

		public static void AddDrawCmd( ImDrawList* self)
		{
			AddDrawCmdNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_CloneOutput")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImDrawList* CloneOutputNative(ImDrawList* self);

		public static ImDrawList* CloneOutput( ImDrawList* self)
		{
			ImDrawList* ret = CloneOutputNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_ChannelsSplit")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ChannelsSplitNative(ImDrawList* self, int count);

		public static void ChannelsSplit( ImDrawList* self,  int count)
		{
			ChannelsSplitNative(self, count);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_ChannelsMerge")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ChannelsMergeNative(ImDrawList* self);

		public static void ChannelsMerge( ImDrawList* self)
		{
			ChannelsMergeNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_ChannelsSetCurrent")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ChannelsSetCurrentNative(ImDrawList* self, int n);

		public static void ChannelsSetCurrent( ImDrawList* self,  int n)
		{
			ChannelsSetCurrentNative(self, n);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_PrimReserve")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PrimReserveNative(ImDrawList* self, int idxCount, int vtxCount);

		public static void PrimReserve( ImDrawList* self,  int idxCount,  int vtxCount)
		{
			PrimReserveNative(self, idxCount, vtxCount);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_PrimUnreserve")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PrimUnreserveNative(ImDrawList* self, int idxCount, int vtxCount);

		public static void PrimUnreserve( ImDrawList* self,  int idxCount,  int vtxCount)
		{
			PrimUnreserveNative(self, idxCount, vtxCount);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_PrimRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PrimRectNative(ImDrawList* self, Vector2 a, Vector2 b, uint col);

		public static void PrimRect( ImDrawList* self,  Vector2 a,  Vector2 b,  uint col)
		{
			PrimRectNative(self, a, b, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_PrimRectUV")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PrimRectUVNative(ImDrawList* self, Vector2 a, Vector2 b, Vector2 uvA, Vector2 uvB, uint col);

		public static void PrimRectUV( ImDrawList* self,  Vector2 a,  Vector2 b,  Vector2 uvA,  Vector2 uvB,  uint col)
		{
			PrimRectUVNative(self, a, b, uvA, uvB, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_PrimQuadUV")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PrimQuadUVNative(ImDrawList* self, Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 uvA, Vector2 uvB, Vector2 uvC, Vector2 uvD, uint col);

		public static void PrimQuadUV( ImDrawList* self,  Vector2 a,  Vector2 b,  Vector2 c,  Vector2 d,  Vector2 uvA,  Vector2 uvB,  Vector2 uvC,  Vector2 uvD,  uint col)
		{
			PrimQuadUVNative(self, a, b, c, d, uvA, uvB, uvC, uvD, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_PrimWriteVtx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PrimWriteVtxNative(ImDrawList* self, Vector2 pos, Vector2 uv, uint col);

		public static void PrimWriteVtx( ImDrawList* self,  Vector2 pos,  Vector2 uv,  uint col)
		{
			PrimWriteVtxNative(self, pos, uv, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_PrimWriteIdx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PrimWriteIdxNative(ImDrawList* self, ushort idx);

		public static void PrimWriteIdx( ImDrawList* self,  ushort idx)
		{
			PrimWriteIdxNative(self, idx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList_PrimVtx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PrimVtxNative(ImDrawList* self, Vector2 pos, Vector2 uv, uint col);

		public static void PrimVtx( ImDrawList* self,  Vector2 pos,  Vector2 uv,  uint col)
		{
			PrimVtxNative(self, pos, uv, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList__ResetForNewFrame")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void _ResetForNewFrameNative(ImDrawList* self);

		public static void _ResetForNewFrame( ImDrawList* self)
		{
			_ResetForNewFrameNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList__ClearFreeMemory")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void _ClearFreeMemoryNative(ImDrawList* self);

		public static void _ClearFreeMemory( ImDrawList* self)
		{
			_ClearFreeMemoryNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList__PopUnusedDrawCmd")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void _PopUnusedDrawCmdNative(ImDrawList* self);

		public static void _PopUnusedDrawCmd( ImDrawList* self)
		{
			_PopUnusedDrawCmdNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList__TryMergeDrawCmds")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void _TryMergeDrawCmdsNative(ImDrawList* self);

		public static void _TryMergeDrawCmds( ImDrawList* self)
		{
			_TryMergeDrawCmdsNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList__OnChangedClipRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void _OnChangedClipRectNative(ImDrawList* self);

		public static void _OnChangedClipRect( ImDrawList* self)
		{
			_OnChangedClipRectNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList__OnChangedTextureID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void _OnChangedTextureIDNative(ImDrawList* self);

		public static void _OnChangedTextureID( ImDrawList* self)
		{
			_OnChangedTextureIDNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList__OnChangedVtxOffset")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void _OnChangedVtxOffsetNative(ImDrawList* self);

		public static void _OnChangedVtxOffset( ImDrawList* self)
		{
			_OnChangedVtxOffsetNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList__CalcCircleAutoSegmentCount")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int _CalcCircleAutoSegmentCountNative(ImDrawList* self, float radius);

		public static int _CalcCircleAutoSegmentCount( ImDrawList* self,  float radius)
		{
			int ret = _CalcCircleAutoSegmentCountNative(self, radius);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList__PathArcToFastEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void _PathArcToFastExNative(ImDrawList* self, Vector2 center, float radius, int aMinSample, int aMaxSample, int aStep);

		public static void _PathArcToFastEx( ImDrawList* self,  Vector2 center,  float radius,  int aMinSample,  int aMaxSample,  int aStep)
		{
			_PathArcToFastExNative(self, center, radius, aMinSample, aMaxSample, aStep);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawList__PathArcToN")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void _PathArcToNNative(ImDrawList* self, Vector2 center, float radius, float aMin, float aMax, int numSegments);

		public static void _PathArcToN( ImDrawList* self,  Vector2 center,  float radius,  float aMin,  float aMax,  int numSegments)
		{
			_PathArcToNNative(self, center, radius, aMin, aMax, numSegments);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawData_ImDrawData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImDrawData* ImDrawDataNative();

		public static ImDrawData* ImDrawData()
		{
			ImDrawData* ret = ImDrawDataNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawData_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DestroyNative(ImDrawData* self);

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawData_Clear")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ClearNative(ImDrawData* self);

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawData_AddDrawList")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddDrawListNative(ImDrawData* self, ImDrawList* drawList);

		public static void AddDrawList( ImDrawData* self,  ImDrawList* drawList)
		{
			AddDrawListNative(self, drawList);
		}

		public static void AddDrawList( ImDrawData* self,  ref ImDrawList drawList)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				AddDrawListNative(self, (ImDrawList*)pdrawList);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawData_DeIndexAllBuffers")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DeIndexAllBuffersNative(ImDrawData* self);

		public static void DeIndexAllBuffers( ImDrawData* self)
		{
			DeIndexAllBuffersNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImDrawData_ScaleClipRects")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ScaleClipRectsNative(ImDrawData* self, Vector2 fbScale);

		public static void ScaleClipRects( ImDrawData* self,  Vector2 fbScale)
		{
			ScaleClipRectsNative(self, fbScale);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontConfig_ImFontConfig")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImFontConfig* ImFontConfigNative();

		public static ImFontConfig* ImFontConfig()
		{
			ImFontConfig* ret = ImFontConfigNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontConfig_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DestroyNative(ImFontConfig* self);

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImFontGlyphRangesBuilder* ImFontGlyphRangesBuilderNative();

		public static ImFontGlyphRangesBuilder* ImFontGlyphRangesBuilder()
		{
			ImFontGlyphRangesBuilder* ret = ImFontGlyphRangesBuilderNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontGlyphRangesBuilder_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DestroyNative(ImFontGlyphRangesBuilder* self);

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontGlyphRangesBuilder_Clear")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ClearNative(ImFontGlyphRangesBuilder* self);

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontGlyphRangesBuilder_GetBit")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte GetBitNative(ImFontGlyphRangesBuilder* self, ulong n);

		public static bool GetBit( ImFontGlyphRangesBuilder* self,  ulong n)
		{
			byte ret = GetBitNative(self, n);
			return ret != 0;
		}

		public static bool GetBit( ImFontGlyphRangesBuilder* self,  nuint n)
		{
			byte ret = GetBitNative(self, n);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontGlyphRangesBuilder_SetBit")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetBitNative(ImFontGlyphRangesBuilder* self, ulong n);

		public static void SetBit( ImFontGlyphRangesBuilder* self,  ulong n)
		{
			SetBitNative(self, n);
		}

		public static void SetBit( ImFontGlyphRangesBuilder* self,  nuint n)
		{
			SetBitNative(self, n);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontGlyphRangesBuilder_AddChar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddCharNative(ImFontGlyphRangesBuilder* self, char c);

		public static void AddChar( ImFontGlyphRangesBuilder* self,  char c)
		{
			AddCharNative(self, c);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontGlyphRangesBuilder_AddText")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddTextNative(ImFontGlyphRangesBuilder* self, byte* text, byte* textEnd);

		public static void AddText( ImFontGlyphRangesBuilder* self,  byte* text,  byte* textEnd)
		{
			AddTextNative(self, text, textEnd);
		}

		public static void AddText( ImFontGlyphRangesBuilder* self,  byte* text)
		{
			AddTextNative(self, text, (byte*)(default));
		}

		public static void AddText( ImFontGlyphRangesBuilder* self,  ref byte text,  byte* textEnd)
		{
			fixed (byte* ptext = &text)
			{
				AddTextNative(self, (byte*)ptext, textEnd);
			}
		}

		public static void AddText( ImFontGlyphRangesBuilder* self,  ref byte text)
		{
			fixed (byte* ptext = &text)
			{
				AddTextNative(self, (byte*)ptext, (byte*)(default));
			}
		}

		public static void AddText( ImFontGlyphRangesBuilder* self,  string text,  byte* textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, pStr0, textEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImFontGlyphRangesBuilder* self,  string text)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, pStr0, (byte*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImFontGlyphRangesBuilder* self,  byte* text,  ref byte textEnd)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				AddTextNative(self, text, (byte*)ptextEnd);
			}
		}

		public static void AddText( ImFontGlyphRangesBuilder* self,  byte* text,  string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, text, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddText( ImFontGlyphRangesBuilder* self,  ref byte text,  ref byte textEnd)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					AddTextNative(self, (byte*)ptext, (byte*)ptextEnd);
				}
			}
		}

		public static void AddText( ImFontGlyphRangesBuilder* self,  string text,  string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			AddTextNative(self, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontGlyphRangesBuilder_AddRanges")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddRangesNative(ImFontGlyphRangesBuilder* self, char* ranges);

		public static void AddRanges( ImFontGlyphRangesBuilder* self,  char* ranges)
		{
			AddRangesNative(self, ranges);
		}

		public static void AddRanges( ImFontGlyphRangesBuilder* self,  ref char ranges)
		{
			fixed (char* pranges = &ranges)
			{
				AddRangesNative(self, (char*)pranges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontGlyphRangesBuilder_BuildRanges")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void BuildRangesNative(ImFontGlyphRangesBuilder* self, ImVectorImWchar* outRanges);

		public static void BuildRanges( ImFontGlyphRangesBuilder* self,  ImVectorImWchar* outRanges)
		{
			BuildRangesNative(self, outRanges);
		}

		public static void BuildRanges( ImFontGlyphRangesBuilder* self,  ref ImVectorImWchar outRanges)
		{
			fixed (ImVectorImWchar* poutRanges = &outRanges)
			{
				BuildRangesNative(self, (ImVectorImWchar*)poutRanges);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontAtlasCustomRect_ImFontAtlasCustomRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImFontAtlasCustomRect* ImFontAtlasCustomRectNative();

		public static ImFontAtlasCustomRect* ImFontAtlasCustomRect()
		{
			ImFontAtlasCustomRect* ret = ImFontAtlasCustomRectNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontAtlasCustomRect_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DestroyNative(ImFontAtlasCustomRect* self);

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontAtlasCustomRect_IsPacked")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsPackedNative(ImFontAtlasCustomRect* self);

		public static bool IsPacked( ImFontAtlasCustomRect* self)
		{
			byte ret = IsPackedNative(self);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontAtlas_ImFontAtlas")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImFontAtlas* ImFontAtlasNative();

		public static ImFontAtlas* ImFontAtlas()
		{
			ImFontAtlas* ret = ImFontAtlasNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontAtlas_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DestroyNative(ImFontAtlas* self);

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontAtlas_AddFont")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImFont* AddFontNative(ImFontAtlas* self, ImFontConfig* fontCfg);

		public static ImFont* AddFont( ImFontAtlas* self,  ImFontConfig* fontCfg)
		{
			ImFont* ret = AddFontNative(self, fontCfg);
			return ret;
		}

		public static ImFont* AddFont( ImFontAtlas* self,  ref ImFontConfig fontCfg)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontNative(self, (ImFontConfig*)pfontCfg);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontAtlas_AddFontDefault")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImFont* AddFontDefaultNative(ImFontAtlas* self, ImFontConfig* fontCfg);

		public static ImFont* AddFontDefault( ImFontAtlas* self,  ImFontConfig* fontCfg)
		{
			ImFont* ret = AddFontDefaultNative(self, fontCfg);
			return ret;
		}

		public static ImFont* AddFontDefault( ImFontAtlas* self)
		{
			ImFont* ret = AddFontDefaultNative(self, (ImFontConfig*)(default));
			return ret;
		}

		public static ImFont* AddFontDefault( ImFontAtlas* self,  ref ImFontConfig fontCfg)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontDefaultNative(self, (ImFontConfig*)pfontCfg);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontAtlas_AddFontFromFileTTF")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImFont* AddFontFromFileTTFNative(ImFontAtlas* self, byte* filename, float sizePixels, ImFontConfig* fontCfg, char* glyphRanges);

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  byte* filename,  float sizePixels,  ImFontConfig* fontCfg,  char* glyphRanges)
		{
			ImFont* ret = AddFontFromFileTTFNative(self, filename, sizePixels, fontCfg, glyphRanges);
			return ret;
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  byte* filename,  float sizePixels,  ImFontConfig* fontCfg)
		{
			ImFont* ret = AddFontFromFileTTFNative(self, filename, sizePixels, fontCfg, (char*)(default));
			return ret;
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  byte* filename,  float sizePixels)
		{
			ImFont* ret = AddFontFromFileTTFNative(self, filename, sizePixels, (ImFontConfig*)(default), (char*)(default));
			return ret;
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  byte* filename,  float sizePixels,  char* glyphRanges)
		{
			ImFont* ret = AddFontFromFileTTFNative(self, filename, sizePixels, (ImFontConfig*)(default), glyphRanges);
			return ret;
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  ref byte filename,  float sizePixels,  ImFontConfig* fontCfg,  char* glyphRanges)
		{
			fixed (byte* pfilename = &filename)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  ref byte filename,  float sizePixels,  ImFontConfig* fontCfg)
		{
			fixed (byte* pfilename = &filename)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  ref byte filename,  float sizePixels)
		{
			fixed (byte* pfilename = &filename)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  ref byte filename,  float sizePixels,  char* glyphRanges)
		{
			fixed (byte* pfilename = &filename)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  string filename,  float sizePixels,  ImFontConfig* fontCfg,  char* glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFont* ret = AddFontFromFileTTFNative(self, pStr0, sizePixels, fontCfg, glyphRanges);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  string filename,  float sizePixels,  ImFontConfig* fontCfg)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFont* ret = AddFontFromFileTTFNative(self, pStr0, sizePixels, fontCfg, (char*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  string filename,  float sizePixels)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFont* ret = AddFontFromFileTTFNative(self, pStr0, sizePixels, (ImFontConfig*)(default), (char*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  string filename,  float sizePixels,  char* glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFont* ret = AddFontFromFileTTFNative(self, pStr0, sizePixels, (ImFontConfig*)(default), glyphRanges);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  byte* filename,  float sizePixels,  ref ImFontConfig fontCfg,  char* glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, filename, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
				return ret;
			}
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  byte* filename,  float sizePixels,  ref ImFontConfig fontCfg)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, filename, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
				return ret;
			}
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  ref byte filename,  float sizePixels,  ref ImFontConfig fontCfg,  char* glyphRanges)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  ref byte filename,  float sizePixels,  ref ImFontConfig fontCfg)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  string filename,  float sizePixels,  ref ImFontConfig fontCfg,  char* glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, pStr0, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  string filename,  float sizePixels,  ref ImFontConfig fontCfg)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  byte* filename,  float sizePixels,  ImFontConfig* fontCfg,  ref char glyphRanges)
		{
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, filename, sizePixels, fontCfg, (char*)pglyphRanges);
				return ret;
			}
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  byte* filename,  float sizePixels,  ref char glyphRanges)
		{
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, filename, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
				return ret;
			}
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  ref byte filename,  float sizePixels,  ImFontConfig* fontCfg,  ref char glyphRanges)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  ref byte filename,  float sizePixels,  ref char glyphRanges)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  string filename,  float sizePixels,  ImFontConfig* fontCfg,  ref char glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, pStr0, sizePixels, fontCfg, (char*)pglyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  string filename,  float sizePixels,  ref char glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, pStr0, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  byte* filename,  float sizePixels,  ref ImFontConfig fontCfg,  ref char glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromFileTTFNative(self, filename, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  ref byte filename,  float sizePixels,  ref ImFontConfig fontCfg,  ref char glyphRanges)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		public static ImFont* AddFontFromFileTTF( ImFontAtlas* self,  string filename,  float sizePixels,  ref ImFontConfig fontCfg,  ref char glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromFileTTFNative(self, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontAtlas_AddFontFromMemoryTTF")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImFont* AddFontFromMemoryTTFNative(ImFontAtlas* self, void* fontData, int fontDataSize, float sizePixels, ImFontConfig* fontCfg, char* glyphRanges);

		public static ImFont* AddFontFromMemoryTTF( ImFontAtlas* self,  void* fontData,  int fontDataSize,  float sizePixels,  ImFontConfig* fontCfg,  char* glyphRanges)
		{
			ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, fontCfg, glyphRanges);
			return ret;
		}

		public static ImFont* AddFontFromMemoryTTF( ImFontAtlas* self,  void* fontData,  int fontDataSize,  float sizePixels,  ImFontConfig* fontCfg)
		{
			ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, fontCfg, (char*)(default));
			return ret;
		}

		public static ImFont* AddFontFromMemoryTTF( ImFontAtlas* self,  void* fontData,  int fontDataSize,  float sizePixels)
		{
			ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, (ImFontConfig*)(default), (char*)(default));
			return ret;
		}

		public static ImFont* AddFontFromMemoryTTF( ImFontAtlas* self,  void* fontData,  int fontDataSize,  float sizePixels,  char* glyphRanges)
		{
			ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, (ImFontConfig*)(default), glyphRanges);
			return ret;
		}

		public static ImFont* AddFontFromMemoryTTF( ImFontAtlas* self,  void* fontData,  int fontDataSize,  float sizePixels,  ref ImFontConfig fontCfg,  char* glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
				return ret;
			}
		}

		public static ImFont* AddFontFromMemoryTTF( ImFontAtlas* self,  void* fontData,  int fontDataSize,  float sizePixels,  ref ImFontConfig fontCfg)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
				return ret;
			}
		}

		public static ImFont* AddFontFromMemoryTTF( ImFontAtlas* self,  void* fontData,  int fontDataSize,  float sizePixels,  ImFontConfig* fontCfg,  ref char glyphRanges)
		{
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, fontCfg, (char*)pglyphRanges);
				return ret;
			}
		}

		public static ImFont* AddFontFromMemoryTTF( ImFontAtlas* self,  void* fontData,  int fontDataSize,  float sizePixels,  ref char glyphRanges)
		{
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
				return ret;
			}
		}

		public static ImFont* AddFontFromMemoryTTF( ImFontAtlas* self,  void* fontData,  int fontDataSize,  float sizePixels,  ref ImFontConfig fontCfg,  ref char glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImFont* AddFontFromMemoryCompressedTTFNative(ImFontAtlas* self, void* compressedFontData, int compressedFontDataSize, float sizePixels, ImFontConfig* fontCfg, char* glyphRanges);

		public static ImFont* AddFontFromMemoryCompressedTTF( ImFontAtlas* self,  void* compressedFontData,  int compressedFontDataSize,  float sizePixels,  ImFontConfig* fontCfg,  char* glyphRanges)
		{
			ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, fontCfg, glyphRanges);
			return ret;
		}

		public static ImFont* AddFontFromMemoryCompressedTTF( ImFontAtlas* self,  void* compressedFontData,  int compressedFontDataSize,  float sizePixels,  ImFontConfig* fontCfg)
		{
			ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, fontCfg, (char*)(default));
			return ret;
		}

		public static ImFont* AddFontFromMemoryCompressedTTF( ImFontAtlas* self,  void* compressedFontData,  int compressedFontDataSize,  float sizePixels)
		{
			ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)(default), (char*)(default));
			return ret;
		}

		public static ImFont* AddFontFromMemoryCompressedTTF( ImFontAtlas* self,  void* compressedFontData,  int compressedFontDataSize,  float sizePixels,  char* glyphRanges)
		{
			ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)(default), glyphRanges);
			return ret;
		}

		public static ImFont* AddFontFromMemoryCompressedTTF( ImFontAtlas* self,  void* compressedFontData,  int compressedFontDataSize,  float sizePixels,  ref ImFontConfig fontCfg,  char* glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
				return ret;
			}
		}

		public static ImFont* AddFontFromMemoryCompressedTTF( ImFontAtlas* self,  void* compressedFontData,  int compressedFontDataSize,  float sizePixels,  ref ImFontConfig fontCfg)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
				return ret;
			}
		}

		public static ImFont* AddFontFromMemoryCompressedTTF( ImFontAtlas* self,  void* compressedFontData,  int compressedFontDataSize,  float sizePixels,  ImFontConfig* fontCfg,  ref char glyphRanges)
		{
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, fontCfg, (char*)pglyphRanges);
				return ret;
			}
		}

		public static ImFont* AddFontFromMemoryCompressedTTF( ImFontAtlas* self,  void* compressedFontData,  int compressedFontDataSize,  float sizePixels,  ref char glyphRanges)
		{
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
				return ret;
			}
		}

		public static ImFont* AddFontFromMemoryCompressedTTF( ImFontAtlas* self,  void* compressedFontData,  int compressedFontDataSize,  float sizePixels,  ref ImFontConfig fontCfg,  ref char glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImFont* AddFontFromMemoryCompressedBase85TTFNative(ImFontAtlas* self, byte* compressedFontDatabase85, float sizePixels, ImFontConfig* fontCfg, char* glyphRanges);

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  byte* compressedFontDatabase85,  float sizePixels,  ImFontConfig* fontCfg,  char* glyphRanges)
		{
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, fontCfg, glyphRanges);
			return ret;
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  byte* compressedFontDatabase85,  float sizePixels,  ImFontConfig* fontCfg)
		{
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, fontCfg, (char*)(default));
			return ret;
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  byte* compressedFontDatabase85,  float sizePixels)
		{
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
			return ret;
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  byte* compressedFontDatabase85,  float sizePixels,  char* glyphRanges)
		{
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
			return ret;
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  ref byte compressedFontDatabase85,  float sizePixels,  ImFontConfig* fontCfg,  char* glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  ref byte compressedFontDatabase85,  float sizePixels,  ImFontConfig* fontCfg)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  ref byte compressedFontDatabase85,  float sizePixels)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  ref byte compressedFontDatabase85,  float sizePixels,  char* glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  string compressedFontDatabase85,  float sizePixels,  ImFontConfig* fontCfg,  char* glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, fontCfg, glyphRanges);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  string compressedFontDatabase85,  float sizePixels,  ImFontConfig* fontCfg)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, fontCfg, (char*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  string compressedFontDatabase85,  float sizePixels)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, (ImFontConfig*)(default), (char*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  string compressedFontDatabase85,  float sizePixels,  char* glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, (ImFontConfig*)(default), glyphRanges);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  byte* compressedFontDatabase85,  float sizePixels,  ref ImFontConfig fontCfg,  char* glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
				return ret;
			}
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  byte* compressedFontDatabase85,  float sizePixels,  ref ImFontConfig fontCfg)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
				return ret;
			}
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  ref byte compressedFontDatabase85,  float sizePixels,  ref ImFontConfig fontCfg,  char* glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  ref byte compressedFontDatabase85,  float sizePixels,  ref ImFontConfig fontCfg)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  string compressedFontDatabase85,  float sizePixels,  ref ImFontConfig fontCfg,  char* glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  string compressedFontDatabase85,  float sizePixels,  ref ImFontConfig fontCfg)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  byte* compressedFontDatabase85,  float sizePixels,  ImFontConfig* fontCfg,  ref char glyphRanges)
		{
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, fontCfg, (char*)pglyphRanges);
				return ret;
			}
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  byte* compressedFontDatabase85,  float sizePixels,  ref char glyphRanges)
		{
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
				return ret;
			}
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  ref byte compressedFontDatabase85,  float sizePixels,  ImFontConfig* fontCfg,  ref char glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  ref byte compressedFontDatabase85,  float sizePixels,  ref char glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  string compressedFontDatabase85,  float sizePixels,  ImFontConfig* fontCfg,  ref char glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, fontCfg, (char*)pglyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  string compressedFontDatabase85,  float sizePixels,  ref char glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  byte* compressedFontDatabase85,  float sizePixels,  ref ImFontConfig fontCfg,  ref char glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  ref byte compressedFontDatabase85,  float sizePixels,  ref ImFontConfig fontCfg,  ref char glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		public static ImFont* AddFontFromMemoryCompressedBase85TTF( ImFontAtlas* self,  string compressedFontDatabase85,  float sizePixels,  ref ImFontConfig fontCfg,  ref char glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontAtlas_ClearInputData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ClearInputDataNative(ImFontAtlas* self);

		public static void ClearInputData( ImFontAtlas* self)
		{
			ClearInputDataNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontAtlas_ClearTexData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ClearTexDataNative(ImFontAtlas* self);

		public static void ClearTexData( ImFontAtlas* self)
		{
			ClearTexDataNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImFontAtlas_ClearFonts")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ClearFontsNative(ImFontAtlas* self);

		public static void ClearFonts( ImFontAtlas* self)
		{
			ClearFontsNative(self);
		}
	}
}
