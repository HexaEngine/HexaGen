// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace HexaEngine.SDL2
{
	[NativeName(NativeNameType.StructOrClass, "_SDL_iconv_t")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLIconv
	{


	}

	[NativeName(NativeNameType.StructOrClass, "SDL_AssertData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLAssertData
	{
		[NativeName(NativeNameType.Field, "always_ignore")]
		[NativeName(NativeNameType.Type, "int")]
		public int AlwaysIgnore;
		[NativeName(NativeNameType.Field, "trigger_count")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint TriggerCount;
		[NativeName(NativeNameType.Field, "condition")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Condition;
		[NativeName(NativeNameType.Field, "filename")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Filename;
		[NativeName(NativeNameType.Field, "linenum")]
		[NativeName(NativeNameType.Type, "int")]
		public int Linenum;
		[NativeName(NativeNameType.Field, "function")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Function;
		[NativeName(NativeNameType.Field, "next")]
		[NativeName(NativeNameType.Type, "const SDL_AssertData*")]
		public unsafe SDLAssertData* Next;


	}

	[NativeName(NativeNameType.Typedef, "SDL_AssertData")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public unsafe struct SDLAssertDataPtr : IEquatable<SDLAssertDataPtr>
	{
		public SDLAssertDataPtr(SDLAssertData* handle) { Handle = handle; }

		public SDLAssertData* Handle;

		public bool IsNull => Handle == null;

		public static SDLAssertDataPtr Null => new SDLAssertDataPtr(null);

		public static implicit operator SDLAssertDataPtr(SDLAssertData* handle) => new SDLAssertDataPtr(handle);

		public static implicit operator SDLAssertData*(SDLAssertDataPtr handle) => handle.Handle;

		public static bool operator ==(SDLAssertDataPtr left, SDLAssertDataPtr right) => left.Handle == right.Handle;

		public static bool operator !=(SDLAssertDataPtr left, SDLAssertDataPtr right) => left.Handle != right.Handle;

		public static bool operator ==(SDLAssertDataPtr left, SDLAssertData* right) => left.Handle == right;

		public static bool operator !=(SDLAssertDataPtr left, SDLAssertData* right) => left.Handle != right;

		public bool Equals(SDLAssertDataPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is SDLAssertDataPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		private string DebuggerDisplay => string.Format("SDLAssertDataPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		public ref int AlwaysIgnore => ref Unsafe.AsRef<int>(&Handle->AlwaysIgnore);
		public ref uint TriggerCount => ref Unsafe.AsRef<uint>(&Handle->TriggerCount);
		public byte* Condition { get => Handle->Condition; set => Handle->Condition = value; }
		public byte* Filename { get => Handle->Filename; set => Handle->Filename = value; }
		public ref int Linenum => ref Unsafe.AsRef<int>(&Handle->Linenum);
		public byte* Function { get => Handle->Function; set => Handle->Function = value; }
		public ref SDLAssertDataPtr Next => ref Unsafe.AsRef<SDLAssertDataPtr>(&Handle->Next);
	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_atomic_t")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLAtomic
	{
		[NativeName(NativeNameType.Field, "value")]
		[NativeName(NativeNameType.Type, "int")]
		public int Value;


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Typedef, "SDL_atomic_t")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public unsafe struct SDLAtomicPtr : IEquatable<SDLAtomicPtr>
	{
		public SDLAtomicPtr(SDLAtomic* handle) { Handle = handle; }

		public SDLAtomic* Handle;

		public bool IsNull => Handle == null;

		public static SDLAtomicPtr Null => new SDLAtomicPtr(null);

		public static implicit operator SDLAtomicPtr(SDLAtomic* handle) => new SDLAtomicPtr(handle);

		public static implicit operator SDLAtomic*(SDLAtomicPtr handle) => handle.Handle;

		public static bool operator ==(SDLAtomicPtr left, SDLAtomicPtr right) => left.Handle == right.Handle;

		public static bool operator !=(SDLAtomicPtr left, SDLAtomicPtr right) => left.Handle != right.Handle;

		public static bool operator ==(SDLAtomicPtr left, SDLAtomic* right) => left.Handle == right;

		public static bool operator !=(SDLAtomicPtr left, SDLAtomic* right) => left.Handle != right;

		public bool Equals(SDLAtomicPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is SDLAtomicPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		private string DebuggerDisplay => string.Format("SDLAtomicPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		public ref int Value => ref Unsafe.AsRef<int>(&Handle->Value);
	}

	/// <summary>
	/// The SDL mutex structure, defined in SDL_sysmutex.c <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_mutex")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLMutex
	{


	}

	/// <summary>
	/// The SDL mutex structure, defined in SDL_sysmutex.c <br/>
	/// </summary>
	[NativeName(NativeNameType.Typedef, "SDL_mutex")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public unsafe struct SDLMutexPtr : IEquatable<SDLMutexPtr>
	{
		public SDLMutexPtr(SDLMutex* handle) { Handle = handle; }

		public SDLMutex* Handle;

		public bool IsNull => Handle == null;

		public static SDLMutexPtr Null => new SDLMutexPtr(null);

		public static implicit operator SDLMutexPtr(SDLMutex* handle) => new SDLMutexPtr(handle);

		public static implicit operator SDLMutex*(SDLMutexPtr handle) => handle.Handle;

		public static bool operator ==(SDLMutexPtr left, SDLMutexPtr right) => left.Handle == right.Handle;

		public static bool operator !=(SDLMutexPtr left, SDLMutexPtr right) => left.Handle != right.Handle;

		public static bool operator ==(SDLMutexPtr left, SDLMutex* right) => left.Handle == right;

		public static bool operator !=(SDLMutexPtr left, SDLMutex* right) => left.Handle != right;

		public bool Equals(SDLMutexPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is SDLMutexPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		private string DebuggerDisplay => string.Format("SDLMutexPtr [0x{0}]", ((nuint)Handle).ToString("X"));
	}

	/// <summary>
	/// The SDL semaphore structure, defined in SDL_syssem.c <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_semaphore")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLSemaphore
	{


	}

	/// <summary>
	/// The SDL condition variable structure, defined in SDL_syscond.c <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_cond")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLCond
	{


	}

	/// <summary>
	/// The SDL condition variable structure, defined in SDL_syscond.c <br/>
	/// </summary>
	[NativeName(NativeNameType.Typedef, "SDL_cond")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public unsafe struct SDLCondPtr : IEquatable<SDLCondPtr>
	{
		public SDLCondPtr(SDLCond* handle) { Handle = handle; }

		public SDLCond* Handle;

		public bool IsNull => Handle == null;

		public static SDLCondPtr Nul