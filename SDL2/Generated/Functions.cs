// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace HexaEngine.SDL2
{
	public unsafe partial class SDL2
	{
		internal const string LibName = "sdl2";

		/// <summary>
		/// Get the name of the platform.<br/>
		/// Here are the names returned for some (but not all) supported platforms:<br/>
		/// - "Windows"<br/>
		/// - "Mac OS X"<br/>
		/// - "Linux"<br/>
		/// - "iOS"<br/>
		/// - "Android"<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetPlatform")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SDL_GetPlatform")]
		internal static extern byte* SDLGetPlatformNative();

		/// <summary>		/// Get the name of the platform.<br/>		/// Here are the names returned for some (but not all) supported platforms:<br/>		/// - "Windows"<br/>		/// - "Mac OS X"<br/>		/// - "Linux"<br/>		/// - "iOS"<br/>		/// - "Android"<br/>		/// <br/>		/// <br/>		/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetPlatform")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLGetPlatform()
		{
			byte* ret = SDLGetPlatformNative();
			return ret;
		}

		/// <summary>		/// Get the name of the platform.<br/>		/// Here are the names returned for some (but not all) supported platforms:<br/>		/// - "Windows"<br/>		/// - "Mac OS X"<br/>		/// - "Linux"<br/>		/// - "iOS"<br/>		/// - "Android"<br/>		/// <br/>		/// <br/>		/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetPlatform")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLGetPlatformS()
		{
			string ret = Utils.DecodeStringUTF8(SDLGetPlatformNative());
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_malloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SDL_malloc")]
		internal static extern void* SDLMallocNative([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size);

		[NativeName(NativeNameType.Func, "SDL_malloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLMalloc([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			void* ret = SDLMallocNative(size);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_calloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SDL_calloc")]
		internal static extern void* SDLCallocNative([NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size);

		[NativeName(NativeNameType.Func, "SDL_calloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLCalloc([NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			void* ret = SDLCallocNative(nmemb, size);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_realloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SDL_realloc")]
		internal static extern void* SDLReallocNative([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void*")] void* mem, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size);

		[NativeName(NativeNameType.Func, "SDL_realloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLRealloc([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void*")] void* mem, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			void* ret = SDLReallocNative(mem, size);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SDL_free")]
		internal static extern void SDLFreeNative([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void*")] void* mem);

	}
}
