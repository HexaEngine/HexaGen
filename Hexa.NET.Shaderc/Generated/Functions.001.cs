// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.Shaderc
{
	public unsafe partial class Shaderc
	{

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] string sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] ulong sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] byte* inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, pStr0, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] nuint sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] byte* inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
			return ret;
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] ref byte sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] nuint sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] byte* inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] string sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] nuint sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] byte* inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, pStr0, sourceTextSize, shaderKind, inputFileName, entryPointName, additionalOptions);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] ulong sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = &inputFileName)
			{
				ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] ulong sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] string inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inputFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inputFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inputFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, pStr0, entryPointName, additionalOptions);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] ref byte sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] ulong sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pinputFileName = &inputFileName)
				{
					ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, entryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] string sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] ulong sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] string inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inputFileName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inputFileName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inputFileName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, pStr0, sourceTextSize, shaderKind, pStr1, entryPointName, additionalOptions);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] nuint sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = &inputFileName)
			{
				ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, entryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] nuint sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] string inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inputFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inputFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inputFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, pStr0, entryPointName, additionalOptions);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] ref byte sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] nuint sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pinputFileName = &inputFileName)
				{
					ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, entryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] string sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] nuint sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] string inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inputFileName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inputFileName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inputFileName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, pStr0, sourceTextSize, shaderKind, pStr1, entryPointName, additionalOptions);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] ulong sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] byte* inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pentryPointName = &entryPointName)
			{
				ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, (byte*)pentryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] ulong sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] byte* inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] string entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPointName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPointName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPointName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, pStr0, additionalOptions);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] ref byte sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] ulong sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] byte* inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pentryPointName = &entryPointName)
				{
					ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, inputFileName, (byte*)pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] string sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] ulong sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] byte* inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] string entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (entryPointName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(entryPointName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(entryPointName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, pStr0, sourceTextSize, shaderKind, inputFileName, pStr1, additionalOptions);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] nuint sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] byte* inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pentryPointName = &entryPointName)
			{
				ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, (byte*)pentryPointName, additionalOptions);
				return ret;
			}
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] nuint sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] byte* inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] string entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPointName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPointName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPointName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, inputFileName, pStr0, additionalOptions);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] ref byte sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] nuint sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] byte* inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pentryPointName = &entryPointName)
				{
					ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, inputFileName, (byte*)pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] string sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] nuint sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] byte* inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] string entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (entryPointName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(entryPointName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(entryPointName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, pStr0, sourceTextSize, shaderKind, inputFileName, pStr1, additionalOptions);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] ulong sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = &inputFileName)
			{
				fixed (byte* pentryPointName = &entryPointName)
				{
					ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, (byte*)pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] ulong sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] string inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] string entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inputFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inputFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inputFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (entryPointName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(entryPointName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(entryPointName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, pStr0, pStr1, additionalOptions);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] ref byte sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] ulong sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pinputFileName = &inputFileName)
				{
					fixed (byte* pentryPointName = &entryPointName)
					{
						ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, (byte*)pentryPointName, additionalOptions);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] string sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] ulong sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] string inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] string entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inputFileName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inputFileName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inputFileName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (entryPointName != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(entryPointName);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(entryPointName, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, pStr0, sourceTextSize, shaderKind, pStr1, pStr2, additionalOptions);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] nuint sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			fixed (byte* pinputFileName = &inputFileName)
			{
				fixed (byte* pentryPointName = &entryPointName)
				{
					ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, (byte*)pentryPointName, additionalOptions);
					return ret;
				}
			}
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] nuint sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] string inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] string entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inputFileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inputFileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inputFileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (entryPointName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(entryPointName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(entryPointName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, sourceText, sourceTextSize, shaderKind, pStr0, pStr1, additionalOptions);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] ref byte sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] nuint sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceText = &sourceText)
			{
				fixed (byte* pinputFileName = &inputFileName)
				{
					fixed (byte* pentryPointName = &entryPointName)
					{
						ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, (byte*)psourceText, sourceTextSize, shaderKind, (byte*)pinputFileName, (byte*)pentryPointName, additionalOptions);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Like shaderc_compile_into_spv, but the result contains preprocessed source<br/>/// code instead of a SPIR-V binary module<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_into_preprocessed_text")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercCompileIntoPreprocessedText([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_text")] [NativeName(NativeNameType.Type, "const char*")] string sourceText, [NativeName(NativeNameType.Param, "source_text_size")] [NativeName(NativeNameType.Type, "size_t")] nuint sourceTextSize, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "input_file_name")] [NativeName(NativeNameType.Type, "const char*")] string inputFileName, [NativeName(NativeNameType.Param, "entry_point_name")] [NativeName(NativeNameType.Type, "const char*")] string entryPointName, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inputFileName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inputFileName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inputFileName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (entryPointName != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(entryPointName);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(entryPointName, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			ShadercCompilationResult ret = ShadercCompileIntoPreprocessedTextNative(compiler, pStr0, sourceTextSize, shaderKind, pStr1, pStr2, additionalOptions);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Takes an assembly string of the format defined in the SPIRV-Tools project<br/>
		/// (https://github.com/KhronosGroup/SPIRV-Tools/blob/master/syntax.md),<br/>
		/// assembles it into SPIR-V binary and a shaderc_compilation_result will be<br/>
		/// returned to hold the results.<br/>
		/// The assembling will pick options suitable for assembling specified in the<br/>
		/// additional_options parameter.<br/>
		/// May be safely called from multiple threads without explicit synchronization.<br/>
		/// If there was failure in allocating the compiler object, null will be<br/>
		/// returned.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "shaderc_assemble_into_spv")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		[LibraryImport(LibName, EntryPoint = "shaderc_assemble_into_spv")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ShadercCompilationResult ShadercAssembleIntoSpvNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_assembly")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceAssembly, [NativeName(NativeNameType.Param, "source_assembly_size")] [NativeName(NativeNameType.Type, "size_t")] ulong sourceAssemblySize, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions);

		/// <summary>/// Takes an assembly string of the format defined in the SPIRV-Tools project<br/>/// (https://github.com/KhronosGroup/SPIRV-Tools/blob/master/syntax.md),<br/>/// assembles it into SPIR-V binary and a shaderc_compilation_result will be<br/>/// returned to hold the results.<br/>/// The assembling will pick options suitable for assembling specified in the<br/>/// additional_options parameter.<br/>/// May be safely called from multiple threads without explicit synchronization.<br/>/// If there was failure in allocating the compiler object, null will be<br/>/// returned.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_assemble_into_spv")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercAssembleIntoSpv([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_assembly")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceAssembly, [NativeName(NativeNameType.Param, "source_assembly_size")] [NativeName(NativeNameType.Type, "size_t")] ulong sourceAssemblySize, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			ShadercCompilationResult ret = ShadercAssembleIntoSpvNative(compiler, sourceAssembly, sourceAssemblySize, additionalOptions);
			return ret;
		}

		/// <summary>/// Takes an assembly string of the format defined in the SPIRV-Tools project<br/>/// (https://github.com/KhronosGroup/SPIRV-Tools/blob/master/syntax.md),<br/>/// assembles it into SPIR-V binary and a shaderc_compilation_result will be<br/>/// returned to hold the results.<br/>/// The assembling will pick options suitable for assembling specified in the<br/>/// additional_options parameter.<br/>/// May be safely called from multiple threads without explicit synchronization.<br/>/// If there was failure in allocating the compiler object, null will be<br/>/// returned.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_assemble_into_spv")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercAssembleIntoSpv([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_assembly")] [NativeName(NativeNameType.Type, "const char*")] ref byte sourceAssembly, [NativeName(NativeNameType.Param, "source_assembly_size")] [NativeName(NativeNameType.Type, "size_t")] ulong sourceAssemblySize, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceAssembly = &sourceAssembly)
			{
				ShadercCompilationResult ret = ShadercAssembleIntoSpvNative(compiler, (byte*)psourceAssembly, sourceAssemblySize, additionalOptions);
				return ret;
			}
		}

		/// <summary>/// Takes an assembly string of the format defined in the SPIRV-Tools project<br/>/// (https://github.com/KhronosGroup/SPIRV-Tools/blob/master/syntax.md),<br/>/// assembles it into SPIR-V binary and a shaderc_compilation_result will be<br/>/// returned to hold the results.<br/>/// The assembling will pick options suitable for assembling specified in the<br/>/// additional_options parameter.<br/>/// May be safely called from multiple threads without explicit synchronization.<br/>/// If there was failure in allocating the compiler object, null will be<br/>/// returned.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_assemble_into_spv")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercAssembleIntoSpv([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_assembly")] [NativeName(NativeNameType.Type, "const char*")] string sourceAssembly, [NativeName(NativeNameType.Param, "source_assembly_size")] [NativeName(NativeNameType.Type, "size_t")] ulong sourceAssemblySize, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceAssembly != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceAssembly);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceAssembly, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ShadercCompilationResult ret = ShadercAssembleIntoSpvNative(compiler, pStr0, sourceAssemblySize, additionalOptions);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// Takes an assembly string of the format defined in the SPIRV-Tools project<br/>/// (https://github.com/KhronosGroup/SPIRV-Tools/blob/master/syntax.md),<br/>/// assembles it into SPIR-V binary and a shaderc_compilation_result will be<br/>/// returned to hold the results.<br/>/// The assembling will pick options suitable for assembling specified in the<br/>/// additional_options parameter.<br/>/// May be safely called from multiple threads without explicit synchronization.<br/>/// If there was failure in allocating the compiler object, null will be<br/>/// returned.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_assemble_into_spv")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercAssembleIntoSpv([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_assembly")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceAssembly, [NativeName(NativeNameType.Param, "source_assembly_size")] [NativeName(NativeNameType.Type, "size_t")] nuint sourceAssemblySize, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			ShadercCompilationResult ret = ShadercAssembleIntoSpvNative(compiler, sourceAssembly, sourceAssemblySize, additionalOptions);
			return ret;
		}

		/// <summary>/// Takes an assembly string of the format defined in the SPIRV-Tools project<br/>/// (https://github.com/KhronosGroup/SPIRV-Tools/blob/master/syntax.md),<br/>/// assembles it into SPIR-V binary and a shaderc_compilation_result will be<br/>/// returned to hold the results.<br/>/// The assembling will pick options suitable for assembling specified in the<br/>/// additional_options parameter.<br/>/// May be safely called from multiple threads without explicit synchronization.<br/>/// If there was failure in allocating the compiler object, null will be<br/>/// returned.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_assemble_into_spv")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercAssembleIntoSpv([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_assembly")] [NativeName(NativeNameType.Type, "const char*")] ref byte sourceAssembly, [NativeName(NativeNameType.Param, "source_assembly_size")] [NativeName(NativeNameType.Type, "size_t")] nuint sourceAssemblySize, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			fixed (byte* psourceAssembly = &sourceAssembly)
			{
				ShadercCompilationResult ret = ShadercAssembleIntoSpvNative(compiler, (byte*)psourceAssembly, sourceAssemblySize, additionalOptions);
				return ret;
			}
		}

		/// <summary>/// Takes an assembly string of the format defined in the SPIRV-Tools project<br/>/// (https://github.com/KhronosGroup/SPIRV-Tools/blob/master/syntax.md),<br/>/// assembles it into SPIR-V binary and a shaderc_compilation_result will be<br/>/// returned to hold the results.<br/>/// The assembling will pick options suitable for assembling specified in the<br/>/// additional_options parameter.<br/>/// May be safely called from multiple threads without explicit synchronization.<br/>/// If there was failure in allocating the compiler object, null will be<br/>/// returned.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_assemble_into_spv")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_result_t")]
		public static ShadercCompilationResult ShadercAssembleIntoSpv([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "const shaderc_compiler_t")] ShadercCompiler compiler, [NativeName(NativeNameType.Param, "source_assembly")] [NativeName(NativeNameType.Type, "const char*")] string sourceAssembly, [NativeName(NativeNameType.Param, "source_assembly_size")] [NativeName(NativeNameType.Type, "size_t")] nuint sourceAssemblySize, [NativeName(NativeNameType.Param, "additional_options")] [NativeName(NativeNameType.Type, "const shaderc_compile_options_t")] ShadercCompileOptions additionalOptions)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceAssembly != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceAssembly);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceAssembly, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ShadercCompilationResult ret = ShadercAssembleIntoSpvNative(compiler, pStr0, sourceAssemblySize, additionalOptions);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Releases the resources held by the result object. It is invalid to use the<br/>
		/// result object for any further operations.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "shaderc_result_release")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "shaderc_result_release")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ShadercResultReleaseNative([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "shaderc_compilation_result_t")] ShadercCompilationResult result);

		/// <summary>/// Releases the resources held by the result object. It is invalid to use the<br/>/// result object for any further operations.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_result_release")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ShadercResultRelease([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "shaderc_compilation_result_t")] ShadercCompilationResult result)
		{
			ShadercResultReleaseNative(result);
		}

		/// <summary>
		/// Returns the number of bytes of the compilation output data in a result<br/>
		/// object.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "shaderc_result_get_length")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		[LibraryImport(LibName, EntryPoint = "shaderc_result_get_length")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ulong ShadercResultGetLengthNative([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "const shaderc_compilation_result_t")] ShadercCompilationResult result);

		/// <summary>/// Returns the number of bytes of the compilation output data in a result<br/>/// object.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_result_get_length")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ShadercResultGetLength([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "const shaderc_compilation_result_t")] ShadercCompilationResult result)
		{
			ulong ret = ShadercResultGetLengthNative(result);
			return ret;
		}

		/// <summary>
		/// Returns the number of warnings generated during the compilation.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "shaderc_result_get_num_warnings")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		[LibraryImport(LibName, EntryPoint = "shaderc_result_get_num_warnings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ulong ShadercResultGetNumWarningsNative([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "const shaderc_compilation_result_t")] ShadercCompilationResult result);

		/// <summary>/// Returns the number of warnings generated during the compilation.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_result_get_num_warnings")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ShadercResultGetNumWarnings([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "const shaderc_compilation_result_t")] ShadercCompilationResult result)
		{
			ulong ret = ShadercResultGetNumWarningsNative(result);
			return ret;
		}

		/// <summary>
		/// Returns the number of errors generated during the compilation.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "shaderc_result_get_num_errors")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		[LibraryImport(LibName, EntryPoint = "shaderc_result_get_num_errors")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ulong ShadercResultGetNumErrorsNative([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "const shaderc_compilation_result_t")] ShadercCompilationResult result);

		/// <summary>/// Returns the number of errors generated during the compilation.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_result_get_num_errors")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ShadercResultGetNumErrors([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "const shaderc_compilation_result_t")] ShadercCompilationResult result)
		{
			ulong ret = ShadercResultGetNumErrorsNative(result);
			return ret;
		}

		/// <summary>
		/// Returns the compilation status, indicating whether the compilation succeeded,<br/>
		/// or failed due to some reasons, like invalid shader stage or compilation<br/>
		/// errors.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "shaderc_result_get_compilation_status")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_status")]
		[LibraryImport(LibName, EntryPoint = "shaderc_result_get_compilation_status")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ShadercCompilationStatus ShadercResultGetCompilationStatusNative([NativeName(NativeNameType.Param, "")] [NativeName(NativeNameType.Type, "const shaderc_compilation_result_t")] ShadercCompilationResult unknown0);

		/// <summary>/// Returns the compilation status, indicating whether the compilation succeeded,<br/>/// or failed due to some reasons, like invalid shader stage or compilation<br/>/// errors.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_result_get_compilation_status")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_status")]
		public static ShadercCompilationStatus ShadercResultGetCompilationStatus([NativeName(NativeNameType.Param, "")] [NativeName(NativeNameType.Type, "const shaderc_compilation_result_t")] ShadercCompilationResult unknown0)
		{
			ShadercCompilationStatus ret = ShadercResultGetCompilationStatusNative(unknown0);
			return ret;
		}

		/// <summary>
		/// Returns a pointer to the start of the compilation output data bytes, either<br/>
		/// SPIR-V binary or char string. When the source string is compiled into SPIR-V<br/>
		/// binary, this is guaranteed to be castable to a uint32_t*. If the result<br/>
		/// contains assembly text or preprocessed source text, the pointer will point to<br/>
		/// the resulting array of characters.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "shaderc_result_get_bytes")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[LibraryImport(LibName, EntryPoint = "shaderc_result_get_bytes")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* ShadercResultGetBytesNative([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "const shaderc_compilation_result_t")] ShadercCompilationResult result);

		/// <summary>/// Returns a pointer to the start of the compilation output data bytes, either<br/>/// SPIR-V binary or char string. When the source string is compiled into SPIR-V<br/>/// binary, this is guaranteed to be castable to a uint32_t*. If the result<br/>/// contains assembly text or preprocessed source text, the pointer will point to<br/>/// the resulting array of characters.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_result_get_bytes")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ShadercResultGetBytes([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "const shaderc_compilation_result_t")] ShadercCompilationResult result)
		{
			byte* ret = ShadercResultGetBytesNative(result);
			return ret;
		}

		/// <summary>/// Returns a pointer to the start of the compilation output data bytes, either<br/>/// SPIR-V binary or char string. When the source string is compiled into SPIR-V<br/>/// binary, this is guaranteed to be castable to a uint32_t*. If the result<br/>/// contains assembly text or preprocessed source text, the pointer will point to<br/>/// the resulting array of characters.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_result_get_bytes")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ShadercResultGetBytesS([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "const shaderc_compilation_result_t")] ShadercCompilationResult result)
		{
			string ret = Utils.DecodeStringUTF8(ShadercResultGetBytesNative(result));
			return ret;
		}

		/// <summary>
		/// Returns a null-terminated string that contains any error messages generated<br/>
		/// during the compilation.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "shaderc_result_get_error_message")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[LibraryImport(LibName, EntryPoint = "shaderc_result_get_error_message")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* ShadercResultGetErrorMessageNative([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "const shaderc_compilation_result_t")] ShadercCompilationResult result);

		/// <summary>/// Returns a null-terminated string that contains any error messages generated<br/>/// during the compilation.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_result_get_error_message")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ShadercResultGetErrorMessage([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "const shaderc_compilation_result_t")] ShadercCompilationResult result)
		{
			byte* ret = ShadercResultGetErrorMessageNative(result);
			return ret;
		}

		/// <summary>/// Returns a null-terminated string that contains any error messages generated<br/>/// during the compilation.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_result_get_error_message")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ShadercResultGetErrorMessageS([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "const shaderc_compilation_result_t")] ShadercCompilationResult result)
		{
			string ret = Utils.DecodeStringUTF8(ShadercResultGetErrorMessageNative(result));
			return ret;
		}

		/// <summary>
		/// Provides the version <br/>
		/// &<br/>
		/// revision of the SPIR-V which will be produced<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "shaderc_get_spv_version")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "shaderc_get_spv_version")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ShadercGetSpvVersionNative([NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* version, [NativeName(NativeNameType.Param, "revision")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* revision);

		/// <summary>/// Provides the version <br/>/// &<br/>/// revision of the SPIR-V which will be produced<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_get_spv_version")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ShadercGetSpvVersion([NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* version, [NativeName(NativeNameType.Param, "revision")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* revision)
		{
			ShadercGetSpvVersionNative(version, revision);
		}

		/// <summary>/// Provides the version <br/>/// &<br/>/// revision of the SPIR-V which will be produced<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_get_spv_version")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ShadercGetSpvVersion([NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* version, [NativeName(NativeNameType.Param, "revision")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint revision)
		{
			fixed (uint* prevision = &revision)
			{
				ShadercGetSpvVersionNative(version, (uint*)prevision);
			}
		}

		/// <summary>
		/// Parses the version and profile from a given null-terminated string<br/>
		/// containing both version and profile, like: '450core'. Returns false if<br/>
		/// the string can not be parsed. Returns true when the parsing succeeds. The<br/>
		/// parsed version and profile are returned through arguments.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "shaderc_parse_version_profile")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[LibraryImport(LibName, EntryPoint = "shaderc_parse_version_profile")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ShadercParseVersionProfileNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "int*")] int* version, [NativeName(NativeNameType.Param, "profile")] [NativeName(NativeNameType.Type, "shaderc_profile*")] ShadercProfile* profile);

		/// <summary>/// Parses the version and profile from a given null-terminated string<br/>/// containing both version and profile, like: '450core'. Returns false if<br/>/// the string can not be parsed. Returns true when the parsing succeeds. The<br/>/// parsed version and profile are returned through arguments.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_parse_version_profile")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ShadercParseVersionProfile([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "int*")] int* version, [NativeName(NativeNameType.Param, "profile")] [NativeName(NativeNameType.Type, "shaderc_profile*")] ShadercProfile* profile)
		{
			byte ret = ShadercParseVersionProfileNative(str, version, profile);
			return ret != 0;
		}

		/// <summary>/// Parses the version and profile from a given null-terminated string<br/>/// containing both version and profile, like: '450core'. Returns false if<br/>/// the string can not be parsed. Returns true when the parsing succeeds. The<br/>/// parsed version and profile are returned through arguments.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_parse_version_profile")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ShadercParseVersionProfile([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "int*")] ref int version, [NativeName(NativeNameType.Param, "profile")] [NativeName(NativeNameType.Type, "shaderc_profile*")] ShadercProfile* profile)
		{
			fixed (int* pversion = &version)
			{
				byte ret = ShadercParseVersionProfileNative(str, (int*)pversion, profile);
				return ret != 0;
			}
		}

		/// <summary>/// Parses the version and profile from a given null-terminated string<br/>/// containing both version and profile, like: '450core'. Returns false if<br/>/// the string can not be parsed. Returns true when the parsing succeeds. The<br/>/// parsed version and profile are returned through arguments.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_parse_version_profile")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ShadercParseVersionProfile([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "int*")] int* version, [NativeName(NativeNameType.Param, "profile")] [NativeName(NativeNameType.Type, "shaderc_profile*")] ref ShadercProfile profile)
		{
			fixed (ShadercProfile* pprofile = &profile)
			{
				byte ret = ShadercParseVersionProfileNative(str, version, (ShadercProfile*)pprofile);
				return ret != 0;
			}
		}

		/// <summary>/// Parses the version and profile from a given null-terminated string<br/>/// containing both version and profile, like: '450core'. Returns false if<br/>/// the string can not be parsed. Returns true when the parsing succeeds. The<br/>/// parsed version and profile are returned through arguments.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_parse_version_profile")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ShadercParseVersionProfile([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "int*")] ref int version, [NativeName(NativeNameType.Param, "profile")] [NativeName(NativeNameType.Type, "shaderc_profile*")] ref ShadercProfile profile)
		{
			fixed (int* pversion = &version)
			{
				fixed (ShadercProfile* pprofile = &profile)
				{
					byte ret = ShadercParseVersionProfileNative(str, (int*)pversion, (ShadercProfile*)pprofile);
					return ret != 0;
				}
			}
		}

	}
}
