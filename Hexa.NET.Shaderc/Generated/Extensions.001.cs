// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.Shaderc
{
	public static unsafe partial class Extensions
	{

		/// <summary>/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>/// This method keeps a copy of the string data.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* reg, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] string set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] string binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (set != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(set);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(set, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (binding != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(binding);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(binding, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, reg, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>/// This method keeps a copy of the string data.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] ref byte reg, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] ref byte set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] ref byte binding)
		{
			fixed (byte* preg = &reg)
			{
				fixed (byte* pset = &set)
				{
					fixed (byte* pbinding = &binding)
					{
						Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, (byte*)preg, (byte*)pset, (byte*)pbinding);
					}
				}
			}
		}

		/// <summary>/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>/// This method keeps a copy of the string data.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] string reg, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] string set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] string binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (reg != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(reg);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(reg, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (set != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(set);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(set, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (binding != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(binding);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(binding, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStageNative(options, shaderKind, pStr0, pStr1, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>/// but affects all shader stages.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* reg, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* binding)
		{
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(options, reg, set, binding);
		}

		/// <summary>/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>/// but affects all shader stages.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] ref byte reg, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* binding)
		{
			fixed (byte* preg = &reg)
			{
				Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(options, (byte*)preg, set, binding);
			}
		}

		/// <summary>/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>/// but affects all shader stages.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] string reg, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (reg != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(reg);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(reg, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(options, pStr0, set, binding);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>/// but affects all shader stages.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* reg, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] ref byte set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* binding)
		{
			fixed (byte* pset = &set)
			{
				Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(options, reg, (byte*)pset, binding);
			}
		}

		/// <summary>/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>/// but affects all shader stages.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* reg, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] string set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (set != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(set);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(set, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(options, reg, pStr0, binding);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>/// but affects all shader stages.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] ref byte reg, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] ref byte set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* binding)
		{
			fixed (byte* preg = &reg)
			{
				fixed (byte* pset = &set)
				{
					Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(options, (byte*)preg, (byte*)pset, binding);
				}
			}
		}

		/// <summary>/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>/// but affects all shader stages.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] string reg, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] string set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (reg != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(reg);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(reg, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (set != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(set);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(set, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(options, pStr0, pStr1, binding);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>/// but affects all shader stages.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* reg, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] ref byte binding)
		{
			fixed (byte* pbinding = &binding)
			{
				Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(options, reg, set, (byte*)pbinding);
			}
		}

		/// <summary>/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>/// but affects all shader stages.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* reg, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] string binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (binding != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(binding);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(binding, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(options, reg, set, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>/// but affects all shader stages.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] ref byte reg, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] ref byte binding)
		{
			fixed (byte* preg = &reg)
			{
				fixed (byte* pbinding = &binding)
				{
					Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(options, (byte*)preg, set, (byte*)pbinding);
				}
			}
		}

		/// <summary>/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>/// but affects all shader stages.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] string reg, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] string binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (reg != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(reg);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(reg, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (binding != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(binding);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(binding, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(options, pStr0, set, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>/// but affects all shader stages.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* reg, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] ref byte set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] ref byte binding)
		{
			fixed (byte* pset = &set)
			{
				fixed (byte* pbinding = &binding)
				{
					Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(options, reg, (byte*)pset, (byte*)pbinding);
				}
			}
		}

		/// <summary>/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>/// but affects all shader stages.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* reg, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] string set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] string binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (set != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(set);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(set, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (binding != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(binding);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(binding, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(options, reg, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>/// but affects all shader stages.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] ref byte reg, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] ref byte set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] ref byte binding)
		{
			fixed (byte* preg = &reg)
			{
				fixed (byte* pset = &set)
				{
					fixed (byte* pbinding = &binding)
					{
						Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(options, (byte*)preg, (byte*)pset, (byte*)pbinding);
					}
				}
			}
		}

		/// <summary>/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>/// but affects all shader stages.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] string reg, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] string set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] string binding)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (reg != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(reg);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(reg, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (set != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(set);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(set, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (binding != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(binding);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(binding, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(options, pStr0, pStr1, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// Sets whether the compiler should enable extension<br/>/// SPV_GOOGLE_hlsl_functionality1.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_functionality1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslFunctionality1(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "enable")] [NativeName(NativeNameType.Type, "bool")] bool enable)
		{
			Shaderc.ShadercCompileOptionsSetHlslFunctionality1Native(options, enable ? (byte)1 : (byte)0);
		}

		/// <summary>/// Sets whether 16-bit types are supported in HLSL or not.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_16bit_types")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlsl16BitTypes(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "enable")] [NativeName(NativeNameType.Type, "bool")] bool enable)
		{
			Shaderc.ShadercCompileOptionsSetHlsl16BitTypesNative(options, enable ? (byte)1 : (byte)0);
		}

		/// <summary>/// Sets whether the compiler should invert position.Y output in vertex shader.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_invert_y")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetInvertY(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "enable")] [NativeName(NativeNameType.Type, "bool")] bool enable)
		{
			Shaderc.ShadercCompileOptionsSetInvertYNative(options, enable ? (byte)1 : (byte)0);
		}

		/// <summary>/// Sets whether the compiler generates code for max and min builtins which,<br/>/// if given a NaN operand, will return the other operand. Similarly, the clamp<br/>/// builtin will favour the non-NaN operands, as if clamp were implemented<br/>/// as a composition of max and min.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_nan_clamp")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetNanClamp(this ShadercCompileOptions options, [NativeName(NativeNameType.Param, "enable")] [NativeName(NativeNameType.Type, "bool")] bool enable)
		{
			Shaderc.ShadercCompileOptionsSetNanClampNative(options, enable ? (byte)1 : (byte)0);
		}

		/// <summary>/// Releases the resources held by the result object. It is invalid to use the<br/>/// result object for any further operations.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_result_release")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Release(this ShadercCompilationResult result)
		{
			Shaderc.ShadercResultReleaseNative(result);
		}

		/// <summary>/// Returns the number of bytes of the compilation output data in a result<br/>/// object.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_result_get_length")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong GetLength(this ShadercCompilationResult result)
		{
			ulong ret = Shaderc.ShadercResultGetLengthNative(result);
			return ret;
		}

		/// <summary>/// Returns the number of warnings generated during the compilation.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_result_get_num_warnings")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong GetNumWarnings(this ShadercCompilationResult result)
		{
			ulong ret = Shaderc.ShadercResultGetNumWarningsNative(result);
			return ret;
		}

		/// <summary>/// Returns the number of errors generated during the compilation.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_result_get_num_errors")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong GetNumErrors(this ShadercCompilationResult result)
		{
			ulong ret = Shaderc.ShadercResultGetNumErrorsNative(result);
			return ret;
		}

		/// <summary>/// Returns the compilation status, indicating whether the compilation succeeded,<br/>/// or failed due to some reasons, like invalid shader stage or compilation<br/>/// errors.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_result_get_compilation_status")]
		[return: NativeName(NativeNameType.Type, "shaderc_compilation_status")]
		public static ShadercCompilationStatus GetCompilationStatus(this ShadercCompilationResult unknown0)
		{
			ShadercCompilationStatus ret = Shaderc.ShadercResultGetCompilationStatusNative(unknown0);
			return ret;
		}

		/// <summary>/// Returns a pointer to the start of the compilation output data bytes, either<br/>/// SPIR-V binary or char string. When the source string is compiled into SPIR-V<br/>/// binary, this is guaranteed to be castable to a uint32_t*. If the result<br/>/// contains assembly text or preprocessed source text, the pointer will point to<br/>/// the resulting array of characters.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_result_get_bytes")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* GetBytes(this ShadercCompilationResult result)
		{
			byte* ret = Shaderc.ShadercResultGetBytesNative(result);
			return ret;
		}

		/// <summary>/// Returns a pointer to the start of the compilation output data bytes, either<br/>/// SPIR-V binary or char string. When the source string is compiled into SPIR-V<br/>/// binary, this is guaranteed to be castable to a uint32_t*. If the result<br/>/// contains assembly text or preprocessed source text, the pointer will point to<br/>/// the resulting array of characters.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_result_get_bytes")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string GetBytesS(this ShadercCompilationResult result)
		{
			string ret = Utils.DecodeStringUTF8(Shaderc.ShadercResultGetBytesNative(result));
			return ret;
		}

		/// <summary>/// Returns a null-terminated string that contains any error messages generated<br/>/// during the compilation.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_result_get_error_message")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* GetErrorMessage(this ShadercCompilationResult result)
		{
			byte* ret = Shaderc.ShadercResultGetErrorMessageNative(result);
			return ret;
		}

		/// <summary>/// Returns a null-terminated string that contains any error messages generated<br/>/// during the compilation.<br/>/// </summary>		[NativeName(NativeNameType.Func, "shaderc_result_get_error_message")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string GetErrorMessageS(this ShadercCompilationResult result)
		{
			string ret = Utils.DecodeStringUTF8(Shaderc.ShadercResultGetErrorMessageNative(result));
			return ret;
		}

	}
}
