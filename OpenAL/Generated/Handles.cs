// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace HexaEngine.OpenAL
{
	[NativeName(NativeNameType.Typedef, "LPEFXEAXREVERBPROPERTIES")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct Lpefxeaxreverbproperties : IEquatable<Lpefxeaxreverbproperties>
	{
		public Lpefxeaxreverbproperties(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static Lpefxeaxreverbproperties Null => new Lpefxeaxreverbproperties(0);
		public static implicit operator Lpefxeaxreverbproperties(nint handle) => new Lpefxeaxreverbproperties(handle);
		public static bool operator ==(Lpefxeaxreverbproperties left, Lpefxeaxreverbproperties right) => left.Handle == right.Handle;
		public static bool operator !=(Lpefxeaxreverbproperties left, Lpefxeaxreverbproperties right) => left.Handle != right.Handle;
		public static bool operator ==(Lpefxeaxreverbproperties left, nint right) => left.Handle == right;
		public static bool operator !=(Lpefxeaxreverbproperties left, nint right) => left.Handle != right;
		public bool Equals(Lpefxeaxreverbproperties other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is Lpefxeaxreverbproperties handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("Lpefxeaxreverbproperties [0x{0}]", Handle.ToString("X"));
	}

}
