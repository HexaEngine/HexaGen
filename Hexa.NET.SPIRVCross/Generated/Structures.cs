// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SPIRVCross
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_context_s")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcContextS
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_parsed_ir_s")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcParsedIrS
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_compiler_s")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcCompilerS
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_compiler_options_s")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcCompilerOptionsS
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_resources_s")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcResourcesS
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_type_s")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcTypeS
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_constant_s")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcConstantS
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_set_s")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcSetS
	{


	}

	/// <summary>
	/// See C++ API. <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_reflected_resource")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcReflectedResource
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "id")]
		[NativeName(NativeNameType.Type, "spvc_variable_id")]
		public uint Id;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "base_type_id")]
		[NativeName(NativeNameType.Type, "spvc_type_id")]
		public uint BaseTypeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "type_id")]
		[NativeName(NativeNameType.Type, "spvc_type_id")]
		public uint TypeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Name;


		/// <summary>		/// To be documented.		/// </summary>		public unsafe SpvcReflectedResource(uint id = default, uint baseTypeId = default, uint typeId = default, byte* name = default)
		{
			Id = id;
			BaseTypeId = baseTypeId;
			TypeId = typeId;
			Name = name;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_reflected_builtin_resource")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcReflectedBuiltinResource
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "builtin")]
		[NativeName(NativeNameType.Type, "SpvBuiltIn")]
		public SpvBuiltIn Builtin;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "value_type_id")]
		[NativeName(NativeNameType.Type, "spvc_type_id")]
		public uint ValueTypeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "resource")]
		[NativeName(NativeNameType.Type, "spvc_reflected_resource")]
		public SpvcReflectedResource Resource;


		/// <summary>		/// To be documented.		/// </summary>		public unsafe SpvcReflectedBuiltinResource(SpvBuiltIn builtin = default, uint valueTypeId = default, SpvcReflectedResource resource = default)
		{
			Builtin = builtin;
			ValueTypeId = valueTypeId;
			Resource = resource;
		}


	}

	/// <summary>
	/// See C++ API. <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_entry_point")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcEntryPoint
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "execution_model")]
		[NativeName(NativeNameType.Type, "SpvExecutionModel")]
		public SpvExecutionModel ExecutionModel;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Name;


		/// <summary>		/// To be documented.		/// </summary>		public unsafe SpvcEntryPoint(SpvExecutionModel executionModel = default, byte* name = default)
		{
			ExecutionModel = executionModel;
			Name = name;
		}


	}

	/// <summary>
	/// See C++ API. <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_combined_image_sampler")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcCombinedImageSampler
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "combined_id")]
		[NativeName(NativeNameType.Type, "spvc_variable_id")]
		public uint CombinedId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "image_id")]
		[NativeName(NativeNameType.Type, "spvc_variable_id")]
		public uint ImageId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "sampler_id")]
		[NativeName(NativeNameType.Type, "spvc_variable_id")]
		public uint SamplerId;


		/// <summary>		/// To be documented.		/// </summary>		public unsafe SpvcCombinedImageSampler(uint combinedId = default, uint imageId = default, uint samplerId = default)
		{
			CombinedId = combinedId;
			ImageId = imageId;
			SamplerId = samplerId;
		}


	}

	/// <summary>
	/// See C++ API. <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_specialization_constant")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcSpecializationConstant
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "id")]
		[NativeName(NativeNameType.Type, "spvc_constant_id")]
		public uint Id;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "constant_id")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint ConstantId;


		/// <summary>		/// To be documented.		/// </summary>		public unsafe SpvcSpecializationConstant(uint id = default, uint constantId = default)
		{
			Id = id;
			ConstantId = constantId;
		}


	}

	/// <summary>
	/// See C++ API. <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_buffer_range")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcBufferRange
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "index")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Index;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "size_t")]
		public nuint Offset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "range")]
		[NativeName(NativeNameType.Type, "size_t")]
		public nuint Range;


		/// <summary>		/// To be documented.		/// </summary>		public unsafe SpvcBufferRange(uint index = default, nuint offset = default, nuint range = default)
		{
			Index = index;
			Offset = offset;
			Range = range;
		}


	}

	/// <summary>
	/// See C++ API. <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_hlsl_root_constants")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcHlslRootConstants
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "start")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Start;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "end")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint End;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "binding")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Binding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "space")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Space;


		/// <summary>		/// To be documented.		/// </summary>		public unsafe SpvcHlslRootConstants(uint start = default, uint end = default, uint binding = default, uint space = default)
		{
			Start = start;
			End = end;
			Binding = binding;
			Space = space;
		}


	}

	/// <summary>
	/// See C++ API. <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_hlsl_vertex_attribute_remap")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcHlslVertexAttributeRemap
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "location")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Location;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "semantic")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Semantic;


		/// <summary>		/// To be documented.		/// </summary>		public unsafe SpvcHlslVertexAttributeRemap(uint location = default, byte* semantic = default)
		{
			Location = location;
			Semantic = semantic;
		}


	}

	/// <summary>
	/// Maps to C++ API. Deprecated; use spvc_msl_shader_interface_var. <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_msl_vertex_attribute")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcMslVertexAttribute
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "location")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Location;

		/// <summary>
		/// Obsolete, do not use. Only lingers on for ABI compatibility. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "msl_buffer")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MslBuffer;

		/// <summary>
		/// Obsolete, do not use. Only lingers on for ABI compatibility. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "msl_offset")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MslOffset;

		/// <summary>
		/// Obsolete, do not use. Only lingers on for ABI compatibility. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "msl_stride")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MslStride;

		/// <summary>
		/// Obsolete, do not use. Only lingers on for ABI compatibility. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "per_instance")]
		[NativeName(NativeNameType.Type, "spvc_bool")]
		public byte PerInstance;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "spvc_msl_vertex_format")]
		public SpvcMslShaderVariableFormat Format;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "builtin")]
		[NativeName(NativeNameType.Type, "SpvBuiltIn")]
		public SpvBuiltIn Builtin;


		/// <summary>		/// To be documented.		/// </summary>		public unsafe SpvcMslVertexAttribute(uint location = default, uint mslBuffer = default, uint mslOffset = default, uint mslStride = default, byte perInstance = default, SpvcMslShaderVariableFormat format = default, SpvBuiltIn builtin = default)
		{
			Location = location;
			MslBuffer = mslBuffer;
			MslOffset = mslOffset;
			MslStride = mslStride;
			PerInstance = perInstance;
			Format = format;
			Builtin = builtin;
		}


	}

	/// <summary>
	/// Maps to C++ API. Deprecated; use spvc_msl_shader_interface_var_2. <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_msl_shader_interface_var")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcMslShaderInterfaceVar
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "location")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Location;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "spvc_msl_vertex_format")]
		public SpvcMslShaderVariableFormat Format;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "builtin")]
		[NativeName(NativeNameType.Type, "SpvBuiltIn")]
		public SpvBuiltIn Builtin;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "vecsize")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Vecsize;


		/// <summary>		/// To be documented.		/// </summary>		public unsafe SpvcMslShaderInterfaceVar(uint location = default, SpvcMslShaderVariableFormat format = default, SpvBuiltIn builtin = default, uint vecsize = default)
		{
			Location = location;
			Format = format;
			Builtin = builtin;
			Vecsize = vecsize;
		}


	}

	/// <summary>
	/// Maps to C++ API. <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_msl_shader_interface_var_2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcMslShaderInterfaceVar2
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "location")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Location;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "spvc_msl_shader_variable_format")]
		public SpvcMslShaderVariableFormat Format;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "builtin")]
		[NativeName(NativeNameType.Type, "SpvBuiltIn")]
		public SpvBuiltIn Builtin;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "vecsize")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Vecsize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "rate")]
		[NativeName(NativeNameType.Type, "spvc_msl_shader_variable_rate")]
		public SpvcMslShaderVariableRate Rate;


		/// <summary>		/// To be documented.		/// </summary>		public unsafe SpvcMslShaderInterfaceVar2(uint location = default, SpvcMslShaderVariableFormat format = default, SpvBuiltIn builtin = default, uint vecsize = default, SpvcMslShaderVariableRate rate = default)
		{
			Location = location;
			Format = format;
			Builtin = builtin;
			Vecsize = vecsize;
			Rate = rate;
		}


	}

	/// <summary>
	/// Maps to C++ API. <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_msl_resource_binding")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcMslResourceBinding
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "stage")]
		[NativeName(NativeNameType.Type, "SpvExecutionModel")]
		public SpvExecutionModel Stage;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "desc_set")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint DescSet;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "binding")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Binding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "msl_buffer")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MslBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "msl_texture")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MslTexture;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "msl_sampler")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MslSampler;


		/// <summary>		/// To be documented.		/// </summary>		public unsafe SpvcMslResourceBinding(SpvExecutionModel stage = default, uint descSet = default, uint binding = default, uint mslBuffer = default, uint mslTexture = default, uint mslSampler = default)
		{
			Stage = stage;
			DescSet = descSet;
			Binding = binding;
			MslBuffer = mslBuffer;
			MslTexture = mslTexture;
			MslSampler = mslSampler;
		}


	}

	/// <summary>
	/// Maps to C++ API. <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_msl_constexpr_sampler")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcMslConstexprSampler
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "coord")]
		[NativeName(NativeNameType.Type, "spvc_msl_sampler_coord")]
		public SpvcMslSamplerCoord Coord;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "min_filter")]
		[NativeName(NativeNameType.Type, "spvc_msl_sampler_filter")]
		public SpvcMslSamplerFilter MinFilter;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "mag_filter")]
		[NativeName(NativeNameType.Type, "spvc_msl_sampler_filter")]
		public SpvcMslSamplerFilter MagFilter;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "mip_filter")]
		[NativeName(NativeNameType.Type, "spvc_msl_sampler_mip_filter")]
		public SpvcMslSamplerMipFilter MipFilter;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "s_address")]
		[NativeName(NativeNameType.Type, "spvc_msl_sampler_address")]
		public SpvcMslSamplerAddress SAddress;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "t_address")]
		[NativeName(NativeNameType.Type, "spvc_msl_sampler_address")]
		public SpvcMslSamplerAddress TAddress;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "r_address")]
		[NativeName(NativeNameType.Type, "spvc_msl_sampler_address")]
		public SpvcMslSamplerAddress RAddress;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "compare_func")]
		[NativeName(NativeNameType.Type, "spvc_msl_sampler_compare_func")]
		public SpvcMslSamplerCompareFunc CompareFunc;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "border_color")]
		[NativeName(NativeNameType.Type, "spvc_msl_sampler_border_color")]
		public SpvcMslSamplerBorderColor BorderColor;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "lod_clamp_min")]
		[NativeName(NativeNameType.Type, "float")]
		public float LodClampMin;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "lod_clamp_max")]
		[NativeName(NativeNameType.Type, "float")]
		public float LodClampMax;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "max_anisotropy")]
		[NativeName(NativeNameType.Type, "int")]
		public int MaxAnisotropy;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "compare_enable")]
		[NativeName(NativeNameType.Type, "spvc_bool")]
		public byte CompareEnable;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "lod_clamp_enable")]
		[NativeName(NativeNameType.Type, "spvc_bool")]
		public byte LodClampEnable;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "anisotropy_enable")]
		[NativeName(NativeNameType.Type, "spvc_bool")]
		public byte AnisotropyEnable;


		/// <summary>		/// To be documented.		/// </summary>		public unsafe SpvcMslConstexprSampler(SpvcMslSamplerCoord coord = default, SpvcMslSamplerFilter minFilter = default, SpvcMslSamplerFilter magFilter = default, SpvcMslSamplerMipFilter mipFilter = default, SpvcMslSamplerAddress sAddress = default, SpvcMslSamplerAddress tAddress = default, SpvcMslSamplerAddress rAddress = default, SpvcMslSamplerCompareFunc compareFunc = default, SpvcMslSamplerBorderColor borderColor = default, float lodClampMin = default, float lodClampMax = default, int maxAnisotropy = default, byte compareEnable = default, byte lodClampEnable = default, byte anisotropyEnable = default)
		{
			Coord = coord;
			MinFilter = minFilter;
			MagFilter = magFilter;
			MipFilter = mipFilter;
			SAddress = sAddress;
			TAddress = tAddress;
			RAddress = rAddress;
			CompareFunc = compareFunc;
			BorderColor = borderColor;
			LodClampMin = lodClampMin;
			LodClampMax = lodClampMax;
			MaxAnisotropy = maxAnisotropy;
			CompareEnable = compareEnable;
			LodClampEnable = lodClampEnable;
			AnisotropyEnable = anisotropyEnable;
		}


	}

	/// <summary>
	/// Maps to the sampler Y'CbCr conversion-related portions of MSLConstexprSampler. See C++ API for defaults and details. <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_msl_sampler_ycbcr_conversion")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcMslSamplerYcbcrConversion
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "planes")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Planes;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "resolution")]
		[NativeName(NativeNameType.Type, "spvc_msl_format_resolution")]
		public SpvcMslFormatResolution Resolution;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "chroma_filter")]
		[NativeName(NativeNameType.Type, "spvc_msl_sampler_filter")]
		public SpvcMslSamplerFilter ChromaFilter;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "x_chroma_offset")]
		[NativeName(NativeNameType.Type, "spvc_msl_chroma_location")]
		public SpvcMslChromaLocation XChromaOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "y_chroma_offset")]
		[NativeName(NativeNameType.Type, "spvc_msl_chroma_location")]
		public SpvcMslChromaLocation YChromaOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "swizzle")]
		[NativeName(NativeNameType.Type, "spvc_msl_component_swizzle[4]")]
		public SpvcMslComponentSwizzle Swizzle_0;
		public SpvcMslComponentSwizzle Swizzle_1;
		public SpvcMslComponentSwizzle Swizzle_2;
		public SpvcMslComponentSwizzle Swizzle_3;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ycbcr_model")]
		[NativeName(NativeNameType.Type, "spvc_msl_sampler_ycbcr_model_conversion")]
		public SpvcMslSamplerYcbcrModelConversion YcbcrModel;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ycbcr_range")]
		[NativeName(NativeNameType.Type, "spvc_msl_sampler_ycbcr_range")]
		public SpvcMslSamplerYcbcrRange YcbcrRange;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "bpc")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Bpc;


		/// <summary>		/// To be documented.		/// </summary>		public unsafe SpvcMslSamplerYcbcrConversion(uint planes = default, SpvcMslFormatResolution resolution = default, SpvcMslSamplerFilter chromaFilter = default, SpvcMslChromaLocation xChromaOffset = default, SpvcMslChromaLocation yChromaOffset = default, SpvcMslComponentSwizzle* swizzle = default, SpvcMslSamplerYcbcrModelConversion ycbcrModel = default, SpvcMslSamplerYcbcrRange ycbcrRange = default, uint bpc = default)
		{
			Planes = planes;
			Resolution = resolution;
			ChromaFilter = chromaFilter;
			XChromaOffset = xChromaOffset;
			YChromaOffset = yChromaOffset;
			if (swizzle != default)
			{
				Swizzle_0 = swizzle[0];
				Swizzle_1 = swizzle[1];
				Swizzle_2 = swizzle[2];
				Swizzle_3 = swizzle[3];
			}
			YcbcrModel = ycbcrModel;
			YcbcrRange = ycbcrRange;
			Bpc = bpc;
		}

		/// <summary>		/// To be documented.		/// </summary>		public unsafe SpvcMslSamplerYcbcrConversion(uint planes = default, SpvcMslFormatResolution resolution = default, SpvcMslSamplerFilter chromaFilter = default, SpvcMslChromaLocation xChromaOffset = default, SpvcMslChromaLocation yChromaOffset = default, Span<SpvcMslComponentSwizzle> swizzle = default, SpvcMslSamplerYcbcrModelConversion ycbcrModel = default, SpvcMslSamplerYcbcrRange ycbcrRange = default, uint bpc = default)
		{
			Planes = planes;
			Resolution = resolution;
			ChromaFilter = chromaFilter;
			XChromaOffset = xChromaOffset;
			YChromaOffset = yChromaOffset;
			if (swizzle != default)
			{
				Swizzle_0 = swizzle[0];
				Swizzle_1 = swizzle[1];
				Swizzle_2 = swizzle[2];
				Swizzle_3 = swizzle[3];
			}
			YcbcrModel = ycbcrModel;
			YcbcrRange = ycbcrRange;
			Bpc = bpc;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<SpvcMslComponentSwizzle> Swizzle
		
		{
			get
			{
				fixed (SpvcMslComponentSwizzle* p = &this.Swizzle_0)
				{
					return new Span<SpvcMslComponentSwizzle>(p, 4);
				}
			}
		}
	}

	/// <summary>
	/// Maps to C++ API. <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_hlsl_resource_binding_mapping")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcHlslResourceBindingMapping
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "register_space")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint RegisterSpace;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "register_binding")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint RegisterBinding;


		/// <summary>		/// To be documented.		/// </summary>		public unsafe SpvcHlslResourceBindingMapping(uint registerSpace = default, uint registerBinding = default)
		{
			RegisterSpace = registerSpace;
			RegisterBinding = registerBinding;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "spvc_hlsl_resource_binding")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvcHlslResourceBinding
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "stage")]
		[NativeName(NativeNameType.Type, "SpvExecutionModel")]
		public SpvExecutionModel Stage;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "desc_set")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint DescSet;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "binding")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Binding;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "cbv")]
		[NativeName(NativeNameType.Type, "spvc_hlsl_resource_binding_mapping")]
		public SpvcHlslResourceBindingMapping Cbv;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "uav")]
		[NativeName(NativeNameType.Type, "spvc_hlsl_resource_binding_mapping")]
		public SpvcHlslResourceBindingMapping Uav;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "srv")]
		[NativeName(NativeNameType.Type, "spvc_hlsl_resource_binding_mapping")]
		public SpvcHlslResourceBindingMapping Srv;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "sampler")]
		[NativeName(NativeNameType.Type, "spvc_hlsl_resource_binding_mapping")]
		public SpvcHlslResourceBindingMapping Sampler;


		/// <summary>		/// To be documented.		/// </summary>		public unsafe SpvcHlslResourceBinding(SpvExecutionModel stage = default, uint descSet = default, uint binding = default, SpvcHlslResourceBindingMapping cbv = default, SpvcHlslResourceBindingMapping uav = default, SpvcHlslResourceBindingMapping srv = default, SpvcHlslResourceBindingMapping sampler = default)
		{
			Stage = stage;
			DescSet = descSet;
			Binding = binding;
			Cbv = cbv;
			Uav = uav;
			Srv = srv;
			Sampler = sampler;
		}


	}

}
