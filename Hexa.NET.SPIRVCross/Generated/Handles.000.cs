// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SPIRVCross
{
	/// <summary>
	/// These types are opaque to the user. <br/>
	/// </summary>
	[NativeName(NativeNameType.Typedef, "spvc_context")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct SpvcContext : IEquatable<SpvcContext>
	{
		public SpvcContext(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static SpvcContext Null => new SpvcContext(0);
		public static implicit operator SpvcContext(nint handle) => new SpvcContext(handle);
		public static bool operator ==(SpvcContext left, SpvcContext right) => left.Handle == right.Handle;
		public static bool operator !=(SpvcContext left, SpvcContext right) => left.Handle != right.Handle;
		public static bool operator ==(SpvcContext left, nint right) => left.Handle == right;
		public static bool operator !=(SpvcContext left, nint right) => left.Handle != right;
		public bool Equals(SpvcContext other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is SpvcContext handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("SpvcContext [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "spvc_parsed_ir")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct SpvcParsedIr : IEquatable<SpvcParsedIr>
	{
		public SpvcParsedIr(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static SpvcParsedIr Null => new SpvcParsedIr(0);
		public static implicit operator SpvcParsedIr(nint handle) => new SpvcParsedIr(handle);
		public static bool operator ==(SpvcParsedIr left, SpvcParsedIr right) => left.Handle == right.Handle;
		public static bool operator !=(SpvcParsedIr left, SpvcParsedIr right) => left.Handle != right.Handle;
		public static bool operator ==(SpvcParsedIr left, nint right) => left.Handle == right;
		public static bool operator !=(SpvcParsedIr left, nint right) => left.Handle != right;
		public bool Equals(SpvcParsedIr other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is SpvcParsedIr handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("SpvcParsedIr [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "spvc_compiler")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct SpvcCompiler : IEquatable<SpvcCompiler>
	{
		public SpvcCompiler(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static SpvcCompiler Null => new SpvcCompiler(0);
		public static implicit operator SpvcCompiler(nint handle) => new SpvcCompiler(handle);
		public static bool operator ==(SpvcCompiler left, SpvcCompiler right) => left.Handle == right.Handle;
		public static bool operator !=(SpvcCompiler left, SpvcCompiler right) => left.Handle != right.Handle;
		public static bool operator ==(SpvcCompiler left, nint right) => left.Handle == right;
		public static bool operator !=(SpvcCompiler left, nint right) => left.Handle != right;
		public bool Equals(SpvcCompiler other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is SpvcCompiler handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("SpvcCompiler [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "spvc_compiler_options")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct SpvcCompilerOptions : IEquatable<SpvcCompilerOptions>
	{
		public SpvcCompilerOptions(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static SpvcCompilerOptions Null => new SpvcCompilerOptions(0);
		public static implicit operator SpvcCompilerOptions(nint handle) => new SpvcCompilerOptions(handle);
		public static bool operator ==(SpvcCompilerOptions left, SpvcCompilerOptions right) => left.Handle == right.Handle;
		public static bool operator !=(SpvcCompilerOptions left, SpvcCompilerOptions right) => left.Handle != right.Handle;
		public static bool operator ==(SpvcCompilerOptions left, nint right) => left.Handle == right;
		public static bool operator !=(SpvcCompilerOptions left, nint right) => left.Handle != right;
		public bool Equals(SpvcCompilerOptions other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is SpvcCompilerOptions handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("SpvcCompilerOptions [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "spvc_resources")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct SpvcResources : IEquatable<SpvcResources>
	{
		public SpvcResources(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static SpvcResources Null => new SpvcResources(0);
		public static implicit operator SpvcResources(nint handle) => new SpvcResources(handle);
		public static bool operator ==(SpvcResources left, SpvcResources right) => left.Handle == right.Handle;
		public static bool operator !=(SpvcResources left, SpvcResources right) => left.Handle != right.Handle;
		public static bool operator ==(SpvcResources left, nint right) => left.Handle == right;
		public static bool operator !=(SpvcResources left, nint right) => left.Handle != right;
		public bool Equals(SpvcResources other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is SpvcResources handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("SpvcResources [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "spvc_type")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct SpvcType : IEquatable<SpvcType>
	{
		public SpvcType(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static SpvcType Null => new SpvcType(0);
		public static implicit operator SpvcType(nint handle) => new SpvcType(handle);
		public static bool operator ==(SpvcType left, SpvcType right) => left.Handle == right.Handle;
		public static bool operator !=(SpvcType left, SpvcType right) => left.Handle != right.Handle;
		public static bool operator ==(SpvcType left, nint right) => left.Handle == right;
		public static bool operator !=(SpvcType left, nint right) => left.Handle != right;
		public bool Equals(SpvcType other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is SpvcType handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("SpvcType [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "spvc_constant")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct SpvcConstant : IEquatable<SpvcConstant>
	{
		public SpvcConstant(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static SpvcConstant Null => new SpvcConstant(0);
		public static implicit operator SpvcConstant(nint handle) => new SpvcConstant(handle);
		public static bool operator ==(SpvcConstant left, SpvcConstant right) => left.Handle == right.Handle;
		public static bool operator !=(SpvcConstant left, SpvcConstant right) => left.Handle != right.Handle;
		public static bool operator ==(SpvcConstant left, nint right) => left.Handle == right;
		public static bool operator !=(SpvcConstant left, nint right) => left.Handle != right;
		public bool Equals(SpvcConstant other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is SpvcConstant handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("SpvcConstant [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "spvc_set")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct SpvcSet : IEquatable<SpvcSet>
	{
		public SpvcSet(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static SpvcSet Null => new SpvcSet(0);
		public static implicit operator SpvcSet(nint handle) => new SpvcSet(handle);
		public static bool operator ==(SpvcSet left, SpvcSet right) => left.Handle == right.Handle;
		public static bool operator !=(SpvcSet left, SpvcSet right) => left.Handle != right.Handle;
		public static bool operator ==(SpvcSet left, nint right) => left.Handle == right;
		public static bool operator !=(SpvcSet left, nint right) => left.Handle != right;
		public bool Equals(SpvcSet other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is SpvcSet handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("SpvcSet [0x{0}]", Handle.ToString("X"));
	}

}
