// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SPIRVCross
{
	public unsafe partial class SPIRV
	{
		internal const string LibName = "spirv-cross-c-shared";

		/// <summary>
		/// Gets the SPVC_C_API_VERSION_* used to build this library.<br/>
		/// Can be used to check for ABI mismatch if so-versioning did not catch it.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_get_version")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_get_version")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcGetVersionNative([NativeName(NativeNameType.Param, "major")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* major, [NativeName(NativeNameType.Param, "minor")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* minor, [NativeName(NativeNameType.Param, "patch")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* patch);

		/// <summary>/// Gets the SPVC_C_API_VERSION_* used to build this library.<br/>/// Can be used to check for ABI mismatch if so-versioning did not catch it.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_get_version")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcGetVersion([NativeName(NativeNameType.Param, "major")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* major, [NativeName(NativeNameType.Param, "minor")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* minor, [NativeName(NativeNameType.Param, "patch")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* patch)
		{
			SpvcGetVersionNative(major, minor, patch);
		}

		/// <summary>/// Gets the SPVC_C_API_VERSION_* used to build this library.<br/>/// Can be used to check for ABI mismatch if so-versioning did not catch it.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_get_version")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcGetVersion([NativeName(NativeNameType.Param, "major")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* major, [NativeName(NativeNameType.Param, "minor")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint minor, [NativeName(NativeNameType.Param, "patch")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* patch)
		{
			fixed (uint* pminor = &minor)
			{
				SpvcGetVersionNative(major, (uint*)pminor, patch);
			}
		}

		/// <summary>/// Gets the SPVC_C_API_VERSION_* used to build this library.<br/>/// Can be used to check for ABI mismatch if so-versioning did not catch it.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_get_version")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcGetVersion([NativeName(NativeNameType.Param, "major")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* major, [NativeName(NativeNameType.Param, "minor")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* minor, [NativeName(NativeNameType.Param, "patch")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint patch)
		{
			fixed (uint* ppatch = &patch)
			{
				SpvcGetVersionNative(major, minor, (uint*)ppatch);
			}
		}

		/// <summary>/// Gets the SPVC_C_API_VERSION_* used to build this library.<br/>/// Can be used to check for ABI mismatch if so-versioning did not catch it.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_get_version")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcGetVersion([NativeName(NativeNameType.Param, "major")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* major, [NativeName(NativeNameType.Param, "minor")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint minor, [NativeName(NativeNameType.Param, "patch")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint patch)
		{
			fixed (uint* pminor = &minor)
			{
				fixed (uint* ppatch = &patch)
				{
					SpvcGetVersionNative(major, (uint*)pminor, (uint*)ppatch);
				}
			}
		}

		/// <summary>
		/// Gets a human readable version string to identify which commit a particular binary was created from. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_get_commit_revision_and_timestamp")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[LibraryImport(LibName, EntryPoint = "spvc_get_commit_revision_and_timestamp")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* SpvcGetCommitRevisionAndTimestampNative();

		/// <summary>/// Gets a human readable version string to identify which commit a particular binary was created from. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_get_commit_revision_and_timestamp")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SpvcGetCommitRevisionAndTimestamp()
		{
			byte* ret = SpvcGetCommitRevisionAndTimestampNative();
			return ret;
		}

		/// <summary>/// Gets a human readable version string to identify which commit a particular binary was created from. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_get_commit_revision_and_timestamp")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SpvcGetCommitRevisionAndTimestampS()
		{
			string ret = Utils.DecodeStringUTF8(SpvcGetCommitRevisionAndTimestampNative());
			return ret;
		}

		/// <summary>
		/// Initializes the vertex attribute struct.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_vertex_attribute_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_msl_vertex_attribute_init")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcMslVertexAttributeInitNative([NativeName(NativeNameType.Param, "attr")] [NativeName(NativeNameType.Type, "spvc_msl_vertex_attribute*")] SpvcMslVertexAttribute* attr);

		/// <summary>/// Initializes the vertex attribute struct.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_msl_vertex_attribute_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcMslVertexAttributeInit([NativeName(NativeNameType.Param, "attr")] [NativeName(NativeNameType.Type, "spvc_msl_vertex_attribute*")] SpvcMslVertexAttribute* attr)
		{
			SpvcMslVertexAttributeInitNative(attr);
		}

		/// <summary>
		/// Initializes the shader input struct.<br/>
		/// Deprecated. Use spvc_msl_shader_interface_var_init_2().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_shader_interface_var_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_msl_shader_interface_var_init")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcMslShaderInterfaceVarInitNative([NativeName(NativeNameType.Param, "var")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var*")] SpvcMslShaderInterfaceVar* var);

		/// <summary>/// Initializes the shader input struct.<br/>/// Deprecated. Use spvc_msl_shader_interface_var_init_2().<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_msl_shader_interface_var_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcMslShaderInterfaceVarInit([NativeName(NativeNameType.Param, "var")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var*")] SpvcMslShaderInterfaceVar* var)
		{
			SpvcMslShaderInterfaceVarInitNative(var);
		}

		/// <summary>
		/// Deprecated. Use spvc_msl_shader_interface_var_init_2().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_shader_input_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_msl_shader_input_init")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcMslShaderInputInitNative([NativeName(NativeNameType.Param, "input")] [NativeName(NativeNameType.Type, "spvc_msl_shader_input*")] SpvcMslShaderInterfaceVar* input);

		/// <summary>/// Deprecated. Use spvc_msl_shader_interface_var_init_2().<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_msl_shader_input_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcMslShaderInputInit([NativeName(NativeNameType.Param, "input")] [NativeName(NativeNameType.Type, "spvc_msl_shader_input*")] SpvcMslShaderInterfaceVar* input)
		{
			SpvcMslShaderInputInitNative(input);
		}

		/// <summary>
		/// Initializes the shader interface variable struct.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_shader_interface_var_init_2")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_msl_shader_interface_var_init_2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcMslShaderInterfaceVarInit2Native([NativeName(NativeNameType.Param, "var")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var_2*")] SpvcMslShaderInterfaceVar2* var);

		/// <summary>/// Initializes the shader interface variable struct.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_msl_shader_interface_var_init_2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcMslShaderInterfaceVarInit2([NativeName(NativeNameType.Param, "var")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var_2*")] SpvcMslShaderInterfaceVar2* var)
		{
			SpvcMslShaderInterfaceVarInit2Native(var);
		}

		/// <summary>
		/// Initializes the resource binding struct.<br/>
		/// The defaults are non-zero.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_resource_binding_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_msl_resource_binding_init")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcMslResourceBindingInitNative([NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "spvc_msl_resource_binding*")] SpvcMslResourceBinding* binding);

		/// <summary>/// Initializes the resource binding struct.<br/>/// The defaults are non-zero.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_msl_resource_binding_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcMslResourceBindingInit([NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "spvc_msl_resource_binding*")] SpvcMslResourceBinding* binding)
		{
			SpvcMslResourceBindingInitNative(binding);
		}

		/// <summary>
		/// Runtime check for incompatibility. Obsolete. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_get_aux_buffer_struct_version")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[LibraryImport(LibName, EntryPoint = "spvc_msl_get_aux_buffer_struct_version")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcMslGetAuxBufferStructVersionNative();

		/// <summary>/// Runtime check for incompatibility. Obsolete. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_msl_get_aux_buffer_struct_version")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint SpvcMslGetAuxBufferStructVersion()
		{
			uint ret = SpvcMslGetAuxBufferStructVersionNative();
			return ret;
		}

		/// <summary>
		/// Initializes the constexpr sampler struct.<br/>
		/// The defaults are non-zero.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_constexpr_sampler_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_msl_constexpr_sampler_init")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcMslConstexprSamplerInitNative([NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler*")] SpvcMslConstexprSampler* sampler);

		/// <summary>/// Initializes the constexpr sampler struct.<br/>/// The defaults are non-zero.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_msl_constexpr_sampler_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcMslConstexprSamplerInit([NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler*")] SpvcMslConstexprSampler* sampler)
		{
			SpvcMslConstexprSamplerInitNative(sampler);
		}

		/// <summary>
		/// Initializes the constexpr sampler struct.<br/>
		/// The defaults are non-zero.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_sampler_ycbcr_conversion_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_msl_sampler_ycbcr_conversion_init")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcMslSamplerYcbcrConversionInitNative([NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "spvc_msl_sampler_ycbcr_conversion*")] SpvcMslSamplerYcbcrConversion* conv);

		/// <summary>/// Initializes the constexpr sampler struct.<br/>/// The defaults are non-zero.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_msl_sampler_ycbcr_conversion_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcMslSamplerYcbcrConversionInit([NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "spvc_msl_sampler_ycbcr_conversion*")] SpvcMslSamplerYcbcrConversion* conv)
		{
			SpvcMslSamplerYcbcrConversionInitNative(conv);
		}

		/// <summary>
		/// Initializes the resource binding struct.<br/>
		/// The defaults are non-zero.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_hlsl_resource_binding_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_hlsl_resource_binding_init")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcHlslResourceBindingInitNative([NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "spvc_hlsl_resource_binding*")] SpvcHlslResourceBinding* binding);

		/// <summary>/// Initializes the resource binding struct.<br/>/// The defaults are non-zero.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_hlsl_resource_binding_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcHlslResourceBindingInit([NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "spvc_hlsl_resource_binding*")] SpvcHlslResourceBinding* binding)
		{
			SpvcHlslResourceBindingInitNative(binding);
		}

		/// <summary>
		/// Context is the highest-level API construct.<br/>
		/// The context owns all memory allocations made by its child object hierarchy, including various non-opaque structs and strings.<br/>
		/// This means that the API user only has to care about one "destroy" call ever when using the C API.<br/>
		/// All pointers handed out by the APIs are only valid as long as the context<br/>
		/// is alive and spvc_context_release_allocations has not been called.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_create")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_context_create")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcContextCreateNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context*")] SpvcContext* context);

		/// <summary>/// Context is the highest-level API construct.<br/>/// The context owns all memory allocations made by its child object hierarchy, including various non-opaque structs and strings.<br/>/// This means that the API user only has to care about one "destroy" call ever when using the C API.<br/>/// All pointers handed out by the APIs are only valid as long as the context<br/>/// is alive and spvc_context_release_allocations has not been called.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_context_create")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcContextCreate([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context*")] SpvcContext* context)
		{
			SpvcResult ret = SpvcContextCreateNative(context);
			return ret;
		}

		/// <summary>
		/// Frees all memory allocations and objects associated with the context and its child objects. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_context_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcContextDestroyNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context);

		/// <summary>/// Frees all memory allocations and objects associated with the context and its child objects. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_context_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcContextDestroy([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context)
		{
			SpvcContextDestroyNative(context);
		}

		/// <summary>
		/// Frees all memory allocations and objects associated with the context and its child objects, but keeps the context alive. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_release_allocations")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_context_release_allocations")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcContextReleaseAllocationsNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context);

		/// <summary>/// Frees all memory allocations and objects associated with the context and its child objects, but keeps the context alive. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_context_release_allocations")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcContextReleaseAllocations([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context)
		{
			SpvcContextReleaseAllocationsNative(context);
		}

		/// <summary>
		/// Get the string for the last error which was logged. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_get_last_error_string")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[LibraryImport(LibName, EntryPoint = "spvc_context_get_last_error_string")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* SpvcContextGetLastErrorStringNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context);

		/// <summary>/// Get the string for the last error which was logged. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_context_get_last_error_string")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SpvcContextGetLastErrorString([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context)
		{
			byte* ret = SpvcContextGetLastErrorStringNative(context);
			return ret;
		}

		/// <summary>/// Get the string for the last error which was logged. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_context_get_last_error_string")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SpvcContextGetLastErrorStringS([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context)
		{
			string ret = Utils.DecodeStringUTF8(SpvcContextGetLastErrorStringNative(context));
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_context_set_error_callback")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_context_set_error_callback")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcContextSetErrorCallbackNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "cb")] [NativeName(NativeNameType.Type, "spvc_error_callback")] SpvcErrorCallback cb, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata);

		[NativeName(NativeNameType.Func, "spvc_context_set_error_callback")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcContextSetErrorCallback([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "cb")] [NativeName(NativeNameType.Type, "spvc_error_callback")] SpvcErrorCallback cb, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata)
		{
			SpvcContextSetErrorCallbackNative(context, cb, userdata);
		}

		/// <summary>
		/// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_parse_spirv")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_context_parse_spirv")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcContextParseSpirvNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "spirv")] [NativeName(NativeNameType.Type, "const SpvId*")] uint* spirv, [NativeName(NativeNameType.Param, "word_count")] [NativeName(NativeNameType.Type, "size_t")] ulong wordCount, [NativeName(NativeNameType.Param, "parsed_ir")] [NativeName(NativeNameType.Type, "spvc_parsed_ir*")] SpvcParsedIr* parsedIr);

		/// <summary>/// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_context_parse_spirv")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcContextParseSpirv([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "spirv")] [NativeName(NativeNameType.Type, "const SpvId*")] uint* spirv, [NativeName(NativeNameType.Param, "word_count")] [NativeName(NativeNameType.Type, "size_t")] ulong wordCount, [NativeName(NativeNameType.Param, "parsed_ir")] [NativeName(NativeNameType.Type, "spvc_parsed_ir*")] SpvcParsedIr* parsedIr)
		{
			SpvcResult ret = SpvcContextParseSpirvNative(context, spirv, wordCount, parsedIr);
			return ret;
		}

		/// <summary>/// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_context_parse_spirv")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcContextParseSpirv([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "spirv")] [NativeName(NativeNameType.Type, "const SpvId*")] ref uint spirv, [NativeName(NativeNameType.Param, "word_count")] [NativeName(NativeNameType.Type, "size_t")] ulong wordCount, [NativeName(NativeNameType.Param, "parsed_ir")] [NativeName(NativeNameType.Type, "spvc_parsed_ir*")] SpvcParsedIr* parsedIr)
		{
			fixed (uint* pspirv = &spirv)
			{
				SpvcResult ret = SpvcContextParseSpirvNative(context, (uint*)pspirv, wordCount, parsedIr);
				return ret;
			}
		}

		/// <summary>/// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_context_parse_spirv")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcContextParseSpirv([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "spirv")] [NativeName(NativeNameType.Type, "const SpvId*")] uint* spirv, [NativeName(NativeNameType.Param, "word_count")] [NativeName(NativeNameType.Type, "size_t")] nuint wordCount, [NativeName(NativeNameType.Param, "parsed_ir")] [NativeName(NativeNameType.Type, "spvc_parsed_ir*")] SpvcParsedIr* parsedIr)
		{
			SpvcResult ret = SpvcContextParseSpirvNative(context, spirv, wordCount, parsedIr);
			return ret;
		}

		/// <summary>/// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_context_parse_spirv")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcContextParseSpirv([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "spirv")] [NativeName(NativeNameType.Type, "const SpvId*")] ref uint spirv, [NativeName(NativeNameType.Param, "word_count")] [NativeName(NativeNameType.Type, "size_t")] nuint wordCount, [NativeName(NativeNameType.Param, "parsed_ir")] [NativeName(NativeNameType.Type, "spvc_parsed_ir*")] SpvcParsedIr* parsedIr)
		{
			fixed (uint* pspirv = &spirv)
			{
				SpvcResult ret = SpvcContextParseSpirvNative(context, (uint*)pspirv, wordCount, parsedIr);
				return ret;
			}
		}

		/// <summary>/// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_context_parse_spirv")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcContextParseSpirv([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "spirv")] [NativeName(NativeNameType.Type, "const SpvId*")] uint* spirv, [NativeName(NativeNameType.Param, "word_count")] [NativeName(NativeNameType.Type, "size_t")] ulong wordCount, [NativeName(NativeNameType.Param, "parsed_ir")] [NativeName(NativeNameType.Type, "spvc_parsed_ir*")] ref SpvcParsedIr parsedIr)
		{
			fixed (SpvcParsedIr* pparsedIr = &parsedIr)
			{
				SpvcResult ret = SpvcContextParseSpirvNative(context, spirv, wordCount, (SpvcParsedIr*)pparsedIr);
				return ret;
			}
		}

		/// <summary>/// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_context_parse_spirv")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcContextParseSpirv([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "spirv")] [NativeName(NativeNameType.Type, "const SpvId*")] ref uint spirv, [NativeName(NativeNameType.Param, "word_count")] [NativeName(NativeNameType.Type, "size_t")] ulong wordCount, [NativeName(NativeNameType.Param, "parsed_ir")] [NativeName(NativeNameType.Type, "spvc_parsed_ir*")] ref SpvcParsedIr parsedIr)
		{
			fixed (uint* pspirv = &spirv)
			{
				fixed (SpvcParsedIr* pparsedIr = &parsedIr)
				{
					SpvcResult ret = SpvcContextParseSpirvNative(context, (uint*)pspirv, wordCount, (SpvcParsedIr*)pparsedIr);
					return ret;
				}
			}
		}

		/// <summary>/// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_context_parse_spirv")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcContextParseSpirv([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "spirv")] [NativeName(NativeNameType.Type, "const SpvId*")] uint* spirv, [NativeName(NativeNameType.Param, "word_count")] [NativeName(NativeNameType.Type, "size_t")] nuint wordCount, [NativeName(NativeNameType.Param, "parsed_ir")] [NativeName(NativeNameType.Type, "spvc_parsed_ir*")] ref SpvcParsedIr parsedIr)
		{
			fixed (SpvcParsedIr* pparsedIr = &parsedIr)
			{
				SpvcResult ret = SpvcContextParseSpirvNative(context, spirv, wordCount, (SpvcParsedIr*)pparsedIr);
				return ret;
			}
		}

		/// <summary>/// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_context_parse_spirv")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcContextParseSpirv([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "spirv")] [NativeName(NativeNameType.Type, "const SpvId*")] ref uint spirv, [NativeName(NativeNameType.Param, "word_count")] [NativeName(NativeNameType.Type, "size_t")] nuint wordCount, [NativeName(NativeNameType.Param, "parsed_ir")] [NativeName(NativeNameType.Type, "spvc_parsed_ir*")] ref SpvcParsedIr parsedIr)
		{
			fixed (uint* pspirv = &spirv)
			{
				fixed (SpvcParsedIr* pparsedIr = &parsedIr)
				{
					SpvcResult ret = SpvcContextParseSpirvNative(context, (uint*)pspirv, wordCount, (SpvcParsedIr*)pparsedIr);
					return ret;
				}
			}
		}

		/// <summary>
		/// Create a compiler backend. Capture mode controls if we construct by copy or move semantics.<br/>
		/// It is always recommended to use SPVC_CAPTURE_MODE_TAKE_OWNERSHIP if you only intend to cross-compile the IR once.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_create_compiler")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_context_create_compiler")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcContextCreateCompilerNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "backend")] [NativeName(NativeNameType.Type, "spvc_backend")] SpvcBackend backend, [NativeName(NativeNameType.Param, "parsed_ir")] [NativeName(NativeNameType.Type, "spvc_parsed_ir")] SpvcParsedIr parsedIr, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "spvc_capture_mode")] SpvcCaptureMode mode, [NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler*")] SpvcCompiler* compiler);

		/// <summary>/// Create a compiler backend. Capture mode controls if we construct by copy or move semantics.<br/>/// It is always recommended to use SPVC_CAPTURE_MODE_TAKE_OWNERSHIP if you only intend to cross-compile the IR once.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_context_create_compiler")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcContextCreateCompiler([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "backend")] [NativeName(NativeNameType.Type, "spvc_backend")] SpvcBackend backend, [NativeName(NativeNameType.Param, "parsed_ir")] [NativeName(NativeNameType.Type, "spvc_parsed_ir")] SpvcParsedIr parsedIr, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "spvc_capture_mode")] SpvcCaptureMode mode, [NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler*")] SpvcCompiler* compiler)
		{
			SpvcResult ret = SpvcContextCreateCompilerNative(context, backend, parsedIr, mode, compiler);
			return ret;
		}

		/// <summary>/// Create a compiler backend. Capture mode controls if we construct by copy or move semantics.<br/>/// It is always recommended to use SPVC_CAPTURE_MODE_TAKE_OWNERSHIP if you only intend to cross-compile the IR once.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_context_create_compiler")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcContextCreateCompiler([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "backend")] [NativeName(NativeNameType.Type, "spvc_backend")] SpvcBackend backend, [NativeName(NativeNameType.Param, "parsed_ir")] [NativeName(NativeNameType.Type, "spvc_parsed_ir")] SpvcParsedIr parsedIr, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "spvc_capture_mode")] SpvcCaptureMode mode, [NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler*")] ref SpvcCompiler compiler)
		{
			fixed (SpvcCompiler* pcompiler = &compiler)
			{
				SpvcResult ret = SpvcContextCreateCompilerNative(context, backend, parsedIr, mode, (SpvcCompiler*)pcompiler);
				return ret;
			}
		}

		/// <summary>
		/// Maps directly to C++ API. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_current_id_bound")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_current_id_bound")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcCompilerGetCurrentIdBoundNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler);

		/// <summary>/// Maps directly to C++ API. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_get_current_id_bound")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint SpvcCompilerGetCurrentIdBound([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			uint ret = SpvcCompilerGetCurrentIdBoundNative(compiler);
			return ret;
		}

		/// <summary>
		/// Create compiler options, which will initialize defaults. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_create_compiler_options")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_create_compiler_options")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerCreateCompilerOptionsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "options")] [NativeName(NativeNameType.Type, "spvc_compiler_options*")] SpvcCompilerOptions* options);

		/// <summary>/// Create compiler options, which will initialize defaults. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_create_compiler_options")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerCreateCompilerOptions([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "options")] [NativeName(NativeNameType.Type, "spvc_compiler_options*")] SpvcCompilerOptions* options)
		{
			SpvcResult ret = SpvcCompilerCreateCompilerOptionsNative(compiler, options);
			return ret;
		}

		/// <summary>/// Create compiler options, which will initialize defaults. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_create_compiler_options")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerCreateCompilerOptions([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "options")] [NativeName(NativeNameType.Type, "spvc_compiler_options*")] ref SpvcCompilerOptions options)
		{
			fixed (SpvcCompilerOptions* poptions = &options)
			{
				SpvcResult ret = SpvcCompilerCreateCompilerOptionsNative(compiler, (SpvcCompilerOptions*)poptions);
				return ret;
			}
		}

		/// <summary>
		/// Override options. Will return error if e.g. MSL options are used for the HLSL backend, etc. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_options_set_bool")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_options_set_bool")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerOptionsSetBoolNative([NativeName(NativeNameType.Param, "options")] [NativeName(NativeNameType.Type, "spvc_compiler_options")] SpvcCompilerOptions options, [NativeName(NativeNameType.Param, "option")] [NativeName(NativeNameType.Type, "spvc_compiler_option")] SpvcCompilerOption option, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "spvc_bool")] byte value);

		/// <summary>/// Override options. Will return error if e.g. MSL options are used for the HLSL backend, etc. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_options_set_bool")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerOptionsSetBool([NativeName(NativeNameType.Param, "options")] [NativeName(NativeNameType.Type, "spvc_compiler_options")] SpvcCompilerOptions options, [NativeName(NativeNameType.Param, "option")] [NativeName(NativeNameType.Type, "spvc_compiler_option")] SpvcCompilerOption option, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "spvc_bool")] byte value)
		{
			SpvcResult ret = SpvcCompilerOptionsSetBoolNative(options, option, value);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_options_set_uint")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_options_set_uint")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerOptionsSetUintNative([NativeName(NativeNameType.Param, "options")] [NativeName(NativeNameType.Type, "spvc_compiler_options")] SpvcCompilerOptions options, [NativeName(NativeNameType.Param, "option")] [NativeName(NativeNameType.Type, "spvc_compiler_option")] SpvcCompilerOption option, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned int")] uint value);

		[NativeName(NativeNameType.Func, "spvc_compiler_options_set_uint")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerOptionsSetUint([NativeName(NativeNameType.Param, "options")] [NativeName(NativeNameType.Type, "spvc_compiler_options")] SpvcCompilerOptions options, [NativeName(NativeNameType.Param, "option")] [NativeName(NativeNameType.Type, "spvc_compiler_option")] SpvcCompilerOption option, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned int")] uint value)
		{
			SpvcResult ret = SpvcCompilerOptionsSetUintNative(options, option, value);
			return ret;
		}

		/// <summary>
		/// Set compiler options. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_install_compiler_options")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_install_compiler_options")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerInstallCompilerOptionsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "options")] [NativeName(NativeNameType.Type, "spvc_compiler_options")] SpvcCompilerOptions options);

		/// <summary>/// Set compiler options. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_install_compiler_options")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerInstallCompilerOptions([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "options")] [NativeName(NativeNameType.Type, "spvc_compiler_options")] SpvcCompilerOptions options)
		{
			SpvcResult ret = SpvcCompilerInstallCompilerOptionsNative(compiler, options);
			return ret;
		}

		/// <summary>
		/// Compile IR into a string. *source is owned by the context, and caller must not free it themselves. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_compile")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_compile")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerCompileNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "const char**")] byte** source);

		/// <summary>/// Compile IR into a string. *source is owned by the context, and caller must not free it themselves. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_compile")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerCompile([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "const char**")] byte** source)
		{
			SpvcResult ret = SpvcCompilerCompileNative(compiler, source);
			return ret;
		}

		/// <summary>/// Compile IR into a string. *source is owned by the context, and caller must not free it themselves. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_compile")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerCompile([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "const char**")] ref byte* source)
		{
			fixed (byte** psource = &source)
			{
				SpvcResult ret = SpvcCompilerCompileNative(compiler, (byte**)psource);
				return ret;
			}
		}

		/// <summary>
		/// Maps to C++ API. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_add_header_line")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_add_header_line")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerAddHeaderLineNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] byte* line);

		/// <summary>/// Maps to C++ API. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_add_header_line")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerAddHeaderLine([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] byte* line)
		{
			SpvcResult ret = SpvcCompilerAddHeaderLineNative(compiler, line);
			return ret;
		}

		/// <summary>/// Maps to C++ API. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_add_header_line")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerAddHeaderLine([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] ref byte line)
		{
			fixed (byte* pline = &line)
			{
				SpvcResult ret = SpvcCompilerAddHeaderLineNative(compiler, (byte*)pline);
				return ret;
			}
		}

		/// <summary>/// Maps to C++ API. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_add_header_line")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerAddHeaderLine([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] string line)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (line != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(line);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(line, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvcResult ret = SpvcCompilerAddHeaderLineNative(compiler, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_require_extension")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_require_extension")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerRequireExtensionNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "ext")] [NativeName(NativeNameType.Type, "const char*")] byte* ext);

		[NativeName(NativeNameType.Func, "spvc_compiler_require_extension")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerRequireExtension([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "ext")] [NativeName(NativeNameType.Type, "const char*")] byte* ext)
		{
			SpvcResult ret = SpvcCompilerRequireExtensionNative(compiler, ext);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_require_extension")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerRequireExtension([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "ext")] [NativeName(NativeNameType.Type, "const char*")] ref byte ext)
		{
			fixed (byte* pext = &ext)
			{
				SpvcResult ret = SpvcCompilerRequireExtensionNative(compiler, (byte*)pext);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_require_extension")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerRequireExtension([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "ext")] [NativeName(NativeNameType.Type, "const char*")] string ext)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (ext != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(ext);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(ext, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvcResult ret = SpvcCompilerRequireExtensionNative(compiler, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_num_required_extensions")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_num_required_extensions")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ulong SpvcCompilerGetNumRequiredExtensionsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_num_required_extensions")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong SpvcCompilerGetNumRequiredExtensions([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			ulong ret = SpvcCompilerGetNumRequiredExtensionsNative(compiler);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_required_extension")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_required_extension")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* SpvcCompilerGetRequiredExtensionNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "size_t")] ulong index);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_required_extension")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SpvcCompilerGetRequiredExtension([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "size_t")] ulong index)
		{
			byte* ret = SpvcCompilerGetRequiredExtensionNative(compiler, index);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_required_extension")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SpvcCompilerGetRequiredExtensionS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "size_t")] ulong index)
		{
			string ret = Utils.DecodeStringUTF8(SpvcCompilerGetRequiredExtensionNative(compiler, index));
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_required_extension")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SpvcCompilerGetRequiredExtension([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "size_t")] nuint index)
		{
			byte* ret = SpvcCompilerGetRequiredExtensionNative(compiler, index);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_required_extension")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SpvcCompilerGetRequiredExtensionS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "size_t")] nuint index)
		{
			string ret = Utils.DecodeStringUTF8(SpvcCompilerGetRequiredExtensionNative(compiler, index));
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_flatten_buffer_block")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_flatten_buffer_block")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerFlattenBufferBlockNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id);

		[NativeName(NativeNameType.Func, "spvc_compiler_flatten_buffer_block")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerFlattenBufferBlock([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id)
		{
			SpvcResult ret = SpvcCompilerFlattenBufferBlockNative(compiler, id);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_variable_is_depth_or_compare")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_variable_is_depth_or_compare")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcCompilerVariableIsDepthOrCompareNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id);

		[NativeName(NativeNameType.Func, "spvc_compiler_variable_is_depth_or_compare")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerVariableIsDepthOrCompare([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id)
		{
			byte ret = SpvcCompilerVariableIsDepthOrCompareNative(compiler, id);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_mask_stage_output_by_location")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_mask_stage_output_by_location")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerMaskStageOutputByLocationNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "unsigned int")] uint location, [NativeName(NativeNameType.Param, "component")] [NativeName(NativeNameType.Type, "unsigned int")] uint component);

		[NativeName(NativeNameType.Func, "spvc_compiler_mask_stage_output_by_location")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMaskStageOutputByLocation([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "unsigned int")] uint location, [NativeName(NativeNameType.Param, "component")] [NativeName(NativeNameType.Type, "unsigned int")] uint component)
		{
			SpvcResult ret = SpvcCompilerMaskStageOutputByLocationNative(compiler, location, component);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_mask_stage_output_by_builtin")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_mask_stage_output_by_builtin")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerMaskStageOutputByBuiltinNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "builtin")] [NativeName(NativeNameType.Type, "SpvBuiltIn")] SpvBuiltIn builtin);

		[NativeName(NativeNameType.Func, "spvc_compiler_mask_stage_output_by_builtin")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMaskStageOutputByBuiltin([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "builtin")] [NativeName(NativeNameType.Type, "SpvBuiltIn")] SpvBuiltIn builtin)
		{
			SpvcResult ret = SpvcCompilerMaskStageOutputByBuiltinNative(compiler, builtin);
			return ret;
		}

		/// <summary>
		/// HLSL specifics.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_set_root_constants_layout")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_hlsl_set_root_constants_layout")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerHlslSetRootConstantsLayoutNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "constant_info")] [NativeName(NativeNameType.Type, "const spvc_hlsl_root_constants*")] SpvcHlslRootConstants* constantInfo, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] ulong count);

		/// <summary>/// HLSL specifics.<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_set_root_constants_layout")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerHlslSetRootConstantsLayout([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "constant_info")] [NativeName(NativeNameType.Type, "const spvc_hlsl_root_constants*")] SpvcHlslRootConstants* constantInfo, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] ulong count)
		{
			SpvcResult ret = SpvcCompilerHlslSetRootConstantsLayoutNative(compiler, constantInfo, count);
			return ret;
		}

		/// <summary>/// HLSL specifics.<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_set_root_constants_layout")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerHlslSetRootConstantsLayout([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "constant_info")] [NativeName(NativeNameType.Type, "const spvc_hlsl_root_constants*")] ref SpvcHlslRootConstants constantInfo, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] ulong count)
		{
			fixed (SpvcHlslRootConstants* pconstantInfo = &constantInfo)
			{
				SpvcResult ret = SpvcCompilerHlslSetRootConstantsLayoutNative(compiler, (SpvcHlslRootConstants*)pconstantInfo, count);
				return ret;
			}
		}

		/// <summary>/// HLSL specifics.<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_set_root_constants_layout")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerHlslSetRootConstantsLayout([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "constant_info")] [NativeName(NativeNameType.Type, "const spvc_hlsl_root_constants*")] SpvcHlslRootConstants* constantInfo, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] nuint count)
		{
			SpvcResult ret = SpvcCompilerHlslSetRootConstantsLayoutNative(compiler, constantInfo, count);
			return ret;
		}

		/// <summary>/// HLSL specifics.<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_set_root_constants_layout")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerHlslSetRootConstantsLayout([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "constant_info")] [NativeName(NativeNameType.Type, "const spvc_hlsl_root_constants*")] ref SpvcHlslRootConstants constantInfo, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] nuint count)
		{
			fixed (SpvcHlslRootConstants* pconstantInfo = &constantInfo)
			{
				SpvcResult ret = SpvcCompilerHlslSetRootConstantsLayoutNative(compiler, (SpvcHlslRootConstants*)pconstantInfo, count);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_add_vertex_attribute_remap")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_hlsl_add_vertex_attribute_remap")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerHlslAddVertexAttributeRemapNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "remap")] [NativeName(NativeNameType.Type, "const spvc_hlsl_vertex_attribute_remap*")] SpvcHlslVertexAttributeRemap* remap, [NativeName(NativeNameType.Param, "remaps")] [NativeName(NativeNameType.Type, "size_t")] ulong remaps);

		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_add_vertex_attribute_remap")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerHlslAddVertexAttributeRemap([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "remap")] [NativeName(NativeNameType.Type, "const spvc_hlsl_vertex_attribute_remap*")] SpvcHlslVertexAttributeRemap* remap, [NativeName(NativeNameType.Param, "remaps")] [NativeName(NativeNameType.Type, "size_t")] ulong remaps)
		{
			SpvcResult ret = SpvcCompilerHlslAddVertexAttributeRemapNative(compiler, remap, remaps);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_add_vertex_attribute_remap")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerHlslAddVertexAttributeRemap([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "remap")] [NativeName(NativeNameType.Type, "const spvc_hlsl_vertex_attribute_remap*")] ref SpvcHlslVertexAttributeRemap remap, [NativeName(NativeNameType.Param, "remaps")] [NativeName(NativeNameType.Type, "size_t")] ulong remaps)
		{
			fixed (SpvcHlslVertexAttributeRemap* premap = &remap)
			{
				SpvcResult ret = SpvcCompilerHlslAddVertexAttributeRemapNative(compiler, (SpvcHlslVertexAttributeRemap*)premap, remaps);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_add_vertex_attribute_remap")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerHlslAddVertexAttributeRemap([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "remap")] [NativeName(NativeNameType.Type, "const spvc_hlsl_vertex_attribute_remap*")] SpvcHlslVertexAttributeRemap* remap, [NativeName(NativeNameType.Param, "remaps")] [NativeName(NativeNameType.Type, "size_t")] nuint remaps)
		{
			SpvcResult ret = SpvcCompilerHlslAddVertexAttributeRemapNative(compiler, remap, remaps);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_add_vertex_attribute_remap")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerHlslAddVertexAttributeRemap([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "remap")] [NativeName(NativeNameType.Type, "const spvc_hlsl_vertex_attribute_remap*")] ref SpvcHlslVertexAttributeRemap remap, [NativeName(NativeNameType.Param, "remaps")] [NativeName(NativeNameType.Type, "size_t")] nuint remaps)
		{
			fixed (SpvcHlslVertexAttributeRemap* premap = &remap)
			{
				SpvcResult ret = SpvcCompilerHlslAddVertexAttributeRemapNative(compiler, (SpvcHlslVertexAttributeRemap*)premap, remaps);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_remap_num_workgroups_builtin")]
		[return: NativeName(NativeNameType.Type, "spvc_variable_id")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_hlsl_remap_num_workgroups_builtin")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcCompilerHlslRemapNumWorkgroupsBuiltinNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler);

		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_remap_num_workgroups_builtin")]
		[return: NativeName(NativeNameType.Type, "spvc_variable_id")]
		public static uint SpvcCompilerHlslRemapNumWorkgroupsBuiltin([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			uint ret = SpvcCompilerHlslRemapNumWorkgroupsBuiltinNative(compiler);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_set_resource_binding_flags")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_hlsl_set_resource_binding_flags")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerHlslSetResourceBindingFlagsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "spvc_hlsl_binding_flags")] uint flags);

		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_set_resource_binding_flags")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerHlslSetResourceBindingFlags([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "spvc_hlsl_binding_flags")] uint flags)
		{
			SpvcResult ret = SpvcCompilerHlslSetResourceBindingFlagsNative(compiler, flags);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_add_resource_binding")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_hlsl_add_resource_binding")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerHlslAddResourceBindingNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const spvc_hlsl_resource_binding*")] SpvcHlslResourceBinding* binding);

		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_add_resource_binding")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerHlslAddResourceBinding([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const spvc_hlsl_resource_binding*")] SpvcHlslResourceBinding* binding)
		{
			SpvcResult ret = SpvcCompilerHlslAddResourceBindingNative(compiler, binding);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_add_resource_binding")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerHlslAddResourceBinding([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const spvc_hlsl_resource_binding*")] ref SpvcHlslResourceBinding binding)
		{
			fixed (SpvcHlslResourceBinding* pbinding = &binding)
			{
				SpvcResult ret = SpvcCompilerHlslAddResourceBindingNative(compiler, (SpvcHlslResourceBinding*)pbinding);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_is_resource_used")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_hlsl_is_resource_used")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcCompilerHlslIsResourceUsedNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "unsigned int")] uint set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding);

		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_is_resource_used")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerHlslIsResourceUsed([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "unsigned int")] uint set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding)
		{
			byte ret = SpvcCompilerHlslIsResourceUsedNative(compiler, model, set, binding);
			return ret;
		}

		/// <summary>
		/// MSL specifics.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_is_rasterization_disabled")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_is_rasterization_disabled")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcCompilerMslIsRasterizationDisabledNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler);

		/// <summary>/// MSL specifics.<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_msl_is_rasterization_disabled")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerMslIsRasterizationDisabled([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			byte ret = SpvcCompilerMslIsRasterizationDisabledNative(compiler);
			return ret;
		}

		/// <summary>
		/// Obsolete. Renamed to needs_swizzle_buffer. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_aux_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_needs_aux_buffer")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcCompilerMslNeedsAuxBufferNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler);

		/// <summary>/// Obsolete. Renamed to needs_swizzle_buffer. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_aux_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerMslNeedsAuxBuffer([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			byte ret = SpvcCompilerMslNeedsAuxBufferNative(compiler);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_swizzle_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_needs_swizzle_buffer")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcCompilerMslNeedsSwizzleBufferNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_swizzle_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerMslNeedsSwizzleBuffer([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			byte ret = SpvcCompilerMslNeedsSwizzleBufferNative(compiler);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_buffer_size_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_needs_buffer_size_buffer")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcCompilerMslNeedsBufferSizeBufferNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_buffer_size_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerMslNeedsBufferSizeBuffer([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			byte ret = SpvcCompilerMslNeedsBufferSizeBufferNative(compiler);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_output_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_needs_output_buffer")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcCompilerMslNeedsOutputBufferNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_output_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerMslNeedsOutputBuffer([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			byte ret = SpvcCompilerMslNeedsOutputBufferNative(compiler);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_patch_output_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_needs_patch_output_buffer")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcCompilerMslNeedsPatchOutputBufferNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_patch_output_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerMslNeedsPatchOutputBuffer([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			byte ret = SpvcCompilerMslNeedsPatchOutputBufferNative(compiler);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_input_threadgroup_mem")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_needs_input_threadgroup_mem")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcCompilerMslNeedsInputThreadgroupMemNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_input_threadgroup_mem")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerMslNeedsInputThreadgroupMem([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			byte ret = SpvcCompilerMslNeedsInputThreadgroupMemNative(compiler);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_vertex_attribute")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_add_vertex_attribute")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerMslAddVertexAttributeNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "const spvc_msl_vertex_attribute*")] SpvcMslVertexAttribute* attrs);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_vertex_attribute")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslAddVertexAttribute([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "const spvc_msl_vertex_attribute*")] SpvcMslVertexAttribute* attrs)
		{
			SpvcResult ret = SpvcCompilerMslAddVertexAttributeNative(compiler, attrs);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_vertex_attribute")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslAddVertexAttribute([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "const spvc_msl_vertex_attribute*")] ref SpvcMslVertexAttribute attrs)
		{
			fixed (SpvcMslVertexAttribute* pattrs = &attrs)
			{
				SpvcResult ret = SpvcCompilerMslAddVertexAttributeNative(compiler, (SpvcMslVertexAttribute*)pattrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_resource_binding")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_add_resource_binding")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerMslAddResourceBindingNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const spvc_msl_resource_binding*")] SpvcMslResourceBinding* binding);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_resource_binding")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslAddResourceBinding([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const spvc_msl_resource_binding*")] SpvcMslResourceBinding* binding)
		{
			SpvcResult ret = SpvcCompilerMslAddResourceBindingNative(compiler, binding);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_resource_binding")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslAddResourceBinding([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const spvc_msl_resource_binding*")] ref SpvcMslResourceBinding binding)
		{
			fixed (SpvcMslResourceBinding* pbinding = &binding)
			{
				SpvcResult ret = SpvcCompilerMslAddResourceBindingNative(compiler, (SpvcMslResourceBinding*)pbinding);
				return ret;
			}
		}

		/// <summary>
		/// Deprecated; use spvc_compiler_msl_add_shader_input_2(). <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_input")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_add_shader_input")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerMslAddShaderInputNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "input")] [NativeName(NativeNameType.Type, "const spvc_msl_shader_interface_var*")] SpvcMslShaderInterfaceVar* input);

		/// <summary>/// Deprecated; use spvc_compiler_msl_add_shader_input_2(). <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_input")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslAddShaderInput([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "input")] [NativeName(NativeNameType.Type, "const spvc_msl_shader_interface_var*")] SpvcMslShaderInterfaceVar* input)
		{
			SpvcResult ret = SpvcCompilerMslAddShaderInputNative(compiler, input);
			return ret;
		}

		/// <summary>/// Deprecated; use spvc_compiler_msl_add_shader_input_2(). <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_input")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslAddShaderInput([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "input")] [NativeName(NativeNameType.Type, "const spvc_msl_shader_interface_var*")] ref SpvcMslShaderInterfaceVar input)
		{
			fixed (SpvcMslShaderInterfaceVar* pinput = &input)
			{
				SpvcResult ret = SpvcCompilerMslAddShaderInputNative(compiler, (SpvcMslShaderInterfaceVar*)pinput);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_input_2")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_add_shader_input_2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerMslAddShaderInput2Native([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "input")] [NativeName(NativeNameType.Type, "const spvc_msl_shader_interface_var_2*")] SpvcMslShaderInterfaceVar2* input);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_input_2")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslAddShaderInput2([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "input")] [NativeName(NativeNameType.Type, "const spvc_msl_shader_interface_var_2*")] SpvcMslShaderInterfaceVar2* input)
		{
			SpvcResult ret = SpvcCompilerMslAddShaderInput2Native(compiler, input);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_input_2")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslAddShaderInput2([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "input")] [NativeName(NativeNameType.Type, "const spvc_msl_shader_interface_var_2*")] ref SpvcMslShaderInterfaceVar2 input)
		{
			fixed (SpvcMslShaderInterfaceVar2* pinput = &input)
			{
				SpvcResult ret = SpvcCompilerMslAddShaderInput2Native(compiler, (SpvcMslShaderInterfaceVar2*)pinput);
				return ret;
			}
		}

		/// <summary>
		/// Deprecated; use spvc_compiler_msl_add_shader_output_2(). <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_output")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_add_shader_output")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerMslAddShaderOutputNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "output")] [NativeName(NativeNameType.Type, "const spvc_msl_shader_interface_var*")] SpvcMslShaderInterfaceVar* output);

		/// <summary>/// Deprecated; use spvc_compiler_msl_add_shader_output_2(). <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_output")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslAddShaderOutput([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "output")] [NativeName(NativeNameType.Type, "const spvc_msl_shader_interface_var*")] SpvcMslShaderInterfaceVar* output)
		{
			SpvcResult ret = SpvcCompilerMslAddShaderOutputNative(compiler, output);
			return ret;
		}

		/// <summary>/// Deprecated; use spvc_compiler_msl_add_shader_output_2(). <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_output")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslAddShaderOutput([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "output")] [NativeName(NativeNameType.Type, "const spvc_msl_shader_interface_var*")] ref SpvcMslShaderInterfaceVar output)
		{
			fixed (SpvcMslShaderInterfaceVar* poutput = &output)
			{
				SpvcResult ret = SpvcCompilerMslAddShaderOutputNative(compiler, (SpvcMslShaderInterfaceVar*)poutput);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_output_2")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_add_shader_output_2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerMslAddShaderOutput2Native([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "output")] [NativeName(NativeNameType.Type, "const spvc_msl_shader_interface_var_2*")] SpvcMslShaderInterfaceVar2* output);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_output_2")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslAddShaderOutput2([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "output")] [NativeName(NativeNameType.Type, "const spvc_msl_shader_interface_var_2*")] SpvcMslShaderInterfaceVar2* output)
		{
			SpvcResult ret = SpvcCompilerMslAddShaderOutput2Native(compiler, output);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_output_2")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslAddShaderOutput2([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "output")] [NativeName(NativeNameType.Type, "const spvc_msl_shader_interface_var_2*")] ref SpvcMslShaderInterfaceVar2 output)
		{
			fixed (SpvcMslShaderInterfaceVar2* poutput = &output)
			{
				SpvcResult ret = SpvcCompilerMslAddShaderOutput2Native(compiler, (SpvcMslShaderInterfaceVar2*)poutput);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_discrete_descriptor_set")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_add_discrete_descriptor_set")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerMslAddDiscreteDescriptorSetNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_discrete_descriptor_set")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslAddDiscreteDescriptorSet([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet)
		{
			SpvcResult ret = SpvcCompilerMslAddDiscreteDescriptorSetNative(compiler, descSet);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_set_argument_buffer_device_address_space")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_set_argument_buffer_device_address_space")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerMslSetArgumentBufferDeviceAddressSpaceNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "device_address")] [NativeName(NativeNameType.Type, "spvc_bool")] byte deviceAddress);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_set_argument_buffer_device_address_space")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslSetArgumentBufferDeviceAddressSpace([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "device_address")] [NativeName(NativeNameType.Type, "spvc_bool")] byte deviceAddress)
		{
			SpvcResult ret = SpvcCompilerMslSetArgumentBufferDeviceAddressSpaceNative(compiler, descSet, deviceAddress);
			return ret;
		}

		/// <summary>
		/// Obsolete, use is_shader_input_used. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_is_vertex_attribute_used")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_is_vertex_attribute_used")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcCompilerMslIsVertexAttributeUsedNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "unsigned int")] uint location);

		/// <summary>/// Obsolete, use is_shader_input_used. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_msl_is_vertex_attribute_used")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerMslIsVertexAttributeUsed([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "unsigned int")] uint location)
		{
			byte ret = SpvcCompilerMslIsVertexAttributeUsedNative(compiler, location);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_is_shader_input_used")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_is_shader_input_used")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcCompilerMslIsShaderInputUsedNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "unsigned int")] uint location);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_is_shader_input_used")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerMslIsShaderInputUsed([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "unsigned int")] uint location)
		{
			byte ret = SpvcCompilerMslIsShaderInputUsedNative(compiler, location);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_is_shader_output_used")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_is_shader_output_used")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcCompilerMslIsShaderOutputUsedNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "unsigned int")] uint location);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_is_shader_output_used")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerMslIsShaderOutputUsed([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "unsigned int")] uint location)
		{
			byte ret = SpvcCompilerMslIsShaderOutputUsedNative(compiler, location);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_is_resource_used")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_is_resource_used")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcCompilerMslIsResourceUsedNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "unsigned int")] uint set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_is_resource_used")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerMslIsResourceUsed([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "unsigned int")] uint set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding)
		{
			byte ret = SpvcCompilerMslIsResourceUsedNative(compiler, model, set, binding);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_remap_constexpr_sampler")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerMslRemapConstexprSamplerNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "const spvc_msl_constexpr_sampler*")] SpvcMslConstexprSampler* sampler);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslRemapConstexprSampler([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "const spvc_msl_constexpr_sampler*")] SpvcMslConstexprSampler* sampler)
		{
			SpvcResult ret = SpvcCompilerMslRemapConstexprSamplerNative(compiler, id, sampler);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslRemapConstexprSampler([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "const spvc_msl_constexpr_sampler*")] ref SpvcMslConstexprSampler sampler)
		{
			fixed (SpvcMslConstexprSampler* psampler = &sampler)
			{
				SpvcResult ret = SpvcCompilerMslRemapConstexprSamplerNative(compiler, id, (SpvcMslConstexprSampler*)psampler);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_by_binding")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_remap_constexpr_sampler_by_binding")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerMslRemapConstexprSamplerByBindingNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "const spvc_msl_constexpr_sampler*")] SpvcMslConstexprSampler* sampler);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_by_binding")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslRemapConstexprSamplerByBinding([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "const spvc_msl_constexpr_sampler*")] SpvcMslConstexprSampler* sampler)
		{
			SpvcResult ret = SpvcCompilerMslRemapConstexprSamplerByBindingNative(compiler, descSet, binding, sampler);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_by_binding")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslRemapConstexprSamplerByBinding([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "const spvc_msl_constexpr_sampler*")] ref SpvcMslConstexprSampler sampler)
		{
			fixed (SpvcMslConstexprSampler* psampler = &sampler)
			{
				SpvcResult ret = SpvcCompilerMslRemapConstexprSamplerByBindingNative(compiler, descSet, binding, (SpvcMslConstexprSampler*)psampler);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_ycbcr")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_remap_constexpr_sampler_ycbcr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerMslRemapConstexprSamplerYcbcrNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "const spvc_msl_constexpr_sampler*")] SpvcMslConstexprSampler* sampler, [NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "const spvc_msl_sampler_ycbcr_conversion*")] SpvcMslSamplerYcbcrConversion* conv);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_ycbcr")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslRemapConstexprSamplerYcbcr([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "const spvc_msl_constexpr_sampler*")] SpvcMslConstexprSampler* sampler, [NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "const spvc_msl_sampler_ycbcr_conversion*")] SpvcMslSamplerYcbcrConversion* conv)
		{
			SpvcResult ret = SpvcCompilerMslRemapConstexprSamplerYcbcrNative(compiler, id, sampler, conv);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_ycbcr")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslRemapConstexprSamplerYcbcr([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "const spvc_msl_constexpr_sampler*")] ref SpvcMslConstexprSampler sampler, [NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "const spvc_msl_sampler_ycbcr_conversion*")] SpvcMslSamplerYcbcrConversion* conv)
		{
			fixed (SpvcMslConstexprSampler* psampler = &sampler)
			{
				SpvcResult ret = SpvcCompilerMslRemapConstexprSamplerYcbcrNative(compiler, id, (SpvcMslConstexprSampler*)psampler, conv);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_ycbcr")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslRemapConstexprSamplerYcbcr([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "const spvc_msl_constexpr_sampler*")] SpvcMslConstexprSampler* sampler, [NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "const spvc_msl_sampler_ycbcr_conversion*")] ref SpvcMslSamplerYcbcrConversion conv)
		{
			fixed (SpvcMslSamplerYcbcrConversion* pconv = &conv)
			{
				SpvcResult ret = SpvcCompilerMslRemapConstexprSamplerYcbcrNative(compiler, id, sampler, (SpvcMslSamplerYcbcrConversion*)pconv);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_ycbcr")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslRemapConstexprSamplerYcbcr([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "const spvc_msl_constexpr_sampler*")] ref SpvcMslConstexprSampler sampler, [NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "const spvc_msl_sampler_ycbcr_conversion*")] ref SpvcMslSamplerYcbcrConversion conv)
		{
			fixed (SpvcMslConstexprSampler* psampler = &sampler)
			{
				fixed (SpvcMslSamplerYcbcrConversion* pconv = &conv)
				{
					SpvcResult ret = SpvcCompilerMslRemapConstexprSamplerYcbcrNative(compiler, id, (SpvcMslConstexprSampler*)psampler, (SpvcMslSamplerYcbcrConversion*)pconv);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerMslRemapConstexprSamplerByBindingYcbcrNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "const spvc_msl_constexpr_sampler*")] SpvcMslConstexprSampler* sampler, [NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "const spvc_msl_sampler_ycbcr_conversion*")] SpvcMslSamplerYcbcrConversion* conv);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslRemapConstexprSamplerByBindingYcbcr([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "const spvc_msl_constexpr_sampler*")] SpvcMslConstexprSampler* sampler, [NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "const spvc_msl_sampler_ycbcr_conversion*")] SpvcMslSamplerYcbcrConversion* conv)
		{
			SpvcResult ret = SpvcCompilerMslRemapConstexprSamplerByBindingYcbcrNative(compiler, descSet, binding, sampler, conv);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslRemapConstexprSamplerByBindingYcbcr([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "const spvc_msl_constexpr_sampler*")] ref SpvcMslConstexprSampler sampler, [NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "const spvc_msl_sampler_ycbcr_conversion*")] SpvcMslSamplerYcbcrConversion* conv)
		{
			fixed (SpvcMslConstexprSampler* psampler = &sampler)
			{
				SpvcResult ret = SpvcCompilerMslRemapConstexprSamplerByBindingYcbcrNative(compiler, descSet, binding, (SpvcMslConstexprSampler*)psampler, conv);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslRemapConstexprSamplerByBindingYcbcr([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "const spvc_msl_constexpr_sampler*")] SpvcMslConstexprSampler* sampler, [NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "const spvc_msl_sampler_ycbcr_conversion*")] ref SpvcMslSamplerYcbcrConversion conv)
		{
			fixed (SpvcMslSamplerYcbcrConversion* pconv = &conv)
			{
				SpvcResult ret = SpvcCompilerMslRemapConstexprSamplerByBindingYcbcrNative(compiler, descSet, binding, sampler, (SpvcMslSamplerYcbcrConversion*)pconv);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslRemapConstexprSamplerByBindingYcbcr([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "const spvc_msl_constexpr_sampler*")] ref SpvcMslConstexprSampler sampler, [NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "const spvc_msl_sampler_ycbcr_conversion*")] ref SpvcMslSamplerYcbcrConversion conv)
		{
			fixed (SpvcMslConstexprSampler* psampler = &sampler)
			{
				fixed (SpvcMslSamplerYcbcrConversion* pconv = &conv)
				{
					SpvcResult ret = SpvcCompilerMslRemapConstexprSamplerByBindingYcbcrNative(compiler, descSet, binding, (SpvcMslConstexprSampler*)psampler, (SpvcMslSamplerYcbcrConversion*)pconv);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_set_fragment_output_components")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_set_fragment_output_components")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerMslSetFragmentOutputComponentsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "unsigned int")] uint location, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "unsigned int")] uint components);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_set_fragment_output_components")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslSetFragmentOutputComponents([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "unsigned int")] uint location, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "unsigned int")] uint components)
		{
			SpvcResult ret = SpvcCompilerMslSetFragmentOutputComponentsNative(compiler, location, components);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_get_automatic_resource_binding")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_get_automatic_resource_binding")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcCompilerMslGetAutomaticResourceBindingNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_get_automatic_resource_binding")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint SpvcCompilerMslGetAutomaticResourceBinding([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id)
		{
			uint ret = SpvcCompilerMslGetAutomaticResourceBindingNative(compiler, id);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_get_automatic_resource_binding_secondary")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_get_automatic_resource_binding_secondary")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcCompilerMslGetAutomaticResourceBindingSecondaryNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_get_automatic_resource_binding_secondary")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint SpvcCompilerMslGetAutomaticResourceBindingSecondary([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id)
		{
			uint ret = SpvcCompilerMslGetAutomaticResourceBindingSecondaryNative(compiler, id);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_dynamic_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_add_dynamic_buffer")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerMslAddDynamicBufferNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_dynamic_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslAddDynamicBuffer([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			SpvcResult ret = SpvcCompilerMslAddDynamicBufferNative(compiler, descSet, binding, index);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_inline_uniform_block")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_add_inline_uniform_block")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerMslAddInlineUniformBlockNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_inline_uniform_block")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslAddInlineUniformBlock([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding)
		{
			SpvcResult ret = SpvcCompilerMslAddInlineUniformBlockNative(compiler, descSet, binding);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_set_combined_sampler_suffix")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_set_combined_sampler_suffix")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerMslSetCombinedSamplerSuffixNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "suffix")] [NativeName(NativeNameType.Type, "const char*")] byte* suffix);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_set_combined_sampler_suffix")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslSetCombinedSamplerSuffix([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "suffix")] [NativeName(NativeNameType.Type, "const char*")] byte* suffix)
		{
			SpvcResult ret = SpvcCompilerMslSetCombinedSamplerSuffixNative(compiler, suffix);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_set_combined_sampler_suffix")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslSetCombinedSamplerSuffix([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "suffix")] [NativeName(NativeNameType.Type, "const char*")] ref byte suffix)
		{
			fixed (byte* psuffix = &suffix)
			{
				SpvcResult ret = SpvcCompilerMslSetCombinedSamplerSuffixNative(compiler, (byte*)psuffix);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_set_combined_sampler_suffix")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerMslSetCombinedSamplerSuffix([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "suffix")] [NativeName(NativeNameType.Type, "const char*")] string suffix)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (suffix != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(suffix);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(suffix, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvcResult ret = SpvcCompilerMslSetCombinedSamplerSuffixNative(compiler, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_get_combined_sampler_suffix")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_msl_get_combined_sampler_suffix")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* SpvcCompilerMslGetCombinedSamplerSuffixNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler);

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_get_combined_sampler_suffix")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SpvcCompilerMslGetCombinedSamplerSuffix([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			byte* ret = SpvcCompilerMslGetCombinedSamplerSuffixNative(compiler);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_msl_get_combined_sampler_suffix")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SpvcCompilerMslGetCombinedSamplerSuffixS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			string ret = Utils.DecodeStringUTF8(SpvcCompilerMslGetCombinedSamplerSuffixNative(compiler));
			return ret;
		}

		/// <summary>
		/// Reflect resources.<br/>
		/// Maps almost 1:1 to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_active_interface_variables")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_active_interface_variables")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerGetActiveInterfaceVariablesNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "spvc_set*")] SpvcSet* set);

		/// <summary>/// Reflect resources.<br/>/// Maps almost 1:1 to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_get_active_interface_variables")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetActiveInterfaceVariables([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "spvc_set*")] SpvcSet* set)
		{
			SpvcResult ret = SpvcCompilerGetActiveInterfaceVariablesNative(compiler, set);
			return ret;
		}

		/// <summary>/// Reflect resources.<br/>/// Maps almost 1:1 to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_get_active_interface_variables")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetActiveInterfaceVariables([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "spvc_set*")] ref SpvcSet set)
		{
			fixed (SpvcSet* pset = &set)
			{
				SpvcResult ret = SpvcCompilerGetActiveInterfaceVariablesNative(compiler, (SpvcSet*)pset);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_set_enabled_interface_variables")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_set_enabled_interface_variables")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerSetEnabledInterfaceVariablesNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "spvc_set")] SpvcSet set);

		[NativeName(NativeNameType.Func, "spvc_compiler_set_enabled_interface_variables")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerSetEnabledInterfaceVariables([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "spvc_set")] SpvcSet set)
		{
			SpvcResult ret = SpvcCompilerSetEnabledInterfaceVariablesNative(compiler, set);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_create_shader_resources")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_create_shader_resources")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerCreateShaderResourcesNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources*")] SpvcResources* resources);

		[NativeName(NativeNameType.Func, "spvc_compiler_create_shader_resources")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerCreateShaderResources([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources*")] SpvcResources* resources)
		{
			SpvcResult ret = SpvcCompilerCreateShaderResourcesNative(compiler, resources);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_create_shader_resources")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerCreateShaderResources([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources*")] ref SpvcResources resources)
		{
			fixed (SpvcResources* presources = &resources)
			{
				SpvcResult ret = SpvcCompilerCreateShaderResourcesNative(compiler, (SpvcResources*)presources);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_create_shader_resources_for_active_variables")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_create_shader_resources_for_active_variables")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerCreateShaderResourcesForActiveVariablesNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources*")] SpvcResources* resources, [NativeName(NativeNameType.Param, "active")] [NativeName(NativeNameType.Type, "spvc_set")] SpvcSet active);

		[NativeName(NativeNameType.Func, "spvc_compiler_create_shader_resources_for_active_variables")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerCreateShaderResourcesForActiveVariables([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources*")] SpvcResources* resources, [NativeName(NativeNameType.Param, "active")] [NativeName(NativeNameType.Type, "spvc_set")] SpvcSet active)
		{
			SpvcResult ret = SpvcCompilerCreateShaderResourcesForActiveVariablesNative(compiler, resources, active);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_create_shader_resources_for_active_variables")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerCreateShaderResourcesForActiveVariables([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources*")] ref SpvcResources resources, [NativeName(NativeNameType.Param, "active")] [NativeName(NativeNameType.Type, "spvc_set")] SpvcSet active)
		{
			fixed (SpvcResources* presources = &resources)
			{
				SpvcResult ret = SpvcCompilerCreateShaderResourcesForActiveVariablesNative(compiler, (SpvcResources*)presources, active);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_resources_get_resource_list_for_type")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_resources_get_resource_list_for_type")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcResourcesGetResourceListForTypeNative([NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources")] SpvcResources resources, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_resource_type")] SpvcResourceType type, [NativeName(NativeNameType.Param, "resource_list")] [NativeName(NativeNameType.Type, "const spvc_reflected_resource**")] SpvcReflectedResource** resourceList, [NativeName(NativeNameType.Param, "resource_size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* resourceSize);

		[NativeName(NativeNameType.Func, "spvc_resources_get_resource_list_for_type")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcResourcesGetResourceListForType([NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources")] SpvcResources resources, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_resource_type")] SpvcResourceType type, [NativeName(NativeNameType.Param, "resource_list")] [NativeName(NativeNameType.Type, "const spvc_reflected_resource**")] SpvcReflectedResource** resourceList, [NativeName(NativeNameType.Param, "resource_size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* resourceSize)
		{
			SpvcResult ret = SpvcResourcesGetResourceListForTypeNative(resources, type, resourceList, resourceSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_resources_get_resource_list_for_type")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcResourcesGetResourceListForType([NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources")] SpvcResources resources, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_resource_type")] SpvcResourceType type, [NativeName(NativeNameType.Param, "resource_list")] [NativeName(NativeNameType.Type, "const spvc_reflected_resource**")] ref SpvcReflectedResource* resourceList, [NativeName(NativeNameType.Param, "resource_size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* resourceSize)
		{
			fixed (SpvcReflectedResource** presourceList = &resourceList)
			{
				SpvcResult ret = SpvcResourcesGetResourceListForTypeNative(resources, type, (SpvcReflectedResource**)presourceList, resourceSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_resources_get_resource_list_for_type")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcResourcesGetResourceListForType([NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources")] SpvcResources resources, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_resource_type")] SpvcResourceType type, [NativeName(NativeNameType.Param, "resource_list")] [NativeName(NativeNameType.Type, "const spvc_reflected_resource**")] SpvcReflectedResource** resourceList, [NativeName(NativeNameType.Param, "resource_size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint resourceSize)
		{
			fixed (nuint* presourceSize = &resourceSize)
			{
				SpvcResult ret = SpvcResourcesGetResourceListForTypeNative(resources, type, resourceList, (ulong*)presourceSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_resources_get_resource_list_for_type")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcResourcesGetResourceListForType([NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources")] SpvcResources resources, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_resource_type")] SpvcResourceType type, [NativeName(NativeNameType.Param, "resource_list")] [NativeName(NativeNameType.Type, "const spvc_reflected_resource**")] ref SpvcReflectedResource* resourceList, [NativeName(NativeNameType.Param, "resource_size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint resourceSize)
		{
			fixed (SpvcReflectedResource** presourceList = &resourceList)
			{
				fixed (nuint* presourceSize = &resourceSize)
				{
					SpvcResult ret = SpvcResourcesGetResourceListForTypeNative(resources, type, (SpvcReflectedResource**)presourceList, (ulong*)presourceSize);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "spvc_resources_get_builtin_resource_list_for_type")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_resources_get_builtin_resource_list_for_type")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcResourcesGetBuiltinResourceListForTypeNative([NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources")] SpvcResources resources, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_builtin_resource_type")] SpvcBuiltinResourceType type, [NativeName(NativeNameType.Param, "resource_list")] [NativeName(NativeNameType.Type, "const spvc_reflected_builtin_resource**")] SpvcReflectedBuiltinResource** resourceList, [NativeName(NativeNameType.Param, "resource_size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* resourceSize);

		[NativeName(NativeNameType.Func, "spvc_resources_get_builtin_resource_list_for_type")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcResourcesGetBuiltinResourceListForType([NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources")] SpvcResources resources, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_builtin_resource_type")] SpvcBuiltinResourceType type, [NativeName(NativeNameType.Param, "resource_list")] [NativeName(NativeNameType.Type, "const spvc_reflected_builtin_resource**")] SpvcReflectedBuiltinResource** resourceList, [NativeName(NativeNameType.Param, "resource_size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* resourceSize)
		{
			SpvcResult ret = SpvcResourcesGetBuiltinResourceListForTypeNative(resources, type, resourceList, resourceSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_resources_get_builtin_resource_list_for_type")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcResourcesGetBuiltinResourceListForType([NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources")] SpvcResources resources, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_builtin_resource_type")] SpvcBuiltinResourceType type, [NativeName(NativeNameType.Param, "resource_list")] [NativeName(NativeNameType.Type, "const spvc_reflected_builtin_resource**")] ref SpvcReflectedBuiltinResource* resourceList, [NativeName(NativeNameType.Param, "resource_size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* resourceSize)
		{
			fixed (SpvcReflectedBuiltinResource** presourceList = &resourceList)
			{
				SpvcResult ret = SpvcResourcesGetBuiltinResourceListForTypeNative(resources, type, (SpvcReflectedBuiltinResource**)presourceList, resourceSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_resources_get_builtin_resource_list_for_type")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcResourcesGetBuiltinResourceListForType([NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources")] SpvcResources resources, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_builtin_resource_type")] SpvcBuiltinResourceType type, [NativeName(NativeNameType.Param, "resource_list")] [NativeName(NativeNameType.Type, "const spvc_reflected_builtin_resource**")] SpvcReflectedBuiltinResource** resourceList, [NativeName(NativeNameType.Param, "resource_size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint resourceSize)
		{
			fixed (nuint* presourceSize = &resourceSize)
			{
				SpvcResult ret = SpvcResourcesGetBuiltinResourceListForTypeNative(resources, type, resourceList, (ulong*)presourceSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_resources_get_builtin_resource_list_for_type")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcResourcesGetBuiltinResourceListForType([NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources")] SpvcResources resources, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_builtin_resource_type")] SpvcBuiltinResourceType type, [NativeName(NativeNameType.Param, "resource_list")] [NativeName(NativeNameType.Type, "const spvc_reflected_builtin_resource**")] ref SpvcReflectedBuiltinResource* resourceList, [NativeName(NativeNameType.Param, "resource_size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint resourceSize)
		{
			fixed (SpvcReflectedBuiltinResource** presourceList = &resourceList)
			{
				fixed (nuint* presourceSize = &resourceSize)
				{
					SpvcResult ret = SpvcResourcesGetBuiltinResourceListForTypeNative(resources, type, (SpvcReflectedBuiltinResource**)presourceList, (ulong*)presourceSize);
					return ret;
				}
			}
		}

		/// <summary>
		/// Decorations.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_decoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_set_decoration")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcCompilerSetDecorationNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "unsigned int")] uint argument);

		/// <summary>/// Decorations.<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_set_decoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcCompilerSetDecoration([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "unsigned int")] uint argument)
		{
			SpvcCompilerSetDecorationNative(compiler, id, decoration, argument);
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_set_decoration_string")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_set_decoration_string")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcCompilerSetDecorationStringNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "const char*")] byte* argument);

		[NativeName(NativeNameType.Func, "spvc_compiler_set_decoration_string")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcCompilerSetDecorationString([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "const char*")] byte* argument)
		{
			SpvcCompilerSetDecorationStringNative(compiler, id, decoration, argument);
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_set_decoration_string")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcCompilerSetDecorationString([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "const char*")] ref byte argument)
		{
			fixed (byte* pargument = &argument)
			{
				SpvcCompilerSetDecorationStringNative(compiler, id, decoration, (byte*)pargument);
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_set_decoration_string")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcCompilerSetDecorationString([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "const char*")] string argument)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (argument != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(argument);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(argument, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvcCompilerSetDecorationStringNative(compiler, id, decoration, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_set_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_set_name")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcCompilerSetNameNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "const char*")] byte* argument);

		[NativeName(NativeNameType.Func, "spvc_compiler_set_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcCompilerSetName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "const char*")] byte* argument)
		{
			SpvcCompilerSetNameNative(compiler, id, argument);
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_set_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcCompilerSetName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "const char*")] ref byte argument)
		{
			fixed (byte* pargument = &argument)
			{
				SpvcCompilerSetNameNative(compiler, id, (byte*)pargument);
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_set_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcCompilerSetName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "const char*")] string argument)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (argument != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(argument);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(argument, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvcCompilerSetNameNative(compiler, id, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_decoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_set_member_decoration")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcCompilerSetMemberDecorationNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "unsigned int")] uint argument);

		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_decoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcCompilerSetMemberDecoration([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "unsigned int")] uint argument)
		{
			SpvcCompilerSetMemberDecorationNative(compiler, id, memberIndex, decoration, argument);
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_decoration_string")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_set_member_decoration_string")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcCompilerSetMemberDecorationStringNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "const char*")] byte* argument);

		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_decoration_string")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcCompilerSetMemberDecorationString([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "const char*")] byte* argument)
		{
			SpvcCompilerSetMemberDecorationStringNative(compiler, id, memberIndex, decoration, argument);
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_decoration_string")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcCompilerSetMemberDecorationString([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "const char*")] ref byte argument)
		{
			fixed (byte* pargument = &argument)
			{
				SpvcCompilerSetMemberDecorationStringNative(compiler, id, memberIndex, decoration, (byte*)pargument);
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_decoration_string")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcCompilerSetMemberDecorationString([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "const char*")] string argument)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (argument != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(argument);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(argument, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvcCompilerSetMemberDecorationStringNative(compiler, id, memberIndex, decoration, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_set_member_name")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcCompilerSetMemberNameNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "const char*")] byte* argument);

		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcCompilerSetMemberName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "const char*")] byte* argument)
		{
			SpvcCompilerSetMemberNameNative(compiler, id, memberIndex, argument);
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcCompilerSetMemberName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "const char*")] ref byte argument)
		{
			fixed (byte* pargument = &argument)
			{
				SpvcCompilerSetMemberNameNative(compiler, id, memberIndex, (byte*)pargument);
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcCompilerSetMemberName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "const char*")] string argument)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (argument != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(argument);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(argument, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvcCompilerSetMemberNameNative(compiler, id, memberIndex, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_unset_decoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_unset_decoration")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcCompilerUnsetDecorationNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration);

		[NativeName(NativeNameType.Func, "spvc_compiler_unset_decoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcCompilerUnsetDecoration([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			SpvcCompilerUnsetDecorationNative(compiler, id, decoration);
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_unset_member_decoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_unset_member_decoration")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcCompilerUnsetMemberDecorationNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration);

		[NativeName(NativeNameType.Func, "spvc_compiler_unset_member_decoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcCompilerUnsetMemberDecoration([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			SpvcCompilerUnsetMemberDecorationNative(compiler, id, memberIndex, decoration);
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_has_decoration")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_has_decoration")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcCompilerHasDecorationNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration);

		[NativeName(NativeNameType.Func, "spvc_compiler_has_decoration")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerHasDecoration([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			byte ret = SpvcCompilerHasDecorationNative(compiler, id, decoration);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_has_member_decoration")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_has_member_decoration")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcCompilerHasMemberDecorationNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration);

		[NativeName(NativeNameType.Func, "spvc_compiler_has_member_decoration")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerHasMemberDecoration([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			byte ret = SpvcCompilerHasMemberDecorationNative(compiler, id, memberIndex, decoration);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_name")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_name")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* SpvcCompilerGetNameNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_name")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SpvcCompilerGetName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id)
		{
			byte* ret = SpvcCompilerGetNameNative(compiler, id);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_name")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SpvcCompilerGetNameS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id)
		{
			string ret = Utils.DecodeStringUTF8(SpvcCompilerGetNameNative(compiler, id));
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_decoration")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_decoration")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcCompilerGetDecorationNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_decoration")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint SpvcCompilerGetDecoration([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			uint ret = SpvcCompilerGetDecorationNative(compiler, id, decoration);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_decoration_string")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_decoration_string")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* SpvcCompilerGetDecorationStringNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_decoration_string")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SpvcCompilerGetDecorationString([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			byte* ret = SpvcCompilerGetDecorationStringNative(compiler, id, decoration);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_decoration_string")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SpvcCompilerGetDecorationStringS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			string ret = Utils.DecodeStringUTF8(SpvcCompilerGetDecorationStringNative(compiler, id, decoration));
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_member_decoration")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_member_decoration")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcCompilerGetMemberDecorationNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_member_decoration")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint SpvcCompilerGetMemberDecoration([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			uint ret = SpvcCompilerGetMemberDecorationNative(compiler, id, memberIndex, decoration);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_member_decoration_string")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_member_decoration_string")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* SpvcCompilerGetMemberDecorationStringNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_member_decoration_string")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SpvcCompilerGetMemberDecorationString([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			byte* ret = SpvcCompilerGetMemberDecorationStringNative(compiler, id, memberIndex, decoration);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_member_decoration_string")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SpvcCompilerGetMemberDecorationStringS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			string ret = Utils.DecodeStringUTF8(SpvcCompilerGetMemberDecorationStringNative(compiler, id, memberIndex, decoration));
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_member_name")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_member_name")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* SpvcCompilerGetMemberNameNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_member_name")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SpvcCompilerGetMemberName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex)
		{
			byte* ret = SpvcCompilerGetMemberNameNative(compiler, id, memberIndex);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_member_name")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SpvcCompilerGetMemberNameS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex)
		{
			string ret = Utils.DecodeStringUTF8(SpvcCompilerGetMemberNameNative(compiler, id, memberIndex));
			return ret;
		}

		/// <summary>
		/// Entry points.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_entry_points")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_entry_points")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerGetEntryPointsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "entry_points")] [NativeName(NativeNameType.Type, "const spvc_entry_point**")] SpvcEntryPoint** entryPoints, [NativeName(NativeNameType.Param, "num_entry_points")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numEntryPoints);

		/// <summary>/// Entry points.<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_get_entry_points")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetEntryPoints([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "entry_points")] [NativeName(NativeNameType.Type, "const spvc_entry_point**")] SpvcEntryPoint** entryPoints, [NativeName(NativeNameType.Param, "num_entry_points")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numEntryPoints)
		{
			SpvcResult ret = SpvcCompilerGetEntryPointsNative(compiler, entryPoints, numEntryPoints);
			return ret;
		}

		/// <summary>/// Entry points.<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_get_entry_points")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetEntryPoints([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "entry_points")] [NativeName(NativeNameType.Type, "const spvc_entry_point**")] ref SpvcEntryPoint* entryPoints, [NativeName(NativeNameType.Param, "num_entry_points")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numEntryPoints)
		{
			fixed (SpvcEntryPoint** pentryPoints = &entryPoints)
			{
				SpvcResult ret = SpvcCompilerGetEntryPointsNative(compiler, (SpvcEntryPoint**)pentryPoints, numEntryPoints);
				return ret;
			}
		}

		/// <summary>/// Entry points.<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_get_entry_points")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetEntryPoints([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "entry_points")] [NativeName(NativeNameType.Type, "const spvc_entry_point**")] SpvcEntryPoint** entryPoints, [NativeName(NativeNameType.Param, "num_entry_points")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint numEntryPoints)
		{
			fixed (nuint* pnumEntryPoints = &numEntryPoints)
			{
				SpvcResult ret = SpvcCompilerGetEntryPointsNative(compiler, entryPoints, (ulong*)pnumEntryPoints);
				return ret;
			}
		}

		/// <summary>/// Entry points.<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_get_entry_points")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetEntryPoints([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "entry_points")] [NativeName(NativeNameType.Type, "const spvc_entry_point**")] ref SpvcEntryPoint* entryPoints, [NativeName(NativeNameType.Param, "num_entry_points")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint numEntryPoints)
		{
			fixed (SpvcEntryPoint** pentryPoints = &entryPoints)
			{
				fixed (nuint* pnumEntryPoints = &numEntryPoints)
				{
					SpvcResult ret = SpvcCompilerGetEntryPointsNative(compiler, (SpvcEntryPoint**)pentryPoints, (ulong*)pnumEntryPoints);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_set_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_set_entry_point")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerSetEntryPointNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model);

		[NativeName(NativeNameType.Func, "spvc_compiler_set_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerSetEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			SpvcResult ret = SpvcCompilerSetEntryPointNative(compiler, name, model);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_set_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerSetEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			fixed (byte* pname = &name)
			{
				SpvcResult ret = SpvcCompilerSetEntryPointNative(compiler, (byte*)pname, model);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_set_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerSetEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] string name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvcResult ret = SpvcCompilerSetEntryPointNative(compiler, pStr0, model);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_rename_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_rename_entry_point")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerRenameEntryPointNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "old_name")] [NativeName(NativeNameType.Type, "const char*")] byte* oldName, [NativeName(NativeNameType.Param, "new_name")] [NativeName(NativeNameType.Type, "const char*")] byte* newName, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model);

		[NativeName(NativeNameType.Func, "spvc_compiler_rename_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerRenameEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "old_name")] [NativeName(NativeNameType.Type, "const char*")] byte* oldName, [NativeName(NativeNameType.Param, "new_name")] [NativeName(NativeNameType.Type, "const char*")] byte* newName, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			SpvcResult ret = SpvcCompilerRenameEntryPointNative(compiler, oldName, newName, model);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_rename_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerRenameEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "old_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte oldName, [NativeName(NativeNameType.Param, "new_name")] [NativeName(NativeNameType.Type, "const char*")] byte* newName, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			fixed (byte* poldName = &oldName)
			{
				SpvcResult ret = SpvcCompilerRenameEntryPointNative(compiler, (byte*)poldName, newName, model);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_rename_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerRenameEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "old_name")] [NativeName(NativeNameType.Type, "const char*")] string oldName, [NativeName(NativeNameType.Param, "new_name")] [NativeName(NativeNameType.Type, "const char*")] byte* newName, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (oldName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(oldName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(oldName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvcResult ret = SpvcCompilerRenameEntryPointNative(compiler, pStr0, newName, model);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_rename_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerRenameEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "old_name")] [NativeName(NativeNameType.Type, "const char*")] byte* oldName, [NativeName(NativeNameType.Param, "new_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte newName, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			fixed (byte* pnewName = &newName)
			{
				SpvcResult ret = SpvcCompilerRenameEntryPointNative(compiler, oldName, (byte*)pnewName, model);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_rename_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerRenameEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "old_name")] [NativeName(NativeNameType.Type, "const char*")] byte* oldName, [NativeName(NativeNameType.Param, "new_name")] [NativeName(NativeNameType.Type, "const char*")] string newName, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (newName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(newName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(newName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvcResult ret = SpvcCompilerRenameEntryPointNative(compiler, oldName, pStr0, model);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_rename_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerRenameEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "old_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte oldName, [NativeName(NativeNameType.Param, "new_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte newName, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			fixed (byte* poldName = &oldName)
			{
				fixed (byte* pnewName = &newName)
				{
					SpvcResult ret = SpvcCompilerRenameEntryPointNative(compiler, (byte*)poldName, (byte*)pnewName, model);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_rename_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerRenameEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "old_name")] [NativeName(NativeNameType.Type, "const char*")] string oldName, [NativeName(NativeNameType.Param, "new_name")] [NativeName(NativeNameType.Type, "const char*")] string newName, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (oldName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(oldName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(oldName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (newName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(newName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(newName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SpvcResult ret = SpvcCompilerRenameEntryPointNative(compiler, pStr0, pStr1, model);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_cleansed_entry_point_name")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_cleansed_entry_point_name")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* SpvcCompilerGetCleansedEntryPointNameNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_cleansed_entry_point_name")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SpvcCompilerGetCleansedEntryPointName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			byte* ret = SpvcCompilerGetCleansedEntryPointNameNative(compiler, name, model);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_cleansed_entry_point_name")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SpvcCompilerGetCleansedEntryPointNameS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			string ret = Utils.DecodeStringUTF8(SpvcCompilerGetCleansedEntryPointNameNative(compiler, name, model));
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_cleansed_entry_point_name")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SpvcCompilerGetCleansedEntryPointName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			fixed (byte* pname = &name)
			{
				byte* ret = SpvcCompilerGetCleansedEntryPointNameNative(compiler, (byte*)pname, model);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_cleansed_entry_point_name")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SpvcCompilerGetCleansedEntryPointNameS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			fixed (byte* pname = &name)
			{
				string ret = Utils.DecodeStringUTF8(SpvcCompilerGetCleansedEntryPointNameNative(compiler, (byte*)pname, model));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_cleansed_entry_point_name")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SpvcCompilerGetCleansedEntryPointName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] string name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = SpvcCompilerGetCleansedEntryPointNameNative(compiler, pStr0, model);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_cleansed_entry_point_name")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SpvcCompilerGetCleansedEntryPointNameS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] string name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(SpvcCompilerGetCleansedEntryPointNameNative(compiler, pStr0, model));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_set_execution_mode")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_set_execution_mode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcCompilerSetExecutionModeNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SpvExecutionMode")] SpvExecutionMode mode);

		[NativeName(NativeNameType.Func, "spvc_compiler_set_execution_mode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcCompilerSetExecutionMode([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SpvExecutionMode")] SpvExecutionMode mode)
		{
			SpvcCompilerSetExecutionModeNative(compiler, mode);
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_unset_execution_mode")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_unset_execution_mode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcCompilerUnsetExecutionModeNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SpvExecutionMode")] SpvExecutionMode mode);

		[NativeName(NativeNameType.Func, "spvc_compiler_unset_execution_mode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcCompilerUnsetExecutionMode([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SpvExecutionMode")] SpvExecutionMode mode)
		{
			SpvcCompilerUnsetExecutionModeNative(compiler, mode);
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_set_execution_mode_with_arguments")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_set_execution_mode_with_arguments")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcCompilerSetExecutionModeWithArgumentsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SpvExecutionMode")] SpvExecutionMode mode, [NativeName(NativeNameType.Param, "arg0")] [NativeName(NativeNameType.Type, "unsigned int")] uint arg0, [NativeName(NativeNameType.Param, "arg1")] [NativeName(NativeNameType.Type, "unsigned int")] uint arg1, [NativeName(NativeNameType.Param, "arg2")] [NativeName(NativeNameType.Type, "unsigned int")] uint arg2);

		[NativeName(NativeNameType.Func, "spvc_compiler_set_execution_mode_with_arguments")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcCompilerSetExecutionModeWithArguments([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SpvExecutionMode")] SpvExecutionMode mode, [NativeName(NativeNameType.Param, "arg0")] [NativeName(NativeNameType.Type, "unsigned int")] uint arg0, [NativeName(NativeNameType.Param, "arg1")] [NativeName(NativeNameType.Type, "unsigned int")] uint arg1, [NativeName(NativeNameType.Param, "arg2")] [NativeName(NativeNameType.Type, "unsigned int")] uint arg2)
		{
			SpvcCompilerSetExecutionModeWithArgumentsNative(compiler, mode, arg0, arg1, arg2);
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_execution_modes")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_execution_modes")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerGetExecutionModesNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const SpvExecutionMode**")] SpvExecutionMode** modes, [NativeName(NativeNameType.Param, "num_modes")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numModes);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_execution_modes")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetExecutionModes([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const SpvExecutionMode**")] SpvExecutionMode** modes, [NativeName(NativeNameType.Param, "num_modes")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numModes)
		{
			SpvcResult ret = SpvcCompilerGetExecutionModesNative(compiler, modes, numModes);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_execution_modes")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetExecutionModes([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const SpvExecutionMode**")] ref SpvExecutionMode* modes, [NativeName(NativeNameType.Param, "num_modes")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numModes)
		{
			fixed (SpvExecutionMode** pmodes = &modes)
			{
				SpvcResult ret = SpvcCompilerGetExecutionModesNative(compiler, (SpvExecutionMode**)pmodes, numModes);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_execution_modes")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetExecutionModes([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const SpvExecutionMode**")] SpvExecutionMode** modes, [NativeName(NativeNameType.Param, "num_modes")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint numModes)
		{
			fixed (nuint* pnumModes = &numModes)
			{
				SpvcResult ret = SpvcCompilerGetExecutionModesNative(compiler, modes, (ulong*)pnumModes);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_execution_modes")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetExecutionModes([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const SpvExecutionMode**")] ref SpvExecutionMode* modes, [NativeName(NativeNameType.Param, "num_modes")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint numModes)
		{
			fixed (SpvExecutionMode** pmodes = &modes)
			{
				fixed (nuint* pnumModes = &numModes)
				{
					SpvcResult ret = SpvcCompilerGetExecutionModesNative(compiler, (SpvExecutionMode**)pmodes, (ulong*)pnumModes);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_execution_mode_argument")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_execution_mode_argument")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcCompilerGetExecutionModeArgumentNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SpvExecutionMode")] SpvExecutionMode mode);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_execution_mode_argument")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint SpvcCompilerGetExecutionModeArgument([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SpvExecutionMode")] SpvExecutionMode mode)
		{
			uint ret = SpvcCompilerGetExecutionModeArgumentNative(compiler, mode);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_execution_mode_argument_by_index")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_execution_mode_argument_by_index")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcCompilerGetExecutionModeArgumentByIndexNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SpvExecutionMode")] SpvExecutionMode mode, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_execution_mode_argument_by_index")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint SpvcCompilerGetExecutionModeArgumentByIndex([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SpvExecutionMode")] SpvExecutionMode mode, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			uint ret = SpvcCompilerGetExecutionModeArgumentByIndexNative(compiler, mode, index);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_execution_model")]
		[return: NativeName(NativeNameType.Type, "SpvExecutionModel")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_execution_model")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvExecutionModel SpvcCompilerGetExecutionModelNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_execution_model")]
		[return: NativeName(NativeNameType.Type, "SpvExecutionModel")]
		public static SpvExecutionModel SpvcCompilerGetExecutionModel([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			SpvExecutionModel ret = SpvcCompilerGetExecutionModelNative(compiler);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_update_active_builtins")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_update_active_builtins")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcCompilerUpdateActiveBuiltinsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler);

		[NativeName(NativeNameType.Func, "spvc_compiler_update_active_builtins")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcCompilerUpdateActiveBuiltins([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			SpvcCompilerUpdateActiveBuiltinsNative(compiler);
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_has_active_builtin")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_has_active_builtin")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcCompilerHasActiveBuiltinNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "builtin")] [NativeName(NativeNameType.Type, "SpvBuiltIn")] SpvBuiltIn builtin, [NativeName(NativeNameType.Param, "storage")] [NativeName(NativeNameType.Type, "SpvStorageClass")] SpvStorageClass storage);

		[NativeName(NativeNameType.Func, "spvc_compiler_has_active_builtin")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerHasActiveBuiltin([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "builtin")] [NativeName(NativeNameType.Type, "SpvBuiltIn")] SpvBuiltIn builtin, [NativeName(NativeNameType.Param, "storage")] [NativeName(NativeNameType.Type, "SpvStorageClass")] SpvStorageClass storage)
		{
			byte ret = SpvcCompilerHasActiveBuiltinNative(compiler, builtin, storage);
			return ret;
		}

		/// <summary>
		/// Type query interface.<br/>
		/// Maps to C++ API, except it's read-only.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_type_handle")]
		[return: NativeName(NativeNameType.Type, "spvc_type")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_type_handle")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcType SpvcCompilerGetTypeHandleNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id);

		/// <summary>/// Type query interface.<br/>/// Maps to C++ API, except it's read-only.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_get_type_handle")]
		[return: NativeName(NativeNameType.Type, "spvc_type")]
		public static SpvcType SpvcCompilerGetTypeHandle([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id)
		{
			SpvcType ret = SpvcCompilerGetTypeHandleNative(compiler, id);
			return ret;
		}

		/// <summary>
		/// Pulls out SPIRType::self. This effectively gives the type ID without array or pointer qualifiers.<br/>
		/// This is necessary when reflecting decoration/name information on members of a struct,<br/>
		/// which are placed in the base type, not the qualified type.<br/>
		/// This is similar to spvc_reflected_resource::base_type_id. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_base_type_id")]
		[return: NativeName(NativeNameType.Type, "spvc_type_id")]
		[LibraryImport(LibName, EntryPoint = "spvc_type_get_base_type_id")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcTypeGetBaseTypeIdNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type);

		/// <summary>/// Pulls out SPIRType::self. This effectively gives the type ID without array or pointer qualifiers.<br/>/// This is necessary when reflecting decoration/name information on members of a struct,<br/>/// which are placed in the base type, not the qualified type.<br/>/// This is similar to spvc_reflected_resource::base_type_id. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_type_get_base_type_id")]
		[return: NativeName(NativeNameType.Type, "spvc_type_id")]
		public static uint SpvcTypeGetBaseTypeId([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			uint ret = SpvcTypeGetBaseTypeIdNative(type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_type_get_basetype")]
		[return: NativeName(NativeNameType.Type, "spvc_basetype")]
		[LibraryImport(LibName, EntryPoint = "spvc_type_get_basetype")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcBasetype SpvcTypeGetBasetypeNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type);

		[NativeName(NativeNameType.Func, "spvc_type_get_basetype")]
		[return: NativeName(NativeNameType.Type, "spvc_basetype")]
		public static SpvcBasetype SpvcTypeGetBasetype([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			SpvcBasetype ret = SpvcTypeGetBasetypeNative(type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_type_get_bit_width")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[LibraryImport(LibName, EntryPoint = "spvc_type_get_bit_width")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcTypeGetBitWidthNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type);

		[NativeName(NativeNameType.Func, "spvc_type_get_bit_width")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint SpvcTypeGetBitWidth([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			uint ret = SpvcTypeGetBitWidthNative(type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_type_get_vector_size")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[LibraryImport(LibName, EntryPoint = "spvc_type_get_vector_size")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcTypeGetVectorSizeNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type);

		[NativeName(NativeNameType.Func, "spvc_type_get_vector_size")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint SpvcTypeGetVectorSize([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			uint ret = SpvcTypeGetVectorSizeNative(type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_type_get_columns")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[LibraryImport(LibName, EntryPoint = "spvc_type_get_columns")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcTypeGetColumnsNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type);

		[NativeName(NativeNameType.Func, "spvc_type_get_columns")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint SpvcTypeGetColumns([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			uint ret = SpvcTypeGetColumnsNative(type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_type_get_num_array_dimensions")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[LibraryImport(LibName, EntryPoint = "spvc_type_get_num_array_dimensions")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcTypeGetNumArrayDimensionsNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type);

		[NativeName(NativeNameType.Func, "spvc_type_get_num_array_dimensions")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint SpvcTypeGetNumArrayDimensions([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			uint ret = SpvcTypeGetNumArrayDimensionsNative(type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_type_array_dimension_is_literal")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_type_array_dimension_is_literal")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcTypeArrayDimensionIsLiteralNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "dimension")] [NativeName(NativeNameType.Type, "unsigned int")] uint dimension);

		[NativeName(NativeNameType.Func, "spvc_type_array_dimension_is_literal")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcTypeArrayDimensionIsLiteral([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "dimension")] [NativeName(NativeNameType.Type, "unsigned int")] uint dimension)
		{
			byte ret = SpvcTypeArrayDimensionIsLiteralNative(type, dimension);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_type_get_array_dimension")]
		[return: NativeName(NativeNameType.Type, "SpvId")]
		[LibraryImport(LibName, EntryPoint = "spvc_type_get_array_dimension")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcTypeGetArrayDimensionNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "dimension")] [NativeName(NativeNameType.Type, "unsigned int")] uint dimension);

		[NativeName(NativeNameType.Func, "spvc_type_get_array_dimension")]
		[return: NativeName(NativeNameType.Type, "SpvId")]
		public static uint SpvcTypeGetArrayDimension([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "dimension")] [NativeName(NativeNameType.Type, "unsigned int")] uint dimension)
		{
			uint ret = SpvcTypeGetArrayDimensionNative(type, dimension);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_type_get_num_member_types")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[LibraryImport(LibName, EntryPoint = "spvc_type_get_num_member_types")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcTypeGetNumMemberTypesNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type);

		[NativeName(NativeNameType.Func, "spvc_type_get_num_member_types")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint SpvcTypeGetNumMemberTypes([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			uint ret = SpvcTypeGetNumMemberTypesNative(type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_type_get_member_type")]
		[return: NativeName(NativeNameType.Type, "spvc_type_id")]
		[LibraryImport(LibName, EntryPoint = "spvc_type_get_member_type")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcTypeGetMemberTypeNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index);

		[NativeName(NativeNameType.Func, "spvc_type_get_member_type")]
		[return: NativeName(NativeNameType.Type, "spvc_type_id")]
		public static uint SpvcTypeGetMemberType([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			uint ret = SpvcTypeGetMemberTypeNative(type, index);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_type_get_storage_class")]
		[return: NativeName(NativeNameType.Type, "SpvStorageClass")]
		[LibraryImport(LibName, EntryPoint = "spvc_type_get_storage_class")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvStorageClass SpvcTypeGetStorageClassNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type);

		[NativeName(NativeNameType.Func, "spvc_type_get_storage_class")]
		[return: NativeName(NativeNameType.Type, "SpvStorageClass")]
		public static SpvStorageClass SpvcTypeGetStorageClass([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			SpvStorageClass ret = SpvcTypeGetStorageClassNative(type);
			return ret;
		}

		/// <summary>
		/// Image type query. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_image_sampled_type")]
		[return: NativeName(NativeNameType.Type, "spvc_type_id")]
		[LibraryImport(LibName, EntryPoint = "spvc_type_get_image_sampled_type")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcTypeGetImageSampledTypeNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type);

		/// <summary>/// Image type query. <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_type_get_image_sampled_type")]
		[return: NativeName(NativeNameType.Type, "spvc_type_id")]
		public static uint SpvcTypeGetImageSampledType([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			uint ret = SpvcTypeGetImageSampledTypeNative(type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_type_get_image_dimension")]
		[return: NativeName(NativeNameType.Type, "SpvDim")]
		[LibraryImport(LibName, EntryPoint = "spvc_type_get_image_dimension")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvDim SpvcTypeGetImageDimensionNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type);

		[NativeName(NativeNameType.Func, "spvc_type_get_image_dimension")]
		[return: NativeName(NativeNameType.Type, "SpvDim")]
		public static SpvDim SpvcTypeGetImageDimension([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			SpvDim ret = SpvcTypeGetImageDimensionNative(type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_type_get_image_is_depth")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_type_get_image_is_depth")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcTypeGetImageIsDepthNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type);

		[NativeName(NativeNameType.Func, "spvc_type_get_image_is_depth")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcTypeGetImageIsDepth([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			byte ret = SpvcTypeGetImageIsDepthNative(type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_type_get_image_arrayed")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_type_get_image_arrayed")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcTypeGetImageArrayedNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type);

		[NativeName(NativeNameType.Func, "spvc_type_get_image_arrayed")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcTypeGetImageArrayed([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			byte ret = SpvcTypeGetImageArrayedNative(type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_type_get_image_multisampled")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_type_get_image_multisampled")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcTypeGetImageMultisampledNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type);

		[NativeName(NativeNameType.Func, "spvc_type_get_image_multisampled")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcTypeGetImageMultisampled([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			byte ret = SpvcTypeGetImageMultisampledNative(type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_type_get_image_is_storage")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_type_get_image_is_storage")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcTypeGetImageIsStorageNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type);

		[NativeName(NativeNameType.Func, "spvc_type_get_image_is_storage")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcTypeGetImageIsStorage([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			byte ret = SpvcTypeGetImageIsStorageNative(type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_type_get_image_storage_format")]
		[return: NativeName(NativeNameType.Type, "SpvImageFormat")]
		[LibraryImport(LibName, EntryPoint = "spvc_type_get_image_storage_format")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvImageFormat SpvcTypeGetImageStorageFormatNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type);

		[NativeName(NativeNameType.Func, "spvc_type_get_image_storage_format")]
		[return: NativeName(NativeNameType.Type, "SpvImageFormat")]
		public static SpvImageFormat SpvcTypeGetImageStorageFormat([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			SpvImageFormat ret = SpvcTypeGetImageStorageFormatNative(type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_type_get_image_access_qualifier")]
		[return: NativeName(NativeNameType.Type, "SpvAccessQualifier")]
		[LibraryImport(LibName, EntryPoint = "spvc_type_get_image_access_qualifier")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvAccessQualifier SpvcTypeGetImageAccessQualifierNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type);

		[NativeName(NativeNameType.Func, "spvc_type_get_image_access_qualifier")]
		[return: NativeName(NativeNameType.Type, "SpvAccessQualifier")]
		public static SpvAccessQualifier SpvcTypeGetImageAccessQualifier([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			SpvAccessQualifier ret = SpvcTypeGetImageAccessQualifierNative(type);
			return ret;
		}

		/// <summary>
		/// Buffer layout query.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_struct_size")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_declared_struct_size")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerGetDeclaredStructSizeNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "struct_type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType structType, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* size);

		/// <summary>/// Buffer layout query.<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_struct_size")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetDeclaredStructSize([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "struct_type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType structType, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* size)
		{
			SpvcResult ret = SpvcCompilerGetDeclaredStructSizeNative(compiler, structType, size);
			return ret;
		}

		/// <summary>/// Buffer layout query.<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_struct_size")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetDeclaredStructSize([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "struct_type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType structType, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint size)
		{
			fixed (nuint* psize = &size)
			{
				SpvcResult ret = SpvcCompilerGetDeclaredStructSizeNative(compiler, structType, (ulong*)psize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_struct_size_runtime_array")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_declared_struct_size_runtime_array")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerGetDeclaredStructSizeRuntimeArrayNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "struct_type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType structType, [NativeName(NativeNameType.Param, "array_size")] [NativeName(NativeNameType.Type, "size_t")] ulong arraySize, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* size);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_struct_size_runtime_array")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetDeclaredStructSizeRuntimeArray([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "struct_type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType structType, [NativeName(NativeNameType.Param, "array_size")] [NativeName(NativeNameType.Type, "size_t")] ulong arraySize, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* size)
		{
			SpvcResult ret = SpvcCompilerGetDeclaredStructSizeRuntimeArrayNative(compiler, structType, arraySize, size);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_struct_size_runtime_array")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetDeclaredStructSizeRuntimeArray([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "struct_type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType structType, [NativeName(NativeNameType.Param, "array_size")] [NativeName(NativeNameType.Type, "size_t")] nuint arraySize, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* size)
		{
			SpvcResult ret = SpvcCompilerGetDeclaredStructSizeRuntimeArrayNative(compiler, structType, arraySize, size);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_struct_size_runtime_array")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetDeclaredStructSizeRuntimeArray([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "struct_type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType structType, [NativeName(NativeNameType.Param, "array_size")] [NativeName(NativeNameType.Type, "size_t")] ulong arraySize, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint size)
		{
			fixed (nuint* psize = &size)
			{
				SpvcResult ret = SpvcCompilerGetDeclaredStructSizeRuntimeArrayNative(compiler, structType, arraySize, (ulong*)psize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_struct_size_runtime_array")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetDeclaredStructSizeRuntimeArray([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "struct_type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType structType, [NativeName(NativeNameType.Param, "array_size")] [NativeName(NativeNameType.Type, "size_t")] nuint arraySize, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint size)
		{
			fixed (nuint* psize = &size)
			{
				SpvcResult ret = SpvcCompilerGetDeclaredStructSizeRuntimeArrayNative(compiler, structType, arraySize, (ulong*)psize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_struct_member_size")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_declared_struct_member_size")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerGetDeclaredStructMemberSizeNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* size);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_struct_member_size")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetDeclaredStructMemberSize([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* size)
		{
			SpvcResult ret = SpvcCompilerGetDeclaredStructMemberSizeNative(compiler, type, index, size);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_struct_member_size")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetDeclaredStructMemberSize([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint size)
		{
			fixed (nuint* psize = &size)
			{
				SpvcResult ret = SpvcCompilerGetDeclaredStructMemberSizeNative(compiler, type, index, (ulong*)psize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_type_struct_member_offset")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_type_struct_member_offset")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerTypeStructMemberOffsetNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* offset);

		[NativeName(NativeNameType.Func, "spvc_compiler_type_struct_member_offset")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerTypeStructMemberOffset([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* offset)
		{
			SpvcResult ret = SpvcCompilerTypeStructMemberOffsetNative(compiler, type, index, offset);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_type_struct_member_offset")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerTypeStructMemberOffset([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint offset)
		{
			fixed (uint* poffset = &offset)
			{
				SpvcResult ret = SpvcCompilerTypeStructMemberOffsetNative(compiler, type, index, (uint*)poffset);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_type_struct_member_array_stride")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_type_struct_member_array_stride")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerTypeStructMemberArrayStrideNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* stride);

		[NativeName(NativeNameType.Func, "spvc_compiler_type_struct_member_array_stride")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerTypeStructMemberArrayStride([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* stride)
		{
			SpvcResult ret = SpvcCompilerTypeStructMemberArrayStrideNative(compiler, type, index, stride);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_type_struct_member_array_stride")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerTypeStructMemberArrayStride([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint stride)
		{
			fixed (uint* pstride = &stride)
			{
				SpvcResult ret = SpvcCompilerTypeStructMemberArrayStrideNative(compiler, type, index, (uint*)pstride);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_type_struct_member_matrix_stride")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_type_struct_member_matrix_stride")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerTypeStructMemberMatrixStrideNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* stride);

		[NativeName(NativeNameType.Func, "spvc_compiler_type_struct_member_matrix_stride")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerTypeStructMemberMatrixStride([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* stride)
		{
			SpvcResult ret = SpvcCompilerTypeStructMemberMatrixStrideNative(compiler, type, index, stride);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_type_struct_member_matrix_stride")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerTypeStructMemberMatrixStride([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint stride)
		{
			fixed (uint* pstride = &stride)
			{
				SpvcResult ret = SpvcCompilerTypeStructMemberMatrixStrideNative(compiler, type, index, (uint*)pstride);
				return ret;
			}
		}

		/// <summary>
		/// Workaround helper functions.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_build_dummy_sampler_for_combined_images")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_build_dummy_sampler_for_combined_images")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerBuildDummySamplerForCombinedImagesNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id*")] uint* id);

		/// <summary>/// Workaround helper functions.<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_build_dummy_sampler_for_combined_images")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerBuildDummySamplerForCombinedImages([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id*")] uint* id)
		{
			SpvcResult ret = SpvcCompilerBuildDummySamplerForCombinedImagesNative(compiler, id);
			return ret;
		}

		/// <summary>/// Workaround helper functions.<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_build_dummy_sampler_for_combined_images")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerBuildDummySamplerForCombinedImages([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id*")] ref uint id)
		{
			fixed (uint* pid = &id)
			{
				SpvcResult ret = SpvcCompilerBuildDummySamplerForCombinedImagesNative(compiler, (uint*)pid);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_build_combined_image_samplers")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_build_combined_image_samplers")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerBuildCombinedImageSamplersNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler);

		[NativeName(NativeNameType.Func, "spvc_compiler_build_combined_image_samplers")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerBuildCombinedImageSamplers([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			SpvcResult ret = SpvcCompilerBuildCombinedImageSamplersNative(compiler);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_combined_image_samplers")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_combined_image_samplers")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerGetCombinedImageSamplersNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "samplers")] [NativeName(NativeNameType.Type, "const spvc_combined_image_sampler**")] SpvcCombinedImageSampler** samplers, [NativeName(NativeNameType.Param, "num_samplers")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numSamplers);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_combined_image_samplers")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetCombinedImageSamplers([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "samplers")] [NativeName(NativeNameType.Type, "const spvc_combined_image_sampler**")] SpvcCombinedImageSampler** samplers, [NativeName(NativeNameType.Param, "num_samplers")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numSamplers)
		{
			SpvcResult ret = SpvcCompilerGetCombinedImageSamplersNative(compiler, samplers, numSamplers);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_combined_image_samplers")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetCombinedImageSamplers([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "samplers")] [NativeName(NativeNameType.Type, "const spvc_combined_image_sampler**")] ref SpvcCombinedImageSampler* samplers, [NativeName(NativeNameType.Param, "num_samplers")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numSamplers)
		{
			fixed (SpvcCombinedImageSampler** psamplers = &samplers)
			{
				SpvcResult ret = SpvcCompilerGetCombinedImageSamplersNative(compiler, (SpvcCombinedImageSampler**)psamplers, numSamplers);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_combined_image_samplers")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetCombinedImageSamplers([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "samplers")] [NativeName(NativeNameType.Type, "const spvc_combined_image_sampler**")] SpvcCombinedImageSampler** samplers, [NativeName(NativeNameType.Param, "num_samplers")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint numSamplers)
		{
			fixed (nuint* pnumSamplers = &numSamplers)
			{
				SpvcResult ret = SpvcCompilerGetCombinedImageSamplersNative(compiler, samplers, (ulong*)pnumSamplers);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_combined_image_samplers")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetCombinedImageSamplers([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "samplers")] [NativeName(NativeNameType.Type, "const spvc_combined_image_sampler**")] ref SpvcCombinedImageSampler* samplers, [NativeName(NativeNameType.Param, "num_samplers")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint numSamplers)
		{
			fixed (SpvcCombinedImageSampler** psamplers = &samplers)
			{
				fixed (nuint* pnumSamplers = &numSamplers)
				{
					SpvcResult ret = SpvcCompilerGetCombinedImageSamplersNative(compiler, (SpvcCombinedImageSampler**)psamplers, (ulong*)pnumSamplers);
					return ret;
				}
			}
		}

		/// <summary>
		/// Constants<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_specialization_constants")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerGetSpecializationConstantsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "constants")] [NativeName(NativeNameType.Type, "const spvc_specialization_constant**")] SpvcSpecializationConstant** constants, [NativeName(NativeNameType.Param, "num_constants")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numConstants);

		/// <summary>/// Constants<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_get_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "constants")] [NativeName(NativeNameType.Type, "const spvc_specialization_constant**")] SpvcSpecializationConstant** constants, [NativeName(NativeNameType.Param, "num_constants")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numConstants)
		{
			SpvcResult ret = SpvcCompilerGetSpecializationConstantsNative(compiler, constants, numConstants);
			return ret;
		}

		/// <summary>/// Constants<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_get_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "constants")] [NativeName(NativeNameType.Type, "const spvc_specialization_constant**")] ref SpvcSpecializationConstant* constants, [NativeName(NativeNameType.Param, "num_constants")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numConstants)
		{
			fixed (SpvcSpecializationConstant** pconstants = &constants)
			{
				SpvcResult ret = SpvcCompilerGetSpecializationConstantsNative(compiler, (SpvcSpecializationConstant**)pconstants, numConstants);
				return ret;
			}
		}

		/// <summary>/// Constants<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_get_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "constants")] [NativeName(NativeNameType.Type, "const spvc_specialization_constant**")] SpvcSpecializationConstant** constants, [NativeName(NativeNameType.Param, "num_constants")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint numConstants)
		{
			fixed (nuint* pnumConstants = &numConstants)
			{
				SpvcResult ret = SpvcCompilerGetSpecializationConstantsNative(compiler, constants, (ulong*)pnumConstants);
				return ret;
			}
		}

		/// <summary>/// Constants<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_get_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "constants")] [NativeName(NativeNameType.Type, "const spvc_specialization_constant**")] ref SpvcSpecializationConstant* constants, [NativeName(NativeNameType.Param, "num_constants")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint numConstants)
		{
			fixed (SpvcSpecializationConstant** pconstants = &constants)
			{
				fixed (nuint* pnumConstants = &numConstants)
				{
					SpvcResult ret = SpvcCompilerGetSpecializationConstantsNative(compiler, (SpvcSpecializationConstant**)pconstants, (ulong*)pnumConstants);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_constant_handle")]
		[return: NativeName(NativeNameType.Type, "spvc_constant")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_constant_handle")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcConstant SpvcCompilerGetConstantHandleNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_constant_id")] uint id);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_constant_handle")]
		[return: NativeName(NativeNameType.Type, "spvc_constant")]
		public static SpvcConstant SpvcCompilerGetConstantHandle([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_constant_id")] uint id)
		{
			SpvcConstant ret = SpvcCompilerGetConstantHandleNative(compiler, id);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_work_group_size_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_constant_id")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_work_group_size_specialization_constants")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcCompilerGetWorkGroupSizeSpecializationConstantsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] SpvcSpecializationConstant* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] SpvcSpecializationConstant* y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] SpvcSpecializationConstant* z);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_work_group_size_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_constant_id")]
		public static uint SpvcCompilerGetWorkGroupSizeSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] SpvcSpecializationConstant* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] SpvcSpecializationConstant* y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] SpvcSpecializationConstant* z)
		{
			uint ret = SpvcCompilerGetWorkGroupSizeSpecializationConstantsNative(compiler, x, y, z);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_work_group_size_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_constant_id")]
		public static uint SpvcCompilerGetWorkGroupSizeSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] ref SpvcSpecializationConstant x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] SpvcSpecializationConstant* y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] SpvcSpecializationConstant* z)
		{
			fixed (SpvcSpecializationConstant* px = &x)
			{
				uint ret = SpvcCompilerGetWorkGroupSizeSpecializationConstantsNative(compiler, (SpvcSpecializationConstant*)px, y, z);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_work_group_size_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_constant_id")]
		public static uint SpvcCompilerGetWorkGroupSizeSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] SpvcSpecializationConstant* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] ref SpvcSpecializationConstant y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] SpvcSpecializationConstant* z)
		{
			fixed (SpvcSpecializationConstant* py = &y)
			{
				uint ret = SpvcCompilerGetWorkGroupSizeSpecializationConstantsNative(compiler, x, (SpvcSpecializationConstant*)py, z);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_work_group_size_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_constant_id")]
		public static uint SpvcCompilerGetWorkGroupSizeSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] ref SpvcSpecializationConstant x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] ref SpvcSpecializationConstant y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] SpvcSpecializationConstant* z)
		{
			fixed (SpvcSpecializationConstant* px = &x)
			{
				fixed (SpvcSpecializationConstant* py = &y)
				{
					uint ret = SpvcCompilerGetWorkGroupSizeSpecializationConstantsNative(compiler, (SpvcSpecializationConstant*)px, (SpvcSpecializationConstant*)py, z);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_work_group_size_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_constant_id")]
		public static uint SpvcCompilerGetWorkGroupSizeSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] SpvcSpecializationConstant* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] SpvcSpecializationConstant* y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] ref SpvcSpecializationConstant z)
		{
			fixed (SpvcSpecializationConstant* pz = &z)
			{
				uint ret = SpvcCompilerGetWorkGroupSizeSpecializationConstantsNative(compiler, x, y, (SpvcSpecializationConstant*)pz);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_work_group_size_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_constant_id")]
		public static uint SpvcCompilerGetWorkGroupSizeSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] ref SpvcSpecializationConstant x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] SpvcSpecializationConstant* y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] ref SpvcSpecializationConstant z)
		{
			fixed (SpvcSpecializationConstant* px = &x)
			{
				fixed (SpvcSpecializationConstant* pz = &z)
				{
					uint ret = SpvcCompilerGetWorkGroupSizeSpecializationConstantsNative(compiler, (SpvcSpecializationConstant*)px, y, (SpvcSpecializationConstant*)pz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_work_group_size_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_constant_id")]
		public static uint SpvcCompilerGetWorkGroupSizeSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] SpvcSpecializationConstant* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] ref SpvcSpecializationConstant y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] ref SpvcSpecializationConstant z)
		{
			fixed (SpvcSpecializationConstant* py = &y)
			{
				fixed (SpvcSpecializationConstant* pz = &z)
				{
					uint ret = SpvcCompilerGetWorkGroupSizeSpecializationConstantsNative(compiler, x, (SpvcSpecializationConstant*)py, (SpvcSpecializationConstant*)pz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_work_group_size_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_constant_id")]
		public static uint SpvcCompilerGetWorkGroupSizeSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] ref SpvcSpecializationConstant x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] ref SpvcSpecializationConstant y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "spvc_specialization_constant*")] ref SpvcSpecializationConstant z)
		{
			fixed (SpvcSpecializationConstant* px = &x)
			{
				fixed (SpvcSpecializationConstant* py = &y)
				{
					fixed (SpvcSpecializationConstant* pz = &z)
					{
						uint ret = SpvcCompilerGetWorkGroupSizeSpecializationConstantsNative(compiler, (SpvcSpecializationConstant*)px, (SpvcSpecializationConstant*)py, (SpvcSpecializationConstant*)pz);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Buffer ranges<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_active_buffer_ranges")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_active_buffer_ranges")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerGetActiveBufferRangesNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "ranges")] [NativeName(NativeNameType.Type, "const spvc_buffer_range**")] SpvcBufferRange** ranges, [NativeName(NativeNameType.Param, "num_ranges")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numRanges);

		/// <summary>/// Buffer ranges<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_get_active_buffer_ranges")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetActiveBufferRanges([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "ranges")] [NativeName(NativeNameType.Type, "const spvc_buffer_range**")] SpvcBufferRange** ranges, [NativeName(NativeNameType.Param, "num_ranges")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numRanges)
		{
			SpvcResult ret = SpvcCompilerGetActiveBufferRangesNative(compiler, id, ranges, numRanges);
			return ret;
		}

		/// <summary>/// Buffer ranges<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_get_active_buffer_ranges")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetActiveBufferRanges([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "ranges")] [NativeName(NativeNameType.Type, "const spvc_buffer_range**")] ref SpvcBufferRange* ranges, [NativeName(NativeNameType.Param, "num_ranges")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numRanges)
		{
			fixed (SpvcBufferRange** pranges = &ranges)
			{
				SpvcResult ret = SpvcCompilerGetActiveBufferRangesNative(compiler, id, (SpvcBufferRange**)pranges, numRanges);
				return ret;
			}
		}

		/// <summary>/// Buffer ranges<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_get_active_buffer_ranges")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetActiveBufferRanges([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "ranges")] [NativeName(NativeNameType.Type, "const spvc_buffer_range**")] SpvcBufferRange** ranges, [NativeName(NativeNameType.Param, "num_ranges")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint numRanges)
		{
			fixed (nuint* pnumRanges = &numRanges)
			{
				SpvcResult ret = SpvcCompilerGetActiveBufferRangesNative(compiler, id, ranges, (ulong*)pnumRanges);
				return ret;
			}
		}

		/// <summary>/// Buffer ranges<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_get_active_buffer_ranges")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetActiveBufferRanges([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "ranges")] [NativeName(NativeNameType.Type, "const spvc_buffer_range**")] ref SpvcBufferRange* ranges, [NativeName(NativeNameType.Param, "num_ranges")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint numRanges)
		{
			fixed (SpvcBufferRange** pranges = &ranges)
			{
				fixed (nuint* pnumRanges = &numRanges)
				{
					SpvcResult ret = SpvcCompilerGetActiveBufferRangesNative(compiler, id, (SpvcBufferRange**)pranges, (ulong*)pnumRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// No stdint.h until C99, sigh :(<br/>
		/// For smaller types, the result is sign or zero-extended as appropriate.<br/>
		/// Maps to C++ API.<br/>
		/// TODO: The SPIRConstant query interface and modification interface is not quite complete.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_fp16")]
		[return: NativeName(NativeNameType.Type, "float")]
		[LibraryImport(LibName, EntryPoint = "spvc_constant_get_scalar_fp16")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float SpvcConstantGetScalarFp16Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row);

		/// <summary>/// No stdint.h until C99, sigh :(<br/>/// For smaller types, the result is sign or zero-extended as appropriate.<br/>/// Maps to C++ API.<br/>/// TODO: The SPIRConstant query interface and modification interface is not quite complete.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_fp16")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float SpvcConstantGetScalarFp16([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			float ret = SpvcConstantGetScalarFp16Native(constant, column, row);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_fp32")]
		[return: NativeName(NativeNameType.Type, "float")]
		[LibraryImport(LibName, EntryPoint = "spvc_constant_get_scalar_fp32")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float SpvcConstantGetScalarFp32Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row);

		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_fp32")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float SpvcConstantGetScalarFp32([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			float ret = SpvcConstantGetScalarFp32Native(constant, column, row);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_fp64")]
		[return: NativeName(NativeNameType.Type, "double")]
		[LibraryImport(LibName, EntryPoint = "spvc_constant_get_scalar_fp64")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial double SpvcConstantGetScalarFp64Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row);

		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_fp64")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double SpvcConstantGetScalarFp64([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			double ret = SpvcConstantGetScalarFp64Native(constant, column, row);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_u32")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[LibraryImport(LibName, EntryPoint = "spvc_constant_get_scalar_u32")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcConstantGetScalarU32Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row);

		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_u32")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint SpvcConstantGetScalarU32([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			uint ret = SpvcConstantGetScalarU32Native(constant, column, row);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_i32")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "spvc_constant_get_scalar_i32")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SpvcConstantGetScalarI32Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row);

		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_i32")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SpvcConstantGetScalarI32([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			int ret = SpvcConstantGetScalarI32Native(constant, column, row);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_u16")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[LibraryImport(LibName, EntryPoint = "spvc_constant_get_scalar_u16")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcConstantGetScalarU16Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row);

		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_u16")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint SpvcConstantGetScalarU16([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			uint ret = SpvcConstantGetScalarU16Native(constant, column, row);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_i16")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "spvc_constant_get_scalar_i16")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SpvcConstantGetScalarI16Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row);

		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_i16")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SpvcConstantGetScalarI16([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			int ret = SpvcConstantGetScalarI16Native(constant, column, row);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_u8")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[LibraryImport(LibName, EntryPoint = "spvc_constant_get_scalar_u8")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcConstantGetScalarU8Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row);

		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_u8")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint SpvcConstantGetScalarU8([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			uint ret = SpvcConstantGetScalarU8Native(constant, column, row);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_i8")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "spvc_constant_get_scalar_i8")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SpvcConstantGetScalarI8Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row);

		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_i8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SpvcConstantGetScalarI8([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			int ret = SpvcConstantGetScalarI8Native(constant, column, row);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_constant_get_subconstants")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_constant_get_subconstants")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcConstantGetSubconstantsNative([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "constituents")] [NativeName(NativeNameType.Type, "const spvc_constant_id**")] uint** constituents, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t*")] ulong* count);

		[NativeName(NativeNameType.Func, "spvc_constant_get_subconstants")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcConstantGetSubconstants([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "constituents")] [NativeName(NativeNameType.Type, "const spvc_constant_id**")] uint** constituents, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t*")] ulong* count)
		{
			SpvcConstantGetSubconstantsNative(constant, constituents, count);
		}

		[NativeName(NativeNameType.Func, "spvc_constant_get_subconstants")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcConstantGetSubconstants([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "constituents")] [NativeName(NativeNameType.Type, "const spvc_constant_id**")] ref uint* constituents, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t*")] ulong* count)
		{
			fixed (uint** pconstituents = &constituents)
			{
				SpvcConstantGetSubconstantsNative(constant, (uint**)pconstituents, count);
			}
		}

		[NativeName(NativeNameType.Func, "spvc_constant_get_subconstants")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcConstantGetSubconstants([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "constituents")] [NativeName(NativeNameType.Type, "const spvc_constant_id**")] uint** constituents, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint count)
		{
			fixed (nuint* pcount = &count)
			{
				SpvcConstantGetSubconstantsNative(constant, constituents, (ulong*)pcount);
			}
		}

		[NativeName(NativeNameType.Func, "spvc_constant_get_subconstants")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcConstantGetSubconstants([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "constituents")] [NativeName(NativeNameType.Type, "const spvc_constant_id**")] ref uint* constituents, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint count)
		{
			fixed (uint** pconstituents = &constituents)
			{
				fixed (nuint* pcount = &count)
				{
					SpvcConstantGetSubconstantsNative(constant, (uint**)pconstituents, (ulong*)pcount);
				}
			}
		}

		[NativeName(NativeNameType.Func, "spvc_constant_get_type")]
		[return: NativeName(NativeNameType.Type, "spvc_type_id")]
		[LibraryImport(LibName, EntryPoint = "spvc_constant_get_type")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvcConstantGetTypeNative([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant);

		[NativeName(NativeNameType.Func, "spvc_constant_get_type")]
		[return: NativeName(NativeNameType.Type, "spvc_type_id")]
		public static uint SpvcConstantGetType([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant)
		{
			uint ret = SpvcConstantGetTypeNative(constant);
			return ret;
		}

		/// <summary>
		/// C implementation of the C++ api.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_fp16")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_constant_set_scalar_fp16")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcConstantSetScalarFp16Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned short")] ushort value);

		/// <summary>/// C implementation of the C++ api.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_fp16")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcConstantSetScalarFp16([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned short")] ushort value)
		{
			SpvcConstantSetScalarFp16Native(constant, column, row, value);
		}

		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_fp32")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_constant_set_scalar_fp32")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcConstantSetScalarFp32Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "float")] float value);

		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_fp32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcConstantSetScalarFp32([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "float")] float value)
		{
			SpvcConstantSetScalarFp32Native(constant, column, row, value);
		}

		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_fp64")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_constant_set_scalar_fp64")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcConstantSetScalarFp64Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "double")] double value);

		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_fp64")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcConstantSetScalarFp64([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "double")] double value)
		{
			SpvcConstantSetScalarFp64Native(constant, column, row, value);
		}

		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_u32")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_constant_set_scalar_u32")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcConstantSetScalarU32Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned int")] uint value);

		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_u32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcConstantSetScalarU32([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned int")] uint value)
		{
			SpvcConstantSetScalarU32Native(constant, column, row, value);
		}

		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_i32")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_constant_set_scalar_i32")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcConstantSetScalarI32Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value);

		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_i32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcConstantSetScalarI32([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value)
		{
			SpvcConstantSetScalarI32Native(constant, column, row, value);
		}

		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_u16")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_constant_set_scalar_u16")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcConstantSetScalarU16Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned short")] ushort value);

		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_u16")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcConstantSetScalarU16([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned short")] ushort value)
		{
			SpvcConstantSetScalarU16Native(constant, column, row, value);
		}

		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_i16")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_constant_set_scalar_i16")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcConstantSetScalarI16Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "short")] short value);

		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_i16")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcConstantSetScalarI16([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "short")] short value)
		{
			SpvcConstantSetScalarI16Native(constant, column, row, value);
		}

		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_u8")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_constant_set_scalar_u8")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcConstantSetScalarU8Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned char")] byte value);

		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_u8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcConstantSetScalarU8([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned char")] byte value)
		{
			SpvcConstantSetScalarU8Native(constant, column, row, value);
		}

		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_i8")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvc_constant_set_scalar_i8")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvcConstantSetScalarI8Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char")] byte value);

		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_i8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvcConstantSetScalarI8([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char")] byte value)
		{
			SpvcConstantSetScalarI8Native(constant, column, row, value);
		}

		/// <summary>
		/// Misc reflection<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_binary_offset_for_decoration")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_binary_offset_for_decoration")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcCompilerGetBinaryOffsetForDecorationNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "word_offset")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* wordOffset);

		/// <summary>/// Misc reflection<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_get_binary_offset_for_decoration")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerGetBinaryOffsetForDecoration([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "word_offset")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* wordOffset)
		{
			byte ret = SpvcCompilerGetBinaryOffsetForDecorationNative(compiler, id, decoration, wordOffset);
			return ret;
		}

		/// <summary>/// Misc reflection<br/>/// Maps to C++ API.<br/>/// </summary>		[NativeName(NativeNameType.Func, "spvc_compiler_get_binary_offset_for_decoration")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerGetBinaryOffsetForDecoration([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "word_offset")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint wordOffset)
		{
			fixed (uint* pwordOffset = &wordOffset)
			{
				byte ret = SpvcCompilerGetBinaryOffsetForDecorationNative(compiler, id, decoration, (uint*)pwordOffset);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_buffer_is_hlsl_counter_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_buffer_is_hlsl_counter_buffer")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcCompilerBufferIsHlslCounterBufferNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id);

		[NativeName(NativeNameType.Func, "spvc_compiler_buffer_is_hlsl_counter_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerBufferIsHlslCounterBuffer([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id)
		{
			byte ret = SpvcCompilerBufferIsHlslCounterBufferNative(compiler, id);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_buffer_get_hlsl_counter_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_buffer_get_hlsl_counter_buffer")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SpvcCompilerBufferGetHlslCounterBufferNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "counter_id")] [NativeName(NativeNameType.Type, "spvc_variable_id*")] uint* counterId);

		[NativeName(NativeNameType.Func, "spvc_compiler_buffer_get_hlsl_counter_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerBufferGetHlslCounterBuffer([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "counter_id")] [NativeName(NativeNameType.Type, "spvc_variable_id*")] uint* counterId)
		{
			byte ret = SpvcCompilerBufferGetHlslCounterBufferNative(compiler, id, counterId);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_buffer_get_hlsl_counter_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static byte SpvcCompilerBufferGetHlslCounterBuffer([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "counter_id")] [NativeName(NativeNameType.Type, "spvc_variable_id*")] ref uint counterId)
		{
			fixed (uint* pcounterId = &counterId)
			{
				byte ret = SpvcCompilerBufferGetHlslCounterBufferNative(compiler, id, (uint*)pcounterId);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_capabilities")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_declared_capabilities")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerGetDeclaredCapabilitiesNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "capabilities")] [NativeName(NativeNameType.Type, "const SpvCapability**")] SpvCapability** capabilities, [NativeName(NativeNameType.Param, "num_capabilities")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numCapabilities);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_capabilities")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetDeclaredCapabilities([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "capabilities")] [NativeName(NativeNameType.Type, "const SpvCapability**")] SpvCapability** capabilities, [NativeName(NativeNameType.Param, "num_capabilities")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numCapabilities)
		{
			SpvcResult ret = SpvcCompilerGetDeclaredCapabilitiesNative(compiler, capabilities, numCapabilities);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_capabilities")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetDeclaredCapabilities([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "capabilities")] [NativeName(NativeNameType.Type, "const SpvCapability**")] ref SpvCapability* capabilities, [NativeName(NativeNameType.Param, "num_capabilities")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numCapabilities)
		{
			fixed (SpvCapability** pcapabilities = &capabilities)
			{
				SpvcResult ret = SpvcCompilerGetDeclaredCapabilitiesNative(compiler, (SpvCapability**)pcapabilities, numCapabilities);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_capabilities")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetDeclaredCapabilities([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "capabilities")] [NativeName(NativeNameType.Type, "const SpvCapability**")] SpvCapability** capabilities, [NativeName(NativeNameType.Param, "num_capabilities")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint numCapabilities)
		{
			fixed (nuint* pnumCapabilities = &numCapabilities)
			{
				SpvcResult ret = SpvcCompilerGetDeclaredCapabilitiesNative(compiler, capabilities, (ulong*)pnumCapabilities);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_capabilities")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetDeclaredCapabilities([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "capabilities")] [NativeName(NativeNameType.Type, "const SpvCapability**")] ref SpvCapability* capabilities, [NativeName(NativeNameType.Param, "num_capabilities")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint numCapabilities)
		{
			fixed (SpvCapability** pcapabilities = &capabilities)
			{
				fixed (nuint* pnumCapabilities = &numCapabilities)
				{
					SpvcResult ret = SpvcCompilerGetDeclaredCapabilitiesNative(compiler, (SpvCapability**)pcapabilities, (ulong*)pnumCapabilities);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_extensions")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_declared_extensions")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerGetDeclaredExtensionsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "extensions")] [NativeName(NativeNameType.Type, "const char***")] byte*** extensions, [NativeName(NativeNameType.Param, "num_extensions")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numExtensions);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_extensions")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetDeclaredExtensions([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "extensions")] [NativeName(NativeNameType.Type, "const char***")] byte*** extensions, [NativeName(NativeNameType.Param, "num_extensions")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numExtensions)
		{
			SpvcResult ret = SpvcCompilerGetDeclaredExtensionsNative(compiler, extensions, numExtensions);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_extensions")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetDeclaredExtensions([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "extensions")] [NativeName(NativeNameType.Type, "const char***")] ref byte** extensions, [NativeName(NativeNameType.Param, "num_extensions")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numExtensions)
		{
			fixed (byte*** pextensions = &extensions)
			{
				SpvcResult ret = SpvcCompilerGetDeclaredExtensionsNative(compiler, (byte***)pextensions, numExtensions);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_extensions")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetDeclaredExtensions([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "extensions")] [NativeName(NativeNameType.Type, "const char***")] byte*** extensions, [NativeName(NativeNameType.Param, "num_extensions")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint numExtensions)
		{
			fixed (nuint* pnumExtensions = &numExtensions)
			{
				SpvcResult ret = SpvcCompilerGetDeclaredExtensionsNative(compiler, extensions, (ulong*)pnumExtensions);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_extensions")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetDeclaredExtensions([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "extensions")] [NativeName(NativeNameType.Type, "const char***")] ref byte** extensions, [NativeName(NativeNameType.Param, "num_extensions")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint numExtensions)
		{
			fixed (byte*** pextensions = &extensions)
			{
				fixed (nuint* pnumExtensions = &numExtensions)
				{
					SpvcResult ret = SpvcCompilerGetDeclaredExtensionsNative(compiler, (byte***)pextensions, (ulong*)pnumExtensions);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_remapped_declared_block_name")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_remapped_declared_block_name")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* SpvcCompilerGetRemappedDeclaredBlockNameNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_remapped_declared_block_name")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SpvcCompilerGetRemappedDeclaredBlockName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id)
		{
			byte* ret = SpvcCompilerGetRemappedDeclaredBlockNameNative(compiler, id);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_remapped_declared_block_name")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SpvcCompilerGetRemappedDeclaredBlockNameS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id)
		{
			string ret = Utils.DecodeStringUTF8(SpvcCompilerGetRemappedDeclaredBlockNameNative(compiler, id));
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_buffer_block_decorations")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[LibraryImport(LibName, EntryPoint = "spvc_compiler_get_buffer_block_decorations")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvcResult SpvcCompilerGetBufferBlockDecorationsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "decorations")] [NativeName(NativeNameType.Type, "const SpvDecoration**")] SpvDecoration** decorations, [NativeName(NativeNameType.Param, "num_decorations")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numDecorations);

		[NativeName(NativeNameType.Func, "spvc_compiler_get_buffer_block_decorations")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetBufferBlockDecorations([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "decorations")] [NativeName(NativeNameType.Type, "const SpvDecoration**")] SpvDecoration** decorations, [NativeName(NativeNameType.Param, "num_decorations")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numDecorations)
		{
			SpvcResult ret = SpvcCompilerGetBufferBlockDecorationsNative(compiler, id, decorations, numDecorations);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_buffer_block_decorations")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetBufferBlockDecorations([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "decorations")] [NativeName(NativeNameType.Type, "const SpvDecoration**")] ref SpvDecoration* decorations, [NativeName(NativeNameType.Param, "num_decorations")] [NativeName(NativeNameType.Type, "size_t*")] ulong* numDecorations)
		{
			fixed (SpvDecoration** pdecorations = &decorations)
			{
				SpvcResult ret = SpvcCompilerGetBufferBlockDecorationsNative(compiler, id, (SpvDecoration**)pdecorations, numDecorations);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_buffer_block_decorations")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetBufferBlockDecorations([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "decorations")] [NativeName(NativeNameType.Type, "const SpvDecoration**")] SpvDecoration** decorations, [NativeName(NativeNameType.Param, "num_decorations")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint numDecorations)
		{
			fixed (nuint* pnumDecorations = &numDecorations)
			{
				SpvcResult ret = SpvcCompilerGetBufferBlockDecorationsNative(compiler, id, decorations, (ulong*)pnumDecorations);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvc_compiler_get_buffer_block_decorations")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult SpvcCompilerGetBufferBlockDecorations([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "decorations")] [NativeName(NativeNameType.Type, "const SpvDecoration**")] ref SpvDecoration* decorations, [NativeName(NativeNameType.Param, "num_decorations")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint numDecorations)
		{
			fixed (SpvDecoration** pdecorations = &decorations)
			{
				fixed (nuint* pnumDecorations = &numDecorations)
				{
					SpvcResult ret = SpvcCompilerGetBufferBlockDecorationsNative(compiler, id, (SpvDecoration**)pdecorations, (ulong*)pnumDecorations);
					return ret;
				}
			}
		}

	}
}
