// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using HexaGen.Runtime.COM;

namespace Hexa.NET.DXGI
{

	/// <summary>
	/// To be documented.
	/// </summary>
	[Guid("54ec77fa-1377-44e6-8c32-88fd5f44c84c")]
	public partial struct IDXGIDevice : IComObject, IComObject<IDXGIDevice>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("54ec77fa-1377-44e6-8c32-88fd5f44c84c");

		public unsafe IDXGIDevice (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface(Guid* riid, void** ppvObject) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, void**, int>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface(ref Guid riid, void** ppvObject) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface<T>(out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface<T>(ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe uint AddRef() 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe uint Release() 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateData(Guid* name, uint dataSize, void* pData) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, uint, void*, int>)(LpVtbl[3]))(ptr, name, dataSize, pData);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateData(ref Guid name, uint dataSize, void* pData) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, uint, void*, int>)(LpVtbl[3]))(ptr, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(Guid* name, IUnknown* pUnknown) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, name, pUnknown);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(ref Guid name, IUnknown* pUnknown) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(Guid* name, ref IUnknown pUnknown) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(Guid* name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, name, (IUnknown*)pUnknown.Handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(ref Guid name, ref IUnknown pUnknown) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(ref Guid name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, (Guid*)pname, (IUnknown*)pUnknown.Handle);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData(Guid* name, uint* pDataSize, void* pData) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, name, pDataSize, pData);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData(ref Guid name, uint* pDataSize, void* pData) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData(Guid* name, ref uint pDataSize, void* pData) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData(ref Guid name, ref uint pDataSize, void* pData) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData<T>(Guid* name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, name, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData<T>(ref Guid name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, (Guid*)pname, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData<T>(Guid* name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, name, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData<T>(ref Guid name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, (Guid*)pname, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetParent(Guid* riid, void** ppParent) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, void**, int>)(LpVtbl[6]))(ptr, riid, ppParent);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetParent(ref Guid riid, void** ppParent) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, void**, int>)(LpVtbl[6]))(ptr, (Guid*)priid, ppParent);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetParent<T>(out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppParent = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, void**, int>)(LpVtbl[6]))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppParent.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetParent<T>(ref Guid riid, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppParent = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, Guid*, void**, int>)(LpVtbl[6]))(ptr, (Guid*)priid, (void**)ppParent.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetAdapter(IDXGIAdapter** pAdapter) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, IDXGIAdapter**, int>)(LpVtbl[7]))(ptr, pAdapter);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetAdapter(ref IDXGIAdapter* pAdapter) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIAdapter** ppAdapter = &pAdapter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, IDXGIAdapter**, int>)(LpVtbl[7]))(ptr, (IDXGIAdapter**)ppAdapter);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetAdapter(out ComPtr<IDXGIAdapter> pAdapter) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			pAdapter = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, IDXGIAdapter**, int>)(LpVtbl[7]))(ptr, (IDXGIAdapter**)pAdapter.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(DxgiSurfaceDesc* pDesc, uint numSurfaces, uint usage, DxgiSharedResource* pSharedResource, IDXGISurface** ppSurface) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, pDesc, numSurfaces, usage, pSharedResource, ppSurface);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(ref DxgiSurfaceDesc pDesc, uint numSurfaces, uint usage, DxgiSharedResource* pSharedResource, IDXGISurface** ppSurface) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSurfaceDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, (DxgiSurfaceDesc*)ppDesc, numSurfaces, usage, pSharedResource, ppSurface);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(DxgiSurfaceDesc* pDesc, uint numSurfaces, uint usage, ref DxgiSharedResource pSharedResource, IDXGISurface** ppSurface) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSharedResource* ppSharedResource = &pSharedResource)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, pDesc, numSurfaces, usage, (DxgiSharedResource*)ppSharedResource, ppSurface);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(ref DxgiSurfaceDesc pDesc, uint numSurfaces, uint usage, ref DxgiSharedResource pSharedResource, IDXGISurface** ppSurface) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSurfaceDesc* ppDesc = &pDesc)
			{
				fixed (DxgiSharedResource* ppSharedResource = &pSharedResource)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, (DxgiSurfaceDesc*)ppDesc, numSurfaces, usage, (DxgiSharedResource*)ppSharedResource, ppSurface);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(DxgiSurfaceDesc* pDesc, uint numSurfaces, uint usage, DxgiSharedResource* pSharedResource, ref IDXGISurface* ppSurface) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGISurface** pppSurface = &ppSurface)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, pDesc, numSurfaces, usage, pSharedResource, (IDXGISurface**)pppSurface);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(DxgiSurfaceDesc* pDesc, uint numSurfaces, uint usage, DxgiSharedResource* pSharedResource, out ComPtr<IDXGISurface> ppSurface) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppSurface = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, pDesc, numSurfaces, usage, pSharedResource, (IDXGISurface**)ppSurface.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(ref DxgiSurfaceDesc pDesc, uint numSurfaces, uint usage, DxgiSharedResource* pSharedResource, ref IDXGISurface* ppSurface) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSurfaceDesc* ppDesc = &pDesc)
			{
				fixed (IDXGISurface** pppSurface = &ppSurface)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, (DxgiSurfaceDesc*)ppDesc, numSurfaces, usage, pSharedResource, (IDXGISurface**)pppSurface);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(ref DxgiSurfaceDesc pDesc, uint numSurfaces, uint usage, DxgiSharedResource* pSharedResource, out ComPtr<IDXGISurface> ppSurface) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSurfaceDesc* ppDesc = &pDesc)
			{
				ppSurface = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, (DxgiSurfaceDesc*)ppDesc, numSurfaces, usage, pSharedResource, (IDXGISurface**)ppSurface.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(DxgiSurfaceDesc* pDesc, uint numSurfaces, uint usage, ref DxgiSharedResource pSharedResource, ref IDXGISurface* ppSurface) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSharedResource* ppSharedResource = &pSharedResource)
			{
				fixed (IDXGISurface** pppSurface = &ppSurface)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, pDesc, numSurfaces, usage, (DxgiSharedResource*)ppSharedResource, (IDXGISurface**)pppSurface);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(DxgiSurfaceDesc* pDesc, uint numSurfaces, uint usage, ref DxgiSharedResource pSharedResource, out ComPtr<IDXGISurface> ppSurface) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSharedResource* ppSharedResource = &pSharedResource)
			{
				ppSurface = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, pDesc, numSurfaces, usage, (DxgiSharedResource*)ppSharedResource, (IDXGISurface**)ppSurface.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(ref DxgiSurfaceDesc pDesc, uint numSurfaces, uint usage, ref DxgiSharedResource pSharedResource, ref IDXGISurface* ppSurface) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSurfaceDesc* ppDesc = &pDesc)
			{
				fixed (DxgiSharedResource* ppSharedResource = &pSharedResource)
				{
					fixed (IDXGISurface** pppSurface = &ppSurface)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, (DxgiSurfaceDesc*)ppDesc, numSurfaces, usage, (DxgiSharedResource*)ppSharedResource, (IDXGISurface**)pppSurface);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(ref DxgiSurfaceDesc pDesc, uint numSurfaces, uint usage, ref DxgiSharedResource pSharedResource, out ComPtr<IDXGISurface> ppSurface) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSurfaceDesc* ppDesc = &pDesc)
			{
				fixed (DxgiSharedResource* ppSharedResource = &pSharedResource)
				{
					ppSurface = default;
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, (DxgiSurfaceDesc*)ppDesc, numSurfaces, usage, (DxgiSharedResource*)ppSharedResource, (IDXGISurface**)ppSurface.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryResourceResidency(IUnknown** ppResources, DxgiResidency* pResidencyStatus, uint numResources) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, IUnknown**, DxgiResidency*, uint, int>)(LpVtbl[9]))(ptr, ppResources, pResidencyStatus, numResources);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryResourceResidency(ref IUnknown* ppResources, DxgiResidency* pResidencyStatus, uint numResources) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown** pppResources = &ppResources)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, IUnknown**, DxgiResidency*, uint, int>)(LpVtbl[9]))(ptr, (IUnknown**)pppResources, pResidencyStatus, numResources);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryResourceResidency(ComPtr<IUnknown> ppResources, DxgiResidency* pResidencyStatus, uint numResources) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, IUnknown**, DxgiResidency*, uint, int>)(LpVtbl[9]))(ptr, (IUnknown**)ppResources.Handle, pResidencyStatus, numResources);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryResourceResidency(IUnknown** ppResources, ref DxgiResidency pResidencyStatus, uint numResources) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiResidency* ppResidencyStatus = &pResidencyStatus)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, IUnknown**, DxgiResidency*, uint, int>)(LpVtbl[9]))(ptr, ppResources, (DxgiResidency*)ppResidencyStatus, numResources);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryResourceResidency(ref IUnknown* ppResources, ref DxgiResidency pResidencyStatus, uint numResources) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown** pppResources = &ppResources)
			{
				fixed (DxgiResidency* ppResidencyStatus = &pResidencyStatus)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, IUnknown**, DxgiResidency*, uint, int>)(LpVtbl[9]))(ptr, (IUnknown**)pppResources, (DxgiResidency*)ppResidencyStatus, numResources);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryResourceResidency(ComPtr<IUnknown> ppResources, ref DxgiResidency pResidencyStatus, uint numResources) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiResidency* ppResidencyStatus = &pResidencyStatus)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, IUnknown**, DxgiResidency*, uint, int>)(LpVtbl[9]))(ptr, (IUnknown**)ppResources.Handle, (DxgiResidency*)ppResidencyStatus, numResources);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetGPUThreadPriority(int priority) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, int, int>)(LpVtbl[10]))(ptr, priority);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetGPUThreadPriority(int* pPriority) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, int*, int>)(LpVtbl[11]))(ptr, pPriority);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetGPUThreadPriority(ref int pPriority) 
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppPriority = &pPriority)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, int*, int>)(LpVtbl[11]))(ptr, (int*)ppPriority);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIObject (IDXGIDevice value)
		{
			return Unsafe.As<IDXGIDevice, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIDevice value)
		{
			return Unsafe.As<IDXGIDevice, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiSharedResource
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public nint Handle;


		/// <summary>/// To be documented./// </summary>		public unsafe DxgiSharedResource(nint handle = default)
		{
			Handle = handle;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[Guid("770aae78-f26f-4dba-a829-253c83d1b387")]
	public partial struct IDXGIFactory1 : IComObject, IComObject<IDXGIFactory1>, IComObject<IDXGIFactory>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("770aae78-f26f-4dba-a829-253c83d1b387");

		public unsafe IDXGIFactory1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface(Guid* riid, void** ppvObject) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, void**, int>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface(ref Guid riid, void** ppvObject) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface<T>(out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface<T>(ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe uint AddRef() 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe uint Release() 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateData(Guid* name, uint dataSize, void* pData) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, uint, void*, int>)(LpVtbl[3]))(ptr, name, dataSize, pData);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateData(ref Guid name, uint dataSize, void* pData) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, uint, void*, int>)(LpVtbl[3]))(ptr, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(Guid* name, IUnknown* pUnknown) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, name, pUnknown);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(ref Guid name, IUnknown* pUnknown) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(Guid* name, ref IUnknown pUnknown) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(Guid* name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, name, (IUnknown*)pUnknown.Handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(ref Guid name, ref IUnknown pUnknown) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(ref Guid name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, (Guid*)pname, (IUnknown*)pUnknown.Handle);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData(Guid* name, uint* pDataSize, void* pData) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, name, pDataSize, pData);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData(ref Guid name, uint* pDataSize, void* pData) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData(Guid* name, ref uint pDataSize, void* pData) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData(ref Guid name, ref uint pDataSize, void* pData) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData<T>(Guid* name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, name, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData<T>(ref Guid name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, (Guid*)pname, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData<T>(Guid* name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, name, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData<T>(ref Guid name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, (Guid*)pname, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetParent(Guid* riid, void** ppParent) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, void**, int>)(LpVtbl[6]))(ptr, riid, ppParent);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetParent(ref Guid riid, void** ppParent) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, void**, int>)(LpVtbl[6]))(ptr, (Guid*)priid, ppParent);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetParent<T>(out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppParent = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, void**, int>)(LpVtbl[6]))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppParent.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetParent<T>(ref Guid riid, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppParent = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Guid*, void**, int>)(LpVtbl[6]))(ptr, (Guid*)priid, (void**)ppParent.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int EnumAdapters(uint adapter, IDXGIAdapter** ppAdapter) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, uint, IDXGIAdapter**, int>)(LpVtbl[7]))(ptr, adapter, ppAdapter);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int EnumAdapters(uint adapter, ref IDXGIAdapter* ppAdapter) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIAdapter** pppAdapter = &ppAdapter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, uint, IDXGIAdapter**, int>)(LpVtbl[7]))(ptr, adapter, (IDXGIAdapter**)pppAdapter);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int EnumAdapters(uint adapter, out ComPtr<IDXGIAdapter> ppAdapter) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppAdapter = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, uint, IDXGIAdapter**, int>)(LpVtbl[7]))(ptr, adapter, (IDXGIAdapter**)ppAdapter.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int MakeWindowAssociation(nint windowHandle, uint flags) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, nint, uint, int>)(LpVtbl[8]))(ptr, windowHandle, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetWindowAssociation(nint* pWindowHandle) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, nint*, int>)(LpVtbl[9]))(ptr, pWindowHandle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetWindowAssociation(ref nint pWindowHandle) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nint* ppWindowHandle = &pWindowHandle)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, nint*, int>)(LpVtbl[9]))(ptr, (nint*)ppWindowHandle);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSwapChain(IUnknown* pDevice, DxgiSwapChainDesc* pDesc, IDXGISwapChain** ppSwapChain) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, int>)(LpVtbl[10]))(ptr, pDevice, pDesc, ppSwapChain);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSwapChain(ref IUnknown pDevice, DxgiSwapChainDesc* pDesc, IDXGISwapChain** ppSwapChain) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, int>)(LpVtbl[10]))(ptr, (IUnknown*)ppDevice, pDesc, ppSwapChain);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSwapChain(ComPtr<IUnknown> pDevice, DxgiSwapChainDesc* pDesc, IDXGISwapChain** ppSwapChain) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, int>)(LpVtbl[10]))(ptr, (IUnknown*)pDevice.Handle, pDesc, ppSwapChain);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSwapChain(IUnknown* pDevice, ref DxgiSwapChainDesc pDesc, IDXGISwapChain** ppSwapChain) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, int>)(LpVtbl[10]))(ptr, pDevice, (DxgiSwapChainDesc*)ppDesc, ppSwapChain);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSwapChain(ref IUnknown pDevice, ref DxgiSwapChainDesc pDesc, IDXGISwapChain** ppSwapChain) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc* ppDesc = &pDesc)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, int>)(LpVtbl[10]))(ptr, (IUnknown*)ppDevice, (DxgiSwapChainDesc*)ppDesc, ppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSwapChain(ComPtr<IUnknown> pDevice, ref DxgiSwapChainDesc pDesc, IDXGISwapChain** ppSwapChain) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, int>)(LpVtbl[10]))(ptr, (IUnknown*)pDevice.Handle, (DxgiSwapChainDesc*)ppDesc, ppSwapChain);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSwapChain(IUnknown* pDevice, DxgiSwapChainDesc* pDesc, ref IDXGISwapChain* ppSwapChain) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, int>)(LpVtbl[10]))(ptr, pDevice, pDesc, (IDXGISwapChain**)pppSwapChain);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSwapChain(IUnknown* pDevice, DxgiSwapChainDesc* pDesc, out ComPtr<IDXGISwapChain> ppSwapChain) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppSwapChain = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, int>)(LpVtbl[10]))(ptr, pDevice, pDesc, (IDXGISwapChain**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSwapChain(ref IUnknown pDevice, DxgiSwapChainDesc* pDesc, ref IDXGISwapChain* ppSwapChain) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, int>)(LpVtbl[10]))(ptr, (IUnknown*)ppDevice, pDesc, (IDXGISwapChain**)pppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSwapChain(ComPtr<IUnknown> pDevice, DxgiSwapChainDesc* pDesc, out ComPtr<IDXGISwapChain> ppSwapChain) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppSwapChain = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, int>)(LpVtbl[10]))(ptr, (IUnknown*)pDevice.Handle, pDesc, (IDXGISwapChain**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSwapChain(IUnknown* pDevice, ref DxgiSwapChainDesc pDesc, ref IDXGISwapChain* ppSwapChain) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc* ppDesc = &pDesc)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, int>)(LpVtbl[10]))(ptr, pDevice, (DxgiSwapChainDesc*)ppDesc, (IDXGISwapChain**)pppSwapChain);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSwapChain(IUnknown* pDevice, ref DxgiSwapChainDesc pDesc, out ComPtr<IDXGISwapChain> ppSwapChain) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc* ppDesc = &pDesc)
			{
				ppSwapChain = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, int>)(LpVtbl[10]))(ptr, pDevice, (DxgiSwapChainDesc*)ppDesc, (IDXGISwapChain**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSwapChain(ref IUnknown pDevice, ref DxgiSwapChainDesc pDesc, ref IDXGISwapChain* ppSwapChain) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc* ppDesc = &pDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, int>)(LpVtbl[10]))(ptr, (IUnknown*)ppDevice, (DxgiSwapChainDesc*)ppDesc, (IDXGISwapChain**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSwapChain(ComPtr<IUnknown> pDevice, ref DxgiSwapChainDesc pDesc, out ComPtr<IDXGISwapChain> ppSwapChain) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc* ppDesc = &pDesc)
			{
				ppSwapChain = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, int>)(LpVtbl[10]))(ptr, (IUnknown*)pDevice.Handle, (DxgiSwapChainDesc*)ppDesc, (IDXGISwapChain**)ppSwapChain.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSoftwareAdapter(nint module, IDXGIAdapter** ppAdapter) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, nint, IDXGIAdapter**, int>)(LpVtbl[11]))(ptr, module, ppAdapter);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSoftwareAdapter(nint module, ref IDXGIAdapter* ppAdapter) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIAdapter** pppAdapter = &ppAdapter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, nint, IDXGIAdapter**, int>)(LpVtbl[11]))(ptr, module, (IDXGIAdapter**)pppAdapter);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSoftwareAdapter(nint module, out ComPtr<IDXGIAdapter> ppAdapter) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppAdapter = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, nint, IDXGIAdapter**, int>)(LpVtbl[11]))(ptr, module, (IDXGIAdapter**)ppAdapter.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int EnumAdapters1(uint adapter, IDXGIAdapter1** ppAdapter) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, uint, IDXGIAdapter1**, int>)(LpVtbl[12]))(ptr, adapter, ppAdapter);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int EnumAdapters1(uint adapter, ref IDXGIAdapter1* ppAdapter) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIAdapter1** pppAdapter = &ppAdapter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, uint, IDXGIAdapter1**, int>)(LpVtbl[12]))(ptr, adapter, (IDXGIAdapter1**)pppAdapter);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int EnumAdapters1(uint adapter, out ComPtr<IDXGIAdapter1> ppAdapter) 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppAdapter = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, uint, IDXGIAdapter1**, int>)(LpVtbl[12]))(ptr, adapter, (IDXGIAdapter1**)ppAdapter.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int IsCurrent() 
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, int>)(LpVtbl[13]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIFactory (IDXGIFactory1 value)
		{
			return Unsafe.As<IDXGIFactory1, IDXGIFactory>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIFactory1 value)
		{
			return Unsafe.As<IDXGIFactory1, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIFactory1 value)
		{
			return Unsafe.As<IDXGIFactory1, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[Guid("29038f61-3839-4626-91fd-086879011a05")]
	public partial struct IDXGIAdapter1 : IComObject, IComObject<IDXGIAdapter1>, IComObject<IDXGIAdapter>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("29038f61-3839-4626-91fd-086879011a05");

		public unsafe IDXGIAdapter1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface(Guid* riid, void** ppvObject) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, void**, int>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface(ref Guid riid, void** ppvObject) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface<T>(out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface<T>(ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe uint AddRef() 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe uint Release() 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateData(Guid* name, uint dataSize, void* pData) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, uint, void*, int>)(LpVtbl[3]))(ptr, name, dataSize, pData);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateData(ref Guid name, uint dataSize, void* pData) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, uint, void*, int>)(LpVtbl[3]))(ptr, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(Guid* name, IUnknown* pUnknown) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, name, pUnknown);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(ref Guid name, IUnknown* pUnknown) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(Guid* name, ref IUnknown pUnknown) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(Guid* name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, name, (IUnknown*)pUnknown.Handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(ref Guid name, ref IUnknown pUnknown) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(ref Guid name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, (Guid*)pname, (IUnknown*)pUnknown.Handle);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData(Guid* name, uint* pDataSize, void* pData) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, name, pDataSize, pData);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData(ref Guid name, uint* pDataSize, void* pData) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData(Guid* name, ref uint pDataSize, void* pData) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData(ref Guid name, ref uint pDataSize, void* pData) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData<T>(Guid* name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, name, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData<T>(ref Guid name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, (Guid*)pname, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData<T>(Guid* name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, name, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData<T>(ref Guid name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, (Guid*)pname, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetParent(Guid* riid, void** ppParent) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, void**, int>)(LpVtbl[6]))(ptr, riid, ppParent);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetParent(ref Guid riid, void** ppParent) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, void**, int>)(LpVtbl[6]))(ptr, (Guid*)priid, ppParent);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetParent<T>(out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppParent = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, void**, int>)(LpVtbl[6]))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppParent.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetParent<T>(ref Guid riid, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppParent = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, void**, int>)(LpVtbl[6]))(ptr, (Guid*)priid, (void**)ppParent.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int EnumOutputs(uint output, IDXGIOutput** ppOutput) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, uint, IDXGIOutput**, int>)(LpVtbl[7]))(ptr, output, ppOutput);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int EnumOutputs(uint output, ref IDXGIOutput* ppOutput) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIOutput** pppOutput = &ppOutput)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, uint, IDXGIOutput**, int>)(LpVtbl[7]))(ptr, output, (IDXGIOutput**)pppOutput);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int EnumOutputs(uint output, out ComPtr<IDXGIOutput> ppOutput) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppOutput = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, uint, IDXGIOutput**, int>)(LpVtbl[7]))(ptr, output, (IDXGIOutput**)ppOutput.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetDesc(DxgiAdapterDesc* pDesc) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, DxgiAdapterDesc*, int>)(LpVtbl[8]))(ptr, pDesc);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetDesc(ref DxgiAdapterDesc pDesc) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiAdapterDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, DxgiAdapterDesc*, int>)(LpVtbl[8]))(ptr, (DxgiAdapterDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CheckInterfaceSupport(Guid* interfaceName, long* pUMDVersion) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, long*, int>)(LpVtbl[9]))(ptr, interfaceName, pUMDVersion);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CheckInterfaceSupport(ref Guid interfaceName, long* pUMDVersion) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pinterfaceName = &interfaceName)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, long*, int>)(LpVtbl[9]))(ptr, (Guid*)pinterfaceName, pUMDVersion);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CheckInterfaceSupport(Guid* interfaceName, ref long pUMDVersion) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (long* ppUMDVersion = &pUMDVersion)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, long*, int>)(LpVtbl[9]))(ptr, interfaceName, (long*)ppUMDVersion);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CheckInterfaceSupport(ref Guid interfaceName, ref long pUMDVersion) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pinterfaceName = &interfaceName)
			{
				fixed (long* ppUMDVersion = &pUMDVersion)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, Guid*, long*, int>)(LpVtbl[9]))(ptr, (Guid*)pinterfaceName, (long*)ppUMDVersion);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetDesc1(DxgiAdapterDesc1* pDesc) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, DxgiAdapterDesc1*, int>)(LpVtbl[10]))(ptr, pDesc);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetDesc1(ref DxgiAdapterDesc1 pDesc) 
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiAdapterDesc1* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, DxgiAdapterDesc1*, int>)(LpVtbl[10]))(ptr, (DxgiAdapterDesc1*)ppDesc);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIAdapter (IDXGIAdapter1 value)
		{
			return Unsafe.As<IDXGIAdapter1, IDXGIAdapter>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIAdapter1 value)
		{
			return Unsafe.As<IDXGIAdapter1, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIAdapter1 value)
		{
			return Unsafe.As<IDXGIAdapter1, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiAdapterDesc1
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public char Description_0;
		public char Description_1;
		public char Description_2;
		public char Description_3;
		public char Description_4;
		public char Description_5;
		public char Description_6;
		public char Description_7;
		public char Description_8;
		public char Description_9;
		public char Description_10;
		public char Description_11;
		public char Description_12;
		public char Description_13;
		public char Description_14;
		public char Description_15;
		public char Description_16;
		public char Description_17;
		public char Description_18;
		public char Description_19;
		public char Description_20;
		public char Description_21;
		public char Description_22;
		public char Description_23;
		public char Description_24;
		public char Description_25;
		public char Description_26;
		public char Description_27;
		public char Description_28;
		public char Description_29;
		public char Description_30;
		public char Description_31;
		public char Description_32;
		public char Description_33;
		public char Description_34;
		public char Description_35;
		public char Description_36;
		public char Description_37;
		public char Description_38;
		public char Description_39;
		public char Description_40;
		public char Description_41;
		public char Description_42;
		public char Description_43;
		public char Description_44;
		public char Description_45;
		public char Description_46;
		public char Description_47;
		public char Description_48;
		public char Description_49;
		public char Description_50;
		public char Description_51;
		public char Description_52;
		public char Description_53;
		public char Description_54;
		public char Description_55;
		public char Description_56;
		public char Description_57;
		public char Description_58;
		public char Description_59;
		public char Description_60;
		public char Description_61;
		public char Description_62;
		public char Description_63;
		public char Description_64;
		public char Description_65;
		public char Description_66;
		public char Description_67;
		public char Description_68;
		public char Description_69;
		public char Description_70;
		public char Description_71;
		public char Description_72;
		public char Description_73;
		public char Description_74;
		public char Description_75;
		public char Description_76;
		public char Description_77;
		public char Description_78;
		public char Description_79;
		public char Description_80;
		public char Description_81;
		public char Description_82;
		public char Description_83;
		public char Description_84;
		public char Description_85;
		public char Description_86;
		public char Description_87;
		public char Description_88;
		public char Description_89;
		public char Description_90;
		public char Description_91;
		public char Description_92;
		public char Description_93;
		public char Description_94;
		public char Description_95;
		public char Description_96;
		public char Description_97;
		public char Description_98;
		public char Description_99;
		public char Description_100;
		public char Description_101;
		public char Description_102;
		public char Description_103;
		public char Description_104;
		public char Description_105;
		public char Description_106;
		public char Description_107;
		public char Description_108;
		public char Description_109;
		public char Description_110;
		public char Description_111;
		public char Description_112;
		public char Description_113;
		public char Description_114;
		public char Description_115;
		public char Description_116;
		public char Description_117;
		public char Description_118;
		public char Description_119;
		public char Description_120;
		public char Description_121;
		public char Description_122;
		public char Description_123;
		public char Description_124;
		public char Description_125;
		public char Description_126;
		public char Description_127;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint VendorId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DeviceId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint SubSysId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint Revision;

		/// <summary>
		/// To be documented.
		/// </summary>
		public nuint DedicatedVideoMemory;

		/// <summary>
		/// To be documented.
		/// </summary>
		public nuint DedicatedSystemMemory;

		/// <summary>
		/// To be documented.
		/// </summary>
		public nuint SharedSystemMemory;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Luid AdapterLuid;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint Flags;


		/// <summary>/// To be documented./// </summary>		public unsafe DxgiAdapterDesc1(char* description = default, uint vendorId = default, uint deviceId = default, uint subSysId = default, uint revision = default, nuint dedicatedVideoMemory = default, nuint dedicatedSystemMemory = default, nuint sharedSystemMemory = default, Luid adapterLuid = default, uint flags = default)
		{
			if (description != default)
			{
				Description_0 = description[0];
				Description_1 = description[1];
				Description_2 = description[2];
				Description_3 = description[3];
				Description_4 = description[4];
				Description_5 = description[5];
				Description_6 = description[6];
				Description_7 = description[7];
				Description_8 = description[8];
				Description_9 = description[9];
				Description_10 = description[10];
				Description_11 = description[11];
				Description_12 = description[12];
				Description_13 = description[13];
				Description_14 = description[14];
				Description_15 = description[15];
				Description_16 = description[16];
				Description_17 = description[17];
				Description_18 = description[18];
				Description_19 = description[19];
				Description_20 = description[20];
				Description_21 = description[21];
				Description_22 = description[22];
				Description_23 = description[23];
				Description_24 = description[24];
				Description_25 = description[25];
				Description_26 = description[26];
				Description_27 = description[27];
				Description_28 = description[28];
				Description_29 = description[29];
				Description_30 = description[30];
				Description_31 = description[31];
				Description_32 = description[32];
				Description_33 = description[33];
				Description_34 = description[34];
				Description_35 = description[35];
				Description_36 = description[36];
				Description_37 = description[37];
				Description_38 = description[38];
				Description_39 = description[39];
				Description_40 = description[40];
				Description_41 = description[41];
				Description_42 = description[42];
				Description_43 = description[43];
				Description_44 = description[44];
				Description_45 = description[45];
				Description_46 = description[46];
				Description_47 = description[47];
				Description_48 = description[48];
				Description_49 = description[49];
				Description_50 = description[50];
				Description_51 = description[51];
				Description_52 = description[52];
				Description_53 = description[53];
				Description_54 = description[54];
				Description_55 = description[55];
				Description_56 = description[56];
				Description_57 = description[57];
				Description_58 = description[58];
				Description_59 = description[59];
				Description_60 = description[60];
				Description_61 = description[61];
				Description_62 = description[62];
				Description_63 = description[63];
				Description_64 = description[64];
				Description_65 = description[65];
				Description_66 = description[66];
				Description_67 = description[67];
				Description_68 = description[68];
				Description_69 = description[69];
				Description_70 = description[70];
				Description_71 = description[71];
				Description_72 = description[72];
				Description_73 = description[73];
				Description_74 = description[74];
				Description_75 = description[75];
				Description_76 = description[76];
				Description_77 = description[77];
				Description_78 = description[78];
				Description_79 = description[79];
				Description_80 = description[80];
				Description_81 = description[81];
				Description_82 = description[82];
				Description_83 = description[83];
				Description_84 = description[84];
				Description_85 = description[85];
				Description_86 = description[86];
				Description_87 = description[87];
				Description_88 = description[88];
				Description_89 = description[89];
				Description_90 = description[90];
				Description_91 = description[91];
				Description_92 = description[92];
				Description_93 = description[93];
				Description_94 = description[94];
				Description_95 = description[95];
				Description_96 = description[96];
				Description_97 = description[97];
				Description_98 = description[98];
				Description_99 = description[99];
				Description_100 = description[100];
				Description_101 = description[101];
				Description_102 = description[102];
				Description_103 = description[103];
				Description_104 = description[104];
				Description_105 = description[105];
				Description_106 = description[106];
				Description_107 = description[107];
				Description_108 = description[108];
				Description_109 = description[109];
				Description_110 = description[110];
				Description_111 = description[111];
				Description_112 = description[112];
				Description_113 = description[113];
				Description_114 = description[114];
				Description_115 = description[115];
				Description_116 = description[116];
				Description_117 = description[117];
				Description_118 = description[118];
				Description_119 = description[119];
				Description_120 = description[120];
				Description_121 = description[121];
				Description_122 = description[122];
				Description_123 = description[123];
				Description_124 = description[124];
				Description_125 = description[125];
				Description_126 = description[126];
				Description_127 = description[127];
			}
			VendorId = vendorId;
			DeviceId = deviceId;
			SubSysId = subSysId;
			Revision = revision;
			DedicatedVideoMemory = dedicatedVideoMemory;
			DedicatedSystemMemory = dedicatedSystemMemory;
			SharedSystemMemory = sharedSystemMemory;
			AdapterLuid = adapterLuid;
			Flags = flags;
		}

		/// <summary>/// To be documented./// </summary>		public unsafe DxgiAdapterDesc1(Span<char> description = default, uint vendorId = default, uint deviceId = default, uint subSysId = default, uint revision = default, nuint dedicatedVideoMemory = default, nuint dedicatedSystemMemory = default, nuint sharedSystemMemory = default, Luid adapterLuid = default, uint flags = default)
		{
			if (description != default)
			{
				Description_0 = description[0];
				Description_1 = description[1];
				Description_2 = description[2];
				Description_3 = description[3];
				Description_4 = description[4];
				Description_5 = description[5];
				Description_6 = description[6];
				Description_7 = description[7];
				Description_8 = description[8];
				Description_9 = description[9];
				Description_10 = description[10];
				Description_11 = description[11];
				Description_12 = description[12];
				Description_13 = description[13];
				Description_14 = description[14];
				Description_15 = description[15];
				Description_16 = description[16];
				Description_17 = description[17];
				Description_18 = description[18];
				Description_19 = description[19];
				Description_20 = description[20];
				Description_21 = description[21];
				Description_22 = description[22];
				Description_23 = description[23];
				Description_24 = description[24];
				Description_25 = description[25];
				Description_26 = description[26];
				Description_27 = description[27];
				Description_28 = description[28];
				Description_29 = description[29];
				Description_30 = description[30];
				Description_31 = description[31];
				Description_32 = description[32];
				Description_33 = description[33];
				Description_34 = description[34];
				Description_35 = description[35];
				Description_36 = description[36];
				Description_37 = description[37];
				Description_38 = description[38];
				Description_39 = description[39];
				Description_40 = description[40];
				Description_41 = description[41];
				Description_42 = description[42];
				Description_43 = description[43];
				Description_44 = description[44];
				Description_45 = description[45];
				Description_46 = description[46];
				Description_47 = description[47];
				Description_48 = description[48];
				Description_49 = description[49];
				Description_50 = description[50];
				Description_51 = description[51];
				Description_52 = description[52];
				Description_53 = description[53];
				Description_54 = description[54];
				Description_55 = description[55];
				Description_56 = description[56];
				Description_57 = description[57];
				Description_58 = description[58];
				Description_59 = description[59];
				Description_60 = description[60];
				Description_61 = description[61];
				Description_62 = description[62];
				Description_63 = description[63];
				Description_64 = description[64];
				Description_65 = description[65];
				Description_66 = description[66];
				Description_67 = description[67];
				Description_68 = description[68];
				Description_69 = description[69];
				Description_70 = description[70];
				Description_71 = description[71];
				Description_72 = description[72];
				Description_73 = description[73];
				Description_74 = description[74];
				Description_75 = description[75];
				Description_76 = description[76];
				Description_77 = description[77];
				Description_78 = description[78];
				Description_79 = description[79];
				Description_80 = description[80];
				Description_81 = description[81];
				Description_82 = description[82];
				Description_83 = description[83];
				Description_84 = description[84];
				Description_85 = description[85];
				Description_86 = description[86];
				Description_87 = description[87];
				Description_88 = description[88];
				Description_89 = description[89];
				Description_90 = description[90];
				Description_91 = description[91];
				Description_92 = description[92];
				Description_93 = description[93];
				Description_94 = description[94];
				Description_95 = description[95];
				Description_96 = description[96];
				Description_97 = description[97];
				Description_98 = description[98];
				Description_99 = description[99];
				Description_100 = description[100];
				Description_101 = description[101];
				Description_102 = description[102];
				Description_103 = description[103];
				Description_104 = description[104];
				Description_105 = description[105];
				Description_106 = description[106];
				Description_107 = description[107];
				Description_108 = description[108];
				Description_109 = description[109];
				Description_110 = description[110];
				Description_111 = description[111];
				Description_112 = description[112];
				Description_113 = description[113];
				Description_114 = description[114];
				Description_115 = description[115];
				Description_116 = description[116];
				Description_117 = description[117];
				Description_118 = description[118];
				Description_119 = description[119];
				Description_120 = description[120];
				Description_121 = description[121];
				Description_122 = description[122];
				Description_123 = description[123];
				Description_124 = description[124];
				Description_125 = description[125];
				Description_126 = description[126];
				Description_127 = description[127];
			}
			VendorId = vendorId;
			DeviceId = deviceId;
			SubSysId = subSysId;
			Revision = revision;
			DedicatedVideoMemory = dedicatedVideoMemory;
			DedicatedSystemMemory = dedicatedSystemMemory;
			SharedSystemMemory = sharedSystemMemory;
			AdapterLuid = adapterLuid;
			Flags = flags;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[Guid("77db970f-6276-48ba-ba28-070143b4392c")]
	public partial struct IDXGIDevice1 : IComObject, IComObject<IDXGIDevice1>, IComObject<IDXGIDevice>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("77db970f-6276-48ba-ba28-070143b4392c");

		public unsafe IDXGIDevice1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface(Guid* riid, void** ppvObject) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, void**, int>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface(ref Guid riid, void** ppvObject) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface<T>(out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface<T>(ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe uint AddRef() 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe uint Release() 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateData(Guid* name, uint dataSize, void* pData) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, uint, void*, int>)(LpVtbl[3]))(ptr, name, dataSize, pData);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateData(ref Guid name, uint dataSize, void* pData) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, uint, void*, int>)(LpVtbl[3]))(ptr, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(Guid* name, IUnknown* pUnknown) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, name, pUnknown);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(ref Guid name, IUnknown* pUnknown) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(Guid* name, ref IUnknown pUnknown) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(Guid* name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, name, (IUnknown*)pUnknown.Handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(ref Guid name, ref IUnknown pUnknown) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(ref Guid name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, (Guid*)pname, (IUnknown*)pUnknown.Handle);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData(Guid* name, uint* pDataSize, void* pData) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, name, pDataSize, pData);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData(ref Guid name, uint* pDataSize, void* pData) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData(Guid* name, ref uint pDataSize, void* pData) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData(ref Guid name, ref uint pDataSize, void* pData) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData<T>(Guid* name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, name, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData<T>(ref Guid name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, (Guid*)pname, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData<T>(Guid* name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, name, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData<T>(ref Guid name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, (Guid*)pname, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetParent(Guid* riid, void** ppParent) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, void**, int>)(LpVtbl[6]))(ptr, riid, ppParent);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetParent(ref Guid riid, void** ppParent) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, void**, int>)(LpVtbl[6]))(ptr, (Guid*)priid, ppParent);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetParent<T>(out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppParent = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, void**, int>)(LpVtbl[6]))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppParent.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetParent<T>(ref Guid riid, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppParent = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, Guid*, void**, int>)(LpVtbl[6]))(ptr, (Guid*)priid, (void**)ppParent.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetAdapter(IDXGIAdapter** pAdapter) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, IDXGIAdapter**, int>)(LpVtbl[7]))(ptr, pAdapter);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetAdapter(ref IDXGIAdapter* pAdapter) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIAdapter** ppAdapter = &pAdapter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, IDXGIAdapter**, int>)(LpVtbl[7]))(ptr, (IDXGIAdapter**)ppAdapter);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetAdapter(out ComPtr<IDXGIAdapter> pAdapter) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			pAdapter = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, IDXGIAdapter**, int>)(LpVtbl[7]))(ptr, (IDXGIAdapter**)pAdapter.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(DxgiSurfaceDesc* pDesc, uint numSurfaces, uint usage, DxgiSharedResource* pSharedResource, IDXGISurface** ppSurface) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, pDesc, numSurfaces, usage, pSharedResource, ppSurface);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(ref DxgiSurfaceDesc pDesc, uint numSurfaces, uint usage, DxgiSharedResource* pSharedResource, IDXGISurface** ppSurface) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSurfaceDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, (DxgiSurfaceDesc*)ppDesc, numSurfaces, usage, pSharedResource, ppSurface);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(DxgiSurfaceDesc* pDesc, uint numSurfaces, uint usage, ref DxgiSharedResource pSharedResource, IDXGISurface** ppSurface) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSharedResource* ppSharedResource = &pSharedResource)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, pDesc, numSurfaces, usage, (DxgiSharedResource*)ppSharedResource, ppSurface);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(ref DxgiSurfaceDesc pDesc, uint numSurfaces, uint usage, ref DxgiSharedResource pSharedResource, IDXGISurface** ppSurface) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSurfaceDesc* ppDesc = &pDesc)
			{
				fixed (DxgiSharedResource* ppSharedResource = &pSharedResource)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, (DxgiSurfaceDesc*)ppDesc, numSurfaces, usage, (DxgiSharedResource*)ppSharedResource, ppSurface);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(DxgiSurfaceDesc* pDesc, uint numSurfaces, uint usage, DxgiSharedResource* pSharedResource, ref IDXGISurface* ppSurface) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGISurface** pppSurface = &ppSurface)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, pDesc, numSurfaces, usage, pSharedResource, (IDXGISurface**)pppSurface);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(DxgiSurfaceDesc* pDesc, uint numSurfaces, uint usage, DxgiSharedResource* pSharedResource, out ComPtr<IDXGISurface> ppSurface) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppSurface = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, pDesc, numSurfaces, usage, pSharedResource, (IDXGISurface**)ppSurface.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(ref DxgiSurfaceDesc pDesc, uint numSurfaces, uint usage, DxgiSharedResource* pSharedResource, ref IDXGISurface* ppSurface) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSurfaceDesc* ppDesc = &pDesc)
			{
				fixed (IDXGISurface** pppSurface = &ppSurface)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, (DxgiSurfaceDesc*)ppDesc, numSurfaces, usage, pSharedResource, (IDXGISurface**)pppSurface);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(ref DxgiSurfaceDesc pDesc, uint numSurfaces, uint usage, DxgiSharedResource* pSharedResource, out ComPtr<IDXGISurface> ppSurface) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSurfaceDesc* ppDesc = &pDesc)
			{
				ppSurface = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, (DxgiSurfaceDesc*)ppDesc, numSurfaces, usage, pSharedResource, (IDXGISurface**)ppSurface.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(DxgiSurfaceDesc* pDesc, uint numSurfaces, uint usage, ref DxgiSharedResource pSharedResource, ref IDXGISurface* ppSurface) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSharedResource* ppSharedResource = &pSharedResource)
			{
				fixed (IDXGISurface** pppSurface = &ppSurface)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, pDesc, numSurfaces, usage, (DxgiSharedResource*)ppSharedResource, (IDXGISurface**)pppSurface);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(DxgiSurfaceDesc* pDesc, uint numSurfaces, uint usage, ref DxgiSharedResource pSharedResource, out ComPtr<IDXGISurface> ppSurface) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSharedResource* ppSharedResource = &pSharedResource)
			{
				ppSurface = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, pDesc, numSurfaces, usage, (DxgiSharedResource*)ppSharedResource, (IDXGISurface**)ppSurface.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(ref DxgiSurfaceDesc pDesc, uint numSurfaces, uint usage, ref DxgiSharedResource pSharedResource, ref IDXGISurface* ppSurface) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSurfaceDesc* ppDesc = &pDesc)
			{
				fixed (DxgiSharedResource* ppSharedResource = &pSharedResource)
				{
					fixed (IDXGISurface** pppSurface = &ppSurface)
					{
						int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, (DxgiSurfaceDesc*)ppDesc, numSurfaces, usage, (DxgiSharedResource*)ppSharedResource, (IDXGISurface**)pppSurface);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int CreateSurface(ref DxgiSurfaceDesc pDesc, uint numSurfaces, uint usage, ref DxgiSharedResource pSharedResource, out ComPtr<IDXGISurface> ppSurface) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSurfaceDesc* ppDesc = &pDesc)
			{
				fixed (DxgiSharedResource* ppSharedResource = &pSharedResource)
				{
					ppSurface = default;
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, int>)(LpVtbl[8]))(ptr, (DxgiSurfaceDesc*)ppDesc, numSurfaces, usage, (DxgiSharedResource*)ppSharedResource, (IDXGISurface**)ppSurface.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryResourceResidency(IUnknown** ppResources, DxgiResidency* pResidencyStatus, uint numResources) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, IUnknown**, DxgiResidency*, uint, int>)(LpVtbl[9]))(ptr, ppResources, pResidencyStatus, numResources);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryResourceResidency(ref IUnknown* ppResources, DxgiResidency* pResidencyStatus, uint numResources) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown** pppResources = &ppResources)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, IUnknown**, DxgiResidency*, uint, int>)(LpVtbl[9]))(ptr, (IUnknown**)pppResources, pResidencyStatus, numResources);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryResourceResidency(ComPtr<IUnknown> ppResources, DxgiResidency* pResidencyStatus, uint numResources) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, IUnknown**, DxgiResidency*, uint, int>)(LpVtbl[9]))(ptr, (IUnknown**)ppResources.Handle, pResidencyStatus, numResources);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryResourceResidency(IUnknown** ppResources, ref DxgiResidency pResidencyStatus, uint numResources) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiResidency* ppResidencyStatus = &pResidencyStatus)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, IUnknown**, DxgiResidency*, uint, int>)(LpVtbl[9]))(ptr, ppResources, (DxgiResidency*)ppResidencyStatus, numResources);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryResourceResidency(ref IUnknown* ppResources, ref DxgiResidency pResidencyStatus, uint numResources) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown** pppResources = &ppResources)
			{
				fixed (DxgiResidency* ppResidencyStatus = &pResidencyStatus)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, IUnknown**, DxgiResidency*, uint, int>)(LpVtbl[9]))(ptr, (IUnknown**)pppResources, (DxgiResidency*)ppResidencyStatus, numResources);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryResourceResidency(ComPtr<IUnknown> ppResources, ref DxgiResidency pResidencyStatus, uint numResources) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiResidency* ppResidencyStatus = &pResidencyStatus)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, IUnknown**, DxgiResidency*, uint, int>)(LpVtbl[9]))(ptr, (IUnknown**)ppResources.Handle, (DxgiResidency*)ppResidencyStatus, numResources);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetGPUThreadPriority(int priority) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, int, int>)(LpVtbl[10]))(ptr, priority);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetGPUThreadPriority(int* pPriority) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, int*, int>)(LpVtbl[11]))(ptr, pPriority);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetGPUThreadPriority(ref int pPriority) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppPriority = &pPriority)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, int*, int>)(LpVtbl[11]))(ptr, (int*)ppPriority);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetMaximumFrameLatency(uint maxLatency) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, uint, int>)(LpVtbl[12]))(ptr, maxLatency);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetMaximumFrameLatency(uint* pMaxLatency) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, uint*, int>)(LpVtbl[13]))(ptr, pMaxLatency);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetMaximumFrameLatency(ref uint pMaxLatency) 
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppMaxLatency = &pMaxLatency)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, uint*, int>)(LpVtbl[13]))(ptr, (uint*)ppMaxLatency);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIDevice (IDXGIDevice1 value)
		{
			return Unsafe.As<IDXGIDevice1, IDXGIDevice>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIDevice1 value)
		{
			return Unsafe.As<IDXGIDevice1, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIDevice1 value)
		{
			return Unsafe.As<IDXGIDevice1, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3Dcolorvalue
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public float R;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float G;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float B;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float A;


		/// <summary>/// To be documented./// </summary>		public unsafe D3Dcolorvalue(float r = default, float g = default, float b = default, float a = default)
		{
			R = r;
			G = g;
			B = b;
			A = a;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiJpegDcHuffmanTable
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte CodeCounts_0;
		public byte CodeCounts_1;
		public byte CodeCounts_2;
		public byte CodeCounts_3;
		public byte CodeCounts_4;
		public byte CodeCounts_5;
		public byte CodeCounts_6;
		public byte CodeCounts_7;
		public byte CodeCounts_8;
		public byte CodeCounts_9;
		public byte CodeCounts_10;
		public byte CodeCounts_11;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte CodeValues_0;
		public byte CodeValues_1;
		public byte CodeValues_2;
		public byte CodeValues_3;
		public byte CodeValues_4;
		public byte CodeValues_5;
		public byte CodeValues_6;
		public byte CodeValues_7;
		public byte CodeValues_8;
		public byte CodeValues_9;
		public byte CodeValues_10;
		public byte CodeValues_11;


		/// <summary>/// To be documented./// </summary>		public unsafe DxgiJpegDcHuffmanTable(byte* codeCounts = default, byte* codeValues = default)
		{
			if (codeCounts != default)
			{
				CodeCounts_0 = codeCounts[0];
				CodeCounts_1 = codeCounts[1];
				CodeCounts_2 = codeCounts[2];
				CodeCounts_3 = codeCounts[3];
				CodeCounts_4 = codeCounts[4];
				CodeCounts_5 = codeCounts[5];
				CodeCounts_6 = codeCounts[6];
				CodeCounts_7 = codeCounts[7];
				CodeCounts_8 = codeCounts[8];
				CodeCounts_9 = codeCounts[9];
				CodeCounts_10 = codeCounts[10];
				CodeCounts_11 = codeCounts[11];
			}
			if (codeValues != default)
			{
				CodeValues_0 = codeValues[0];
				CodeValues_1 = codeValues[1];
				CodeValues_2 = codeValues[2];
				CodeValues_3 = codeValues[3];
				CodeValues_4 = codeValues[4];
				CodeValues_5 = codeValues[5];
				CodeValues_6 = codeValues[6];
				CodeValues_7 = codeValues[7];
				CodeValues_8 = codeValues[8];
				CodeValues_9 = codeValues[9];
				CodeValues_10 = codeValues[10];
				CodeValues_11 = codeValues[11];
			}
		}

		/// <summary>/// To be documented./// </summary>		public unsafe DxgiJpegDcHuffmanTable(Span<byte> codeCounts = default, Span<byte> codeValues = default)
		{
			if (codeCounts != default)
			{
				CodeCounts_0 = codeCounts[0];
				CodeCounts_1 = codeCounts[1];
				CodeCounts_2 = codeCounts[2];
				CodeCounts_3 = codeCounts[3];
				CodeCounts_4 = codeCounts[4];
				CodeCounts_5 = codeCounts[5];
				CodeCounts_6 = codeCounts[6];
				CodeCounts_7 = codeCounts[7];
				CodeCounts_8 = codeCounts[8];
				CodeCounts_9 = codeCounts[9];
				CodeCounts_10 = codeCounts[10];
				CodeCounts_11 = codeCounts[11];
			}
			if (codeValues != default)
			{
				CodeValues_0 = codeValues[0];
				CodeValues_1 = codeValues[1];
				CodeValues_2 = codeValues[2];
				CodeValues_3 = codeValues[3];
				CodeValues_4 = codeValues[4];
				CodeValues_5 = codeValues[5];
				CodeValues_6 = codeValues[6];
				CodeValues_7 = codeValues[7];
				CodeValues_8 = codeValues[8];
				CodeValues_9 = codeValues[9];
				CodeValues_10 = codeValues[10];
				CodeValues_11 = codeValues[11];
			}
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiJpegAcHuffmanTable
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte CodeCounts_0;
		public byte CodeCounts_1;
		public byte CodeCounts_2;
		public byte CodeCounts_3;
		public byte CodeCounts_4;
		public byte CodeCounts_5;
		public byte CodeCounts_6;
		public byte CodeCounts_7;
		public byte CodeCounts_8;
		public byte CodeCounts_9;
		public byte CodeCounts_10;
		public byte CodeCounts_11;
		public byte CodeCounts_12;
		public byte CodeCounts_13;
		public byte CodeCounts_14;
		public byte CodeCounts_15;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte CodeValues_0;
		public byte CodeValues_1;
		public byte CodeValues_2;
		public byte CodeValues_3;
		public byte CodeValues_4;
		public byte CodeValues_5;
		public byte CodeValues_6;
		public byte CodeValues_7;
		public byte CodeValues_8;
		public byte CodeValues_9;
		public byte CodeValues_10;
		public byte CodeValues_11;
		public byte CodeValues_12;
		public byte CodeValues_13;
		public byte CodeValues_14;
		public byte CodeValues_15;
		public byte CodeValues_16;
		public byte CodeValues_17;
		public byte CodeValues_18;
		public byte CodeValues_19;
		public byte CodeValues_20;
		public byte CodeValues_21;
		public byte CodeValues_22;
		public byte CodeValues_23;
		public byte CodeValues_24;
		public byte CodeValues_25;
		public byte CodeValues_26;
		public byte CodeValues_27;
		public byte CodeValues_28;
		public byte CodeValues_29;
		public byte CodeValues_30;
		public byte CodeValues_31;
		public byte CodeValues_32;
		public byte CodeValues_33;
		public byte CodeValues_34;
		public byte CodeValues_35;
		public byte CodeValues_36;
		public byte CodeValues_37;
		public byte CodeValues_38;
		public byte CodeValues_39;
		public byte CodeValues_40;
		public byte CodeValues_41;
		public byte CodeValues_42;
		public byte CodeValues_43;
		public byte CodeValues_44;
		public byte CodeValues_45;
		public byte CodeValues_46;
		public byte CodeValues_47;
		public byte CodeValues_48;
		public byte CodeValues_49;
		public byte CodeValues_50;
		public byte CodeValues_51;
		public byte CodeValues_52;
		public byte CodeValues_53;
		public byte CodeValues_54;
		public byte CodeValues_55;
		public byte CodeValues_56;
		public byte CodeValues_57;
		public byte CodeValues_58;
		public byte CodeValues_59;
		public byte CodeValues_60;
		public byte CodeValues_61;
		public byte CodeValues_62;
		public byte CodeValues_63;
		public byte CodeValues_64;
		public byte CodeValues_65;
		public byte CodeValues_66;
		public byte CodeValues_67;
		public byte CodeValues_68;
		public byte CodeValues_69;
		public byte CodeValues_70;
		public byte CodeValues_71;
		public byte CodeValues_72;
		public byte CodeValues_73;
		public byte CodeValues_74;
		public byte CodeValues_75;
		public byte CodeValues_76;
		public byte CodeValues_77;
		public byte CodeValues_78;
		public byte CodeValues_79;
		public byte CodeValues_80;
		public byte CodeValues_81;
		public byte CodeValues_82;
		public byte CodeValues_83;
		public byte CodeValues_84;
		public byte CodeValues_85;
		public byte CodeValues_86;
		public byte CodeValues_87;
		public byte CodeValues_88;
		public byte CodeValues_89;
		public byte CodeValues_90;
		public byte CodeValues_91;
		public byte CodeValues_92;
		public byte CodeValues_93;
		public byte CodeValues_94;
		public byte CodeValues_95;
		public byte CodeValues_96;
		public byte CodeValues_97;
		public byte CodeValues_98;
		public byte CodeValues_99;
		public byte CodeValues_100;
		public byte CodeValues_101;
		public byte CodeValues_102;
		public byte CodeValues_103;
		public byte CodeValues_104;
		public byte CodeValues_105;
		public byte CodeValues_106;
		public byte CodeValues_107;
		public byte CodeValues_108;
		public byte CodeValues_109;
		public byte CodeValues_110;
		public byte CodeValues_111;
		public byte CodeValues_112;
		public byte CodeValues_113;
		public byte CodeValues_114;
		public byte CodeValues_115;
		public byte CodeValues_116;
		public byte CodeValues_117;
		public byte CodeValues_118;
		public byte CodeValues_119;
		public byte CodeValues_120;
		public byte CodeValues_121;
		public byte CodeValues_122;
		public byte CodeValues_123;
		public byte CodeValues_124;
		public byte CodeValues_125;
		public byte CodeValues_126;
		public byte CodeValues_127;
		public byte CodeValues_128;
		public byte CodeValues_129;
		public byte CodeValues_130;
		public byte CodeValues_131;
		public byte CodeValues_132;
		public byte CodeValues_133;
		public byte CodeValues_134;
		public byte CodeValues_135;
		public byte CodeValues_136;
		public byte CodeValues_137;
		public byte CodeValues_138;
		public byte CodeValues_139;
		public byte CodeValues_140;
		public byte CodeValues_141;
		public byte CodeValues_142;
		public byte CodeValues_143;
		public byte CodeValues_144;
		public byte CodeValues_145;
		public byte CodeValues_146;
		public byte CodeValues_147;
		public byte CodeValues_148;
		public byte CodeValues_149;
		public byte CodeValues_150;
		public byte CodeValues_151;
		public byte CodeValues_152;
		public byte CodeValues_153;
		public byte CodeValues_154;
		public byte CodeValues_155;
		public byte CodeValues_156;
		public byte CodeValues_157;
		public byte CodeValues_158;
		public byte CodeValues_159;
		public byte CodeValues_160;
		public byte CodeValues_161;


		/// <summary>/// To be documented./// </summary>		public unsafe DxgiJpegAcHuffmanTable(byte* codeCounts = default, byte* codeValues = default)
		{
			if (codeCounts != default)
			{
				CodeCounts_0 = codeCounts[0];
				CodeCounts_1 = codeCounts[1];
				CodeCounts_2 = codeCounts[2];
				CodeCounts_3 = codeCounts[3];
				CodeCounts_4 = codeCounts[4];
				CodeCounts_5 = codeCounts[5];
				CodeCounts_6 = codeCounts[6];
				CodeCounts_7 = codeCounts[7];
				CodeCounts_8 = codeCounts[8];
				CodeCounts_9 = codeCounts[9];
				CodeCounts_10 = codeCounts[10];
				CodeCounts_11 = codeCounts[11];
				CodeCounts_12 = codeCounts[12];
				CodeCounts_13 = codeCounts[13];
				CodeCounts_14 = codeCounts[14];
				CodeCounts_15 = codeCounts[15];
			}
			if (codeValues != default)
			{
				CodeValues_0 = codeValues[0];
				CodeValues_1 = codeValues[1];
				CodeValues_2 = codeValues[2];
				CodeValues_3 = codeValues[3];
				CodeValues_4 = codeValues[4];
				CodeValues_5 = codeValues[5];
				CodeValues_6 = codeValues[6];
				CodeValues_7 = codeValues[7];
				CodeValues_8 = codeValues[8];
				CodeValues_9 = codeValues[9];
				CodeValues_10 = codeValues[10];
				CodeValues_11 = codeValues[11];
				CodeValues_12 = codeValues[12];
				CodeValues_13 = codeValues[13];
				CodeValues_14 = codeValues[14];
				CodeValues_15 = codeValues[15];
				CodeValues_16 = codeValues[16];
				CodeValues_17 = codeValues[17];
				CodeValues_18 = codeValues[18];
				CodeValues_19 = codeValues[19];
				CodeValues_20 = codeValues[20];
				CodeValues_21 = codeValues[21];
				CodeValues_22 = codeValues[22];
				CodeValues_23 = codeValues[23];
				CodeValues_24 = codeValues[24];
				CodeValues_25 = codeValues[25];
				CodeValues_26 = codeValues[26];
				CodeValues_27 = codeValues[27];
				CodeValues_28 = codeValues[28];
				CodeValues_29 = codeValues[29];
				CodeValues_30 = codeValues[30];
				CodeValues_31 = codeValues[31];
				CodeValues_32 = codeValues[32];
				CodeValues_33 = codeValues[33];
				CodeValues_34 = codeValues[34];
				CodeValues_35 = codeValues[35];
				CodeValues_36 = codeValues[36];
				CodeValues_37 = codeValues[37];
				CodeValues_38 = codeValues[38];
				CodeValues_39 = codeValues[39];
				CodeValues_40 = codeValues[40];
				CodeValues_41 = codeValues[41];
				CodeValues_42 = codeValues[42];
				CodeValues_43 = codeValues[43];
				CodeValues_44 = codeValues[44];
				CodeValues_45 = codeValues[45];
				CodeValues_46 = codeValues[46];
				CodeValues_47 = codeValues[47];
				CodeValues_48 = codeValues[48];
				CodeValues_49 = codeValues[49];
				CodeValues_50 = codeValues[50];
				CodeValues_51 = codeValues[51];
				CodeValues_52 = codeValues[52];
				CodeValues_53 = codeValues[53];
				CodeValues_54 = codeValues[54];
				CodeValues_55 = codeValues[55];
				CodeValues_56 = codeValues[56];
				CodeValues_57 = codeValues[57];
				CodeValues_58 = codeValues[58];
				CodeValues_59 = codeValues[59];
				CodeValues_60 = codeValues[60];
				CodeValues_61 = codeValues[61];
				CodeValues_62 = codeValues[62];
				CodeValues_63 = codeValues[63];
				CodeValues_64 = codeValues[64];
				CodeValues_65 = codeValues[65];
				CodeValues_66 = codeValues[66];
				CodeValues_67 = codeValues[67];
				CodeValues_68 = codeValues[68];
				CodeValues_69 = codeValues[69];
				CodeValues_70 = codeValues[70];
				CodeValues_71 = codeValues[71];
				CodeValues_72 = codeValues[72];
				CodeValues_73 = codeValues[73];
				CodeValues_74 = codeValues[74];
				CodeValues_75 = codeValues[75];
				CodeValues_76 = codeValues[76];
				CodeValues_77 = codeValues[77];
				CodeValues_78 = codeValues[78];
				CodeValues_79 = codeValues[79];
				CodeValues_80 = codeValues[80];
				CodeValues_81 = codeValues[81];
				CodeValues_82 = codeValues[82];
				CodeValues_83 = codeValues[83];
				CodeValues_84 = codeValues[84];
				CodeValues_85 = codeValues[85];
				CodeValues_86 = codeValues[86];
				CodeValues_87 = codeValues[87];
				CodeValues_88 = codeValues[88];
				CodeValues_89 = codeValues[89];
				CodeValues_90 = codeValues[90];
				CodeValues_91 = codeValues[91];
				CodeValues_92 = codeValues[92];
				CodeValues_93 = codeValues[93];
				CodeValues_94 = codeValues[94];
				CodeValues_95 = codeValues[95];
				CodeValues_96 = codeValues[96];
				CodeValues_97 = codeValues[97];
				CodeValues_98 = codeValues[98];
				CodeValues_99 = codeValues[99];
				CodeValues_100 = codeValues[100];
				CodeValues_101 = codeValues[101];
				CodeValues_102 = codeValues[102];
				CodeValues_103 = codeValues[103];
				CodeValues_104 = codeValues[104];
				CodeValues_105 = codeValues[105];
				CodeValues_106 = codeValues[106];
				CodeValues_107 = codeValues[107];
				CodeValues_108 = codeValues[108];
				CodeValues_109 = codeValues[109];
				CodeValues_110 = codeValues[110];
				CodeValues_111 = codeValues[111];
				CodeValues_112 = codeValues[112];
				CodeValues_113 = codeValues[113];
				CodeValues_114 = codeValues[114];
				CodeValues_115 = codeValues[115];
				CodeValues_116 = codeValues[116];
				CodeValues_117 = codeValues[117];
				CodeValues_118 = codeValues[118];
				CodeValues_119 = codeValues[119];
				CodeValues_120 = codeValues[120];
				CodeValues_121 = codeValues[121];
				CodeValues_122 = codeValues[122];
				CodeValues_123 = codeValues[123];
				CodeValues_124 = codeValues[124];
				CodeValues_125 = codeValues[125];
				CodeValues_126 = codeValues[126];
				CodeValues_127 = codeValues[127];
				CodeValues_128 = codeValues[128];
				CodeValues_129 = codeValues[129];
				CodeValues_130 = codeValues[130];
				CodeValues_131 = codeValues[131];
				CodeValues_132 = codeValues[132];
				CodeValues_133 = codeValues[133];
				CodeValues_134 = codeValues[134];
				CodeValues_135 = codeValues[135];
				CodeValues_136 = codeValues[136];
				CodeValues_137 = codeValues[137];
				CodeValues_138 = codeValues[138];
				CodeValues_139 = codeValues[139];
				CodeValues_140 = codeValues[140];
				CodeValues_141 = codeValues[141];
				CodeValues_142 = codeValues[142];
				CodeValues_143 = codeValues[143];
				CodeValues_144 = codeValues[144];
				CodeValues_145 = codeValues[145];
				CodeValues_146 = codeValues[146];
				CodeValues_147 = codeValues[147];
				CodeValues_148 = codeValues[148];
				CodeValues_149 = codeValues[149];
				CodeValues_150 = codeValues[150];
				CodeValues_151 = codeValues[151];
				CodeValues_152 = codeValues[152];
				CodeValues_153 = codeValues[153];
				CodeValues_154 = codeValues[154];
				CodeValues_155 = codeValues[155];
				CodeValues_156 = codeValues[156];
				CodeValues_157 = codeValues[157];
				CodeValues_158 = codeValues[158];
				CodeValues_159 = codeValues[159];
				CodeValues_160 = codeValues[160];
				CodeValues_161 = codeValues[161];
			}
		}

		/// <summary>/// To be documented./// </summary>		public unsafe DxgiJpegAcHuffmanTable(Span<byte> codeCounts = default, Span<byte> codeValues = default)
		{
			if (codeCounts != default)
			{
				CodeCounts_0 = codeCounts[0];
				CodeCounts_1 = codeCounts[1];
				CodeCounts_2 = codeCounts[2];
				CodeCounts_3 = codeCounts[3];
				CodeCounts_4 = codeCounts[4];
				CodeCounts_5 = codeCounts[5];
				CodeCounts_6 = codeCounts[6];
				CodeCounts_7 = codeCounts[7];
				CodeCounts_8 = codeCounts[8];
				CodeCounts_9 = codeCounts[9];
				CodeCounts_10 = codeCounts[10];
				CodeCounts_11 = codeCounts[11];
				CodeCounts_12 = codeCounts[12];
				CodeCounts_13 = codeCounts[13];
				CodeCounts_14 = codeCounts[14];
				CodeCounts_15 = codeCounts[15];
			}
			if (codeValues != default)
			{
				CodeValues_0 = codeValues[0];
				CodeValues_1 = codeValues[1];
				CodeValues_2 = codeValues[2];
				CodeValues_3 = codeValues[3];
				CodeValues_4 = codeValues[4];
				CodeValues_5 = codeValues[5];
				CodeValues_6 = codeValues[6];
				CodeValues_7 = codeValues[7];
				CodeValues_8 = codeValues[8];
				CodeValues_9 = codeValues[9];
				CodeValues_10 = codeValues[10];
				CodeValues_11 = codeValues[11];
				CodeValues_12 = codeValues[12];
				CodeValues_13 = codeValues[13];
				CodeValues_14 = codeValues[14];
				CodeValues_15 = codeValues[15];
				CodeValues_16 = codeValues[16];
				CodeValues_17 = codeValues[17];
				CodeValues_18 = codeValues[18];
				CodeValues_19 = codeValues[19];
				CodeValues_20 = codeValues[20];
				CodeValues_21 = codeValues[21];
				CodeValues_22 = codeValues[22];
				CodeValues_23 = codeValues[23];
				CodeValues_24 = codeValues[24];
				CodeValues_25 = codeValues[25];
				CodeValues_26 = codeValues[26];
				CodeValues_27 = codeValues[27];
				CodeValues_28 = codeValues[28];
				CodeValues_29 = codeValues[29];
				CodeValues_30 = codeValues[30];
				CodeValues_31 = codeValues[31];
				CodeValues_32 = codeValues[32];
				CodeValues_33 = codeValues[33];
				CodeValues_34 = codeValues[34];
				CodeValues_35 = codeValues[35];
				CodeValues_36 = codeValues[36];
				CodeValues_37 = codeValues[37];
				CodeValues_38 = codeValues[38];
				CodeValues_39 = codeValues[39];
				CodeValues_40 = codeValues[40];
				CodeValues_41 = codeValues[41];
				CodeValues_42 = codeValues[42];
				CodeValues_43 = codeValues[43];
				CodeValues_44 = codeValues[44];
				CodeValues_45 = codeValues[45];
				CodeValues_46 = codeValues[46];
				CodeValues_47 = codeValues[47];
				CodeValues_48 = codeValues[48];
				CodeValues_49 = codeValues[49];
				CodeValues_50 = codeValues[50];
				CodeValues_51 = codeValues[51];
				CodeValues_52 = codeValues[52];
				CodeValues_53 = codeValues[53];
				CodeValues_54 = codeValues[54];
				CodeValues_55 = codeValues[55];
				CodeValues_56 = codeValues[56];
				CodeValues_57 = codeValues[57];
				CodeValues_58 = codeValues[58];
				CodeValues_59 = codeValues[59];
				CodeValues_60 = codeValues[60];
				CodeValues_61 = codeValues[61];
				CodeValues_62 = codeValues[62];
				CodeValues_63 = codeValues[63];
				CodeValues_64 = codeValues[64];
				CodeValues_65 = codeValues[65];
				CodeValues_66 = codeValues[66];
				CodeValues_67 = codeValues[67];
				CodeValues_68 = codeValues[68];
				CodeValues_69 = codeValues[69];
				CodeValues_70 = codeValues[70];
				CodeValues_71 = codeValues[71];
				CodeValues_72 = codeValues[72];
				CodeValues_73 = codeValues[73];
				CodeValues_74 = codeValues[74];
				CodeValues_75 = codeValues[75];
				CodeValues_76 = codeValues[76];
				CodeValues_77 = codeValues[77];
				CodeValues_78 = codeValues[78];
				CodeValues_79 = codeValues[79];
				CodeValues_80 = codeValues[80];
				CodeValues_81 = codeValues[81];
				CodeValues_82 = codeValues[82];
				CodeValues_83 = codeValues[83];
				CodeValues_84 = codeValues[84];
				CodeValues_85 = codeValues[85];
				CodeValues_86 = codeValues[86];
				CodeValues_87 = codeValues[87];
				CodeValues_88 = codeValues[88];
				CodeValues_89 = codeValues[89];
				CodeValues_90 = codeValues[90];
				CodeValues_91 = codeValues[91];
				CodeValues_92 = codeValues[92];
				CodeValues_93 = codeValues[93];
				CodeValues_94 = codeValues[94];
				CodeValues_95 = codeValues[95];
				CodeValues_96 = codeValues[96];
				CodeValues_97 = codeValues[97];
				CodeValues_98 = codeValues[98];
				CodeValues_99 = codeValues[99];
				CodeValues_100 = codeValues[100];
				CodeValues_101 = codeValues[101];
				CodeValues_102 = codeValues[102];
				CodeValues_103 = codeValues[103];
				CodeValues_104 = codeValues[104];
				CodeValues_105 = codeValues[105];
				CodeValues_106 = codeValues[106];
				CodeValues_107 = codeValues[107];
				CodeValues_108 = codeValues[108];
				CodeValues_109 = codeValues[109];
				CodeValues_110 = codeValues[110];
				CodeValues_111 = codeValues[111];
				CodeValues_112 = codeValues[112];
				CodeValues_113 = codeValues[113];
				CodeValues_114 = codeValues[114];
				CodeValues_115 = codeValues[115];
				CodeValues_116 = codeValues[116];
				CodeValues_117 = codeValues[117];
				CodeValues_118 = codeValues[118];
				CodeValues_119 = codeValues[119];
				CodeValues_120 = codeValues[120];
				CodeValues_121 = codeValues[121];
				CodeValues_122 = codeValues[122];
				CodeValues_123 = codeValues[123];
				CodeValues_124 = codeValues[124];
				CodeValues_125 = codeValues[125];
				CodeValues_126 = codeValues[126];
				CodeValues_127 = codeValues[127];
				CodeValues_128 = codeValues[128];
				CodeValues_129 = codeValues[129];
				CodeValues_130 = codeValues[130];
				CodeValues_131 = codeValues[131];
				CodeValues_132 = codeValues[132];
				CodeValues_133 = codeValues[133];
				CodeValues_134 = codeValues[134];
				CodeValues_135 = codeValues[135];
				CodeValues_136 = codeValues[136];
				CodeValues_137 = codeValues[137];
				CodeValues_138 = codeValues[138];
				CodeValues_139 = codeValues[139];
				CodeValues_140 = codeValues[140];
				CodeValues_141 = codeValues[141];
				CodeValues_142 = codeValues[142];
				CodeValues_143 = codeValues[143];
				CodeValues_144 = codeValues[144];
				CodeValues_145 = codeValues[145];
				CodeValues_146 = codeValues[146];
				CodeValues_147 = codeValues[147];
				CodeValues_148 = codeValues[148];
				CodeValues_149 = codeValues[149];
				CodeValues_150 = codeValues[150];
				CodeValues_151 = codeValues[151];
				CodeValues_152 = codeValues[152];
				CodeValues_153 = codeValues[153];
				CodeValues_154 = codeValues[154];
				CodeValues_155 = codeValues[155];
				CodeValues_156 = codeValues[156];
				CodeValues_157 = codeValues[157];
				CodeValues_158 = codeValues[158];
				CodeValues_159 = codeValues[159];
				CodeValues_160 = codeValues[160];
				CodeValues_161 = codeValues[161];
			}
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiJpegQuantizationTable
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte Elements_0;
		public byte Elements_1;
		public byte Elements_2;
		public byte Elements_3;
		public byte Elements_4;
		public byte Elements_5;
		public byte Elements_6;
		public byte Elements_7;
		public byte Elements_8;
		public byte Elements_9;
		public byte Elements_10;
		public byte Elements_11;
		public byte Elements_12;
		public byte Elements_13;
		public byte Elements_14;
		public byte Elements_15;
		public byte Elements_16;
		public byte Elements_17;
		public byte Elements_18;
		public byte Elements_19;
		public byte Elements_20;
		public byte Elements_21;
		public byte Elements_22;
		public byte Elements_23;
		public byte Elements_24;
		public byte Elements_25;
		public byte Elements_26;
		public byte Elements_27;
		public byte Elements_28;
		public byte Elements_29;
		public byte Elements_30;
		public byte Elements_31;
		public byte Elements_32;
		public byte Elements_33;
		public byte Elements_34;
		public byte Elements_35;
		public byte Elements_36;
		public byte Elements_37;
		public byte Elements_38;
		public byte Elements_39;
		public byte Elements_40;
		public byte Elements_41;
		public byte Elements_42;
		public byte Elements_43;
		public byte Elements_44;
		public byte Elements_45;
		public byte Elements_46;
		public byte Elements_47;
		public byte Elements_48;
		public byte Elements_49;
		public byte Elements_50;
		public byte Elements_51;
		public byte Elements_52;
		public byte Elements_53;
		public byte Elements_54;
		public byte Elements_55;
		public byte Elements_56;
		public byte Elements_57;
		public byte Elements_58;
		public byte Elements_59;
		public byte Elements_60;
		public byte Elements_61;
		public byte Elements_62;
		public byte Elements_63;


		/// <summary>/// To be documented./// </summary>		public unsafe DxgiJpegQuantizationTable(byte* elements = default)
		{
			if (elements != default)
			{
				Elements_0 = elements[0];
				Elements_1 = elements[1];
				Elements_2 = elements[2];
				Elements_3 = elements[3];
				Elements_4 = elements[4];
				Elements_5 = elements[5];
				Elements_6 = elements[6];
				Elements_7 = elements[7];
				Elements_8 = elements[8];
				Elements_9 = elements[9];
				Elements_10 = elements[10];
				Elements_11 = elements[11];
				Elements_12 = elements[12];
				Elements_13 = elements[13];
				Elements_14 = elements[14];
				Elements_15 = elements[15];
				Elements_16 = elements[16];
				Elements_17 = elements[17];
				Elements_18 = elements[18];
				Elements_19 = elements[19];
				Elements_20 = elements[20];
				Elements_21 = elements[21];
				Elements_22 = elements[22];
				Elements_23 = elements[23];
				Elements_24 = elements[24];
				Elements_25 = elements[25];
				Elements_26 = elements[26];
				Elements_27 = elements[27];
				Elements_28 = elements[28];
				Elements_29 = elements[29];
				Elements_30 = elements[30];
				Elements_31 = elements[31];
				Elements_32 = elements[32];
				Elements_33 = elements[33];
				Elements_34 = elements[34];
				Elements_35 = elements[35];
				Elements_36 = elements[36];
				Elements_37 = elements[37];
				Elements_38 = elements[38];
				Elements_39 = elements[39];
				Elements_40 = elements[40];
				Elements_41 = elements[41];
				Elements_42 = elements[42];
				Elements_43 = elements[43];
				Elements_44 = elements[44];
				Elements_45 = elements[45];
				Elements_46 = elements[46];
				Elements_47 = elements[47];
				Elements_48 = elements[48];
				Elements_49 = elements[49];
				Elements_50 = elements[50];
				Elements_51 = elements[51];
				Elements_52 = elements[52];
				Elements_53 = elements[53];
				Elements_54 = elements[54];
				Elements_55 = elements[55];
				Elements_56 = elements[56];
				Elements_57 = elements[57];
				Elements_58 = elements[58];
				Elements_59 = elements[59];
				Elements_60 = elements[60];
				Elements_61 = elements[61];
				Elements_62 = elements[62];
				Elements_63 = elements[63];
			}
		}

		/// <summary>/// To be documented./// </summary>		public unsafe DxgiJpegQuantizationTable(Span<byte> elements = default)
		{
			if (elements != default)
			{
				Elements_0 = elements[0];
				Elements_1 = elements[1];
				Elements_2 = elements[2];
				Elements_3 = elements[3];
				Elements_4 = elements[4];
				Elements_5 = elements[5];
				Elements_6 = elements[6];
				Elements_7 = elements[7];
				Elements_8 = elements[8];
				Elements_9 = elements[9];
				Elements_10 = elements[10];
				Elements_11 = elements[11];
				Elements_12 = elements[12];
				Elements_13 = elements[13];
				Elements_14 = elements[14];
				Elements_15 = elements[15];
				Elements_16 = elements[16];
				Elements_17 = elements[17];
				Elements_18 = elements[18];
				Elements_19 = elements[19];
				Elements_20 = elements[20];
				Elements_21 = elements[21];
				Elements_22 = elements[22];
				Elements_23 = elements[23];
				Elements_24 = elements[24];
				Elements_25 = elements[25];
				Elements_26 = elements[26];
				Elements_27 = elements[27];
				Elements_28 = elements[28];
				Elements_29 = elements[29];
				Elements_30 = elements[30];
				Elements_31 = elements[31];
				Elements_32 = elements[32];
				Elements_33 = elements[33];
				Elements_34 = elements[34];
				Elements_35 = elements[35];
				Elements_36 = elements[36];
				Elements_37 = elements[37];
				Elements_38 = elements[38];
				Elements_39 = elements[39];
				Elements_40 = elements[40];
				Elements_41 = elements[41];
				Elements_42 = elements[42];
				Elements_43 = elements[43];
				Elements_44 = elements[44];
				Elements_45 = elements[45];
				Elements_46 = elements[46];
				Elements_47 = elements[47];
				Elements_48 = elements[48];
				Elements_49 = elements[49];
				Elements_50 = elements[50];
				Elements_51 = elements[51];
				Elements_52 = elements[52];
				Elements_53 = elements[53];
				Elements_54 = elements[54];
				Elements_55 = elements[55];
				Elements_56 = elements[56];
				Elements_57 = elements[57];
				Elements_58 = elements[58];
				Elements_59 = elements[59];
				Elements_60 = elements[60];
				Elements_61 = elements[61];
				Elements_62 = elements[62];
				Elements_63 = elements[63];
			}
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiDisplayColorSpace
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe float* PrimaryCoordinates_0;
		public unsafe float* PrimaryCoordinates_1;
		public unsafe float* PrimaryCoordinates_2;
		public unsafe float* PrimaryCoordinates_3;
		public unsafe float* PrimaryCoordinates_4;
		public unsafe float* PrimaryCoordinates_5;
		public unsafe float* PrimaryCoordinates_6;
		public unsafe float* PrimaryCoordinates_7;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe float* WhitePoints_0;
		public unsafe float* WhitePoints_1;
		public unsafe float* WhitePoints_2;
		public unsafe float* WhitePoints_3;
		public unsafe float* WhitePoints_4;
		public unsafe float* WhitePoints_5;
		public unsafe float* WhitePoints_6;
		public unsafe float* WhitePoints_7;
		public unsafe float* WhitePoints_8;
		public unsafe float* WhitePoints_9;
		public unsafe float* WhitePoints_10;
		public unsafe float* WhitePoints_11;
		public unsafe float* WhitePoints_12;
		public unsafe float* WhitePoints_13;
		public unsafe float* WhitePoints_14;
		public unsafe float* WhitePoints_15;


		/// <summary>/// To be documented./// </summary>		public unsafe DxgiDisplayColorSpace(float** primaryCoordinates = default, float** whitePoints = default)
		{
			if (primaryCoordinates != default)
			{
				PrimaryCoordinates_0 = primaryCoordinates[0];
				PrimaryCoordinates_1 = primaryCoordinates[1];
				PrimaryCoordinates_2 = primaryCoordinates[2];
				PrimaryCoordinates_3 = primaryCoordinates[3];
				PrimaryCoordinates_4 = primaryCoordinates[4];
				PrimaryCoordinates_5 = primaryCoordinates[5];
				PrimaryCoordinates_6 = primaryCoordinates[6];
				PrimaryCoordinates_7 = primaryCoordinates[7];
			}
			if (whitePoints != default)
			{
				WhitePoints_0 = whitePoints[0];
				WhitePoints_1 = whitePoints[1];
				WhitePoints_2 = whitePoints[2];
				WhitePoints_3 = whitePoints[3];
				WhitePoints_4 = whitePoints[4];
				WhitePoints_5 = whitePoints[5];
				WhitePoints_6 = whitePoints[6];
				WhitePoints_7 = whitePoints[7];
				WhitePoints_8 = whitePoints[8];
				WhitePoints_9 = whitePoints[9];
				WhitePoints_10 = whitePoints[10];
				WhitePoints_11 = whitePoints[11];
				WhitePoints_12 = whitePoints[12];
				WhitePoints_13 = whitePoints[13];
				WhitePoints_14 = whitePoints[14];
				WhitePoints_15 = whitePoints[15];
			}
		}

		/// <summary>/// To be documented./// </summary>		public unsafe DxgiDisplayColorSpace(Span<Pointer<float>> primaryCoordinates = default, Span<Pointer<float>> whitePoints = default)
		{
			if (primaryCoordinates != default)
			{
				PrimaryCoordinates_0 = primaryCoordinates[0];
				PrimaryCoordinates_1 = primaryCoordinates[1];
				PrimaryCoordinates_2 = primaryCoordinates[2];
				PrimaryCoordinates_3 = primaryCoordinates[3];
				PrimaryCoordinates_4 = primaryCoordinates[4];
				PrimaryCoordinates_5 = primaryCoordinates[5];
				PrimaryCoordinates_6 = primaryCoordinates[6];
				PrimaryCoordinates_7 = primaryCoordinates[7];
			}
			if (whitePoints != default)
			{
				WhitePoints_0 = whitePoints[0];
				WhitePoints_1 = whitePoints[1];
				WhitePoints_2 = whitePoints[2];
				WhitePoints_3 = whitePoints[3];
				WhitePoints_4 = whitePoints[4];
				WhitePoints_5 = whitePoints[5];
				WhitePoints_6 = whitePoints[6];
				WhitePoints_7 = whitePoints[7];
				WhitePoints_8 = whitePoints[8];
				WhitePoints_9 = whitePoints[9];
				WhitePoints_10 = whitePoints[10];
				WhitePoints_11 = whitePoints[11];
				WhitePoints_12 = whitePoints[12];
				WhitePoints_13 = whitePoints[13];
				WhitePoints_14 = whitePoints[14];
				WhitePoints_15 = whitePoints[15];
			}
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Pointer<float>> PrimaryCoordinates
		
		{
			get
			{
				fixed (float** p = &this.PrimaryCoordinates_0)
				{
					return new Span<Pointer<float>>(p, 8);
				}
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Pointer<float>> WhitePoints
		
		{
			get
			{
				fixed (float** p = &this.WhitePoints_0)
				{
					return new Span<Pointer<float>>(p, 16);
				}
			}
		}
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[Guid("ea9dbf1a-c88e-4486-854a-98aa0138f30c")]
	public partial struct IDXGIDisplayControl : IComObject, IComObject<IDXGIDisplayControl>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("ea9dbf1a-c88e-4486-854a-98aa0138f30c");

		public unsafe IDXGIDisplayControl (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface(Guid* riid, void** ppvObject) 
		{
			IDXGIDisplayControl* ptr = (IDXGIDisplayControl*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDisplayControl*, Guid*, void**, int>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface(ref Guid riid, void** ppvObject) 
		{
			IDXGIDisplayControl* ptr = (IDXGIDisplayControl*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDisplayControl*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface<T>(out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDisplayControl* ptr = (IDXGIDisplayControl*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDisplayControl*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface<T>(ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIDisplayControl* ptr = (IDXGIDisplayControl*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIDisplayControl*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe uint AddRef() 
		{
			IDXGIDisplayControl* ptr = (IDXGIDisplayControl*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIDisplayControl*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe uint Release() 
		{
			IDXGIDisplayControl* ptr = (IDXGIDisplayControl*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIDisplayControl*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int IsStereoEnabled() 
		{
			IDXGIDisplayControl* ptr = (IDXGIDisplayControl*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIDisplayControl*, int>)(LpVtbl[3]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe void SetStereoEnabled(int enabled) 
		{
			IDXGIDisplayControl* ptr = (IDXGIDisplayControl*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<IDXGIDisplayControl*, int, void>)(LpVtbl[4]))(ptr, enabled);
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDXGIDisplayControl value)
		{
			return Unsafe.As<IDXGIDisplayControl, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[Guid("191cfac3-a341-470d-b26e-a864f428319c")]
	public partial struct IDXGIOutputDuplication : IComObject, IComObject<IDXGIOutputDuplication>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("191cfac3-a341-470d-b26e-a864f428319c");

		public unsafe IDXGIOutputDuplication (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface(Guid* riid, void** ppvObject) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, void**, int>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface(ref Guid riid, void** ppvObject) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface<T>(out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int QueryInterface<T>(ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe uint AddRef() 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe uint Release() 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateData(Guid* name, uint dataSize, void* pData) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, uint, void*, int>)(LpVtbl[3]))(ptr, name, dataSize, pData);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateData(ref Guid name, uint dataSize, void* pData) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, uint, void*, int>)(LpVtbl[3]))(ptr, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(Guid* name, IUnknown* pUnknown) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, name, pUnknown);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(ref Guid name, IUnknown* pUnknown) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(Guid* name, ref IUnknown pUnknown) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(Guid* name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, name, (IUnknown*)pUnknown.Handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(ref Guid name, ref IUnknown pUnknown) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int SetPrivateDataInterface(ref Guid name, ComPtr<IUnknown> pUnknown) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, IUnknown*, int>)(LpVtbl[4]))(ptr, (Guid*)pname, (IUnknown*)pUnknown.Handle);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData(Guid* name, uint* pDataSize, void* pData) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, name, pDataSize, pData);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData(ref Guid name, uint* pDataSize, void* pData) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData(Guid* name, ref uint pDataSize, void* pData) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData(ref Guid name, ref uint pDataSize, void* pData) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData<T>(Guid* name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, name, pDataSize, (void*)pData.Handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData<T>(ref Guid name, uint* pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, (Guid*)pname, pDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData<T>(Guid* name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, name, (uint*)ppDataSize, (void*)pData.Handle);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetPrivateData<T>(ref Guid name, ref uint pDataSize, ComPtr<T> pData) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, uint*, void*, int>)(LpVtbl[5]))(ptr, (Guid*)pname, (uint*)ppDataSize, (void*)pData.Handle);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetParent(Guid* riid, void** ppParent) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, void**, int>)(LpVtbl[6]))(ptr, riid, ppParent);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetParent(ref Guid riid, void** ppParent) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, void**, int>)(LpVtbl[6]))(ptr, (Guid*)priid, ppParent);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetParent<T>(out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppParent = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, void**, int>)(LpVtbl[6]))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppParent.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetParent<T>(ref Guid riid, out ComPtr<T> ppParent) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppParent = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, Guid*, void**, int>)(LpVtbl[6]))(ptr, (Guid*)priid, (void**)ppParent.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe void GetDesc(DxgiOutduplDesc* pDesc) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, DxgiOutduplDesc*, void>)(LpVtbl[7]))(ptr, pDesc);
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe void GetDesc(ref DxgiOutduplDesc pDesc) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiOutduplDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, DxgiOutduplDesc*, void>)(LpVtbl[7]))(ptr, (DxgiOutduplDesc*)ppDesc);
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int AcquireNextFrame(uint timeoutInMilliseconds, DxgiOutduplFrameInfo* pFrameInfo, IDXGIResource** ppDesktopResource) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, DxgiOutduplFrameInfo*, IDXGIResource**, int>)(LpVtbl[8]))(ptr, timeoutInMilliseconds, pFrameInfo, ppDesktopResource);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int AcquireNextFrame(uint timeoutInMilliseconds, ref DxgiOutduplFrameInfo pFrameInfo, IDXGIResource** ppDesktopResource) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiOutduplFrameInfo* ppFrameInfo = &pFrameInfo)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, DxgiOutduplFrameInfo*, IDXGIResource**, int>)(LpVtbl[8]))(ptr, timeoutInMilliseconds, (DxgiOutduplFrameInfo*)ppFrameInfo, ppDesktopResource);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int AcquireNextFrame(uint timeoutInMilliseconds, DxgiOutduplFrameInfo* pFrameInfo, ref IDXGIResource* ppDesktopResource) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIResource** pppDesktopResource = &ppDesktopResource)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, DxgiOutduplFrameInfo*, IDXGIResource**, int>)(LpVtbl[8]))(ptr, timeoutInMilliseconds, pFrameInfo, (IDXGIResource**)pppDesktopResource);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int AcquireNextFrame(uint timeoutInMilliseconds, DxgiOutduplFrameInfo* pFrameInfo, out ComPtr<IDXGIResource> ppDesktopResource) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppDesktopResource = default;
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, DxgiOutduplFrameInfo*, IDXGIResource**, int>)(LpVtbl[8]))(ptr, timeoutInMilliseconds, pFrameInfo, (IDXGIResource**)ppDesktopResource.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int AcquireNextFrame(uint timeoutInMilliseconds, ref DxgiOutduplFrameInfo pFrameInfo, ref IDXGIResource* ppDesktopResource) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiOutduplFrameInfo* ppFrameInfo = &pFrameInfo)
			{
				fixed (IDXGIResource** pppDesktopResource = &ppDesktopResource)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, DxgiOutduplFrameInfo*, IDXGIResource**, int>)(LpVtbl[8]))(ptr, timeoutInMilliseconds, (DxgiOutduplFrameInfo*)ppFrameInfo, (IDXGIResource**)pppDesktopResource);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int AcquireNextFrame(uint timeoutInMilliseconds, ref DxgiOutduplFrameInfo pFrameInfo, out ComPtr<IDXGIResource> ppDesktopResource) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiOutduplFrameInfo* ppFrameInfo = &pFrameInfo)
			{
				ppDesktopResource = default;
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, DxgiOutduplFrameInfo*, IDXGIResource**, int>)(LpVtbl[8]))(ptr, timeoutInMilliseconds, (DxgiOutduplFrameInfo*)ppFrameInfo, (IDXGIResource**)ppDesktopResource.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetFrameDirtyRects(uint dirtyRectsBufferSize, Rect32* pDirtyRectsBuffer, uint* pDirtyRectsBufferSizeRequired) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, Rect32*, uint*, int>)(LpVtbl[9]))(ptr, dirtyRectsBufferSize, pDirtyRectsBuffer, pDirtyRectsBufferSizeRequired);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetFrameDirtyRects(uint dirtyRectsBufferSize, ref Rect32 pDirtyRectsBuffer, uint* pDirtyRectsBufferSizeRequired) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppDirtyRectsBuffer = &pDirtyRectsBuffer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, Rect32*, uint*, int>)(LpVtbl[9]))(ptr, dirtyRectsBufferSize, (Rect32*)ppDirtyRectsBuffer, pDirtyRectsBufferSizeRequired);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetFrameDirtyRects(uint dirtyRectsBufferSize, Rect32* pDirtyRectsBuffer, ref uint pDirtyRectsBufferSizeRequired) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDirtyRectsBufferSizeRequired = &pDirtyRectsBufferSizeRequired)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, Rect32*, uint*, int>)(LpVtbl[9]))(ptr, dirtyRectsBufferSize, pDirtyRectsBuffer, (uint*)ppDirtyRectsBufferSizeRequired);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetFrameDirtyRects(uint dirtyRectsBufferSize, ref Rect32 pDirtyRectsBuffer, ref uint pDirtyRectsBufferSizeRequired) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppDirtyRectsBuffer = &pDirtyRectsBuffer)
			{
				fixed (uint* ppDirtyRectsBufferSizeRequired = &pDirtyRectsBufferSizeRequired)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, Rect32*, uint*, int>)(LpVtbl[9]))(ptr, dirtyRectsBufferSize, (Rect32*)ppDirtyRectsBuffer, (uint*)ppDirtyRectsBufferSizeRequired);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetFrameMoveRects(uint moveRectsBufferSize, DxgiOutduplMoveRect* pMoveRectBuffer, uint* pMoveRectsBufferSizeRequired) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, DxgiOutduplMoveRect*, uint*, int>)(LpVtbl[10]))(ptr, moveRectsBufferSize, pMoveRectBuffer, pMoveRectsBufferSizeRequired);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetFrameMoveRects(uint moveRectsBufferSize, ref DxgiOutduplMoveRect pMoveRectBuffer, uint* pMoveRectsBufferSizeRequired) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiOutduplMoveRect* ppMoveRectBuffer = &pMoveRectBuffer)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, DxgiOutduplMoveRect*, uint*, int>)(LpVtbl[10]))(ptr, moveRectsBufferSize, (DxgiOutduplMoveRect*)ppMoveRectBuffer, pMoveRectsBufferSizeRequired);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetFrameMoveRects(uint moveRectsBufferSize, DxgiOutduplMoveRect* pMoveRectBuffer, ref uint pMoveRectsBufferSizeRequired) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppMoveRectsBufferSizeRequired = &pMoveRectsBufferSizeRequired)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, DxgiOutduplMoveRect*, uint*, int>)(LpVtbl[10]))(ptr, moveRectsBufferSize, pMoveRectBuffer, (uint*)ppMoveRectsBufferSizeRequired);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetFrameMoveRects(uint moveRectsBufferSize, ref DxgiOutduplMoveRect pMoveRectBuffer, ref uint pMoveRectsBufferSizeRequired) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiOutduplMoveRect* ppMoveRectBuffer = &pMoveRectBuffer)
			{
				fixed (uint* ppMoveRectsBufferSizeRequired = &pMoveRectsBufferSizeRequired)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, DxgiOutduplMoveRect*, uint*, int>)(LpVtbl[10]))(ptr, moveRectsBufferSize, (DxgiOutduplMoveRect*)ppMoveRectBuffer, (uint*)ppMoveRectsBufferSizeRequired);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetFramePointerShape(uint pointerShapeBufferSize, void* pPointerShapeBuffer, uint* pPointerShapeBufferSizeRequired, DxgiOutduplPointerShapeInfo* pPointerShapeInfo) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, void*, uint*, DxgiOutduplPointerShapeInfo*, int>)(LpVtbl[11]))(ptr, pointerShapeBufferSize, pPointerShapeBuffer, pPointerShapeBufferSizeRequired, pPointerShapeInfo);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetFramePointerShape<T>(uint pointerShapeBufferSize, ComPtr<T> pPointerShapeBuffer, uint* pPointerShapeBufferSizeRequired, DxgiOutduplPointerShapeInfo* pPointerShapeInfo) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, void*, uint*, DxgiOutduplPointerShapeInfo*, int>)(LpVtbl[11]))(ptr, pointerShapeBufferSize, (void*)pPointerShapeBuffer.Handle, pPointerShapeBufferSizeRequired, pPointerShapeInfo);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetFramePointerShape(uint pointerShapeBufferSize, void* pPointerShapeBuffer, ref uint pPointerShapeBufferSizeRequired, DxgiOutduplPointerShapeInfo* pPointerShapeInfo) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppPointerShapeBufferSizeRequired = &pPointerShapeBufferSizeRequired)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, void*, uint*, DxgiOutduplPointerShapeInfo*, int>)(LpVtbl[11]))(ptr, pointerShapeBufferSize, pPointerShapeBuffer, (uint*)ppPointerShapeBufferSizeRequired, pPointerShapeInfo);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetFramePointerShape<T>(uint pointerShapeBufferSize, ComPtr<T> pPointerShapeBuffer, ref uint pPointerShapeBufferSizeRequired, DxgiOutduplPointerShapeInfo* pPointerShapeInfo) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppPointerShapeBufferSizeRequired = &pPointerShapeBufferSizeRequired)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, void*, uint*, DxgiOutduplPointerShapeInfo*, int>)(LpVtbl[11]))(ptr, pointerShapeBufferSize, (void*)pPointerShapeBuffer.Handle, (uint*)ppPointerShapeBufferSizeRequired, pPointerShapeInfo);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetFramePointerShape(uint pointerShapeBufferSize, void* pPointerShapeBuffer, uint* pPointerShapeBufferSizeRequired, ref DxgiOutduplPointerShapeInfo pPointerShapeInfo) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiOutduplPointerShapeInfo* ppPointerShapeInfo = &pPointerShapeInfo)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, void*, uint*, DxgiOutduplPointerShapeInfo*, int>)(LpVtbl[11]))(ptr, pointerShapeBufferSize, pPointerShapeBuffer, pPointerShapeBufferSizeRequired, (DxgiOutduplPointerShapeInfo*)ppPointerShapeInfo);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetFramePointerShape<T>(uint pointerShapeBufferSize, ComPtr<T> pPointerShapeBuffer, uint* pPointerShapeBufferSizeRequired, ref DxgiOutduplPointerShapeInfo pPointerShapeInfo) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiOutduplPointerShapeInfo* ppPointerShapeInfo = &pPointerShapeInfo)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, void*, uint*, DxgiOutduplPointerShapeInfo*, int>)(LpVtbl[11]))(ptr, pointerShapeBufferSize, (void*)pPointerShapeBuffer.Handle, pPointerShapeBufferSizeRequired, (DxgiOutduplPointerShapeInfo*)ppPointerShapeInfo);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetFramePointerShape(uint pointerShapeBufferSize, void* pPointerShapeBuffer, ref uint pPointerShapeBufferSizeRequired, ref DxgiOutduplPointerShapeInfo pPointerShapeInfo) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppPointerShapeBufferSizeRequired = &pPointerShapeBufferSizeRequired)
			{
				fixed (DxgiOutduplPointerShapeInfo* ppPointerShapeInfo = &pPointerShapeInfo)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, void*, uint*, DxgiOutduplPointerShapeInfo*, int>)(LpVtbl[11]))(ptr, pointerShapeBufferSize, pPointerShapeBuffer, (uint*)ppPointerShapeBufferSizeRequired, (DxgiOutduplPointerShapeInfo*)ppPointerShapeInfo);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int GetFramePointerShape<T>(uint pointerShapeBufferSize, ComPtr<T> pPointerShapeBuffer, ref uint pPointerShapeBufferSizeRequired, ref DxgiOutduplPointerShapeInfo pPointerShapeInfo) where T : unmanaged, IComObject, IComObject<T>
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppPointerShapeBufferSizeRequired = &pPointerShapeBufferSizeRequired)
			{
				fixed (DxgiOutduplPointerShapeInfo* ppPointerShapeInfo = &pPointerShapeInfo)
				{
					int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, void*, uint*, DxgiOutduplPointerShapeInfo*, int>)(LpVtbl[11]))(ptr, pointerShapeBufferSize, (void*)pPointerShapeBuffer.Handle, (uint*)ppPointerShapeBufferSizeRequired, (DxgiOutduplPointerShapeInfo*)ppPointerShapeInfo);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int MapDesktopSurface(DxgiMappedRect* pLockedRect) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, DxgiMappedRect*, int>)(LpVtbl[12]))(ptr, pLockedRect);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int MapDesktopSurface(ref DxgiMappedRect pLockedRect) 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiMappedRect* ppLockedRect = &pLockedRect)
			{
				int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, DxgiMappedRect*, int>)(LpVtbl[12]))(ptr, (DxgiMappedRect*)ppLockedRect);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int UnMapDesktopSurface() 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, int>)(LpVtbl[13]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public readonly unsafe int ReleaseFrame() 
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, int>)(LpVtbl[14]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIObject (IDXGIOutputDuplication value)
		{
			return Unsafe.As<IDXGIOutputDuplication, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIOutputDuplication value)
		{
			return Unsafe.As<IDXGIOutputDuplication, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiOutduplDesc
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public DxgiModeDesc ModeDesc;

		/// <summary>
		/// To be documented.
		/// </summary>
		public DxgiModeRotation Rotation;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int DesktopImageInSystemMemory;


		/// <summary>/// To be documented./// </summary>		public unsafe DxgiOutduplDesc(DxgiModeDesc modeDesc = default, DxgiModeRotation rotation = default, int desktopImageInSystemMemory = default)
		{
			ModeDesc = modeDesc;
			Rotation = rotation;
			DesktopImageInSystemMemory = desktopImageInSystemMemory;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiOutduplFrameInfo
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public long LastPresentTime;

		/// <summary>
		/// To be documented.
		/// </summary>
		public long LastMouseUpdateTime;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint AccumulatedFrames;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int RectsCoalesced;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ProtectedContentMaskedOut;

		/// <summary>
		/// To be documented.
		/// </summary>
		public DxgiOutduplPointerPosition PointerPosition;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint TotalMetadataBufferSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint PointerShapeBufferSize;


		/// <summary>/// To be documented./// </summary>		public unsafe DxgiOutduplFrameInfo(long lastPresentTime = default, long lastMouseUpdateTime = default, uint accumulatedFrames = default, int rectsCoalesced = default, int protectedContentMaskedOut = default, DxgiOutduplPointerPosition pointerPosition = default, uint totalMetadataBufferSize = default, uint pointerShapeBufferSize = default)
		{
			LastPresentTime = lastPresentTime;
			LastMouseUpdateTime = lastMouseUpdateTime;
			AccumulatedFrames = accumulatedFrames;
			RectsCoalesced = rectsCoalesced;
			ProtectedContentMaskedOut = protectedContentMaskedOut;
			PointerPosition = pointerPosition;
			TotalMetadataBufferSize = totalMetadataBufferSize;
			PointerShapeBufferSize = pointerShapeBufferSize;
		}


	}
}
