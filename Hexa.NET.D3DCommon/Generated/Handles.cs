// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;

namespace HexaEngine.D3DCommon
{
	[NativeName(NativeNameType.Typedef, "LPD3D_SHADER_MACRO")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LPD3D_SHADER_MACRO : IEquatable<LPD3D_SHADER_MACRO>
	{
		public LPD3D_SHADER_MACRO(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LPD3D_SHADER_MACRO Null => new LPD3D_SHADER_MACRO(0);
		public static implicit operator LPD3D_SHADER_MACRO(nint handle) => new LPD3D_SHADER_MACRO(handle);
		public static bool operator ==(LPD3D_SHADER_MACRO left, LPD3D_SHADER_MACRO right) => left.Handle == right.Handle;
		public static bool operator !=(LPD3D_SHADER_MACRO left, LPD3D_SHADER_MACRO right) => left.Handle != right.Handle;
		public static bool operator ==(LPD3D_SHADER_MACRO left, nint right) => left.Handle == right;
		public static bool operator !=(LPD3D_SHADER_MACRO left, nint right) => left.Handle != right;
		public bool Equals(LPD3D_SHADER_MACRO other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LPD3D_SHADER_MACRO handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LPD3D_SHADER_MACRO [0x{0}]", Handle.ToString("X"));
	}

	/// <summary>
	/// interface __MIDL_itf_d3dcommon_0000_0001 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName(NativeNameType.Typedef, "LPD3D10BLOB")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LPD3D10BLOB : IEquatable<LPD3D10BLOB>
	{
		public LPD3D10BLOB(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LPD3D10BLOB Null => new LPD3D10BLOB(0);
		public static implicit operator LPD3D10BLOB(nint handle) => new LPD3D10BLOB(handle);
		public static bool operator ==(LPD3D10BLOB left, LPD3D10BLOB right) => left.Handle == right.Handle;
		public static bool operator !=(LPD3D10BLOB left, LPD3D10BLOB right) => left.Handle != right.Handle;
		public static bool operator ==(LPD3D10BLOB left, nint right) => left.Handle == right;
		public static bool operator !=(LPD3D10BLOB left, nint right) => left.Handle != right;
		public bool Equals(LPD3D10BLOB other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LPD3D10BLOB handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LPD3D10BLOB [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "LPD3DBLOB")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LPD3DBLOB : IEquatable<LPD3DBLOB>
	{
		public LPD3DBLOB(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LPD3DBLOB Null => new LPD3DBLOB(0);
		public static implicit operator LPD3DBLOB(nint handle) => new LPD3DBLOB(handle);
		public static bool operator ==(LPD3DBLOB left, LPD3DBLOB right) => left.Handle == right.Handle;
		public static bool operator !=(LPD3DBLOB left, LPD3DBLOB right) => left.Handle != right.Handle;
		public static bool operator ==(LPD3DBLOB left, nint right) => left.Handle == right;
		public static bool operator !=(LPD3DBLOB left, nint right) => left.Handle != right;
		public bool Equals(LPD3DBLOB other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LPD3DBLOB handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LPD3DBLOB [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "LPD3DINCLUDE")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LPD3DINCLUDE : IEquatable<LPD3DINCLUDE>
	{
		public LPD3DINCLUDE(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LPD3DINCLUDE Null => new LPD3DINCLUDE(0);
		public static implicit operator LPD3DINCLUDE(nint handle) => new LPD3DINCLUDE(handle);
		public static bool operator ==(LPD3DINCLUDE left, LPD3DINCLUDE right) => left.Handle == right.Handle;
		public static bool operator !=(LPD3DINCLUDE left, LPD3DINCLUDE right) => left.Handle != right.Handle;
		public static bool operator ==(LPD3DINCLUDE left, nint right) => left.Handle == right;
		public static bool operator !=(LPD3DINCLUDE left, nint right) => left.Handle != right;
		public bool Equals(LPD3DINCLUDE other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LPD3DINCLUDE handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LPD3DINCLUDE [0x{0}]", Handle.ToString("X"));
	}

}
