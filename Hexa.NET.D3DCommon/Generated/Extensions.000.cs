// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3DCommon
{
	public static unsafe partial class Extensions
	{
		/// <summary>/// To be documented./// </summary>		public static int QueryInterface(this ComPtr<ID3D10Blob> comObj, Guid* riid, void** ppvObject) 
		{
			ID3D10Blob* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static int QueryInterface(this ComPtr<ID3D10Blob> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3D10Blob* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static int QueryInterface<T>(this ComPtr<ID3D10Blob> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D10Blob* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static int QueryInterface<T>(this ComPtr<ID3D10Blob> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D10Blob* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static uint AddRef(this ComPtr<ID3D10Blob> comObj) 
		{
			ID3D10Blob* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static uint Release(this ComPtr<ID3D10Blob> comObj) 
		{
			ID3D10Blob* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static void* GetBufferPointer(this ComPtr<ID3D10Blob> comObj) 
		{
			ID3D10Blob* handle = comObj.Handle;
			void* ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, void*>)(handle->LpVtbl[3]))(handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static nuint GetBufferSize(this ComPtr<ID3D10Blob> comObj) 
		{
			ID3D10Blob* handle = comObj.Handle;
			nuint ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, nuint>)(handle->LpVtbl[4]))(handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static int QueryInterface(this ComPtr<ID3DDestructionNotifier> comObj, Guid* riid, void** ppvObject) 
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, Guid*, void**, int>)(*handle->LpVtbl))(handle, riid, ppvObject);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static int QueryInterface(this ComPtr<ID3DDestructionNotifier> comObj, ref Guid riid, void** ppvObject) 
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static int QueryInterface<T>(this ComPtr<ID3DDestructionNotifier> comObj, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static int QueryInterface<T>(this ComPtr<ID3DDestructionNotifier> comObj, ref Guid riid, out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, Guid*, void**, int>)(*handle->LpVtbl))(handle, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static uint AddRef(this ComPtr<ID3DDestructionNotifier> comObj) 
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, uint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static uint Release(this ComPtr<ID3DDestructionNotifier> comObj) 
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			uint ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, uint>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static int RegisterDestructionCallback(this ComPtr<ID3DDestructionNotifier> comObj, delegate*<delegate*<void>, void*, uint*, void> callbackFn, void* pData, uint* pCallbackID) 
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, delegate*<delegate*<void>, void*, uint*, void>, void*, uint*, int>)(handle->LpVtbl[3]))(handle, callbackFn, pData, pCallbackID);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static int RegisterDestructionCallback<T>(this ComPtr<ID3DDestructionNotifier> comObj, delegate*<delegate*<void>, void*, uint*, void> callbackFn, ComPtr<T> pData, uint* pCallbackID) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, delegate*<delegate*<void>, void*, uint*, void>, void*, uint*, int>)(handle->LpVtbl[3]))(handle, callbackFn, (void*)pData.Handle, pCallbackID);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static int RegisterDestructionCallback(this ComPtr<ID3DDestructionNotifier> comObj, delegate*<delegate*<void>, void*, uint*, void> callbackFn, void* pData, ref uint pCallbackID) 
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			fixed (uint* ppCallbackID = &pCallbackID)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, delegate*<delegate*<void>, void*, uint*, void>, void*, uint*, int>)(handle->LpVtbl[3]))(handle, callbackFn, pData, (uint*)ppCallbackID);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static int RegisterDestructionCallback<T>(this ComPtr<ID3DDestructionNotifier> comObj, delegate*<delegate*<void>, void*, uint*, void> callbackFn, ComPtr<T> pData, ref uint pCallbackID) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			fixed (uint* ppCallbackID = &pCallbackID)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, delegate*<delegate*<void>, void*, uint*, void>, void*, uint*, int>)(handle->LpVtbl[3]))(handle, callbackFn, (void*)pData.Handle, (uint*)ppCallbackID);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static int UnregisterDestructionCallback(this ComPtr<ID3DDestructionNotifier> comObj, uint callbackID) 
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, uint, int>)(handle->LpVtbl[4]))(handle, callbackID);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static int Open(this ComPtr<ID3DInclude> comObj, D3DIncludeType includeType, byte* pFileName, void* pParentData, void** ppData, uint* pBytes) 
		{
			ID3DInclude* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, D3DIncludeType, byte*, void*, void**, uint*, int>)(*handle->LpVtbl))(handle, includeType, pFileName, pParentData, ppData, pBytes);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static int Open(this ComPtr<ID3DInclude> comObj, D3DIncludeType includeType, byte* pFileName, void* pParentData, ref void* ppData, uint* pBytes) 
		{
			ID3DInclude* handle = comObj.Handle;
			fixed (void** pppData = &ppData)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, D3DIncludeType, byte*, void*, void**, uint*, int>)(*handle->LpVtbl))(handle, includeType, pFileName, pParentData, (void**)pppData, pBytes);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static int Open(this ComPtr<ID3DInclude> comObj, D3DIncludeType includeType, byte* pFileName, void* pParentData, void** ppData, ref uint pBytes) 
		{
			ID3DInclude* handle = comObj.Handle;
			fixed (uint* ppBytes = &pBytes)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, D3DIncludeType, byte*, void*, void**, uint*, int>)(*handle->LpVtbl))(handle, includeType, pFileName, pParentData, ppData, (uint*)ppBytes);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static int Open(this ComPtr<ID3DInclude> comObj, D3DIncludeType includeType, byte* pFileName, void* pParentData, ref void* ppData, ref uint pBytes) 
		{
			ID3DInclude* handle = comObj.Handle;
			fixed (void** pppData = &ppData)
			{
				fixed (uint* ppBytes = &pBytes)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, D3DIncludeType, byte*, void*, void**, uint*, int>)(*handle->LpVtbl))(handle, includeType, pFileName, pParentData, (void**)pppData, (uint*)ppBytes);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static int Close(this ComPtr<ID3DInclude> comObj, void* pData) 
		{
			ID3DInclude* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, void*, int>)(handle->LpVtbl[1]))(handle, pData);
			return ret;
		}

	}
}
