// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;
using HexaEngine.D3DCommon;
using System.Numerics;

namespace HexaEngine.DXGI
{
	[Guid("aec22fb8-76f3-4639-9be0-28eb43a67a2e")]
	[NativeName("IDXGIObject")]
	public partial struct IDXGIObject : IComObject, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("aec22fb8-76f3-4639-9be0-28eb43a67a2e");

		public unsafe IDXGIObject (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult SetPrivateData(Guid* name, uint dataSize, void* pData)
		{
			IDXGIObject* ptr = (IDXGIObject*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, uint, void*, HResult>)(*LpVtbl))(ptr, name, dataSize, pData);
			return ret;
		}

		public readonly unsafe HResult SetPrivateData(ref Guid name, uint dataSize, void* pData)
		{
			IDXGIObject* ptr = (IDXGIObject*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, uint, void*, HResult>)(*LpVtbl))(ptr, (Guid*)pname, dataSize, pData);
				return ret;
			}
		}

		public readonly unsafe HResult SetPrivateDataInterface(Guid* name, IUnknown* pUnknown)
		{
			IDXGIObject* ptr = (IDXGIObject*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, IUnknown*, HResult>)(LpVtbl[1]))(ptr, name, pUnknown);
			return ret;
		}

		public readonly unsafe HResult SetPrivateDataInterface(ref Guid name, IUnknown* pUnknown)
		{
			IDXGIObject* ptr = (IDXGIObject*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, IUnknown*, HResult>)(LpVtbl[1]))(ptr, (Guid*)pname, pUnknown);
				return ret;
			}
		}

		public readonly unsafe HResult SetPrivateDataInterface(Guid* name, ref IUnknown pUnknown)
		{
			IDXGIObject* ptr = (IDXGIObject*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppUnknown = &pUnknown)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, IUnknown*, HResult>)(LpVtbl[1]))(ptr, name, (IUnknown*)ppUnknown);
				return ret;
			}
		}

		public readonly unsafe HResult SetPrivateDataInterface(ref Guid name, ref IUnknown pUnknown)
		{
			IDXGIObject* ptr = (IDXGIObject*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				fixed (IUnknown* ppUnknown = &pUnknown)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, IUnknown*, HResult>)(LpVtbl[1]))(ptr, (Guid*)pname, (IUnknown*)ppUnknown);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetPrivateData(Guid* name, uint* pDataSize, void* pData)
		{
			IDXGIObject* ptr = (IDXGIObject*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, uint*, void*, HResult>)(LpVtbl[2]))(ptr, name, pDataSize, pData);
			return ret;
		}

		public readonly unsafe HResult GetPrivateData(ref Guid name, uint* pDataSize, void* pData)
		{
			IDXGIObject* ptr = (IDXGIObject*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, uint*, void*, HResult>)(LpVtbl[2]))(ptr, (Guid*)pname, pDataSize, pData);
				return ret;
			}
		}

		public readonly unsafe HResult GetPrivateData(Guid* name, ref uint pDataSize, void* pData)
		{
			IDXGIObject* ptr = (IDXGIObject*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, uint*, void*, HResult>)(LpVtbl[2]))(ptr, name, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		public readonly unsafe HResult GetPrivateData(ref Guid name, ref uint pDataSize, void* pData)
		{
			IDXGIObject* ptr = (IDXGIObject*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pname = &name)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, uint*, void*, HResult>)(LpVtbl[2]))(ptr, (Guid*)pname, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetParent(Guid* riid, void** ppParent)
		{
			IDXGIObject* ptr = (IDXGIObject*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, riid, ppParent);
			return ret;
		}

		public readonly unsafe HResult GetParent(ref Guid riid, void** ppParent)
		{
			IDXGIObject* ptr = (IDXGIObject*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIObject*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (Guid*)priid, ppParent);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDXGIObject value)
		{
			return Unsafe.As<IDXGIObject, IUnknown>(ref value);
		}

	}

	[Guid("3d3e0379-f9de-4d58-bb6c-18d62992f1a6")]
	[NativeName("IDXGIDeviceSubObject")]
	public partial struct IDXGIDeviceSubObject : IComObject, IComObject<IDXGIDeviceSubObject>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("3d3e0379-f9de-4d58-bb6c-18d62992f1a6");

		public unsafe IDXGIDeviceSubObject (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetDevice(Guid* riid, void** ppDevice)
		{
			IDXGIDeviceSubObject* ptr = (IDXGIDeviceSubObject*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, riid, ppDevice);
			return ret;
		}

		public readonly unsafe HResult GetDevice(ref Guid riid, void** ppDevice)
		{
			IDXGIDeviceSubObject* ptr = (IDXGIDeviceSubObject*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDeviceSubObject*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (Guid*)priid, ppDevice);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIObject (IDXGIDeviceSubObject value)
		{
			return Unsafe.As<IDXGIDeviceSubObject, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIDeviceSubObject value)
		{
			return Unsafe.As<IDXGIDeviceSubObject, IUnknown>(ref value);
		}

	}

	[Guid("035f3ab4-482e-4e50-b41f-8a7f8bd8960b")]
	[NativeName("IDXGIResource")]
	public partial struct IDXGIResource : IComObject, IComObject<IDXGIResource>, IComObject<IDXGIDeviceSubObject>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("035f3ab4-482e-4e50-b41f-8a7f8bd8960b");

		public unsafe IDXGIResource (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetSharedHandle(nint* pSharedHandle)
		{
			IDXGIResource* ptr = (IDXGIResource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, nint*, HResult>)(LpVtbl[1]))(ptr, pSharedHandle);
			return ret;
		}

		public readonly unsafe HResult GetSharedHandle(ref nint pSharedHandle)
		{
			IDXGIResource* ptr = (IDXGIResource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nint* ppSharedHandle = &pSharedHandle)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, nint*, HResult>)(LpVtbl[1]))(ptr, (nint*)ppSharedHandle);
				return ret;
			}
		}

		public readonly unsafe HResult GetUsage(uint* pUsage)
		{
			IDXGIResource* ptr = (IDXGIResource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, uint*, HResult>)(LpVtbl[2]))(ptr, pUsage);
			return ret;
		}

		public readonly unsafe HResult GetUsage(ref uint pUsage)
		{
			IDXGIResource* ptr = (IDXGIResource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppUsage = &pUsage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, uint*, HResult>)(LpVtbl[2]))(ptr, (uint*)ppUsage);
				return ret;
			}
		}

		public readonly unsafe HResult SetEvictionPriority(uint evictionPriority)
		{
			IDXGIResource* ptr = (IDXGIResource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, uint, HResult>)(LpVtbl[3]))(ptr, evictionPriority);
			return ret;
		}

		public readonly unsafe HResult GetEvictionPriority(uint* pEvictionPriority)
		{
			IDXGIResource* ptr = (IDXGIResource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, uint*, HResult>)(LpVtbl[4]))(ptr, pEvictionPriority);
			return ret;
		}

		public readonly unsafe HResult GetEvictionPriority(ref uint pEvictionPriority)
		{
			IDXGIResource* ptr = (IDXGIResource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppEvictionPriority = &pEvictionPriority)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource*, uint*, HResult>)(LpVtbl[4]))(ptr, (uint*)ppEvictionPriority);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIDeviceSubObject (IDXGIResource value)
		{
			return Unsafe.As<IDXGIResource, IDXGIDeviceSubObject>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIResource value)
		{
			return Unsafe.As<IDXGIResource, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIResource value)
		{
			return Unsafe.As<IDXGIResource, IUnknown>(ref value);
		}

	}

	[Guid("9d8e1289-d7b3-465f-8126-250e349af85d")]
	[NativeName("IDXGIKeyedMutex")]
	public partial struct IDXGIKeyedMutex : IComObject, IComObject<IDXGIKeyedMutex>, IComObject<IDXGIDeviceSubObject>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("9d8e1289-d7b3-465f-8126-250e349af85d");

		public unsafe IDXGIKeyedMutex (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult AcquireSync(ulong key, uint dwMilliseconds)
		{
			IDXGIKeyedMutex* ptr = (IDXGIKeyedMutex*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, ulong, uint, HResult>)(LpVtbl[1]))(ptr, key, dwMilliseconds);
			return ret;
		}

		public readonly unsafe HResult ReleaseSync(ulong key)
		{
			IDXGIKeyedMutex* ptr = (IDXGIKeyedMutex*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIKeyedMutex*, ulong, HResult>)(LpVtbl[2]))(ptr, key);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIDeviceSubObject (IDXGIKeyedMutex value)
		{
			return Unsafe.As<IDXGIKeyedMutex, IDXGIDeviceSubObject>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIKeyedMutex value)
		{
			return Unsafe.As<IDXGIKeyedMutex, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIKeyedMutex value)
		{
			return Unsafe.As<IDXGIKeyedMutex, IUnknown>(ref value);
		}

	}

	[Guid("cafcb56c-6ac3-4889-bf47-9e23bbd260ec")]
	[NativeName("IDXGISurface")]
	public partial struct IDXGISurface : IComObject, IComObject<IDXGISurface>, IComObject<IDXGIDeviceSubObject>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("cafcb56c-6ac3-4889-bf47-9e23bbd260ec");

		public unsafe IDXGISurface (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetDesc(DxgiSurfaceDesc* pDesc)
		{
			IDXGISurface* ptr = (IDXGISurface*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, DxgiSurfaceDesc*, HResult>)(LpVtbl[1]))(ptr, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetDesc(ref DxgiSurfaceDesc pDesc)
		{
			IDXGISurface* ptr = (IDXGISurface*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSurfaceDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, DxgiSurfaceDesc*, HResult>)(LpVtbl[1]))(ptr, (DxgiSurfaceDesc*)ppDesc);
				return ret;
			}
		}

		public readonly unsafe HResult Map(DxgiMappedRect* pLockedRect, uint mapFlags)
		{
			IDXGISurface* ptr = (IDXGISurface*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, DxgiMappedRect*, uint, HResult>)(LpVtbl[2]))(ptr, pLockedRect, mapFlags);
			return ret;
		}

		public readonly unsafe HResult Map(ref DxgiMappedRect pLockedRect, uint mapFlags)
		{
			IDXGISurface* ptr = (IDXGISurface*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiMappedRect* ppLockedRect = &pLockedRect)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, DxgiMappedRect*, uint, HResult>)(LpVtbl[2]))(ptr, (DxgiMappedRect*)ppLockedRect, mapFlags);
				return ret;
			}
		}

		public readonly unsafe HResult Unmap()
		{
			IDXGISurface* ptr = (IDXGISurface*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface*, HResult>)(LpVtbl[3]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIDeviceSubObject (IDXGISurface value)
		{
			return Unsafe.As<IDXGISurface, IDXGIDeviceSubObject>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGISurface value)
		{
			return Unsafe.As<IDXGISurface, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGISurface value)
		{
			return Unsafe.As<IDXGISurface, IUnknown>(ref value);
		}

	}

	[NativeName("DXGI_SURFACE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiSurfaceDesc
	{
		[NativeName("Width")]
		public uint Width;
		[NativeName("Height")]
		public uint Height;
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("SampleDesc")]
		public DxgiSampleDesc SampleDesc;


	}

	[NativeName("DXGI_SAMPLE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiSampleDesc
	{
		[NativeName("Count")]
		public uint Count;
		[NativeName("Quality")]
		public uint Quality;


	}

	[NativeName("DXGI_MAPPED_RECT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiMappedRect
	{
		[NativeName("Pitch")]
		public int Pitch;
		[NativeName("pBits")]
		public unsafe byte* PBits;


	}

	[Guid("4ae63092-6327-4c1b-80ae-bfe12ea32b86")]
	[NativeName("IDXGISurface1")]
	public partial struct IDXGISurface1 : IComObject, IComObject<IDXGISurface1>, IComObject<IDXGISurface>, IComObject<IDXGIDeviceSubObject>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("4ae63092-6327-4c1b-80ae-bfe12ea32b86");

		public unsafe IDXGISurface1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetDC(Bool32 discard, nint* phdc)
		{
			IDXGISurface1* ptr = (IDXGISurface1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Bool32, nint*, HResult>)(LpVtbl[3]))(ptr, discard, phdc);
			return ret;
		}

		public readonly unsafe HResult GetDC(Bool32 discard, ref nint phdc)
		{
			IDXGISurface1* ptr = (IDXGISurface1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nint* pphdc = &phdc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Bool32, nint*, HResult>)(LpVtbl[3]))(ptr, discard, (nint*)pphdc);
				return ret;
			}
		}

		public readonly unsafe HResult ReleaseDC(Rect32* pDirtyRect)
		{
			IDXGISurface1* ptr = (IDXGISurface1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Rect32*, HResult>)(LpVtbl[4]))(ptr, pDirtyRect);
			return ret;
		}

		public readonly unsafe HResult ReleaseDC(ref Rect32 pDirtyRect)
		{
			IDXGISurface1* ptr = (IDXGISurface1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppDirtyRect = &pDirtyRect)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface1*, Rect32*, HResult>)(LpVtbl[4]))(ptr, (Rect32*)ppDirtyRect);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGISurface (IDXGISurface1 value)
		{
			return Unsafe.As<IDXGISurface1, IDXGISurface>(ref value);
		}

		public unsafe static implicit operator IDXGIDeviceSubObject (IDXGISurface1 value)
		{
			return Unsafe.As<IDXGISurface1, IDXGIDeviceSubObject>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGISurface1 value)
		{
			return Unsafe.As<IDXGISurface1, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGISurface1 value)
		{
			return Unsafe.As<IDXGISurface1, IUnknown>(ref value);
		}

	}

	[Guid("2411e7e1-12ac-4ccf-bd14-9798e8534dc0")]
	[NativeName("IDXGIAdapter")]
	public partial struct IDXGIAdapter : IComObject, IComObject<IDXGIAdapter>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("2411e7e1-12ac-4ccf-bd14-9798e8534dc0");

		public unsafe IDXGIAdapter (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult EnumOutputs(uint output, IDXGIOutput** ppOutput)
		{
			IDXGIAdapter* ptr = (IDXGIAdapter*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, uint, IDXGIOutput**, HResult>)(LpVtbl[4]))(ptr, output, ppOutput);
			return ret;
		}

		public readonly unsafe HResult EnumOutputs(uint output, ref IDXGIOutput* ppOutput)
		{
			IDXGIAdapter* ptr = (IDXGIAdapter*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIOutput** pppOutput = &ppOutput)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, uint, IDXGIOutput**, HResult>)(LpVtbl[4]))(ptr, output, (IDXGIOutput**)pppOutput);
				return ret;
			}
		}

		public readonly unsafe HResult GetDesc(DxgiAdapterDesc* pDesc)
		{
			IDXGIAdapter* ptr = (IDXGIAdapter*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, DxgiAdapterDesc*, HResult>)(LpVtbl[5]))(ptr, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetDesc(ref DxgiAdapterDesc pDesc)
		{
			IDXGIAdapter* ptr = (IDXGIAdapter*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiAdapterDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, DxgiAdapterDesc*, HResult>)(LpVtbl[5]))(ptr, (DxgiAdapterDesc*)ppDesc);
				return ret;
			}
		}

		public readonly unsafe HResult CheckInterfaceSupport(Guid* interfaceName, long* pUMDVersion)
		{
			IDXGIAdapter* ptr = (IDXGIAdapter*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, long*, HResult>)(LpVtbl[6]))(ptr, interfaceName, pUMDVersion);
			return ret;
		}

		public readonly unsafe HResult CheckInterfaceSupport(ref Guid interfaceName, long* pUMDVersion)
		{
			IDXGIAdapter* ptr = (IDXGIAdapter*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pinterfaceName = &interfaceName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, long*, HResult>)(LpVtbl[6]))(ptr, (Guid*)pinterfaceName, pUMDVersion);
				return ret;
			}
		}

		public readonly unsafe HResult CheckInterfaceSupport(Guid* interfaceName, ref long pUMDVersion)
		{
			IDXGIAdapter* ptr = (IDXGIAdapter*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (long* ppUMDVersion = &pUMDVersion)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, long*, HResult>)(LpVtbl[6]))(ptr, interfaceName, (long*)ppUMDVersion);
				return ret;
			}
		}

		public readonly unsafe HResult CheckInterfaceSupport(ref Guid interfaceName, ref long pUMDVersion)
		{
			IDXGIAdapter* ptr = (IDXGIAdapter*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pinterfaceName = &interfaceName)
			{
				fixed (long* ppUMDVersion = &pUMDVersion)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter*, Guid*, long*, HResult>)(LpVtbl[6]))(ptr, (Guid*)pinterfaceName, (long*)ppUMDVersion);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIObject (IDXGIAdapter value)
		{
			return Unsafe.As<IDXGIAdapter, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIAdapter value)
		{
			return Unsafe.As<IDXGIAdapter, IUnknown>(ref value);
		}

	}

	[Guid("ae02eedb-c735-4690-8d52-5a8dc20213aa")]
	[NativeName("IDXGIOutput")]
	public partial struct IDXGIOutput : IComObject, IComObject<IDXGIOutput>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("ae02eedb-c735-4690-8d52-5a8dc20213aa");

		public unsafe IDXGIOutput (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetDesc(DxgiOutputDesc* pDesc)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiOutputDesc*, HResult>)(LpVtbl[4]))(ptr, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetDesc(ref DxgiOutputDesc pDesc)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiOutputDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiOutputDesc*, HResult>)(LpVtbl[4]))(ptr, (DxgiOutputDesc*)ppDesc);
				return ret;
			}
		}

		public readonly unsafe HResult GetDisplayModeList(DxgiFormat enumFormat, uint flags, uint* pNumModes, DxgiModeDesc* pDesc)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiFormat, uint, uint*, DxgiModeDesc*, HResult>)(LpVtbl[5]))(ptr, enumFormat, flags, pNumModes, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetDisplayModeList(DxgiFormat enumFormat, uint flags, ref uint pNumModes, DxgiModeDesc* pDesc)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumModes = &pNumModes)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiFormat, uint, uint*, DxgiModeDesc*, HResult>)(LpVtbl[5]))(ptr, enumFormat, flags, (uint*)ppNumModes, pDesc);
				return ret;
			}
		}

		public readonly unsafe HResult GetDisplayModeList(DxgiFormat enumFormat, uint flags, uint* pNumModes, ref DxgiModeDesc pDesc)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiModeDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiFormat, uint, uint*, DxgiModeDesc*, HResult>)(LpVtbl[5]))(ptr, enumFormat, flags, pNumModes, (DxgiModeDesc*)ppDesc);
				return ret;
			}
		}

		public readonly unsafe HResult GetDisplayModeList(DxgiFormat enumFormat, uint flags, ref uint pNumModes, ref DxgiModeDesc pDesc)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumModes = &pNumModes)
			{
				fixed (DxgiModeDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiFormat, uint, uint*, DxgiModeDesc*, HResult>)(LpVtbl[5]))(ptr, enumFormat, flags, (uint*)ppNumModes, (DxgiModeDesc*)ppDesc);
					return ret;
				}
			}
		}

		public readonly unsafe HResult FindClosestMatchingMode(DxgiModeDesc* pModeToMatch, DxgiModeDesc* pClosestMatch, IUnknown* pConcernedDevice)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiModeDesc*, DxgiModeDesc*, IUnknown*, HResult>)(LpVtbl[6]))(ptr, pModeToMatch, pClosestMatch, pConcernedDevice);
			return ret;
		}

		public readonly unsafe HResult FindClosestMatchingMode(ref DxgiModeDesc pModeToMatch, DxgiModeDesc* pClosestMatch, IUnknown* pConcernedDevice)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiModeDesc* ppModeToMatch = &pModeToMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiModeDesc*, DxgiModeDesc*, IUnknown*, HResult>)(LpVtbl[6]))(ptr, (DxgiModeDesc*)ppModeToMatch, pClosestMatch, pConcernedDevice);
				return ret;
			}
		}

		public readonly unsafe HResult FindClosestMatchingMode(DxgiModeDesc* pModeToMatch, ref DxgiModeDesc pClosestMatch, IUnknown* pConcernedDevice)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiModeDesc* ppClosestMatch = &pClosestMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiModeDesc*, DxgiModeDesc*, IUnknown*, HResult>)(LpVtbl[6]))(ptr, pModeToMatch, (DxgiModeDesc*)ppClosestMatch, pConcernedDevice);
				return ret;
			}
		}

		public readonly unsafe HResult FindClosestMatchingMode(ref DxgiModeDesc pModeToMatch, ref DxgiModeDesc pClosestMatch, IUnknown* pConcernedDevice)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiModeDesc* ppModeToMatch = &pModeToMatch)
			{
				fixed (DxgiModeDesc* ppClosestMatch = &pClosestMatch)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiModeDesc*, DxgiModeDesc*, IUnknown*, HResult>)(LpVtbl[6]))(ptr, (DxgiModeDesc*)ppModeToMatch, (DxgiModeDesc*)ppClosestMatch, pConcernedDevice);
					return ret;
				}
			}
		}

		public readonly unsafe HResult FindClosestMatchingMode(DxgiModeDesc* pModeToMatch, DxgiModeDesc* pClosestMatch, ref IUnknown pConcernedDevice)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiModeDesc*, DxgiModeDesc*, IUnknown*, HResult>)(LpVtbl[6]))(ptr, pModeToMatch, pClosestMatch, (IUnknown*)ppConcernedDevice);
				return ret;
			}
		}

		public readonly unsafe HResult FindClosestMatchingMode(ref DxgiModeDesc pModeToMatch, DxgiModeDesc* pClosestMatch, ref IUnknown pConcernedDevice)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiModeDesc* ppModeToMatch = &pModeToMatch)
			{
				fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiModeDesc*, DxgiModeDesc*, IUnknown*, HResult>)(LpVtbl[6]))(ptr, (DxgiModeDesc*)ppModeToMatch, pClosestMatch, (IUnknown*)ppConcernedDevice);
					return ret;
				}
			}
		}

		public readonly unsafe HResult FindClosestMatchingMode(DxgiModeDesc* pModeToMatch, ref DxgiModeDesc pClosestMatch, ref IUnknown pConcernedDevice)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiModeDesc* ppClosestMatch = &pClosestMatch)
			{
				fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiModeDesc*, DxgiModeDesc*, IUnknown*, HResult>)(LpVtbl[6]))(ptr, pModeToMatch, (DxgiModeDesc*)ppClosestMatch, (IUnknown*)ppConcernedDevice);
					return ret;
				}
			}
		}

		public readonly unsafe HResult FindClosestMatchingMode(ref DxgiModeDesc pModeToMatch, ref DxgiModeDesc pClosestMatch, ref IUnknown pConcernedDevice)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiModeDesc* ppModeToMatch = &pModeToMatch)
			{
				fixed (DxgiModeDesc* ppClosestMatch = &pClosestMatch)
				{
					fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiModeDesc*, DxgiModeDesc*, IUnknown*, HResult>)(LpVtbl[6]))(ptr, (DxgiModeDesc*)ppModeToMatch, (DxgiModeDesc*)ppClosestMatch, (IUnknown*)ppConcernedDevice);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult WaitForVBlank()
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, HResult>)(LpVtbl[7]))(ptr);
			return ret;
		}

		public readonly unsafe HResult TakeOwnership(IUnknown* pDevice, Bool32 exclusive)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IUnknown*, Bool32, HResult>)(LpVtbl[8]))(ptr, pDevice, exclusive);
			return ret;
		}

		public readonly unsafe HResult TakeOwnership(ref IUnknown pDevice, Bool32 exclusive)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IUnknown*, Bool32, HResult>)(LpVtbl[8]))(ptr, (IUnknown*)ppDevice, exclusive);
				return ret;
			}
		}

		public readonly unsafe void ReleaseOwnership()
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<IDXGIOutput*, void>)(LpVtbl[9]))(ptr);
		}

		public readonly unsafe HResult GetGammaControlCapabilities(DxgiGammaControlCapabilities* pGammaCaps)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiGammaControlCapabilities*, HResult>)(LpVtbl[10]))(ptr, pGammaCaps);
			return ret;
		}

		public readonly unsafe HResult GetGammaControlCapabilities(ref DxgiGammaControlCapabilities pGammaCaps)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiGammaControlCapabilities* ppGammaCaps = &pGammaCaps)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiGammaControlCapabilities*, HResult>)(LpVtbl[10]))(ptr, (DxgiGammaControlCapabilities*)ppGammaCaps);
				return ret;
			}
		}

		public readonly unsafe HResult SetGammaControl(DxgiGammaControl* pArray)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiGammaControl*, HResult>)(LpVtbl[11]))(ptr, pArray);
			return ret;
		}

		public readonly unsafe HResult SetGammaControl(ref DxgiGammaControl pArray)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiGammaControl* ppArray = &pArray)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiGammaControl*, HResult>)(LpVtbl[11]))(ptr, (DxgiGammaControl*)ppArray);
				return ret;
			}
		}

		public readonly unsafe HResult GetGammaControl(DxgiGammaControl* pArray)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiGammaControl*, HResult>)(LpVtbl[12]))(ptr, pArray);
			return ret;
		}

		public readonly unsafe HResult GetGammaControl(ref DxgiGammaControl pArray)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiGammaControl* ppArray = &pArray)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiGammaControl*, HResult>)(LpVtbl[12]))(ptr, (DxgiGammaControl*)ppArray);
				return ret;
			}
		}

		public readonly unsafe HResult SetDisplaySurface(IDXGISurface* pScanoutSurface)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IDXGISurface*, HResult>)(LpVtbl[13]))(ptr, pScanoutSurface);
			return ret;
		}

		public readonly unsafe HResult SetDisplaySurface(ref IDXGISurface pScanoutSurface)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGISurface* ppScanoutSurface = &pScanoutSurface)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IDXGISurface*, HResult>)(LpVtbl[13]))(ptr, (IDXGISurface*)ppScanoutSurface);
				return ret;
			}
		}

		public readonly unsafe HResult GetDisplaySurfaceData(IDXGISurface* pDestination)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IDXGISurface*, HResult>)(LpVtbl[14]))(ptr, pDestination);
			return ret;
		}

		public readonly unsafe HResult GetDisplaySurfaceData(ref IDXGISurface pDestination)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGISurface* ppDestination = &pDestination)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, IDXGISurface*, HResult>)(LpVtbl[14]))(ptr, (IDXGISurface*)ppDestination);
				return ret;
			}
		}

		public readonly unsafe HResult GetFrameStatistics(DxgiFrameStatistics* pStats)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiFrameStatistics*, HResult>)(LpVtbl[15]))(ptr, pStats);
			return ret;
		}

		public readonly unsafe HResult GetFrameStatistics(ref DxgiFrameStatistics pStats)
		{
			IDXGIOutput* ptr = (IDXGIOutput*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiFrameStatistics* ppStats = &pStats)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput*, DxgiFrameStatistics*, HResult>)(LpVtbl[15]))(ptr, (DxgiFrameStatistics*)ppStats);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIObject (IDXGIOutput value)
		{
			return Unsafe.As<IDXGIOutput, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIOutput value)
		{
			return Unsafe.As<IDXGIOutput, IUnknown>(ref value);
		}

	}

	[NativeName("DXGI_OUTPUT_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiOutputDesc
	{
		[NativeName("DeviceName")]
		public char DeviceName_0;
		public char DeviceName_1;
		public char DeviceName_2;
		public char DeviceName_3;
		public char DeviceName_4;
		public char DeviceName_5;
		public char DeviceName_6;
		public char DeviceName_7;
		public char DeviceName_8;
		public char DeviceName_9;
		public char DeviceName_10;
		public char DeviceName_11;
		public char DeviceName_12;
		public char DeviceName_13;
		public char DeviceName_14;
		public char DeviceName_15;
		public char DeviceName_16;
		public char DeviceName_17;
		public char DeviceName_18;
		public char DeviceName_19;
		public char DeviceName_20;
		public char DeviceName_21;
		public char DeviceName_22;
		public char DeviceName_23;
		public char DeviceName_24;
		public char DeviceName_25;
		public char DeviceName_26;
		public char DeviceName_27;
		public char DeviceName_28;
		public char DeviceName_29;
		public char DeviceName_30;
		public char DeviceName_31;
		[NativeName("DesktopCoordinates")]
		public Rect32 DesktopCoordinates;
		[NativeName("AttachedToDesktop")]
		public Bool32 AttachedToDesktop;
		[NativeName("Rotation")]
		public DxgiModeRotation Rotation;
		[NativeName("Monitor")]
		public nint Monitor;


	}

	[NativeName("DXGI_MODE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiModeDesc
	{
		[NativeName("Width")]
		public uint Width;
		[NativeName("Height")]
		public uint Height;
		[NativeName("RefreshRate")]
		public DxgiRational RefreshRate;
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("ScanlineOrdering")]
		public DxgiModeScanlineOrder ScanlineOrdering;
		[NativeName("Scaling")]
		public DxgiModeScaling Scaling;


	}

	[NativeName("DXGI_RATIONAL")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiRational
	{
		[NativeName("Numerator")]
		public uint Numerator;
		[NativeName("Denominator")]
		public uint Denominator;


	}

	[NativeName("DXGI_GAMMA_CONTROL_CAPABILITIES")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiGammaControlCapabilities
	{
		[NativeName("ScaleAndOffsetSupported")]
		public Bool32 ScaleAndOffsetSupported;
		[NativeName("MaxConvertedValue")]
		public float MaxConvertedValue;
		[NativeName("MinConvertedValue")]
		public float MinConvertedValue;
		[NativeName("NumGammaControlPoints")]
		public uint NumGammaControlPoints;
		[NativeName("ControlPointPositions")]
		public float ControlPointPositions_0;
		public float ControlPointPositions_1;
		public float ControlPointPositions_2;
		public float ControlPointPositions_3;
		public float ControlPointPositions_4;
		public float ControlPointPositions_5;
		public float ControlPointPositions_6;
		public float ControlPointPositions_7;
		public float ControlPointPositions_8;
		public float ControlPointPositions_9;
		public float ControlPointPositions_10;
		public float ControlPointPositions_11;
		public float ControlPointPositions_12;
		public float ControlPointPositions_13;
		public float ControlPointPositions_14;
		public float ControlPointPositions_15;
		public float ControlPointPositions_16;
		public float ControlPointPositions_17;
		public float ControlPointPositions_18;
		public float ControlPointPositions_19;
		public float ControlPointPositions_20;
		public float ControlPointPositions_21;
		public float ControlPointPositions_22;
		public float ControlPointPositions_23;
		public float ControlPointPositions_24;
		public float ControlPointPositions_25;
		public float ControlPointPositions_26;
		public float ControlPointPositions_27;
		public float ControlPointPositions_28;
		public float ControlPointPositions_29;
		public float ControlPointPositions_30;
		public float ControlPointPositions_31;
		public float ControlPointPositions_32;
		public float ControlPointPositions_33;
		public float ControlPointPositions_34;
		public float ControlPointPositions_35;
		public float ControlPointPositions_36;
		public float ControlPointPositions_37;
		public float ControlPointPositions_38;
		public float ControlPointPositions_39;
		public float ControlPointPositions_40;
		public float ControlPointPositions_41;
		public float ControlPointPositions_42;
		public float ControlPointPositions_43;
		public float ControlPointPositions_44;
		public float ControlPointPositions_45;
		public float ControlPointPositions_46;
		public float ControlPointPositions_47;
		public float ControlPointPositions_48;
		public float ControlPointPositions_49;
		public float ControlPointPositions_50;
		public float ControlPointPositions_51;
		public float ControlPointPositions_52;
		public float ControlPointPositions_53;
		public float ControlPointPositions_54;
		public float ControlPointPositions_55;
		public float ControlPointPositions_56;
		public float ControlPointPositions_57;
		public float ControlPointPositions_58;
		public float ControlPointPositions_59;
		public float ControlPointPositions_60;
		public float ControlPointPositions_61;
		public float ControlPointPositions_62;
		public float ControlPointPositions_63;
		public float ControlPointPositions_64;
		public float ControlPointPositions_65;
		public float ControlPointPositions_66;
		public float ControlPointPositions_67;
		public float ControlPointPositions_68;
		public float ControlPointPositions_69;
		public float ControlPointPositions_70;
		public float ControlPointPositions_71;
		public float ControlPointPositions_72;
		public float ControlPointPositions_73;
		public float ControlPointPositions_74;
		public float ControlPointPositions_75;
		public float ControlPointPositions_76;
		public float ControlPointPositions_77;
		public float ControlPointPositions_78;
		public float ControlPointPositions_79;
		public float ControlPointPositions_80;
		public float ControlPointPositions_81;
		public float ControlPointPositions_82;
		public float ControlPointPositions_83;
		public float ControlPointPositions_84;
		public float ControlPointPositions_85;
		public float ControlPointPositions_86;
		public float ControlPointPositions_87;
		public float ControlPointPositions_88;
		public float ControlPointPositions_89;
		public float ControlPointPositions_90;
		public float ControlPointPositions_91;
		public float ControlPointPositions_92;
		public float ControlPointPositions_93;
		public float ControlPointPositions_94;
		public float ControlPointPositions_95;
		public float ControlPointPositions_96;
		public float ControlPointPositions_97;
		public float ControlPointPositions_98;
		public float ControlPointPositions_99;
		public float ControlPointPositions_100;
		public float ControlPointPositions_101;
		public float ControlPointPositions_102;
		public float ControlPointPositions_103;
		public float ControlPointPositions_104;
		public float ControlPointPositions_105;
		public float ControlPointPositions_106;
		public float ControlPointPositions_107;
		public float ControlPointPositions_108;
		public float ControlPointPositions_109;
		public float ControlPointPositions_110;
		public float ControlPointPositions_111;
		public float ControlPointPositions_112;
		public float ControlPointPositions_113;
		public float ControlPointPositions_114;
		public float ControlPointPositions_115;
		public float ControlPointPositions_116;
		public float ControlPointPositions_117;
		public float ControlPointPositions_118;
		public float ControlPointPositions_119;
		public float ControlPointPositions_120;
		public float ControlPointPositions_121;
		public float ControlPointPositions_122;
		public float ControlPointPositions_123;
		public float ControlPointPositions_124;
		public float ControlPointPositions_125;
		public float ControlPointPositions_126;
		public float ControlPointPositions_127;
		public float ControlPointPositions_128;
		public float ControlPointPositions_129;
		public float ControlPointPositions_130;
		public float ControlPointPositions_131;
		public float ControlPointPositions_132;
		public float ControlPointPositions_133;
		public float ControlPointPositions_134;
		public float ControlPointPositions_135;
		public float ControlPointPositions_136;
		public float ControlPointPositions_137;
		public float ControlPointPositions_138;
		public float ControlPointPositions_139;
		public float ControlPointPositions_140;
		public float ControlPointPositions_141;
		public float ControlPointPositions_142;
		public float ControlPointPositions_143;
		public float ControlPointPositions_144;
		public float ControlPointPositions_145;
		public float ControlPointPositions_146;
		public float ControlPointPositions_147;
		public float ControlPointPositions_148;
		public float ControlPointPositions_149;
		public float ControlPointPositions_150;
		public float ControlPointPositions_151;
		public float ControlPointPositions_152;
		public float ControlPointPositions_153;
		public float ControlPointPositions_154;
		public float ControlPointPositions_155;
		public float ControlPointPositions_156;
		public float ControlPointPositions_157;
		public float ControlPointPositions_158;
		public float ControlPointPositions_159;
		public float ControlPointPositions_160;
		public float ControlPointPositions_161;
		public float ControlPointPositions_162;
		public float ControlPointPositions_163;
		public float ControlPointPositions_164;
		public float ControlPointPositions_165;
		public float ControlPointPositions_166;
		public float ControlPointPositions_167;
		public float ControlPointPositions_168;
		public float ControlPointPositions_169;
		public float ControlPointPositions_170;
		public float ControlPointPositions_171;
		public float ControlPointPositions_172;
		public float ControlPointPositions_173;
		public float ControlPointPositions_174;
		public float ControlPointPositions_175;
		public float ControlPointPositions_176;
		public float ControlPointPositions_177;
		public float ControlPointPositions_178;
		public float ControlPointPositions_179;
		public float ControlPointPositions_180;
		public float ControlPointPositions_181;
		public float ControlPointPositions_182;
		public float ControlPointPositions_183;
		public float ControlPointPositions_184;
		public float ControlPointPositions_185;
		public float ControlPointPositions_186;
		public float ControlPointPositions_187;
		public float ControlPointPositions_188;
		public float ControlPointPositions_189;
		public float ControlPointPositions_190;
		public float ControlPointPositions_191;
		public float ControlPointPositions_192;
		public float ControlPointPositions_193;
		public float ControlPointPositions_194;
		public float ControlPointPositions_195;
		public float ControlPointPositions_196;
		public float ControlPointPositions_197;
		public float ControlPointPositions_198;
		public float ControlPointPositions_199;
		public float ControlPointPositions_200;
		public float ControlPointPositions_201;
		public float ControlPointPositions_202;
		public float ControlPointPositions_203;
		public float ControlPointPositions_204;
		public float ControlPointPositions_205;
		public float ControlPointPositions_206;
		public float ControlPointPositions_207;
		public float ControlPointPositions_208;
		public float ControlPointPositions_209;
		public float ControlPointPositions_210;
		public float ControlPointPositions_211;
		public float ControlPointPositions_212;
		public float ControlPointPositions_213;
		public float ControlPointPositions_214;
		public float ControlPointPositions_215;
		public float ControlPointPositions_216;
		public float ControlPointPositions_217;
		public float ControlPointPositions_218;
		public float ControlPointPositions_219;
		public float ControlPointPositions_220;
		public float ControlPointPositions_221;
		public float ControlPointPositions_222;
		public float ControlPointPositions_223;
		public float ControlPointPositions_224;
		public float ControlPointPositions_225;
		public float ControlPointPositions_226;
		public float ControlPointPositions_227;
		public float ControlPointPositions_228;
		public float ControlPointPositions_229;
		public float ControlPointPositions_230;
		public float ControlPointPositions_231;
		public float ControlPointPositions_232;
		public float ControlPointPositions_233;
		public float ControlPointPositions_234;
		public float ControlPointPositions_235;
		public float ControlPointPositions_236;
		public float ControlPointPositions_237;
		public float ControlPointPositions_238;
		public float ControlPointPositions_239;
		public float ControlPointPositions_240;
		public float ControlPointPositions_241;
		public float ControlPointPositions_242;
		public float ControlPointPositions_243;
		public float ControlPointPositions_244;
		public float ControlPointPositions_245;
		public float ControlPointPositions_246;
		public float ControlPointPositions_247;
		public float ControlPointPositions_248;
		public float ControlPointPositions_249;
		public float ControlPointPositions_250;
		public float ControlPointPositions_251;
		public float ControlPointPositions_252;
		public float ControlPointPositions_253;
		public float ControlPointPositions_254;
		public float ControlPointPositions_255;
		public float ControlPointPositions_256;
		public float ControlPointPositions_257;
		public float ControlPointPositions_258;
		public float ControlPointPositions_259;
		public float ControlPointPositions_260;
		public float ControlPointPositions_261;
		public float ControlPointPositions_262;
		public float ControlPointPositions_263;
		public float ControlPointPositions_264;
		public float ControlPointPositions_265;
		public float ControlPointPositions_266;
		public float ControlPointPositions_267;
		public float ControlPointPositions_268;
		public float ControlPointPositions_269;
		public float ControlPointPositions_270;
		public float ControlPointPositions_271;
		public float ControlPointPositions_272;
		public float ControlPointPositions_273;
		public float ControlPointPositions_274;
		public float ControlPointPositions_275;
		public float ControlPointPositions_276;
		public float ControlPointPositions_277;
		public float ControlPointPositions_278;
		public float ControlPointPositions_279;
		public float ControlPointPositions_280;
		public float ControlPointPositions_281;
		public float ControlPointPositions_282;
		public float ControlPointPositions_283;
		public float ControlPointPositions_284;
		public float ControlPointPositions_285;
		public float ControlPointPositions_286;
		public float ControlPointPositions_287;
		public float ControlPointPositions_288;
		public float ControlPointPositions_289;
		public float ControlPointPositions_290;
		public float ControlPointPositions_291;
		public float ControlPointPositions_292;
		public float ControlPointPositions_293;
		public float ControlPointPositions_294;
		public float ControlPointPositions_295;
		public float ControlPointPositions_296;
		public float ControlPointPositions_297;
		public float ControlPointPositions_298;
		public float ControlPointPositions_299;
		public float ControlPointPositions_300;
		public float ControlPointPositions_301;
		public float ControlPointPositions_302;
		public float ControlPointPositions_303;
		public float ControlPointPositions_304;
		public float ControlPointPositions_305;
		public float ControlPointPositions_306;
		public float ControlPointPositions_307;
		public float ControlPointPositions_308;
		public float ControlPointPositions_309;
		public float ControlPointPositions_310;
		public float ControlPointPositions_311;
		public float ControlPointPositions_312;
		public float ControlPointPositions_313;
		public float ControlPointPositions_314;
		public float ControlPointPositions_315;
		public float ControlPointPositions_316;
		public float ControlPointPositions_317;
		public float ControlPointPositions_318;
		public float ControlPointPositions_319;
		public float ControlPointPositions_320;
		public float ControlPointPositions_321;
		public float ControlPointPositions_322;
		public float ControlPointPositions_323;
		public float ControlPointPositions_324;
		public float ControlPointPositions_325;
		public float ControlPointPositions_326;
		public float ControlPointPositions_327;
		public float ControlPointPositions_328;
		public float ControlPointPositions_329;
		public float ControlPointPositions_330;
		public float ControlPointPositions_331;
		public float ControlPointPositions_332;
		public float ControlPointPositions_333;
		public float ControlPointPositions_334;
		public float ControlPointPositions_335;
		public float ControlPointPositions_336;
		public float ControlPointPositions_337;
		public float ControlPointPositions_338;
		public float ControlPointPositions_339;
		public float ControlPointPositions_340;
		public float ControlPointPositions_341;
		public float ControlPointPositions_342;
		public float ControlPointPositions_343;
		public float ControlPointPositions_344;
		public float ControlPointPositions_345;
		public float ControlPointPositions_346;
		public float ControlPointPositions_347;
		public float ControlPointPositions_348;
		public float ControlPointPositions_349;
		public float ControlPointPositions_350;
		public float ControlPointPositions_351;
		public float ControlPointPositions_352;
		public float ControlPointPositions_353;
		public float ControlPointPositions_354;
		public float ControlPointPositions_355;
		public float ControlPointPositions_356;
		public float ControlPointPositions_357;
		public float ControlPointPositions_358;
		public float ControlPointPositions_359;
		public float ControlPointPositions_360;
		public float ControlPointPositions_361;
		public float ControlPointPositions_362;
		public float ControlPointPositions_363;
		public float ControlPointPositions_364;
		public float ControlPointPositions_365;
		public float ControlPointPositions_366;
		public float ControlPointPositions_367;
		public float ControlPointPositions_368;
		public float ControlPointPositions_369;
		public float ControlPointPositions_370;
		public float ControlPointPositions_371;
		public float ControlPointPositions_372;
		public float ControlPointPositions_373;
		public float ControlPointPositions_374;
		public float ControlPointPositions_375;
		public float ControlPointPositions_376;
		public float ControlPointPositions_377;
		public float ControlPointPositions_378;
		public float ControlPointPositions_379;
		public float ControlPointPositions_380;
		public float ControlPointPositions_381;
		public float ControlPointPositions_382;
		public float ControlPointPositions_383;
		public float ControlPointPositions_384;
		public float ControlPointPositions_385;
		public float ControlPointPositions_386;
		public float ControlPointPositions_387;
		public float ControlPointPositions_388;
		public float ControlPointPositions_389;
		public float ControlPointPositions_390;
		public float ControlPointPositions_391;
		public float ControlPointPositions_392;
		public float ControlPointPositions_393;
		public float ControlPointPositions_394;
		public float ControlPointPositions_395;
		public float ControlPointPositions_396;
		public float ControlPointPositions_397;
		public float ControlPointPositions_398;
		public float ControlPointPositions_399;
		public float ControlPointPositions_400;
		public float ControlPointPositions_401;
		public float ControlPointPositions_402;
		public float ControlPointPositions_403;
		public float ControlPointPositions_404;
		public float ControlPointPositions_405;
		public float ControlPointPositions_406;
		public float ControlPointPositions_407;
		public float ControlPointPositions_408;
		public float ControlPointPositions_409;
		public float ControlPointPositions_410;
		public float ControlPointPositions_411;
		public float ControlPointPositions_412;
		public float ControlPointPositions_413;
		public float ControlPointPositions_414;
		public float ControlPointPositions_415;
		public float ControlPointPositions_416;
		public float ControlPointPositions_417;
		public float ControlPointPositions_418;
		public float ControlPointPositions_419;
		public float ControlPointPositions_420;
		public float ControlPointPositions_421;
		public float ControlPointPositions_422;
		public float ControlPointPositions_423;
		public float ControlPointPositions_424;
		public float ControlPointPositions_425;
		public float ControlPointPositions_426;
		public float ControlPointPositions_427;
		public float ControlPointPositions_428;
		public float ControlPointPositions_429;
		public float ControlPointPositions_430;
		public float ControlPointPositions_431;
		public float ControlPointPositions_432;
		public float ControlPointPositions_433;
		public float ControlPointPositions_434;
		public float ControlPointPositions_435;
		public float ControlPointPositions_436;
		public float ControlPointPositions_437;
		public float ControlPointPositions_438;
		public float ControlPointPositions_439;
		public float ControlPointPositions_440;
		public float ControlPointPositions_441;
		public float ControlPointPositions_442;
		public float ControlPointPositions_443;
		public float ControlPointPositions_444;
		public float ControlPointPositions_445;
		public float ControlPointPositions_446;
		public float ControlPointPositions_447;
		public float ControlPointPositions_448;
		public float ControlPointPositions_449;
		public float ControlPointPositions_450;
		public float ControlPointPositions_451;
		public float ControlPointPositions_452;
		public float ControlPointPositions_453;
		public float ControlPointPositions_454;
		public float ControlPointPositions_455;
		public float ControlPointPositions_456;
		public float ControlPointPositions_457;
		public float ControlPointPositions_458;
		public float ControlPointPositions_459;
		public float ControlPointPositions_460;
		public float ControlPointPositions_461;
		public float ControlPointPositions_462;
		public float ControlPointPositions_463;
		public float ControlPointPositions_464;
		public float ControlPointPositions_465;
		public float ControlPointPositions_466;
		public float ControlPointPositions_467;
		public float ControlPointPositions_468;
		public float ControlPointPositions_469;
		public float ControlPointPositions_470;
		public float ControlPointPositions_471;
		public float ControlPointPositions_472;
		public float ControlPointPositions_473;
		public float ControlPointPositions_474;
		public float ControlPointPositions_475;
		public float ControlPointPositions_476;
		public float ControlPointPositions_477;
		public float ControlPointPositions_478;
		public float ControlPointPositions_479;
		public float ControlPointPositions_480;
		public float ControlPointPositions_481;
		public float ControlPointPositions_482;
		public float ControlPointPositions_483;
		public float ControlPointPositions_484;
		public float ControlPointPositions_485;
		public float ControlPointPositions_486;
		public float ControlPointPositions_487;
		public float ControlPointPositions_488;
		public float ControlPointPositions_489;
		public float ControlPointPositions_490;
		public float ControlPointPositions_491;
		public float ControlPointPositions_492;
		public float ControlPointPositions_493;
		public float ControlPointPositions_494;
		public float ControlPointPositions_495;
		public float ControlPointPositions_496;
		public float ControlPointPositions_497;
		public float ControlPointPositions_498;
		public float ControlPointPositions_499;
		public float ControlPointPositions_500;
		public float ControlPointPositions_501;
		public float ControlPointPositions_502;
		public float ControlPointPositions_503;
		public float ControlPointPositions_504;
		public float ControlPointPositions_505;
		public float ControlPointPositions_506;
		public float ControlPointPositions_507;
		public float ControlPointPositions_508;
		public float ControlPointPositions_509;
		public float ControlPointPositions_510;
		public float ControlPointPositions_511;
		public float ControlPointPositions_512;
		public float ControlPointPositions_513;
		public float ControlPointPositions_514;
		public float ControlPointPositions_515;
		public float ControlPointPositions_516;
		public float ControlPointPositions_517;
		public float ControlPointPositions_518;
		public float ControlPointPositions_519;
		public float ControlPointPositions_520;
		public float ControlPointPositions_521;
		public float ControlPointPositions_522;
		public float ControlPointPositions_523;
		public float ControlPointPositions_524;
		public float ControlPointPositions_525;
		public float ControlPointPositions_526;
		public float ControlPointPositions_527;
		public float ControlPointPositions_528;
		public float ControlPointPositions_529;
		public float ControlPointPositions_530;
		public float ControlPointPositions_531;
		public float ControlPointPositions_532;
		public float ControlPointPositions_533;
		public float ControlPointPositions_534;
		public float ControlPointPositions_535;
		public float ControlPointPositions_536;
		public float ControlPointPositions_537;
		public float ControlPointPositions_538;
		public float ControlPointPositions_539;
		public float ControlPointPositions_540;
		public float ControlPointPositions_541;
		public float ControlPointPositions_542;
		public float ControlPointPositions_543;
		public float ControlPointPositions_544;
		public float ControlPointPositions_545;
		public float ControlPointPositions_546;
		public float ControlPointPositions_547;
		public float ControlPointPositions_548;
		public float ControlPointPositions_549;
		public float ControlPointPositions_550;
		public float ControlPointPositions_551;
		public float ControlPointPositions_552;
		public float ControlPointPositions_553;
		public float ControlPointPositions_554;
		public float ControlPointPositions_555;
		public float ControlPointPositions_556;
		public float ControlPointPositions_557;
		public float ControlPointPositions_558;
		public float ControlPointPositions_559;
		public float ControlPointPositions_560;
		public float ControlPointPositions_561;
		public float ControlPointPositions_562;
		public float ControlPointPositions_563;
		public float ControlPointPositions_564;
		public float ControlPointPositions_565;
		public float ControlPointPositions_566;
		public float ControlPointPositions_567;
		public float ControlPointPositions_568;
		public float ControlPointPositions_569;
		public float ControlPointPositions_570;
		public float ControlPointPositions_571;
		public float ControlPointPositions_572;
		public float ControlPointPositions_573;
		public float ControlPointPositions_574;
		public float ControlPointPositions_575;
		public float ControlPointPositions_576;
		public float ControlPointPositions_577;
		public float ControlPointPositions_578;
		public float ControlPointPositions_579;
		public float ControlPointPositions_580;
		public float ControlPointPositions_581;
		public float ControlPointPositions_582;
		public float ControlPointPositions_583;
		public float ControlPointPositions_584;
		public float ControlPointPositions_585;
		public float ControlPointPositions_586;
		public float ControlPointPositions_587;
		public float ControlPointPositions_588;
		public float ControlPointPositions_589;
		public float ControlPointPositions_590;
		public float ControlPointPositions_591;
		public float ControlPointPositions_592;
		public float ControlPointPositions_593;
		public float ControlPointPositions_594;
		public float ControlPointPositions_595;
		public float ControlPointPositions_596;
		public float ControlPointPositions_597;
		public float ControlPointPositions_598;
		public float ControlPointPositions_599;
		public float ControlPointPositions_600;
		public float ControlPointPositions_601;
		public float ControlPointPositions_602;
		public float ControlPointPositions_603;
		public float ControlPointPositions_604;
		public float ControlPointPositions_605;
		public float ControlPointPositions_606;
		public float ControlPointPositions_607;
		public float ControlPointPositions_608;
		public float ControlPointPositions_609;
		public float ControlPointPositions_610;
		public float ControlPointPositions_611;
		public float ControlPointPositions_612;
		public float ControlPointPositions_613;
		public float ControlPointPositions_614;
		public float ControlPointPositions_615;
		public float ControlPointPositions_616;
		public float ControlPointPositions_617;
		public float ControlPointPositions_618;
		public float ControlPointPositions_619;
		public float ControlPointPositions_620;
		public float ControlPointPositions_621;
		public float ControlPointPositions_622;
		public float ControlPointPositions_623;
		public float ControlPointPositions_624;
		public float ControlPointPositions_625;
		public float ControlPointPositions_626;
		public float ControlPointPositions_627;
		public float ControlPointPositions_628;
		public float ControlPointPositions_629;
		public float ControlPointPositions_630;
		public float ControlPointPositions_631;
		public float ControlPointPositions_632;
		public float ControlPointPositions_633;
		public float ControlPointPositions_634;
		public float ControlPointPositions_635;
		public float ControlPointPositions_636;
		public float ControlPointPositions_637;
		public float ControlPointPositions_638;
		public float ControlPointPositions_639;
		public float ControlPointPositions_640;
		public float ControlPointPositions_641;
		public float ControlPointPositions_642;
		public float ControlPointPositions_643;
		public float ControlPointPositions_644;
		public float ControlPointPositions_645;
		public float ControlPointPositions_646;
		public float ControlPointPositions_647;
		public float ControlPointPositions_648;
		public float ControlPointPositions_649;
		public float ControlPointPositions_650;
		public float ControlPointPositions_651;
		public float ControlPointPositions_652;
		public float ControlPointPositions_653;
		public float ControlPointPositions_654;
		public float ControlPointPositions_655;
		public float ControlPointPositions_656;
		public float ControlPointPositions_657;
		public float ControlPointPositions_658;
		public float ControlPointPositions_659;
		public float ControlPointPositions_660;
		public float ControlPointPositions_661;
		public float ControlPointPositions_662;
		public float ControlPointPositions_663;
		public float ControlPointPositions_664;
		public float ControlPointPositions_665;
		public float ControlPointPositions_666;
		public float ControlPointPositions_667;
		public float ControlPointPositions_668;
		public float ControlPointPositions_669;
		public float ControlPointPositions_670;
		public float ControlPointPositions_671;
		public float ControlPointPositions_672;
		public float ControlPointPositions_673;
		public float ControlPointPositions_674;
		public float ControlPointPositions_675;
		public float ControlPointPositions_676;
		public float ControlPointPositions_677;
		public float ControlPointPositions_678;
		public float ControlPointPositions_679;
		public float ControlPointPositions_680;
		public float ControlPointPositions_681;
		public float ControlPointPositions_682;
		public float ControlPointPositions_683;
		public float ControlPointPositions_684;
		public float ControlPointPositions_685;
		public float ControlPointPositions_686;
		public float ControlPointPositions_687;
		public float ControlPointPositions_688;
		public float ControlPointPositions_689;
		public float ControlPointPositions_690;
		public float ControlPointPositions_691;
		public float ControlPointPositions_692;
		public float ControlPointPositions_693;
		public float ControlPointPositions_694;
		public float ControlPointPositions_695;
		public float ControlPointPositions_696;
		public float ControlPointPositions_697;
		public float ControlPointPositions_698;
		public float ControlPointPositions_699;
		public float ControlPointPositions_700;
		public float ControlPointPositions_701;
		public float ControlPointPositions_702;
		public float ControlPointPositions_703;
		public float ControlPointPositions_704;
		public float ControlPointPositions_705;
		public float ControlPointPositions_706;
		public float ControlPointPositions_707;
		public float ControlPointPositions_708;
		public float ControlPointPositions_709;
		public float ControlPointPositions_710;
		public float ControlPointPositions_711;
		public float ControlPointPositions_712;
		public float ControlPointPositions_713;
		public float ControlPointPositions_714;
		public float ControlPointPositions_715;
		public float ControlPointPositions_716;
		public float ControlPointPositions_717;
		public float ControlPointPositions_718;
		public float ControlPointPositions_719;
		public float ControlPointPositions_720;
		public float ControlPointPositions_721;
		public float ControlPointPositions_722;
		public float ControlPointPositions_723;
		public float ControlPointPositions_724;
		public float ControlPointPositions_725;
		public float ControlPointPositions_726;
		public float ControlPointPositions_727;
		public float ControlPointPositions_728;
		public float ControlPointPositions_729;
		public float ControlPointPositions_730;
		public float ControlPointPositions_731;
		public float ControlPointPositions_732;
		public float ControlPointPositions_733;
		public float ControlPointPositions_734;
		public float ControlPointPositions_735;
		public float ControlPointPositions_736;
		public float ControlPointPositions_737;
		public float ControlPointPositions_738;
		public float ControlPointPositions_739;
		public float ControlPointPositions_740;
		public float ControlPointPositions_741;
		public float ControlPointPositions_742;
		public float ControlPointPositions_743;
		public float ControlPointPositions_744;
		public float ControlPointPositions_745;
		public float ControlPointPositions_746;
		public float ControlPointPositions_747;
		public float ControlPointPositions_748;
		public float ControlPointPositions_749;
		public float ControlPointPositions_750;
		public float ControlPointPositions_751;
		public float ControlPointPositions_752;
		public float ControlPointPositions_753;
		public float ControlPointPositions_754;
		public float ControlPointPositions_755;
		public float ControlPointPositions_756;
		public float ControlPointPositions_757;
		public float ControlPointPositions_758;
		public float ControlPointPositions_759;
		public float ControlPointPositions_760;
		public float ControlPointPositions_761;
		public float ControlPointPositions_762;
		public float ControlPointPositions_763;
		public float ControlPointPositions_764;
		public float ControlPointPositions_765;
		public float ControlPointPositions_766;
		public float ControlPointPositions_767;
		public float ControlPointPositions_768;
		public float ControlPointPositions_769;
		public float ControlPointPositions_770;
		public float ControlPointPositions_771;
		public float ControlPointPositions_772;
		public float ControlPointPositions_773;
		public float ControlPointPositions_774;
		public float ControlPointPositions_775;
		public float ControlPointPositions_776;
		public float ControlPointPositions_777;
		public float ControlPointPositions_778;
		public float ControlPointPositions_779;
		public float ControlPointPositions_780;
		public float ControlPointPositions_781;
		public float ControlPointPositions_782;
		public float ControlPointPositions_783;
		public float ControlPointPositions_784;
		public float ControlPointPositions_785;
		public float ControlPointPositions_786;
		public float ControlPointPositions_787;
		public float ControlPointPositions_788;
		public float ControlPointPositions_789;
		public float ControlPointPositions_790;
		public float ControlPointPositions_791;
		public float ControlPointPositions_792;
		public float ControlPointPositions_793;
		public float ControlPointPositions_794;
		public float ControlPointPositions_795;
		public float ControlPointPositions_796;
		public float ControlPointPositions_797;
		public float ControlPointPositions_798;
		public float ControlPointPositions_799;
		public float ControlPointPositions_800;
		public float ControlPointPositions_801;
		public float ControlPointPositions_802;
		public float ControlPointPositions_803;
		public float ControlPointPositions_804;
		public float ControlPointPositions_805;
		public float ControlPointPositions_806;
		public float ControlPointPositions_807;
		public float ControlPointPositions_808;
		public float ControlPointPositions_809;
		public float ControlPointPositions_810;
		public float ControlPointPositions_811;
		public float ControlPointPositions_812;
		public float ControlPointPositions_813;
		public float ControlPointPositions_814;
		public float ControlPointPositions_815;
		public float ControlPointPositions_816;
		public float ControlPointPositions_817;
		public float ControlPointPositions_818;
		public float ControlPointPositions_819;
		public float ControlPointPositions_820;
		public float ControlPointPositions_821;
		public float ControlPointPositions_822;
		public float ControlPointPositions_823;
		public float ControlPointPositions_824;
		public float ControlPointPositions_825;
		public float ControlPointPositions_826;
		public float ControlPointPositions_827;
		public float ControlPointPositions_828;
		public float ControlPointPositions_829;
		public float ControlPointPositions_830;
		public float ControlPointPositions_831;
		public float ControlPointPositions_832;
		public float ControlPointPositions_833;
		public float ControlPointPositions_834;
		public float ControlPointPositions_835;
		public float ControlPointPositions_836;
		public float ControlPointPositions_837;
		public float ControlPointPositions_838;
		public float ControlPointPositions_839;
		public float ControlPointPositions_840;
		public float ControlPointPositions_841;
		public float ControlPointPositions_842;
		public float ControlPointPositions_843;
		public float ControlPointPositions_844;
		public float ControlPointPositions_845;
		public float ControlPointPositions_846;
		public float ControlPointPositions_847;
		public float ControlPointPositions_848;
		public float ControlPointPositions_849;
		public float ControlPointPositions_850;
		public float ControlPointPositions_851;
		public float ControlPointPositions_852;
		public float ControlPointPositions_853;
		public float ControlPointPositions_854;
		public float ControlPointPositions_855;
		public float ControlPointPositions_856;
		public float ControlPointPositions_857;
		public float ControlPointPositions_858;
		public float ControlPointPositions_859;
		public float ControlPointPositions_860;
		public float ControlPointPositions_861;
		public float ControlPointPositions_862;
		public float ControlPointPositions_863;
		public float ControlPointPositions_864;
		public float ControlPointPositions_865;
		public float ControlPointPositions_866;
		public float ControlPointPositions_867;
		public float ControlPointPositions_868;
		public float ControlPointPositions_869;
		public float ControlPointPositions_870;
		public float ControlPointPositions_871;
		public float ControlPointPositions_872;
		public float ControlPointPositions_873;
		public float ControlPointPositions_874;
		public float ControlPointPositions_875;
		public float ControlPointPositions_876;
		public float ControlPointPositions_877;
		public float ControlPointPositions_878;
		public float ControlPointPositions_879;
		public float ControlPointPositions_880;
		public float ControlPointPositions_881;
		public float ControlPointPositions_882;
		public float ControlPointPositions_883;
		public float ControlPointPositions_884;
		public float ControlPointPositions_885;
		public float ControlPointPositions_886;
		public float ControlPointPositions_887;
		public float ControlPointPositions_888;
		public float ControlPointPositions_889;
		public float ControlPointPositions_890;
		public float ControlPointPositions_891;
		public float ControlPointPositions_892;
		public float ControlPointPositions_893;
		public float ControlPointPositions_894;
		public float ControlPointPositions_895;
		public float ControlPointPositions_896;
		public float ControlPointPositions_897;
		public float ControlPointPositions_898;
		public float ControlPointPositions_899;
		public float ControlPointPositions_900;
		public float ControlPointPositions_901;
		public float ControlPointPositions_902;
		public float ControlPointPositions_903;
		public float ControlPointPositions_904;
		public float ControlPointPositions_905;
		public float ControlPointPositions_906;
		public float ControlPointPositions_907;
		public float ControlPointPositions_908;
		public float ControlPointPositions_909;
		public float ControlPointPositions_910;
		public float ControlPointPositions_911;
		public float ControlPointPositions_912;
		public float ControlPointPositions_913;
		public float ControlPointPositions_914;
		public float ControlPointPositions_915;
		public float ControlPointPositions_916;
		public float ControlPointPositions_917;
		public float ControlPointPositions_918;
		public float ControlPointPositions_919;
		public float ControlPointPositions_920;
		public float ControlPointPositions_921;
		public float ControlPointPositions_922;
		public float ControlPointPositions_923;
		public float ControlPointPositions_924;
		public float ControlPointPositions_925;
		public float ControlPointPositions_926;
		public float ControlPointPositions_927;
		public float ControlPointPositions_928;
		public float ControlPointPositions_929;
		public float ControlPointPositions_930;
		public float ControlPointPositions_931;
		public float ControlPointPositions_932;
		public float ControlPointPositions_933;
		public float ControlPointPositions_934;
		public float ControlPointPositions_935;
		public float ControlPointPositions_936;
		public float ControlPointPositions_937;
		public float ControlPointPositions_938;
		public float ControlPointPositions_939;
		public float ControlPointPositions_940;
		public float ControlPointPositions_941;
		public float ControlPointPositions_942;
		public float ControlPointPositions_943;
		public float ControlPointPositions_944;
		public float ControlPointPositions_945;
		public float ControlPointPositions_946;
		public float ControlPointPositions_947;
		public float ControlPointPositions_948;
		public float ControlPointPositions_949;
		public float ControlPointPositions_950;
		public float ControlPointPositions_951;
		public float ControlPointPositions_952;
		public float ControlPointPositions_953;
		public float ControlPointPositions_954;
		public float ControlPointPositions_955;
		public float ControlPointPositions_956;
		public float ControlPointPositions_957;
		public float ControlPointPositions_958;
		public float ControlPointPositions_959;
		public float ControlPointPositions_960;
		public float ControlPointPositions_961;
		public float ControlPointPositions_962;
		public float ControlPointPositions_963;
		public float ControlPointPositions_964;
		public float ControlPointPositions_965;
		public float ControlPointPositions_966;
		public float ControlPointPositions_967;
		public float ControlPointPositions_968;
		public float ControlPointPositions_969;
		public float ControlPointPositions_970;
		public float ControlPointPositions_971;
		public float ControlPointPositions_972;
		public float ControlPointPositions_973;
		public float ControlPointPositions_974;
		public float ControlPointPositions_975;
		public float ControlPointPositions_976;
		public float ControlPointPositions_977;
		public float ControlPointPositions_978;
		public float ControlPointPositions_979;
		public float ControlPointPositions_980;
		public float ControlPointPositions_981;
		public float ControlPointPositions_982;
		public float ControlPointPositions_983;
		public float ControlPointPositions_984;
		public float ControlPointPositions_985;
		public float ControlPointPositions_986;
		public float ControlPointPositions_987;
		public float ControlPointPositions_988;
		public float ControlPointPositions_989;
		public float ControlPointPositions_990;
		public float ControlPointPositions_991;
		public float ControlPointPositions_992;
		public float ControlPointPositions_993;
		public float ControlPointPositions_994;
		public float ControlPointPositions_995;
		public float ControlPointPositions_996;
		public float ControlPointPositions_997;
		public float ControlPointPositions_998;
		public float ControlPointPositions_999;
		public float ControlPointPositions_1000;
		public float ControlPointPositions_1001;
		public float ControlPointPositions_1002;
		public float ControlPointPositions_1003;
		public float ControlPointPositions_1004;
		public float ControlPointPositions_1005;
		public float ControlPointPositions_1006;
		public float ControlPointPositions_1007;
		public float ControlPointPositions_1008;
		public float ControlPointPositions_1009;
		public float ControlPointPositions_1010;
		public float ControlPointPositions_1011;
		public float ControlPointPositions_1012;
		public float ControlPointPositions_1013;
		public float ControlPointPositions_1014;
		public float ControlPointPositions_1015;
		public float ControlPointPositions_1016;
		public float ControlPointPositions_1017;
		public float ControlPointPositions_1018;
		public float ControlPointPositions_1019;
		public float ControlPointPositions_1020;
		public float ControlPointPositions_1021;
		public float ControlPointPositions_1022;
		public float ControlPointPositions_1023;
		public float ControlPointPositions_1024;


	}

	[NativeName("DXGI_GAMMA_CONTROL")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiGammaControl
	{
		[NativeName("Scale")]
		public DxgiRgb Scale;
		[NativeName("Offset")]
		public DxgiRgb Offset;
		[NativeName("GammaCurve")]
		public DxgiRgb GammaCurve_0;
		public DxgiRgb GammaCurve_1;
		public DxgiRgb GammaCurve_2;
		public DxgiRgb GammaCurve_3;
		public DxgiRgb GammaCurve_4;
		public DxgiRgb GammaCurve_5;
		public DxgiRgb GammaCurve_6;
		public DxgiRgb GammaCurve_7;
		public DxgiRgb GammaCurve_8;
		public DxgiRgb GammaCurve_9;
		public DxgiRgb GammaCurve_10;
		public DxgiRgb GammaCurve_11;
		public DxgiRgb GammaCurve_12;
		public DxgiRgb GammaCurve_13;
		public DxgiRgb GammaCurve_14;
		public DxgiRgb GammaCurve_15;
		public DxgiRgb GammaCurve_16;
		public DxgiRgb GammaCurve_17;
		public DxgiRgb GammaCurve_18;
		public DxgiRgb GammaCurve_19;
		public DxgiRgb GammaCurve_20;
		public DxgiRgb GammaCurve_21;
		public DxgiRgb GammaCurve_22;
		public DxgiRgb GammaCurve_23;
		public DxgiRgb GammaCurve_24;
		public DxgiRgb GammaCurve_25;
		public DxgiRgb GammaCurve_26;
		public DxgiRgb GammaCurve_27;
		public DxgiRgb GammaCurve_28;
		public DxgiRgb GammaCurve_29;
		public DxgiRgb GammaCurve_30;
		public DxgiRgb GammaCurve_31;
		public DxgiRgb GammaCurve_32;
		public DxgiRgb GammaCurve_33;
		public DxgiRgb GammaCurve_34;
		public DxgiRgb GammaCurve_35;
		public DxgiRgb GammaCurve_36;
		public DxgiRgb GammaCurve_37;
		public DxgiRgb GammaCurve_38;
		public DxgiRgb GammaCurve_39;
		public DxgiRgb GammaCurve_40;
		public DxgiRgb GammaCurve_41;
		public DxgiRgb GammaCurve_42;
		public DxgiRgb GammaCurve_43;
		public DxgiRgb GammaCurve_44;
		public DxgiRgb GammaCurve_45;
		public DxgiRgb GammaCurve_46;
		public DxgiRgb GammaCurve_47;
		public DxgiRgb GammaCurve_48;
		public DxgiRgb GammaCurve_49;
		public DxgiRgb GammaCurve_50;
		public DxgiRgb GammaCurve_51;
		public DxgiRgb GammaCurve_52;
		public DxgiRgb GammaCurve_53;
		public DxgiRgb GammaCurve_54;
		public DxgiRgb GammaCurve_55;
		public DxgiRgb GammaCurve_56;
		public DxgiRgb GammaCurve_57;
		public DxgiRgb GammaCurve_58;
		public DxgiRgb GammaCurve_59;
		public DxgiRgb GammaCurve_60;
		public DxgiRgb GammaCurve_61;
		public DxgiRgb GammaCurve_62;
		public DxgiRgb GammaCurve_63;
		public DxgiRgb GammaCurve_64;
		public DxgiRgb GammaCurve_65;
		public DxgiRgb GammaCurve_66;
		public DxgiRgb GammaCurve_67;
		public DxgiRgb GammaCurve_68;
		public DxgiRgb GammaCurve_69;
		public DxgiRgb GammaCurve_70;
		public DxgiRgb GammaCurve_71;
		public DxgiRgb GammaCurve_72;
		public DxgiRgb GammaCurve_73;
		public DxgiRgb GammaCurve_74;
		public DxgiRgb GammaCurve_75;
		public DxgiRgb GammaCurve_76;
		public DxgiRgb GammaCurve_77;
		public DxgiRgb GammaCurve_78;
		public DxgiRgb GammaCurve_79;
		public DxgiRgb GammaCurve_80;
		public DxgiRgb GammaCurve_81;
		public DxgiRgb GammaCurve_82;
		public DxgiRgb GammaCurve_83;
		public DxgiRgb GammaCurve_84;
		public DxgiRgb GammaCurve_85;
		public DxgiRgb GammaCurve_86;
		public DxgiRgb GammaCurve_87;
		public DxgiRgb GammaCurve_88;
		public DxgiRgb GammaCurve_89;
		public DxgiRgb GammaCurve_90;
		public DxgiRgb GammaCurve_91;
		public DxgiRgb GammaCurve_92;
		public DxgiRgb GammaCurve_93;
		public DxgiRgb GammaCurve_94;
		public DxgiRgb GammaCurve_95;
		public DxgiRgb GammaCurve_96;
		public DxgiRgb GammaCurve_97;
		public DxgiRgb GammaCurve_98;
		public DxgiRgb GammaCurve_99;
		public DxgiRgb GammaCurve_100;
		public DxgiRgb GammaCurve_101;
		public DxgiRgb GammaCurve_102;
		public DxgiRgb GammaCurve_103;
		public DxgiRgb GammaCurve_104;
		public DxgiRgb GammaCurve_105;
		public DxgiRgb GammaCurve_106;
		public DxgiRgb GammaCurve_107;
		public DxgiRgb GammaCurve_108;
		public DxgiRgb GammaCurve_109;
		public DxgiRgb GammaCurve_110;
		public DxgiRgb GammaCurve_111;
		public DxgiRgb GammaCurve_112;
		public DxgiRgb GammaCurve_113;
		public DxgiRgb GammaCurve_114;
		public DxgiRgb GammaCurve_115;
		public DxgiRgb GammaCurve_116;
		public DxgiRgb GammaCurve_117;
		public DxgiRgb GammaCurve_118;
		public DxgiRgb GammaCurve_119;
		public DxgiRgb GammaCurve_120;
		public DxgiRgb GammaCurve_121;
		public DxgiRgb GammaCurve_122;
		public DxgiRgb GammaCurve_123;
		public DxgiRgb GammaCurve_124;
		public DxgiRgb GammaCurve_125;
		public DxgiRgb GammaCurve_126;
		public DxgiRgb GammaCurve_127;
		public DxgiRgb GammaCurve_128;
		public DxgiRgb GammaCurve_129;
		public DxgiRgb GammaCurve_130;
		public DxgiRgb GammaCurve_131;
		public DxgiRgb GammaCurve_132;
		public DxgiRgb GammaCurve_133;
		public DxgiRgb GammaCurve_134;
		public DxgiRgb GammaCurve_135;
		public DxgiRgb GammaCurve_136;
		public DxgiRgb GammaCurve_137;
		public DxgiRgb GammaCurve_138;
		public DxgiRgb GammaCurve_139;
		public DxgiRgb GammaCurve_140;
		public DxgiRgb GammaCurve_141;
		public DxgiRgb GammaCurve_142;
		public DxgiRgb GammaCurve_143;
		public DxgiRgb GammaCurve_144;
		public DxgiRgb GammaCurve_145;
		public DxgiRgb GammaCurve_146;
		public DxgiRgb GammaCurve_147;
		public DxgiRgb GammaCurve_148;
		public DxgiRgb GammaCurve_149;
		public DxgiRgb GammaCurve_150;
		public DxgiRgb GammaCurve_151;
		public DxgiRgb GammaCurve_152;
		public DxgiRgb GammaCurve_153;
		public DxgiRgb GammaCurve_154;
		public DxgiRgb GammaCurve_155;
		public DxgiRgb GammaCurve_156;
		public DxgiRgb GammaCurve_157;
		public DxgiRgb GammaCurve_158;
		public DxgiRgb GammaCurve_159;
		public DxgiRgb GammaCurve_160;
		public DxgiRgb GammaCurve_161;
		public DxgiRgb GammaCurve_162;
		public DxgiRgb GammaCurve_163;
		public DxgiRgb GammaCurve_164;
		public DxgiRgb GammaCurve_165;
		public DxgiRgb GammaCurve_166;
		public DxgiRgb GammaCurve_167;
		public DxgiRgb GammaCurve_168;
		public DxgiRgb GammaCurve_169;
		public DxgiRgb GammaCurve_170;
		public DxgiRgb GammaCurve_171;
		public DxgiRgb GammaCurve_172;
		public DxgiRgb GammaCurve_173;
		public DxgiRgb GammaCurve_174;
		public DxgiRgb GammaCurve_175;
		public DxgiRgb GammaCurve_176;
		public DxgiRgb GammaCurve_177;
		public DxgiRgb GammaCurve_178;
		public DxgiRgb GammaCurve_179;
		public DxgiRgb GammaCurve_180;
		public DxgiRgb GammaCurve_181;
		public DxgiRgb GammaCurve_182;
		public DxgiRgb GammaCurve_183;
		public DxgiRgb GammaCurve_184;
		public DxgiRgb GammaCurve_185;
		public DxgiRgb GammaCurve_186;
		public DxgiRgb GammaCurve_187;
		public DxgiRgb GammaCurve_188;
		public DxgiRgb GammaCurve_189;
		public DxgiRgb GammaCurve_190;
		public DxgiRgb GammaCurve_191;
		public DxgiRgb GammaCurve_192;
		public DxgiRgb GammaCurve_193;
		public DxgiRgb GammaCurve_194;
		public DxgiRgb GammaCurve_195;
		public DxgiRgb GammaCurve_196;
		public DxgiRgb GammaCurve_197;
		public DxgiRgb GammaCurve_198;
		public DxgiRgb GammaCurve_199;
		public DxgiRgb GammaCurve_200;
		public DxgiRgb GammaCurve_201;
		public DxgiRgb GammaCurve_202;
		public DxgiRgb GammaCurve_203;
		public DxgiRgb GammaCurve_204;
		public DxgiRgb GammaCurve_205;
		public DxgiRgb GammaCurve_206;
		public DxgiRgb GammaCurve_207;
		public DxgiRgb GammaCurve_208;
		public DxgiRgb GammaCurve_209;
		public DxgiRgb GammaCurve_210;
		public DxgiRgb GammaCurve_211;
		public DxgiRgb GammaCurve_212;
		public DxgiRgb GammaCurve_213;
		public DxgiRgb GammaCurve_214;
		public DxgiRgb GammaCurve_215;
		public DxgiRgb GammaCurve_216;
		public DxgiRgb GammaCurve_217;
		public DxgiRgb GammaCurve_218;
		public DxgiRgb GammaCurve_219;
		public DxgiRgb GammaCurve_220;
		public DxgiRgb GammaCurve_221;
		public DxgiRgb GammaCurve_222;
		public DxgiRgb GammaCurve_223;
		public DxgiRgb GammaCurve_224;
		public DxgiRgb GammaCurve_225;
		public DxgiRgb GammaCurve_226;
		public DxgiRgb GammaCurve_227;
		public DxgiRgb GammaCurve_228;
		public DxgiRgb GammaCurve_229;
		public DxgiRgb GammaCurve_230;
		public DxgiRgb GammaCurve_231;
		public DxgiRgb GammaCurve_232;
		public DxgiRgb GammaCurve_233;
		public DxgiRgb GammaCurve_234;
		public DxgiRgb GammaCurve_235;
		public DxgiRgb GammaCurve_236;
		public DxgiRgb GammaCurve_237;
		public DxgiRgb GammaCurve_238;
		public DxgiRgb GammaCurve_239;
		public DxgiRgb GammaCurve_240;
		public DxgiRgb GammaCurve_241;
		public DxgiRgb GammaCurve_242;
		public DxgiRgb GammaCurve_243;
		public DxgiRgb GammaCurve_244;
		public DxgiRgb GammaCurve_245;
		public DxgiRgb GammaCurve_246;
		public DxgiRgb GammaCurve_247;
		public DxgiRgb GammaCurve_248;
		public DxgiRgb GammaCurve_249;
		public DxgiRgb GammaCurve_250;
		public DxgiRgb GammaCurve_251;
		public DxgiRgb GammaCurve_252;
		public DxgiRgb GammaCurve_253;
		public DxgiRgb GammaCurve_254;
		public DxgiRgb GammaCurve_255;
		public DxgiRgb GammaCurve_256;
		public DxgiRgb GammaCurve_257;
		public DxgiRgb GammaCurve_258;
		public DxgiRgb GammaCurve_259;
		public DxgiRgb GammaCurve_260;
		public DxgiRgb GammaCurve_261;
		public DxgiRgb GammaCurve_262;
		public DxgiRgb GammaCurve_263;
		public DxgiRgb GammaCurve_264;
		public DxgiRgb GammaCurve_265;
		public DxgiRgb GammaCurve_266;
		public DxgiRgb GammaCurve_267;
		public DxgiRgb GammaCurve_268;
		public DxgiRgb GammaCurve_269;
		public DxgiRgb GammaCurve_270;
		public DxgiRgb GammaCurve_271;
		public DxgiRgb GammaCurve_272;
		public DxgiRgb GammaCurve_273;
		public DxgiRgb GammaCurve_274;
		public DxgiRgb GammaCurve_275;
		public DxgiRgb GammaCurve_276;
		public DxgiRgb GammaCurve_277;
		public DxgiRgb GammaCurve_278;
		public DxgiRgb GammaCurve_279;
		public DxgiRgb GammaCurve_280;
		public DxgiRgb GammaCurve_281;
		public DxgiRgb GammaCurve_282;
		public DxgiRgb GammaCurve_283;
		public DxgiRgb GammaCurve_284;
		public DxgiRgb GammaCurve_285;
		public DxgiRgb GammaCurve_286;
		public DxgiRgb GammaCurve_287;
		public DxgiRgb GammaCurve_288;
		public DxgiRgb GammaCurve_289;
		public DxgiRgb GammaCurve_290;
		public DxgiRgb GammaCurve_291;
		public DxgiRgb GammaCurve_292;
		public DxgiRgb GammaCurve_293;
		public DxgiRgb GammaCurve_294;
		public DxgiRgb GammaCurve_295;
		public DxgiRgb GammaCurve_296;
		public DxgiRgb GammaCurve_297;
		public DxgiRgb GammaCurve_298;
		public DxgiRgb GammaCurve_299;
		public DxgiRgb GammaCurve_300;
		public DxgiRgb GammaCurve_301;
		public DxgiRgb GammaCurve_302;
		public DxgiRgb GammaCurve_303;
		public DxgiRgb GammaCurve_304;
		public DxgiRgb GammaCurve_305;
		public DxgiRgb GammaCurve_306;
		public DxgiRgb GammaCurve_307;
		public DxgiRgb GammaCurve_308;
		public DxgiRgb GammaCurve_309;
		public DxgiRgb GammaCurve_310;
		public DxgiRgb GammaCurve_311;
		public DxgiRgb GammaCurve_312;
		public DxgiRgb GammaCurve_313;
		public DxgiRgb GammaCurve_314;
		public DxgiRgb GammaCurve_315;
		public DxgiRgb GammaCurve_316;
		public DxgiRgb GammaCurve_317;
		public DxgiRgb GammaCurve_318;
		public DxgiRgb GammaCurve_319;
		public DxgiRgb GammaCurve_320;
		public DxgiRgb GammaCurve_321;
		public DxgiRgb GammaCurve_322;
		public DxgiRgb GammaCurve_323;
		public DxgiRgb GammaCurve_324;
		public DxgiRgb GammaCurve_325;
		public DxgiRgb GammaCurve_326;
		public DxgiRgb GammaCurve_327;
		public DxgiRgb GammaCurve_328;
		public DxgiRgb GammaCurve_329;
		public DxgiRgb GammaCurve_330;
		public DxgiRgb GammaCurve_331;
		public DxgiRgb GammaCurve_332;
		public DxgiRgb GammaCurve_333;
		public DxgiRgb GammaCurve_334;
		public DxgiRgb GammaCurve_335;
		public DxgiRgb GammaCurve_336;
		public DxgiRgb GammaCurve_337;
		public DxgiRgb GammaCurve_338;
		public DxgiRgb GammaCurve_339;
		public DxgiRgb GammaCurve_340;
		public DxgiRgb GammaCurve_341;
		public DxgiRgb GammaCurve_342;
		public DxgiRgb GammaCurve_343;
		public DxgiRgb GammaCurve_344;
		public DxgiRgb GammaCurve_345;
		public DxgiRgb GammaCurve_346;
		public DxgiRgb GammaCurve_347;
		public DxgiRgb GammaCurve_348;
		public DxgiRgb GammaCurve_349;
		public DxgiRgb GammaCurve_350;
		public DxgiRgb GammaCurve_351;
		public DxgiRgb GammaCurve_352;
		public DxgiRgb GammaCurve_353;
		public DxgiRgb GammaCurve_354;
		public DxgiRgb GammaCurve_355;
		public DxgiRgb GammaCurve_356;
		public DxgiRgb GammaCurve_357;
		public DxgiRgb GammaCurve_358;
		public DxgiRgb GammaCurve_359;
		public DxgiRgb GammaCurve_360;
		public DxgiRgb GammaCurve_361;
		public DxgiRgb GammaCurve_362;
		public DxgiRgb GammaCurve_363;
		public DxgiRgb GammaCurve_364;
		public DxgiRgb GammaCurve_365;
		public DxgiRgb GammaCurve_366;
		public DxgiRgb GammaCurve_367;
		public DxgiRgb GammaCurve_368;
		public DxgiRgb GammaCurve_369;
		public DxgiRgb GammaCurve_370;
		public DxgiRgb GammaCurve_371;
		public DxgiRgb GammaCurve_372;
		public DxgiRgb GammaCurve_373;
		public DxgiRgb GammaCurve_374;
		public DxgiRgb GammaCurve_375;
		public DxgiRgb GammaCurve_376;
		public DxgiRgb GammaCurve_377;
		public DxgiRgb GammaCurve_378;
		public DxgiRgb GammaCurve_379;
		public DxgiRgb GammaCurve_380;
		public DxgiRgb GammaCurve_381;
		public DxgiRgb GammaCurve_382;
		public DxgiRgb GammaCurve_383;
		public DxgiRgb GammaCurve_384;
		public DxgiRgb GammaCurve_385;
		public DxgiRgb GammaCurve_386;
		public DxgiRgb GammaCurve_387;
		public DxgiRgb GammaCurve_388;
		public DxgiRgb GammaCurve_389;
		public DxgiRgb GammaCurve_390;
		public DxgiRgb GammaCurve_391;
		public DxgiRgb GammaCurve_392;
		public DxgiRgb GammaCurve_393;
		public DxgiRgb GammaCurve_394;
		public DxgiRgb GammaCurve_395;
		public DxgiRgb GammaCurve_396;
		public DxgiRgb GammaCurve_397;
		public DxgiRgb GammaCurve_398;
		public DxgiRgb GammaCurve_399;
		public DxgiRgb GammaCurve_400;
		public DxgiRgb GammaCurve_401;
		public DxgiRgb GammaCurve_402;
		public DxgiRgb GammaCurve_403;
		public DxgiRgb GammaCurve_404;
		public DxgiRgb GammaCurve_405;
		public DxgiRgb GammaCurve_406;
		public DxgiRgb GammaCurve_407;
		public DxgiRgb GammaCurve_408;
		public DxgiRgb GammaCurve_409;
		public DxgiRgb GammaCurve_410;
		public DxgiRgb GammaCurve_411;
		public DxgiRgb GammaCurve_412;
		public DxgiRgb GammaCurve_413;
		public DxgiRgb GammaCurve_414;
		public DxgiRgb GammaCurve_415;
		public DxgiRgb GammaCurve_416;
		public DxgiRgb GammaCurve_417;
		public DxgiRgb GammaCurve_418;
		public DxgiRgb GammaCurve_419;
		public DxgiRgb GammaCurve_420;
		public DxgiRgb GammaCurve_421;
		public DxgiRgb GammaCurve_422;
		public DxgiRgb GammaCurve_423;
		public DxgiRgb GammaCurve_424;
		public DxgiRgb GammaCurve_425;
		public DxgiRgb GammaCurve_426;
		public DxgiRgb GammaCurve_427;
		public DxgiRgb GammaCurve_428;
		public DxgiRgb GammaCurve_429;
		public DxgiRgb GammaCurve_430;
		public DxgiRgb GammaCurve_431;
		public DxgiRgb GammaCurve_432;
		public DxgiRgb GammaCurve_433;
		public DxgiRgb GammaCurve_434;
		public DxgiRgb GammaCurve_435;
		public DxgiRgb GammaCurve_436;
		public DxgiRgb GammaCurve_437;
		public DxgiRgb GammaCurve_438;
		public DxgiRgb GammaCurve_439;
		public DxgiRgb GammaCurve_440;
		public DxgiRgb GammaCurve_441;
		public DxgiRgb GammaCurve_442;
		public DxgiRgb GammaCurve_443;
		public DxgiRgb GammaCurve_444;
		public DxgiRgb GammaCurve_445;
		public DxgiRgb GammaCurve_446;
		public DxgiRgb GammaCurve_447;
		public DxgiRgb GammaCurve_448;
		public DxgiRgb GammaCurve_449;
		public DxgiRgb GammaCurve_450;
		public DxgiRgb GammaCurve_451;
		public DxgiRgb GammaCurve_452;
		public DxgiRgb GammaCurve_453;
		public DxgiRgb GammaCurve_454;
		public DxgiRgb GammaCurve_455;
		public DxgiRgb GammaCurve_456;
		public DxgiRgb GammaCurve_457;
		public DxgiRgb GammaCurve_458;
		public DxgiRgb GammaCurve_459;
		public DxgiRgb GammaCurve_460;
		public DxgiRgb GammaCurve_461;
		public DxgiRgb GammaCurve_462;
		public DxgiRgb GammaCurve_463;
		public DxgiRgb GammaCurve_464;
		public DxgiRgb GammaCurve_465;
		public DxgiRgb GammaCurve_466;
		public DxgiRgb GammaCurve_467;
		public DxgiRgb GammaCurve_468;
		public DxgiRgb GammaCurve_469;
		public DxgiRgb GammaCurve_470;
		public DxgiRgb GammaCurve_471;
		public DxgiRgb GammaCurve_472;
		public DxgiRgb GammaCurve_473;
		public DxgiRgb GammaCurve_474;
		public DxgiRgb GammaCurve_475;
		public DxgiRgb GammaCurve_476;
		public DxgiRgb GammaCurve_477;
		public DxgiRgb GammaCurve_478;
		public DxgiRgb GammaCurve_479;
		public DxgiRgb GammaCurve_480;
		public DxgiRgb GammaCurve_481;
		public DxgiRgb GammaCurve_482;
		public DxgiRgb GammaCurve_483;
		public DxgiRgb GammaCurve_484;
		public DxgiRgb GammaCurve_485;
		public DxgiRgb GammaCurve_486;
		public DxgiRgb GammaCurve_487;
		public DxgiRgb GammaCurve_488;
		public DxgiRgb GammaCurve_489;
		public DxgiRgb GammaCurve_490;
		public DxgiRgb GammaCurve_491;
		public DxgiRgb GammaCurve_492;
		public DxgiRgb GammaCurve_493;
		public DxgiRgb GammaCurve_494;
		public DxgiRgb GammaCurve_495;
		public DxgiRgb GammaCurve_496;
		public DxgiRgb GammaCurve_497;
		public DxgiRgb GammaCurve_498;
		public DxgiRgb GammaCurve_499;
		public DxgiRgb GammaCurve_500;
		public DxgiRgb GammaCurve_501;
		public DxgiRgb GammaCurve_502;
		public DxgiRgb GammaCurve_503;
		public DxgiRgb GammaCurve_504;
		public DxgiRgb GammaCurve_505;
		public DxgiRgb GammaCurve_506;
		public DxgiRgb GammaCurve_507;
		public DxgiRgb GammaCurve_508;
		public DxgiRgb GammaCurve_509;
		public DxgiRgb GammaCurve_510;
		public DxgiRgb GammaCurve_511;
		public DxgiRgb GammaCurve_512;
		public DxgiRgb GammaCurve_513;
		public DxgiRgb GammaCurve_514;
		public DxgiRgb GammaCurve_515;
		public DxgiRgb GammaCurve_516;
		public DxgiRgb GammaCurve_517;
		public DxgiRgb GammaCurve_518;
		public DxgiRgb GammaCurve_519;
		public DxgiRgb GammaCurve_520;
		public DxgiRgb GammaCurve_521;
		public DxgiRgb GammaCurve_522;
		public DxgiRgb GammaCurve_523;
		public DxgiRgb GammaCurve_524;
		public DxgiRgb GammaCurve_525;
		public DxgiRgb GammaCurve_526;
		public DxgiRgb GammaCurve_527;
		public DxgiRgb GammaCurve_528;
		public DxgiRgb GammaCurve_529;
		public DxgiRgb GammaCurve_530;
		public DxgiRgb GammaCurve_531;
		public DxgiRgb GammaCurve_532;
		public DxgiRgb GammaCurve_533;
		public DxgiRgb GammaCurve_534;
		public DxgiRgb GammaCurve_535;
		public DxgiRgb GammaCurve_536;
		public DxgiRgb GammaCurve_537;
		public DxgiRgb GammaCurve_538;
		public DxgiRgb GammaCurve_539;
		public DxgiRgb GammaCurve_540;
		public DxgiRgb GammaCurve_541;
		public DxgiRgb GammaCurve_542;
		public DxgiRgb GammaCurve_543;
		public DxgiRgb GammaCurve_544;
		public DxgiRgb GammaCurve_545;
		public DxgiRgb GammaCurve_546;
		public DxgiRgb GammaCurve_547;
		public DxgiRgb GammaCurve_548;
		public DxgiRgb GammaCurve_549;
		public DxgiRgb GammaCurve_550;
		public DxgiRgb GammaCurve_551;
		public DxgiRgb GammaCurve_552;
		public DxgiRgb GammaCurve_553;
		public DxgiRgb GammaCurve_554;
		public DxgiRgb GammaCurve_555;
		public DxgiRgb GammaCurve_556;
		public DxgiRgb GammaCurve_557;
		public DxgiRgb GammaCurve_558;
		public DxgiRgb GammaCurve_559;
		public DxgiRgb GammaCurve_560;
		public DxgiRgb GammaCurve_561;
		public DxgiRgb GammaCurve_562;
		public DxgiRgb GammaCurve_563;
		public DxgiRgb GammaCurve_564;
		public DxgiRgb GammaCurve_565;
		public DxgiRgb GammaCurve_566;
		public DxgiRgb GammaCurve_567;
		public DxgiRgb GammaCurve_568;
		public DxgiRgb GammaCurve_569;
		public DxgiRgb GammaCurve_570;
		public DxgiRgb GammaCurve_571;
		public DxgiRgb GammaCurve_572;
		public DxgiRgb GammaCurve_573;
		public DxgiRgb GammaCurve_574;
		public DxgiRgb GammaCurve_575;
		public DxgiRgb GammaCurve_576;
		public DxgiRgb GammaCurve_577;
		public DxgiRgb GammaCurve_578;
		public DxgiRgb GammaCurve_579;
		public DxgiRgb GammaCurve_580;
		public DxgiRgb GammaCurve_581;
		public DxgiRgb GammaCurve_582;
		public DxgiRgb GammaCurve_583;
		public DxgiRgb GammaCurve_584;
		public DxgiRgb GammaCurve_585;
		public DxgiRgb GammaCurve_586;
		public DxgiRgb GammaCurve_587;
		public DxgiRgb GammaCurve_588;
		public DxgiRgb GammaCurve_589;
		public DxgiRgb GammaCurve_590;
		public DxgiRgb GammaCurve_591;
		public DxgiRgb GammaCurve_592;
		public DxgiRgb GammaCurve_593;
		public DxgiRgb GammaCurve_594;
		public DxgiRgb GammaCurve_595;
		public DxgiRgb GammaCurve_596;
		public DxgiRgb GammaCurve_597;
		public DxgiRgb GammaCurve_598;
		public DxgiRgb GammaCurve_599;
		public DxgiRgb GammaCurve_600;
		public DxgiRgb GammaCurve_601;
		public DxgiRgb GammaCurve_602;
		public DxgiRgb GammaCurve_603;
		public DxgiRgb GammaCurve_604;
		public DxgiRgb GammaCurve_605;
		public DxgiRgb GammaCurve_606;
		public DxgiRgb GammaCurve_607;
		public DxgiRgb GammaCurve_608;
		public DxgiRgb GammaCurve_609;
		public DxgiRgb GammaCurve_610;
		public DxgiRgb GammaCurve_611;
		public DxgiRgb GammaCurve_612;
		public DxgiRgb GammaCurve_613;
		public DxgiRgb GammaCurve_614;
		public DxgiRgb GammaCurve_615;
		public DxgiRgb GammaCurve_616;
		public DxgiRgb GammaCurve_617;
		public DxgiRgb GammaCurve_618;
		public DxgiRgb GammaCurve_619;
		public DxgiRgb GammaCurve_620;
		public DxgiRgb GammaCurve_621;
		public DxgiRgb GammaCurve_622;
		public DxgiRgb GammaCurve_623;
		public DxgiRgb GammaCurve_624;
		public DxgiRgb GammaCurve_625;
		public DxgiRgb GammaCurve_626;
		public DxgiRgb GammaCurve_627;
		public DxgiRgb GammaCurve_628;
		public DxgiRgb GammaCurve_629;
		public DxgiRgb GammaCurve_630;
		public DxgiRgb GammaCurve_631;
		public DxgiRgb GammaCurve_632;
		public DxgiRgb GammaCurve_633;
		public DxgiRgb GammaCurve_634;
		public DxgiRgb GammaCurve_635;
		public DxgiRgb GammaCurve_636;
		public DxgiRgb GammaCurve_637;
		public DxgiRgb GammaCurve_638;
		public DxgiRgb GammaCurve_639;
		public DxgiRgb GammaCurve_640;
		public DxgiRgb GammaCurve_641;
		public DxgiRgb GammaCurve_642;
		public DxgiRgb GammaCurve_643;
		public DxgiRgb GammaCurve_644;
		public DxgiRgb GammaCurve_645;
		public DxgiRgb GammaCurve_646;
		public DxgiRgb GammaCurve_647;
		public DxgiRgb GammaCurve_648;
		public DxgiRgb GammaCurve_649;
		public DxgiRgb GammaCurve_650;
		public DxgiRgb GammaCurve_651;
		public DxgiRgb GammaCurve_652;
		public DxgiRgb GammaCurve_653;
		public DxgiRgb GammaCurve_654;
		public DxgiRgb GammaCurve_655;
		public DxgiRgb GammaCurve_656;
		public DxgiRgb GammaCurve_657;
		public DxgiRgb GammaCurve_658;
		public DxgiRgb GammaCurve_659;
		public DxgiRgb GammaCurve_660;
		public DxgiRgb GammaCurve_661;
		public DxgiRgb GammaCurve_662;
		public DxgiRgb GammaCurve_663;
		public DxgiRgb GammaCurve_664;
		public DxgiRgb GammaCurve_665;
		public DxgiRgb GammaCurve_666;
		public DxgiRgb GammaCurve_667;
		public DxgiRgb GammaCurve_668;
		public DxgiRgb GammaCurve_669;
		public DxgiRgb GammaCurve_670;
		public DxgiRgb GammaCurve_671;
		public DxgiRgb GammaCurve_672;
		public DxgiRgb GammaCurve_673;
		public DxgiRgb GammaCurve_674;
		public DxgiRgb GammaCurve_675;
		public DxgiRgb GammaCurve_676;
		public DxgiRgb GammaCurve_677;
		public DxgiRgb GammaCurve_678;
		public DxgiRgb GammaCurve_679;
		public DxgiRgb GammaCurve_680;
		public DxgiRgb GammaCurve_681;
		public DxgiRgb GammaCurve_682;
		public DxgiRgb GammaCurve_683;
		public DxgiRgb GammaCurve_684;
		public DxgiRgb GammaCurve_685;
		public DxgiRgb GammaCurve_686;
		public DxgiRgb GammaCurve_687;
		public DxgiRgb GammaCurve_688;
		public DxgiRgb GammaCurve_689;
		public DxgiRgb GammaCurve_690;
		public DxgiRgb GammaCurve_691;
		public DxgiRgb GammaCurve_692;
		public DxgiRgb GammaCurve_693;
		public DxgiRgb GammaCurve_694;
		public DxgiRgb GammaCurve_695;
		public DxgiRgb GammaCurve_696;
		public DxgiRgb GammaCurve_697;
		public DxgiRgb GammaCurve_698;
		public DxgiRgb GammaCurve_699;
		public DxgiRgb GammaCurve_700;
		public DxgiRgb GammaCurve_701;
		public DxgiRgb GammaCurve_702;
		public DxgiRgb GammaCurve_703;
		public DxgiRgb GammaCurve_704;
		public DxgiRgb GammaCurve_705;
		public DxgiRgb GammaCurve_706;
		public DxgiRgb GammaCurve_707;
		public DxgiRgb GammaCurve_708;
		public DxgiRgb GammaCurve_709;
		public DxgiRgb GammaCurve_710;
		public DxgiRgb GammaCurve_711;
		public DxgiRgb GammaCurve_712;
		public DxgiRgb GammaCurve_713;
		public DxgiRgb GammaCurve_714;
		public DxgiRgb GammaCurve_715;
		public DxgiRgb GammaCurve_716;
		public DxgiRgb GammaCurve_717;
		public DxgiRgb GammaCurve_718;
		public DxgiRgb GammaCurve_719;
		public DxgiRgb GammaCurve_720;
		public DxgiRgb GammaCurve_721;
		public DxgiRgb GammaCurve_722;
		public DxgiRgb GammaCurve_723;
		public DxgiRgb GammaCurve_724;
		public DxgiRgb GammaCurve_725;
		public DxgiRgb GammaCurve_726;
		public DxgiRgb GammaCurve_727;
		public DxgiRgb GammaCurve_728;
		public DxgiRgb GammaCurve_729;
		public DxgiRgb GammaCurve_730;
		public DxgiRgb GammaCurve_731;
		public DxgiRgb GammaCurve_732;
		public DxgiRgb GammaCurve_733;
		public DxgiRgb GammaCurve_734;
		public DxgiRgb GammaCurve_735;
		public DxgiRgb GammaCurve_736;
		public DxgiRgb GammaCurve_737;
		public DxgiRgb GammaCurve_738;
		public DxgiRgb GammaCurve_739;
		public DxgiRgb GammaCurve_740;
		public DxgiRgb GammaCurve_741;
		public DxgiRgb GammaCurve_742;
		public DxgiRgb GammaCurve_743;
		public DxgiRgb GammaCurve_744;
		public DxgiRgb GammaCurve_745;
		public DxgiRgb GammaCurve_746;
		public DxgiRgb GammaCurve_747;
		public DxgiRgb GammaCurve_748;
		public DxgiRgb GammaCurve_749;
		public DxgiRgb GammaCurve_750;
		public DxgiRgb GammaCurve_751;
		public DxgiRgb GammaCurve_752;
		public DxgiRgb GammaCurve_753;
		public DxgiRgb GammaCurve_754;
		public DxgiRgb GammaCurve_755;
		public DxgiRgb GammaCurve_756;
		public DxgiRgb GammaCurve_757;
		public DxgiRgb GammaCurve_758;
		public DxgiRgb GammaCurve_759;
		public DxgiRgb GammaCurve_760;
		public DxgiRgb GammaCurve_761;
		public DxgiRgb GammaCurve_762;
		public DxgiRgb GammaCurve_763;
		public DxgiRgb GammaCurve_764;
		public DxgiRgb GammaCurve_765;
		public DxgiRgb GammaCurve_766;
		public DxgiRgb GammaCurve_767;
		public DxgiRgb GammaCurve_768;
		public DxgiRgb GammaCurve_769;
		public DxgiRgb GammaCurve_770;
		public DxgiRgb GammaCurve_771;
		public DxgiRgb GammaCurve_772;
		public DxgiRgb GammaCurve_773;
		public DxgiRgb GammaCurve_774;
		public DxgiRgb GammaCurve_775;
		public DxgiRgb GammaCurve_776;
		public DxgiRgb GammaCurve_777;
		public DxgiRgb GammaCurve_778;
		public DxgiRgb GammaCurve_779;
		public DxgiRgb GammaCurve_780;
		public DxgiRgb GammaCurve_781;
		public DxgiRgb GammaCurve_782;
		public DxgiRgb GammaCurve_783;
		public DxgiRgb GammaCurve_784;
		public DxgiRgb GammaCurve_785;
		public DxgiRgb GammaCurve_786;
		public DxgiRgb GammaCurve_787;
		public DxgiRgb GammaCurve_788;
		public DxgiRgb GammaCurve_789;
		public DxgiRgb GammaCurve_790;
		public DxgiRgb GammaCurve_791;
		public DxgiRgb GammaCurve_792;
		public DxgiRgb GammaCurve_793;
		public DxgiRgb GammaCurve_794;
		public DxgiRgb GammaCurve_795;
		public DxgiRgb GammaCurve_796;
		public DxgiRgb GammaCurve_797;
		public DxgiRgb GammaCurve_798;
		public DxgiRgb GammaCurve_799;
		public DxgiRgb GammaCurve_800;
		public DxgiRgb GammaCurve_801;
		public DxgiRgb GammaCurve_802;
		public DxgiRgb GammaCurve_803;
		public DxgiRgb GammaCurve_804;
		public DxgiRgb GammaCurve_805;
		public DxgiRgb GammaCurve_806;
		public DxgiRgb GammaCurve_807;
		public DxgiRgb GammaCurve_808;
		public DxgiRgb GammaCurve_809;
		public DxgiRgb GammaCurve_810;
		public DxgiRgb GammaCurve_811;
		public DxgiRgb GammaCurve_812;
		public DxgiRgb GammaCurve_813;
		public DxgiRgb GammaCurve_814;
		public DxgiRgb GammaCurve_815;
		public DxgiRgb GammaCurve_816;
		public DxgiRgb GammaCurve_817;
		public DxgiRgb GammaCurve_818;
		public DxgiRgb GammaCurve_819;
		public DxgiRgb GammaCurve_820;
		public DxgiRgb GammaCurve_821;
		public DxgiRgb GammaCurve_822;
		public DxgiRgb GammaCurve_823;
		public DxgiRgb GammaCurve_824;
		public DxgiRgb GammaCurve_825;
		public DxgiRgb GammaCurve_826;
		public DxgiRgb GammaCurve_827;
		public DxgiRgb GammaCurve_828;
		public DxgiRgb GammaCurve_829;
		public DxgiRgb GammaCurve_830;
		public DxgiRgb GammaCurve_831;
		public DxgiRgb GammaCurve_832;
		public DxgiRgb GammaCurve_833;
		public DxgiRgb GammaCurve_834;
		public DxgiRgb GammaCurve_835;
		public DxgiRgb GammaCurve_836;
		public DxgiRgb GammaCurve_837;
		public DxgiRgb GammaCurve_838;
		public DxgiRgb GammaCurve_839;
		public DxgiRgb GammaCurve_840;
		public DxgiRgb GammaCurve_841;
		public DxgiRgb GammaCurve_842;
		public DxgiRgb GammaCurve_843;
		public DxgiRgb GammaCurve_844;
		public DxgiRgb GammaCurve_845;
		public DxgiRgb GammaCurve_846;
		public DxgiRgb GammaCurve_847;
		public DxgiRgb GammaCurve_848;
		public DxgiRgb GammaCurve_849;
		public DxgiRgb GammaCurve_850;
		public DxgiRgb GammaCurve_851;
		public DxgiRgb GammaCurve_852;
		public DxgiRgb GammaCurve_853;
		public DxgiRgb GammaCurve_854;
		public DxgiRgb GammaCurve_855;
		public DxgiRgb GammaCurve_856;
		public DxgiRgb GammaCurve_857;
		public DxgiRgb GammaCurve_858;
		public DxgiRgb GammaCurve_859;
		public DxgiRgb GammaCurve_860;
		public DxgiRgb GammaCurve_861;
		public DxgiRgb GammaCurve_862;
		public DxgiRgb GammaCurve_863;
		public DxgiRgb GammaCurve_864;
		public DxgiRgb GammaCurve_865;
		public DxgiRgb GammaCurve_866;
		public DxgiRgb GammaCurve_867;
		public DxgiRgb GammaCurve_868;
		public DxgiRgb GammaCurve_869;
		public DxgiRgb GammaCurve_870;
		public DxgiRgb GammaCurve_871;
		public DxgiRgb GammaCurve_872;
		public DxgiRgb GammaCurve_873;
		public DxgiRgb GammaCurve_874;
		public DxgiRgb GammaCurve_875;
		public DxgiRgb GammaCurve_876;
		public DxgiRgb GammaCurve_877;
		public DxgiRgb GammaCurve_878;
		public DxgiRgb GammaCurve_879;
		public DxgiRgb GammaCurve_880;
		public DxgiRgb GammaCurve_881;
		public DxgiRgb GammaCurve_882;
		public DxgiRgb GammaCurve_883;
		public DxgiRgb GammaCurve_884;
		public DxgiRgb GammaCurve_885;
		public DxgiRgb GammaCurve_886;
		public DxgiRgb GammaCurve_887;
		public DxgiRgb GammaCurve_888;
		public DxgiRgb GammaCurve_889;
		public DxgiRgb GammaCurve_890;
		public DxgiRgb GammaCurve_891;
		public DxgiRgb GammaCurve_892;
		public DxgiRgb GammaCurve_893;
		public DxgiRgb GammaCurve_894;
		public DxgiRgb GammaCurve_895;
		public DxgiRgb GammaCurve_896;
		public DxgiRgb GammaCurve_897;
		public DxgiRgb GammaCurve_898;
		public DxgiRgb GammaCurve_899;
		public DxgiRgb GammaCurve_900;
		public DxgiRgb GammaCurve_901;
		public DxgiRgb GammaCurve_902;
		public DxgiRgb GammaCurve_903;
		public DxgiRgb GammaCurve_904;
		public DxgiRgb GammaCurve_905;
		public DxgiRgb GammaCurve_906;
		public DxgiRgb GammaCurve_907;
		public DxgiRgb GammaCurve_908;
		public DxgiRgb GammaCurve_909;
		public DxgiRgb GammaCurve_910;
		public DxgiRgb GammaCurve_911;
		public DxgiRgb GammaCurve_912;
		public DxgiRgb GammaCurve_913;
		public DxgiRgb GammaCurve_914;
		public DxgiRgb GammaCurve_915;
		public DxgiRgb GammaCurve_916;
		public DxgiRgb GammaCurve_917;
		public DxgiRgb GammaCurve_918;
		public DxgiRgb GammaCurve_919;
		public DxgiRgb GammaCurve_920;
		public DxgiRgb GammaCurve_921;
		public DxgiRgb GammaCurve_922;
		public DxgiRgb GammaCurve_923;
		public DxgiRgb GammaCurve_924;
		public DxgiRgb GammaCurve_925;
		public DxgiRgb GammaCurve_926;
		public DxgiRgb GammaCurve_927;
		public DxgiRgb GammaCurve_928;
		public DxgiRgb GammaCurve_929;
		public DxgiRgb GammaCurve_930;
		public DxgiRgb GammaCurve_931;
		public DxgiRgb GammaCurve_932;
		public DxgiRgb GammaCurve_933;
		public DxgiRgb GammaCurve_934;
		public DxgiRgb GammaCurve_935;
		public DxgiRgb GammaCurve_936;
		public DxgiRgb GammaCurve_937;
		public DxgiRgb GammaCurve_938;
		public DxgiRgb GammaCurve_939;
		public DxgiRgb GammaCurve_940;
		public DxgiRgb GammaCurve_941;
		public DxgiRgb GammaCurve_942;
		public DxgiRgb GammaCurve_943;
		public DxgiRgb GammaCurve_944;
		public DxgiRgb GammaCurve_945;
		public DxgiRgb GammaCurve_946;
		public DxgiRgb GammaCurve_947;
		public DxgiRgb GammaCurve_948;
		public DxgiRgb GammaCurve_949;
		public DxgiRgb GammaCurve_950;
		public DxgiRgb GammaCurve_951;
		public DxgiRgb GammaCurve_952;
		public DxgiRgb GammaCurve_953;
		public DxgiRgb GammaCurve_954;
		public DxgiRgb GammaCurve_955;
		public DxgiRgb GammaCurve_956;
		public DxgiRgb GammaCurve_957;
		public DxgiRgb GammaCurve_958;
		public DxgiRgb GammaCurve_959;
		public DxgiRgb GammaCurve_960;
		public DxgiRgb GammaCurve_961;
		public DxgiRgb GammaCurve_962;
		public DxgiRgb GammaCurve_963;
		public DxgiRgb GammaCurve_964;
		public DxgiRgb GammaCurve_965;
		public DxgiRgb GammaCurve_966;
		public DxgiRgb GammaCurve_967;
		public DxgiRgb GammaCurve_968;
		public DxgiRgb GammaCurve_969;
		public DxgiRgb GammaCurve_970;
		public DxgiRgb GammaCurve_971;
		public DxgiRgb GammaCurve_972;
		public DxgiRgb GammaCurve_973;
		public DxgiRgb GammaCurve_974;
		public DxgiRgb GammaCurve_975;
		public DxgiRgb GammaCurve_976;
		public DxgiRgb GammaCurve_977;
		public DxgiRgb GammaCurve_978;
		public DxgiRgb GammaCurve_979;
		public DxgiRgb GammaCurve_980;
		public DxgiRgb GammaCurve_981;
		public DxgiRgb GammaCurve_982;
		public DxgiRgb GammaCurve_983;
		public DxgiRgb GammaCurve_984;
		public DxgiRgb GammaCurve_985;
		public DxgiRgb GammaCurve_986;
		public DxgiRgb GammaCurve_987;
		public DxgiRgb GammaCurve_988;
		public DxgiRgb GammaCurve_989;
		public DxgiRgb GammaCurve_990;
		public DxgiRgb GammaCurve_991;
		public DxgiRgb GammaCurve_992;
		public DxgiRgb GammaCurve_993;
		public DxgiRgb GammaCurve_994;
		public DxgiRgb GammaCurve_995;
		public DxgiRgb GammaCurve_996;
		public DxgiRgb GammaCurve_997;
		public DxgiRgb GammaCurve_998;
		public DxgiRgb GammaCurve_999;
		public DxgiRgb GammaCurve_1000;
		public DxgiRgb GammaCurve_1001;
		public DxgiRgb GammaCurve_1002;
		public DxgiRgb GammaCurve_1003;
		public DxgiRgb GammaCurve_1004;
		public DxgiRgb GammaCurve_1005;
		public DxgiRgb GammaCurve_1006;
		public DxgiRgb GammaCurve_1007;
		public DxgiRgb GammaCurve_1008;
		public DxgiRgb GammaCurve_1009;
		public DxgiRgb GammaCurve_1010;
		public DxgiRgb GammaCurve_1011;
		public DxgiRgb GammaCurve_1012;
		public DxgiRgb GammaCurve_1013;
		public DxgiRgb GammaCurve_1014;
		public DxgiRgb GammaCurve_1015;
		public DxgiRgb GammaCurve_1016;
		public DxgiRgb GammaCurve_1017;
		public DxgiRgb GammaCurve_1018;
		public DxgiRgb GammaCurve_1019;
		public DxgiRgb GammaCurve_1020;
		public DxgiRgb GammaCurve_1021;
		public DxgiRgb GammaCurve_1022;
		public DxgiRgb GammaCurve_1023;
		public DxgiRgb GammaCurve_1024;


		public unsafe Span<DxgiRgb> GammaCurve
		
		{
			get
			{
				fixed (DxgiRgb* p = &this.GammaCurve_0)
				{
					return new Span<DxgiRgb>(p, 1025);
				}
			}
		}
	}

	[NativeName("DXGI_RGB")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiRgb
	{
		[NativeName("Red")]
		public float Red;
		[NativeName("Green")]
		public float Green;
		[NativeName("Blue")]
		public float Blue;


	}

	[NativeName("DXGI_FRAME_STATISTICS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiFrameStatistics
	{
		[NativeName("PresentCount")]
		public uint PresentCount;
		[NativeName("PresentRefreshCount")]
		public uint PresentRefreshCount;
		[NativeName("SyncRefreshCount")]
		public uint SyncRefreshCount;
		[NativeName("SyncQPCTime")]
		public long SyncQPCTime;
		[NativeName("SyncGPUTime")]
		public long SyncGPUTime;


	}

	[NativeName("DXGI_ADAPTER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiAdapterDesc
	{
		[NativeName("Description")]
		public char Description_0;
		public char Description_1;
		public char Description_2;
		public char Description_3;
		public char Description_4;
		public char Description_5;
		public char Description_6;
		public char Description_7;
		public char Description_8;
		public char Description_9;
		public char Description_10;
		public char Description_11;
		public char Description_12;
		public char Description_13;
		public char Description_14;
		public char Description_15;
		public char Description_16;
		public char Description_17;
		public char Description_18;
		public char Description_19;
		public char Description_20;
		public char Description_21;
		public char Description_22;
		public char Description_23;
		public char Description_24;
		public char Description_25;
		public char Description_26;
		public char Description_27;
		public char Description_28;
		public char Description_29;
		public char Description_30;
		public char Description_31;
		public char Description_32;
		public char Description_33;
		public char Description_34;
		public char Description_35;
		public char Description_36;
		public char Description_37;
		public char Description_38;
		public char Description_39;
		public char Description_40;
		public char Description_41;
		public char Description_42;
		public char Description_43;
		public char Description_44;
		public char Description_45;
		public char Description_46;
		public char Description_47;
		public char Description_48;
		public char Description_49;
		public char Description_50;
		public char Description_51;
		public char Description_52;
		public char Description_53;
		public char Description_54;
		public char Description_55;
		public char Description_56;
		public char Description_57;
		public char Description_58;
		public char Description_59;
		public char Description_60;
		public char Description_61;
		public char Description_62;
		public char Description_63;
		public char Description_64;
		public char Description_65;
		public char Description_66;
		public char Description_67;
		public char Description_68;
		public char Description_69;
		public char Description_70;
		public char Description_71;
		public char Description_72;
		public char Description_73;
		public char Description_74;
		public char Description_75;
		public char Description_76;
		public char Description_77;
		public char Description_78;
		public char Description_79;
		public char Description_80;
		public char Description_81;
		public char Description_82;
		public char Description_83;
		public char Description_84;
		public char Description_85;
		public char Description_86;
		public char Description_87;
		public char Description_88;
		public char Description_89;
		public char Description_90;
		public char Description_91;
		public char Description_92;
		public char Description_93;
		public char Description_94;
		public char Description_95;
		public char Description_96;
		public char Description_97;
		public char Description_98;
		public char Description_99;
		public char Description_100;
		public char Description_101;
		public char Description_102;
		public char Description_103;
		public char Description_104;
		public char Description_105;
		public char Description_106;
		public char Description_107;
		public char Description_108;
		public char Description_109;
		public char Description_110;
		public char Description_111;
		public char Description_112;
		public char Description_113;
		public char Description_114;
		public char Description_115;
		public char Description_116;
		public char Description_117;
		public char Description_118;
		public char Description_119;
		public char Description_120;
		public char Description_121;
		public char Description_122;
		public char Description_123;
		public char Description_124;
		public char Description_125;
		public char Description_126;
		public char Description_127;
		[NativeName("VendorId")]
		public uint VendorId;
		[NativeName("DeviceId")]
		public uint DeviceId;
		[NativeName("SubSysId")]
		public uint SubSysId;
		[NativeName("Revision")]
		public uint Revision;
		[NativeName("DedicatedVideoMemory")]
		public nuint DedicatedVideoMemory;
		[NativeName("DedicatedSystemMemory")]
		public nuint DedicatedSystemMemory;
		[NativeName("SharedSystemMemory")]
		public nuint SharedSystemMemory;
		[NativeName("AdapterLuid")]
		public Luid AdapterLuid;


	}

	[Guid("310d36a0-d2e7-4c0a-aa04-6a9d23b8886a")]
	[NativeName("IDXGISwapChain")]
	public partial struct IDXGISwapChain : IComObject, IComObject<IDXGISwapChain>, IComObject<IDXGIDeviceSubObject>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("310d36a0-d2e7-4c0a-aa04-6a9d23b8886a");

		public unsafe IDXGISwapChain (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult Present(uint syncInterval, uint flags)
		{
			IDXGISwapChain* ptr = (IDXGISwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, uint, uint, HResult>)(LpVtbl[1]))(ptr, syncInterval, flags);
			return ret;
		}

		public readonly unsafe HResult GetBuffer(uint buffer, Guid* riid, void** ppSurface)
		{
			IDXGISwapChain* ptr = (IDXGISwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, uint, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, buffer, riid, ppSurface);
			return ret;
		}

		public readonly unsafe HResult GetBuffer(uint buffer, ref Guid riid, void** ppSurface)
		{
			IDXGISwapChain* ptr = (IDXGISwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, uint, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, buffer, (Guid*)priid, ppSurface);
				return ret;
			}
		}

		public readonly unsafe HResult SetFullscreenState(Bool32 fullscreen, IDXGIOutput* pTarget)
		{
			IDXGISwapChain* ptr = (IDXGISwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Bool32, IDXGIOutput*, HResult>)(LpVtbl[3]))(ptr, fullscreen, pTarget);
			return ret;
		}

		public readonly unsafe HResult SetFullscreenState(Bool32 fullscreen, ref IDXGIOutput pTarget)
		{
			IDXGISwapChain* ptr = (IDXGISwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIOutput* ppTarget = &pTarget)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Bool32, IDXGIOutput*, HResult>)(LpVtbl[3]))(ptr, fullscreen, (IDXGIOutput*)ppTarget);
				return ret;
			}
		}

		public readonly unsafe HResult GetFullscreenState(Bool32* pFullscreen, IDXGIOutput** ppTarget)
		{
			IDXGISwapChain* ptr = (IDXGISwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Bool32*, IDXGIOutput**, HResult>)(LpVtbl[4]))(ptr, pFullscreen, ppTarget);
			return ret;
		}

		public readonly unsafe HResult GetFullscreenState(ref Bool32 pFullscreen, IDXGIOutput** ppTarget)
		{
			IDXGISwapChain* ptr = (IDXGISwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Bool32* ppFullscreen = &pFullscreen)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Bool32*, IDXGIOutput**, HResult>)(LpVtbl[4]))(ptr, (Bool32*)ppFullscreen, ppTarget);
				return ret;
			}
		}

		public readonly unsafe HResult GetFullscreenState(Bool32* pFullscreen, ref IDXGIOutput* ppTarget)
		{
			IDXGISwapChain* ptr = (IDXGISwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIOutput** pppTarget = &ppTarget)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Bool32*, IDXGIOutput**, HResult>)(LpVtbl[4]))(ptr, pFullscreen, (IDXGIOutput**)pppTarget);
				return ret;
			}
		}

		public readonly unsafe HResult GetFullscreenState(ref Bool32 pFullscreen, ref IDXGIOutput* ppTarget)
		{
			IDXGISwapChain* ptr = (IDXGISwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Bool32* ppFullscreen = &pFullscreen)
			{
				fixed (IDXGIOutput** pppTarget = &ppTarget)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, Bool32*, IDXGIOutput**, HResult>)(LpVtbl[4]))(ptr, (Bool32*)ppFullscreen, (IDXGIOutput**)pppTarget);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetDesc(DxgiSwapChainDesc* pDesc)
		{
			IDXGISwapChain* ptr = (IDXGISwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, DxgiSwapChainDesc*, HResult>)(LpVtbl[5]))(ptr, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetDesc(ref DxgiSwapChainDesc pDesc)
		{
			IDXGISwapChain* ptr = (IDXGISwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, DxgiSwapChainDesc*, HResult>)(LpVtbl[5]))(ptr, (DxgiSwapChainDesc*)ppDesc);
				return ret;
			}
		}

		public readonly unsafe HResult ResizeBuffers(uint bufferCount, uint width, uint height, DxgiFormat newFormat, uint swapChainFlags)
		{
			IDXGISwapChain* ptr = (IDXGISwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, uint, uint, uint, DxgiFormat, uint, HResult>)(LpVtbl[6]))(ptr, bufferCount, width, height, newFormat, swapChainFlags);
			return ret;
		}

		public readonly unsafe HResult ResizeTarget(DxgiModeDesc* pNewTargetParameters)
		{
			IDXGISwapChain* ptr = (IDXGISwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, DxgiModeDesc*, HResult>)(LpVtbl[7]))(ptr, pNewTargetParameters);
			return ret;
		}

		public readonly unsafe HResult ResizeTarget(ref DxgiModeDesc pNewTargetParameters)
		{
			IDXGISwapChain* ptr = (IDXGISwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiModeDesc* ppNewTargetParameters = &pNewTargetParameters)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, DxgiModeDesc*, HResult>)(LpVtbl[7]))(ptr, (DxgiModeDesc*)ppNewTargetParameters);
				return ret;
			}
		}

		public readonly unsafe HResult GetContainingOutput(IDXGIOutput** ppOutput)
		{
			IDXGISwapChain* ptr = (IDXGISwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, IDXGIOutput**, HResult>)(LpVtbl[8]))(ptr, ppOutput);
			return ret;
		}

		public readonly unsafe HResult GetContainingOutput(ref IDXGIOutput* ppOutput)
		{
			IDXGISwapChain* ptr = (IDXGISwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIOutput** pppOutput = &ppOutput)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, IDXGIOutput**, HResult>)(LpVtbl[8]))(ptr, (IDXGIOutput**)pppOutput);
				return ret;
			}
		}

		public readonly unsafe HResult GetLastPresentCount(uint* pLastPresentCount)
		{
			IDXGISwapChain* ptr = (IDXGISwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, uint*, HResult>)(LpVtbl[10]))(ptr, pLastPresentCount);
			return ret;
		}

		public readonly unsafe HResult GetLastPresentCount(ref uint pLastPresentCount)
		{
			IDXGISwapChain* ptr = (IDXGISwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppLastPresentCount = &pLastPresentCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain*, uint*, HResult>)(LpVtbl[10]))(ptr, (uint*)ppLastPresentCount);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIDeviceSubObject (IDXGISwapChain value)
		{
			return Unsafe.As<IDXGISwapChain, IDXGIDeviceSubObject>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGISwapChain value)
		{
			return Unsafe.As<IDXGISwapChain, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGISwapChain value)
		{
			return Unsafe.As<IDXGISwapChain, IUnknown>(ref value);
		}

	}

	[NativeName("DXGI_SWAP_CHAIN_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiSwapChainDesc
	{
		[NativeName("BufferDesc")]
		public DxgiModeDesc BufferDesc;
		[NativeName("SampleDesc")]
		public DxgiSampleDesc SampleDesc;
		[NativeName("BufferUsage")]
		public uint BufferUsage;
		[NativeName("BufferCount")]
		public uint BufferCount;
		[NativeName("OutputWindow")]
		public nint OutputWindow;
		[NativeName("Windowed")]
		public Bool32 Windowed;
		[NativeName("SwapEffect")]
		public DxgiSwapEffect SwapEffect;
		[NativeName("Flags")]
		public uint Flags;


	}

	[Guid("7b7166ec-21c7-44ae-b21a-c9ae321ae369")]
	[NativeName("IDXGIFactory")]
	public partial struct IDXGIFactory : IComObject, IComObject<IDXGIFactory>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("7b7166ec-21c7-44ae-b21a-c9ae321ae369");

		public unsafe IDXGIFactory (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult EnumAdapters(uint adapter, IDXGIAdapter** ppAdapter)
		{
			IDXGIFactory* ptr = (IDXGIFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, uint, IDXGIAdapter**, HResult>)(LpVtbl[4]))(ptr, adapter, ppAdapter);
			return ret;
		}

		public readonly unsafe HResult EnumAdapters(uint adapter, ref IDXGIAdapter* ppAdapter)
		{
			IDXGIFactory* ptr = (IDXGIFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIAdapter** pppAdapter = &ppAdapter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, uint, IDXGIAdapter**, HResult>)(LpVtbl[4]))(ptr, adapter, (IDXGIAdapter**)pppAdapter);
				return ret;
			}
		}

		public readonly unsafe HResult MakeWindowAssociation(nint windowHandle, uint flags)
		{
			IDXGIFactory* ptr = (IDXGIFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, nint, uint, HResult>)(LpVtbl[5]))(ptr, windowHandle, flags);
			return ret;
		}

		public readonly unsafe HResult GetWindowAssociation(nint* pWindowHandle)
		{
			IDXGIFactory* ptr = (IDXGIFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, nint*, HResult>)(LpVtbl[6]))(ptr, pWindowHandle);
			return ret;
		}

		public readonly unsafe HResult GetWindowAssociation(ref nint pWindowHandle)
		{
			IDXGIFactory* ptr = (IDXGIFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nint* ppWindowHandle = &pWindowHandle)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, nint*, HResult>)(LpVtbl[6]))(ptr, (nint*)ppWindowHandle);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChain(IUnknown* pDevice, DxgiSwapChainDesc* pDesc, IDXGISwapChain** ppSwapChain)
		{
			IDXGIFactory* ptr = (IDXGIFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, HResult>)(LpVtbl[7]))(ptr, pDevice, pDesc, ppSwapChain);
			return ret;
		}

		public readonly unsafe HResult CreateSwapChain(ref IUnknown pDevice, DxgiSwapChainDesc* pDesc, IDXGISwapChain** ppSwapChain)
		{
			IDXGIFactory* ptr = (IDXGIFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, HResult>)(LpVtbl[7]))(ptr, (IUnknown*)ppDevice, pDesc, ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChain(IUnknown* pDevice, ref DxgiSwapChainDesc pDesc, IDXGISwapChain** ppSwapChain)
		{
			IDXGIFactory* ptr = (IDXGIFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, HResult>)(LpVtbl[7]))(ptr, pDevice, (DxgiSwapChainDesc*)ppDesc, ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChain(ref IUnknown pDevice, ref DxgiSwapChainDesc pDesc, IDXGISwapChain** ppSwapChain)
		{
			IDXGIFactory* ptr = (IDXGIFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, HResult>)(LpVtbl[7]))(ptr, (IUnknown*)ppDevice, (DxgiSwapChainDesc*)ppDesc, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChain(IUnknown* pDevice, DxgiSwapChainDesc* pDesc, ref IDXGISwapChain* ppSwapChain)
		{
			IDXGIFactory* ptr = (IDXGIFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, HResult>)(LpVtbl[7]))(ptr, pDevice, pDesc, (IDXGISwapChain**)pppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChain(ref IUnknown pDevice, DxgiSwapChainDesc* pDesc, ref IDXGISwapChain* ppSwapChain)
		{
			IDXGIFactory* ptr = (IDXGIFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, HResult>)(LpVtbl[7]))(ptr, (IUnknown*)ppDevice, pDesc, (IDXGISwapChain**)pppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChain(IUnknown* pDevice, ref DxgiSwapChainDesc pDesc, ref IDXGISwapChain* ppSwapChain)
		{
			IDXGIFactory* ptr = (IDXGIFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc* ppDesc = &pDesc)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, HResult>)(LpVtbl[7]))(ptr, pDevice, (DxgiSwapChainDesc*)ppDesc, (IDXGISwapChain**)pppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChain(ref IUnknown pDevice, ref DxgiSwapChainDesc pDesc, ref IDXGISwapChain* ppSwapChain)
		{
			IDXGIFactory* ptr = (IDXGIFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc* ppDesc = &pDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, IUnknown*, DxgiSwapChainDesc*, IDXGISwapChain**, HResult>)(LpVtbl[7]))(ptr, (IUnknown*)ppDevice, (DxgiSwapChainDesc*)ppDesc, (IDXGISwapChain**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSoftwareAdapter(nint module, IDXGIAdapter** ppAdapter)
		{
			IDXGIFactory* ptr = (IDXGIFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, nint, IDXGIAdapter**, HResult>)(LpVtbl[8]))(ptr, module, ppAdapter);
			return ret;
		}

		public readonly unsafe HResult CreateSoftwareAdapter(nint module, ref IDXGIAdapter* ppAdapter)
		{
			IDXGIFactory* ptr = (IDXGIFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIAdapter** pppAdapter = &ppAdapter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory*, nint, IDXGIAdapter**, HResult>)(LpVtbl[8]))(ptr, module, (IDXGIAdapter**)pppAdapter);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIObject (IDXGIFactory value)
		{
			return Unsafe.As<IDXGIFactory, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIFactory value)
		{
			return Unsafe.As<IDXGIFactory, IUnknown>(ref value);
		}

	}

	[Guid("54ec77fa-1377-44e6-8c32-88fd5f44c84c")]
	[NativeName("IDXGIDevice")]
	public partial struct IDXGIDevice : IComObject, IComObject<IDXGIDevice>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("54ec77fa-1377-44e6-8c32-88fd5f44c84c");

		public unsafe IDXGIDevice (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetAdapter(IDXGIAdapter** pAdapter)
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, IDXGIAdapter**, HResult>)(LpVtbl[4]))(ptr, pAdapter);
			return ret;
		}

		public readonly unsafe HResult GetAdapter(ref IDXGIAdapter* pAdapter)
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIAdapter** ppAdapter = &pAdapter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, IDXGIAdapter**, HResult>)(LpVtbl[4]))(ptr, (IDXGIAdapter**)ppAdapter);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSurface(DxgiSurfaceDesc* pDesc, uint numSurfaces, uint usage, DxgiSharedResource* pSharedResource, IDXGISurface** ppSurface)
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, HResult>)(LpVtbl[5]))(ptr, pDesc, numSurfaces, usage, pSharedResource, ppSurface);
			return ret;
		}

		public readonly unsafe HResult CreateSurface(ref DxgiSurfaceDesc pDesc, uint numSurfaces, uint usage, DxgiSharedResource* pSharedResource, IDXGISurface** ppSurface)
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSurfaceDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, HResult>)(LpVtbl[5]))(ptr, (DxgiSurfaceDesc*)ppDesc, numSurfaces, usage, pSharedResource, ppSurface);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSurface(DxgiSurfaceDesc* pDesc, uint numSurfaces, uint usage, ref DxgiSharedResource pSharedResource, IDXGISurface** ppSurface)
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSharedResource* ppSharedResource = &pSharedResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, HResult>)(LpVtbl[5]))(ptr, pDesc, numSurfaces, usage, (DxgiSharedResource*)ppSharedResource, ppSurface);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSurface(ref DxgiSurfaceDesc pDesc, uint numSurfaces, uint usage, ref DxgiSharedResource pSharedResource, IDXGISurface** ppSurface)
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSurfaceDesc* ppDesc = &pDesc)
			{
				fixed (DxgiSharedResource* ppSharedResource = &pSharedResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, HResult>)(LpVtbl[5]))(ptr, (DxgiSurfaceDesc*)ppDesc, numSurfaces, usage, (DxgiSharedResource*)ppSharedResource, ppSurface);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSurface(DxgiSurfaceDesc* pDesc, uint numSurfaces, uint usage, DxgiSharedResource* pSharedResource, ref IDXGISurface* ppSurface)
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGISurface** pppSurface = &ppSurface)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, HResult>)(LpVtbl[5]))(ptr, pDesc, numSurfaces, usage, pSharedResource, (IDXGISurface**)pppSurface);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSurface(ref DxgiSurfaceDesc pDesc, uint numSurfaces, uint usage, DxgiSharedResource* pSharedResource, ref IDXGISurface* ppSurface)
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSurfaceDesc* ppDesc = &pDesc)
			{
				fixed (IDXGISurface** pppSurface = &ppSurface)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, HResult>)(LpVtbl[5]))(ptr, (DxgiSurfaceDesc*)ppDesc, numSurfaces, usage, pSharedResource, (IDXGISurface**)pppSurface);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSurface(DxgiSurfaceDesc* pDesc, uint numSurfaces, uint usage, ref DxgiSharedResource pSharedResource, ref IDXGISurface* ppSurface)
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSharedResource* ppSharedResource = &pSharedResource)
			{
				fixed (IDXGISurface** pppSurface = &ppSurface)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, HResult>)(LpVtbl[5]))(ptr, pDesc, numSurfaces, usage, (DxgiSharedResource*)ppSharedResource, (IDXGISurface**)pppSurface);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSurface(ref DxgiSurfaceDesc pDesc, uint numSurfaces, uint usage, ref DxgiSharedResource pSharedResource, ref IDXGISurface* ppSurface)
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSurfaceDesc* ppDesc = &pDesc)
			{
				fixed (DxgiSharedResource* ppSharedResource = &pSharedResource)
				{
					fixed (IDXGISurface** pppSurface = &ppSurface)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, DxgiSurfaceDesc*, uint, uint, DxgiSharedResource*, IDXGISurface**, HResult>)(LpVtbl[5]))(ptr, (DxgiSurfaceDesc*)ppDesc, numSurfaces, usage, (DxgiSharedResource*)ppSharedResource, (IDXGISurface**)pppSurface);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult QueryResourceResidency(IUnknown*** ppResources, DxgiResidency* pResidencyStatus, uint numResources)
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, IUnknown***, DxgiResidency*, uint, HResult>)(LpVtbl[6]))(ptr, ppResources, pResidencyStatus, numResources);
			return ret;
		}

		public readonly unsafe HResult QueryResourceResidency(ref IUnknown* ppResources, DxgiResidency* pResidencyStatus, uint numResources)
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown** pppResources = &ppResources)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, IUnknown***, DxgiResidency*, uint, HResult>)(LpVtbl[6]))(ptr, (IUnknown***)pppResources, pResidencyStatus, numResources);
				return ret;
			}
		}

		public readonly unsafe HResult QueryResourceResidency(IUnknown*** ppResources, ref DxgiResidency pResidencyStatus, uint numResources)
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiResidency* ppResidencyStatus = &pResidencyStatus)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, IUnknown***, DxgiResidency*, uint, HResult>)(LpVtbl[6]))(ptr, ppResources, (DxgiResidency*)ppResidencyStatus, numResources);
				return ret;
			}
		}

		public readonly unsafe HResult QueryResourceResidency(ref IUnknown* ppResources, ref DxgiResidency pResidencyStatus, uint numResources)
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown** pppResources = &ppResources)
			{
				fixed (DxgiResidency* ppResidencyStatus = &pResidencyStatus)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, IUnknown***, DxgiResidency*, uint, HResult>)(LpVtbl[6]))(ptr, (IUnknown***)pppResources, (DxgiResidency*)ppResidencyStatus, numResources);
					return ret;
				}
			}
		}

		public readonly unsafe HResult SetGPUThreadPriority(int priority)
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, int, HResult>)(LpVtbl[7]))(ptr, priority);
			return ret;
		}

		public readonly unsafe HResult GetGPUThreadPriority(int* pPriority)
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, int*, HResult>)(LpVtbl[8]))(ptr, pPriority);
			return ret;
		}

		public readonly unsafe HResult GetGPUThreadPriority(ref int pPriority)
		{
			IDXGIDevice* ptr = (IDXGIDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppPriority = &pPriority)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice*, int*, HResult>)(LpVtbl[8]))(ptr, (int*)ppPriority);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIObject (IDXGIDevice value)
		{
			return Unsafe.As<IDXGIDevice, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIDevice value)
		{
			return Unsafe.As<IDXGIDevice, IUnknown>(ref value);
		}

	}

	[NativeName("DXGI_SHARED_RESOURCE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiSharedResource
	{
		[NativeName("Handle")]
		public nint Handle;


	}

	[Guid("770aae78-f26f-4dba-a829-253c83d1b387")]
	[NativeName("IDXGIFactory1")]
	public partial struct IDXGIFactory1 : IComObject, IComObject<IDXGIFactory1>, IComObject<IDXGIFactory>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("770aae78-f26f-4dba-a829-253c83d1b387");

		public unsafe IDXGIFactory1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult EnumAdapters1(uint adapter, IDXGIAdapter1** ppAdapter)
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, uint, IDXGIAdapter1**, HResult>)(LpVtbl[5]))(ptr, adapter, ppAdapter);
			return ret;
		}

		public readonly unsafe HResult EnumAdapters1(uint adapter, ref IDXGIAdapter1* ppAdapter)
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIAdapter1** pppAdapter = &ppAdapter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, uint, IDXGIAdapter1**, HResult>)(LpVtbl[5]))(ptr, adapter, (IDXGIAdapter1**)pppAdapter);
				return ret;
			}
		}

		public readonly unsafe Bool32 IsCurrent()
		{
			IDXGIFactory1* ptr = (IDXGIFactory1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			Bool32 ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory1*, Bool32>)(LpVtbl[6]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIFactory (IDXGIFactory1 value)
		{
			return Unsafe.As<IDXGIFactory1, IDXGIFactory>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIFactory1 value)
		{
			return Unsafe.As<IDXGIFactory1, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIFactory1 value)
		{
			return Unsafe.As<IDXGIFactory1, IUnknown>(ref value);
		}

	}

	[Guid("29038f61-3839-4626-91fd-086879011a05")]
	[NativeName("IDXGIAdapter1")]
	public partial struct IDXGIAdapter1 : IComObject, IComObject<IDXGIAdapter1>, IComObject<IDXGIAdapter>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("29038f61-3839-4626-91fd-086879011a05");

		public unsafe IDXGIAdapter1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetDesc1(DxgiAdapterDesc1* pDesc)
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, DxgiAdapterDesc1*, HResult>)(LpVtbl[3]))(ptr, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetDesc1(ref DxgiAdapterDesc1 pDesc)
		{
			IDXGIAdapter1* ptr = (IDXGIAdapter1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiAdapterDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter1*, DxgiAdapterDesc1*, HResult>)(LpVtbl[3]))(ptr, (DxgiAdapterDesc1*)ppDesc);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIAdapter (IDXGIAdapter1 value)
		{
			return Unsafe.As<IDXGIAdapter1, IDXGIAdapter>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIAdapter1 value)
		{
			return Unsafe.As<IDXGIAdapter1, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIAdapter1 value)
		{
			return Unsafe.As<IDXGIAdapter1, IUnknown>(ref value);
		}

	}

	[NativeName("DXGI_ADAPTER_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiAdapterDesc1
	{
		[NativeName("Description")]
		public char Description_0;
		public char Description_1;
		public char Description_2;
		public char Description_3;
		public char Description_4;
		public char Description_5;
		public char Description_6;
		public char Description_7;
		public char Description_8;
		public char Description_9;
		public char Description_10;
		public char Description_11;
		public char Description_12;
		public char Description_13;
		public char Description_14;
		public char Description_15;
		public char Description_16;
		public char Description_17;
		public char Description_18;
		public char Description_19;
		public char Description_20;
		public char Description_21;
		public char Description_22;
		public char Description_23;
		public char Description_24;
		public char Description_25;
		public char Description_26;
		public char Description_27;
		public char Description_28;
		public char Description_29;
		public char Description_30;
		public char Description_31;
		public char Description_32;
		public char Description_33;
		public char Description_34;
		public char Description_35;
		public char Description_36;
		public char Description_37;
		public char Description_38;
		public char Description_39;
		public char Description_40;
		public char Description_41;
		public char Description_42;
		public char Description_43;
		public char Description_44;
		public char Description_45;
		public char Description_46;
		public char Description_47;
		public char Description_48;
		public char Description_49;
		public char Description_50;
		public char Description_51;
		public char Description_52;
		public char Description_53;
		public char Description_54;
		public char Description_55;
		public char Description_56;
		public char Description_57;
		public char Description_58;
		public char Description_59;
		public char Description_60;
		public char Description_61;
		public char Description_62;
		public char Description_63;
		public char Description_64;
		public char Description_65;
		public char Description_66;
		public char Description_67;
		public char Description_68;
		public char Description_69;
		public char Description_70;
		public char Description_71;
		public char Description_72;
		public char Description_73;
		public char Description_74;
		public char Description_75;
		public char Description_76;
		public char Description_77;
		public char Description_78;
		public char Description_79;
		public char Description_80;
		public char Description_81;
		public char Description_82;
		public char Description_83;
		public char Description_84;
		public char Description_85;
		public char Description_86;
		public char Description_87;
		public char Description_88;
		public char Description_89;
		public char Description_90;
		public char Description_91;
		public char Description_92;
		public char Description_93;
		public char Description_94;
		public char Description_95;
		public char Description_96;
		public char Description_97;
		public char Description_98;
		public char Description_99;
		public char Description_100;
		public char Description_101;
		public char Description_102;
		public char Description_103;
		public char Description_104;
		public char Description_105;
		public char Description_106;
		public char Description_107;
		public char Description_108;
		public char Description_109;
		public char Description_110;
		public char Description_111;
		public char Description_112;
		public char Description_113;
		public char Description_114;
		public char Description_115;
		public char Description_116;
		public char Description_117;
		public char Description_118;
		public char Description_119;
		public char Description_120;
		public char Description_121;
		public char Description_122;
		public char Description_123;
		public char Description_124;
		public char Description_125;
		public char Description_126;
		public char Description_127;
		[NativeName("VendorId")]
		public uint VendorId;
		[NativeName("DeviceId")]
		public uint DeviceId;
		[NativeName("SubSysId")]
		public uint SubSysId;
		[NativeName("Revision")]
		public uint Revision;
		[NativeName("DedicatedVideoMemory")]
		public nuint DedicatedVideoMemory;
		[NativeName("DedicatedSystemMemory")]
		public nuint DedicatedSystemMemory;
		[NativeName("SharedSystemMemory")]
		public nuint SharedSystemMemory;
		[NativeName("AdapterLuid")]
		public Luid AdapterLuid;
		[NativeName("Flags")]
		public uint Flags;


	}

	[Guid("77db970f-6276-48ba-ba28-070143b4392c")]
	[NativeName("IDXGIDevice1")]
	public partial struct IDXGIDevice1 : IComObject, IComObject<IDXGIDevice1>, IComObject<IDXGIDevice>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("77db970f-6276-48ba-ba28-070143b4392c");

		public unsafe IDXGIDevice1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult SetMaximumFrameLatency(uint maxLatency)
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, uint, HResult>)(LpVtbl[5]))(ptr, maxLatency);
			return ret;
		}

		public readonly unsafe HResult GetMaximumFrameLatency(uint* pMaxLatency)
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, uint*, HResult>)(LpVtbl[6]))(ptr, pMaxLatency);
			return ret;
		}

		public readonly unsafe HResult GetMaximumFrameLatency(ref uint pMaxLatency)
		{
			IDXGIDevice1* ptr = (IDXGIDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppMaxLatency = &pMaxLatency)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice1*, uint*, HResult>)(LpVtbl[6]))(ptr, (uint*)ppMaxLatency);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIDevice (IDXGIDevice1 value)
		{
			return Unsafe.As<IDXGIDevice1, IDXGIDevice>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIDevice1 value)
		{
			return Unsafe.As<IDXGIDevice1, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIDevice1 value)
		{
			return Unsafe.As<IDXGIDevice1, IUnknown>(ref value);
		}

	}

	[NativeName("_D3DCOLORVALUE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3Dcolorvalue
	{
		[NativeName("r")]
		public float R;
		[NativeName("g")]
		public float G;
		[NativeName("b")]
		public float B;
		[NativeName("a")]
		public float A;


	}

	[NativeName("DXGI_JPEG_DC_HUFFMAN_TABLE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiJpegDcHuffmanTable
	{
		[NativeName("CodeCounts")]
		public byte CodeCounts_0;
		public byte CodeCounts_1;
		public byte CodeCounts_2;
		public byte CodeCounts_3;
		public byte CodeCounts_4;
		public byte CodeCounts_5;
		public byte CodeCounts_6;
		public byte CodeCounts_7;
		public byte CodeCounts_8;
		public byte CodeCounts_9;
		public byte CodeCounts_10;
		public byte CodeCounts_11;
		[NativeName("CodeValues")]
		public byte CodeValues_0;
		public byte CodeValues_1;
		public byte CodeValues_2;
		public byte CodeValues_3;
		public byte CodeValues_4;
		public byte CodeValues_5;
		public byte CodeValues_6;
		public byte CodeValues_7;
		public byte CodeValues_8;
		public byte CodeValues_9;
		public byte CodeValues_10;
		public byte CodeValues_11;


	}

	[NativeName("DXGI_JPEG_AC_HUFFMAN_TABLE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiJpegAcHuffmanTable
	{
		[NativeName("CodeCounts")]
		public byte CodeCounts_0;
		public byte CodeCounts_1;
		public byte CodeCounts_2;
		public byte CodeCounts_3;
		public byte CodeCounts_4;
		public byte CodeCounts_5;
		public byte CodeCounts_6;
		public byte CodeCounts_7;
		public byte CodeCounts_8;
		public byte CodeCounts_9;
		public byte CodeCounts_10;
		public byte CodeCounts_11;
		public byte CodeCounts_12;
		public byte CodeCounts_13;
		public byte CodeCounts_14;
		public byte CodeCounts_15;
		[NativeName("CodeValues")]
		public byte CodeValues_0;
		public byte CodeValues_1;
		public byte CodeValues_2;
		public byte CodeValues_3;
		public byte CodeValues_4;
		public byte CodeValues_5;
		public byte CodeValues_6;
		public byte CodeValues_7;
		public byte CodeValues_8;
		public byte CodeValues_9;
		public byte CodeValues_10;
		public byte CodeValues_11;
		public byte CodeValues_12;
		public byte CodeValues_13;
		public byte CodeValues_14;
		public byte CodeValues_15;
		public byte CodeValues_16;
		public byte CodeValues_17;
		public byte CodeValues_18;
		public byte CodeValues_19;
		public byte CodeValues_20;
		public byte CodeValues_21;
		public byte CodeValues_22;
		public byte CodeValues_23;
		public byte CodeValues_24;
		public byte CodeValues_25;
		public byte CodeValues_26;
		public byte CodeValues_27;
		public byte CodeValues_28;
		public byte CodeValues_29;
		public byte CodeValues_30;
		public byte CodeValues_31;
		public byte CodeValues_32;
		public byte CodeValues_33;
		public byte CodeValues_34;
		public byte CodeValues_35;
		public byte CodeValues_36;
		public byte CodeValues_37;
		public byte CodeValues_38;
		public byte CodeValues_39;
		public byte CodeValues_40;
		public byte CodeValues_41;
		public byte CodeValues_42;
		public byte CodeValues_43;
		public byte CodeValues_44;
		public byte CodeValues_45;
		public byte CodeValues_46;
		public byte CodeValues_47;
		public byte CodeValues_48;
		public byte CodeValues_49;
		public byte CodeValues_50;
		public byte CodeValues_51;
		public byte CodeValues_52;
		public byte CodeValues_53;
		public byte CodeValues_54;
		public byte CodeValues_55;
		public byte CodeValues_56;
		public byte CodeValues_57;
		public byte CodeValues_58;
		public byte CodeValues_59;
		public byte CodeValues_60;
		public byte CodeValues_61;
		public byte CodeValues_62;
		public byte CodeValues_63;
		public byte CodeValues_64;
		public byte CodeValues_65;
		public byte CodeValues_66;
		public byte CodeValues_67;
		public byte CodeValues_68;
		public byte CodeValues_69;
		public byte CodeValues_70;
		public byte CodeValues_71;
		public byte CodeValues_72;
		public byte CodeValues_73;
		public byte CodeValues_74;
		public byte CodeValues_75;
		public byte CodeValues_76;
		public byte CodeValues_77;
		public byte CodeValues_78;
		public byte CodeValues_79;
		public byte CodeValues_80;
		public byte CodeValues_81;
		public byte CodeValues_82;
		public byte CodeValues_83;
		public byte CodeValues_84;
		public byte CodeValues_85;
		public byte CodeValues_86;
		public byte CodeValues_87;
		public byte CodeValues_88;
		public byte CodeValues_89;
		public byte CodeValues_90;
		public byte CodeValues_91;
		public byte CodeValues_92;
		public byte CodeValues_93;
		public byte CodeValues_94;
		public byte CodeValues_95;
		public byte CodeValues_96;
		public byte CodeValues_97;
		public byte CodeValues_98;
		public byte CodeValues_99;
		public byte CodeValues_100;
		public byte CodeValues_101;
		public byte CodeValues_102;
		public byte CodeValues_103;
		public byte CodeValues_104;
		public byte CodeValues_105;
		public byte CodeValues_106;
		public byte CodeValues_107;
		public byte CodeValues_108;
		public byte CodeValues_109;
		public byte CodeValues_110;
		public byte CodeValues_111;
		public byte CodeValues_112;
		public byte CodeValues_113;
		public byte CodeValues_114;
		public byte CodeValues_115;
		public byte CodeValues_116;
		public byte CodeValues_117;
		public byte CodeValues_118;
		public byte CodeValues_119;
		public byte CodeValues_120;
		public byte CodeValues_121;
		public byte CodeValues_122;
		public byte CodeValues_123;
		public byte CodeValues_124;
		public byte CodeValues_125;
		public byte CodeValues_126;
		public byte CodeValues_127;
		public byte CodeValues_128;
		public byte CodeValues_129;
		public byte CodeValues_130;
		public byte CodeValues_131;
		public byte CodeValues_132;
		public byte CodeValues_133;
		public byte CodeValues_134;
		public byte CodeValues_135;
		public byte CodeValues_136;
		public byte CodeValues_137;
		public byte CodeValues_138;
		public byte CodeValues_139;
		public byte CodeValues_140;
		public byte CodeValues_141;
		public byte CodeValues_142;
		public byte CodeValues_143;
		public byte CodeValues_144;
		public byte CodeValues_145;
		public byte CodeValues_146;
		public byte CodeValues_147;
		public byte CodeValues_148;
		public byte CodeValues_149;
		public byte CodeValues_150;
		public byte CodeValues_151;
		public byte CodeValues_152;
		public byte CodeValues_153;
		public byte CodeValues_154;
		public byte CodeValues_155;
		public byte CodeValues_156;
		public byte CodeValues_157;
		public byte CodeValues_158;
		public byte CodeValues_159;
		public byte CodeValues_160;
		public byte CodeValues_161;


	}

	[NativeName("DXGI_JPEG_QUANTIZATION_TABLE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiJpegQuantizationTable
	{
		[NativeName("Elements")]
		public byte Elements_0;
		public byte Elements_1;
		public byte Elements_2;
		public byte Elements_3;
		public byte Elements_4;
		public byte Elements_5;
		public byte Elements_6;
		public byte Elements_7;
		public byte Elements_8;
		public byte Elements_9;
		public byte Elements_10;
		public byte Elements_11;
		public byte Elements_12;
		public byte Elements_13;
		public byte Elements_14;
		public byte Elements_15;
		public byte Elements_16;
		public byte Elements_17;
		public byte Elements_18;
		public byte Elements_19;
		public byte Elements_20;
		public byte Elements_21;
		public byte Elements_22;
		public byte Elements_23;
		public byte Elements_24;
		public byte Elements_25;
		public byte Elements_26;
		public byte Elements_27;
		public byte Elements_28;
		public byte Elements_29;
		public byte Elements_30;
		public byte Elements_31;
		public byte Elements_32;
		public byte Elements_33;
		public byte Elements_34;
		public byte Elements_35;
		public byte Elements_36;
		public byte Elements_37;
		public byte Elements_38;
		public byte Elements_39;
		public byte Elements_40;
		public byte Elements_41;
		public byte Elements_42;
		public byte Elements_43;
		public byte Elements_44;
		public byte Elements_45;
		public byte Elements_46;
		public byte Elements_47;
		public byte Elements_48;
		public byte Elements_49;
		public byte Elements_50;
		public byte Elements_51;
		public byte Elements_52;
		public byte Elements_53;
		public byte Elements_54;
		public byte Elements_55;
		public byte Elements_56;
		public byte Elements_57;
		public byte Elements_58;
		public byte Elements_59;
		public byte Elements_60;
		public byte Elements_61;
		public byte Elements_62;
		public byte Elements_63;


	}

	[NativeName("DXGI_DISPLAY_COLOR_SPACE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiDisplayColorSpace
	{
		[NativeName("PrimaryCoordinates")]
		public unsafe float* PrimaryCoordinates_0;
		public unsafe float* PrimaryCoordinates_1;
		public unsafe float* PrimaryCoordinates_2;
		public unsafe float* PrimaryCoordinates_3;
		public unsafe float* PrimaryCoordinates_4;
		public unsafe float* PrimaryCoordinates_5;
		public unsafe float* PrimaryCoordinates_6;
		public unsafe float* PrimaryCoordinates_7;
		[NativeName("WhitePoints")]
		public unsafe float* WhitePoints_0;
		public unsafe float* WhitePoints_1;
		public unsafe float* WhitePoints_2;
		public unsafe float* WhitePoints_3;
		public unsafe float* WhitePoints_4;
		public unsafe float* WhitePoints_5;
		public unsafe float* WhitePoints_6;
		public unsafe float* WhitePoints_7;
		public unsafe float* WhitePoints_8;
		public unsafe float* WhitePoints_9;
		public unsafe float* WhitePoints_10;
		public unsafe float* WhitePoints_11;
		public unsafe float* WhitePoints_12;
		public unsafe float* WhitePoints_13;
		public unsafe float* WhitePoints_14;
		public unsafe float* WhitePoints_15;


	}

	[Guid("ea9dbf1a-c88e-4486-854a-98aa0138f30c")]
	[NativeName("IDXGIDisplayControl")]
	public partial struct IDXGIDisplayControl : IComObject, IComObject<IDXGIDisplayControl>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("ea9dbf1a-c88e-4486-854a-98aa0138f30c");

		public unsafe IDXGIDisplayControl (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe Bool32 IsStereoEnabled()
		{
			IDXGIDisplayControl* ptr = (IDXGIDisplayControl*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			Bool32 ret = ((delegate* unmanaged[Stdcall]<IDXGIDisplayControl*, Bool32>)(*LpVtbl))(ptr);
			return ret;
		}

		public readonly unsafe void SetStereoEnabled(Bool32 enabled)
		{
			IDXGIDisplayControl* ptr = (IDXGIDisplayControl*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<IDXGIDisplayControl*, Bool32, void>)(LpVtbl[1]))(ptr, enabled);
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDXGIDisplayControl value)
		{
			return Unsafe.As<IDXGIDisplayControl, IUnknown>(ref value);
		}

	}

	[Guid("191cfac3-a341-470d-b26e-a864f428319c")]
	[NativeName("IDXGIOutputDuplication")]
	public partial struct IDXGIOutputDuplication : IComObject, IComObject<IDXGIOutputDuplication>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("191cfac3-a341-470d-b26e-a864f428319c");

		public unsafe IDXGIOutputDuplication (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc(DxgiOutduplDesc* pDesc)
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, DxgiOutduplDesc*, void>)(LpVtbl[4]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc(ref DxgiOutduplDesc pDesc)
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiOutduplDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, DxgiOutduplDesc*, void>)(LpVtbl[4]))(ptr, (DxgiOutduplDesc*)ppDesc);
			}
		}

		public readonly unsafe HResult AcquireNextFrame(uint timeoutInMilliseconds, DxgiOutduplFrameInfo* pFrameInfo, IDXGIResource** ppDesktopResource)
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, DxgiOutduplFrameInfo*, IDXGIResource**, HResult>)(LpVtbl[5]))(ptr, timeoutInMilliseconds, pFrameInfo, ppDesktopResource);
			return ret;
		}

		public readonly unsafe HResult AcquireNextFrame(uint timeoutInMilliseconds, ref DxgiOutduplFrameInfo pFrameInfo, IDXGIResource** ppDesktopResource)
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiOutduplFrameInfo* ppFrameInfo = &pFrameInfo)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, DxgiOutduplFrameInfo*, IDXGIResource**, HResult>)(LpVtbl[5]))(ptr, timeoutInMilliseconds, (DxgiOutduplFrameInfo*)ppFrameInfo, ppDesktopResource);
				return ret;
			}
		}

		public readonly unsafe HResult AcquireNextFrame(uint timeoutInMilliseconds, DxgiOutduplFrameInfo* pFrameInfo, ref IDXGIResource* ppDesktopResource)
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIResource** pppDesktopResource = &ppDesktopResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, DxgiOutduplFrameInfo*, IDXGIResource**, HResult>)(LpVtbl[5]))(ptr, timeoutInMilliseconds, pFrameInfo, (IDXGIResource**)pppDesktopResource);
				return ret;
			}
		}

		public readonly unsafe HResult AcquireNextFrame(uint timeoutInMilliseconds, ref DxgiOutduplFrameInfo pFrameInfo, ref IDXGIResource* ppDesktopResource)
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiOutduplFrameInfo* ppFrameInfo = &pFrameInfo)
			{
				fixed (IDXGIResource** pppDesktopResource = &ppDesktopResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, DxgiOutduplFrameInfo*, IDXGIResource**, HResult>)(LpVtbl[5]))(ptr, timeoutInMilliseconds, (DxgiOutduplFrameInfo*)ppFrameInfo, (IDXGIResource**)pppDesktopResource);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetFrameDirtyRects(uint dirtyRectsBufferSize, Rect32* pDirtyRectsBuffer, uint* pDirtyRectsBufferSizeRequired)
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, Rect32*, uint*, HResult>)(LpVtbl[6]))(ptr, dirtyRectsBufferSize, pDirtyRectsBuffer, pDirtyRectsBufferSizeRequired);
			return ret;
		}

		public readonly unsafe HResult GetFrameDirtyRects(uint dirtyRectsBufferSize, ref Rect32 pDirtyRectsBuffer, uint* pDirtyRectsBufferSizeRequired)
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppDirtyRectsBuffer = &pDirtyRectsBuffer)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, Rect32*, uint*, HResult>)(LpVtbl[6]))(ptr, dirtyRectsBufferSize, (Rect32*)ppDirtyRectsBuffer, pDirtyRectsBufferSizeRequired);
				return ret;
			}
		}

		public readonly unsafe HResult GetFrameDirtyRects(uint dirtyRectsBufferSize, Rect32* pDirtyRectsBuffer, ref uint pDirtyRectsBufferSizeRequired)
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDirtyRectsBufferSizeRequired = &pDirtyRectsBufferSizeRequired)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, Rect32*, uint*, HResult>)(LpVtbl[6]))(ptr, dirtyRectsBufferSize, pDirtyRectsBuffer, (uint*)ppDirtyRectsBufferSizeRequired);
				return ret;
			}
		}

		public readonly unsafe HResult GetFrameDirtyRects(uint dirtyRectsBufferSize, ref Rect32 pDirtyRectsBuffer, ref uint pDirtyRectsBufferSizeRequired)
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppDirtyRectsBuffer = &pDirtyRectsBuffer)
			{
				fixed (uint* ppDirtyRectsBufferSizeRequired = &pDirtyRectsBufferSizeRequired)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, Rect32*, uint*, HResult>)(LpVtbl[6]))(ptr, dirtyRectsBufferSize, (Rect32*)ppDirtyRectsBuffer, (uint*)ppDirtyRectsBufferSizeRequired);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetFrameMoveRects(uint moveRectsBufferSize, DxgiOutduplMoveRect* pMoveRectBuffer, uint* pMoveRectsBufferSizeRequired)
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, DxgiOutduplMoveRect*, uint*, HResult>)(LpVtbl[7]))(ptr, moveRectsBufferSize, pMoveRectBuffer, pMoveRectsBufferSizeRequired);
			return ret;
		}

		public readonly unsafe HResult GetFrameMoveRects(uint moveRectsBufferSize, ref DxgiOutduplMoveRect pMoveRectBuffer, uint* pMoveRectsBufferSizeRequired)
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiOutduplMoveRect* ppMoveRectBuffer = &pMoveRectBuffer)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, DxgiOutduplMoveRect*, uint*, HResult>)(LpVtbl[7]))(ptr, moveRectsBufferSize, (DxgiOutduplMoveRect*)ppMoveRectBuffer, pMoveRectsBufferSizeRequired);
				return ret;
			}
		}

		public readonly unsafe HResult GetFrameMoveRects(uint moveRectsBufferSize, DxgiOutduplMoveRect* pMoveRectBuffer, ref uint pMoveRectsBufferSizeRequired)
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppMoveRectsBufferSizeRequired = &pMoveRectsBufferSizeRequired)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, DxgiOutduplMoveRect*, uint*, HResult>)(LpVtbl[7]))(ptr, moveRectsBufferSize, pMoveRectBuffer, (uint*)ppMoveRectsBufferSizeRequired);
				return ret;
			}
		}

		public readonly unsafe HResult GetFrameMoveRects(uint moveRectsBufferSize, ref DxgiOutduplMoveRect pMoveRectBuffer, ref uint pMoveRectsBufferSizeRequired)
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiOutduplMoveRect* ppMoveRectBuffer = &pMoveRectBuffer)
			{
				fixed (uint* ppMoveRectsBufferSizeRequired = &pMoveRectsBufferSizeRequired)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, DxgiOutduplMoveRect*, uint*, HResult>)(LpVtbl[7]))(ptr, moveRectsBufferSize, (DxgiOutduplMoveRect*)ppMoveRectBuffer, (uint*)ppMoveRectsBufferSizeRequired);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetFramePointerShape(uint pointerShapeBufferSize, void* pPointerShapeBuffer, uint* pPointerShapeBufferSizeRequired, DxgiOutduplPointerShapeInfo* pPointerShapeInfo)
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, void*, uint*, DxgiOutduplPointerShapeInfo*, HResult>)(LpVtbl[8]))(ptr, pointerShapeBufferSize, pPointerShapeBuffer, pPointerShapeBufferSizeRequired, pPointerShapeInfo);
			return ret;
		}

		public readonly unsafe HResult GetFramePointerShape(uint pointerShapeBufferSize, void* pPointerShapeBuffer, ref uint pPointerShapeBufferSizeRequired, DxgiOutduplPointerShapeInfo* pPointerShapeInfo)
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppPointerShapeBufferSizeRequired = &pPointerShapeBufferSizeRequired)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, void*, uint*, DxgiOutduplPointerShapeInfo*, HResult>)(LpVtbl[8]))(ptr, pointerShapeBufferSize, pPointerShapeBuffer, (uint*)ppPointerShapeBufferSizeRequired, pPointerShapeInfo);
				return ret;
			}
		}

		public readonly unsafe HResult GetFramePointerShape(uint pointerShapeBufferSize, void* pPointerShapeBuffer, uint* pPointerShapeBufferSizeRequired, ref DxgiOutduplPointerShapeInfo pPointerShapeInfo)
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiOutduplPointerShapeInfo* ppPointerShapeInfo = &pPointerShapeInfo)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, void*, uint*, DxgiOutduplPointerShapeInfo*, HResult>)(LpVtbl[8]))(ptr, pointerShapeBufferSize, pPointerShapeBuffer, pPointerShapeBufferSizeRequired, (DxgiOutduplPointerShapeInfo*)ppPointerShapeInfo);
				return ret;
			}
		}

		public readonly unsafe HResult GetFramePointerShape(uint pointerShapeBufferSize, void* pPointerShapeBuffer, ref uint pPointerShapeBufferSizeRequired, ref DxgiOutduplPointerShapeInfo pPointerShapeInfo)
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppPointerShapeBufferSizeRequired = &pPointerShapeBufferSizeRequired)
			{
				fixed (DxgiOutduplPointerShapeInfo* ppPointerShapeInfo = &pPointerShapeInfo)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, void*, uint*, DxgiOutduplPointerShapeInfo*, HResult>)(LpVtbl[8]))(ptr, pointerShapeBufferSize, pPointerShapeBuffer, (uint*)ppPointerShapeBufferSizeRequired, (DxgiOutduplPointerShapeInfo*)ppPointerShapeInfo);
					return ret;
				}
			}
		}

		public readonly unsafe HResult MapDesktopSurface(DxgiMappedRect* pLockedRect)
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, DxgiMappedRect*, HResult>)(LpVtbl[9]))(ptr, pLockedRect);
			return ret;
		}

		public readonly unsafe HResult MapDesktopSurface(ref DxgiMappedRect pLockedRect)
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiMappedRect* ppLockedRect = &pLockedRect)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, DxgiMappedRect*, HResult>)(LpVtbl[9]))(ptr, (DxgiMappedRect*)ppLockedRect);
				return ret;
			}
		}

		public readonly unsafe HResult UnMapDesktopSurface()
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, HResult>)(LpVtbl[10]))(ptr);
			return ret;
		}

		public readonly unsafe HResult ReleaseFrame()
		{
			IDXGIOutputDuplication* ptr = (IDXGIOutputDuplication*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutputDuplication*, HResult>)(LpVtbl[11]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIObject (IDXGIOutputDuplication value)
		{
			return Unsafe.As<IDXGIOutputDuplication, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIOutputDuplication value)
		{
			return Unsafe.As<IDXGIOutputDuplication, IUnknown>(ref value);
		}

	}

	[NativeName("DXGI_OUTDUPL_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiOutduplDesc
	{
		[NativeName("ModeDesc")]
		public DxgiModeDesc ModeDesc;
		[NativeName("Rotation")]
		public DxgiModeRotation Rotation;
		[NativeName("DesktopImageInSystemMemory")]
		public Bool32 DesktopImageInSystemMemory;


	}

	[NativeName("DXGI_OUTDUPL_FRAME_INFO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiOutduplFrameInfo
	{
		[NativeName("LastPresentTime")]
		public long LastPresentTime;
		[NativeName("LastMouseUpdateTime")]
		public long LastMouseUpdateTime;
		[NativeName("AccumulatedFrames")]
		public uint AccumulatedFrames;
		[NativeName("RectsCoalesced")]
		public Bool32 RectsCoalesced;
		[NativeName("ProtectedContentMaskedOut")]
		public Bool32 ProtectedContentMaskedOut;
		[NativeName("PointerPosition")]
		public DxgiOutduplPointerPosition PointerPosition;
		[NativeName("TotalMetadataBufferSize")]
		public uint TotalMetadataBufferSize;
		[NativeName("PointerShapeBufferSize")]
		public uint PointerShapeBufferSize;


	}

	[NativeName("DXGI_OUTDUPL_POINTER_POSITION")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiOutduplPointerPosition
	{
		[NativeName("Position")]
		public Point32 Position;
		[NativeName("Visible")]
		public Bool32 Visible;


	}

	/// <summary>
	/// interface __MIDL_itf_dxgi1_2_0000_0001 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("DXGI_OUTDUPL_MOVE_RECT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiOutduplMoveRect
	{
		[NativeName("SourcePoint")]
		public Point32 SourcePoint;
		[NativeName("DestinationRect")]
		public Rect32 DestinationRect;


	}

	[NativeName("DXGI_OUTDUPL_POINTER_SHAPE_INFO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiOutduplPointerShapeInfo
	{
		[NativeName("Type")]
		public uint Type;
		[NativeName("Width")]
		public uint Width;
		[NativeName("Height")]
		public uint Height;
		[NativeName("Pitch")]
		public uint Pitch;
		[NativeName("HotSpot")]
		public Point32 HotSpot;


	}

	[Guid("aba496dd-b617-4cb8-a866-bc44d7eb1fa2")]
	[NativeName("IDXGISurface2")]
	public partial struct IDXGISurface2 : IComObject, IComObject<IDXGISurface2>, IComObject<IDXGISurface1>, IComObject<IDXGISurface>, IComObject<IDXGIDeviceSubObject>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("aba496dd-b617-4cb8-a866-bc44d7eb1fa2");

		public unsafe IDXGISurface2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetResource(Guid* riid, void** ppParentResource, uint* pSubresourceIndex)
		{
			IDXGISurface2* ptr = (IDXGISurface2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface2*, Guid*, void**, uint*, HResult>)(LpVtbl[2]))(ptr, riid, ppParentResource, pSubresourceIndex);
			return ret;
		}

		public readonly unsafe HResult GetResource(ref Guid riid, void** ppParentResource, uint* pSubresourceIndex)
		{
			IDXGISurface2* ptr = (IDXGISurface2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface2*, Guid*, void**, uint*, HResult>)(LpVtbl[2]))(ptr, (Guid*)priid, ppParentResource, pSubresourceIndex);
				return ret;
			}
		}

		public readonly unsafe HResult GetResource(Guid* riid, void** ppParentResource, ref uint pSubresourceIndex)
		{
			IDXGISurface2* ptr = (IDXGISurface2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSubresourceIndex = &pSubresourceIndex)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface2*, Guid*, void**, uint*, HResult>)(LpVtbl[2]))(ptr, riid, ppParentResource, (uint*)ppSubresourceIndex);
				return ret;
			}
		}

		public readonly unsafe HResult GetResource(ref Guid riid, void** ppParentResource, ref uint pSubresourceIndex)
		{
			IDXGISurface2* ptr = (IDXGISurface2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				fixed (uint* ppSubresourceIndex = &pSubresourceIndex)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISurface2*, Guid*, void**, uint*, HResult>)(LpVtbl[2]))(ptr, (Guid*)priid, ppParentResource, (uint*)ppSubresourceIndex);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGISurface1 (IDXGISurface2 value)
		{
			return Unsafe.As<IDXGISurface2, IDXGISurface1>(ref value);
		}

		public unsafe static implicit operator IDXGISurface (IDXGISurface2 value)
		{
			return Unsafe.As<IDXGISurface2, IDXGISurface>(ref value);
		}

		public unsafe static implicit operator IDXGIDeviceSubObject (IDXGISurface2 value)
		{
			return Unsafe.As<IDXGISurface2, IDXGIDeviceSubObject>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGISurface2 value)
		{
			return Unsafe.As<IDXGISurface2, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGISurface2 value)
		{
			return Unsafe.As<IDXGISurface2, IUnknown>(ref value);
		}

	}

	[Guid("30961379-4609-4a41-998e-54fe567ee0c1")]
	[NativeName("IDXGIResource1")]
	public partial struct IDXGIResource1 : IComObject, IComObject<IDXGIResource1>, IComObject<IDXGIResource>, IComObject<IDXGIDeviceSubObject>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("30961379-4609-4a41-998e-54fe567ee0c1");

		public unsafe IDXGIResource1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult CreateSubresourceSurface(uint index, IDXGISurface2** ppSurface)
		{
			IDXGIResource1* ptr = (IDXGIResource1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource1*, uint, IDXGISurface2**, HResult>)(LpVtbl[4]))(ptr, index, ppSurface);
			return ret;
		}

		public readonly unsafe HResult CreateSubresourceSurface(uint index, ref IDXGISurface2* ppSurface)
		{
			IDXGIResource1* ptr = (IDXGIResource1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGISurface2** pppSurface = &ppSurface)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource1*, uint, IDXGISurface2**, HResult>)(LpVtbl[4]))(ptr, index, (IDXGISurface2**)pppSurface);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSharedHandle(SecurityAttributes* pAttributes, uint dwAccess, char* lpName, nint* pHandle)
		{
			IDXGIResource1* ptr = (IDXGIResource1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource1*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[5]))(ptr, pAttributes, dwAccess, lpName, pHandle);
			return ret;
		}

		public readonly unsafe HResult CreateSharedHandle(ref SecurityAttributes pAttributes, uint dwAccess, char* lpName, nint* pHandle)
		{
			IDXGIResource1* ptr = (IDXGIResource1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SecurityAttributes* ppAttributes = &pAttributes)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource1*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[5]))(ptr, (SecurityAttributes*)ppAttributes, dwAccess, lpName, pHandle);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSharedHandle(SecurityAttributes* pAttributes, uint dwAccess, char* lpName, ref nint pHandle)
		{
			IDXGIResource1* ptr = (IDXGIResource1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nint* ppHandle = &pHandle)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource1*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[5]))(ptr, pAttributes, dwAccess, lpName, (nint*)ppHandle);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSharedHandle(ref SecurityAttributes pAttributes, uint dwAccess, char* lpName, ref nint pHandle)
		{
			IDXGIResource1* ptr = (IDXGIResource1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SecurityAttributes* ppAttributes = &pAttributes)
			{
				fixed (nint* ppHandle = &pHandle)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIResource1*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[5]))(ptr, (SecurityAttributes*)ppAttributes, dwAccess, lpName, (nint*)ppHandle);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIResource (IDXGIResource1 value)
		{
			return Unsafe.As<IDXGIResource1, IDXGIResource>(ref value);
		}

		public unsafe static implicit operator IDXGIDeviceSubObject (IDXGIResource1 value)
		{
			return Unsafe.As<IDXGIResource1, IDXGIDeviceSubObject>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIResource1 value)
		{
			return Unsafe.As<IDXGIResource1, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIResource1 value)
		{
			return Unsafe.As<IDXGIResource1, IUnknown>(ref value);
		}

	}

	[Guid("05008617-fbfd-4051-a790-144884b4f6a9")]
	[NativeName("IDXGIDevice2")]
	public partial struct IDXGIDevice2 : IComObject, IComObject<IDXGIDevice2>, IComObject<IDXGIDevice1>, IComObject<IDXGIDevice>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("05008617-fbfd-4051-a790-144884b4f6a9");

		public unsafe IDXGIDevice2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult OfferResources(uint numResources, IDXGIResource*** ppResources, DxgiOfferResourcePriority priority)
		{
			IDXGIDevice2* ptr = (IDXGIDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice2*, uint, IDXGIResource***, DxgiOfferResourcePriority, HResult>)(LpVtbl[2]))(ptr, numResources, ppResources, priority);
			return ret;
		}

		public readonly unsafe HResult OfferResources(uint numResources, ref IDXGIResource* ppResources, DxgiOfferResourcePriority priority)
		{
			IDXGIDevice2* ptr = (IDXGIDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIResource** pppResources = &ppResources)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice2*, uint, IDXGIResource***, DxgiOfferResourcePriority, HResult>)(LpVtbl[2]))(ptr, numResources, (IDXGIResource***)pppResources, priority);
				return ret;
			}
		}

		public readonly unsafe HResult ReclaimResources(uint numResources, IDXGIResource*** ppResources, Bool32* pDiscarded)
		{
			IDXGIDevice2* ptr = (IDXGIDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice2*, uint, IDXGIResource***, Bool32*, HResult>)(LpVtbl[3]))(ptr, numResources, ppResources, pDiscarded);
			return ret;
		}

		public readonly unsafe HResult ReclaimResources(uint numResources, ref IDXGIResource* ppResources, Bool32* pDiscarded)
		{
			IDXGIDevice2* ptr = (IDXGIDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIResource** pppResources = &ppResources)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice2*, uint, IDXGIResource***, Bool32*, HResult>)(LpVtbl[3]))(ptr, numResources, (IDXGIResource***)pppResources, pDiscarded);
				return ret;
			}
		}

		public readonly unsafe HResult ReclaimResources(uint numResources, IDXGIResource*** ppResources, ref Bool32 pDiscarded)
		{
			IDXGIDevice2* ptr = (IDXGIDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Bool32* ppDiscarded = &pDiscarded)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice2*, uint, IDXGIResource***, Bool32*, HResult>)(LpVtbl[3]))(ptr, numResources, ppResources, (Bool32*)ppDiscarded);
				return ret;
			}
		}

		public readonly unsafe HResult ReclaimResources(uint numResources, ref IDXGIResource* ppResources, ref Bool32 pDiscarded)
		{
			IDXGIDevice2* ptr = (IDXGIDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIResource** pppResources = &ppResources)
			{
				fixed (Bool32* ppDiscarded = &pDiscarded)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice2*, uint, IDXGIResource***, Bool32*, HResult>)(LpVtbl[3]))(ptr, numResources, (IDXGIResource***)pppResources, (Bool32*)ppDiscarded);
					return ret;
				}
			}
		}

		public readonly unsafe HResult EnqueueSetEvent(nint hEvent)
		{
			IDXGIDevice2* ptr = (IDXGIDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice2*, nint, HResult>)(LpVtbl[4]))(ptr, hEvent);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIDevice1 (IDXGIDevice2 value)
		{
			return Unsafe.As<IDXGIDevice2, IDXGIDevice1>(ref value);
		}

		public unsafe static implicit operator IDXGIDevice (IDXGIDevice2 value)
		{
			return Unsafe.As<IDXGIDevice2, IDXGIDevice>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIDevice2 value)
		{
			return Unsafe.As<IDXGIDevice2, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIDevice2 value)
		{
			return Unsafe.As<IDXGIDevice2, IUnknown>(ref value);
		}

	}

	[Guid("790a45f7-0d42-4876-983a-0a55cfe6f4aa")]
	[NativeName("IDXGISwapChain1")]
	public partial struct IDXGISwapChain1 : IComObject, IComObject<IDXGISwapChain1>, IComObject<IDXGISwapChain>, IComObject<IDXGIDeviceSubObject>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("790a45f7-0d42-4876-983a-0a55cfe6f4aa");

		public unsafe IDXGISwapChain1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetDesc1(DxgiSwapChainDesc1* pDesc)
		{
			IDXGISwapChain1* ptr = (IDXGISwapChain1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain1*, DxgiSwapChainDesc1*, HResult>)(LpVtbl[10]))(ptr, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetDesc1(ref DxgiSwapChainDesc1 pDesc)
		{
			IDXGISwapChain1* ptr = (IDXGISwapChain1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain1*, DxgiSwapChainDesc1*, HResult>)(LpVtbl[10]))(ptr, (DxgiSwapChainDesc1*)ppDesc);
				return ret;
			}
		}

		public readonly unsafe HResult GetFullscreenDesc(DxgiSwapChainFullscreenDesc* pDesc)
		{
			IDXGISwapChain1* ptr = (IDXGISwapChain1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain1*, DxgiSwapChainFullscreenDesc*, HResult>)(LpVtbl[11]))(ptr, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetFullscreenDesc(ref DxgiSwapChainFullscreenDesc pDesc)
		{
			IDXGISwapChain1* ptr = (IDXGISwapChain1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainFullscreenDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain1*, DxgiSwapChainFullscreenDesc*, HResult>)(LpVtbl[11]))(ptr, (DxgiSwapChainFullscreenDesc*)ppDesc);
				return ret;
			}
		}

		public readonly unsafe HResult GetHwnd(nint* pHwnd)
		{
			IDXGISwapChain1* ptr = (IDXGISwapChain1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain1*, nint*, HResult>)(LpVtbl[12]))(ptr, pHwnd);
			return ret;
		}

		public readonly unsafe HResult GetHwnd(ref nint pHwnd)
		{
			IDXGISwapChain1* ptr = (IDXGISwapChain1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nint* ppHwnd = &pHwnd)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain1*, nint*, HResult>)(LpVtbl[12]))(ptr, (nint*)ppHwnd);
				return ret;
			}
		}

		public readonly unsafe HResult GetCoreWindow(Guid* refiid, void** ppUnk)
		{
			IDXGISwapChain1* ptr = (IDXGISwapChain1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain1*, Guid*, void**, HResult>)(LpVtbl[13]))(ptr, refiid, ppUnk);
			return ret;
		}

		public readonly unsafe HResult GetCoreWindow(ref Guid refiid, void** ppUnk)
		{
			IDXGISwapChain1* ptr = (IDXGISwapChain1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* prefiid = &refiid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain1*, Guid*, void**, HResult>)(LpVtbl[13]))(ptr, (Guid*)prefiid, ppUnk);
				return ret;
			}
		}

		public readonly unsafe HResult Present1(uint syncInterval, uint presentFlags, DxgiPresentParameters* pPresentParameters)
		{
			IDXGISwapChain1* ptr = (IDXGISwapChain1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain1*, uint, uint, DxgiPresentParameters*, HResult>)(LpVtbl[14]))(ptr, syncInterval, presentFlags, pPresentParameters);
			return ret;
		}

		public readonly unsafe HResult Present1(uint syncInterval, uint presentFlags, ref DxgiPresentParameters pPresentParameters)
		{
			IDXGISwapChain1* ptr = (IDXGISwapChain1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiPresentParameters* ppPresentParameters = &pPresentParameters)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain1*, uint, uint, DxgiPresentParameters*, HResult>)(LpVtbl[14]))(ptr, syncInterval, presentFlags, (DxgiPresentParameters*)ppPresentParameters);
				return ret;
			}
		}

		public readonly unsafe Bool32 IsTemporaryMonoSupported()
		{
			IDXGISwapChain1* ptr = (IDXGISwapChain1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			Bool32 ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain1*, Bool32>)(LpVtbl[15]))(ptr);
			return ret;
		}

		public readonly unsafe HResult GetRestrictToOutput(IDXGIOutput** ppRestrictToOutput)
		{
			IDXGISwapChain1* ptr = (IDXGISwapChain1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain1*, IDXGIOutput**, HResult>)(LpVtbl[16]))(ptr, ppRestrictToOutput);
			return ret;
		}

		public readonly unsafe HResult GetRestrictToOutput(ref IDXGIOutput* ppRestrictToOutput)
		{
			IDXGISwapChain1* ptr = (IDXGISwapChain1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIOutput** pppRestrictToOutput = &ppRestrictToOutput)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain1*, IDXGIOutput**, HResult>)(LpVtbl[16]))(ptr, (IDXGIOutput**)pppRestrictToOutput);
				return ret;
			}
		}

		public readonly unsafe HResult SetBackgroundColor(Vector4* pColor)
		{
			IDXGISwapChain1* ptr = (IDXGISwapChain1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain1*, Vector4*, HResult>)(LpVtbl[17]))(ptr, pColor);
			return ret;
		}

		public readonly unsafe HResult SetBackgroundColor(ref Vector4 pColor)
		{
			IDXGISwapChain1* ptr = (IDXGISwapChain1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Vector4* ppColor = &pColor)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain1*, Vector4*, HResult>)(LpVtbl[17]))(ptr, (Vector4*)ppColor);
				return ret;
			}
		}

		public readonly unsafe HResult GetBackgroundColor(Vector4* pColor)
		{
			IDXGISwapChain1* ptr = (IDXGISwapChain1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain1*, Vector4*, HResult>)(LpVtbl[18]))(ptr, pColor);
			return ret;
		}

		public readonly unsafe HResult GetBackgroundColor(ref Vector4 pColor)
		{
			IDXGISwapChain1* ptr = (IDXGISwapChain1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Vector4* ppColor = &pColor)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain1*, Vector4*, HResult>)(LpVtbl[18]))(ptr, (Vector4*)ppColor);
				return ret;
			}
		}

		public readonly unsafe HResult SetRotation(DxgiModeRotation rotation)
		{
			IDXGISwapChain1* ptr = (IDXGISwapChain1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain1*, DxgiModeRotation, HResult>)(LpVtbl[19]))(ptr, rotation);
			return ret;
		}

		public readonly unsafe HResult GetRotation(DxgiModeRotation* pRotation)
		{
			IDXGISwapChain1* ptr = (IDXGISwapChain1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain1*, DxgiModeRotation*, HResult>)(LpVtbl[20]))(ptr, pRotation);
			return ret;
		}

		public readonly unsafe HResult GetRotation(ref DxgiModeRotation pRotation)
		{
			IDXGISwapChain1* ptr = (IDXGISwapChain1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiModeRotation* ppRotation = &pRotation)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain1*, DxgiModeRotation*, HResult>)(LpVtbl[20]))(ptr, (DxgiModeRotation*)ppRotation);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGISwapChain (IDXGISwapChain1 value)
		{
			return Unsafe.As<IDXGISwapChain1, IDXGISwapChain>(ref value);
		}

		public unsafe static implicit operator IDXGIDeviceSubObject (IDXGISwapChain1 value)
		{
			return Unsafe.As<IDXGISwapChain1, IDXGIDeviceSubObject>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGISwapChain1 value)
		{
			return Unsafe.As<IDXGISwapChain1, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGISwapChain1 value)
		{
			return Unsafe.As<IDXGISwapChain1, IUnknown>(ref value);
		}

	}

	[NativeName("DXGI_SWAP_CHAIN_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiSwapChainDesc1
	{
		[NativeName("Width")]
		public uint Width;
		[NativeName("Height")]
		public uint Height;
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("Stereo")]
		public Bool32 Stereo;
		[NativeName("SampleDesc")]
		public DxgiSampleDesc SampleDesc;
		[NativeName("BufferUsage")]
		public uint BufferUsage;
		[NativeName("BufferCount")]
		public uint BufferCount;
		[NativeName("Scaling")]
		public DxgiScaling Scaling;
		[NativeName("SwapEffect")]
		public DxgiSwapEffect SwapEffect;
		[NativeName("AlphaMode")]
		public DxgiAlphaMode AlphaMode;
		[NativeName("Flags")]
		public uint Flags;


	}

	[NativeName("DXGI_SWAP_CHAIN_FULLSCREEN_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiSwapChainFullscreenDesc
	{
		[NativeName("RefreshRate")]
		public DxgiRational RefreshRate;
		[NativeName("ScanlineOrdering")]
		public DxgiModeScanlineOrder ScanlineOrdering;
		[NativeName("Scaling")]
		public DxgiModeScaling Scaling;
		[NativeName("Windowed")]
		public Bool32 Windowed;


	}

	[NativeName("DXGI_PRESENT_PARAMETERS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiPresentParameters
	{
		[NativeName("DirtyRectsCount")]
		public uint DirtyRectsCount;
		[NativeName("pDirtyRects")]
		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		public unsafe Rect32* PDirtyRects;

		[NativeName("pScrollRect")]
		public unsafe Rect32* PScrollRect;
		[NativeName("pScrollOffset")]
		public unsafe Point32* PScrollOffset;


	}

	[Guid("50c83a1c-e072-4c48-87b0-3630fa36a6d0")]
	[NativeName("IDXGIFactory2")]
	public partial struct IDXGIFactory2 : IComObject, IComObject<IDXGIFactory2>, IComObject<IDXGIFactory1>, IComObject<IDXGIFactory>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("50c83a1c-e072-4c48-87b0-3630fa36a6d0");

		public unsafe IDXGIFactory2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe Bool32 IsWindowedStereoEnabled()
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			Bool32 ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, Bool32>)(LpVtbl[2]))(ptr);
			return ret;
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(IUnknown* pDevice, nint hWnd, DxgiSwapChainDesc1* pDesc, DxgiSwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, pDevice, hWnd, pDesc, pFullscreenDesc, pRestrictToOutput, ppSwapChain);
			return ret;
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(ref IUnknown pDevice, nint hWnd, DxgiSwapChainDesc1* pDesc, DxgiSwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, (IUnknown*)ppDevice, hWnd, pDesc, pFullscreenDesc, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(IUnknown* pDevice, nint hWnd, ref DxgiSwapChainDesc1 pDesc, DxgiSwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, pDevice, hWnd, (DxgiSwapChainDesc1*)ppDesc, pFullscreenDesc, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(ref IUnknown pDevice, nint hWnd, ref DxgiSwapChainDesc1 pDesc, DxgiSwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, (IUnknown*)ppDevice, hWnd, (DxgiSwapChainDesc1*)ppDesc, pFullscreenDesc, pRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(IUnknown* pDevice, nint hWnd, DxgiSwapChainDesc1* pDesc, ref DxgiSwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, pDevice, hWnd, pDesc, (DxgiSwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(ref IUnknown pDevice, nint hWnd, DxgiSwapChainDesc1* pDesc, ref DxgiSwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, (IUnknown*)ppDevice, hWnd, pDesc, (DxgiSwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(IUnknown* pDevice, nint hWnd, ref DxgiSwapChainDesc1 pDesc, ref DxgiSwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (DxgiSwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, pDevice, hWnd, (DxgiSwapChainDesc1*)ppDesc, (DxgiSwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(ref IUnknown pDevice, nint hWnd, ref DxgiSwapChainDesc1 pDesc, ref DxgiSwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (DxgiSwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, (IUnknown*)ppDevice, hWnd, (DxgiSwapChainDesc1*)ppDesc, (DxgiSwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(IUnknown* pDevice, nint hWnd, DxgiSwapChainDesc1* pDesc, DxgiSwapChainFullscreenDesc* pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, pDevice, hWnd, pDesc, pFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(ref IUnknown pDevice, nint hWnd, DxgiSwapChainDesc1* pDesc, DxgiSwapChainFullscreenDesc* pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, (IUnknown*)ppDevice, hWnd, pDesc, pFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(IUnknown* pDevice, nint hWnd, ref DxgiSwapChainDesc1 pDesc, DxgiSwapChainFullscreenDesc* pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, pDevice, hWnd, (DxgiSwapChainDesc1*)ppDesc, pFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(ref IUnknown pDevice, nint hWnd, ref DxgiSwapChainDesc1 pDesc, DxgiSwapChainFullscreenDesc* pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, (IUnknown*)ppDevice, hWnd, (DxgiSwapChainDesc1*)ppDesc, pFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(IUnknown* pDevice, nint hWnd, DxgiSwapChainDesc1* pDesc, ref DxgiSwapChainFullscreenDesc pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, pDevice, hWnd, pDesc, (DxgiSwapChainFullscreenDesc*)ppFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(ref IUnknown pDevice, nint hWnd, DxgiSwapChainDesc1* pDesc, ref DxgiSwapChainFullscreenDesc pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, (IUnknown*)ppDevice, hWnd, pDesc, (DxgiSwapChainFullscreenDesc*)ppFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(IUnknown* pDevice, nint hWnd, ref DxgiSwapChainDesc1 pDesc, ref DxgiSwapChainFullscreenDesc pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (DxgiSwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, pDevice, hWnd, (DxgiSwapChainDesc1*)ppDesc, (DxgiSwapChainFullscreenDesc*)ppFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(ref IUnknown pDevice, nint hWnd, ref DxgiSwapChainDesc1 pDesc, ref DxgiSwapChainFullscreenDesc pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (DxgiSwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
					{
						fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, (IUnknown*)ppDevice, hWnd, (DxgiSwapChainDesc1*)ppDesc, (DxgiSwapChainFullscreenDesc*)ppFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(IUnknown* pDevice, nint hWnd, DxgiSwapChainDesc1* pDesc, DxgiSwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, pDevice, hWnd, pDesc, pFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(ref IUnknown pDevice, nint hWnd, DxgiSwapChainDesc1* pDesc, DxgiSwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, (IUnknown*)ppDevice, hWnd, pDesc, pFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(IUnknown* pDevice, nint hWnd, ref DxgiSwapChainDesc1 pDesc, DxgiSwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, pDevice, hWnd, (DxgiSwapChainDesc1*)ppDesc, pFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(ref IUnknown pDevice, nint hWnd, ref DxgiSwapChainDesc1 pDesc, DxgiSwapChainFullscreenDesc* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, (IUnknown*)ppDevice, hWnd, (DxgiSwapChainDesc1*)ppDesc, pFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(IUnknown* pDevice, nint hWnd, DxgiSwapChainDesc1* pDesc, ref DxgiSwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, pDevice, hWnd, pDesc, (DxgiSwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(ref IUnknown pDevice, nint hWnd, DxgiSwapChainDesc1* pDesc, ref DxgiSwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, (IUnknown*)ppDevice, hWnd, pDesc, (DxgiSwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(IUnknown* pDevice, nint hWnd, ref DxgiSwapChainDesc1 pDesc, ref DxgiSwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (DxgiSwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, pDevice, hWnd, (DxgiSwapChainDesc1*)ppDesc, (DxgiSwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(ref IUnknown pDevice, nint hWnd, ref DxgiSwapChainDesc1 pDesc, ref DxgiSwapChainFullscreenDesc pFullscreenDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (DxgiSwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
					{
						fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, (IUnknown*)ppDevice, hWnd, (DxgiSwapChainDesc1*)ppDesc, (DxgiSwapChainFullscreenDesc*)ppFullscreenDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(IUnknown* pDevice, nint hWnd, DxgiSwapChainDesc1* pDesc, DxgiSwapChainFullscreenDesc* pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, pDevice, hWnd, pDesc, pFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(ref IUnknown pDevice, nint hWnd, DxgiSwapChainDesc1* pDesc, DxgiSwapChainFullscreenDesc* pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, (IUnknown*)ppDevice, hWnd, pDesc, pFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(IUnknown* pDevice, nint hWnd, ref DxgiSwapChainDesc1 pDesc, DxgiSwapChainFullscreenDesc* pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, pDevice, hWnd, (DxgiSwapChainDesc1*)ppDesc, pFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(ref IUnknown pDevice, nint hWnd, ref DxgiSwapChainDesc1 pDesc, DxgiSwapChainFullscreenDesc* pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, (IUnknown*)ppDevice, hWnd, (DxgiSwapChainDesc1*)ppDesc, pFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(IUnknown* pDevice, nint hWnd, DxgiSwapChainDesc1* pDesc, ref DxgiSwapChainFullscreenDesc pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, pDevice, hWnd, pDesc, (DxgiSwapChainFullscreenDesc*)ppFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(ref IUnknown pDevice, nint hWnd, DxgiSwapChainDesc1* pDesc, ref DxgiSwapChainFullscreenDesc pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, (IUnknown*)ppDevice, hWnd, pDesc, (DxgiSwapChainFullscreenDesc*)ppFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(IUnknown* pDevice, nint hWnd, ref DxgiSwapChainDesc1 pDesc, ref DxgiSwapChainFullscreenDesc pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (DxgiSwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, pDevice, hWnd, (DxgiSwapChainDesc1*)ppDesc, (DxgiSwapChainFullscreenDesc*)ppFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForHwnd(ref IUnknown pDevice, nint hWnd, ref DxgiSwapChainDesc1 pDesc, ref DxgiSwapChainFullscreenDesc pFullscreenDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (DxgiSwapChainFullscreenDesc* ppFullscreenDesc = &pFullscreenDesc)
					{
						fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
						{
							fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, nint, DxgiSwapChainDesc1*, DxgiSwapChainFullscreenDesc*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[3]))(ptr, (IUnknown*)ppDevice, hWnd, (DxgiSwapChainDesc1*)ppDesc, (DxgiSwapChainFullscreenDesc*)ppFullscreenDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(IUnknown* pDevice, IUnknown* pWindow, DxgiSwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, pDevice, pWindow, pDesc, pRestrictToOutput, ppSwapChain);
			return ret;
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(ref IUnknown pDevice, IUnknown* pWindow, DxgiSwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, (IUnknown*)ppDevice, pWindow, pDesc, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(IUnknown* pDevice, ref IUnknown pWindow, DxgiSwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppWindow = &pWindow)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, pDevice, (IUnknown*)ppWindow, pDesc, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(ref IUnknown pDevice, ref IUnknown pWindow, DxgiSwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IUnknown* ppWindow = &pWindow)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, (IUnknown*)ppDevice, (IUnknown*)ppWindow, pDesc, pRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(IUnknown* pDevice, IUnknown* pWindow, ref DxgiSwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, pDevice, pWindow, (DxgiSwapChainDesc1*)ppDesc, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(ref IUnknown pDevice, IUnknown* pWindow, ref DxgiSwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, (IUnknown*)ppDevice, pWindow, (DxgiSwapChainDesc1*)ppDesc, pRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(IUnknown* pDevice, ref IUnknown pWindow, ref DxgiSwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppWindow = &pWindow)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, pDevice, (IUnknown*)ppWindow, (DxgiSwapChainDesc1*)ppDesc, pRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(ref IUnknown pDevice, ref IUnknown pWindow, ref DxgiSwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IUnknown* ppWindow = &pWindow)
				{
					fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, (IUnknown*)ppDevice, (IUnknown*)ppWindow, (DxgiSwapChainDesc1*)ppDesc, pRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(IUnknown* pDevice, IUnknown* pWindow, DxgiSwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, pDevice, pWindow, pDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(ref IUnknown pDevice, IUnknown* pWindow, DxgiSwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, (IUnknown*)ppDevice, pWindow, pDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(IUnknown* pDevice, ref IUnknown pWindow, DxgiSwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppWindow = &pWindow)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, pDevice, (IUnknown*)ppWindow, pDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(ref IUnknown pDevice, ref IUnknown pWindow, DxgiSwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IUnknown* ppWindow = &pWindow)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, (IUnknown*)ppDevice, (IUnknown*)ppWindow, pDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(IUnknown* pDevice, IUnknown* pWindow, ref DxgiSwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, pDevice, pWindow, (DxgiSwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(ref IUnknown pDevice, IUnknown* pWindow, ref DxgiSwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, (IUnknown*)ppDevice, pWindow, (DxgiSwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(IUnknown* pDevice, ref IUnknown pWindow, ref DxgiSwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppWindow = &pWindow)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, pDevice, (IUnknown*)ppWindow, (DxgiSwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(ref IUnknown pDevice, ref IUnknown pWindow, ref DxgiSwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IUnknown* ppWindow = &pWindow)
				{
					fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
					{
						fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, (IUnknown*)ppDevice, (IUnknown*)ppWindow, (DxgiSwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(IUnknown* pDevice, IUnknown* pWindow, DxgiSwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, pDevice, pWindow, pDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(ref IUnknown pDevice, IUnknown* pWindow, DxgiSwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, (IUnknown*)ppDevice, pWindow, pDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(IUnknown* pDevice, ref IUnknown pWindow, DxgiSwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppWindow = &pWindow)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, pDevice, (IUnknown*)ppWindow, pDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(ref IUnknown pDevice, ref IUnknown pWindow, DxgiSwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IUnknown* ppWindow = &pWindow)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, (IUnknown*)ppDevice, (IUnknown*)ppWindow, pDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(IUnknown* pDevice, IUnknown* pWindow, ref DxgiSwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, pDevice, pWindow, (DxgiSwapChainDesc1*)ppDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(ref IUnknown pDevice, IUnknown* pWindow, ref DxgiSwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, (IUnknown*)ppDevice, pWindow, (DxgiSwapChainDesc1*)ppDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(IUnknown* pDevice, ref IUnknown pWindow, ref DxgiSwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppWindow = &pWindow)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, pDevice, (IUnknown*)ppWindow, (DxgiSwapChainDesc1*)ppDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(ref IUnknown pDevice, ref IUnknown pWindow, ref DxgiSwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IUnknown* ppWindow = &pWindow)
				{
					fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
					{
						fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, (IUnknown*)ppDevice, (IUnknown*)ppWindow, (DxgiSwapChainDesc1*)ppDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(IUnknown* pDevice, IUnknown* pWindow, DxgiSwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, pDevice, pWindow, pDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(ref IUnknown pDevice, IUnknown* pWindow, DxgiSwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, (IUnknown*)ppDevice, pWindow, pDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(IUnknown* pDevice, ref IUnknown pWindow, DxgiSwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppWindow = &pWindow)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, pDevice, (IUnknown*)ppWindow, pDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(ref IUnknown pDevice, ref IUnknown pWindow, DxgiSwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IUnknown* ppWindow = &pWindow)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, (IUnknown*)ppDevice, (IUnknown*)ppWindow, pDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(IUnknown* pDevice, IUnknown* pWindow, ref DxgiSwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, pDevice, pWindow, (DxgiSwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(ref IUnknown pDevice, IUnknown* pWindow, ref DxgiSwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, (IUnknown*)ppDevice, pWindow, (DxgiSwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(IUnknown* pDevice, ref IUnknown pWindow, ref DxgiSwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppWindow = &pWindow)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, pDevice, (IUnknown*)ppWindow, (DxgiSwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCoreWindow(ref IUnknown pDevice, ref IUnknown pWindow, ref DxgiSwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IUnknown* ppWindow = &pWindow)
				{
					fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
					{
						fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
						{
							fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[4]))(ptr, (IUnknown*)ppDevice, (IUnknown*)ppWindow, (DxgiSwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult GetSharedResourceAdapterLuid(nint hResource, Luid* pLuid)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, nint, Luid*, HResult>)(LpVtbl[5]))(ptr, hResource, pLuid);
			return ret;
		}

		public readonly unsafe HResult GetSharedResourceAdapterLuid(nint hResource, ref Luid pLuid)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Luid* ppLuid = &pLuid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, nint, Luid*, HResult>)(LpVtbl[5]))(ptr, hResource, (Luid*)ppLuid);
				return ret;
			}
		}

		public readonly unsafe HResult RegisterStereoStatusWindow(nint windowHandle, uint wMsg, uint* pdwCookie)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, nint, uint, uint*, HResult>)(LpVtbl[6]))(ptr, windowHandle, wMsg, pdwCookie);
			return ret;
		}

		public readonly unsafe HResult RegisterStereoStatusWindow(nint windowHandle, uint wMsg, ref uint pdwCookie)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppdwCookie = &pdwCookie)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, nint, uint, uint*, HResult>)(LpVtbl[6]))(ptr, windowHandle, wMsg, (uint*)ppdwCookie);
				return ret;
			}
		}

		public readonly unsafe HResult RegisterStereoStatusEvent(nint hEvent, uint* pdwCookie)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, nint, uint*, HResult>)(LpVtbl[7]))(ptr, hEvent, pdwCookie);
			return ret;
		}

		public readonly unsafe HResult RegisterStereoStatusEvent(nint hEvent, ref uint pdwCookie)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppdwCookie = &pdwCookie)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, nint, uint*, HResult>)(LpVtbl[7]))(ptr, hEvent, (uint*)ppdwCookie);
				return ret;
			}
		}

		public readonly unsafe void UnregisterStereoStatus(uint dwCookie)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<IDXGIFactory2*, uint, void>)(LpVtbl[8]))(ptr, dwCookie);
		}

		public readonly unsafe HResult RegisterOcclusionStatusWindow(nint windowHandle, uint wMsg, uint* pdwCookie)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, nint, uint, uint*, HResult>)(LpVtbl[9]))(ptr, windowHandle, wMsg, pdwCookie);
			return ret;
		}

		public readonly unsafe HResult RegisterOcclusionStatusWindow(nint windowHandle, uint wMsg, ref uint pdwCookie)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppdwCookie = &pdwCookie)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, nint, uint, uint*, HResult>)(LpVtbl[9]))(ptr, windowHandle, wMsg, (uint*)ppdwCookie);
				return ret;
			}
		}

		public readonly unsafe HResult RegisterOcclusionStatusEvent(nint hEvent, uint* pdwCookie)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, nint, uint*, HResult>)(LpVtbl[10]))(ptr, hEvent, pdwCookie);
			return ret;
		}

		public readonly unsafe HResult RegisterOcclusionStatusEvent(nint hEvent, ref uint pdwCookie)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppdwCookie = &pdwCookie)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, nint, uint*, HResult>)(LpVtbl[10]))(ptr, hEvent, (uint*)ppdwCookie);
				return ret;
			}
		}

		public readonly unsafe void UnregisterOcclusionStatus(uint dwCookie)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<IDXGIFactory2*, uint, void>)(LpVtbl[11]))(ptr, dwCookie);
		}

		public readonly unsafe HResult CreateSwapChainForComposition(IUnknown* pDevice, DxgiSwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[12]))(ptr, pDevice, pDesc, pRestrictToOutput, ppSwapChain);
			return ret;
		}

		public readonly unsafe HResult CreateSwapChainForComposition(ref IUnknown pDevice, DxgiSwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[12]))(ptr, (IUnknown*)ppDevice, pDesc, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChainForComposition(IUnknown* pDevice, ref DxgiSwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[12]))(ptr, pDevice, (DxgiSwapChainDesc1*)ppDesc, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChainForComposition(ref IUnknown pDevice, ref DxgiSwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[12]))(ptr, (IUnknown*)ppDevice, (DxgiSwapChainDesc1*)ppDesc, pRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForComposition(IUnknown* pDevice, DxgiSwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[12]))(ptr, pDevice, pDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChainForComposition(ref IUnknown pDevice, DxgiSwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[12]))(ptr, (IUnknown*)ppDevice, pDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForComposition(IUnknown* pDevice, ref DxgiSwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[12]))(ptr, pDevice, (DxgiSwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForComposition(ref IUnknown pDevice, ref DxgiSwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[12]))(ptr, (IUnknown*)ppDevice, (DxgiSwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForComposition(IUnknown* pDevice, DxgiSwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[12]))(ptr, pDevice, pDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChainForComposition(ref IUnknown pDevice, DxgiSwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[12]))(ptr, (IUnknown*)ppDevice, pDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForComposition(IUnknown* pDevice, ref DxgiSwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[12]))(ptr, pDevice, (DxgiSwapChainDesc1*)ppDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForComposition(ref IUnknown pDevice, ref DxgiSwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[12]))(ptr, (IUnknown*)ppDevice, (DxgiSwapChainDesc1*)ppDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForComposition(IUnknown* pDevice, DxgiSwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[12]))(ptr, pDevice, pDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForComposition(ref IUnknown pDevice, DxgiSwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[12]))(ptr, (IUnknown*)ppDevice, pDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForComposition(IUnknown* pDevice, ref DxgiSwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[12]))(ptr, pDevice, (DxgiSwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForComposition(ref IUnknown pDevice, ref DxgiSwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactory2* ptr = (IDXGIFactory2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory2*, IUnknown*, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(LpVtbl[12]))(ptr, (IUnknown*)ppDevice, (DxgiSwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIFactory1 (IDXGIFactory2 value)
		{
			return Unsafe.As<IDXGIFactory2, IDXGIFactory1>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory (IDXGIFactory2 value)
		{
			return Unsafe.As<IDXGIFactory2, IDXGIFactory>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIFactory2 value)
		{
			return Unsafe.As<IDXGIFactory2, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIFactory2 value)
		{
			return Unsafe.As<IDXGIFactory2, IUnknown>(ref value);
		}

	}

	[Guid("0aa1ae0a-fa0e-4b84-8644-e05ff8e5acb5")]
	[NativeName("IDXGIAdapter2")]
	public partial struct IDXGIAdapter2 : IComObject, IComObject<IDXGIAdapter2>, IComObject<IDXGIAdapter1>, IComObject<IDXGIAdapter>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("0aa1ae0a-fa0e-4b84-8644-e05ff8e5acb5");

		public unsafe IDXGIAdapter2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetDesc2(DxgiAdapterDesc2* pDesc)
		{
			IDXGIAdapter2* ptr = (IDXGIAdapter2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter2*, DxgiAdapterDesc2*, HResult>)(LpVtbl[1]))(ptr, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetDesc2(ref DxgiAdapterDesc2 pDesc)
		{
			IDXGIAdapter2* ptr = (IDXGIAdapter2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiAdapterDesc2* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter2*, DxgiAdapterDesc2*, HResult>)(LpVtbl[1]))(ptr, (DxgiAdapterDesc2*)ppDesc);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIAdapter1 (IDXGIAdapter2 value)
		{
			return Unsafe.As<IDXGIAdapter2, IDXGIAdapter1>(ref value);
		}

		public unsafe static implicit operator IDXGIAdapter (IDXGIAdapter2 value)
		{
			return Unsafe.As<IDXGIAdapter2, IDXGIAdapter>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIAdapter2 value)
		{
			return Unsafe.As<IDXGIAdapter2, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIAdapter2 value)
		{
			return Unsafe.As<IDXGIAdapter2, IUnknown>(ref value);
		}

	}

	[NativeName("DXGI_ADAPTER_DESC2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiAdapterDesc2
	{
		[NativeName("Description")]
		public char Description_0;
		public char Description_1;
		public char Description_2;
		public char Description_3;
		public char Description_4;
		public char Description_5;
		public char Description_6;
		public char Description_7;
		public char Description_8;
		public char Description_9;
		public char Description_10;
		public char Description_11;
		public char Description_12;
		public char Description_13;
		public char Description_14;
		public char Description_15;
		public char Description_16;
		public char Description_17;
		public char Description_18;
		public char Description_19;
		public char Description_20;
		public char Description_21;
		public char Description_22;
		public char Description_23;
		public char Description_24;
		public char Description_25;
		public char Description_26;
		public char Description_27;
		public char Description_28;
		public char Description_29;
		public char Description_30;
		public char Description_31;
		public char Description_32;
		public char Description_33;
		public char Description_34;
		public char Description_35;
		public char Description_36;
		public char Description_37;
		public char Description_38;
		public char Description_39;
		public char Description_40;
		public char Description_41;
		public char Description_42;
		public char Description_43;
		public char Description_44;
		public char Description_45;
		public char Description_46;
		public char Description_47;
		public char Description_48;
		public char Description_49;
		public char Description_50;
		public char Description_51;
		public char Description_52;
		public char Description_53;
		public char Description_54;
		public char Description_55;
		public char Description_56;
		public char Description_57;
		public char Description_58;
		public char Description_59;
		public char Description_60;
		public char Description_61;
		public char Description_62;
		public char Description_63;
		public char Description_64;
		public char Description_65;
		public char Description_66;
		public char Description_67;
		public char Description_68;
		public char Description_69;
		public char Description_70;
		public char Description_71;
		public char Description_72;
		public char Description_73;
		public char Description_74;
		public char Description_75;
		public char Description_76;
		public char Description_77;
		public char Description_78;
		public char Description_79;
		public char Description_80;
		public char Description_81;
		public char Description_82;
		public char Description_83;
		public char Description_84;
		public char Description_85;
		public char Description_86;
		public char Description_87;
		public char Description_88;
		public char Description_89;
		public char Description_90;
		public char Description_91;
		public char Description_92;
		public char Description_93;
		public char Description_94;
		public char Description_95;
		public char Description_96;
		public char Description_97;
		public char Description_98;
		public char Description_99;
		public char Description_100;
		public char Description_101;
		public char Description_102;
		public char Description_103;
		public char Description_104;
		public char Description_105;
		public char Description_106;
		public char Description_107;
		public char Description_108;
		public char Description_109;
		public char Description_110;
		public char Description_111;
		public char Description_112;
		public char Description_113;
		public char Description_114;
		public char Description_115;
		public char Description_116;
		public char Description_117;
		public char Description_118;
		public char Description_119;
		public char Description_120;
		public char Description_121;
		public char Description_122;
		public char Description_123;
		public char Description_124;
		public char Description_125;
		public char Description_126;
		public char Description_127;
		[NativeName("VendorId")]
		public uint VendorId;
		[NativeName("DeviceId")]
		public uint DeviceId;
		[NativeName("SubSysId")]
		public uint SubSysId;
		[NativeName("Revision")]
		public uint Revision;
		[NativeName("DedicatedVideoMemory")]
		public nuint DedicatedVideoMemory;
		[NativeName("DedicatedSystemMemory")]
		public nuint DedicatedSystemMemory;
		[NativeName("SharedSystemMemory")]
		public nuint SharedSystemMemory;
		[NativeName("AdapterLuid")]
		public Luid AdapterLuid;
		[NativeName("Flags")]
		public uint Flags;
		[NativeName("GraphicsPreemptionGranularity")]
		public DxgiGraphicsPreemptionGranularity GraphicsPreemptionGranularity;
		[NativeName("ComputePreemptionGranularity")]
		public DxgiComputePreemptionGranularity ComputePreemptionGranularity;


	}

	[Guid("00cddea8-939b-4b83-a340-a685226666cc")]
	[NativeName("IDXGIOutput1")]
	public partial struct IDXGIOutput1 : IComObject, IComObject<IDXGIOutput1>, IComObject<IDXGIOutput>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("00cddea8-939b-4b83-a340-a685226666cc");

		public unsafe IDXGIOutput1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetDisplayModeList1(DxgiFormat enumFormat, uint flags, uint* pNumModes, DxgiModeDesc1* pDesc)
		{
			IDXGIOutput1* ptr = (IDXGIOutput1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, DxgiFormat, uint, uint*, DxgiModeDesc1*, HResult>)(LpVtbl[12]))(ptr, enumFormat, flags, pNumModes, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetDisplayModeList1(DxgiFormat enumFormat, uint flags, ref uint pNumModes, DxgiModeDesc1* pDesc)
		{
			IDXGIOutput1* ptr = (IDXGIOutput1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumModes = &pNumModes)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, DxgiFormat, uint, uint*, DxgiModeDesc1*, HResult>)(LpVtbl[12]))(ptr, enumFormat, flags, (uint*)ppNumModes, pDesc);
				return ret;
			}
		}

		public readonly unsafe HResult GetDisplayModeList1(DxgiFormat enumFormat, uint flags, uint* pNumModes, ref DxgiModeDesc1 pDesc)
		{
			IDXGIOutput1* ptr = (IDXGIOutput1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiModeDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, DxgiFormat, uint, uint*, DxgiModeDesc1*, HResult>)(LpVtbl[12]))(ptr, enumFormat, flags, pNumModes, (DxgiModeDesc1*)ppDesc);
				return ret;
			}
		}

		public readonly unsafe HResult GetDisplayModeList1(DxgiFormat enumFormat, uint flags, ref uint pNumModes, ref DxgiModeDesc1 pDesc)
		{
			IDXGIOutput1* ptr = (IDXGIOutput1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumModes = &pNumModes)
			{
				fixed (DxgiModeDesc1* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, DxgiFormat, uint, uint*, DxgiModeDesc1*, HResult>)(LpVtbl[12]))(ptr, enumFormat, flags, (uint*)ppNumModes, (DxgiModeDesc1*)ppDesc);
					return ret;
				}
			}
		}

		public readonly unsafe HResult FindClosestMatchingMode1(DxgiModeDesc1* pModeToMatch, DxgiModeDesc1* pClosestMatch, IUnknown* pConcernedDevice)
		{
			IDXGIOutput1* ptr = (IDXGIOutput1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, DxgiModeDesc1*, DxgiModeDesc1*, IUnknown*, HResult>)(LpVtbl[13]))(ptr, pModeToMatch, pClosestMatch, pConcernedDevice);
			return ret;
		}

		public readonly unsafe HResult FindClosestMatchingMode1(ref DxgiModeDesc1 pModeToMatch, DxgiModeDesc1* pClosestMatch, IUnknown* pConcernedDevice)
		{
			IDXGIOutput1* ptr = (IDXGIOutput1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiModeDesc1* ppModeToMatch = &pModeToMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, DxgiModeDesc1*, DxgiModeDesc1*, IUnknown*, HResult>)(LpVtbl[13]))(ptr, (DxgiModeDesc1*)ppModeToMatch, pClosestMatch, pConcernedDevice);
				return ret;
			}
		}

		public readonly unsafe HResult FindClosestMatchingMode1(DxgiModeDesc1* pModeToMatch, ref DxgiModeDesc1 pClosestMatch, IUnknown* pConcernedDevice)
		{
			IDXGIOutput1* ptr = (IDXGIOutput1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiModeDesc1* ppClosestMatch = &pClosestMatch)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, DxgiModeDesc1*, DxgiModeDesc1*, IUnknown*, HResult>)(LpVtbl[13]))(ptr, pModeToMatch, (DxgiModeDesc1*)ppClosestMatch, pConcernedDevice);
				return ret;
			}
		}

		public readonly unsafe HResult FindClosestMatchingMode1(ref DxgiModeDesc1 pModeToMatch, ref DxgiModeDesc1 pClosestMatch, IUnknown* pConcernedDevice)
		{
			IDXGIOutput1* ptr = (IDXGIOutput1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiModeDesc1* ppModeToMatch = &pModeToMatch)
			{
				fixed (DxgiModeDesc1* ppClosestMatch = &pClosestMatch)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, DxgiModeDesc1*, DxgiModeDesc1*, IUnknown*, HResult>)(LpVtbl[13]))(ptr, (DxgiModeDesc1*)ppModeToMatch, (DxgiModeDesc1*)ppClosestMatch, pConcernedDevice);
					return ret;
				}
			}
		}

		public readonly unsafe HResult FindClosestMatchingMode1(DxgiModeDesc1* pModeToMatch, DxgiModeDesc1* pClosestMatch, ref IUnknown pConcernedDevice)
		{
			IDXGIOutput1* ptr = (IDXGIOutput1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, DxgiModeDesc1*, DxgiModeDesc1*, IUnknown*, HResult>)(LpVtbl[13]))(ptr, pModeToMatch, pClosestMatch, (IUnknown*)ppConcernedDevice);
				return ret;
			}
		}

		public readonly unsafe HResult FindClosestMatchingMode1(ref DxgiModeDesc1 pModeToMatch, DxgiModeDesc1* pClosestMatch, ref IUnknown pConcernedDevice)
		{
			IDXGIOutput1* ptr = (IDXGIOutput1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiModeDesc1* ppModeToMatch = &pModeToMatch)
			{
				fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, DxgiModeDesc1*, DxgiModeDesc1*, IUnknown*, HResult>)(LpVtbl[13]))(ptr, (DxgiModeDesc1*)ppModeToMatch, pClosestMatch, (IUnknown*)ppConcernedDevice);
					return ret;
				}
			}
		}

		public readonly unsafe HResult FindClosestMatchingMode1(DxgiModeDesc1* pModeToMatch, ref DxgiModeDesc1 pClosestMatch, ref IUnknown pConcernedDevice)
		{
			IDXGIOutput1* ptr = (IDXGIOutput1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiModeDesc1* ppClosestMatch = &pClosestMatch)
			{
				fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, DxgiModeDesc1*, DxgiModeDesc1*, IUnknown*, HResult>)(LpVtbl[13]))(ptr, pModeToMatch, (DxgiModeDesc1*)ppClosestMatch, (IUnknown*)ppConcernedDevice);
					return ret;
				}
			}
		}

		public readonly unsafe HResult FindClosestMatchingMode1(ref DxgiModeDesc1 pModeToMatch, ref DxgiModeDesc1 pClosestMatch, ref IUnknown pConcernedDevice)
		{
			IDXGIOutput1* ptr = (IDXGIOutput1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiModeDesc1* ppModeToMatch = &pModeToMatch)
			{
				fixed (DxgiModeDesc1* ppClosestMatch = &pClosestMatch)
				{
					fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, DxgiModeDesc1*, DxgiModeDesc1*, IUnknown*, HResult>)(LpVtbl[13]))(ptr, (DxgiModeDesc1*)ppModeToMatch, (DxgiModeDesc1*)ppClosestMatch, (IUnknown*)ppConcernedDevice);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult GetDisplaySurfaceData1(IDXGIResource* pDestination)
		{
			IDXGIOutput1* ptr = (IDXGIOutput1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IDXGIResource*, HResult>)(LpVtbl[14]))(ptr, pDestination);
			return ret;
		}

		public readonly unsafe HResult GetDisplaySurfaceData1(ref IDXGIResource pDestination)
		{
			IDXGIOutput1* ptr = (IDXGIOutput1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIResource* ppDestination = &pDestination)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IDXGIResource*, HResult>)(LpVtbl[14]))(ptr, (IDXGIResource*)ppDestination);
				return ret;
			}
		}

		public readonly unsafe HResult DuplicateOutput(IUnknown* pDevice, IDXGIOutputDuplication** ppOutputDuplication)
		{
			IDXGIOutput1* ptr = (IDXGIOutput1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IUnknown*, IDXGIOutputDuplication**, HResult>)(LpVtbl[15]))(ptr, pDevice, ppOutputDuplication);
			return ret;
		}

		public readonly unsafe HResult DuplicateOutput(ref IUnknown pDevice, IDXGIOutputDuplication** ppOutputDuplication)
		{
			IDXGIOutput1* ptr = (IDXGIOutput1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IUnknown*, IDXGIOutputDuplication**, HResult>)(LpVtbl[15]))(ptr, (IUnknown*)ppDevice, ppOutputDuplication);
				return ret;
			}
		}

		public readonly unsafe HResult DuplicateOutput(IUnknown* pDevice, ref IDXGIOutputDuplication* ppOutputDuplication)
		{
			IDXGIOutput1* ptr = (IDXGIOutput1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIOutputDuplication** pppOutputDuplication = &ppOutputDuplication)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IUnknown*, IDXGIOutputDuplication**, HResult>)(LpVtbl[15]))(ptr, pDevice, (IDXGIOutputDuplication**)pppOutputDuplication);
				return ret;
			}
		}

		public readonly unsafe HResult DuplicateOutput(ref IUnknown pDevice, ref IDXGIOutputDuplication* ppOutputDuplication)
		{
			IDXGIOutput1* ptr = (IDXGIOutput1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIOutputDuplication** pppOutputDuplication = &ppOutputDuplication)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput1*, IUnknown*, IDXGIOutputDuplication**, HResult>)(LpVtbl[15]))(ptr, (IUnknown*)ppDevice, (IDXGIOutputDuplication**)pppOutputDuplication);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIOutput (IDXGIOutput1 value)
		{
			return Unsafe.As<IDXGIOutput1, IDXGIOutput>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIOutput1 value)
		{
			return Unsafe.As<IDXGIOutput1, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIOutput1 value)
		{
			return Unsafe.As<IDXGIOutput1, IUnknown>(ref value);
		}

	}

	[NativeName("DXGI_MODE_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiModeDesc1
	{
		[NativeName("Width")]
		public uint Width;
		[NativeName("Height")]
		public uint Height;
		[NativeName("RefreshRate")]
		public DxgiRational RefreshRate;
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("ScanlineOrdering")]
		public DxgiModeScanlineOrder ScanlineOrdering;
		[NativeName("Scaling")]
		public DxgiModeScaling Scaling;
		[NativeName("Stereo")]
		public Bool32 Stereo;


	}

	[Guid("6007896c-3244-4afd-bf18-a6d3beda5023")]
	[NativeName("IDXGIDevice3")]
	public partial struct IDXGIDevice3 : IComObject, IComObject<IDXGIDevice3>, IComObject<IDXGIDevice2>, IComObject<IDXGIDevice1>, IComObject<IDXGIDevice>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("6007896c-3244-4afd-bf18-a6d3beda5023");

		public unsafe IDXGIDevice3 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void Trim()
		{
			IDXGIDevice3* ptr = (IDXGIDevice3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<IDXGIDevice3*, void>)(LpVtbl[3]))(ptr);
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIDevice2 (IDXGIDevice3 value)
		{
			return Unsafe.As<IDXGIDevice3, IDXGIDevice2>(ref value);
		}

		public unsafe static implicit operator IDXGIDevice1 (IDXGIDevice3 value)
		{
			return Unsafe.As<IDXGIDevice3, IDXGIDevice1>(ref value);
		}

		public unsafe static implicit operator IDXGIDevice (IDXGIDevice3 value)
		{
			return Unsafe.As<IDXGIDevice3, IDXGIDevice>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIDevice3 value)
		{
			return Unsafe.As<IDXGIDevice3, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIDevice3 value)
		{
			return Unsafe.As<IDXGIDevice3, IUnknown>(ref value);
		}

	}

	[Guid("a8be2ac4-199f-4946-b331-79599fb98de7")]
	[NativeName("IDXGISwapChain2")]
	public partial struct IDXGISwapChain2 : IComObject, IComObject<IDXGISwapChain2>, IComObject<IDXGISwapChain1>, IComObject<IDXGISwapChain>, IComObject<IDXGIDeviceSubObject>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("a8be2ac4-199f-4946-b331-79599fb98de7");

		public unsafe IDXGISwapChain2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult SetSourceSize(uint width, uint height)
		{
			IDXGISwapChain2* ptr = (IDXGISwapChain2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint, uint, HResult>)(LpVtbl[11]))(ptr, width, height);
			return ret;
		}

		public readonly unsafe HResult GetSourceSize(uint* pWidth, uint* pHeight)
		{
			IDXGISwapChain2* ptr = (IDXGISwapChain2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint*, uint*, HResult>)(LpVtbl[12]))(ptr, pWidth, pHeight);
			return ret;
		}

		public readonly unsafe HResult GetSourceSize(ref uint pWidth, uint* pHeight)
		{
			IDXGISwapChain2* ptr = (IDXGISwapChain2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppWidth = &pWidth)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint*, uint*, HResult>)(LpVtbl[12]))(ptr, (uint*)ppWidth, pHeight);
				return ret;
			}
		}

		public readonly unsafe HResult GetSourceSize(uint* pWidth, ref uint pHeight)
		{
			IDXGISwapChain2* ptr = (IDXGISwapChain2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppHeight = &pHeight)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint*, uint*, HResult>)(LpVtbl[12]))(ptr, pWidth, (uint*)ppHeight);
				return ret;
			}
		}

		public readonly unsafe HResult GetSourceSize(ref uint pWidth, ref uint pHeight)
		{
			IDXGISwapChain2* ptr = (IDXGISwapChain2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppWidth = &pWidth)
			{
				fixed (uint* ppHeight = &pHeight)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, uint*, uint*, HResult>)(LpVtbl[12]))(ptr, (uint*)ppWidth, (uint*)ppHeight);
					return ret;
				}
			}
		}

		public readonly unsafe nint GetFrameLatencyWaitableObject()
		{
			IDXGISwapChain2* ptr = (IDXGISwapChain2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			nint ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, nint>)(LpVtbl[15]))(ptr);
			return ret;
		}

		public readonly unsafe HResult SetMatrixTransform(DxgiMatrix3X2F* pMatrix)
		{
			IDXGISwapChain2* ptr = (IDXGISwapChain2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, DxgiMatrix3X2F*, HResult>)(LpVtbl[16]))(ptr, pMatrix);
			return ret;
		}

		public readonly unsafe HResult SetMatrixTransform(ref DxgiMatrix3X2F pMatrix)
		{
			IDXGISwapChain2* ptr = (IDXGISwapChain2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiMatrix3X2F* ppMatrix = &pMatrix)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, DxgiMatrix3X2F*, HResult>)(LpVtbl[16]))(ptr, (DxgiMatrix3X2F*)ppMatrix);
				return ret;
			}
		}

		public readonly unsafe HResult GetMatrixTransform(DxgiMatrix3X2F* pMatrix)
		{
			IDXGISwapChain2* ptr = (IDXGISwapChain2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, DxgiMatrix3X2F*, HResult>)(LpVtbl[17]))(ptr, pMatrix);
			return ret;
		}

		public readonly unsafe HResult GetMatrixTransform(ref DxgiMatrix3X2F pMatrix)
		{
			IDXGISwapChain2* ptr = (IDXGISwapChain2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiMatrix3X2F* ppMatrix = &pMatrix)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain2*, DxgiMatrix3X2F*, HResult>)(LpVtbl[17]))(ptr, (DxgiMatrix3X2F*)ppMatrix);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGISwapChain1 (IDXGISwapChain2 value)
		{
			return Unsafe.As<IDXGISwapChain2, IDXGISwapChain1>(ref value);
		}

		public unsafe static implicit operator IDXGISwapChain (IDXGISwapChain2 value)
		{
			return Unsafe.As<IDXGISwapChain2, IDXGISwapChain>(ref value);
		}

		public unsafe static implicit operator IDXGIDeviceSubObject (IDXGISwapChain2 value)
		{
			return Unsafe.As<IDXGISwapChain2, IDXGIDeviceSubObject>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGISwapChain2 value)
		{
			return Unsafe.As<IDXGISwapChain2, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGISwapChain2 value)
		{
			return Unsafe.As<IDXGISwapChain2, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// interface __MIDL_itf_dxgi1_3_0000_0001 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("DXGI_MATRIX_3X2_F")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiMatrix3X2F
	{
		[NativeName("_11")]
		public float _11;
		[NativeName("_12")]
		public float _12;
		[NativeName("_21")]
		public float _21;
		[NativeName("_22")]
		public float _22;
		[NativeName("_31")]
		public float _31;
		[NativeName("_32")]
		public float _32;


	}

	[Guid("595e39d1-2724-4663-99b1-da969de28364")]
	[NativeName("IDXGIOutput2")]
	public partial struct IDXGIOutput2 : IComObject, IComObject<IDXGIOutput2>, IComObject<IDXGIOutput1>, IComObject<IDXGIOutput>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("595e39d1-2724-4663-99b1-da969de28364");

		public unsafe IDXGIOutput2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe Bool32 SupportsOverlays()
		{
			IDXGIOutput2* ptr = (IDXGIOutput2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			Bool32 ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput2*, Bool32>)(LpVtbl[4]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIOutput1 (IDXGIOutput2 value)
		{
			return Unsafe.As<IDXGIOutput2, IDXGIOutput1>(ref value);
		}

		public unsafe static implicit operator IDXGIOutput (IDXGIOutput2 value)
		{
			return Unsafe.As<IDXGIOutput2, IDXGIOutput>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIOutput2 value)
		{
			return Unsafe.As<IDXGIOutput2, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIOutput2 value)
		{
			return Unsafe.As<IDXGIOutput2, IUnknown>(ref value);
		}

	}

	[Guid("25483823-cd46-4c7d-86ca-47aa95b837bd")]
	[NativeName("IDXGIFactory3")]
	public partial struct IDXGIFactory3 : IComObject, IComObject<IDXGIFactory3>, IComObject<IDXGIFactory2>, IComObject<IDXGIFactory1>, IComObject<IDXGIFactory>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("25483823-cd46-4c7d-86ca-47aa95b837bd");

		public unsafe IDXGIFactory3 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe uint GetCreationFlags()
		{
			IDXGIFactory3* ptr = (IDXGIFactory3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory3*, uint>)(LpVtbl[11]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIFactory2 (IDXGIFactory3 value)
		{
			return Unsafe.As<IDXGIFactory3, IDXGIFactory2>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory1 (IDXGIFactory3 value)
		{
			return Unsafe.As<IDXGIFactory3, IDXGIFactory1>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory (IDXGIFactory3 value)
		{
			return Unsafe.As<IDXGIFactory3, IDXGIFactory>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIFactory3 value)
		{
			return Unsafe.As<IDXGIFactory3, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIFactory3 value)
		{
			return Unsafe.As<IDXGIFactory3, IUnknown>(ref value);
		}

	}

	[Guid("2633066b-4514-4c7a-8fd8-12ea98059d18")]
	[NativeName("IDXGIDecodeSwapChain")]
	public partial struct IDXGIDecodeSwapChain : IComObject, IComObject<IDXGIDecodeSwapChain>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("2633066b-4514-4c7a-8fd8-12ea98059d18");

		public unsafe IDXGIDecodeSwapChain (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult PresentBuffer(uint bufferToPresent, uint syncInterval, uint flags)
		{
			IDXGIDecodeSwapChain* ptr = (IDXGIDecodeSwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDecodeSwapChain*, uint, uint, uint, HResult>)(*LpVtbl))(ptr, bufferToPresent, syncInterval, flags);
			return ret;
		}

		public readonly unsafe HResult SetSourceRect(Rect32* pRect)
		{
			IDXGIDecodeSwapChain* ptr = (IDXGIDecodeSwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDecodeSwapChain*, Rect32*, HResult>)(LpVtbl[1]))(ptr, pRect);
			return ret;
		}

		public readonly unsafe HResult SetSourceRect(ref Rect32 pRect)
		{
			IDXGIDecodeSwapChain* ptr = (IDXGIDecodeSwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppRect = &pRect)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDecodeSwapChain*, Rect32*, HResult>)(LpVtbl[1]))(ptr, (Rect32*)ppRect);
				return ret;
			}
		}

		public readonly unsafe HResult SetTargetRect(Rect32* pRect)
		{
			IDXGIDecodeSwapChain* ptr = (IDXGIDecodeSwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDecodeSwapChain*, Rect32*, HResult>)(LpVtbl[2]))(ptr, pRect);
			return ret;
		}

		public readonly unsafe HResult SetTargetRect(ref Rect32 pRect)
		{
			IDXGIDecodeSwapChain* ptr = (IDXGIDecodeSwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppRect = &pRect)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDecodeSwapChain*, Rect32*, HResult>)(LpVtbl[2]))(ptr, (Rect32*)ppRect);
				return ret;
			}
		}

		public readonly unsafe HResult SetDestSize(uint width, uint height)
		{
			IDXGIDecodeSwapChain* ptr = (IDXGIDecodeSwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDecodeSwapChain*, uint, uint, HResult>)(LpVtbl[3]))(ptr, width, height);
			return ret;
		}

		public readonly unsafe HResult GetSourceRect(Rect32* pRect)
		{
			IDXGIDecodeSwapChain* ptr = (IDXGIDecodeSwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDecodeSwapChain*, Rect32*, HResult>)(LpVtbl[4]))(ptr, pRect);
			return ret;
		}

		public readonly unsafe HResult GetSourceRect(ref Rect32 pRect)
		{
			IDXGIDecodeSwapChain* ptr = (IDXGIDecodeSwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppRect = &pRect)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDecodeSwapChain*, Rect32*, HResult>)(LpVtbl[4]))(ptr, (Rect32*)ppRect);
				return ret;
			}
		}

		public readonly unsafe HResult GetTargetRect(Rect32* pRect)
		{
			IDXGIDecodeSwapChain* ptr = (IDXGIDecodeSwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDecodeSwapChain*, Rect32*, HResult>)(LpVtbl[5]))(ptr, pRect);
			return ret;
		}

		public readonly unsafe HResult GetTargetRect(ref Rect32 pRect)
		{
			IDXGIDecodeSwapChain* ptr = (IDXGIDecodeSwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppRect = &pRect)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDecodeSwapChain*, Rect32*, HResult>)(LpVtbl[5]))(ptr, (Rect32*)ppRect);
				return ret;
			}
		}

		public readonly unsafe HResult GetDestSize(uint* pWidth, uint* pHeight)
		{
			IDXGIDecodeSwapChain* ptr = (IDXGIDecodeSwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDecodeSwapChain*, uint*, uint*, HResult>)(LpVtbl[6]))(ptr, pWidth, pHeight);
			return ret;
		}

		public readonly unsafe HResult GetDestSize(ref uint pWidth, uint* pHeight)
		{
			IDXGIDecodeSwapChain* ptr = (IDXGIDecodeSwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppWidth = &pWidth)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDecodeSwapChain*, uint*, uint*, HResult>)(LpVtbl[6]))(ptr, (uint*)ppWidth, pHeight);
				return ret;
			}
		}

		public readonly unsafe HResult GetDestSize(uint* pWidth, ref uint pHeight)
		{
			IDXGIDecodeSwapChain* ptr = (IDXGIDecodeSwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppHeight = &pHeight)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDecodeSwapChain*, uint*, uint*, HResult>)(LpVtbl[6]))(ptr, pWidth, (uint*)ppHeight);
				return ret;
			}
		}

		public readonly unsafe HResult GetDestSize(ref uint pWidth, ref uint pHeight)
		{
			IDXGIDecodeSwapChain* ptr = (IDXGIDecodeSwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppWidth = &pWidth)
			{
				fixed (uint* ppHeight = &pHeight)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDecodeSwapChain*, uint*, uint*, HResult>)(LpVtbl[6]))(ptr, (uint*)ppWidth, (uint*)ppHeight);
					return ret;
				}
			}
		}

		public readonly unsafe HResult SetColorSpace(DXGIMULTIPLANEOVERLAYYCbCrFLAGS colorSpace)
		{
			IDXGIDecodeSwapChain* ptr = (IDXGIDecodeSwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDecodeSwapChain*, DXGIMULTIPLANEOVERLAYYCbCrFLAGS, HResult>)(LpVtbl[7]))(ptr, colorSpace);
			return ret;
		}

		public readonly unsafe DXGIMULTIPLANEOVERLAYYCbCrFLAGS GetColorSpace()
		{
			IDXGIDecodeSwapChain* ptr = (IDXGIDecodeSwapChain*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			DXGIMULTIPLANEOVERLAYYCbCrFLAGS ret = ((delegate* unmanaged[Stdcall]<IDXGIDecodeSwapChain*, DXGIMULTIPLANEOVERLAYYCbCrFLAGS>)(LpVtbl[8]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDXGIDecodeSwapChain value)
		{
			return Unsafe.As<IDXGIDecodeSwapChain, IUnknown>(ref value);
		}

	}

	[Guid("41e7d1f2-a591-4f7b-a2e5-fa9c843e1c12")]
	[NativeName("IDXGIFactoryMedia")]
	public partial struct IDXGIFactoryMedia : IComObject, IComObject<IDXGIFactoryMedia>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("41e7d1f2-a591-4f7b-a2e5-fa9c843e1c12");

		public unsafe IDXGIFactoryMedia (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult CreateSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, DxgiSwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(*LpVtbl))(ptr, pDevice, hSurface, pDesc, pRestrictToOutput, ppSwapChain);
			return ret;
		}

		public readonly unsafe HResult CreateSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, DxgiSwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(*LpVtbl))(ptr, (IUnknown*)ppDevice, hSurface, pDesc, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, ref DxgiSwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(*LpVtbl))(ptr, pDevice, hSurface, (DxgiSwapChainDesc1*)ppDesc, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, ref DxgiSwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(*LpVtbl))(ptr, (IUnknown*)ppDevice, hSurface, (DxgiSwapChainDesc1*)ppDesc, pRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, DxgiSwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(*LpVtbl))(ptr, pDevice, hSurface, pDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, DxgiSwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(*LpVtbl))(ptr, (IUnknown*)ppDevice, hSurface, pDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, ref DxgiSwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(*LpVtbl))(ptr, pDevice, hSurface, (DxgiSwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, ref DxgiSwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(*LpVtbl))(ptr, (IUnknown*)ppDevice, hSurface, (DxgiSwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, DxgiSwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(*LpVtbl))(ptr, pDevice, hSurface, pDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, DxgiSwapChainDesc1* pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(*LpVtbl))(ptr, (IUnknown*)ppDevice, hSurface, pDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, ref DxgiSwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(*LpVtbl))(ptr, pDevice, hSurface, (DxgiSwapChainDesc1*)ppDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, ref DxgiSwapChainDesc1 pDesc, IDXGIOutput* pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(*LpVtbl))(ptr, (IUnknown*)ppDevice, hSurface, (DxgiSwapChainDesc1*)ppDesc, pRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, DxgiSwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
			{
				fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(*LpVtbl))(ptr, pDevice, hSurface, pDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, DxgiSwapChainDesc1* pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(*LpVtbl))(ptr, (IUnknown*)ppDevice, hSurface, pDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, ref DxgiSwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(*LpVtbl))(ptr, pDevice, hSurface, (DxgiSwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, ref DxgiSwapChainDesc1 pDesc, ref IDXGIOutput pRestrictToOutput, ref IDXGISwapChain1* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiSwapChainDesc1* ppDesc = &pDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						fixed (IDXGISwapChain1** pppSwapChain = &ppSwapChain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiSwapChainDesc1*, IDXGIOutput*, IDXGISwapChain1**, HResult>)(*LpVtbl))(ptr, (IUnknown*)ppDevice, hSurface, (DxgiSwapChainDesc1*)ppDesc, (IDXGIOutput*)ppRestrictToOutput, (IDXGISwapChain1**)pppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, DxgiDecodeSwapChainDesc* pDesc, IDXGIResource* pYuvDecodeBuffers, IDXGIOutput* pRestrictToOutput, IDXGIDecodeSwapChain** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, pDevice, hSurface, pDesc, pYuvDecodeBuffers, pRestrictToOutput, ppSwapChain);
			return ret;
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, DxgiDecodeSwapChainDesc* pDesc, IDXGIResource* pYuvDecodeBuffers, IDXGIOutput* pRestrictToOutput, IDXGIDecodeSwapChain** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppDevice, hSurface, pDesc, pYuvDecodeBuffers, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, ref DxgiDecodeSwapChainDesc pDesc, IDXGIResource* pYuvDecodeBuffers, IDXGIOutput* pRestrictToOutput, IDXGIDecodeSwapChain** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiDecodeSwapChainDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, pDevice, hSurface, (DxgiDecodeSwapChainDesc*)ppDesc, pYuvDecodeBuffers, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, ref DxgiDecodeSwapChainDesc pDesc, IDXGIResource* pYuvDecodeBuffers, IDXGIOutput* pRestrictToOutput, IDXGIDecodeSwapChain** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiDecodeSwapChainDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppDevice, hSurface, (DxgiDecodeSwapChainDesc*)ppDesc, pYuvDecodeBuffers, pRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, DxgiDecodeSwapChainDesc* pDesc, ref IDXGIResource pYuvDecodeBuffers, IDXGIOutput* pRestrictToOutput, IDXGIDecodeSwapChain** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIResource* ppYuvDecodeBuffers = &pYuvDecodeBuffers)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, pDevice, hSurface, pDesc, (IDXGIResource*)ppYuvDecodeBuffers, pRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, DxgiDecodeSwapChainDesc* pDesc, ref IDXGIResource pYuvDecodeBuffers, IDXGIOutput* pRestrictToOutput, IDXGIDecodeSwapChain** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIResource* ppYuvDecodeBuffers = &pYuvDecodeBuffers)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppDevice, hSurface, pDesc, (IDXGIResource*)ppYuvDecodeBuffers, pRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, ref DxgiDecodeSwapChainDesc pDesc, ref IDXGIResource pYuvDecodeBuffers, IDXGIOutput* pRestrictToOutput, IDXGIDecodeSwapChain** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiDecodeSwapChainDesc* ppDesc = &pDesc)
			{
				fixed (IDXGIResource* ppYuvDecodeBuffers = &pYuvDecodeBuffers)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, pDevice, hSurface, (DxgiDecodeSwapChainDesc*)ppDesc, (IDXGIResource*)ppYuvDecodeBuffers, pRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, ref DxgiDecodeSwapChainDesc pDesc, ref IDXGIResource pYuvDecodeBuffers, IDXGIOutput* pRestrictToOutput, IDXGIDecodeSwapChain** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiDecodeSwapChainDesc* ppDesc = &pDesc)
				{
					fixed (IDXGIResource* ppYuvDecodeBuffers = &pYuvDecodeBuffers)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppDevice, hSurface, (DxgiDecodeSwapChainDesc*)ppDesc, (IDXGIResource*)ppYuvDecodeBuffers, pRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, DxgiDecodeSwapChainDesc* pDesc, IDXGIResource* pYuvDecodeBuffers, ref IDXGIOutput pRestrictToOutput, IDXGIDecodeSwapChain** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, pDevice, hSurface, pDesc, pYuvDecodeBuffers, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, DxgiDecodeSwapChainDesc* pDesc, IDXGIResource* pYuvDecodeBuffers, ref IDXGIOutput pRestrictToOutput, IDXGIDecodeSwapChain** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppDevice, hSurface, pDesc, pYuvDecodeBuffers, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, ref DxgiDecodeSwapChainDesc pDesc, IDXGIResource* pYuvDecodeBuffers, ref IDXGIOutput pRestrictToOutput, IDXGIDecodeSwapChain** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiDecodeSwapChainDesc* ppDesc = &pDesc)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, pDevice, hSurface, (DxgiDecodeSwapChainDesc*)ppDesc, pYuvDecodeBuffers, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, ref DxgiDecodeSwapChainDesc pDesc, IDXGIResource* pYuvDecodeBuffers, ref IDXGIOutput pRestrictToOutput, IDXGIDecodeSwapChain** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiDecodeSwapChainDesc* ppDesc = &pDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppDevice, hSurface, (DxgiDecodeSwapChainDesc*)ppDesc, pYuvDecodeBuffers, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, DxgiDecodeSwapChainDesc* pDesc, ref IDXGIResource pYuvDecodeBuffers, ref IDXGIOutput pRestrictToOutput, IDXGIDecodeSwapChain** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIResource* ppYuvDecodeBuffers = &pYuvDecodeBuffers)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, pDevice, hSurface, pDesc, (IDXGIResource*)ppYuvDecodeBuffers, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, DxgiDecodeSwapChainDesc* pDesc, ref IDXGIResource pYuvDecodeBuffers, ref IDXGIOutput pRestrictToOutput, IDXGIDecodeSwapChain** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIResource* ppYuvDecodeBuffers = &pYuvDecodeBuffers)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppDevice, hSurface, pDesc, (IDXGIResource*)ppYuvDecodeBuffers, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, ref DxgiDecodeSwapChainDesc pDesc, ref IDXGIResource pYuvDecodeBuffers, ref IDXGIOutput pRestrictToOutput, IDXGIDecodeSwapChain** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiDecodeSwapChainDesc* ppDesc = &pDesc)
			{
				fixed (IDXGIResource* ppYuvDecodeBuffers = &pYuvDecodeBuffers)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, pDevice, hSurface, (DxgiDecodeSwapChainDesc*)ppDesc, (IDXGIResource*)ppYuvDecodeBuffers, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, ref DxgiDecodeSwapChainDesc pDesc, ref IDXGIResource pYuvDecodeBuffers, ref IDXGIOutput pRestrictToOutput, IDXGIDecodeSwapChain** ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiDecodeSwapChainDesc* ppDesc = &pDesc)
				{
					fixed (IDXGIResource* ppYuvDecodeBuffers = &pYuvDecodeBuffers)
					{
						fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppDevice, hSurface, (DxgiDecodeSwapChainDesc*)ppDesc, (IDXGIResource*)ppYuvDecodeBuffers, (IDXGIOutput*)ppRestrictToOutput, ppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, DxgiDecodeSwapChainDesc* pDesc, IDXGIResource* pYuvDecodeBuffers, IDXGIOutput* pRestrictToOutput, ref IDXGIDecodeSwapChain* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIDecodeSwapChain** pppSwapChain = &ppSwapChain)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, pDevice, hSurface, pDesc, pYuvDecodeBuffers, pRestrictToOutput, (IDXGIDecodeSwapChain**)pppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, DxgiDecodeSwapChainDesc* pDesc, IDXGIResource* pYuvDecodeBuffers, IDXGIOutput* pRestrictToOutput, ref IDXGIDecodeSwapChain* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIDecodeSwapChain** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppDevice, hSurface, pDesc, pYuvDecodeBuffers, pRestrictToOutput, (IDXGIDecodeSwapChain**)pppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, ref DxgiDecodeSwapChainDesc pDesc, IDXGIResource* pYuvDecodeBuffers, IDXGIOutput* pRestrictToOutput, ref IDXGIDecodeSwapChain* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiDecodeSwapChainDesc* ppDesc = &pDesc)
			{
				fixed (IDXGIDecodeSwapChain** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, pDevice, hSurface, (DxgiDecodeSwapChainDesc*)ppDesc, pYuvDecodeBuffers, pRestrictToOutput, (IDXGIDecodeSwapChain**)pppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, ref DxgiDecodeSwapChainDesc pDesc, IDXGIResource* pYuvDecodeBuffers, IDXGIOutput* pRestrictToOutput, ref IDXGIDecodeSwapChain* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiDecodeSwapChainDesc* ppDesc = &pDesc)
				{
					fixed (IDXGIDecodeSwapChain** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppDevice, hSurface, (DxgiDecodeSwapChainDesc*)ppDesc, pYuvDecodeBuffers, pRestrictToOutput, (IDXGIDecodeSwapChain**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, DxgiDecodeSwapChainDesc* pDesc, ref IDXGIResource pYuvDecodeBuffers, IDXGIOutput* pRestrictToOutput, ref IDXGIDecodeSwapChain* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIResource* ppYuvDecodeBuffers = &pYuvDecodeBuffers)
			{
				fixed (IDXGIDecodeSwapChain** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, pDevice, hSurface, pDesc, (IDXGIResource*)ppYuvDecodeBuffers, pRestrictToOutput, (IDXGIDecodeSwapChain**)pppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, DxgiDecodeSwapChainDesc* pDesc, ref IDXGIResource pYuvDecodeBuffers, IDXGIOutput* pRestrictToOutput, ref IDXGIDecodeSwapChain* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIResource* ppYuvDecodeBuffers = &pYuvDecodeBuffers)
				{
					fixed (IDXGIDecodeSwapChain** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppDevice, hSurface, pDesc, (IDXGIResource*)ppYuvDecodeBuffers, pRestrictToOutput, (IDXGIDecodeSwapChain**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, ref DxgiDecodeSwapChainDesc pDesc, ref IDXGIResource pYuvDecodeBuffers, IDXGIOutput* pRestrictToOutput, ref IDXGIDecodeSwapChain* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiDecodeSwapChainDesc* ppDesc = &pDesc)
			{
				fixed (IDXGIResource* ppYuvDecodeBuffers = &pYuvDecodeBuffers)
				{
					fixed (IDXGIDecodeSwapChain** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, pDevice, hSurface, (DxgiDecodeSwapChainDesc*)ppDesc, (IDXGIResource*)ppYuvDecodeBuffers, pRestrictToOutput, (IDXGIDecodeSwapChain**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, ref DxgiDecodeSwapChainDesc pDesc, ref IDXGIResource pYuvDecodeBuffers, IDXGIOutput* pRestrictToOutput, ref IDXGIDecodeSwapChain* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiDecodeSwapChainDesc* ppDesc = &pDesc)
				{
					fixed (IDXGIResource* ppYuvDecodeBuffers = &pYuvDecodeBuffers)
					{
						fixed (IDXGIDecodeSwapChain** pppSwapChain = &ppSwapChain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppDevice, hSurface, (DxgiDecodeSwapChainDesc*)ppDesc, (IDXGIResource*)ppYuvDecodeBuffers, pRestrictToOutput, (IDXGIDecodeSwapChain**)pppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, DxgiDecodeSwapChainDesc* pDesc, IDXGIResource* pYuvDecodeBuffers, ref IDXGIOutput pRestrictToOutput, ref IDXGIDecodeSwapChain* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
			{
				fixed (IDXGIDecodeSwapChain** pppSwapChain = &ppSwapChain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, pDevice, hSurface, pDesc, pYuvDecodeBuffers, (IDXGIOutput*)ppRestrictToOutput, (IDXGIDecodeSwapChain**)pppSwapChain);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, DxgiDecodeSwapChainDesc* pDesc, IDXGIResource* pYuvDecodeBuffers, ref IDXGIOutput pRestrictToOutput, ref IDXGIDecodeSwapChain* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					fixed (IDXGIDecodeSwapChain** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppDevice, hSurface, pDesc, pYuvDecodeBuffers, (IDXGIOutput*)ppRestrictToOutput, (IDXGIDecodeSwapChain**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, ref DxgiDecodeSwapChainDesc pDesc, IDXGIResource* pYuvDecodeBuffers, ref IDXGIOutput pRestrictToOutput, ref IDXGIDecodeSwapChain* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiDecodeSwapChainDesc* ppDesc = &pDesc)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					fixed (IDXGIDecodeSwapChain** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, pDevice, hSurface, (DxgiDecodeSwapChainDesc*)ppDesc, pYuvDecodeBuffers, (IDXGIOutput*)ppRestrictToOutput, (IDXGIDecodeSwapChain**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, ref DxgiDecodeSwapChainDesc pDesc, IDXGIResource* pYuvDecodeBuffers, ref IDXGIOutput pRestrictToOutput, ref IDXGIDecodeSwapChain* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiDecodeSwapChainDesc* ppDesc = &pDesc)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						fixed (IDXGIDecodeSwapChain** pppSwapChain = &ppSwapChain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppDevice, hSurface, (DxgiDecodeSwapChainDesc*)ppDesc, pYuvDecodeBuffers, (IDXGIOutput*)ppRestrictToOutput, (IDXGIDecodeSwapChain**)pppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, DxgiDecodeSwapChainDesc* pDesc, ref IDXGIResource pYuvDecodeBuffers, ref IDXGIOutput pRestrictToOutput, ref IDXGIDecodeSwapChain* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIResource* ppYuvDecodeBuffers = &pYuvDecodeBuffers)
			{
				fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
				{
					fixed (IDXGIDecodeSwapChain** pppSwapChain = &ppSwapChain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, pDevice, hSurface, pDesc, (IDXGIResource*)ppYuvDecodeBuffers, (IDXGIOutput*)ppRestrictToOutput, (IDXGIDecodeSwapChain**)pppSwapChain);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, DxgiDecodeSwapChainDesc* pDesc, ref IDXGIResource pYuvDecodeBuffers, ref IDXGIOutput pRestrictToOutput, ref IDXGIDecodeSwapChain* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIResource* ppYuvDecodeBuffers = &pYuvDecodeBuffers)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						fixed (IDXGIDecodeSwapChain** pppSwapChain = &ppSwapChain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppDevice, hSurface, pDesc, (IDXGIResource*)ppYuvDecodeBuffers, (IDXGIOutput*)ppRestrictToOutput, (IDXGIDecodeSwapChain**)pppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, nint hSurface, ref DxgiDecodeSwapChainDesc pDesc, ref IDXGIResource pYuvDecodeBuffers, ref IDXGIOutput pRestrictToOutput, ref IDXGIDecodeSwapChain* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiDecodeSwapChainDesc* ppDesc = &pDesc)
			{
				fixed (IDXGIResource* ppYuvDecodeBuffers = &pYuvDecodeBuffers)
				{
					fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
					{
						fixed (IDXGIDecodeSwapChain** pppSwapChain = &ppSwapChain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, pDevice, hSurface, (DxgiDecodeSwapChainDesc*)ppDesc, (IDXGIResource*)ppYuvDecodeBuffers, (IDXGIOutput*)ppRestrictToOutput, (IDXGIDecodeSwapChain**)pppSwapChain);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateDecodeSwapChainForCompositionSurfaceHandle(ref IUnknown pDevice, nint hSurface, ref DxgiDecodeSwapChainDesc pDesc, ref IDXGIResource pYuvDecodeBuffers, ref IDXGIOutput pRestrictToOutput, ref IDXGIDecodeSwapChain* ppSwapChain)
		{
			IDXGIFactoryMedia* ptr = (IDXGIFactoryMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiDecodeSwapChainDesc* ppDesc = &pDesc)
				{
					fixed (IDXGIResource* ppYuvDecodeBuffers = &pYuvDecodeBuffers)
					{
						fixed (IDXGIOutput* ppRestrictToOutput = &pRestrictToOutput)
						{
							fixed (IDXGIDecodeSwapChain** pppSwapChain = &ppSwapChain)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactoryMedia*, IUnknown*, nint, DxgiDecodeSwapChainDesc*, IDXGIResource*, IDXGIOutput*, IDXGIDecodeSwapChain**, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppDevice, hSurface, (DxgiDecodeSwapChainDesc*)ppDesc, (IDXGIResource*)ppYuvDecodeBuffers, (IDXGIOutput*)ppRestrictToOutput, (IDXGIDecodeSwapChain**)pppSwapChain);
								return ret;
							}
						}
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDXGIFactoryMedia value)
		{
			return Unsafe.As<IDXGIFactoryMedia, IUnknown>(ref value);
		}

	}

	[NativeName("DXGI_DECODE_SWAP_CHAIN_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiDecodeSwapChainDesc
	{
		[NativeName("Flags")]
		public uint Flags;


	}

	[Guid("dd95b90b-f05f-4f6a-bd65-25bfb264bd84")]
	[NativeName("IDXGISwapChainMedia")]
	public partial struct IDXGISwapChainMedia : IComObject, IComObject<IDXGISwapChainMedia>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("dd95b90b-f05f-4f6a-bd65-25bfb264bd84");

		public unsafe IDXGISwapChainMedia (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetFrameStatisticsMedia(DxgiFrameStatisticsMedia* pStats)
		{
			IDXGISwapChainMedia* ptr = (IDXGISwapChainMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChainMedia*, DxgiFrameStatisticsMedia*, HResult>)(*LpVtbl))(ptr, pStats);
			return ret;
		}

		public readonly unsafe HResult GetFrameStatisticsMedia(ref DxgiFrameStatisticsMedia pStats)
		{
			IDXGISwapChainMedia* ptr = (IDXGISwapChainMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiFrameStatisticsMedia* ppStats = &pStats)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChainMedia*, DxgiFrameStatisticsMedia*, HResult>)(*LpVtbl))(ptr, (DxgiFrameStatisticsMedia*)ppStats);
				return ret;
			}
		}

		public readonly unsafe HResult SetPresentDuration(uint duration)
		{
			IDXGISwapChainMedia* ptr = (IDXGISwapChainMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChainMedia*, uint, HResult>)(LpVtbl[1]))(ptr, duration);
			return ret;
		}

		public readonly unsafe HResult CheckPresentDurationSupport(uint desiredPresentDuration, uint* pClosestSmallerPresentDuration, uint* pClosestLargerPresentDuration)
		{
			IDXGISwapChainMedia* ptr = (IDXGISwapChainMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChainMedia*, uint, uint*, uint*, HResult>)(LpVtbl[2]))(ptr, desiredPresentDuration, pClosestSmallerPresentDuration, pClosestLargerPresentDuration);
			return ret;
		}

		public readonly unsafe HResult CheckPresentDurationSupport(uint desiredPresentDuration, ref uint pClosestSmallerPresentDuration, uint* pClosestLargerPresentDuration)
		{
			IDXGISwapChainMedia* ptr = (IDXGISwapChainMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppClosestSmallerPresentDuration = &pClosestSmallerPresentDuration)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChainMedia*, uint, uint*, uint*, HResult>)(LpVtbl[2]))(ptr, desiredPresentDuration, (uint*)ppClosestSmallerPresentDuration, pClosestLargerPresentDuration);
				return ret;
			}
		}

		public readonly unsafe HResult CheckPresentDurationSupport(uint desiredPresentDuration, uint* pClosestSmallerPresentDuration, ref uint pClosestLargerPresentDuration)
		{
			IDXGISwapChainMedia* ptr = (IDXGISwapChainMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppClosestLargerPresentDuration = &pClosestLargerPresentDuration)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChainMedia*, uint, uint*, uint*, HResult>)(LpVtbl[2]))(ptr, desiredPresentDuration, pClosestSmallerPresentDuration, (uint*)ppClosestLargerPresentDuration);
				return ret;
			}
		}

		public readonly unsafe HResult CheckPresentDurationSupport(uint desiredPresentDuration, ref uint pClosestSmallerPresentDuration, ref uint pClosestLargerPresentDuration)
		{
			IDXGISwapChainMedia* ptr = (IDXGISwapChainMedia*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppClosestSmallerPresentDuration = &pClosestSmallerPresentDuration)
			{
				fixed (uint* ppClosestLargerPresentDuration = &pClosestLargerPresentDuration)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChainMedia*, uint, uint*, uint*, HResult>)(LpVtbl[2]))(ptr, desiredPresentDuration, (uint*)ppClosestSmallerPresentDuration, (uint*)ppClosestLargerPresentDuration);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDXGISwapChainMedia value)
		{
			return Unsafe.As<IDXGISwapChainMedia, IUnknown>(ref value);
		}

	}

	[NativeName("DXGI_FRAME_STATISTICS_MEDIA")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiFrameStatisticsMedia
	{
		[NativeName("PresentCount")]
		public uint PresentCount;
		[NativeName("PresentRefreshCount")]
		public uint PresentRefreshCount;
		[NativeName("SyncRefreshCount")]
		public uint SyncRefreshCount;
		[NativeName("SyncQPCTime")]
		public long SyncQPCTime;
		[NativeName("SyncGPUTime")]
		public long SyncGPUTime;
		[NativeName("CompositionMode")]
		public DxgiFramePresentationMode CompositionMode;
		[NativeName("ApprovedPresentDuration")]
		public uint ApprovedPresentDuration;


	}

	[Guid("8a6bb301-7e7e-41f4-a8e0-5b32f7f99b18")]
	[NativeName("IDXGIOutput3")]
	public partial struct IDXGIOutput3 : IComObject, IComObject<IDXGIOutput3>, IComObject<IDXGIOutput2>, IComObject<IDXGIOutput1>, IComObject<IDXGIOutput>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("8a6bb301-7e7e-41f4-a8e0-5b32f7f99b18");

		public unsafe IDXGIOutput3 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult CheckOverlaySupport(DxgiFormat enumFormat, IUnknown* pConcernedDevice, uint* pFlags)
		{
			IDXGIOutput3* ptr = (IDXGIOutput3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput3*, DxgiFormat, IUnknown*, uint*, HResult>)(LpVtbl[1]))(ptr, enumFormat, pConcernedDevice, pFlags);
			return ret;
		}

		public readonly unsafe HResult CheckOverlaySupport(DxgiFormat enumFormat, ref IUnknown pConcernedDevice, uint* pFlags)
		{
			IDXGIOutput3* ptr = (IDXGIOutput3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput3*, DxgiFormat, IUnknown*, uint*, HResult>)(LpVtbl[1]))(ptr, enumFormat, (IUnknown*)ppConcernedDevice, pFlags);
				return ret;
			}
		}

		public readonly unsafe HResult CheckOverlaySupport(DxgiFormat enumFormat, IUnknown* pConcernedDevice, ref uint pFlags)
		{
			IDXGIOutput3* ptr = (IDXGIOutput3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFlags = &pFlags)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput3*, DxgiFormat, IUnknown*, uint*, HResult>)(LpVtbl[1]))(ptr, enumFormat, pConcernedDevice, (uint*)ppFlags);
				return ret;
			}
		}

		public readonly unsafe HResult CheckOverlaySupport(DxgiFormat enumFormat, ref IUnknown pConcernedDevice, ref uint pFlags)
		{
			IDXGIOutput3* ptr = (IDXGIOutput3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
			{
				fixed (uint* ppFlags = &pFlags)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput3*, DxgiFormat, IUnknown*, uint*, HResult>)(LpVtbl[1]))(ptr, enumFormat, (IUnknown*)ppConcernedDevice, (uint*)ppFlags);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIOutput2 (IDXGIOutput3 value)
		{
			return Unsafe.As<IDXGIOutput3, IDXGIOutput2>(ref value);
		}

		public unsafe static implicit operator IDXGIOutput1 (IDXGIOutput3 value)
		{
			return Unsafe.As<IDXGIOutput3, IDXGIOutput1>(ref value);
		}

		public unsafe static implicit operator IDXGIOutput (IDXGIOutput3 value)
		{
			return Unsafe.As<IDXGIOutput3, IDXGIOutput>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIOutput3 value)
		{
			return Unsafe.As<IDXGIOutput3, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIOutput3 value)
		{
			return Unsafe.As<IDXGIOutput3, IUnknown>(ref value);
		}

	}

	[Guid("94d99bdb-f1f8-4ab0-b236-7da0170edab1")]
	[NativeName("IDXGISwapChain3")]
	public partial struct IDXGISwapChain3 : IComObject, IComObject<IDXGISwapChain3>, IComObject<IDXGISwapChain2>, IComObject<IDXGISwapChain1>, IComObject<IDXGISwapChain>, IComObject<IDXGIDeviceSubObject>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("94d99bdb-f1f8-4ab0-b236-7da0170edab1");

		public unsafe IDXGISwapChain3 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe uint GetCurrentBackBufferIndex()
		{
			IDXGISwapChain3* ptr = (IDXGISwapChain3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain3*, uint>)(LpVtbl[7]))(ptr);
			return ret;
		}

		public readonly unsafe HResult CheckColorSpaceSupport(DxgiColorSpaceType colorSpace, uint* pColorSpaceSupport)
		{
			IDXGISwapChain3* ptr = (IDXGISwapChain3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain3*, DxgiColorSpaceType, uint*, HResult>)(LpVtbl[8]))(ptr, colorSpace, pColorSpaceSupport);
			return ret;
		}

		public readonly unsafe HResult CheckColorSpaceSupport(DxgiColorSpaceType colorSpace, ref uint pColorSpaceSupport)
		{
			IDXGISwapChain3* ptr = (IDXGISwapChain3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppColorSpaceSupport = &pColorSpaceSupport)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain3*, DxgiColorSpaceType, uint*, HResult>)(LpVtbl[8]))(ptr, colorSpace, (uint*)ppColorSpaceSupport);
				return ret;
			}
		}

		public readonly unsafe HResult SetColorSpace1(DxgiColorSpaceType colorSpace)
		{
			IDXGISwapChain3* ptr = (IDXGISwapChain3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain3*, DxgiColorSpaceType, HResult>)(LpVtbl[9]))(ptr, colorSpace);
			return ret;
		}

		public readonly unsafe HResult ResizeBuffers1(uint bufferCount, uint width, uint height, DxgiFormat format, uint swapChainFlags, uint* pCreationNodeMask, IUnknown*** ppPresentQueue)
		{
			IDXGISwapChain3* ptr = (IDXGISwapChain3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain3*, uint, uint, uint, DxgiFormat, uint, uint*, IUnknown***, HResult>)(LpVtbl[10]))(ptr, bufferCount, width, height, format, swapChainFlags, pCreationNodeMask, ppPresentQueue);
			return ret;
		}

		public readonly unsafe HResult ResizeBuffers1(uint bufferCount, uint width, uint height, DxgiFormat format, uint swapChainFlags, ref uint pCreationNodeMask, IUnknown*** ppPresentQueue)
		{
			IDXGISwapChain3* ptr = (IDXGISwapChain3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppCreationNodeMask = &pCreationNodeMask)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain3*, uint, uint, uint, DxgiFormat, uint, uint*, IUnknown***, HResult>)(LpVtbl[10]))(ptr, bufferCount, width, height, format, swapChainFlags, (uint*)ppCreationNodeMask, ppPresentQueue);
				return ret;
			}
		}

		public readonly unsafe HResult ResizeBuffers1(uint bufferCount, uint width, uint height, DxgiFormat format, uint swapChainFlags, uint* pCreationNodeMask, ref IUnknown* ppPresentQueue)
		{
			IDXGISwapChain3* ptr = (IDXGISwapChain3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown** pppPresentQueue = &ppPresentQueue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain3*, uint, uint, uint, DxgiFormat, uint, uint*, IUnknown***, HResult>)(LpVtbl[10]))(ptr, bufferCount, width, height, format, swapChainFlags, pCreationNodeMask, (IUnknown***)pppPresentQueue);
				return ret;
			}
		}

		public readonly unsafe HResult ResizeBuffers1(uint bufferCount, uint width, uint height, DxgiFormat format, uint swapChainFlags, ref uint pCreationNodeMask, ref IUnknown* ppPresentQueue)
		{
			IDXGISwapChain3* ptr = (IDXGISwapChain3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppCreationNodeMask = &pCreationNodeMask)
			{
				fixed (IUnknown** pppPresentQueue = &ppPresentQueue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain3*, uint, uint, uint, DxgiFormat, uint, uint*, IUnknown***, HResult>)(LpVtbl[10]))(ptr, bufferCount, width, height, format, swapChainFlags, (uint*)ppCreationNodeMask, (IUnknown***)pppPresentQueue);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGISwapChain2 (IDXGISwapChain3 value)
		{
			return Unsafe.As<IDXGISwapChain3, IDXGISwapChain2>(ref value);
		}

		public unsafe static implicit operator IDXGISwapChain1 (IDXGISwapChain3 value)
		{
			return Unsafe.As<IDXGISwapChain3, IDXGISwapChain1>(ref value);
		}

		public unsafe static implicit operator IDXGISwapChain (IDXGISwapChain3 value)
		{
			return Unsafe.As<IDXGISwapChain3, IDXGISwapChain>(ref value);
		}

		public unsafe static implicit operator IDXGIDeviceSubObject (IDXGISwapChain3 value)
		{
			return Unsafe.As<IDXGISwapChain3, IDXGIDeviceSubObject>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGISwapChain3 value)
		{
			return Unsafe.As<IDXGISwapChain3, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGISwapChain3 value)
		{
			return Unsafe.As<IDXGISwapChain3, IUnknown>(ref value);
		}

	}

	[Guid("dc7dca35-2196-414d-9f53-617884032a60")]
	[NativeName("IDXGIOutput4")]
	public partial struct IDXGIOutput4 : IComObject, IComObject<IDXGIOutput4>, IComObject<IDXGIOutput3>, IComObject<IDXGIOutput2>, IComObject<IDXGIOutput1>, IComObject<IDXGIOutput>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("dc7dca35-2196-414d-9f53-617884032a60");

		public unsafe IDXGIOutput4 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult CheckOverlayColorSpaceSupport(DxgiFormat format, DxgiColorSpaceType colorSpace, IUnknown* pConcernedDevice, uint* pFlags)
		{
			IDXGIOutput4* ptr = (IDXGIOutput4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput4*, DxgiFormat, DxgiColorSpaceType, IUnknown*, uint*, HResult>)(LpVtbl[1]))(ptr, format, colorSpace, pConcernedDevice, pFlags);
			return ret;
		}

		public readonly unsafe HResult CheckOverlayColorSpaceSupport(DxgiFormat format, DxgiColorSpaceType colorSpace, ref IUnknown pConcernedDevice, uint* pFlags)
		{
			IDXGIOutput4* ptr = (IDXGIOutput4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput4*, DxgiFormat, DxgiColorSpaceType, IUnknown*, uint*, HResult>)(LpVtbl[1]))(ptr, format, colorSpace, (IUnknown*)ppConcernedDevice, pFlags);
				return ret;
			}
		}

		public readonly unsafe HResult CheckOverlayColorSpaceSupport(DxgiFormat format, DxgiColorSpaceType colorSpace, IUnknown* pConcernedDevice, ref uint pFlags)
		{
			IDXGIOutput4* ptr = (IDXGIOutput4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFlags = &pFlags)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput4*, DxgiFormat, DxgiColorSpaceType, IUnknown*, uint*, HResult>)(LpVtbl[1]))(ptr, format, colorSpace, pConcernedDevice, (uint*)ppFlags);
				return ret;
			}
		}

		public readonly unsafe HResult CheckOverlayColorSpaceSupport(DxgiFormat format, DxgiColorSpaceType colorSpace, ref IUnknown pConcernedDevice, ref uint pFlags)
		{
			IDXGIOutput4* ptr = (IDXGIOutput4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppConcernedDevice = &pConcernedDevice)
			{
				fixed (uint* ppFlags = &pFlags)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput4*, DxgiFormat, DxgiColorSpaceType, IUnknown*, uint*, HResult>)(LpVtbl[1]))(ptr, format, colorSpace, (IUnknown*)ppConcernedDevice, (uint*)ppFlags);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIOutput3 (IDXGIOutput4 value)
		{
			return Unsafe.As<IDXGIOutput4, IDXGIOutput3>(ref value);
		}

		public unsafe static implicit operator IDXGIOutput2 (IDXGIOutput4 value)
		{
			return Unsafe.As<IDXGIOutput4, IDXGIOutput2>(ref value);
		}

		public unsafe static implicit operator IDXGIOutput1 (IDXGIOutput4 value)
		{
			return Unsafe.As<IDXGIOutput4, IDXGIOutput1>(ref value);
		}

		public unsafe static implicit operator IDXGIOutput (IDXGIOutput4 value)
		{
			return Unsafe.As<IDXGIOutput4, IDXGIOutput>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIOutput4 value)
		{
			return Unsafe.As<IDXGIOutput4, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIOutput4 value)
		{
			return Unsafe.As<IDXGIOutput4, IUnknown>(ref value);
		}

	}

	[Guid("1bc6ea02-ef36-464f-bf0c-21ca39e5168a")]
	[NativeName("IDXGIFactory4")]
	public partial struct IDXGIFactory4 : IComObject, IComObject<IDXGIFactory4>, IComObject<IDXGIFactory3>, IComObject<IDXGIFactory2>, IComObject<IDXGIFactory1>, IComObject<IDXGIFactory>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("1bc6ea02-ef36-464f-bf0c-21ca39e5168a");

		public unsafe IDXGIFactory4 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult EnumAdapterByLuid(Luid adapterLuid, Guid* riid, void** ppvAdapter)
		{
			IDXGIFactory4* ptr = (IDXGIFactory4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory4*, Luid, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, adapterLuid, riid, ppvAdapter);
			return ret;
		}

		public readonly unsafe HResult EnumAdapterByLuid(Luid adapterLuid, ref Guid riid, void** ppvAdapter)
		{
			IDXGIFactory4* ptr = (IDXGIFactory4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory4*, Luid, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, adapterLuid, (Guid*)priid, ppvAdapter);
				return ret;
			}
		}

		public readonly unsafe HResult EnumWarpAdapter(Guid* riid, void** ppvAdapter)
		{
			IDXGIFactory4* ptr = (IDXGIFactory4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory4*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, riid, ppvAdapter);
			return ret;
		}

		public readonly unsafe HResult EnumWarpAdapter(ref Guid riid, void** ppvAdapter)
		{
			IDXGIFactory4* ptr = (IDXGIFactory4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory4*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, (Guid*)priid, ppvAdapter);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIFactory3 (IDXGIFactory4 value)
		{
			return Unsafe.As<IDXGIFactory4, IDXGIFactory3>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory2 (IDXGIFactory4 value)
		{
			return Unsafe.As<IDXGIFactory4, IDXGIFactory2>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory1 (IDXGIFactory4 value)
		{
			return Unsafe.As<IDXGIFactory4, IDXGIFactory1>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory (IDXGIFactory4 value)
		{
			return Unsafe.As<IDXGIFactory4, IDXGIFactory>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIFactory4 value)
		{
			return Unsafe.As<IDXGIFactory4, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIFactory4 value)
		{
			return Unsafe.As<IDXGIFactory4, IUnknown>(ref value);
		}

	}

	[Guid("645967a4-1392-4310-a798-8053ce3e93fd")]
	[NativeName("IDXGIAdapter3")]
	public partial struct IDXGIAdapter3 : IComObject, IComObject<IDXGIAdapter3>, IComObject<IDXGIAdapter2>, IComObject<IDXGIAdapter1>, IComObject<IDXGIAdapter>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("645967a4-1392-4310-a798-8053ce3e93fd");

		public unsafe IDXGIAdapter3 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult RegisterHardwareContentProtectionTeardownStatusEvent(nint hEvent, uint* pdwCookie)
		{
			IDXGIAdapter3* ptr = (IDXGIAdapter3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter3*, nint, uint*, HResult>)(LpVtbl[1]))(ptr, hEvent, pdwCookie);
			return ret;
		}

		public readonly unsafe HResult RegisterHardwareContentProtectionTeardownStatusEvent(nint hEvent, ref uint pdwCookie)
		{
			IDXGIAdapter3* ptr = (IDXGIAdapter3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppdwCookie = &pdwCookie)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter3*, nint, uint*, HResult>)(LpVtbl[1]))(ptr, hEvent, (uint*)ppdwCookie);
				return ret;
			}
		}

		public readonly unsafe void UnregisterHardwareContentProtectionTeardownStatus(uint dwCookie)
		{
			IDXGIAdapter3* ptr = (IDXGIAdapter3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<IDXGIAdapter3*, uint, void>)(LpVtbl[2]))(ptr, dwCookie);
		}

		public readonly unsafe HResult QueryVideoMemoryInfo(uint nodeIndex, DxgiMemorySegmentGroup memorySegmentGroup, DxgiQueryVideoMemoryInfo* pVideoMemoryInfo)
		{
			IDXGIAdapter3* ptr = (IDXGIAdapter3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter3*, uint, DxgiMemorySegmentGroup, DxgiQueryVideoMemoryInfo*, HResult>)(LpVtbl[3]))(ptr, nodeIndex, memorySegmentGroup, pVideoMemoryInfo);
			return ret;
		}

		public readonly unsafe HResult QueryVideoMemoryInfo(uint nodeIndex, DxgiMemorySegmentGroup memorySegmentGroup, ref DxgiQueryVideoMemoryInfo pVideoMemoryInfo)
		{
			IDXGIAdapter3* ptr = (IDXGIAdapter3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiQueryVideoMemoryInfo* ppVideoMemoryInfo = &pVideoMemoryInfo)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter3*, uint, DxgiMemorySegmentGroup, DxgiQueryVideoMemoryInfo*, HResult>)(LpVtbl[3]))(ptr, nodeIndex, memorySegmentGroup, (DxgiQueryVideoMemoryInfo*)ppVideoMemoryInfo);
				return ret;
			}
		}

		public readonly unsafe HResult SetVideoMemoryReservation(uint nodeIndex, DxgiMemorySegmentGroup memorySegmentGroup, ulong reservation)
		{
			IDXGIAdapter3* ptr = (IDXGIAdapter3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter3*, uint, DxgiMemorySegmentGroup, ulong, HResult>)(LpVtbl[4]))(ptr, nodeIndex, memorySegmentGroup, reservation);
			return ret;
		}

		public readonly unsafe HResult RegisterVideoMemoryBudgetChangeNotificationEvent(nint hEvent, uint* pdwCookie)
		{
			IDXGIAdapter3* ptr = (IDXGIAdapter3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter3*, nint, uint*, HResult>)(LpVtbl[5]))(ptr, hEvent, pdwCookie);
			return ret;
		}

		public readonly unsafe HResult RegisterVideoMemoryBudgetChangeNotificationEvent(nint hEvent, ref uint pdwCookie)
		{
			IDXGIAdapter3* ptr = (IDXGIAdapter3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppdwCookie = &pdwCookie)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter3*, nint, uint*, HResult>)(LpVtbl[5]))(ptr, hEvent, (uint*)ppdwCookie);
				return ret;
			}
		}

		public readonly unsafe void UnregisterVideoMemoryBudgetChangeNotification(uint dwCookie)
		{
			IDXGIAdapter3* ptr = (IDXGIAdapter3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<IDXGIAdapter3*, uint, void>)(LpVtbl[6]))(ptr, dwCookie);
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIAdapter2 (IDXGIAdapter3 value)
		{
			return Unsafe.As<IDXGIAdapter3, IDXGIAdapter2>(ref value);
		}

		public unsafe static implicit operator IDXGIAdapter1 (IDXGIAdapter3 value)
		{
			return Unsafe.As<IDXGIAdapter3, IDXGIAdapter1>(ref value);
		}

		public unsafe static implicit operator IDXGIAdapter (IDXGIAdapter3 value)
		{
			return Unsafe.As<IDXGIAdapter3, IDXGIAdapter>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIAdapter3 value)
		{
			return Unsafe.As<IDXGIAdapter3, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIAdapter3 value)
		{
			return Unsafe.As<IDXGIAdapter3, IUnknown>(ref value);
		}

	}

	[NativeName("DXGI_QUERY_VIDEO_MEMORY_INFO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiQueryVideoMemoryInfo
	{
		[NativeName("Budget")]
		public ulong Budget;
		[NativeName("CurrentUsage")]
		public ulong CurrentUsage;
		[NativeName("AvailableForReservation")]
		public ulong AvailableForReservation;
		[NativeName("CurrentReservation")]
		public ulong CurrentReservation;


	}

	[Guid("80a07424-ab52-42eb-833c-0c42fd282d98")]
	[NativeName("IDXGIOutput5")]
	public partial struct IDXGIOutput5 : IComObject, IComObject<IDXGIOutput5>, IComObject<IDXGIOutput4>, IComObject<IDXGIOutput3>, IComObject<IDXGIOutput2>, IComObject<IDXGIOutput1>, IComObject<IDXGIOutput>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("80a07424-ab52-42eb-833c-0c42fd282d98");

		public unsafe IDXGIOutput5 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult DuplicateOutput1(IUnknown* pDevice, uint flags, uint supportedFormatsCount, DxgiFormat* pSupportedFormats, IDXGIOutputDuplication** ppOutputDuplication)
		{
			IDXGIOutput5* ptr = (IDXGIOutput5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput5*, IUnknown*, uint, uint, DxgiFormat*, IDXGIOutputDuplication**, HResult>)(LpVtbl[1]))(ptr, pDevice, flags, supportedFormatsCount, pSupportedFormats, ppOutputDuplication);
			return ret;
		}

		public readonly unsafe HResult DuplicateOutput1(ref IUnknown pDevice, uint flags, uint supportedFormatsCount, DxgiFormat* pSupportedFormats, IDXGIOutputDuplication** ppOutputDuplication)
		{
			IDXGIOutput5* ptr = (IDXGIOutput5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput5*, IUnknown*, uint, uint, DxgiFormat*, IDXGIOutputDuplication**, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppDevice, flags, supportedFormatsCount, pSupportedFormats, ppOutputDuplication);
				return ret;
			}
		}

		public readonly unsafe HResult DuplicateOutput1(IUnknown* pDevice, uint flags, uint supportedFormatsCount, ref DxgiFormat pSupportedFormats, IDXGIOutputDuplication** ppOutputDuplication)
		{
			IDXGIOutput5* ptr = (IDXGIOutput5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiFormat* ppSupportedFormats = &pSupportedFormats)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput5*, IUnknown*, uint, uint, DxgiFormat*, IDXGIOutputDuplication**, HResult>)(LpVtbl[1]))(ptr, pDevice, flags, supportedFormatsCount, (DxgiFormat*)ppSupportedFormats, ppOutputDuplication);
				return ret;
			}
		}

		public readonly unsafe HResult DuplicateOutput1(ref IUnknown pDevice, uint flags, uint supportedFormatsCount, ref DxgiFormat pSupportedFormats, IDXGIOutputDuplication** ppOutputDuplication)
		{
			IDXGIOutput5* ptr = (IDXGIOutput5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiFormat* ppSupportedFormats = &pSupportedFormats)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput5*, IUnknown*, uint, uint, DxgiFormat*, IDXGIOutputDuplication**, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppDevice, flags, supportedFormatsCount, (DxgiFormat*)ppSupportedFormats, ppOutputDuplication);
					return ret;
				}
			}
		}

		public readonly unsafe HResult DuplicateOutput1(IUnknown* pDevice, uint flags, uint supportedFormatsCount, DxgiFormat* pSupportedFormats, ref IDXGIOutputDuplication* ppOutputDuplication)
		{
			IDXGIOutput5* ptr = (IDXGIOutput5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIOutputDuplication** pppOutputDuplication = &ppOutputDuplication)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput5*, IUnknown*, uint, uint, DxgiFormat*, IDXGIOutputDuplication**, HResult>)(LpVtbl[1]))(ptr, pDevice, flags, supportedFormatsCount, pSupportedFormats, (IDXGIOutputDuplication**)pppOutputDuplication);
				return ret;
			}
		}

		public readonly unsafe HResult DuplicateOutput1(ref IUnknown pDevice, uint flags, uint supportedFormatsCount, DxgiFormat* pSupportedFormats, ref IDXGIOutputDuplication* ppOutputDuplication)
		{
			IDXGIOutput5* ptr = (IDXGIOutput5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (IDXGIOutputDuplication** pppOutputDuplication = &ppOutputDuplication)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput5*, IUnknown*, uint, uint, DxgiFormat*, IDXGIOutputDuplication**, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppDevice, flags, supportedFormatsCount, pSupportedFormats, (IDXGIOutputDuplication**)pppOutputDuplication);
					return ret;
				}
			}
		}

		public readonly unsafe HResult DuplicateOutput1(IUnknown* pDevice, uint flags, uint supportedFormatsCount, ref DxgiFormat pSupportedFormats, ref IDXGIOutputDuplication* ppOutputDuplication)
		{
			IDXGIOutput5* ptr = (IDXGIOutput5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiFormat* ppSupportedFormats = &pSupportedFormats)
			{
				fixed (IDXGIOutputDuplication** pppOutputDuplication = &ppOutputDuplication)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput5*, IUnknown*, uint, uint, DxgiFormat*, IDXGIOutputDuplication**, HResult>)(LpVtbl[1]))(ptr, pDevice, flags, supportedFormatsCount, (DxgiFormat*)ppSupportedFormats, (IDXGIOutputDuplication**)pppOutputDuplication);
					return ret;
				}
			}
		}

		public readonly unsafe HResult DuplicateOutput1(ref IUnknown pDevice, uint flags, uint supportedFormatsCount, ref DxgiFormat pSupportedFormats, ref IDXGIOutputDuplication* ppOutputDuplication)
		{
			IDXGIOutput5* ptr = (IDXGIOutput5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppDevice = &pDevice)
			{
				fixed (DxgiFormat* ppSupportedFormats = &pSupportedFormats)
				{
					fixed (IDXGIOutputDuplication** pppOutputDuplication = &ppOutputDuplication)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput5*, IUnknown*, uint, uint, DxgiFormat*, IDXGIOutputDuplication**, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppDevice, flags, supportedFormatsCount, (DxgiFormat*)ppSupportedFormats, (IDXGIOutputDuplication**)pppOutputDuplication);
						return ret;
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIOutput4 (IDXGIOutput5 value)
		{
			return Unsafe.As<IDXGIOutput5, IDXGIOutput4>(ref value);
		}

		public unsafe static implicit operator IDXGIOutput3 (IDXGIOutput5 value)
		{
			return Unsafe.As<IDXGIOutput5, IDXGIOutput3>(ref value);
		}

		public unsafe static implicit operator IDXGIOutput2 (IDXGIOutput5 value)
		{
			return Unsafe.As<IDXGIOutput5, IDXGIOutput2>(ref value);
		}

		public unsafe static implicit operator IDXGIOutput1 (IDXGIOutput5 value)
		{
			return Unsafe.As<IDXGIOutput5, IDXGIOutput1>(ref value);
		}

		public unsafe static implicit operator IDXGIOutput (IDXGIOutput5 value)
		{
			return Unsafe.As<IDXGIOutput5, IDXGIOutput>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIOutput5 value)
		{
			return Unsafe.As<IDXGIOutput5, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIOutput5 value)
		{
			return Unsafe.As<IDXGIOutput5, IUnknown>(ref value);
		}

	}

	[Guid("3d585d5a-bd4a-489e-b1f4-3dbcb6452ffb")]
	[NativeName("IDXGISwapChain4")]
	public partial struct IDXGISwapChain4 : IComObject, IComObject<IDXGISwapChain4>, IComObject<IDXGISwapChain3>, IComObject<IDXGISwapChain2>, IComObject<IDXGISwapChain1>, IComObject<IDXGISwapChain>, IComObject<IDXGIDeviceSubObject>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("3d585d5a-bd4a-489e-b1f4-3dbcb6452ffb");

		public unsafe IDXGISwapChain4 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult SetHDRMetaData(DxgiHdrMetadataType type, uint size, void* pMetaData)
		{
			IDXGISwapChain4* ptr = (IDXGISwapChain4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGISwapChain4*, DxgiHdrMetadataType, uint, void*, HResult>)(LpVtbl[4]))(ptr, type, size, pMetaData);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGISwapChain3 (IDXGISwapChain4 value)
		{
			return Unsafe.As<IDXGISwapChain4, IDXGISwapChain3>(ref value);
		}

		public unsafe static implicit operator IDXGISwapChain2 (IDXGISwapChain4 value)
		{
			return Unsafe.As<IDXGISwapChain4, IDXGISwapChain2>(ref value);
		}

		public unsafe static implicit operator IDXGISwapChain1 (IDXGISwapChain4 value)
		{
			return Unsafe.As<IDXGISwapChain4, IDXGISwapChain1>(ref value);
		}

		public unsafe static implicit operator IDXGISwapChain (IDXGISwapChain4 value)
		{
			return Unsafe.As<IDXGISwapChain4, IDXGISwapChain>(ref value);
		}

		public unsafe static implicit operator IDXGIDeviceSubObject (IDXGISwapChain4 value)
		{
			return Unsafe.As<IDXGISwapChain4, IDXGIDeviceSubObject>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGISwapChain4 value)
		{
			return Unsafe.As<IDXGISwapChain4, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGISwapChain4 value)
		{
			return Unsafe.As<IDXGISwapChain4, IUnknown>(ref value);
		}

	}

	[Guid("95b4f95f-d8da-4ca4-9ee6-3b76d5968a10")]
	[NativeName("IDXGIDevice4")]
	public partial struct IDXGIDevice4 : IComObject, IComObject<IDXGIDevice4>, IComObject<IDXGIDevice3>, IComObject<IDXGIDevice2>, IComObject<IDXGIDevice1>, IComObject<IDXGIDevice>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("95b4f95f-d8da-4ca4-9ee6-3b76d5968a10");

		public unsafe IDXGIDevice4 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult OfferResources1(uint numResources, IDXGIResource*** ppResources, DxgiOfferResourcePriority priority, uint flags)
		{
			IDXGIDevice4* ptr = (IDXGIDevice4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice4*, uint, IDXGIResource***, DxgiOfferResourcePriority, uint, HResult>)(LpVtbl[1]))(ptr, numResources, ppResources, priority, flags);
			return ret;
		}

		public readonly unsafe HResult OfferResources1(uint numResources, ref IDXGIResource* ppResources, DxgiOfferResourcePriority priority, uint flags)
		{
			IDXGIDevice4* ptr = (IDXGIDevice4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIResource** pppResources = &ppResources)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice4*, uint, IDXGIResource***, DxgiOfferResourcePriority, uint, HResult>)(LpVtbl[1]))(ptr, numResources, (IDXGIResource***)pppResources, priority, flags);
				return ret;
			}
		}

		public readonly unsafe HResult ReclaimResources1(uint numResources, IDXGIResource*** ppResources, DxgiReclaimResourceResults* pResults)
		{
			IDXGIDevice4* ptr = (IDXGIDevice4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice4*, uint, IDXGIResource***, DxgiReclaimResourceResults*, HResult>)(LpVtbl[2]))(ptr, numResources, ppResources, pResults);
			return ret;
		}

		public readonly unsafe HResult ReclaimResources1(uint numResources, ref IDXGIResource* ppResources, DxgiReclaimResourceResults* pResults)
		{
			IDXGIDevice4* ptr = (IDXGIDevice4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIResource** pppResources = &ppResources)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice4*, uint, IDXGIResource***, DxgiReclaimResourceResults*, HResult>)(LpVtbl[2]))(ptr, numResources, (IDXGIResource***)pppResources, pResults);
				return ret;
			}
		}

		public readonly unsafe HResult ReclaimResources1(uint numResources, IDXGIResource*** ppResources, ref DxgiReclaimResourceResults pResults)
		{
			IDXGIDevice4* ptr = (IDXGIDevice4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiReclaimResourceResults* ppResults = &pResults)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice4*, uint, IDXGIResource***, DxgiReclaimResourceResults*, HResult>)(LpVtbl[2]))(ptr, numResources, ppResources, (DxgiReclaimResourceResults*)ppResults);
				return ret;
			}
		}

		public readonly unsafe HResult ReclaimResources1(uint numResources, ref IDXGIResource* ppResources, ref DxgiReclaimResourceResults pResults)
		{
			IDXGIDevice4* ptr = (IDXGIDevice4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGIResource** pppResources = &ppResources)
			{
				fixed (DxgiReclaimResourceResults* ppResults = &pResults)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIDevice4*, uint, IDXGIResource***, DxgiReclaimResourceResults*, HResult>)(LpVtbl[2]))(ptr, numResources, (IDXGIResource***)pppResources, (DxgiReclaimResourceResults*)ppResults);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIDevice3 (IDXGIDevice4 value)
		{
			return Unsafe.As<IDXGIDevice4, IDXGIDevice3>(ref value);
		}

		public unsafe static implicit operator IDXGIDevice2 (IDXGIDevice4 value)
		{
			return Unsafe.As<IDXGIDevice4, IDXGIDevice2>(ref value);
		}

		public unsafe static implicit operator IDXGIDevice1 (IDXGIDevice4 value)
		{
			return Unsafe.As<IDXGIDevice4, IDXGIDevice1>(ref value);
		}

		public unsafe static implicit operator IDXGIDevice (IDXGIDevice4 value)
		{
			return Unsafe.As<IDXGIDevice4, IDXGIDevice>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIDevice4 value)
		{
			return Unsafe.As<IDXGIDevice4, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIDevice4 value)
		{
			return Unsafe.As<IDXGIDevice4, IUnknown>(ref value);
		}

	}

	[Guid("7632e1f5-ee65-4dca-87fd-84cd75f8838d")]
	[NativeName("IDXGIFactory5")]
	public partial struct IDXGIFactory5 : IComObject, IComObject<IDXGIFactory5>, IComObject<IDXGIFactory4>, IComObject<IDXGIFactory3>, IComObject<IDXGIFactory2>, IComObject<IDXGIFactory1>, IComObject<IDXGIFactory>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("7632e1f5-ee65-4dca-87fd-84cd75f8838d");

		public unsafe IDXGIFactory5 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult CheckFeatureSupport(DxgiFeature feature, void* pFeatureSupportData, uint featureSupportDataSize)
		{
			IDXGIFactory5* ptr = (IDXGIFactory5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory5*, DxgiFeature, void*, uint, HResult>)(LpVtbl[2]))(ptr, feature, pFeatureSupportData, featureSupportDataSize);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIFactory4 (IDXGIFactory5 value)
		{
			return Unsafe.As<IDXGIFactory5, IDXGIFactory4>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory3 (IDXGIFactory5 value)
		{
			return Unsafe.As<IDXGIFactory5, IDXGIFactory3>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory2 (IDXGIFactory5 value)
		{
			return Unsafe.As<IDXGIFactory5, IDXGIFactory2>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory1 (IDXGIFactory5 value)
		{
			return Unsafe.As<IDXGIFactory5, IDXGIFactory1>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory (IDXGIFactory5 value)
		{
			return Unsafe.As<IDXGIFactory5, IDXGIFactory>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIFactory5 value)
		{
			return Unsafe.As<IDXGIFactory5, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIFactory5 value)
		{
			return Unsafe.As<IDXGIFactory5, IUnknown>(ref value);
		}

	}

	[NativeName("DXGI_HDR_METADATA_HDR10")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiHdrMetadataHdr10
	{
		[NativeName("RedPrimary")]
		public ushort RedPrimary_0;
		public ushort RedPrimary_1;
		[NativeName("GreenPrimary")]
		public ushort GreenPrimary_0;
		public ushort GreenPrimary_1;
		[NativeName("BluePrimary")]
		public ushort BluePrimary_0;
		public ushort BluePrimary_1;
		[NativeName("WhitePoint")]
		public ushort WhitePoint_0;
		public ushort WhitePoint_1;
		[NativeName("MaxMasteringLuminance")]
		public uint MaxMasteringLuminance;
		[NativeName("MinMasteringLuminance")]
		public uint MinMasteringLuminance;
		[NativeName("MaxContentLightLevel")]
		public ushort MaxContentLightLevel;
		[NativeName("MaxFrameAverageLightLevel")]
		public ushort MaxFrameAverageLightLevel;


	}

	[NativeName("DXGI_HDR_METADATA_HDR10PLUS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiHdrMetadataHdr10Plus
	{
		[NativeName("Data")]
		public byte Data_0;
		public byte Data_1;
		public byte Data_2;
		public byte Data_3;
		public byte Data_4;
		public byte Data_5;
		public byte Data_6;
		public byte Data_7;
		public byte Data_8;
		public byte Data_9;
		public byte Data_10;
		public byte Data_11;
		public byte Data_12;
		public byte Data_13;
		public byte Data_14;
		public byte Data_15;
		public byte Data_16;
		public byte Data_17;
		public byte Data_18;
		public byte Data_19;
		public byte Data_20;
		public byte Data_21;
		public byte Data_22;
		public byte Data_23;
		public byte Data_24;
		public byte Data_25;
		public byte Data_26;
		public byte Data_27;
		public byte Data_28;
		public byte Data_29;
		public byte Data_30;
		public byte Data_31;
		public byte Data_32;
		public byte Data_33;
		public byte Data_34;
		public byte Data_35;
		public byte Data_36;
		public byte Data_37;
		public byte Data_38;
		public byte Data_39;
		public byte Data_40;
		public byte Data_41;
		public byte Data_42;
		public byte Data_43;
		public byte Data_44;
		public byte Data_45;
		public byte Data_46;
		public byte Data_47;
		public byte Data_48;
		public byte Data_49;
		public byte Data_50;
		public byte Data_51;
		public byte Data_52;
		public byte Data_53;
		public byte Data_54;
		public byte Data_55;
		public byte Data_56;
		public byte Data_57;
		public byte Data_58;
		public byte Data_59;
		public byte Data_60;
		public byte Data_61;
		public byte Data_62;
		public byte Data_63;
		public byte Data_64;
		public byte Data_65;
		public byte Data_66;
		public byte Data_67;
		public byte Data_68;
		public byte Data_69;
		public byte Data_70;
		public byte Data_71;


	}

	[Guid("3c8d99d1-4fbf-4181-a82c-af66bf7bd24e")]
	[NativeName("IDXGIAdapter4")]
	public partial struct IDXGIAdapter4 : IComObject, IComObject<IDXGIAdapter4>, IComObject<IDXGIAdapter3>, IComObject<IDXGIAdapter2>, IComObject<IDXGIAdapter1>, IComObject<IDXGIAdapter>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("3c8d99d1-4fbf-4181-a82c-af66bf7bd24e");

		public unsafe IDXGIAdapter4 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetDesc3(DxgiAdapterDesc3* pDesc)
		{
			IDXGIAdapter4* ptr = (IDXGIAdapter4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter4*, DxgiAdapterDesc3*, HResult>)(LpVtbl[6]))(ptr, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetDesc3(ref DxgiAdapterDesc3 pDesc)
		{
			IDXGIAdapter4* ptr = (IDXGIAdapter4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiAdapterDesc3* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIAdapter4*, DxgiAdapterDesc3*, HResult>)(LpVtbl[6]))(ptr, (DxgiAdapterDesc3*)ppDesc);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIAdapter3 (IDXGIAdapter4 value)
		{
			return Unsafe.As<IDXGIAdapter4, IDXGIAdapter3>(ref value);
		}

		public unsafe static implicit operator IDXGIAdapter2 (IDXGIAdapter4 value)
		{
			return Unsafe.As<IDXGIAdapter4, IDXGIAdapter2>(ref value);
		}

		public unsafe static implicit operator IDXGIAdapter1 (IDXGIAdapter4 value)
		{
			return Unsafe.As<IDXGIAdapter4, IDXGIAdapter1>(ref value);
		}

		public unsafe static implicit operator IDXGIAdapter (IDXGIAdapter4 value)
		{
			return Unsafe.As<IDXGIAdapter4, IDXGIAdapter>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIAdapter4 value)
		{
			return Unsafe.As<IDXGIAdapter4, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIAdapter4 value)
		{
			return Unsafe.As<IDXGIAdapter4, IUnknown>(ref value);
		}

	}

	[NativeName("DXGI_ADAPTER_DESC3")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiAdapterDesc3
	{
		[NativeName("Description")]
		public char Description_0;
		public char Description_1;
		public char Description_2;
		public char Description_3;
		public char Description_4;
		public char Description_5;
		public char Description_6;
		public char Description_7;
		public char Description_8;
		public char Description_9;
		public char Description_10;
		public char Description_11;
		public char Description_12;
		public char Description_13;
		public char Description_14;
		public char Description_15;
		public char Description_16;
		public char Description_17;
		public char Description_18;
		public char Description_19;
		public char Description_20;
		public char Description_21;
		public char Description_22;
		public char Description_23;
		public char Description_24;
		public char Description_25;
		public char Description_26;
		public char Description_27;
		public char Description_28;
		public char Description_29;
		public char Description_30;
		public char Description_31;
		public char Description_32;
		public char Description_33;
		public char Description_34;
		public char Description_35;
		public char Description_36;
		public char Description_37;
		public char Description_38;
		public char Description_39;
		public char Description_40;
		public char Description_41;
		public char Description_42;
		public char Description_43;
		public char Description_44;
		public char Description_45;
		public char Description_46;
		public char Description_47;
		public char Description_48;
		public char Description_49;
		public char Description_50;
		public char Description_51;
		public char Description_52;
		public char Description_53;
		public char Description_54;
		public char Description_55;
		public char Description_56;
		public char Description_57;
		public char Description_58;
		public char Description_59;
		public char Description_60;
		public char Description_61;
		public char Description_62;
		public char Description_63;
		public char Description_64;
		public char Description_65;
		public char Description_66;
		public char Description_67;
		public char Description_68;
		public char Description_69;
		public char Description_70;
		public char Description_71;
		public char Description_72;
		public char Description_73;
		public char Description_74;
		public char Description_75;
		public char Description_76;
		public char Description_77;
		public char Description_78;
		public char Description_79;
		public char Description_80;
		public char Description_81;
		public char Description_82;
		public char Description_83;
		public char Description_84;
		public char Description_85;
		public char Description_86;
		public char Description_87;
		public char Description_88;
		public char Description_89;
		public char Description_90;
		public char Description_91;
		public char Description_92;
		public char Description_93;
		public char Description_94;
		public char Description_95;
		public char Description_96;
		public char Description_97;
		public char Description_98;
		public char Description_99;
		public char Description_100;
		public char Description_101;
		public char Description_102;
		public char Description_103;
		public char Description_104;
		public char Description_105;
		public char Description_106;
		public char Description_107;
		public char Description_108;
		public char Description_109;
		public char Description_110;
		public char Description_111;
		public char Description_112;
		public char Description_113;
		public char Description_114;
		public char Description_115;
		public char Description_116;
		public char Description_117;
		public char Description_118;
		public char Description_119;
		public char Description_120;
		public char Description_121;
		public char Description_122;
		public char Description_123;
		public char Description_124;
		public char Description_125;
		public char Description_126;
		public char Description_127;
		[NativeName("VendorId")]
		public uint VendorId;
		[NativeName("DeviceId")]
		public uint DeviceId;
		[NativeName("SubSysId")]
		public uint SubSysId;
		[NativeName("Revision")]
		public uint Revision;
		[NativeName("DedicatedVideoMemory")]
		public nuint DedicatedVideoMemory;
		[NativeName("DedicatedSystemMemory")]
		public nuint DedicatedSystemMemory;
		[NativeName("SharedSystemMemory")]
		public nuint SharedSystemMemory;
		[NativeName("AdapterLuid")]
		public Luid AdapterLuid;
		[NativeName("Flags")]
		public DxgiAdapterFlag3 Flags;
		[NativeName("GraphicsPreemptionGranularity")]
		public DxgiGraphicsPreemptionGranularity GraphicsPreemptionGranularity;
		[NativeName("ComputePreemptionGranularity")]
		public DxgiComputePreemptionGranularity ComputePreemptionGranularity;


	}

	[Guid("068346e8-aaec-4b84-add7-137f513f77a1")]
	[NativeName("IDXGIOutput6")]
	public partial struct IDXGIOutput6 : IComObject, IComObject<IDXGIOutput6>, IComObject<IDXGIOutput5>, IComObject<IDXGIOutput4>, IComObject<IDXGIOutput3>, IComObject<IDXGIOutput2>, IComObject<IDXGIOutput1>, IComObject<IDXGIOutput>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("068346e8-aaec-4b84-add7-137f513f77a1");

		public unsafe IDXGIOutput6 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetDesc1(DxgiOutputDesc1* pDesc)
		{
			IDXGIOutput6* ptr = (IDXGIOutput6*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput6*, DxgiOutputDesc1*, HResult>)(LpVtbl[1]))(ptr, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetDesc1(ref DxgiOutputDesc1 pDesc)
		{
			IDXGIOutput6* ptr = (IDXGIOutput6*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiOutputDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput6*, DxgiOutputDesc1*, HResult>)(LpVtbl[1]))(ptr, (DxgiOutputDesc1*)ppDesc);
				return ret;
			}
		}

		public readonly unsafe HResult CheckHardwareCompositionSupport(uint* pFlags)
		{
			IDXGIOutput6* ptr = (IDXGIOutput6*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput6*, uint*, HResult>)(LpVtbl[2]))(ptr, pFlags);
			return ret;
		}

		public readonly unsafe HResult CheckHardwareCompositionSupport(ref uint pFlags)
		{
			IDXGIOutput6* ptr = (IDXGIOutput6*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFlags = &pFlags)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIOutput6*, uint*, HResult>)(LpVtbl[2]))(ptr, (uint*)ppFlags);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIOutput5 (IDXGIOutput6 value)
		{
			return Unsafe.As<IDXGIOutput6, IDXGIOutput5>(ref value);
		}

		public unsafe static implicit operator IDXGIOutput4 (IDXGIOutput6 value)
		{
			return Unsafe.As<IDXGIOutput6, IDXGIOutput4>(ref value);
		}

		public unsafe static implicit operator IDXGIOutput3 (IDXGIOutput6 value)
		{
			return Unsafe.As<IDXGIOutput6, IDXGIOutput3>(ref value);
		}

		public unsafe static implicit operator IDXGIOutput2 (IDXGIOutput6 value)
		{
			return Unsafe.As<IDXGIOutput6, IDXGIOutput2>(ref value);
		}

		public unsafe static implicit operator IDXGIOutput1 (IDXGIOutput6 value)
		{
			return Unsafe.As<IDXGIOutput6, IDXGIOutput1>(ref value);
		}

		public unsafe static implicit operator IDXGIOutput (IDXGIOutput6 value)
		{
			return Unsafe.As<IDXGIOutput6, IDXGIOutput>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIOutput6 value)
		{
			return Unsafe.As<IDXGIOutput6, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIOutput6 value)
		{
			return Unsafe.As<IDXGIOutput6, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// interface __MIDL_itf_dxgi1_6_0000_0001 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("DXGI_OUTPUT_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxgiOutputDesc1
	{
		[NativeName("DeviceName")]
		public char DeviceName_0;
		public char DeviceName_1;
		public char DeviceName_2;
		public char DeviceName_3;
		public char DeviceName_4;
		public char DeviceName_5;
		public char DeviceName_6;
		public char DeviceName_7;
		public char DeviceName_8;
		public char DeviceName_9;
		public char DeviceName_10;
		public char DeviceName_11;
		public char DeviceName_12;
		public char DeviceName_13;
		public char DeviceName_14;
		public char DeviceName_15;
		public char DeviceName_16;
		public char DeviceName_17;
		public char DeviceName_18;
		public char DeviceName_19;
		public char DeviceName_20;
		public char DeviceName_21;
		public char DeviceName_22;
		public char DeviceName_23;
		public char DeviceName_24;
		public char DeviceName_25;
		public char DeviceName_26;
		public char DeviceName_27;
		public char DeviceName_28;
		public char DeviceName_29;
		public char DeviceName_30;
		public char DeviceName_31;
		[NativeName("DesktopCoordinates")]
		public Rect32 DesktopCoordinates;
		[NativeName("AttachedToDesktop")]
		public Bool32 AttachedToDesktop;
		[NativeName("Rotation")]
		public DxgiModeRotation Rotation;
		[NativeName("Monitor")]
		public nint Monitor;
		[NativeName("BitsPerColor")]
		public uint BitsPerColor;
		[NativeName("ColorSpace")]
		public DxgiColorSpaceType ColorSpace;
		[NativeName("RedPrimary")]
		public float RedPrimary_0;
		public float RedPrimary_1;
		[NativeName("GreenPrimary")]
		public float GreenPrimary_0;
		public float GreenPrimary_1;
		[NativeName("BluePrimary")]
		public float BluePrimary_0;
		public float BluePrimary_1;
		[NativeName("WhitePoint")]
		public float WhitePoint_0;
		public float WhitePoint_1;
		[NativeName("MinLuminance")]
		public float MinLuminance;
		[NativeName("MaxLuminance")]
		public float MaxLuminance;
		[NativeName("MaxFullFrameLuminance")]
		public float MaxFullFrameLuminance;


	}

	[Guid("c1b6694f-ff09-44a9-b03c-77900a0a1d17")]
	[NativeName("IDXGIFactory6")]
	public partial struct IDXGIFactory6 : IComObject, IComObject<IDXGIFactory6>, IComObject<IDXGIFactory5>, IComObject<IDXGIFactory4>, IComObject<IDXGIFactory3>, IComObject<IDXGIFactory2>, IComObject<IDXGIFactory1>, IComObject<IDXGIFactory>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("c1b6694f-ff09-44a9-b03c-77900a0a1d17");

		public unsafe IDXGIFactory6 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult EnumAdapterByGpuPreference(uint adapter, DxgiGpuPreference gpuPreference, Guid* riid, void** ppvAdapter)
		{
			IDXGIFactory6* ptr = (IDXGIFactory6*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory6*, uint, DxgiGpuPreference, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, adapter, gpuPreference, riid, ppvAdapter);
			return ret;
		}

		public readonly unsafe HResult EnumAdapterByGpuPreference(uint adapter, DxgiGpuPreference gpuPreference, ref Guid riid, void** ppvAdapter)
		{
			IDXGIFactory6* ptr = (IDXGIFactory6*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory6*, uint, DxgiGpuPreference, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, adapter, gpuPreference, (Guid*)priid, ppvAdapter);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIFactory5 (IDXGIFactory6 value)
		{
			return Unsafe.As<IDXGIFactory6, IDXGIFactory5>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory4 (IDXGIFactory6 value)
		{
			return Unsafe.As<IDXGIFactory6, IDXGIFactory4>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory3 (IDXGIFactory6 value)
		{
			return Unsafe.As<IDXGIFactory6, IDXGIFactory3>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory2 (IDXGIFactory6 value)
		{
			return Unsafe.As<IDXGIFactory6, IDXGIFactory2>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory1 (IDXGIFactory6 value)
		{
			return Unsafe.As<IDXGIFactory6, IDXGIFactory1>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory (IDXGIFactory6 value)
		{
			return Unsafe.As<IDXGIFactory6, IDXGIFactory>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIFactory6 value)
		{
			return Unsafe.As<IDXGIFactory6, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIFactory6 value)
		{
			return Unsafe.As<IDXGIFactory6, IUnknown>(ref value);
		}

	}

	[Guid("a4966eed-76db-44da-84c1-ee9a7afb20a8")]
	[NativeName("IDXGIFactory7")]
	public partial struct IDXGIFactory7 : IComObject, IComObject<IDXGIFactory7>, IComObject<IDXGIFactory6>, IComObject<IDXGIFactory5>, IComObject<IDXGIFactory4>, IComObject<IDXGIFactory3>, IComObject<IDXGIFactory2>, IComObject<IDXGIFactory1>, IComObject<IDXGIFactory>, IComObject<IDXGIObject>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("a4966eed-76db-44da-84c1-ee9a7afb20a8");

		public unsafe IDXGIFactory7 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult RegisterAdaptersChangedEvent(nint hEvent, uint* pdwCookie)
		{
			IDXGIFactory7* ptr = (IDXGIFactory7*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, nint, uint*, HResult>)(LpVtbl[1]))(ptr, hEvent, pdwCookie);
			return ret;
		}

		public readonly unsafe HResult RegisterAdaptersChangedEvent(nint hEvent, ref uint pdwCookie)
		{
			IDXGIFactory7* ptr = (IDXGIFactory7*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppdwCookie = &pdwCookie)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, nint, uint*, HResult>)(LpVtbl[1]))(ptr, hEvent, (uint*)ppdwCookie);
				return ret;
			}
		}

		public readonly unsafe HResult UnregisterAdaptersChangedEvent(uint dwCookie)
		{
			IDXGIFactory7* ptr = (IDXGIFactory7*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDXGIFactory7*, uint, HResult>)(LpVtbl[2]))(ptr, dwCookie);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDXGIFactory6 (IDXGIFactory7 value)
		{
			return Unsafe.As<IDXGIFactory7, IDXGIFactory6>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory5 (IDXGIFactory7 value)
		{
			return Unsafe.As<IDXGIFactory7, IDXGIFactory5>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory4 (IDXGIFactory7 value)
		{
			return Unsafe.As<IDXGIFactory7, IDXGIFactory4>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory3 (IDXGIFactory7 value)
		{
			return Unsafe.As<IDXGIFactory7, IDXGIFactory3>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory2 (IDXGIFactory7 value)
		{
			return Unsafe.As<IDXGIFactory7, IDXGIFactory2>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory1 (IDXGIFactory7 value)
		{
			return Unsafe.As<IDXGIFactory7, IDXGIFactory1>(ref value);
		}

		public unsafe static implicit operator IDXGIFactory (IDXGIFactory7 value)
		{
			return Unsafe.As<IDXGIFactory7, IDXGIFactory>(ref value);
		}

		public unsafe static implicit operator IDXGIObject (IDXGIFactory7 value)
		{
			return Unsafe.As<IDXGIFactory7, IDXGIObject>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDXGIFactory7 value)
		{
			return Unsafe.As<IDXGIFactory7, IUnknown>(ref value);
		}

	}

}
