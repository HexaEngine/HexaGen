// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;
using HexaEngine.D3DCommon;
using System.Numerics;

namespace HexaEngine.DXGI
{
	public unsafe partial class DXGI
	{
		internal const string LibName = "dxgi";

		[NativeName("CreateDXGIFactory")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CreateDXGIFactory")]
		internal static extern HResult CreateDXGIFactoryNative(Guid* riid, void** ppFactory);

		public static HResult CreateDXGIFactory(Guid* riid, void** ppFactory)
		{
			HResult ret = CreateDXGIFactoryNative(riid, ppFactory);
			return ret;
		}

		public static HResult CreateDXGIFactory(ref Guid riid, void** ppFactory)
		{
			fixed (Guid* priid = &riid)
			{
				HResult ret = CreateDXGIFactoryNative((Guid*)priid, ppFactory);
				return ret;
			}
		}

		[NativeName("CreateDXGIFactory1")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CreateDXGIFactory1")]
		internal static extern HResult CreateDXGIFactory1Native(Guid* riid, void** ppFactory);

		public static HResult CreateDXGIFactory1(Guid* riid, void** ppFactory)
		{
			HResult ret = CreateDXGIFactory1Native(riid, ppFactory);
			return ret;
		}

		public static HResult CreateDXGIFactory1(ref Guid riid, void** ppFactory)
		{
			fixed (Guid* priid = &riid)
			{
				HResult ret = CreateDXGIFactory1Native((Guid*)priid, ppFactory);
				return ret;
			}
		}

		[NativeName("CreateDXGIFactory2")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CreateDXGIFactory2")]
		internal static extern HResult CreateDXGIFactory2Native(uint flags, Guid* riid, void** ppFactory);

		public static HResult CreateDXGIFactory2(uint flags, Guid* riid, void** ppFactory)
		{
			HResult ret = CreateDXGIFactory2Native(flags, riid, ppFactory);
			return ret;
		}

		public static HResult CreateDXGIFactory2(uint flags, ref Guid riid, void** ppFactory)
		{
			fixed (Guid* priid = &riid)
			{
				HResult ret = CreateDXGIFactory2Native(flags, (Guid*)priid, ppFactory);
				return ret;
			}
		}

		[NativeName("DXGIGetDebugInterface1")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "DXGIGetDebugInterface1")]
		internal static extern HResult DXGIGetDebugInterface1Native(uint flags, Guid* riid, void** pDebug);

		public static HResult DXGIGetDebugInterface1(uint flags, Guid* riid, void** pDebug)
		{
			HResult ret = DXGIGetDebugInterface1Native(flags, riid, pDebug);
			return ret;
		}

		public static HResult DXGIGetDebugInterface1(uint flags, ref Guid riid, void** pDebug)
		{
			fixed (Guid* priid = &riid)
			{
				HResult ret = DXGIGetDebugInterface1Native(flags, (Guid*)priid, pDebug);
				return ret;
			}
		}

		[NativeName("DXGIDeclareAdapterRemovalSupport")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "DXGIDeclareAdapterRemovalSupport")]
		internal static extern HResult DXGIDeclareAdapterRemovalSupportNative();

		public static HResult DXGIDeclareAdapterRemovalSupport()
		{
			HResult ret = DXGIDeclareAdapterRemovalSupportNative();
			return ret;
		}

		[NativeName("DXGIDisableVBlankVirtualization")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "DXGIDisableVBlankVirtualization")]
		internal static extern HResult DXGIDisableVBlankVirtualizationNative();

		public static HResult DXGIDisableVBlankVirtualization()
		{
			HResult ret = DXGIDisableVBlankVirtualizationNative();
			return ret;
		}

	}
}
