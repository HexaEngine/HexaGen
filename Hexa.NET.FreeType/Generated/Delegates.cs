// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.FreeType
{
	[NativeName(NativeNameType.Delegate, "alloc")]
	[return: NativeName(NativeNameType.Type, "void*")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void* Alloc();

	[NativeName(NativeNameType.Delegate, "free")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void Free();

	[NativeName(NativeNameType.Delegate, "realloc")]
	[return: NativeName(NativeNameType.Type, "void*")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void* Realloc();

	[NativeName(NativeNameType.Delegate, "read")]
	[return: NativeName(NativeNameType.Type, "unsigned int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Read();

	[NativeName(NativeNameType.Delegate, "close")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void Close();

	[NativeName(NativeNameType.Delegate, "move_to")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int MoveTo([NativeName(NativeNameType.Param, "to")] [NativeName(NativeNameType.Type, "const FT_Vector*")] FTVector* to, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user);

	[NativeName(NativeNameType.Delegate, "line_to")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int LineTo([NativeName(NativeNameType.Param, "to")] [NativeName(NativeNameType.Type, "const FT_Vector*")] FTVector* to, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user);

	[NativeName(NativeNameType.Delegate, "conic_to")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int ConicTo([NativeName(NativeNameType.Param, "control")] [NativeName(NativeNameType.Type, "const FT_Vector*")] FTVector* control, [NativeName(NativeNameType.Param, "to")] [NativeName(NativeNameType.Type, "const FT_Vector*")] FTVector* to, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user);

	[NativeName(NativeNameType.Delegate, "cubic_to")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int CubicTo([NativeName(NativeNameType.Param, "control1")] [NativeName(NativeNameType.Type, "const FT_Vector*")] FTVector* control1, [NativeName(NativeNameType.Param, "control2")] [NativeName(NativeNameType.Type, "const FT_Vector*")] FTVector* control2, [NativeName(NativeNameType.Param, "to")] [NativeName(NativeNameType.Type, "const FT_Vector*")] FTVector* to, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user);

	[NativeName(NativeNameType.Delegate, "gray_spans")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void GraySpans([NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "spans")] [NativeName(NativeNameType.Type, "const FT_Span*")] FTSpan* spans, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user);

	/// <summary>
	/// unused <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "black_spans")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void BlackSpans([NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "spans")] [NativeName(NativeNameType.Type, "const FT_Span*")] FTSpan* spans, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user);

	/// <summary>
	/// unused <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "bit_test")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int BitTest([NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user);

	/// <summary>
	/// unused <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "bit_set")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void BitSet([NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user);

	[NativeName(NativeNameType.Delegate, "raster_new")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int RasterNew([NativeName(NativeNameType.Param, "memory")] [NativeName(NativeNameType.Type, "void*")] void* memory, [NativeName(NativeNameType.Param, "raster")] [NativeName(NativeNameType.Type, "FT_Raster*")] FTRaster* raster);

	[NativeName(NativeNameType.Delegate, "raster_reset")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void RasterReset([NativeName(NativeNameType.Param, "raster")] [NativeName(NativeNameType.Type, "FT_Raster")] FTRaster raster, [NativeName(NativeNameType.Param, "pool_base")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* poolBase, [NativeName(NativeNameType.Param, "pool_size")] [NativeName(NativeNameType.Type, "unsigned int")] uint poolSize);

	[NativeName(NativeNameType.Delegate, "raster_set_mode")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int RasterSetMode([NativeName(NativeNameType.Param, "raster")] [NativeName(NativeNameType.Type, "FT_Raster")] FTRaster raster, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "unsigned int")] uint mode, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "void*")] void* args);

	[NativeName(NativeNameType.Delegate, "raster_render")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int RasterRender([NativeName(NativeNameType.Param, "raster")] [NativeName(NativeNameType.Type, "FT_Raster")] FTRaster raster, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const FT_Raster_Params*")] FTRasterParams* @params);

	[NativeName(NativeNameType.Delegate, "raster_done")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void RasterDone([NativeName(NativeNameType.Param, "raster")] [NativeName(NativeNameType.Type, "FT_Raster")] FTRaster raster);

	[NativeName(NativeNameType.Delegate, "finalizer")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void Finalizer([NativeName(NativeNameType.Param, "object")] [NativeName(NativeNameType.Type, "void*")] void* @object);

	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// :<br/>
	/// FT_Alloc_Func<br/>
	/// <br/>
	/// :<br/>
	/// A function used to allocate `size` bytes from `memory`.<br/>
	/// <br/>
	/// :<br/>
	/// memory ::<br/>
	/// A handle to the source memory manager.<br/>
	/// size ::<br/>
	/// The size in bytes to allocate.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "FT_Alloc_Func")]
	[return: NativeName(NativeNameType.Type, "void*")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void* FtAllocFunc([NativeName(NativeNameType.Param, "memory")] [NativeName(NativeNameType.Type, "FT_Memory")] FTMemory memory, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size);

	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// :<br/>
	/// FT_Free_Func<br/>
	/// <br/>
	/// :<br/>
	/// A function used to release a given block of memory.<br/>
	/// <br/>
	/// :<br/>
	/// memory ::<br/>
	/// A handle to the source memory manager.<br/>
	/// block ::<br/>
	/// The address of the target memory block.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "FT_Free_Func")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void FtFreeFunc([NativeName(NativeNameType.Param, "memory")] [NativeName(NativeNameType.Type, "FT_Memory")] FTMemory memory, [NativeName(NativeNameType.Param, "block")] [NativeName(NativeNameType.Type, "void*")] void* block);

	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// :<br/>
	/// FT_Realloc_Func<br/>
	/// <br/>
	/// :<br/>
	/// A function used to re-allocate a given block of memory.<br/>
	/// <br/>
	/// :<br/>
	/// memory ::<br/>
	/// A handle to the source memory manager.<br/>
	/// cur_size ::<br/>
	/// The block's current size in bytes.<br/>
	/// new_size ::<br/>
	/// The block's requested new size.<br/>
	/// block ::<br/>
	/// The block's current address.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "FT_Realloc_Func")]
	[return: NativeName(NativeNameType.Type, "void*")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void* FtReallocFunc([NativeName(NativeNameType.Param, "memory")] [NativeName(NativeNameType.Type, "FT_Memory")] FTMemory memory, [NativeName(NativeNameType.Param, "cur_size")] [NativeName(NativeNameType.Type, "int")] int curSize, [NativeName(NativeNameType.Param, "new_size")] [NativeName(NativeNameType.Type, "int")] int newSize, [NativeName(NativeNameType.Param, "block")] [NativeName(NativeNameType.Type, "void*")] void* block);

	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// :<br/>
	/// FT_Stream_IoFunc<br/>
	/// <br/>
	/// :<br/>
	/// A function used to seek and read data from a given input stream.<br/>
	/// <br/>
	/// :<br/>
	/// stream ::<br/>
	/// A handle to the source stream.<br/>
	/// offset ::<br/>
	/// The offset from the start of the stream to seek to.<br/>
	/// buffer ::<br/>
	/// The address of the read buffer.<br/>
	/// count ::<br/>
	/// The number of bytes to read from the stream.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "FT_Stream_IoFunc")]
	[return: NativeName(NativeNameType.Type, "unsigned int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint FtStreamIofunc([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "FT_Stream")] FTStream stream, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "unsigned int")] uint offset, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* buffer, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "unsigned int")] uint count);

	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// :<br/>
	/// FT_Stream_CloseFunc<br/>
	/// <br/>
	/// :<br/>
	/// A function used to close a given input stream.<br/>
	/// <br/>
	/// :<br/>
	/// stream ::<br/>
	/// A handle to the target stream.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "FT_Stream_CloseFunc")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void FtStreamClosefunc([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "FT_Stream")] FTStream stream);

	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// :<br/>
	/// FT_Outline_MoveToFunc<br/>
	/// <br/>
	/// :<br/>
	/// A function pointer type used to describe the signature of a 'move to'<br/>
	/// function during outline walking/decomposition.<br/>
	/// A 'move to' is emitted to start a new contour in an outline.<br/>
	/// <br/>
	/// :<br/>
	/// to ::<br/>
	/// A pointer to the target point of the 'move to'.<br/>
	/// user ::<br/>
	/// A typeless pointer, which is passed from the caller of the<br/>
	/// decomposition function.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "FT_Outline_MoveToFunc")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int FTOutlineMoveToFunc([NativeName(NativeNameType.Param, "to")] [NativeName(NativeNameType.Type, "const FT_Vector*")] FTVector* to, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user);

	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// :<br/>
	/// FT_Outline_LineToFunc<br/>
	/// <br/>
	/// :<br/>
	/// A function pointer type used to describe the signature of a 'line to'<br/>
	/// function during outline walking/decomposition.<br/>
	/// A 'line to' is emitted to indicate a segment in the outline.<br/>
	/// <br/>
	/// :<br/>
	/// to ::<br/>
	/// A pointer to the target point of the 'line to'.<br/>
	/// user ::<br/>
	/// A typeless pointer, which is passed from the caller of the<br/>
	/// decomposition function.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "FT_Outline_LineToFunc")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int FTOutlineLineToFunc([NativeName(NativeNameType.Param, "to")] [NativeName(NativeNameType.Type, "const FT_Vector*")] FTVector* to, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user);

	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// :<br/>
	/// FT_Outline_ConicToFunc<br/>
	/// <br/>
	/// :<br/>
	/// A function pointer type used to describe the signature of a 'conic to'<br/>
	/// function during outline walking or decomposition.<br/>
	/// A 'conic to' is emitted to indicate a second-order Bezier arc in the<br/>
	/// outline.<br/>
	/// <br/>
	/// :<br/>
	/// control ::<br/>
	/// An intermediate control point between the last position and the new<br/>
	/// target in `to`.<br/>
	/// to ::<br/>
	/// A pointer to the target end point of the conic arc.<br/>
	/// user ::<br/>
	/// A typeless pointer, which is passed from the caller of the<br/>
	/// decomposition function.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "FT_Outline_ConicToFunc")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int FTOutlineConicToFunc([NativeName(NativeNameType.Param, "control")] [NativeName(NativeNameType.Type, "const FT_Vector*")] FTVector* control, [NativeName(NativeNameType.Param, "to")] [NativeName(NativeNameType.Type, "const FT_Vector*")] FTVector* to, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user);

	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// :<br/>
	/// FT_Outline_CubicToFunc<br/>
	/// <br/>
	/// :<br/>
	/// A function pointer type used to describe the signature of a 'cubic to'<br/>
	/// function during outline walking or decomposition.<br/>
	/// A 'cubic to' is emitted to indicate a third-order Bezier arc.<br/>
	/// <br/>
	/// :<br/>
	/// control1 ::<br/>
	/// A pointer to the first Bezier control point.<br/>
	/// control2 ::<br/>
	/// A pointer to the second Bezier control point.<br/>
	/// to ::<br/>
	/// A pointer to the target end point.<br/>
	/// user ::<br/>
	/// A typeless pointer, which is passed from the caller of the<br/>
	/// decomposition function.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "FT_Outline_CubicToFunc")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int FTOutlineCubicToFunc([NativeName(NativeNameType.Param, "control1")] [NativeName(NativeNameType.Type, "const FT_Vector*")] FTVector* control1, [NativeName(NativeNameType.Param, "control2")] [NativeName(NativeNameType.Type, "const FT_Vector*")] FTVector* control2, [NativeName(NativeNameType.Param, "to")] [NativeName(NativeNameType.Type, "const FT_Vector*")] FTVector* to, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user);

	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// :<br/>
	/// FT_SpanFunc<br/>
	/// <br/>
	/// :<br/>
	/// A function used as a call-back by the anti-aliased renderer in order<br/>
	/// to let client applications draw themselves the pixel spans on each<br/>
	/// scan line.<br/>
	/// <br/>
	/// :<br/>
	/// y ::<br/>
	/// The scanline's upward y~coordinate.<br/>
	/// count ::<br/>
	/// The number of spans to draw on this scanline.<br/>
	/// spans ::<br/>
	/// A table of `count` spans to draw on the scanline.<br/>
	/// user ::<br/>
	/// User-supplied data that is passed to the callback.<br/>
	/// <br/>
	/// This can be used to write anti-aliased outlines directly to a given<br/>
	/// background bitmap using alpha compositing.  It can also be used for<br/>
	/// oversampling and averaging.<br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "FT_SpanFunc")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void FTSpanFunc([NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "spans")] [NativeName(NativeNameType.Type, "const FT_Span*")] FTSpan* spans, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user);

	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// :<br/>
	/// FT_Raster_BitTest_Func<br/>
	/// <br/>
	/// :<br/>
	/// Deprecated, unimplemented.<br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "FT_Raster_BitTest_Func")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int FTRasterBitTestFunc([NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user);

	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// :<br/>
	/// FT_Raster_BitSet_Func<br/>
	/// <br/>
	/// :<br/>
	/// Deprecated, unimplemented.<br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "FT_Raster_BitSet_Func")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void FTRasterBitSetFunc([NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "user")] [NativeName(NativeNameType.Type, "void*")] void* user);

	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// :<br/>
	/// FT_Raster_NewFunc<br/>
	/// <br/>
	/// :<br/>
	/// A function used to create a new raster object.<br/>
	/// <br/>
	/// :<br/>
	/// memory ::<br/>
	/// A handle to the memory allocator.<br/>
	/// <br/>
	/// :<br/>
	/// raster ::<br/>
	/// A handle to the new raster object.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "FT_Raster_NewFunc")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int FTRasterNewFunc([NativeName(NativeNameType.Param, "memory")] [NativeName(NativeNameType.Type, "void*")] void* memory, [NativeName(NativeNameType.Param, "raster")] [NativeName(NativeNameType.Type, "FT_Raster*")] FTRaster* raster);

	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// :<br/>
	/// FT_Raster_DoneFunc<br/>
	/// <br/>
	/// :<br/>
	/// A function used to destroy a given raster object.<br/>
	/// <br/>
	/// :<br/>
	/// raster ::<br/>
	/// A handle to the raster object.<br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "FT_Raster_DoneFunc")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void FTRasterDoneFunc([NativeName(NativeNameType.Param, "raster")] [NativeName(NativeNameType.Type, "FT_Raster")] FTRaster raster);

	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// :<br/>
	/// FT_Raster_ResetFunc<br/>
	/// <br/>
	/// :<br/>
	/// FreeType used to provide an area of memory called the 'render pool'<br/>
	/// available to all registered rasterizers.  This was not thread safe,<br/>
	/// however, and now FreeType never allocates this pool.<br/>
	/// This function is called after a new raster object is created.<br/>
	/// <br/>
	/// :<br/>
	/// raster ::<br/>
	/// A handle to the new raster object.<br/>
	/// pool_base ::<br/>
	/// Previously, the address in memory of the render pool.  Set this to<br/>
	/// `NULL`.<br/>
	/// pool_size ::<br/>
	/// Previously, the size in bytes of the render pool.  Set this to 0.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "FT_Raster_ResetFunc")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void FTRasterResetFunc([NativeName(NativeNameType.Param, "raster")] [NativeName(NativeNameType.Type, "FT_Raster")] FTRaster raster, [NativeName(NativeNameType.Param, "pool_base")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* poolBase, [NativeName(NativeNameType.Param, "pool_size")] [NativeName(NativeNameType.Type, "unsigned int")] uint poolSize);

	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// :<br/>
	/// FT_Raster_SetModeFunc<br/>
	/// <br/>
	/// :<br/>
	/// This function is a generic facility to change modes or attributes in a<br/>
	/// given raster.  This can be used for debugging purposes, or simply to<br/>
	/// allow implementation-specific 'features' in a given raster module.<br/>
	/// <br/>
	/// :<br/>
	/// raster ::<br/>
	/// A handle to the new raster object.<br/>
	/// mode ::<br/>
	/// A 4-byte tag used to name the mode or property.<br/>
	/// args ::<br/>
	/// A pointer to the new mode/property to use.<br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "FT_Raster_SetModeFunc")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int FTRasterSetModeFunc([NativeName(NativeNameType.Param, "raster")] [NativeName(NativeNameType.Type, "FT_Raster")] FTRaster raster, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "unsigned int")] uint mode, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "void*")] void* args);

	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// :<br/>
	/// FT_Raster_RenderFunc<br/>
	/// <br/>
	/// :<br/>
	/// Invoke a given raster to scan-convert a given glyph image into a<br/>
	/// target bitmap.<br/>
	/// <br/>
	/// :<br/>
	/// raster ::<br/>
	/// A handle to the raster object.<br/>
	/// params ::<br/>
	/// A pointer to an <br/>
	/// _Raster_Params structure used to store the<br/>
	/// rendering parameters.<br/>
	/// <br/>
	/// <br/>
	/// Note also that the render function can fail and return a<br/>
	/// `FT_Err_Unimplemented_Feature` error code if the raster used does not<br/>
	/// support direct composition.<br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "FT_Raster_RenderFunc")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int FTRasterRenderFunc([NativeName(NativeNameType.Param, "raster")] [NativeName(NativeNameType.Type, "FT_Raster")] FTRaster raster, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const FT_Raster_Params*")] FTRasterParams* @params);

	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// :<br/>
	/// FT_Generic_Finalizer<br/>
	/// <br/>
	/// :<br/>
	/// Describe a function used to destroy the 'client' data of any FreeType<br/>
	/// object.  See the description of the <br/>
	/// _Generic type for details of<br/>
	/// usage.<br/>
	/// <br/>
	/// :<br/>
	/// The address of the FreeType object that is under finalization.  Its<br/>
	/// client data is accessed through its `generic` field.<br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "FT_Generic_Finalizer")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void FTGenericFinalizer([NativeName(NativeNameType.Param, "object")] [NativeName(NativeNameType.Type, "void*")] void* @object);

}
