// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;

namespace Hexa.NET.FreeType
{
	/// <summary>	/// ************************************************************************<br/>	/// <br/>	/// FT_Pixel_Mode<br/>	/// <br/>	/// :<br/>	/// An enumeration type used to describe the format of pixels in a given<br/>	/// bitmap.  Note that additional formats may be added in the future.<br/>	/// <br/>	/// :<br/>	/// FT_PIXEL_MODE_NONE ::<br/>	/// Value~0 is reserved.<br/>	/// FT_PIXEL_MODE_MONO ::<br/>	/// A monochrome bitmap, using 1~bit per pixel.  Note that pixels are<br/>	/// stored in most-significant order (MSB), which means that the<br/>	/// left-most pixel in a byte has value 128.<br/>	/// FT_PIXEL_MODE_GRAY ::<br/>	/// An 8-bit bitmap, generally used to represent anti-aliased glyph<br/>	/// images.  Each pixel is stored in one byte.  Note that the number of<br/>	/// 'gray' levels is stored in the `num_grays` field of the <br/>	/// _Bitmap<br/>	/// structure (it generally is 256).<br/>	/// FT_PIXEL_MODE_GRAY2 ::<br/>	/// A 2-bit per pixel bitmap, used to represent embedded anti-aliased<br/>	/// bitmaps in font files according to the OpenType specification.  We<br/>	/// haven't found a single font using this format, however.<br/>	/// FT_PIXEL_MODE_GRAY4 ::<br/>	/// A 4-bit per pixel bitmap, representing embedded anti-aliased bitmaps<br/>	/// in font files according to the OpenType specification.  We haven't<br/>	/// found a single font using this format, however.<br/>	/// FT_PIXEL_MODE_LCD ::<br/>	/// An 8-bit bitmap, representing RGB or BGR decimated glyph images used<br/>	/// for display on LCD displays; the bitmap is three times wider than<br/>	/// the original glyph image.  See also <br/>	/// _RENDER_MODE_LCD.<br/>	/// FT_PIXEL_MODE_LCD_V ::<br/>	/// An 8-bit bitmap, representing RGB or BGR decimated glyph images used<br/>	/// for display on rotated LCD displays; the bitmap is three times<br/>	/// taller than the original glyph image.  See also<br/>	/// <br/>	/// _RENDER_MODE_LCD_V.<br/>	/// FT_PIXEL_MODE_BGRA ::<br/>	/// [Since 2.5] An image with four 8-bit channels per pixel,<br/>	/// representing a color image (such as emoticons) with alpha channel.<br/>	/// For each pixel, the format is BGRA, which means, the blue channel<br/>	/// comes first in memory.  The color channels are pre-multiplied and in<br/>	/// the sRGB colorspace.  For example, full red at half-translucent<br/>	/// opacity will be represented as '00,00,80,80', not '00,00,FF,80'.<br/>	/// See also <br/>	/// _LOAD_COLOR.<br/>	/// </summary>	[NativeName(NativeNameType.Enum, "FT_Pixel_Mode_")]
	public enum FTPixelMode
	{
		[NativeName(NativeNameType.EnumItem, "FT_PIXEL_MODE_NONE")]
		[NativeName(NativeNameType.Value, "0")]
		None = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_PIXEL_MODE_MONO")]
		[NativeName(NativeNameType.Value, "1")]
		Mono = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "FT_PIXEL_MODE_GRAY")]
		[NativeName(NativeNameType.Value, "2")]
		Gray = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "FT_PIXEL_MODE_GRAY2")]
		[NativeName(NativeNameType.Value, "3")]
		Gray2 = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "FT_PIXEL_MODE_GRAY4")]
		[NativeName(NativeNameType.Value, "4")]
		Gray4 = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "FT_PIXEL_MODE_LCD")]
		[NativeName(NativeNameType.Value, "5")]
		Lcd = unchecked(5),
		[NativeName(NativeNameType.EnumItem, "FT_PIXEL_MODE_LCD_V")]
		[NativeName(NativeNameType.Value, "6")]
		Lcdv = unchecked(6),
		[NativeName(NativeNameType.EnumItem, "FT_PIXEL_MODE_BGRA")]
		[NativeName(NativeNameType.Value, "7")]
		Bgra = unchecked(7),
		/// <summary>		/// do not remove <br/>		/// </summary>		[NativeName(NativeNameType.EnumItem, "FT_PIXEL_MODE_MAX")]
		[NativeName(NativeNameType.Value, "8")]
		Max = unchecked(8),

	}

	/// <summary>	/// ************************************************************************<br/>	/// <br/>	/// FT_Glyph_Format<br/>	/// <br/>	/// :<br/>	/// An enumeration type used to describe the format of a given glyph<br/>	/// image.  Note that this version of FreeType only supports two image<br/>	/// formats, even though future font drivers will be able to register<br/>	/// their own format.<br/>	/// <br/>	/// :<br/>	/// FT_GLYPH_FORMAT_NONE ::<br/>	/// The value~0 is reserved.<br/>	/// FT_GLYPH_FORMAT_COMPOSITE ::<br/>	/// The glyph image is a composite of several other images.  This format<br/>	/// is _only_ used with <br/>	/// _LOAD_NO_RECURSE, and is used to report<br/>	/// compound glyphs (like accented characters).<br/>	/// FT_GLYPH_FORMAT_BITMAP ::<br/>	/// The glyph image is a bitmap, and can be described as an <br/>	/// _Bitmap.<br/>	/// You generally need to access the `bitmap` field of the<br/>	/// <br/>	/// _GlyphSlotRec structure to read it.<br/>	/// FT_GLYPH_FORMAT_OUTLINE ::<br/>	/// The glyph image is a vectorial outline made of line segments and<br/>	/// Bezier arcs; it can be described as an <br/>	/// _Outline; you generally<br/>	/// want to access the `outline` field of the <br/>	/// _GlyphSlotRec structure<br/>	/// to read it.<br/>	/// FT_GLYPH_FORMAT_PLOTTER ::<br/>	/// The glyph image is a vectorial path with no inside and outside<br/>	/// contours.  Some Type~1 fonts, like those in the Hershey family,<br/>	/// contain glyphs in this format.  These are described as <br/>	/// _Outline,<br/>	/// but FreeType isn't currently capable of rendering them correctly.<br/>	/// FT_GLYPH_FORMAT_SVG ::<br/>	/// [Since 2.12] The glyph is represented by an SVG document in the<br/>	/// 'SVG~' table.<br/>	/// </summary>	[NativeName(NativeNameType.Enum, "FT_Glyph_Format_")]
	public enum FTGlyphFormat
	{
		[NativeName(NativeNameType.EnumItem, "FT_GLYPH_FORMAT_NONE")]
		[NativeName(NativeNameType.Value, "((FT_STATIC_BYTE_CAST(unsigned long,_x1)<<24)|(FT_STATIC_BYTE_CAST(unsigned long,_x2)<<16)|(FT_STATIC_BYTE_CAST(unsigned long,_x3)<<8)|FT_STATIC_BYTE_CAST(unsigned long,_x4))#endif typedef enum FT_Glyph_Format_{FT_IMAGE_TAG(FT_GLYPH_FORMAT_NONE,0,0,0,0)")]
		None = 0,
		[NativeName(NativeNameType.EnumItem, "FT_GLYPH_FORMAT_COMPOSITE")]
		[NativeName(NativeNameType.Value, "((FT_STATIC_BYTE_CAST(unsigned long,_x1)<<24)|(FT_STATIC_BYTE_CAST(unsigned long,_x2)<<16)|(FT_STATIC_BYTE_CAST(unsigned long,_x3)<<8)|FT_STATIC_BYTE_CAST(unsigned long,_x4))#endif typedef enum FT_Glyph_Format_{FT_IMAGE_TAG(FT_GLYPH_FORMAT_NONE,0,0,0,0),FT_IMAGE_TAG(FT_GLYPH_FORMAT_COMPOSITE,'c','o','m','p')")]
		Composite = 1668246896,
		[NativeName(NativeNameType.EnumItem, "FT_GLYPH_FORMAT_BITMAP")]
		[NativeName(NativeNameType.Value, "((FT_STATIC_BYTE_CAST(unsigned long,_x1)<<24)|(FT_STATIC_BYTE_CAST(unsigned long,_x2)<<16)|(FT_STATIC_BYTE_CAST(unsigned long,_x3)<<8)|FT_STATIC_BYTE_CAST(unsigned long,_x4))#endif typedef enum FT_Glyph_Format_{FT_IMAGE_TAG(FT_GLYPH_FORMAT_NONE,0,0,0,0),FT_IMAGE_TAG(FT_GLYPH_FORMAT_COMPOSITE,'c','o','m','p'),FT_IMAGE_TAG(FT_GLYPH_FORMAT_BITMAP,'b','i','t','s')")]
		Bitmap = 1651078259,
		[NativeName(NativeNameType.EnumItem, "FT_GLYPH_FORMAT_OUTLINE")]
		[NativeName(NativeNameType.Value, "((FT_STATIC_BYTE_CAST(unsigned long,_x1)<<24)|(FT_STATIC_BYTE_CAST(unsigned long,_x2)<<16)|(FT_STATIC_BYTE_CAST(unsigned long,_x3)<<8)|FT_STATIC_BYTE_CAST(unsigned long,_x4))#endif typedef enum FT_Glyph_Format_{FT_IMAGE_TAG(FT_GLYPH_FORMAT_NONE,0,0,0,0),FT_IMAGE_TAG(FT_GLYPH_FORMAT_COMPOSITE,'c','o','m','p'),FT_IMAGE_TAG(FT_GLYPH_FORMAT_BITMAP,'b','i','t','s'),FT_IMAGE_TAG(FT_GLYPH_FORMAT_OUTLINE,'o','u','t','l')")]
		Outline = 186998492,
		[NativeName(NativeNameType.EnumItem, "FT_GLYPH_FORMAT_PLOTTER")]
		[NativeName(NativeNameType.Value, "((FT_STATIC_BYTE_CAST(unsigned long,_x1)<<24)|(FT_STATIC_BYTE_CAST(unsigned long,_x2)<<16)|(FT_STATIC_BYTE_CAST(unsigned long,_x3)<<8)|FT_STATIC_BYTE_CAST(unsigned long,_x4))#endif typedef enum FT_Glyph_Format_{FT_IMAGE_TAG(FT_GLYPH_FORMAT_NONE,0,0,0,0),FT_IMAGE_TAG(FT_GLYPH_FORMAT_COMPOSITE,'c','o','m','p'),FT_IMAGE_TAG(FT_GLYPH_FORMAT_BITMAP,'b','i','t','s'),FT_IMAGE_TAG(FT_GLYPH_FORMAT_OUTLINE,'o','u','t','l'),FT_IMAGE_TAG(FT_GLYPH_FORMAT_PLOTTER,'p','l','o','t')")]
		Plotter = 1886154612,
		[NativeName(NativeNameType.EnumItem, "FT_GLYPH_FORMAT_SVG")]
		[NativeName(NativeNameType.Value, "((FT_STATIC_BYTE_CAST(unsigned long,_x1)<<24)|(FT_STATIC_BYTE_CAST(unsigned long,_x2)<<16)|(FT_STATIC_BYTE_CAST(unsigned long,_x3)<<8)|FT_STATIC_BYTE_CAST(unsigned long,_x4))#endif typedef enum FT_Glyph_Format_{FT_IMAGE_TAG(FT_GLYPH_FORMAT_NONE,0,0,0,0),FT_IMAGE_TAG(FT_GLYPH_FORMAT_COMPOSITE,'c','o','m','p'),FT_IMAGE_TAG(FT_GLYPH_FORMAT_BITMAP,'b','i','t','s'),FT_IMAGE_TAG(FT_GLYPH_FORMAT_OUTLINE,'o','u','t','l'),FT_IMAGE_TAG(FT_GLYPH_FORMAT_PLOTTER,'p','l','o','t'),FT_IMAGE_TAG(FT_GLYPH_FORMAT_SVG,'S','V','G',' ')")]
		Svg = 1398163232,
	}

	[NativeName(NativeNameType.Enum, "(unnamed enum at C:\\Users\\juna\\source\\repos\\HexaGen\\HexaGen.Tests\\bin\\Debug\\net8.0\\freetype\\freetype\\ftmoderr.h:147:3)")]
	public enum UnknownEnum0
	{
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_Base")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrBase = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_Autofit")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrAutofit = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_BDF")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrBdf = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_Bzip2")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrBzip2 = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_Cache")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrCache = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_CFF")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrCff = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_CID")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrCid = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_Gzip")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrGzip = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_LZW")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrLzw = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_OTvalid")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErroTvalid = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_PCF")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrPcf = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_PFR")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrPfr = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_PSaux")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrpSaux = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_PShinter")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrpShinter = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_PSnames")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrpSnames = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_Raster")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrRaster = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_SFNT")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrSfnt = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_Smooth")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrSmooth = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_TrueType")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrTrueType = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_Type1")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrType1 = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_Type42")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrType42 = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_Winfonts")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrWinfonts = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_GXvalid")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrgXvalid = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_Sdf")]
		[NativeName(NativeNameType.Value, "0")]
		FtModErrSdf = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Mod_Err_Max")]
		[NativeName(NativeNameType.Value, "1")]
		FtModErrMax = unchecked(1),
	}

	[NativeName(NativeNameType.Enum, "(unnamed enum at C:\\Users\\juna\\source\\repos\\HexaGen\\HexaGen.Tests\\bin\\Debug\\net8.0\\freetype\\freetype\\fterrors.h:186:2)")]
	public enum FTError
	{
		[NativeName(NativeNameType.EnumItem, "FT_Err_Ok")]
		[NativeName(NativeNameType.Value, "0")]
		FtErrOk = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Cannot_Open_Resource")]
		[NativeName(NativeNameType.Value, "1")]
		FtErrCannotOpenResource = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Unknown_File_Format")]
		[NativeName(NativeNameType.Value, "2")]
		FtErrUnknownFileFormat = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_File_Format")]
		[NativeName(NativeNameType.Value, "3")]
		FtErrInvalidFileFormat = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Version")]
		[NativeName(NativeNameType.Value, "4")]
		FtErrInvalidVersion = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Lower_Module_Version")]
		[NativeName(NativeNameType.Value, "5")]
		FtErrLowerModuleVersion = unchecked(5),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Argument")]
		[NativeName(NativeNameType.Value, "6")]
		FtErrInvalidArgument = unchecked(6),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Unimplemented_Feature")]
		[NativeName(NativeNameType.Value, "7")]
		FtErrUnimplementedFeature = unchecked(7),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Table")]
		[NativeName(NativeNameType.Value, "8")]
		FtErrInvalidTable = unchecked(8),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Offset")]
		[NativeName(NativeNameType.Value, "9")]
		FtErrInvalidOffset = unchecked(9),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Array_Too_Large")]
		[NativeName(NativeNameType.Value, "10")]
		FtErrArrayTooLarge = unchecked(10),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Missing_Module")]
		[NativeName(NativeNameType.Value, "11")]
		FtErrMissingModule = unchecked(11),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Missing_Property")]
		[NativeName(NativeNameType.Value, "12")]
		FtErrMissingProperty = unchecked(12),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Glyph_Index")]
		[NativeName(NativeNameType.Value, "16")]
		FtErrInvalidGlyphIndex = unchecked(16),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Character_Code")]
		[NativeName(NativeNameType.Value, "17")]
		FtErrInvalidCharacterCode = unchecked(17),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Glyph_Format")]
		[NativeName(NativeNameType.Value, "18")]
		FtErrInvalidGlyphFormat = unchecked(18),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Cannot_Render_Glyph")]
		[NativeName(NativeNameType.Value, "19")]
		FtErrCannotRenderGlyph = unchecked(19),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Outline")]
		[NativeName(NativeNameType.Value, "20")]
		FtErrInvalidOutline = unchecked(20),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Composite")]
		[NativeName(NativeNameType.Value, "21")]
		FtErrInvalidComposite = unchecked(21),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Too_Many_Hints")]
		[NativeName(NativeNameType.Value, "22")]
		FtErrTooManyHints = unchecked(22),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Pixel_Size")]
		[NativeName(NativeNameType.Value, "23")]
		FtErrInvalidPixelSize = unchecked(23),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_SVG_Document")]
		[NativeName(NativeNameType.Value, "24")]
		FtErrInvalidSvgDocument = unchecked(24),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Handle")]
		[NativeName(NativeNameType.Value, "32")]
		FtErrInvalidHandle = unchecked(32),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Library_Handle")]
		[NativeName(NativeNameType.Value, "33")]
		FtErrInvalidLibraryHandle = unchecked(33),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Driver_Handle")]
		[NativeName(NativeNameType.Value, "34")]
		FtErrInvalidDriverHandle = unchecked(34),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Face_Handle")]
		[NativeName(NativeNameType.Value, "35")]
		FtErrInvalidFaceHandle = unchecked(35),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Size_Handle")]
		[NativeName(NativeNameType.Value, "36")]
		FtErrInvalidSizeHandle = unchecked(36),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Slot_Handle")]
		[NativeName(NativeNameType.Value, "37")]
		FtErrInvalidSlotHandle = unchecked(37),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_CharMap_Handle")]
		[NativeName(NativeNameType.Value, "38")]
		FtErrInvalidCharMapHandle = unchecked(38),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Cache_Handle")]
		[NativeName(NativeNameType.Value, "39")]
		FtErrInvalidCacheHandle = unchecked(39),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Stream_Handle")]
		[NativeName(NativeNameType.Value, "40")]
		FtErrInvalidStreamHandle = unchecked(40),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Too_Many_Drivers")]
		[NativeName(NativeNameType.Value, "48")]
		FtErrTooManyDrivers = unchecked(48),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Too_Many_Extensions")]
		[NativeName(NativeNameType.Value, "49")]
		FtErrTooManyExtensions = unchecked(49),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Out_Of_Memory")]
		[NativeName(NativeNameType.Value, "64")]
		FtErrOutOfMemory = unchecked(64),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Unlisted_Object")]
		[NativeName(NativeNameType.Value, "65")]
		FtErrUnlistedObject = unchecked(65),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Cannot_Open_Stream")]
		[NativeName(NativeNameType.Value, "81")]
		FtErrCannotOpenStream = unchecked(81),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Stream_Seek")]
		[NativeName(NativeNameType.Value, "82")]
		FtErrInvalidStreamSeek = unchecked(82),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Stream_Skip")]
		[NativeName(NativeNameType.Value, "83")]
		FtErrInvalidStreamSkip = unchecked(83),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Stream_Read")]
		[NativeName(NativeNameType.Value, "84")]
		FtErrInvalidStreamRead = unchecked(84),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Stream_Operation")]
		[NativeName(NativeNameType.Value, "85")]
		FtErrInvalidStreamOperation = unchecked(85),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Frame_Operation")]
		[NativeName(NativeNameType.Value, "86")]
		FtErrInvalidFrameOperation = unchecked(86),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Nested_Frame_Access")]
		[NativeName(NativeNameType.Value, "87")]
		FtErrNestedFrameAccess = unchecked(87),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Frame_Read")]
		[NativeName(NativeNameType.Value, "88")]
		FtErrInvalidFrameRead = unchecked(88),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Raster_Uninitialized")]
		[NativeName(NativeNameType.Value, "96")]
		FtErrRasterUninitialized = unchecked(96),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Raster_Corrupted")]
		[NativeName(NativeNameType.Value, "97")]
		FtErrRasterCorrupted = unchecked(97),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Raster_Overflow")]
		[NativeName(NativeNameType.Value, "98")]
		FtErrRasterOverflow = unchecked(98),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Raster_Negative_Height")]
		[NativeName(NativeNameType.Value, "99")]
		FtErrRasterNegativeHeight = unchecked(99),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Too_Many_Caches")]
		[NativeName(NativeNameType.Value, "112")]
		FtErrTooManyCaches = unchecked(112),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Opcode")]
		[NativeName(NativeNameType.Value, "128")]
		FtErrInvalidOpcode = unchecked(128),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Too_Few_Arguments")]
		[NativeName(NativeNameType.Value, "129")]
		FtErrTooFewArguments = unchecked(129),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Stack_Overflow")]
		[NativeName(NativeNameType.Value, "130")]
		FtErrStackOverflow = unchecked(130),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Code_Overflow")]
		[NativeName(NativeNameType.Value, "131")]
		FtErrCodeOverflow = unchecked(131),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Bad_Argument")]
		[NativeName(NativeNameType.Value, "132")]
		FtErrBadArgument = unchecked(132),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Divide_By_Zero")]
		[NativeName(NativeNameType.Value, "133")]
		FtErrDivideByZero = unchecked(133),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Reference")]
		[NativeName(NativeNameType.Value, "134")]
		FtErrInvalidReference = unchecked(134),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Debug_OpCode")]
		[NativeName(NativeNameType.Value, "135")]
		FtErrDebugOpCode = unchecked(135),
		[NativeName(NativeNameType.EnumItem, "FT_Err_ENDF_In_Exec_Stream")]
		[NativeName(NativeNameType.Value, "136")]
		FtErrEndfInExecStream = unchecked(136),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Nested_DEFS")]
		[NativeName(NativeNameType.Value, "137")]
		FtErrNestedDefs = unchecked(137),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_CodeRange")]
		[NativeName(NativeNameType.Value, "138")]
		FtErrInvalidCodeRange = unchecked(138),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Execution_Too_Long")]
		[NativeName(NativeNameType.Value, "139")]
		FtErrExecutionTooLong = unchecked(139),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Too_Many_Function_Defs")]
		[NativeName(NativeNameType.Value, "140")]
		FtErrTooManyFunctionDefs = unchecked(140),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Too_Many_Instruction_Defs")]
		[NativeName(NativeNameType.Value, "141")]
		FtErrTooManyInstructionDefs = unchecked(141),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Table_Missing")]
		[NativeName(NativeNameType.Value, "142")]
		FtErrTableMissing = unchecked(142),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Horiz_Header_Missing")]
		[NativeName(NativeNameType.Value, "143")]
		FtErrHorizHeaderMissing = unchecked(143),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Locations_Missing")]
		[NativeName(NativeNameType.Value, "144")]
		FtErrLocationsMissing = unchecked(144),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Name_Table_Missing")]
		[NativeName(NativeNameType.Value, "145")]
		FtErrNameTableMissing = unchecked(145),
		[NativeName(NativeNameType.EnumItem, "FT_Err_CMap_Table_Missing")]
		[NativeName(NativeNameType.Value, "146")]
		FtErrcMapTableMissing = unchecked(146),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Hmtx_Table_Missing")]
		[NativeName(NativeNameType.Value, "147")]
		FtErrHmtxTableMissing = unchecked(147),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Post_Table_Missing")]
		[NativeName(NativeNameType.Value, "148")]
		FtErrPostTableMissing = unchecked(148),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Horiz_Metrics")]
		[NativeName(NativeNameType.Value, "149")]
		FtErrInvalidHorizMetrics = unchecked(149),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_CharMap_Format")]
		[NativeName(NativeNameType.Value, "150")]
		FtErrInvalidCharMapFormat = unchecked(150),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_PPem")]
		[NativeName(NativeNameType.Value, "151")]
		FtErrInvalidpPem = unchecked(151),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Vert_Metrics")]
		[NativeName(NativeNameType.Value, "152")]
		FtErrInvalidVertMetrics = unchecked(152),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Could_Not_Find_Context")]
		[NativeName(NativeNameType.Value, "153")]
		FtErrCouldNotFindContext = unchecked(153),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Post_Table_Format")]
		[NativeName(NativeNameType.Value, "154")]
		FtErrInvalidPostTableFormat = unchecked(154),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Invalid_Post_Table")]
		[NativeName(NativeNameType.Value, "155")]
		FtErrInvalidPostTable = unchecked(155),
		[NativeName(NativeNameType.EnumItem, "FT_Err_DEF_In_Glyf_Bytecode")]
		[NativeName(NativeNameType.Value, "156")]
		FtErrDefInGlyfBytecode = unchecked(156),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Missing_Bitmap")]
		[NativeName(NativeNameType.Value, "157")]
		FtErrMissingBitmap = unchecked(157),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Missing_SVG_Hooks")]
		[NativeName(NativeNameType.Value, "158")]
		FtErrMissingSvgHooks = unchecked(158),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Syntax_Error")]
		[NativeName(NativeNameType.Value, "160")]
		FtErrSyntaxError = unchecked(160),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Stack_Underflow")]
		[NativeName(NativeNameType.Value, "161")]
		FtErrStackUnderflow = unchecked(161),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Ignore")]
		[NativeName(NativeNameType.Value, "162")]
		FtErrIgnore = unchecked(162),
		[NativeName(NativeNameType.EnumItem, "FT_Err_No_Unicode_Glyph_Name")]
		[NativeName(NativeNameType.Value, "163")]
		FtErrNoUnicodeGlyphName = unchecked(163),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Glyph_Too_Big")]
		[NativeName(NativeNameType.Value, "164")]
		FtErrGlyphTooBig = unchecked(164),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Missing_Startfont_Field")]
		[NativeName(NativeNameType.Value, "176")]
		FtErrMissingStartfontField = unchecked(176),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Missing_Font_Field")]
		[NativeName(NativeNameType.Value, "177")]
		FtErrMissingFontField = unchecked(177),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Missing_Size_Field")]
		[NativeName(NativeNameType.Value, "178")]
		FtErrMissingSizeField = unchecked(178),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Missing_Fontboundingbox_Field")]
		[NativeName(NativeNameType.Value, "179")]
		FtErrMissingFontboundingboxField = unchecked(179),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Missing_Chars_Field")]
		[NativeName(NativeNameType.Value, "180")]
		FtErrMissingCharsField = unchecked(180),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Missing_Startchar_Field")]
		[NativeName(NativeNameType.Value, "181")]
		FtErrMissingStartcharField = unchecked(181),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Missing_Encoding_Field")]
		[NativeName(NativeNameType.Value, "182")]
		FtErrMissingEncodingField = unchecked(182),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Missing_Bbx_Field")]
		[NativeName(NativeNameType.Value, "183")]
		FtErrMissingBbxField = unchecked(183),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Bbx_Too_Big")]
		[NativeName(NativeNameType.Value, "184")]
		FtErrBbxTooBig = unchecked(184),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Corrupted_Font_Header")]
		[NativeName(NativeNameType.Value, "185")]
		FtErrCorruptedFontHeader = unchecked(185),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Corrupted_Font_Glyphs")]
		[NativeName(NativeNameType.Value, "186")]
		FtErrCorruptedFontGlyphs = unchecked(186),
		[NativeName(NativeNameType.EnumItem, "FT_Err_Max")]
		[NativeName(NativeNameType.Value, "187")]
		FtErrMax = unchecked(187),
	}

	/// <summary>	/// ************************************************************************<br/>	/// <br/>	/// FT_Encoding<br/>	/// <br/>	/// :<br/>	/// An enumeration to specify character sets supported by charmaps.  Used<br/>	/// in the <br/>	/// _Select_Charmap API function.<br/>	/// <br/>	/// Other encodings might be defined in the future.<br/>	/// <br/>	/// :<br/>	/// FT_ENCODING_NONE ::<br/>	/// The encoding value~0 is reserved for all formats except BDF, PCF,<br/>	/// and Windows FNT; see below for more information.<br/>	/// FT_ENCODING_UNICODE ::<br/>	/// The Unicode character set.  This value covers all versions of the<br/>	/// Unicode repertoire, including ASCII and Latin-1.  Most fonts include<br/>	/// a Unicode charmap, but not all of them.<br/>	/// For example, if you want to access Unicode value U+1F028 (and the<br/>	/// font contains it), use value 0x1F028 as the input value for<br/>	/// <br/>	/// _Get_Char_Index.<br/>	/// FT_ENCODING_MS_SYMBOL ::<br/>	/// Microsoft Symbol encoding, used to encode mathematical symbols and<br/>	/// wingdings.  For more information, see<br/>	/// 'https://www.microsoft.com/typography/otspec/recom.htm#non-standard-symbol-fonts',<br/>	/// 'http://www.kostis.net/charsets/symbol.htm', and<br/>	/// 'http://www.kostis.net/charsets/wingding.htm'.<br/>	/// This encoding uses character codes from the PUA (Private Unicode<br/>	/// Area) in the range U+F020-U+F0FF.<br/>	/// FT_ENCODING_SJIS ::<br/>	/// Shift JIS encoding for Japanese.  More info at<br/>	/// 'https://en.wikipedia.org/wiki/Shift_JIS'.  See note on multi-byte<br/>	/// encodings below.<br/>	/// FT_ENCODING_PRC ::<br/>	/// Corresponds to encoding systems mainly for Simplified Chinese as<br/>	/// used in People's Republic of China (PRC).  The encoding layout is<br/>	/// based on GB~2312 and its supersets GBK and GB~18030.<br/>	/// FT_ENCODING_BIG5 ::<br/>	/// Corresponds to an encoding system for Traditional Chinese as used in<br/>	/// Taiwan and Hong Kong.<br/>	/// FT_ENCODING_WANSUNG ::<br/>	/// Corresponds to the Korean encoding system known as Extended Wansung<br/>	/// (MS Windows code page 949).  For more information see<br/>	/// 'https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WindowsBestFit/bestfit949.txt'.<br/>	/// FT_ENCODING_JOHAB ::<br/>	/// The Korean standard character set (KS~C 5601-1992), which<br/>	/// corresponds to MS Windows code page 1361.  This character set<br/>	/// includes all possible Hangul character combinations.<br/>	/// FT_ENCODING_ADOBE_LATIN_1 ::<br/>	/// Corresponds to a Latin-1 encoding as defined in a Type~1 PostScript<br/>	/// font.  It is limited to 256 character codes.<br/>	/// FT_ENCODING_ADOBE_STANDARD ::<br/>	/// Adobe Standard encoding, as found in Type~1, CFF, and OpenType/CFF<br/>	/// fonts.  It is limited to 256 character codes.<br/>	/// FT_ENCODING_ADOBE_EXPERT ::<br/>	/// Adobe Expert encoding, as found in Type~1, CFF, and OpenType/CFF<br/>	/// fonts.  It is limited to 256 character codes.<br/>	/// FT_ENCODING_ADOBE_CUSTOM ::<br/>	/// Corresponds to a custom encoding, as found in Type~1, CFF, and<br/>	/// OpenType/CFF fonts.  It is limited to 256 character codes.<br/>	/// FT_ENCODING_APPLE_ROMAN ::<br/>	/// Apple roman encoding.  Many TrueType and OpenType fonts contain a<br/>	/// charmap for this 8-bit encoding, since older versions of Mac OS are<br/>	/// able to use it.<br/>	/// FT_ENCODING_OLD_LATIN_2 ::<br/>	/// This value is deprecated and was neither used nor reported by<br/>	/// FreeType.  Don't use or test for it.<br/>	/// FT_ENCODING_MS_SJIS ::<br/>	/// Same as FT_ENCODING_SJIS.  Deprecated.<br/>	/// FT_ENCODING_MS_GB2312 ::<br/>	/// Same as FT_ENCODING_PRC.  Deprecated.<br/>	/// FT_ENCODING_MS_BIG5 ::<br/>	/// Same as FT_ENCODING_BIG5.  Deprecated.<br/>	/// FT_ENCODING_MS_WANSUNG ::<br/>	/// Same as FT_ENCODING_WANSUNG.  Deprecated.<br/>	/// FT_ENCODING_MS_JOHAB ::<br/>	/// Same as FT_ENCODING_JOHAB.  Deprecated.<br/>	/// <br/>	/// All other encodings are considered legacy and tagged only if<br/>	/// explicitly defined in the font file.  Otherwise, `FT_ENCODING_NONE` is<br/>	/// used.<br/>	/// `FT_ENCODING_NONE` is set by the BDF and PCF drivers if the charmap is<br/>	/// neither Unicode nor ISO-8859-1 (otherwise it is set to<br/>	/// `FT_ENCODING_UNICODE`).  Use <br/>	/// _Get_BDF_Charset_ID to find out which<br/>	/// encoding is really present.  If, for example, the `cs_registry` field<br/>	/// is 'KOI8' and the `cs_encoding` field is 'R', the font is encoded in<br/>	/// KOI8-R.<br/>	/// `FT_ENCODING_NONE` is always set (with a single exception) by the<br/>	/// winfonts driver.  Use <br/>	/// _Get_WinFNT_Header and examine the `charset`<br/>	/// field of the <br/>	/// _WinFNT_HeaderRec structure to find out which encoding<br/>	/// is really present.  For example, <br/>	/// _WinFNT_ID_CP1251 (204) means<br/>	/// Windows code page 1251 (for Russian).<br/>	/// `FT_ENCODING_NONE` is set if `platform_id` is <br/>	/// _PLATFORM_MACINTOSH<br/>	/// and `encoding_id` is not `TT_MAC_ID_ROMAN` (otherwise it is set to<br/>	/// `FT_ENCODING_APPLE_ROMAN`).<br/>	/// If `platform_id` is <br/>	/// _PLATFORM_MACINTOSH, use the function<br/>	/// <br/>	/// _Get_CMap_Language_ID to query the Mac language ID that may be<br/>	/// needed to be able to distinguish Apple encoding variants.  See<br/>	/// https://www.unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt<br/>	/// to get an idea how to do that.  Basically, if the language ID is~0,<br/>	/// don't use it, otherwise subtract 1 from the language ID.  Then examine<br/>	/// `encoding_id`.  If, for example, `encoding_id` is `TT_MAC_ID_ROMAN`<br/>	/// and the language ID (minus~1) is `TT_MAC_LANGID_GREEK`, it is the<br/>	/// Greek encoding, not Roman.  `TT_MAC_ID_ARABIC` with<br/>	/// `TT_MAC_LANGID_FARSI` means the Farsi variant of the Arabic encoding.<br/>	/// </summary>	[NativeName(NativeNameType.Enum, "FT_Encoding_")]
	public enum FTEncoding
	{
		[NativeName(NativeNameType.EnumItem, "FT_ENCODING_NONE")]
		[NativeName(NativeNameType.Value, "((FT_STATIC_BYTE_CAST(FT_UInt32,a)<<24)|(FT_STATIC_BYTE_CAST(FT_UInt32,b)<<16)|(FT_STATIC_BYTE_CAST(FT_UInt32,c)<<8)|FT_STATIC_BYTE_CAST(FT_UInt32,d))#endif typedef enum FT_Encoding_{FT_ENC_TAG(FT_ENCODING_NONE,0,0,0,0)")]
		None = 0,
		[NativeName(NativeNameType.EnumItem, "FT_ENCODING_MS_SYMBOL")]
		[NativeName(NativeNameType.Value, "((FT_STATIC_BYTE_CAST(FT_UInt32,a)<<24)|(FT_STATIC_BYTE_CAST(FT_UInt32,b)<<16)|(FT_STATIC_BYTE_CAST(FT_UInt32,c)<<8)|FT_STATIC_BYTE_CAST(FT_UInt32,d))#endif typedef enum FT_Encoding_{FT_ENC_TAG(FT_ENCODING_NONE,0,0,0,0),FT_ENC_TAG(FT_ENCODING_MS_SYMBOL,'s','y','m','b')")]
		MsSymbol = 1937337698,
		[NativeName(NativeNameType.EnumItem, "FT_ENCODING_UNICODE")]
		[NativeName(NativeNameType.Value, "((FT_STATIC_BYTE_CAST(FT_UInt32,a)<<24)|(FT_STATIC_BYTE_CAST(FT_UInt32,b)<<16)|(FT_STATIC_BYTE_CAST(FT_UInt32,c)<<8)|FT_STATIC_BYTE_CAST(FT_UInt32,d))#endif typedef enum FT_Encoding_{FT_ENC_TAG(FT_ENCODING_NONE,0,0,0,0),FT_ENC_TAG(FT_ENCODING_MS_SYMBOL,'s','y','m','b'),FT_ENC_TAG(FT_ENCODING_UNICODE,'u','n','i','c')")]
		Unicode = 1970170211,
		[NativeName(NativeNameType.EnumItem, "FT_ENCODING_SJIS")]
		[NativeName(NativeNameType.Value, "((FT_STATIC_BYTE_CAST(FT_UInt32,a)<<24)|(FT_STATIC_BYTE_CAST(FT_UInt32,b)<<16)|(FT_STATIC_BYTE_CAST(FT_UInt32,c)<<8)|FT_STATIC_BYTE_CAST(FT_UInt32,d))#endif typedef enum FT_Encoding_{FT_ENC_TAG(FT_ENCODING_NONE,0,0,0,0),FT_ENC_TAG(FT_ENCODING_MS_SYMBOL,'s','y','m','b'),FT_ENC_TAG(FT_ENCODING_UNICODE,'u','n','i','c'),FT_ENC_TAG(FT_ENCODING_SJIS,'s','j','i','s')")]
		Sjis = 1936353651,
		[NativeName(NativeNameType.EnumItem, "FT_ENCODING_PRC")]
		[NativeName(NativeNameType.Value, "((FT_STATIC_BYTE_CAST(FT_UInt32,a)<<24)|(FT_STATIC_BYTE_CAST(FT_UInt32,b)<<16)|(FT_STATIC_BYTE_CAST(FT_UInt32,c)<<8)|FT_STATIC_BYTE_CAST(FT_UInt32,d))#endif typedef enum FT_Encoding_{FT_ENC_TAG(FT_ENCODING_NONE,0,0,0,0),FT_ENC_TAG(FT_ENCODING_MS_SYMBOL,'s','y','m','b'),FT_ENC_TAG(FT_ENCODING_UNICODE,'u','n','i','c'),FT_ENC_TAG(FT_ENCODING_SJIS,'s','j','i','s'),FT_ENC_TAG(FT_ENCODING_PRC,'g','b',' ',' ')")]
		Prc = 1734484000,
		[NativeName(NativeNameType.EnumItem, "FT_ENCODING_BIG5")]
		[NativeName(NativeNameType.Value, "((FT_STATIC_BYTE_CAST(FT_UInt32,a)<<24)|(FT_STATIC_BYTE_CAST(FT_UInt32,b)<<16)|(FT_STATIC_BYTE_CAST(FT_UInt32,c)<<8)|FT_STATIC_BYTE_CAST(FT_UInt32,d))#endif typedef enum FT_Encoding_{FT_ENC_TAG(FT_ENCODING_NONE,0,0,0,0),FT_ENC_TAG(FT_ENCODING_MS_SYMBOL,'s','y','m','b'),FT_ENC_TAG(FT_ENCODING_UNICODE,'u','n','i','c'),FT_ENC_TAG(FT_ENCODING_SJIS,'s','j','i','s'),FT_ENC_TAG(FT_ENCODING_PRC,'g','b',' ',' '),FT_ENC_TAG(FT_ENCODING_BIG5,'b','i','g','5')")]
		Big5 = 1651074869,
		[NativeName(NativeNameType.EnumItem, "FT_ENCODING_WANSUNG")]
		[NativeName(NativeNameType.Value, "((FT_STATIC_BYTE_CAST(FT_UInt32,a)<<24)|(FT_STATIC_BYTE_CAST(FT_UInt32,b)<<16)|(FT_STATIC_BYTE_CAST(FT_UInt32,c)<<8)|FT_STATIC_BYTE_CAST(FT_UInt32,d))#endif typedef enum FT_Encoding_{FT_ENC_TAG(FT_ENCODING_NONE,0,0,0,0),FT_ENC_TAG(FT_ENCODING_MS_SYMBOL,'s','y','m','b'),FT_ENC_TAG(FT_ENCODING_UNICODE,'u','n','i','c'),FT_ENC_TAG(FT_ENCODING_SJIS,'s','j','i','s'),FT_ENC_TAG(FT_ENCODING_PRC,'g','b',' ',' '),FT_ENC_TAG(FT_ENCODING_BIG5,'b','i','g','5'),FT_ENC_TAG(FT_ENCODING_WANSUNG,'w','a','n','s')")]
		Wansung = 2002873971,
		[NativeName(NativeNameType.EnumItem, "FT_ENCODING_JOHAB")]
		[NativeName(NativeNameType.Value, "((FT_STATIC_BYTE_CAST(FT_UInt32,a)<<24)|(FT_STATIC_BYTE_CAST(FT_UInt32,b)<<16)|(FT_STATIC_BYTE_CAST(FT_UInt32,c)<<8)|FT_STATIC_BYTE_CAST(FT_UInt32,d))#endif typedef enum FT_Encoding_{FT_ENC_TAG(FT_ENCODING_NONE,0,0,0,0),FT_ENC_TAG(FT_ENCODING_MS_SYMBOL,'s','y','m','b'),FT_ENC_TAG(FT_ENCODING_UNICODE,'u','n','i','c'),FT_ENC_TAG(FT_ENCODING_SJIS,'s','j','i','s'),FT_ENC_TAG(FT_ENCODING_PRC,'g','b',' ',' '),FT_ENC_TAG(FT_ENCODING_BIG5,'b','i','g','5'),FT_ENC_TAG(FT_ENCODING_WANSUNG,'w','a','n','s'),FT_ENC_TAG(FT_ENCODING_JOHAB,'j','o','h','a')")]
		Johab = 1785686113,
		/// <summary>		/// for backward compatibility <br/>		/// </summary>		[NativeName(NativeNameType.EnumItem, "FT_ENCODING_GB2312")]
		[NativeName(NativeNameType.Value, "FT_ENCODING_PRC")]
		Gb2312 = Prc,

		/// <summary>		/// for backward compatibility <br/>		/// </summary>		[NativeName(NativeNameType.EnumItem, "FT_ENCODING_MS_SJIS")]
		[NativeName(NativeNameType.Value, "FT_ENCODING_SJIS")]
		MsSjis = Sjis,

		/// <summary>		/// for backward compatibility <br/>		/// </summary>		[NativeName(NativeNameType.EnumItem, "FT_ENCODING_MS_GB2312")]
		[NativeName(NativeNameType.Value, "FT_ENCODING_PRC")]
		MsGb2312 = Prc,

		/// <summary>		/// for backward compatibility <br/>		/// </summary>		[NativeName(NativeNameType.EnumItem, "FT_ENCODING_MS_BIG5")]
		[NativeName(NativeNameType.Value, "FT_ENCODING_BIG5")]
		MsBig5 = Big5,

		/// <summary>		/// for backward compatibility <br/>		/// </summary>		[NativeName(NativeNameType.EnumItem, "FT_ENCODING_MS_WANSUNG")]
		[NativeName(NativeNameType.Value, "FT_ENCODING_WANSUNG")]
		MsWansung = Wansung,

		/// <summary>		/// for backward compatibility <br/>		/// </summary>		[NativeName(NativeNameType.EnumItem, "FT_ENCODING_MS_JOHAB")]
		[NativeName(NativeNameType.Value, "FT_ENCODING_JOHAB")]
		MsJohab = Johab,

		/// <summary>		/// for backward compatibility <br/>		/// </summary>		[NativeName(NativeNameType.EnumItem, "FT_ENCODING_ADOBE_STANDARD")]
		[NativeName(NativeNameType.Value, "((FT_STATIC_BYTE_CAST(FT_UInt32,a)<<24)|(FT_STATIC_BYTE_CAST(FT_UInt32,b)<<16)|(FT_STATIC_BYTE_CAST(FT_UInt32,c)<<8)|FT_STATIC_BYTE_CAST(FT_UInt32,d))#endif typedef enum FT_Encoding_{FT_ENC_TAG(FT_ENCODING_NONE,0,0,0,0),FT_ENC_TAG(FT_ENCODING_MS_SYMBOL,'s','y','m','b'),FT_ENC_TAG(FT_ENCODING_UNICODE,'u','n','i','c'),FT_ENC_TAG(FT_ENCODING_SJIS,'s','j','i','s'),FT_ENC_TAG(FT_ENCODING_PRC,'g','b',' ',' '),FT_ENC_TAG(FT_ENCODING_BIG5,'b','i','g','5'),FT_ENC_TAG(FT_ENCODING_WANSUNG,'w','a','n','s'),FT_ENC_TAG(FT_ENCODING_JOHAB,'j','o','h','a'),FT_ENCODING_GB2312=FT_ENCODING_PRC,FT_ENCODING_MS_SJIS=FT_ENCODING_SJIS,FT_ENCODING_MS_GB2312=FT_ENCODING_PRC,FT_ENCODING_MS_BIG5=FT_ENCODING_BIG5,FT_ENCODING_MS_WANSUNG=FT_ENCODING_WANSUNG,FT_ENCODING_MS_JOHAB=FT_ENCODING_JOHAB,FT_ENC_TAG(FT_ENCODING_ADOBE_STANDARD,'A','D','O','B')")]
		AdobeStandard = 1094995778,

		/// <summary>		/// for backward compatibility <br/>		/// </summary>		[NativeName(NativeNameType.EnumItem, "FT_ENCODING_ADOBE_EXPERT")]
		[NativeName(NativeNameType.Value, "((FT_STATIC_BYTE_CAST(FT_UInt32,a)<<24)|(FT_STATIC_BYTE_CAST(FT_UInt32,b)<<16)|(FT_STATIC_BYTE_CAST(FT_UInt32,c)<<8)|FT_STATIC_BYTE_CAST(FT_UInt32,d))#endif typedef enum FT_Encoding_{FT_ENC_TAG(FT_ENCODING_NONE,0,0,0,0),FT_ENC_TAG(FT_ENCODING_MS_SYMBOL,'s','y','m','b'),FT_ENC_TAG(FT_ENCODING_UNICODE,'u','n','i','c'),FT_ENC_TAG(FT_ENCODING_SJIS,'s','j','i','s'),FT_ENC_TAG(FT_ENCODING_PRC,'g','b',' ',' '),FT_ENC_TAG(FT_ENCODING_BIG5,'b','i','g','5'),FT_ENC_TAG(FT_ENCODING_WANSUNG,'w','a','n','s'),FT_ENC_TAG(FT_ENCODING_JOHAB,'j','o','h','a'),FT_ENCODING_GB2312=FT_ENCODING_PRC,FT_ENCODING_MS_SJIS=FT_ENCODING_SJIS,FT_ENCODING_MS_GB2312=FT_ENCODING_PRC,FT_ENCODING_MS_BIG5=FT_ENCODING_BIG5,FT_ENCODING_MS_WANSUNG=FT_ENCODING_WANSUNG,FT_ENCODING_MS_JOHAB=FT_ENCODING_JOHAB,FT_ENC_TAG(FT_ENCODING_ADOBE_STANDARD,'A','D','O','B'),FT_ENC_TAG(FT_ENCODING_ADOBE_EXPERT,'A','D','B','E')")]
		AdobeExpert = 1094992453,

		/// <summary>		/// for backward compatibility <br/>		/// </summary>		[NativeName(NativeNameType.EnumItem, "FT_ENCODING_ADOBE_CUSTOM")]
		[NativeName(NativeNameType.Value, "((FT_STATIC_BYTE_CAST(FT_UInt32,a)<<24)|(FT_STATIC_BYTE_CAST(FT_UInt32,b)<<16)|(FT_STATIC_BYTE_CAST(FT_UInt32,c)<<8)|FT_STATIC_BYTE_CAST(FT_UInt32,d))#endif typedef enum FT_Encoding_{FT_ENC_TAG(FT_ENCODING_NONE,0,0,0,0),FT_ENC_TAG(FT_ENCODING_MS_SYMBOL,'s','y','m','b'),FT_ENC_TAG(FT_ENCODING_UNICODE,'u','n','i','c'),FT_ENC_TAG(FT_ENCODING_SJIS,'s','j','i','s'),FT_ENC_TAG(FT_ENCODING_PRC,'g','b',' ',' '),FT_ENC_TAG(FT_ENCODING_BIG5,'b','i','g','5'),FT_ENC_TAG(FT_ENCODING_WANSUNG,'w','a','n','s'),FT_ENC_TAG(FT_ENCODING_JOHAB,'j','o','h','a'),FT_ENCODING_GB2312=FT_ENCODING_PRC,FT_ENCODING_MS_SJIS=FT_ENCODING_SJIS,FT_ENCODING_MS_GB2312=FT_ENCODING_PRC,FT_ENCODING_MS_BIG5=FT_ENCODING_BIG5,FT_ENCODING_MS_WANSUNG=FT_ENCODING_WANSUNG,FT_ENCODING_MS_JOHAB=FT_ENCODING_JOHAB,FT_ENC_TAG(FT_ENCODING_ADOBE_STANDARD,'A','D','O','B'),FT_ENC_TAG(FT_ENCODING_ADOBE_EXPERT,'A','D','B','E'),FT_ENC_TAG(FT_ENCODING_ADOBE_CUSTOM,'A','D','B','C')")]
		AdobeCustom = 1094992451,

		/// <summary>		/// for backward compatibility <br/>		/// </summary>		[NativeName(NativeNameType.EnumItem, "FT_ENCODING_ADOBE_LATIN_1")]
		[NativeName(NativeNameType.Value, "((FT_STATIC_BYTE_CAST(FT_UInt32,a)<<24)|(FT_STATIC_BYTE_CAST(FT_UInt32,b)<<16)|(FT_STATIC_BYTE_CAST(FT_UInt32,c)<<8)|FT_STATIC_BYTE_CAST(FT_UInt32,d))#endif typedef enum FT_Encoding_{FT_ENC_TAG(FT_ENCODING_NONE,0,0,0,0),FT_ENC_TAG(FT_ENCODING_MS_SYMBOL,'s','y','m','b'),FT_ENC_TAG(FT_ENCODING_UNICODE,'u','n','i','c'),FT_ENC_TAG(FT_ENCODING_SJIS,'s','j','i','s'),FT_ENC_TAG(FT_ENCODING_PRC,'g','b',' ',' '),FT_ENC_TAG(FT_ENCODING_BIG5,'b','i','g','5'),FT_ENC_TAG(FT_ENCODING_WANSUNG,'w','a','n','s'),FT_ENC_TAG(FT_ENCODING_JOHAB,'j','o','h','a'),FT_ENCODING_GB2312=FT_ENCODING_PRC,FT_ENCODING_MS_SJIS=FT_ENCODING_SJIS,FT_ENCODING_MS_GB2312=FT_ENCODING_PRC,FT_ENCODING_MS_BIG5=FT_ENCODING_BIG5,FT_ENCODING_MS_WANSUNG=FT_ENCODING_WANSUNG,FT_ENCODING_MS_JOHAB=FT_ENCODING_JOHAB,FT_ENC_TAG(FT_ENCODING_ADOBE_STANDARD,'A','D','O','B'),FT_ENC_TAG(FT_ENCODING_ADOBE_EXPERT,'A','D','B','E'),FT_ENC_TAG(FT_ENCODING_ADOBE_CUSTOM,'A','D','B','C'),FT_ENC_TAG(FT_ENCODING_ADOBE_LATIN_1,'l','a','t','1')")]
		AdobeLatin1 = 1818326065,

		/// <summary>		/// for backward compatibility <br/>		/// </summary>		[NativeName(NativeNameType.EnumItem, "FT_ENCODING_OLD_LATIN_2")]
		[NativeName(NativeNameType.Value, "((FT_STATIC_BYTE_CAST(FT_UInt32,a)<<24)|(FT_STATIC_BYTE_CAST(FT_UInt32,b)<<16)|(FT_STATIC_BYTE_CAST(FT_UInt32,c)<<8)|FT_STATIC_BYTE_CAST(FT_UInt32,d))#endif typedef enum FT_Encoding_{FT_ENC_TAG(FT_ENCODING_NONE,0,0,0,0),FT_ENC_TAG(FT_ENCODING_MS_SYMBOL,'s','y','m','b'),FT_ENC_TAG(FT_ENCODING_UNICODE,'u','n','i','c'),FT_ENC_TAG(FT_ENCODING_SJIS,'s','j','i','s'),FT_ENC_TAG(FT_ENCODING_PRC,'g','b',' ',' '),FT_ENC_TAG(FT_ENCODING_BIG5,'b','i','g','5'),FT_ENC_TAG(FT_ENCODING_WANSUNG,'w','a','n','s'),FT_ENC_TAG(FT_ENCODING_JOHAB,'j','o','h','a'),FT_ENCODING_GB2312=FT_ENCODING_PRC,FT_ENCODING_MS_SJIS=FT_ENCODING_SJIS,FT_ENCODING_MS_GB2312=FT_ENCODING_PRC,FT_ENCODING_MS_BIG5=FT_ENCODING_BIG5,FT_ENCODING_MS_WANSUNG=FT_ENCODING_WANSUNG,FT_ENCODING_MS_JOHAB=FT_ENCODING_JOHAB,FT_ENC_TAG(FT_ENCODING_ADOBE_STANDARD,'A','D','O','B'),FT_ENC_TAG(FT_ENCODING_ADOBE_EXPERT,'A','D','B','E'),FT_ENC_TAG(FT_ENCODING_ADOBE_CUSTOM,'A','D','B','C'),FT_ENC_TAG(FT_ENCODING_ADOBE_LATIN_1,'l','a','t','1'),FT_ENC_TAG(FT_ENCODING_OLD_LATIN_2,'l','a','t','2')")]
		OldLatin2 = 1818326066,

		/// <summary>		/// for backward compatibility <br/>		/// </summary>		[NativeName(NativeNameType.EnumItem, "FT_ENCODING_APPLE_ROMAN")]
		[NativeName(NativeNameType.Value, "((FT_STATIC_BYTE_CAST(FT_UInt32,a)<<24)|(FT_STATIC_BYTE_CAST(FT_UInt32,b)<<16)|(FT_STATIC_BYTE_CAST(FT_UInt32,c)<<8)|FT_STATIC_BYTE_CAST(FT_UInt32,d))#endif typedef enum FT_Encoding_{FT_ENC_TAG(FT_ENCODING_NONE,0,0,0,0),FT_ENC_TAG(FT_ENCODING_MS_SYMBOL,'s','y','m','b'),FT_ENC_TAG(FT_ENCODING_UNICODE,'u','n','i','c'),FT_ENC_TAG(FT_ENCODING_SJIS,'s','j','i','s'),FT_ENC_TAG(FT_ENCODING_PRC,'g','b',' ',' '),FT_ENC_TAG(FT_ENCODING_BIG5,'b','i','g','5'),FT_ENC_TAG(FT_ENCODING_WANSUNG,'w','a','n','s'),FT_ENC_TAG(FT_ENCODING_JOHAB,'j','o','h','a'),FT_ENCODING_GB2312=FT_ENCODING_PRC,FT_ENCODING_MS_SJIS=FT_ENCODING_SJIS,FT_ENCODING_MS_GB2312=FT_ENCODING_PRC,FT_ENCODING_MS_BIG5=FT_ENCODING_BIG5,FT_ENCODING_MS_WANSUNG=FT_ENCODING_WANSUNG,FT_ENCODING_MS_JOHAB=FT_ENCODING_JOHAB,FT_ENC_TAG(FT_ENCODING_ADOBE_STANDARD,'A','D','O','B'),FT_ENC_TAG(FT_ENCODING_ADOBE_EXPERT,'A','D','B','E'),FT_ENC_TAG(FT_ENCODING_ADOBE_CUSTOM,'A','D','B','C'),FT_ENC_TAG(FT_ENCODING_ADOBE_LATIN_1,'l','a','t','1'),FT_ENC_TAG(FT_ENCODING_OLD_LATIN_2,'l','a','t','2'),FT_ENC_TAG(FT_ENCODING_APPLE_ROMAN,'a','r','m','n')")]
		AppleRoman = 1634889070,

	}

	/// <summary>	/// ************************************************************************<br/>	/// <br/>	/// FT_Size_Request_Type<br/>	/// <br/>	/// :<br/>	/// An enumeration type that lists the supported size request types, i.e.,<br/>	/// what input size (in font units) maps to the requested output size (in<br/>	/// pixels, as computed from the arguments of <br/>	/// _Size_Request).<br/>	/// <br/>	/// :<br/>	/// FT_SIZE_REQUEST_TYPE_NOMINAL ::<br/>	/// The nominal size.  The `units_per_EM` field of <br/>	/// _FaceRec is used<br/>	/// to determine both scaling values.<br/>	/// This is the standard scaling found in most applications.  In<br/>	/// particular, use this size request type for TrueType fonts if they<br/>	/// provide optical scaling or something similar.  Note, however, that<br/>	/// `units_per_EM` is a rather abstract value which bears no relation to<br/>	/// the actual size of the glyphs in a font.<br/>	/// FT_SIZE_REQUEST_TYPE_REAL_DIM ::<br/>	/// The real dimension.  The sum of the `ascender` and (minus of) the<br/>	/// `descender` fields of <br/>	/// _FaceRec is used to determine both scaling<br/>	/// values.<br/>	/// FT_SIZE_REQUEST_TYPE_BBOX ::<br/>	/// The font bounding box.  The width and height of the `bbox` field of<br/>	/// <br/>	/// _FaceRec are used to determine the horizontal and vertical<br/>	/// scaling value, respectively.<br/>	/// FT_SIZE_REQUEST_TYPE_CELL ::<br/>	/// The `max_advance_width` field of <br/>	/// _FaceRec is used to determine<br/>	/// the horizontal scaling value; the vertical scaling value is<br/>	/// determined the same way as <br/>	/// _SIZE_REQUEST_TYPE_REAL_DIM does.<br/>	/// Finally, both scaling values are set to the smaller one.  This type<br/>	/// is useful if you want to specify the font size for, say, a window of<br/>	/// a given dimension and 80x24 cells.<br/>	/// FT_SIZE_REQUEST_TYPE_SCALES ::<br/>	/// Specify the scaling values directly.<br/>	/// <br/>	/// See the note section of <br/>	/// _Size_Metrics if you wonder how size<br/>	/// requesting relates to scaling values.<br/>	/// </summary>	[NativeName(NativeNameType.Enum, "FT_Size_Request_Type_")]
	public enum FTSizeRequestType
	{
		[NativeName(NativeNameType.EnumItem, "FT_SIZE_REQUEST_TYPE_NOMINAL")]
		[NativeName(NativeNameType.Value, "0")]
		Nominal = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_SIZE_REQUEST_TYPE_REAL_DIM")]
		[NativeName(NativeNameType.Value, "1")]
		RealDim = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "FT_SIZE_REQUEST_TYPE_BBOX")]
		[NativeName(NativeNameType.Value, "2")]
		Bbox = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "FT_SIZE_REQUEST_TYPE_CELL")]
		[NativeName(NativeNameType.Value, "3")]
		Cell = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "FT_SIZE_REQUEST_TYPE_SCALES")]
		[NativeName(NativeNameType.Value, "4")]
		Scales = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "FT_SIZE_REQUEST_TYPE_MAX")]
		[NativeName(NativeNameType.Value, "5")]
		Max = unchecked(5),
	}

	/// <summary>	/// ************************************************************************<br/>	/// <br/>	/// FT_Render_Mode<br/>	/// <br/>	/// :<br/>	/// Render modes supported by FreeType~2.  Each mode corresponds to a<br/>	/// specific type of scanline conversion performed on the outline.<br/>	/// For bitmap fonts and embedded bitmaps the `bitmap->pixel_mode` field<br/>	/// in the <br/>	/// _GlyphSlotRec structure gives the format of the returned<br/>	/// bitmap.<br/>	/// All modes except <br/>	/// _RENDER_MODE_MONO use 256 levels of opacity,<br/>	/// indicating pixel coverage.  Use linear alpha blending and gamma<br/>	/// correction to correctly render non-monochrome glyph bitmaps onto a<br/>	/// surface; see <br/>	/// _Render_Glyph.<br/>	/// The <br/>	/// _RENDER_MODE_SDF is a special render mode that uses up to 256<br/>	/// distance values, indicating the signed distance from the grid position<br/>	/// to the nearest outline.<br/>	/// <br/>	/// :<br/>	/// FT_RENDER_MODE_NORMAL ::<br/>	/// Default render mode; it corresponds to 8-bit anti-aliased bitmaps.<br/>	/// FT_RENDER_MODE_LIGHT ::<br/>	/// This is equivalent to <br/>	/// _RENDER_MODE_NORMAL.  It is only defined as<br/>	/// a separate value because render modes are also used indirectly to<br/>	/// define hinting algorithm selectors.  See <br/>	/// _LOAD_TARGET_XXX for<br/>	/// details.<br/>	/// FT_RENDER_MODE_MONO ::<br/>	/// This mode corresponds to 1-bit bitmaps (with 2~levels of opacity).<br/>	/// FT_RENDER_MODE_LCD ::<br/>	/// This mode corresponds to horizontal RGB and BGR subpixel displays<br/>	/// like LCD screens.  It produces 8-bit bitmaps that are 3~times the<br/>	/// width of the original glyph outline in pixels, and which use the<br/>	/// <br/>	/// _PIXEL_MODE_LCD mode.<br/>	/// FT_RENDER_MODE_LCD_V ::<br/>	/// This mode corresponds to vertical RGB and BGR subpixel displays<br/>	/// (like PDA screens, rotated LCD displays, etc.).  It produces 8-bit<br/>	/// bitmaps that are 3~times the height of the original glyph outline in<br/>	/// pixels and use the <br/>	/// _PIXEL_MODE_LCD_V mode.<br/>	/// FT_RENDER_MODE_SDF ::<br/>	/// This mode corresponds to 8-bit, single-channel signed distance field<br/>	/// (SDF) bitmaps.  Each pixel in the SDF grid is the value from the<br/>	/// pixel's position to the nearest glyph's outline.  The distances are<br/>	/// calculated from the center of the pixel and are positive if they are<br/>	/// filled by the outline (i.e., inside the outline) and negative<br/>	/// otherwise.  Check the note below on how to convert the output values<br/>	/// to usable data.<br/>	/// <br/>	/// For <br/>	/// _RENDER_MODE_SDF the output bitmap buffer contains normalized<br/>	/// distances that are packed into unsigned 8-bit values.  To get pixel<br/>	/// values in floating point representation use the following pseudo-C<br/>	/// code for the conversion.<br/>	/// ```<br/>	/// // Load glyph and render using FT_RENDER_MODE_SDF,<br/>	/// // then use the output buffer as follows.<br/>	/// ...<br/>	/// FT_Byte  buffer = glyph->bitmap->buffer;<br/>	/// for pixel in buffer<br/>	/// {<br/>	/// // `sd` is the signed distance and `spread` is the current spread;<br/>	/// // the default spread is 2 and can be changed.<br/>	/// float  sd = (float)pixel - 128.0f;<br/>	/// // Convert to pixel values.<br/>	/// sd = ( sd / 128.0f ) * spread;<br/>	/// // Store `sd` in a buffer or use as required.<br/>	/// }<br/>	/// ```<br/>	/// FreeType has two rasterizers for generating SDF, namely:<br/>	/// 1. `sdf` for generating SDF directly from glyph's outline, and<br/>	/// 2. `bsdf` for generating SDF from rasterized bitmaps.<br/>	/// Depending on the glyph type (i.e., outline or bitmap), one of the two<br/>	/// rasterizers is chosen at runtime and used for generating SDFs.  To<br/>	/// force the use of `bsdf` you should render the glyph with any of the<br/>	/// FreeType's other rendering modes (e.g., `FT_RENDER_MODE_NORMAL`) and<br/>	/// then re-render with `FT_RENDER_MODE_SDF`.<br/>	/// There are some issues with stability and possible failures of the SDF<br/>	/// renderers (specifically `sdf`).<br/>	/// 1. The `sdf` rasterizer is sensitive to really small features (e.g.,<br/>	/// sharp turns that are less than 1~pixel) and imperfections in the<br/>	/// glyph's outline, causing artifacts in the final output.<br/>	/// 2. The `sdf` rasterizer has limited support for handling intersecting<br/>	/// contours and *cannot* handle self-intersecting contours whatsoever.<br/>	/// Self-intersection happens when a single connected contour<br/>	/// intersects itself at some point; having these in your font<br/>	/// definitely poses a problem to the rasterizer and cause artifacts,<br/>	/// too.<br/>	/// 3. Generating SDF for really small glyphs may result in undesirable<br/>	/// output; the pixel grid (which stores distance information) becomes<br/>	/// too coarse.<br/>	/// 4. Since the output buffer is normalized, precision at smaller spreads<br/>	/// is greater than precision at larger spread values because the<br/>	/// output range of [0..255] gets mapped to a smaller SDF range.  A<br/>	/// spread of~2 should be sufficient in most cases.<br/>	/// Points (1) and (2) can be avoided by using the `bsdf` rasterizer,<br/>	/// which is more stable than the `sdf` rasterizer in general.<br/>	/// <br/>	/// </summary>	[NativeName(NativeNameType.Enum, "FT_Render_Mode_")]
	public enum FTRenderMode
	{
		[NativeName(NativeNameType.EnumItem, "FT_RENDER_MODE_NORMAL")]
		[NativeName(NativeNameType.Value, "0")]
		Normal = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_RENDER_MODE_LIGHT")]
		[NativeName(NativeNameType.Value, "1")]
		Light = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "FT_RENDER_MODE_MONO")]
		[NativeName(NativeNameType.Value, "2")]
		Mono = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "FT_RENDER_MODE_LCD")]
		[NativeName(NativeNameType.Value, "3")]
		Lcd = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "FT_RENDER_MODE_LCD_V")]
		[NativeName(NativeNameType.Value, "4")]
		Lcdv = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "FT_RENDER_MODE_SDF")]
		[NativeName(NativeNameType.Value, "5")]
		Sdf = unchecked(5),
		[NativeName(NativeNameType.EnumItem, "FT_RENDER_MODE_MAX")]
		[NativeName(NativeNameType.Value, "6")]
		Max = unchecked(6),
	}

	/// <summary>	/// ************************************************************************<br/>	/// <br/>	/// FT_Kerning_Mode<br/>	/// <br/>	/// :<br/>	/// An enumeration to specify the format of kerning values returned by<br/>	/// <br/>	/// _Get_Kerning.<br/>	/// <br/>	/// :<br/>	/// FT_KERNING_DEFAULT ::<br/>	/// Return grid-fitted kerning distances in 26.6 fractional pixels.<br/>	/// FT_KERNING_UNFITTED ::<br/>	/// Return un-grid-fitted kerning distances in 26.6 fractional pixels.<br/>	/// FT_KERNING_UNSCALED ::<br/>	/// Return the kerning vector in original font units.<br/>	/// <br/>	/// Both `FT_KERNING_DEFAULT` and `FT_KERNING_UNFITTED` use the current<br/>	/// horizontal scaling factor (as set e.g. with <br/>	/// _Set_Char_Size) to<br/>	/// convert font units to pixels.<br/>	/// </summary>	[NativeName(NativeNameType.Enum, "FT_Kerning_Mode_")]
	public enum FTKerningMode
	{
		[NativeName(NativeNameType.EnumItem, "FT_KERNING_DEFAULT")]
		[NativeName(NativeNameType.Value, "0")]
		Default = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_KERNING_UNFITTED")]
		[NativeName(NativeNameType.Value, "1")]
		Unfitted = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "FT_KERNING_UNSCALED")]
		[NativeName(NativeNameType.Value, "2")]
		Unscaled = unchecked(2),
	}

}
