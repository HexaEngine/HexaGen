// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.FreeType
{
	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// FT_MemoryRec<br/>
	/// <br/>
	/// :<br/>
	/// A structure used to describe a given memory manager to FreeType~2.<br/>
	/// <br/>
	/// :<br/>
	/// user ::<br/>
	/// A generic typeless pointer for user data.<br/>
	/// alloc ::<br/>
	/// A pointer type to an allocation function.<br/>
	/// free ::<br/>
	/// A pointer type to an memory freeing function.<br/>
	/// realloc ::<br/>
	/// A pointer type to a reallocation function.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "FT_MemoryRec_")]
	public partial struct FTMemoryRec
	{


	}

	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// FT_SfntName<br/>
	/// <br/>
	/// :<br/>
	/// A structure used to model an SFNT 'name' table entry.<br/>
	/// <br/>
	/// :<br/>
	/// platform_id ::<br/>
	/// The platform ID for `string`.  See <br/>
	/// _PLATFORM_XXX for possible<br/>
	/// values.<br/>
	/// encoding_id ::<br/>
	/// The encoding ID for `string`.  See <br/>
	/// _APPLE_ID_XXX, <br/>
	/// _MAC_ID_XXX,<br/>
	/// <br/>
	/// _ISO_ID_XXX, <br/>
	/// _MS_ID_XXX, and <br/>
	/// _ADOBE_ID_XXX for possible<br/>
	/// values.<br/>
	/// language_id ::<br/>
	/// The language ID for `string`.  See <br/>
	/// _MAC_LANGID_XXX and<br/>
	/// <br/>
	/// _MS_LANGID_XXX for possible values.<br/>
	/// Registered OpenType values for `language_id` are always smaller than<br/>
	/// 0x8000; values equal or larger than 0x8000 usually indicate a<br/>
	/// language tag string (introduced in OpenType version 1.6).  Use<br/>
	/// function <br/>
	/// _Get_Sfnt_LangTag with `language_id` as its argument to<br/>
	/// retrieve the associated language tag.<br/>
	/// name_id ::<br/>
	/// An identifier for `string`.  See <br/>
	/// _NAME_ID_XXX for possible<br/>
	/// values.<br/>
	/// string ::<br/>
	/// The 'name' string.  Note that its format differs depending on the<br/>
	/// (platform,encoding) pair, being either a string of bytes (without a<br/>
	/// terminating `NULL` byte) or containing UTF-16BE entities.<br/>
	/// string_len ::<br/>
	/// The length of `string` in bytes.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "FT_SfntName_")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct FTSfntName
	{
		[NativeName(NativeNameType.Field, "platform_id")]
		[NativeName(NativeNameType.Type, "FT_UShort")]
		public ushort PlatformId;
		[NativeName(NativeNameType.Field, "encoding_id")]
		[NativeName(NativeNameType.Type, "FT_UShort")]
		public ushort EncodingId;
		[NativeName(NativeNameType.Field, "language_id")]
		[NativeName(NativeNameType.Type, "FT_UShort")]
		public ushort LanguageId;
		[NativeName(NativeNameType.Field, "name_id")]
		[NativeName(NativeNameType.Type, "FT_UShort")]
		public ushort NameId;
		/// <summary>
		/// this string is *not* null-terminated! <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "string")]
		[NativeName(NativeNameType.Type, "FT_Byte*")]
		public unsafe byte* String;

		/// <summary>
		/// in bytes                              <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "string_len")]
		[NativeName(NativeNameType.Type, "FT_UInt")]
		public uint StringLen;


		public unsafe FTSfntName(ushort platformId = default, ushort encodingId = default, ushort languageId = default, ushort nameId = default, byte* str = default, uint stringLen = default)
		{
			PlatformId = platformId;
			EncodingId = encodingId;
			LanguageId = languageId;
			NameId = nameId;
			String = str;
			StringLen = stringLen;
		}


	}

	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// FT_SfntLangTag<br/>
	/// <br/>
	/// :<br/>
	/// A structure to model a language tag entry from an SFNT 'name' table.<br/>
	/// <br/>
	/// :<br/>
	/// string ::<br/>
	/// The language tag string, encoded in UTF-16BE (without trailing<br/>
	/// `NULL` bytes).<br/>
	/// string_len ::<br/>
	/// The length of `string` in **bytes**.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "FT_SfntLangTag_")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct FTSfntLangTag
	{
		/// <summary>
		/// this string is *not* null-terminated! <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "string")]
		[NativeName(NativeNameType.Type, "FT_Byte*")]
		public unsafe byte* String;

		/// <summary>
		/// in bytes                              <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "string_len")]
		[NativeName(NativeNameType.Type, "FT_UInt")]
		public uint StringLen;


		public unsafe FTSfntLangTag(byte* str = default, uint stringLen = default)
		{
			String = str;
			StringLen = stringLen;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "FT_StrokerRec_")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct FTStrokerRec
	{


	}

}
