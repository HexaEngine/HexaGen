// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.FreeType
{
	public unsafe partial class FreeType
	{

		/// <summary>
		/// ************************************************************************<br/>
		/// <br/>
		/// FT_Glyph_Stroke<br/>
		/// <br/>
		/// :<br/>
		/// Stroke a given outline glyph object with a given stroker.<br/>
		/// <br/>
		/// :<br/>
		/// pglyph ::<br/>
		/// Source glyph handle on input, new glyph handle on output.<br/>
		/// <br/>
		/// :<br/>
		/// stroker ::<br/>
		/// A stroker handle.<br/>
		/// destroy ::<br/>
		/// A Boolean.  If~1, the source glyph object is destroyed on success.<br/>
		/// <br/>
		/// <br/>
		/// Adding stroke may yield a significantly wider and taller glyph<br/>
		/// depending on how large of a radius was used to stroke the glyph.  You<br/>
		/// may need to manually adjust horizontal and vertical advance amounts to<br/>
		/// account for this added size.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "FT_Glyph_Stroke")]
		[return: NativeName(NativeNameType.Type, "FT_Error")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "FT_Glyph_Stroke")]
		internal static extern int FTGlyphStrokeNative([NativeName(NativeNameType.Param, "pglyph")] [NativeName(NativeNameType.Type, "FT_Glyph*")] FTGlyph* pglyph, [NativeName(NativeNameType.Param, "stroker")] [NativeName(NativeNameType.Type, "FT_Stroker")] FTStroker stroker, [NativeName(NativeNameType.Param, "destroy")] [NativeName(NativeNameType.Type, "FT_Bool")] byte destroy);

		/// <summary>/// ************************************************************************<br/>/// <br/>/// FT_Glyph_Stroke<br/>/// <br/>/// :<br/>/// Stroke a given outline glyph object with a given stroker.<br/>/// <br/>/// :<br/>/// pglyph ::<br/>/// Source glyph handle on input, new glyph handle on output.<br/>/// <br/>/// :<br/>/// stroker ::<br/>/// A stroker handle.<br/>/// destroy ::<br/>/// A Boolean.  If~1, the source glyph object is destroyed on success.<br/>/// <br/>/// <br/>/// Adding stroke may yield a significantly wider and taller glyph<br/>/// depending on how large of a radius was used to stroke the glyph.  You<br/>/// may need to manually adjust horizontal and vertical advance amounts to<br/>/// account for this added size.<br/>/// </summary>		[NativeName(NativeNameType.Func, "FT_Glyph_Stroke")]
		[return: NativeName(NativeNameType.Type, "FT_Error")]
		public static int FTGlyphStroke([NativeName(NativeNameType.Param, "pglyph")] [NativeName(NativeNameType.Type, "FT_Glyph*")] FTGlyph* pglyph, [NativeName(NativeNameType.Param, "stroker")] [NativeName(NativeNameType.Type, "FT_Stroker")] FTStroker stroker, [NativeName(NativeNameType.Param, "destroy")] [NativeName(NativeNameType.Type, "FT_Bool")] byte destroy)
		{
			int ret = FTGlyphStrokeNative(pglyph, stroker, destroy);
			return ret;
		}

		/// <summary>
		/// ************************************************************************<br/>
		/// <br/>
		/// FT_Glyph_StrokeBorder<br/>
		/// <br/>
		/// :<br/>
		/// Stroke a given outline glyph object with a given stroker, but only<br/>
		/// return either its inside or outside border.<br/>
		/// <br/>
		/// :<br/>
		/// pglyph ::<br/>
		/// Source glyph handle on input, new glyph handle on output.<br/>
		/// <br/>
		/// :<br/>
		/// stroker ::<br/>
		/// A stroker handle.<br/>
		/// inside ::<br/>
		/// A Boolean.  If~1, return the inside border, otherwise the outside<br/>
		/// border.<br/>
		/// destroy ::<br/>
		/// A Boolean.  If~1, the source glyph object is destroyed on success.<br/>
		/// <br/>
		/// <br/>
		/// Adding stroke may yield a significantly wider and taller glyph<br/>
		/// depending on how large of a radius was used to stroke the glyph.  You<br/>
		/// may need to manually adjust horizontal and vertical advance amounts to<br/>
		/// account for this added size.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "FT_Glyph_StrokeBorder")]
		[return: NativeName(NativeNameType.Type, "FT_Error")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "FT_Glyph_StrokeBorder")]
		internal static extern int FTGlyphStrokeBorderNative([NativeName(NativeNameType.Param, "pglyph")] [NativeName(NativeNameType.Type, "FT_Glyph*")] FTGlyph* pglyph, [NativeName(NativeNameType.Param, "stroker")] [NativeName(NativeNameType.Type, "FT_Stroker")] FTStroker stroker, [NativeName(NativeNameType.Param, "inside")] [NativeName(NativeNameType.Type, "FT_Bool")] byte inside, [NativeName(NativeNameType.Param, "destroy")] [NativeName(NativeNameType.Type, "FT_Bool")] byte destroy);

		/// <summary>/// ************************************************************************<br/>/// <br/>/// FT_Glyph_StrokeBorder<br/>/// <br/>/// :<br/>/// Stroke a given outline glyph object with a given stroker, but only<br/>/// return either its inside or outside border.<br/>/// <br/>/// :<br/>/// pglyph ::<br/>/// Source glyph handle on input, new glyph handle on output.<br/>/// <br/>/// :<br/>/// stroker ::<br/>/// A stroker handle.<br/>/// inside ::<br/>/// A Boolean.  If~1, return the inside border, otherwise the outside<br/>/// border.<br/>/// destroy ::<br/>/// A Boolean.  If~1, the source glyph object is destroyed on success.<br/>/// <br/>/// <br/>/// Adding stroke may yield a significantly wider and taller glyph<br/>/// depending on how large of a radius was used to stroke the glyph.  You<br/>/// may need to manually adjust horizontal and vertical advance amounts to<br/>/// account for this added size.<br/>/// </summary>		[NativeName(NativeNameType.Func, "FT_Glyph_StrokeBorder")]
		[return: NativeName(NativeNameType.Type, "FT_Error")]
		public static int FTGlyphStrokeBorder([NativeName(NativeNameType.Param, "pglyph")] [NativeName(NativeNameType.Type, "FT_Glyph*")] FTGlyph* pglyph, [NativeName(NativeNameType.Param, "stroker")] [NativeName(NativeNameType.Type, "FT_Stroker")] FTStroker stroker, [NativeName(NativeNameType.Param, "inside")] [NativeName(NativeNameType.Type, "FT_Bool")] byte inside, [NativeName(NativeNameType.Param, "destroy")] [NativeName(NativeNameType.Type, "FT_Bool")] byte destroy)
		{
			int ret = FTGlyphStrokeBorderNative(pglyph, stroker, inside, destroy);
			return ret;
		}

		/// <summary>
		/// Embolden a glyph by a 'reasonable' value (which is highly a matter of <br/>
		/// taste).  This function is actually a convenience function, providing  <br/>
		/// a wrapper for <br/>
		/// _Outline_Embolden and <br/>
		/// _Bitmap_Embolden.           <br/>
		/// <br/>
		/// For emboldened outlines the height, width, and advance metrics are    <br/>
		/// increased by the strength of the emboldening -- this even affects     <br/>
		/// mono-width fonts!                                                     <br/>
		/// <br/>
		/// You can also call <br/>
		/// _Outline_Get_CBox to get precise values.         <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "FT_GlyphSlot_Embolden")]
		[return: NativeName(NativeNameType.Type, "void")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "FT_GlyphSlot_Embolden")]
		internal static extern void FTGlyphSlotEmboldenNative([NativeName(NativeNameType.Param, "slot")] [NativeName(NativeNameType.Type, "FT_GlyphSlot")] FTGlyphSlot slot);

		/// <summary>/// Embolden a glyph by a 'reasonable' value (which is highly a matter of <br/>/// taste).  This function is actually a convenience function, providing  <br/>/// a wrapper for <br/>/// _Outline_Embolden and <br/>/// _Bitmap_Embolden.           <br/>/// <br/>/// For emboldened outlines the height, width, and advance metrics are    <br/>/// increased by the strength of the emboldening -- this even affects     <br/>/// mono-width fonts!                                                     <br/>/// <br/>/// You can also call <br/>/// _Outline_Get_CBox to get precise values.         <br/>/// </summary>		[NativeName(NativeNameType.Func, "FT_GlyphSlot_Embolden")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FTGlyphSlotEmbolden([NativeName(NativeNameType.Param, "slot")] [NativeName(NativeNameType.Type, "FT_GlyphSlot")] FTGlyphSlot slot)
		{
			FTGlyphSlotEmboldenNative(slot);
		}

		/// <summary>
		/// Precisely adjust the glyph weight either horizontally or vertically.  <br/>
		/// The `xdelta` and `ydelta` values are fractions of the face Em size    <br/>
		/// (in fixed-point format).  Considering that a regular face would have  <br/>
		/// stem widths on the order of 0.1 Em, a delta of 0.05 (0x0CCC) should   <br/>
		/// be very noticeable.  To increase or decrease the weight, use positive <br/>
		/// or negative values, respectively.                                     <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "FT_GlyphSlot_AdjustWeight")]
		[return: NativeName(NativeNameType.Type, "void")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "FT_GlyphSlot_AdjustWeight")]
		internal static extern void FTGlyphSlotAdjustWeightNative([NativeName(NativeNameType.Param, "slot")] [NativeName(NativeNameType.Type, "FT_GlyphSlot")] FTGlyphSlot slot, [NativeName(NativeNameType.Param, "xdelta")] [NativeName(NativeNameType.Type, "FT_Fixed")] int xdelta, [NativeName(NativeNameType.Param, "ydelta")] [NativeName(NativeNameType.Type, "FT_Fixed")] int ydelta);

		/// <summary>/// Precisely adjust the glyph weight either horizontally or vertically.  <br/>/// The `xdelta` and `ydelta` values are fractions of the face Em size    <br/>/// (in fixed-point format).  Considering that a regular face would have  <br/>/// stem widths on the order of 0.1 Em, a delta of 0.05 (0x0CCC) should   <br/>/// be very noticeable.  To increase or decrease the weight, use positive <br/>/// or negative values, respectively.                                     <br/>/// </summary>		[NativeName(NativeNameType.Func, "FT_GlyphSlot_AdjustWeight")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FTGlyphSlotAdjustWeight([NativeName(NativeNameType.Param, "slot")] [NativeName(NativeNameType.Type, "FT_GlyphSlot")] FTGlyphSlot slot, [NativeName(NativeNameType.Param, "xdelta")] [NativeName(NativeNameType.Type, "FT_Fixed")] int xdelta, [NativeName(NativeNameType.Param, "ydelta")] [NativeName(NativeNameType.Type, "FT_Fixed")] int ydelta)
		{
			FTGlyphSlotAdjustWeightNative(slot, xdelta, ydelta);
		}

		/// <summary>
		/// Slant an outline glyph to the right by about 12 degrees.              <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "FT_GlyphSlot_Oblique")]
		[return: NativeName(NativeNameType.Type, "void")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "FT_GlyphSlot_Oblique")]
		internal static extern void FTGlyphSlotObliqueNative([NativeName(NativeNameType.Param, "slot")] [NativeName(NativeNameType.Type, "FT_GlyphSlot")] FTGlyphSlot slot);

		/// <summary>/// Slant an outline glyph to the right by about 12 degrees.              <br/>/// </summary>		[NativeName(NativeNameType.Func, "FT_GlyphSlot_Oblique")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FTGlyphSlotOblique([NativeName(NativeNameType.Param, "slot")] [NativeName(NativeNameType.Type, "FT_GlyphSlot")] FTGlyphSlot slot)
		{
			FTGlyphSlotObliqueNative(slot);
		}

		/// <summary>
		/// Slant an outline glyph by a given sine of an angle.  You can apply    <br/>
		/// slant along either x- or y-axis by choosing a corresponding non-zero  <br/>
		/// argument.  If both slants are non-zero, some affine transformation    <br/>
		/// will result.                                                          <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "FT_GlyphSlot_Slant")]
		[return: NativeName(NativeNameType.Type, "void")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "FT_GlyphSlot_Slant")]
		internal static extern void FTGlyphSlotSlantNative([NativeName(NativeNameType.Param, "slot")] [NativeName(NativeNameType.Type, "FT_GlyphSlot")] FTGlyphSlot slot, [NativeName(NativeNameType.Param, "xslant")] [NativeName(NativeNameType.Type, "FT_Fixed")] int xslant, [NativeName(NativeNameType.Param, "yslant")] [NativeName(NativeNameType.Type, "FT_Fixed")] int yslant);

		/// <summary>/// Slant an outline glyph by a given sine of an angle.  You can apply    <br/>/// slant along either x- or y-axis by choosing a corresponding non-zero  <br/>/// argument.  If both slants are non-zero, some affine transformation    <br/>/// will result.                                                          <br/>/// </summary>		[NativeName(NativeNameType.Func, "FT_GlyphSlot_Slant")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FTGlyphSlotSlant([NativeName(NativeNameType.Param, "slot")] [NativeName(NativeNameType.Type, "FT_GlyphSlot")] FTGlyphSlot slot, [NativeName(NativeNameType.Param, "xslant")] [NativeName(NativeNameType.Type, "FT_Fixed")] int xslant, [NativeName(NativeNameType.Param, "yslant")] [NativeName(NativeNameType.Type, "FT_Fixed")] int yslant)
		{
			FTGlyphSlotSlantNative(slot, xslant, yslant);
		}

		/// <summary>
		/// ************************************************************************<br/>
		/// <br/>
		/// FT_Sin<br/>
		/// <br/>
		/// :<br/>
		/// Return the sinus of a given angle in fixed-point format.<br/>
		/// <br/>
		/// :<br/>
		/// angle ::<br/>
		/// The input angle.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "FT_Sin")]
		[return: NativeName(NativeNameType.Type, "FT_Fixed")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "FT_Sin")]
		internal static extern int FTSinNative([NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "FT_Angle")] int angle);

		/// <summary>/// ************************************************************************<br/>/// <br/>/// FT_Sin<br/>/// <br/>/// :<br/>/// Return the sinus of a given angle in fixed-point format.<br/>/// <br/>/// :<br/>/// angle ::<br/>/// The input angle.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "FT_Sin")]
		[return: NativeName(NativeNameType.Type, "FT_Fixed")]
		public static int FTSin([NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "FT_Angle")] int angle)
		{
			int ret = FTSinNative(angle);
			return ret;
		}

		/// <summary>
		/// ************************************************************************<br/>
		/// <br/>
		/// FT_Cos<br/>
		/// <br/>
		/// :<br/>
		/// Return the cosinus of a given angle in fixed-point format.<br/>
		/// <br/>
		/// :<br/>
		/// angle ::<br/>
		/// The input angle.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "FT_Cos")]
		[return: NativeName(NativeNameType.Type, "FT_Fixed")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "FT_Cos")]
		internal static extern int FTCosNative([NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "FT_Angle")] int angle);

		/// <summary>/// ************************************************************************<br/>/// <br/>/// FT_Cos<br/>/// <br/>/// :<br/>/// Return the cosinus of a given angle in fixed-point format.<br/>/// <br/>/// :<br/>/// angle ::<br/>/// The input angle.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "FT_Cos")]
		[return: NativeName(NativeNameType.Type, "FT_Fixed")]
		public static int FTCos([NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "FT_Angle")] int angle)
		{
			int ret = FTCosNative(angle);
			return ret;
		}

		/// <summary>
		/// ************************************************************************<br/>
		/// <br/>
		/// FT_Tan<br/>
		/// <br/>
		/// :<br/>
		/// Return the tangent of a given angle in fixed-point format.<br/>
		/// <br/>
		/// :<br/>
		/// angle ::<br/>
		/// The input angle.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "FT_Tan")]
		[return: NativeName(NativeNameType.Type, "FT_Fixed")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "FT_Tan")]
		internal static extern int FTTanNative([NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "FT_Angle")] int angle);

		/// <summary>/// ************************************************************************<br/>/// <br/>/// FT_Tan<br/>/// <br/>/// :<br/>/// Return the tangent of a given angle in fixed-point format.<br/>/// <br/>/// :<br/>/// angle ::<br/>/// The input angle.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "FT_Tan")]
		[return: NativeName(NativeNameType.Type, "FT_Fixed")]
		public static int FTTan([NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "FT_Angle")] int angle)
		{
			int ret = FTTanNative(angle);
			return ret;
		}

		/// <summary>
		/// ************************************************************************<br/>
		/// <br/>
		/// FT_Atan2<br/>
		/// <br/>
		/// :<br/>
		/// Return the arc-tangent corresponding to a given vector (x,y) in the 2d<br/>
		/// plane.<br/>
		/// <br/>
		/// :<br/>
		/// x ::<br/>
		/// The horizontal vector coordinate.<br/>
		/// y ::<br/>
		/// The vertical vector coordinate.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "FT_Atan2")]
		[return: NativeName(NativeNameType.Type, "FT_Angle")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "FT_Atan2")]
		internal static extern int FTAtan2Native([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "FT_Fixed")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "FT_Fixed")] int y);

		/// <summary>/// ************************************************************************<br/>/// <br/>/// FT_Atan2<br/>/// <br/>/// :<br/>/// Return the arc-tangent corresponding to a given vector (x,y) in the 2d<br/>/// plane.<br/>/// <br/>/// :<br/>/// x ::<br/>/// The horizontal vector coordinate.<br/>/// y ::<br/>/// The vertical vector coordinate.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "FT_Atan2")]
		[return: NativeName(NativeNameType.Type, "FT_Angle")]
		public static int FTAtan2([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "FT_Fixed")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "FT_Fixed")] int y)
		{
			int ret = FTAtan2Native(x, y);
			return ret;
		}

		/// <summary>
		/// ************************************************************************<br/>
		/// <br/>
		/// FT_Angle_Diff<br/>
		/// <br/>
		/// :<br/>
		/// Return the difference between two angles.  The result is always<br/>
		/// constrained to the ]-PI..PI] interval.<br/>
		/// <br/>
		/// :<br/>
		/// angle1 ::<br/>
		/// First angle.<br/>
		/// angle2 ::<br/>
		/// Second angle.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "FT_Angle_Diff")]
		[return: NativeName(NativeNameType.Type, "FT_Angle")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "FT_Angle_Diff")]
		internal static extern int FTAngleDiffNative([NativeName(NativeNameType.Param, "angle1")] [NativeName(NativeNameType.Type, "FT_Angle")] int angle1, [NativeName(NativeNameType.Param, "angle2")] [NativeName(NativeNameType.Type, "FT_Angle")] int angle2);

		/// <summary>/// ************************************************************************<br/>/// <br/>/// FT_Angle_Diff<br/>/// <br/>/// :<br/>/// Return the difference between two angles.  The result is always<br/>/// constrained to the ]-PI..PI] interval.<br/>/// <br/>/// :<br/>/// angle1 ::<br/>/// First angle.<br/>/// angle2 ::<br/>/// Second angle.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "FT_Angle_Diff")]
		[return: NativeName(NativeNameType.Type, "FT_Angle")]
		public static int FTAngleDiff([NativeName(NativeNameType.Param, "angle1")] [NativeName(NativeNameType.Type, "FT_Angle")] int angle1, [NativeName(NativeNameType.Param, "angle2")] [NativeName(NativeNameType.Type, "FT_Angle")] int angle2)
		{
			int ret = FTAngleDiffNative(angle1, angle2);
			return ret;
		}

		/// <summary>
		/// ************************************************************************<br/>
		/// <br/>
		/// FT_Vector_Unit<br/>
		/// <br/>
		/// :<br/>
		/// Return the unit vector corresponding to a given angle.  After the<br/>
		/// call, the value of `vec.x` will be `cos(angle)`, and the value of<br/>
		/// `vec.y` will be `sin(angle)`.<br/>
		/// This function is useful to retrieve both the sinus and cosinus of a<br/>
		/// given angle quickly.<br/>
		/// <br/>
		/// :<br/>
		/// vec ::<br/>
		/// The address of target vector.<br/>
		/// <br/>
		/// :<br/>
		/// angle ::<br/>
		/// The input angle.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "FT_Vector_Unit")]
		[return: NativeName(NativeNameType.Type, "void")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "FT_Vector_Unit")]
		internal static extern void FTVectorUnitNative([NativeName(NativeNameType.Param, "vec")] [NativeName(NativeNameType.Type, "FT_Vector*")] FTVector* vec, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "FT_Angle")] int angle);

		/// <summary>/// ************************************************************************<br/>/// <br/>/// FT_Vector_Unit<br/>/// <br/>/// :<br/>/// Return the unit vector corresponding to a given angle.  After the<br/>/// call, the value of `vec.x` will be `cos(angle)`, and the value of<br/>/// `vec.y` will be `sin(angle)`.<br/>/// This function is useful to retrieve both the sinus and cosinus of a<br/>/// given angle quickly.<br/>/// <br/>/// :<br/>/// vec ::<br/>/// The address of target vector.<br/>/// <br/>/// :<br/>/// angle ::<br/>/// The input angle.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "FT_Vector_Unit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FTVectorUnit([NativeName(NativeNameType.Param, "vec")] [NativeName(NativeNameType.Type, "FT_Vector*")] FTVector* vec, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "FT_Angle")] int angle)
		{
			FTVectorUnitNative(vec, angle);
		}

		/// <summary>
		/// ************************************************************************<br/>
		/// <br/>
		/// FT_Vector_Rotate<br/>
		/// <br/>
		/// :<br/>
		/// Rotate a vector by a given angle.<br/>
		/// <br/>
		/// :<br/>
		/// vec ::<br/>
		/// The address of target vector.<br/>
		/// <br/>
		/// :<br/>
		/// angle ::<br/>
		/// The input angle.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "FT_Vector_Rotate")]
		[return: NativeName(NativeNameType.Type, "void")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "FT_Vector_Rotate")]
		internal static extern void FTVectorRotateNative([NativeName(NativeNameType.Param, "vec")] [NativeName(NativeNameType.Type, "FT_Vector*")] FTVector* vec, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "FT_Angle")] int angle);

		/// <summary>/// ************************************************************************<br/>/// <br/>/// FT_Vector_Rotate<br/>/// <br/>/// :<br/>/// Rotate a vector by a given angle.<br/>/// <br/>/// :<br/>/// vec ::<br/>/// The address of target vector.<br/>/// <br/>/// :<br/>/// angle ::<br/>/// The input angle.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "FT_Vector_Rotate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FTVectorRotate([NativeName(NativeNameType.Param, "vec")] [NativeName(NativeNameType.Type, "FT_Vector*")] FTVector* vec, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "FT_Angle")] int angle)
		{
			FTVectorRotateNative(vec, angle);
		}

		/// <summary>
		/// ************************************************************************<br/>
		/// <br/>
		/// FT_Vector_Length<br/>
		/// <br/>
		/// :<br/>
		/// Return the length of a given vector.<br/>
		/// <br/>
		/// :<br/>
		/// vec ::<br/>
		/// The address of target vector.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "FT_Vector_Length")]
		[return: NativeName(NativeNameType.Type, "FT_Fixed")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "FT_Vector_Length")]
		internal static extern int FTVectorLengthNative([NativeName(NativeNameType.Param, "vec")] [NativeName(NativeNameType.Type, "FT_Vector*")] FTVector* vec);

		/// <summary>/// ************************************************************************<br/>/// <br/>/// FT_Vector_Length<br/>/// <br/>/// :<br/>/// Return the length of a given vector.<br/>/// <br/>/// :<br/>/// vec ::<br/>/// The address of target vector.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "FT_Vector_Length")]
		[return: NativeName(NativeNameType.Type, "FT_Fixed")]
		public static int FTVectorLength([NativeName(NativeNameType.Param, "vec")] [NativeName(NativeNameType.Type, "FT_Vector*")] FTVector* vec)
		{
			int ret = FTVectorLengthNative(vec);
			return ret;
		}

		/// <summary>
		/// ************************************************************************<br/>
		/// <br/>
		/// FT_Vector_Polarize<br/>
		/// <br/>
		/// :<br/>
		/// Compute both the length and angle of a given vector.<br/>
		/// <br/>
		/// :<br/>
		/// vec ::<br/>
		/// The address of source vector.<br/>
		/// <br/>
		/// :<br/>
		/// length ::<br/>
		/// The vector length.<br/>
		/// angle ::<br/>
		/// The vector angle.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "FT_Vector_Polarize")]
		[return: NativeName(NativeNameType.Type, "void")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "FT_Vector_Polarize")]
		internal static extern void FTVectorPolarizeNative([NativeName(NativeNameType.Param, "vec")] [NativeName(NativeNameType.Type, "FT_Vector*")] FTVector* vec, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "FT_Fixed*")] int* length, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "FT_Angle*")] int* angle);

		/// <summary>/// ************************************************************************<br/>/// <br/>/// FT_Vector_Polarize<br/>/// <br/>/// :<br/>/// Compute both the length and angle of a given vector.<br/>/// <br/>/// :<br/>/// vec ::<br/>/// The address of source vector.<br/>/// <br/>/// :<br/>/// length ::<br/>/// The vector length.<br/>/// angle ::<br/>/// The vector angle.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "FT_Vector_Polarize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FTVectorPolarize([NativeName(NativeNameType.Param, "vec")] [NativeName(NativeNameType.Type, "FT_Vector*")] FTVector* vec, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "FT_Fixed*")] int* length, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "FT_Angle*")] int* angle)
		{
			FTVectorPolarizeNative(vec, length, angle);
		}

		/// <summary>/// ************************************************************************<br/>/// <br/>/// FT_Vector_Polarize<br/>/// <br/>/// :<br/>/// Compute both the length and angle of a given vector.<br/>/// <br/>/// :<br/>/// vec ::<br/>/// The address of source vector.<br/>/// <br/>/// :<br/>/// length ::<br/>/// The vector length.<br/>/// angle ::<br/>/// The vector angle.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "FT_Vector_Polarize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FTVectorPolarize([NativeName(NativeNameType.Param, "vec")] [NativeName(NativeNameType.Type, "FT_Vector*")] FTVector* vec, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "FT_Fixed*")] ref int length, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "FT_Angle*")] int* angle)
		{
			fixed (int* plength = &length)
			{
				FTVectorPolarizeNative(vec, (int*)plength, angle);
			}
		}

		/// <summary>/// ************************************************************************<br/>/// <br/>/// FT_Vector_Polarize<br/>/// <br/>/// :<br/>/// Compute both the length and angle of a given vector.<br/>/// <br/>/// :<br/>/// vec ::<br/>/// The address of source vector.<br/>/// <br/>/// :<br/>/// length ::<br/>/// The vector length.<br/>/// angle ::<br/>/// The vector angle.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "FT_Vector_Polarize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FTVectorPolarize([NativeName(NativeNameType.Param, "vec")] [NativeName(NativeNameType.Type, "FT_Vector*")] FTVector* vec, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "FT_Fixed*")] int* length, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "FT_Angle*")] ref int angle)
		{
			fixed (int* pangle = &angle)
			{
				FTVectorPolarizeNative(vec, length, (int*)pangle);
			}
		}

		/// <summary>/// ************************************************************************<br/>/// <br/>/// FT_Vector_Polarize<br/>/// <br/>/// :<br/>/// Compute both the length and angle of a given vector.<br/>/// <br/>/// :<br/>/// vec ::<br/>/// The address of source vector.<br/>/// <br/>/// :<br/>/// length ::<br/>/// The vector length.<br/>/// angle ::<br/>/// The vector angle.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "FT_Vector_Polarize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FTVectorPolarize([NativeName(NativeNameType.Param, "vec")] [NativeName(NativeNameType.Type, "FT_Vector*")] FTVector* vec, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "FT_Fixed*")] ref int length, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "FT_Angle*")] ref int angle)
		{
			fixed (int* plength = &length)
			{
				fixed (int* pangle = &angle)
				{
					FTVectorPolarizeNative(vec, (int*)plength, (int*)pangle);
				}
			}
		}

		/// <summary>
		/// ************************************************************************<br/>
		/// <br/>
		/// FT_Vector_From_Polar<br/>
		/// <br/>
		/// :<br/>
		/// Compute vector coordinates from a length and angle.<br/>
		/// <br/>
		/// :<br/>
		/// vec ::<br/>
		/// The address of source vector.<br/>
		/// <br/>
		/// :<br/>
		/// length ::<br/>
		/// The vector length.<br/>
		/// angle ::<br/>
		/// The vector angle.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "FT_Vector_From_Polar")]
		[return: NativeName(NativeNameType.Type, "void")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "FT_Vector_From_Polar")]
		internal static extern void FTVectorFromPolarNative([NativeName(NativeNameType.Param, "vec")] [NativeName(NativeNameType.Type, "FT_Vector*")] FTVector* vec, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "FT_Fixed")] int length, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "FT_Angle")] int angle);

		/// <summary>/// ************************************************************************<br/>/// <br/>/// FT_Vector_From_Polar<br/>/// <br/>/// :<br/>/// Compute vector coordinates from a length and angle.<br/>/// <br/>/// :<br/>/// vec ::<br/>/// The address of source vector.<br/>/// <br/>/// :<br/>/// length ::<br/>/// The vector length.<br/>/// angle ::<br/>/// The vector angle.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "FT_Vector_From_Polar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FTVectorFromPolar([NativeName(NativeNameType.Param, "vec")] [NativeName(NativeNameType.Type, "FT_Vector*")] FTVector* vec, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "FT_Fixed")] int length, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "FT_Angle")] int angle)
		{
			FTVectorFromPolarNative(vec, length, angle);
		}

	}
}
