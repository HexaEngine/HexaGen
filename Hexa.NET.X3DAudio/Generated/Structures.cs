// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using HexaGen.Runtime.COM;

namespace Hexa.NET.X3DAudio
{
	/// <summary>
	/// Distance curve point:<br/>
	/// Defines a DSP setting at a given normalized distance.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "X3DAUDIO_DISTANCE_CURVE_POINT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct X3DAudioDistanceCurvePoint
	{
		/// <summary>
		/// normalized distance, must be within [0.0f, 1.0f]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Distance")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float Distance;

		/// <summary>
		/// DSP setting<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DSPSetting")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float DSPSetting;



	}

	/// <summary>
	/// Distance curve:<br/>
	/// A piecewise curve made up of linear segments used to<br/>
	/// define DSP behaviour with respect to normalized distance.<br/>
	/// Note that curve point distances are normalized within [0.0f, 1.0f].<br/>
	/// X3DAUDIO_EMITTER.CurveDistanceScaler must be used to scale the<br/>
	/// normalized distances to user-defined world units.<br/>
	/// For distances beyond CurveDistanceScaler * 1.0f,<br/>
	/// pPoints[PointCount-1].DSPSetting is used as the DSP setting.<br/>
	/// All distance curve spans must be such that:<br/>
	/// pPoints[k-1].DSPSetting + ((pPoints[k].DSPSetting-pPoints[k-1].DSPSetting) / (pPoints[k].Distance-pPoints[k-1].Distance)) * (pPoints[k].Distance-pPoints[k-1].Distance) != NAN or infinite values<br/>
	/// For all points in the distance curve where 1 <br/>
	/// <<br/>
	/// = k <br/>
	/// <<br/>
	/// PointCount.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "X3DAUDIO_DISTANCE_CURVE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct X3DAudioDistanceCurve
	{
		/// <summary>
		/// distance curve point array, must have at least PointCount elements with no duplicates and be sorted in ascending order with respect to Distance<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pPoints")]
		[NativeName(NativeNameType.Type, "X3DAUDIO_DISTANCE_CURVE_POINT*")]
		public unsafe X3DAudioDistanceCurvePoint* PPoints;

		/// <summary>
		/// number of distance curve points, must be >= 2 as all distance curves must have at least two endpoints, defining DSP settings at 0.0f and 1.0f normalized distance<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PointCount")]
		[NativeName(NativeNameType.Type, "UINT32")]
		public uint PointCount;



	}

	/// <summary>
	/// Cone:<br/>
	/// Specifies directionality for a listener or single-channel emitter by<br/>
	/// modifying DSP behaviour with respect to its front orientation.<br/>
	/// This is modeled using two sound cones: an inner cone and an outer cone.<br/>
	/// On/within the inner cone, DSP settings are scaled by the inner values.<br/>
	/// On/beyond the outer cone, DSP settings are scaled by the outer values.<br/>
	/// If on both the cones, DSP settings are scaled by the inner values only.<br/>
	/// Between the two cones, the scaler is linearly interpolated between the<br/>
	/// inner and outer values.  Set both cone angles to 0 or X3DAUDIO_2PI for<br/>
	/// omnidirectionality using only the outer or inner values respectively.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "X3DAUDIO_CONE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct X3DAudioCone
	{
		/// <summary>
		/// inner cone angle in radians, must be within [0.0f, X3DAUDIO_2PI]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerAngle")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float InnerAngle;

		/// <summary>
		/// outer cone angle in radians, must be within [InnerAngle, X3DAUDIO_2PI]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OuterAngle")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float OuterAngle;

		/// <summary>
		/// volume level scaler on/within inner cone, used only for matrix calculations, must be within [0.0f, 2.0f] when used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerVolume")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float InnerVolume;

		/// <summary>
		/// volume level scaler on/beyond outer cone, used only for matrix calculations, must be within [0.0f, 2.0f] when used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OuterVolume")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float OuterVolume;

		/// <summary>
		/// LPF (both direct and reverb paths) coefficient subtrahend on/within inner cone, used only for LPF (both direct and reverb paths) calculations, must be within [0.0f, 1.0f] when used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerLPF")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float InnerLPF;

		/// <summary>
		/// LPF (both direct and reverb paths) coefficient subtrahend on/beyond outer cone, used only for LPF (both direct and reverb paths) calculations, must be within [0.0f, 1.0f] when used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OuterLPF")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float OuterLPF;

		/// <summary>
		/// reverb send level scaler on/within inner cone, used only for reverb calculations, must be within [0.0f, 2.0f] when used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerReverb")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float InnerReverb;

		/// <summary>
		/// reverb send level scaler on/beyond outer cone, used only for reverb calculations, must be within [0.0f, 2.0f] when used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OuterReverb")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float OuterReverb;



	}

	/// <summary>
	/// Listener:<br/>
	/// Defines a point of 3D audio reception.<br/>
	/// The cone is directed by the listener's front orientation.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "X3DAUDIO_LISTENER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct X3DAudioListener
	{
		/// <summary>
		/// orientation of front direction, used only for matrix and delay calculations or listeners with cones for matrix, LPF (both direct and reverb paths), and reverb calculations, must be normalized when used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OrientFront")]
		[NativeName(NativeNameType.Type, "X3DAUDIO_VECTOR")]
		public Vector4 OrientFront;

		/// <summary>
		/// orientation of top direction, used only for matrix and delay calculations, must be orthonormal with OrientFront when used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OrientTop")]
		[NativeName(NativeNameType.Type, "X3DAUDIO_VECTOR")]
		public Vector4 OrientTop;

		/// <summary>
		/// position in user-defined world units, does not affect Velocity<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Position")]
		[NativeName(NativeNameType.Type, "X3DAUDIO_VECTOR")]
		public Vector4 Position;

		/// <summary>
		/// velocity vector in user-defined world units/second, used only for doppler calculations, does not affect Position<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Velocity")]
		[NativeName(NativeNameType.Type, "X3DAUDIO_VECTOR")]
		public Vector4 Velocity;

		/// <summary>
		/// sound cone, used only for matrix, LPF (both direct and reverb paths), and reverb calculations, NULL specifies omnidirectionality<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pCone")]
		[NativeName(NativeNameType.Type, "X3DAUDIO_CONE*")]
		public unsafe X3DAudioCone* PCone;



	}

	/// <summary>
	/// Emitter:<br/>
	/// Defines a 3D audio source, divided into two classifications:<br/>
	/// Single-point -- For use with single-channel sounds.<br/>
	/// Positioned at the emitter base, i.e. the channel radius<br/>
	/// and azimuth are ignored if the number of channels == 1.<br/>
	/// May be omnidirectional or directional using a cone.<br/>
	/// The cone originates from the emitter base position,<br/>
	/// and is directed by the emitter's front orientation.<br/>
	/// Multi-point  -- For use with multi-channel sounds.<br/>
	/// Each non-LFE channel is positioned using an<br/>
	/// azimuth along the channel radius with respect to the<br/>
	/// front orientation vector in the plane orthogonal to the<br/>
	/// top orientation vector.  An azimuth of X3DAUDIO_2PI<br/>
	/// specifies a channel is an LFE.  Such channels are<br/>
	/// positioned at the emitter base and are calculated<br/>
	/// with respect to pLFECurve only, never pVolumeCurve.<br/>
	/// Multi-point emitters are always omnidirectional,<br/>
	/// i.e. the cone is ignored if the number of channels > 1.<br/>
	/// Note that many properties are shared among all channel points,<br/>
	/// locking certain behaviour with respect to the emitter base position.<br/>
	/// For example, doppler shift is always calculated with respect to the<br/>
	/// emitter base position and so is constant for all its channel points.<br/>
	/// Distance curve calculations are also with respect to the emitter base<br/>
	/// position, with the curves being calculated independently of each other.<br/>
	/// For instance, volume and LFE calculations do not affect one another.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "X3DAUDIO_EMITTER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct X3DAudioEmitter
	{
		/// <summary>
		/// sound cone, used only with single-channel emitters for matrix, LPF (both direct and reverb paths), and reverb calculations, NULL specifies omnidirectionality<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pCone")]
		[NativeName(NativeNameType.Type, "X3DAUDIO_CONE*")]
		public unsafe X3DAudioCone* PCone;

		/// <summary>
		/// orientation of front direction, used only for emitter angle calculations or with multi-channel emitters for matrix calculations or single-channel emitters with cones for matrix, LPF (both direct and reverb paths), and reverb calculations, must be normalized when used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OrientFront")]
		[NativeName(NativeNameType.Type, "X3DAUDIO_VECTOR")]
		public Vector4 OrientFront;

		/// <summary>
		/// orientation of top direction, used only with multi-channel emitters for matrix calculations, must be orthonormal with OrientFront when used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OrientTop")]
		[NativeName(NativeNameType.Type, "X3DAUDIO_VECTOR")]
		public Vector4 OrientTop;

		/// <summary>
		/// position in user-defined world units, does not affect Velocity<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Position")]
		[NativeName(NativeNameType.Type, "X3DAUDIO_VECTOR")]
		public Vector4 Position;

		/// <summary>
		/// velocity vector in user-defined world units/second, used only for doppler calculations, does not affect Position<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Velocity")]
		[NativeName(NativeNameType.Type, "X3DAUDIO_VECTOR")]
		public Vector4 Velocity;

		/// <summary>
		/// inner radius, must be within [0.0f, FLT_MAX]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerRadius")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float InnerRadius;

		/// <summary>
		/// inner radius angle, must be within [0.0f, X3DAUDIO_PI/4.0)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InnerRadiusAngle")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float InnerRadiusAngle;

		/// <summary>
		/// number of sound channels, must be > 0<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ChannelCount")]
		[NativeName(NativeNameType.Type, "UINT32")]
		public uint ChannelCount;

		/// <summary>
		/// channel radius, used only with multi-channel emitters for matrix calculations, must be >= 0.0f when used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ChannelRadius")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float ChannelRadius;

		/// <summary>
		/// channel azimuth array, used only with multi-channel emitters for matrix calculations, contains positions of each channel expressed in radians along the channel radius with respect to the front orientation vector in the plane orthogonal to the top orientation vector, or X3DAUDIO_2PI to specify an LFE channel, must have at least ChannelCount elements, all within [0.0f, X3DAUDIO_2PI] when used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pChannelAzimuths")]
		[NativeName(NativeNameType.Type, "FLOAT32*")]
		public unsafe float* PChannelAzimuths;

		/// <summary>
		/// volume level distance curve, used only for matrix calculations, NULL specifies a default curve that conforms to the inverse square law, calculated in user-defined world units with distances <br/>
		/// <<br/>
		/// = CurveDistanceScaler clamped to no attenuation<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pVolumeCurve")]
		[NativeName(NativeNameType.Type, "X3DAUDIO_DISTANCE_CURVE*")]
		public unsafe X3DAudioDistanceCurve* PVolumeCurve;

		/// <summary>
		/// LFE level distance curve, used only for matrix calculations, NULL specifies a default curve that conforms to the inverse square law, calculated in user-defined world units with distances <br/>
		/// <<br/>
		/// = CurveDistanceScaler clamped to no attenuation<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pLFECurve")]
		[NativeName(NativeNameType.Type, "X3DAUDIO_DISTANCE_CURVE*")]
		public unsafe X3DAudioDistanceCurve* PLFECurve;

		/// <summary>
		/// LPF direct-path coefficient distance curve, used only for LPF direct-path calculations, NULL specifies the default curve: [0.0f,1.0f], [1.0f,0.75f]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pLPFDirectCurve")]
		[NativeName(NativeNameType.Type, "X3DAUDIO_DISTANCE_CURVE*")]
		public unsafe X3DAudioDistanceCurve* PLPFDirectCurve;

		/// <summary>
		/// LPF reverb-path coefficient distance curve, used only for LPF reverb-path calculations, NULL specifies the default curve: [0.0f,0.75f], [1.0f,0.75f]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pLPFReverbCurve")]
		[NativeName(NativeNameType.Type, "X3DAUDIO_DISTANCE_CURVE*")]
		public unsafe X3DAudioDistanceCurve* PLPFReverbCurve;

		/// <summary>
		/// reverb send level distance curve, used only for reverb calculations, NULL specifies the default curve: [0.0f,1.0f], [1.0f,0.0f]<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pReverbCurve")]
		[NativeName(NativeNameType.Type, "X3DAUDIO_DISTANCE_CURVE*")]
		public unsafe X3DAudioDistanceCurve* PReverbCurve;

		/// <summary>
		/// curve distance scaler, used to scale normalized distance curves to user-defined world units and/or exaggerate their effect, used only for matrix, LPF (both direct and reverb paths), and reverb calculations, must be within [FLT_MIN, FLT_MAX] when used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CurveDistanceScaler")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float CurveDistanceScaler;

		/// <summary>
		/// doppler shift scaler, used to exaggerate doppler shift effect, used only for doppler calculations, must be within [0.0f, FLT_MAX] when used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DopplerScaler")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float DopplerScaler;



	}

	/// <summary>
	/// DSP settings:<br/>
	/// Receives results from a call to X3DAudioCalculate to be sent<br/>
	/// to the low-level audio rendering API for 3D signal processing.<br/>
	/// The user is responsible for allocating the matrix coefficient table,<br/>
	/// delay time array, and initializing the channel counts when used.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "X3DAUDIO_DSP_SETTINGS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct X3DAudioDspSettings
	{
		/// <summary>
		/// [inout] matrix coefficient table, receives an array representing the volume level used to send from source channel S to destination channel D, stored as pMatrixCoefficients[SrcChannelCount * D + S], must have at least SrcChannelCount*DstChannelCount elements<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pMatrixCoefficients")]
		[NativeName(NativeNameType.Type, "FLOAT32*")]
		public unsafe float* PMatrixCoefficients;

		/// <summary>
		/// [inout] delay time array, receives delays for each destination channel in milliseconds, must have at least DstChannelCount elements (stereo final mix only)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pDelayTimes")]
		[NativeName(NativeNameType.Type, "FLOAT32*")]
		public unsafe float* PDelayTimes;

		/// <summary>
		/// [in] number of source channels, must equal number of channels in respective emitter<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SrcChannelCount")]
		[NativeName(NativeNameType.Type, "UINT32")]
		public uint SrcChannelCount;

		/// <summary>
		/// [in] number of destination channels, must equal number of channels of the final mix<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DstChannelCount")]
		[NativeName(NativeNameType.Type, "UINT32")]
		public uint DstChannelCount;

		/// <summary>
		/// [out] LPF direct-path coefficient<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LPFDirectCoefficient")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float LPFDirectCoefficient;

		/// <summary>
		/// [out] LPF reverb-path coefficient<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "LPFReverbCoefficient")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float LPFReverbCoefficient;

		/// <summary>
		/// [out] reverb send level<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ReverbLevel")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float ReverbLevel;

		/// <summary>
		/// [out] doppler shift factor, scales resampler ratio for doppler shift effect, where the effective frequency = DopplerFactor * original frequency<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DopplerFactor")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float DopplerFactor;

		/// <summary>
		/// [out] emitter-to-listener interior angle, expressed in radians with respect to the emitter's front orientation<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "EmitterToListenerAngle")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float EmitterToListenerAngle;

		/// <summary>
		/// [out] distance in user-defined world units from the emitter base to listener position, always calculated<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "EmitterToListenerDistance")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float EmitterToListenerDistance;

		/// <summary>
		/// [out] component of emitter velocity vector projected onto emitter->listener vector in user-defined world units/second, calculated only for doppler<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "EmitterVelocityComponent")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float EmitterVelocityComponent;

		/// <summary>
		/// [out] component of listener velocity vector projected onto emitter->listener vector in user-defined world units/second, calculated only for doppler<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ListenerVelocityComponent")]
		[NativeName(NativeNameType.Type, "FLOAT32")]
		public float ListenerVelocityComponent;



	}

}
