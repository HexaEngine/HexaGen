// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using HexaGen.Runtime.COM;

namespace Hexa.NET.X3DAudio
{
	/// <summary>
	/// Distance curve point:<br/>
	/// Defines a DSP setting at a given normalized distance.<br/>
	/// </summary>
	[NativeName(NativeNameType.Typedef, "LPX3DAUDIO_DISTANCE_CURVE_POINT")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LpX3DAudioDistanceCurvePoint : IEquatable<LpX3DAudioDistanceCurvePoint>
	{
		public LpX3DAudioDistanceCurvePoint(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LpX3DAudioDistanceCurvePoint Null => new LpX3DAudioDistanceCurvePoint(0);
		public static implicit operator LpX3DAudioDistanceCurvePoint(nint handle) => new LpX3DAudioDistanceCurvePoint(handle);
		public static bool operator ==(LpX3DAudioDistanceCurvePoint left, LpX3DAudioDistanceCurvePoint right) => left.Handle == right.Handle;
		public static bool operator !=(LpX3DAudioDistanceCurvePoint left, LpX3DAudioDistanceCurvePoint right) => left.Handle != right.Handle;
		public static bool operator ==(LpX3DAudioDistanceCurvePoint left, nint right) => left.Handle == right;
		public static bool operator !=(LpX3DAudioDistanceCurvePoint left, nint right) => left.Handle != right;
		public bool Equals(LpX3DAudioDistanceCurvePoint other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LpX3DAudioDistanceCurvePoint handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LpX3DAudioDistanceCurvePoint [0x{0}]", Handle.ToString("X"));
	}

	/// <summary>
	/// Distance curve:<br/>
	/// A piecewise curve made up of linear segments used to<br/>
	/// define DSP behaviour with respect to normalized distance.<br/>
	/// Note that curve point distances are normalized within [0.0f, 1.0f].<br/>
	/// X3DAUDIO_EMITTER.CurveDistanceScaler must be used to scale the<br/>
	/// normalized distances to user-defined world units.<br/>
	/// For distances beyond CurveDistanceScaler * 1.0f,<br/>
	/// pPoints[PointCount-1].DSPSetting is used as the DSP setting.<br/>
	/// All distance curve spans must be such that:<br/>
	/// pPoints[k-1].DSPSetting + ((pPoints[k].DSPSetting-pPoints[k-1].DSPSetting) / (pPoints[k].Distance-pPoints[k-1].Distance)) * (pPoints[k].Distance-pPoints[k-1].Distance) != NAN or infinite values<br/>
	/// For all points in the distance curve where 1 <br/>
	/// <<br/>
	/// = k <br/>
	/// <<br/>
	/// PointCount.<br/>
	/// </summary>
	[NativeName(NativeNameType.Typedef, "LPX3DAUDIO_DISTANCE_CURVE")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LpX3DAudioDistanceCurve : IEquatable<LpX3DAudioDistanceCurve>
	{
		public LpX3DAudioDistanceCurve(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LpX3DAudioDistanceCurve Null => new LpX3DAudioDistanceCurve(0);
		public static implicit operator LpX3DAudioDistanceCurve(nint handle) => new LpX3DAudioDistanceCurve(handle);
		public static bool operator ==(LpX3DAudioDistanceCurve left, LpX3DAudioDistanceCurve right) => left.Handle == right.Handle;
		public static bool operator !=(LpX3DAudioDistanceCurve left, LpX3DAudioDistanceCurve right) => left.Handle != right.Handle;
		public static bool operator ==(LpX3DAudioDistanceCurve left, nint right) => left.Handle == right;
		public static bool operator !=(LpX3DAudioDistanceCurve left, nint right) => left.Handle != right;
		public bool Equals(LpX3DAudioDistanceCurve other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LpX3DAudioDistanceCurve handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LpX3DAudioDistanceCurve [0x{0}]", Handle.ToString("X"));
	}

	/// <summary>
	/// Cone:<br/>
	/// Specifies directionality for a listener or single-channel emitter by<br/>
	/// modifying DSP behaviour with respect to its front orientation.<br/>
	/// This is modeled using two sound cones: an inner cone and an outer cone.<br/>
	/// On/within the inner cone, DSP settings are scaled by the inner values.<br/>
	/// On/beyond the outer cone, DSP settings are scaled by the outer values.<br/>
	/// If on both the cones, DSP settings are scaled by the inner values only.<br/>
	/// Between the two cones, the scaler is linearly interpolated between the<br/>
	/// inner and outer values.  Set both cone angles to 0 or X3DAUDIO_2PI for<br/>
	/// omnidirectionality using only the outer or inner values respectively.<br/>
	/// </summary>
	[NativeName(NativeNameType.Typedef, "LPX3DAUDIO_CONE")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LpX3DAudioCone : IEquatable<LpX3DAudioCone>
	{
		public LpX3DAudioCone(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LpX3DAudioCone Null => new LpX3DAudioCone(0);
		public static implicit operator LpX3DAudioCone(nint handle) => new LpX3DAudioCone(handle);
		public static bool operator ==(LpX3DAudioCone left, LpX3DAudioCone right) => left.Handle == right.Handle;
		public static bool operator !=(LpX3DAudioCone left, LpX3DAudioCone right) => left.Handle != right.Handle;
		public static bool operator ==(LpX3DAudioCone left, nint right) => left.Handle == right;
		public static bool operator !=(LpX3DAudioCone left, nint right) => left.Handle != right;
		public bool Equals(LpX3DAudioCone other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LpX3DAudioCone handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LpX3DAudioCone [0x{0}]", Handle.ToString("X"));
	}

	/// <summary>
	/// Listener:<br/>
	/// Defines a point of 3D audio reception.<br/>
	/// The cone is directed by the listener's front orientation.<br/>
	/// </summary>
	[NativeName(NativeNameType.Typedef, "LPX3DAUDIO_LISTENER")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LpX3DAudioListener : IEquatable<LpX3DAudioListener>
	{
		public LpX3DAudioListener(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LpX3DAudioListener Null => new LpX3DAudioListener(0);
		public static implicit operator LpX3DAudioListener(nint handle) => new LpX3DAudioListener(handle);
		public static bool operator ==(LpX3DAudioListener left, LpX3DAudioListener right) => left.Handle == right.Handle;
		public static bool operator !=(LpX3DAudioListener left, LpX3DAudioListener right) => left.Handle != right.Handle;
		public static bool operator ==(LpX3DAudioListener left, nint right) => left.Handle == right;
		public static bool operator !=(LpX3DAudioListener left, nint right) => left.Handle != right;
		public bool Equals(LpX3DAudioListener other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LpX3DAudioListener handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LpX3DAudioListener [0x{0}]", Handle.ToString("X"));
	}

	/// <summary>
	/// Emitter:<br/>
	/// Defines a 3D audio source, divided into two classifications:<br/>
	/// Single-point -- For use with single-channel sounds.<br/>
	/// Positioned at the emitter base, i.e. the channel radius<br/>
	/// and azimuth are ignored if the number of channels == 1.<br/>
	/// May be omnidirectional or directional using a cone.<br/>
	/// The cone originates from the emitter base position,<br/>
	/// and is directed by the emitter's front orientation.<br/>
	/// Multi-point  -- For use with multi-channel sounds.<br/>
	/// Each non-LFE channel is positioned using an<br/>
	/// azimuth along the channel radius with respect to the<br/>
	/// front orientation vector in the plane orthogonal to the<br/>
	/// top orientation vector.  An azimuth of X3DAUDIO_2PI<br/>
	/// specifies a channel is an LFE.  Such channels are<br/>
	/// positioned at the emitter base and are calculated<br/>
	/// with respect to pLFECurve only, never pVolumeCurve.<br/>
	/// Multi-point emitters are always omnidirectional,<br/>
	/// i.e. the cone is ignored if the number of channels > 1.<br/>
	/// Note that many properties are shared among all channel points,<br/>
	/// locking certain behaviour with respect to the emitter base position.<br/>
	/// For example, doppler shift is always calculated with respect to the<br/>
	/// emitter base position and so is constant for all its channel points.<br/>
	/// Distance curve calculations are also with respect to the emitter base<br/>
	/// position, with the curves being calculated independently of each other.<br/>
	/// For instance, volume and LFE calculations do not affect one another.<br/>
	/// </summary>
	[NativeName(NativeNameType.Typedef, "LPX3DAUDIO_EMITTER")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LpX3DAudioEmitter : IEquatable<LpX3DAudioEmitter>
	{
		public LpX3DAudioEmitter(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LpX3DAudioEmitter Null => new LpX3DAudioEmitter(0);
		public static implicit operator LpX3DAudioEmitter(nint handle) => new LpX3DAudioEmitter(handle);
		public static bool operator ==(LpX3DAudioEmitter left, LpX3DAudioEmitter right) => left.Handle == right.Handle;
		public static bool operator !=(LpX3DAudioEmitter left, LpX3DAudioEmitter right) => left.Handle != right.Handle;
		public static bool operator ==(LpX3DAudioEmitter left, nint right) => left.Handle == right;
		public static bool operator !=(LpX3DAudioEmitter left, nint right) => left.Handle != right;
		public bool Equals(LpX3DAudioEmitter other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LpX3DAudioEmitter handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LpX3DAudioEmitter [0x{0}]", Handle.ToString("X"));
	}

	/// <summary>
	/// DSP settings:<br/>
	/// Receives results from a call to X3DAudioCalculate to be sent<br/>
	/// to the low-level audio rendering API for 3D signal processing.<br/>
	/// The user is responsible for allocating the matrix coefficient table,<br/>
	/// delay time array, and initializing the channel counts when used.<br/>
	/// </summary>
	[NativeName(NativeNameType.Typedef, "LPX3DAUDIO_DSP_SETTINGS")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LpX3DAudioDspSettings : IEquatable<LpX3DAudioDspSettings>
	{
		public LpX3DAudioDspSettings(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LpX3DAudioDspSettings Null => new LpX3DAudioDspSettings(0);
		public static implicit operator LpX3DAudioDspSettings(nint handle) => new LpX3DAudioDspSettings(handle);
		public static bool operator ==(LpX3DAudioDspSettings left, LpX3DAudioDspSettings right) => left.Handle == right.Handle;
		public static bool operator !=(LpX3DAudioDspSettings left, LpX3DAudioDspSettings right) => left.Handle != right.Handle;
		public static bool operator ==(LpX3DAudioDspSettings left, nint right) => left.Handle == right;
		public static bool operator !=(LpX3DAudioDspSettings left, nint right) => left.Handle != right;
		public bool Equals(LpX3DAudioDspSettings other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LpX3DAudioDspSettings handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LpX3DAudioDspSettings [0x{0}]", Handle.ToString("X"));
	}

}
