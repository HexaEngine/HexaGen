// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.Vulkan
{
	[NativeName(NativeNameType.StructOrClass, "StdVideoH264SpsVuiFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH264SpsVuiFlags
	{
		[NativeName(NativeNameType.Field, "aspect_ratio_info_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint AspectRatioInfoPresentFlag;
		[NativeName(NativeNameType.Field, "overscan_info_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint OverscanInfoPresentFlag;
		[NativeName(NativeNameType.Field, "overscan_appropriate_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint OverscanAppropriateFlag;
		[NativeName(NativeNameType.Field, "video_signal_type_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VideoSignalTypePresentFlag;
		[NativeName(NativeNameType.Field, "video_full_range_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VideoFullRangeFlag;
		[NativeName(NativeNameType.Field, "color_description_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ColorDescriptionPresentFlag;
		[NativeName(NativeNameType.Field, "chroma_loc_info_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ChromaLocInfoPresentFlag;
		[NativeName(NativeNameType.Field, "timing_info_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint TimingInfoPresentFlag;
		[NativeName(NativeNameType.Field, "fixed_frame_rate_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FixedFrameRateFlag;
		[NativeName(NativeNameType.Field, "bitstream_restriction_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BitstreamRestrictionFlag;
		[NativeName(NativeNameType.Field, "nal_hrd_parameters_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NalHrdParametersPresentFlag;
		[NativeName(NativeNameType.Field, "vcl_hrd_parameters_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VclHrdParametersPresentFlag;

		public unsafe StdVideoH264SpsVuiFlags(uint aspectRatioInfoPresentFlag = default, uint overscanInfoPresentFlag = default, uint overscanAppropriateFlag = default, uint videoSignalTypePresentFlag = default, uint videoFullRangeFlag = default, uint colorDescriptionPresentFlag = default, uint chromaLocInfoPresentFlag = default, uint timingInfoPresentFlag = default, uint fixedFrameRateFlag = default, uint bitstreamRestrictionFlag = default, uint nalHrdParametersPresentFlag = default, uint vclHrdParametersPresentFlag = default)
		{
			AspectRatioInfoPresentFlag = aspectRatioInfoPresentFlag;
			OverscanInfoPresentFlag = overscanInfoPresentFlag;
			OverscanAppropriateFlag = overscanAppropriateFlag;
			VideoSignalTypePresentFlag = videoSignalTypePresentFlag;
			VideoFullRangeFlag = videoFullRangeFlag;
			ColorDescriptionPresentFlag = colorDescriptionPresentFlag;
			ChromaLocInfoPresentFlag = chromaLocInfoPresentFlag;
			TimingInfoPresentFlag = timingInfoPresentFlag;
			FixedFrameRateFlag = fixedFrameRateFlag;
			BitstreamRestrictionFlag = bitstreamRestrictionFlag;
			NalHrdParametersPresentFlag = nalHrdParametersPresentFlag;
			VclHrdParametersPresentFlag = vclHrdParametersPresentFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH264HrdParameters")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH264HrdParameters
	{
		[NativeName(NativeNameType.Field, "cpb_cnt_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte CpbCntMinus1;
		[NativeName(NativeNameType.Field, "bit_rate_scale")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte BitRateScale;
		[NativeName(NativeNameType.Field, "cpb_size_scale")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte CpbSizeScale;
		[NativeName(NativeNameType.Field, "reserved1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved1;
		[NativeName(NativeNameType.Field, "bit_rate_value_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t[32]")]
		public uint BitRateValueMinus1_0;
		public uint BitRateValueMinus1_1;
		public uint BitRateValueMinus1_2;
		public uint BitRateValueMinus1_3;
		public uint BitRateValueMinus1_4;
		public uint BitRateValueMinus1_5;
		public uint BitRateValueMinus1_6;
		public uint BitRateValueMinus1_7;
		public uint BitRateValueMinus1_8;
		public uint BitRateValueMinus1_9;
		public uint BitRateValueMinus1_10;
		public uint BitRateValueMinus1_11;
		public uint BitRateValueMinus1_12;
		public uint BitRateValueMinus1_13;
		public uint BitRateValueMinus1_14;
		public uint BitRateValueMinus1_15;
		public uint BitRateValueMinus1_16;
		public uint BitRateValueMinus1_17;
		public uint BitRateValueMinus1_18;
		public uint BitRateValueMinus1_19;
		public uint BitRateValueMinus1_20;
		public uint BitRateValueMinus1_21;
		public uint BitRateValueMinus1_22;
		public uint BitRateValueMinus1_23;
		public uint BitRateValueMinus1_24;
		public uint BitRateValueMinus1_25;
		public uint BitRateValueMinus1_26;
		public uint BitRateValueMinus1_27;
		public uint BitRateValueMinus1_28;
		public uint BitRateValueMinus1_29;
		public uint BitRateValueMinus1_30;
		public uint BitRateValueMinus1_31;
		[NativeName(NativeNameType.Field, "cpb_size_value_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t[32]")]
		public uint CpbSizeValueMinus1_0;
		public uint CpbSizeValueMinus1_1;
		public uint CpbSizeValueMinus1_2;
		public uint CpbSizeValueMinus1_3;
		public uint CpbSizeValueMinus1_4;
		public uint CpbSizeValueMinus1_5;
		public uint CpbSizeValueMinus1_6;
		public uint CpbSizeValueMinus1_7;
		public uint CpbSizeValueMinus1_8;
		public uint CpbSizeValueMinus1_9;
		public uint CpbSizeValueMinus1_10;
		public uint CpbSizeValueMinus1_11;
		public uint CpbSizeValueMinus1_12;
		public uint CpbSizeValueMinus1_13;
		public uint CpbSizeValueMinus1_14;
		public uint CpbSizeValueMinus1_15;
		public uint CpbSizeValueMinus1_16;
		public uint CpbSizeValueMinus1_17;
		public uint CpbSizeValueMinus1_18;
		public uint CpbSizeValueMinus1_19;
		public uint CpbSizeValueMinus1_20;
		public uint CpbSizeValueMinus1_21;
		public uint CpbSizeValueMinus1_22;
		public uint CpbSizeValueMinus1_23;
		public uint CpbSizeValueMinus1_24;
		public uint CpbSizeValueMinus1_25;
		public uint CpbSizeValueMinus1_26;
		public uint CpbSizeValueMinus1_27;
		public uint CpbSizeValueMinus1_28;
		public uint CpbSizeValueMinus1_29;
		public uint CpbSizeValueMinus1_30;
		public uint CpbSizeValueMinus1_31;
		[NativeName(NativeNameType.Field, "cbr_flag")]
		[NativeName(NativeNameType.Type, "uint8_t[32]")]
		public byte CbrFlag_0;
		public byte CbrFlag_1;
		public byte CbrFlag_2;
		public byte CbrFlag_3;
		public byte CbrFlag_4;
		public byte CbrFlag_5;
		public byte CbrFlag_6;
		public byte CbrFlag_7;
		public byte CbrFlag_8;
		public byte CbrFlag_9;
		public byte CbrFlag_10;
		public byte CbrFlag_11;
		public byte CbrFlag_12;
		public byte CbrFlag_13;
		public byte CbrFlag_14;
		public byte CbrFlag_15;
		public byte CbrFlag_16;
		public byte CbrFlag_17;
		public byte CbrFlag_18;
		public byte CbrFlag_19;
		public byte CbrFlag_20;
		public byte CbrFlag_21;
		public byte CbrFlag_22;
		public byte CbrFlag_23;
		public byte CbrFlag_24;
		public byte CbrFlag_25;
		public byte CbrFlag_26;
		public byte CbrFlag_27;
		public byte CbrFlag_28;
		public byte CbrFlag_29;
		public byte CbrFlag_30;
		public byte CbrFlag_31;
		[NativeName(NativeNameType.Field, "initial_cpb_removal_delay_length_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint InitialCpbRemovalDelayLengthMinus1;
		[NativeName(NativeNameType.Field, "cpb_removal_delay_length_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CpbRemovalDelayLengthMinus1;
		[NativeName(NativeNameType.Field, "dpb_output_delay_length_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DpbOutputDelayLengthMinus1;
		[NativeName(NativeNameType.Field, "time_offset_length")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint TimeOffsetLength;

		public unsafe StdVideoH264HrdParameters(byte cpbCntminus1 = default, byte bitRateScale = default, byte cpbSizeScale = default, byte reserved1 = default, uint* bitRateValueminus1 = default, uint* cpbSizeValueminus1 = default, byte* cbrFlag = default, uint initialCpbRemovalDelayLengthminus1 = default, uint cpbRemovalDelayLengthminus1 = default, uint dpbOutputDelayLengthminus1 = default, uint timeOffsetLength = default)
		{
			CpbCntMinus1 = cpbCntminus1;
			BitRateScale = bitRateScale;
			CpbSizeScale = cpbSizeScale;
			Reserved1 = reserved1;
			if (bitRateValueminus1 != default)
			{
				BitRateValueMinus1_0 = bitRateValueminus1[0];
				BitRateValueMinus1_1 = bitRateValueminus1[1];
				BitRateValueMinus1_2 = bitRateValueminus1[2];
				BitRateValueMinus1_3 = bitRateValueminus1[3];
				BitRateValueMinus1_4 = bitRateValueminus1[4];
				BitRateValueMinus1_5 = bitRateValueminus1[5];
				BitRateValueMinus1_6 = bitRateValueminus1[6];
				BitRateValueMinus1_7 = bitRateValueminus1[7];
				BitRateValueMinus1_8 = bitRateValueminus1[8];
				BitRateValueMinus1_9 = bitRateValueminus1[9];
				BitRateValueMinus1_10 = bitRateValueminus1[10];
				BitRateValueMinus1_11 = bitRateValueminus1[11];
				BitRateValueMinus1_12 = bitRateValueminus1[12];
				BitRateValueMinus1_13 = bitRateValueminus1[13];
				BitRateValueMinus1_14 = bitRateValueminus1[14];
				BitRateValueMinus1_15 = bitRateValueminus1[15];
				BitRateValueMinus1_16 = bitRateValueminus1[16];
				BitRateValueMinus1_17 = bitRateValueminus1[17];
				BitRateValueMinus1_18 = bitRateValueminus1[18];
				BitRateValueMinus1_19 = bitRateValueminus1[19];
				BitRateValueMinus1_20 = bitRateValueminus1[20];
				BitRateValueMinus1_21 = bitRateValueminus1[21];
				BitRateValueMinus1_22 = bitRateValueminus1[22];
				BitRateValueMinus1_23 = bitRateValueminus1[23];
				BitRateValueMinus1_24 = bitRateValueminus1[24];
				BitRateValueMinus1_25 = bitRateValueminus1[25];
				BitRateValueMinus1_26 = bitRateValueminus1[26];
				BitRateValueMinus1_27 = bitRateValueminus1[27];
				BitRateValueMinus1_28 = bitRateValueminus1[28];
				BitRateValueMinus1_29 = bitRateValueminus1[29];
				BitRateValueMinus1_30 = bitRateValueminus1[30];
				BitRateValueMinus1_31 = bitRateValueminus1[31];
			}
			if (cpbSizeValueminus1 != default)
			{
				CpbSizeValueMinus1_0 = cpbSizeValueminus1[0];
				CpbSizeValueMinus1_1 = cpbSizeValueminus1[1];
				CpbSizeValueMinus1_2 = cpbSizeValueminus1[2];
				CpbSizeValueMinus1_3 = cpbSizeValueminus1[3];
				CpbSizeValueMinus1_4 = cpbSizeValueminus1[4];
				CpbSizeValueMinus1_5 = cpbSizeValueminus1[5];
				CpbSizeValueMinus1_6 = cpbSizeValueminus1[6];
				CpbSizeValueMinus1_7 = cpbSizeValueminus1[7];
				CpbSizeValueMinus1_8 = cpbSizeValueminus1[8];
				CpbSizeValueMinus1_9 = cpbSizeValueminus1[9];
				CpbSizeValueMinus1_10 = cpbSizeValueminus1[10];
				CpbSizeValueMinus1_11 = cpbSizeValueminus1[11];
				CpbSizeValueMinus1_12 = cpbSizeValueminus1[12];
				CpbSizeValueMinus1_13 = cpbSizeValueminus1[13];
				CpbSizeValueMinus1_14 = cpbSizeValueminus1[14];
				CpbSizeValueMinus1_15 = cpbSizeValueminus1[15];
				CpbSizeValueMinus1_16 = cpbSizeValueminus1[16];
				CpbSizeValueMinus1_17 = cpbSizeValueminus1[17];
				CpbSizeValueMinus1_18 = cpbSizeValueminus1[18];
				CpbSizeValueMinus1_19 = cpbSizeValueminus1[19];
				CpbSizeValueMinus1_20 = cpbSizeValueminus1[20];
				CpbSizeValueMinus1_21 = cpbSizeValueminus1[21];
				CpbSizeValueMinus1_22 = cpbSizeValueminus1[22];
				CpbSizeValueMinus1_23 = cpbSizeValueminus1[23];
				CpbSizeValueMinus1_24 = cpbSizeValueminus1[24];
				CpbSizeValueMinus1_25 = cpbSizeValueminus1[25];
				CpbSizeValueMinus1_26 = cpbSizeValueminus1[26];
				CpbSizeValueMinus1_27 = cpbSizeValueminus1[27];
				CpbSizeValueMinus1_28 = cpbSizeValueminus1[28];
				CpbSizeValueMinus1_29 = cpbSizeValueminus1[29];
				CpbSizeValueMinus1_30 = cpbSizeValueminus1[30];
				CpbSizeValueMinus1_31 = cpbSizeValueminus1[31];
			}
			if (cbrFlag != default)
			{
				CbrFlag_0 = cbrFlag[0];
				CbrFlag_1 = cbrFlag[1];
				CbrFlag_2 = cbrFlag[2];
				CbrFlag_3 = cbrFlag[3];
				CbrFlag_4 = cbrFlag[4];
				CbrFlag_5 = cbrFlag[5];
				CbrFlag_6 = cbrFlag[6];
				CbrFlag_7 = cbrFlag[7];
				CbrFlag_8 = cbrFlag[8];
				CbrFlag_9 = cbrFlag[9];
				CbrFlag_10 = cbrFlag[10];
				CbrFlag_11 = cbrFlag[11];
				CbrFlag_12 = cbrFlag[12];
				CbrFlag_13 = cbrFlag[13];
				CbrFlag_14 = cbrFlag[14];
				CbrFlag_15 = cbrFlag[15];
				CbrFlag_16 = cbrFlag[16];
				CbrFlag_17 = cbrFlag[17];
				CbrFlag_18 = cbrFlag[18];
				CbrFlag_19 = cbrFlag[19];
				CbrFlag_20 = cbrFlag[20];
				CbrFlag_21 = cbrFlag[21];
				CbrFlag_22 = cbrFlag[22];
				CbrFlag_23 = cbrFlag[23];
				CbrFlag_24 = cbrFlag[24];
				CbrFlag_25 = cbrFlag[25];
				CbrFlag_26 = cbrFlag[26];
				CbrFlag_27 = cbrFlag[27];
				CbrFlag_28 = cbrFlag[28];
				CbrFlag_29 = cbrFlag[29];
				CbrFlag_30 = cbrFlag[30];
				CbrFlag_31 = cbrFlag[31];
			}
			InitialCpbRemovalDelayLengthMinus1 = initialCpbRemovalDelayLengthminus1;
			CpbRemovalDelayLengthMinus1 = cpbRemovalDelayLengthminus1;
			DpbOutputDelayLengthMinus1 = dpbOutputDelayLengthminus1;
			TimeOffsetLength = timeOffsetLength;
		}

		public unsafe StdVideoH264HrdParameters(byte cpbCntminus1 = default, byte bitRateScale = default, byte cpbSizeScale = default, byte reserved1 = default, Span<uint> bitRateValueminus1 = default, Span<uint> cpbSizeValueminus1 = default, Span<byte> cbrFlag = default, uint initialCpbRemovalDelayLengthminus1 = default, uint cpbRemovalDelayLengthminus1 = default, uint dpbOutputDelayLengthminus1 = default, uint timeOffsetLength = default)
		{
			CpbCntMinus1 = cpbCntminus1;
			BitRateScale = bitRateScale;
			CpbSizeScale = cpbSizeScale;
			Reserved1 = reserved1;
			if (bitRateValueminus1 != default)
			{
				BitRateValueMinus1_0 = bitRateValueminus1[0];
				BitRateValueMinus1_1 = bitRateValueminus1[1];
				BitRateValueMinus1_2 = bitRateValueminus1[2];
				BitRateValueMinus1_3 = bitRateValueminus1[3];
				BitRateValueMinus1_4 = bitRateValueminus1[4];
				BitRateValueMinus1_5 = bitRateValueminus1[5];
				BitRateValueMinus1_6 = bitRateValueminus1[6];
				BitRateValueMinus1_7 = bitRateValueminus1[7];
				BitRateValueMinus1_8 = bitRateValueminus1[8];
				BitRateValueMinus1_9 = bitRateValueminus1[9];
				BitRateValueMinus1_10 = bitRateValueminus1[10];
				BitRateValueMinus1_11 = bitRateValueminus1[11];
				BitRateValueMinus1_12 = bitRateValueminus1[12];
				BitRateValueMinus1_13 = bitRateValueminus1[13];
				BitRateValueMinus1_14 = bitRateValueminus1[14];
				BitRateValueMinus1_15 = bitRateValueminus1[15];
				BitRateValueMinus1_16 = bitRateValueminus1[16];
				BitRateValueMinus1_17 = bitRateValueminus1[17];
				BitRateValueMinus1_18 = bitRateValueminus1[18];
				BitRateValueMinus1_19 = bitRateValueminus1[19];
				BitRateValueMinus1_20 = bitRateValueminus1[20];
				BitRateValueMinus1_21 = bitRateValueminus1[21];
				BitRateValueMinus1_22 = bitRateValueminus1[22];
				BitRateValueMinus1_23 = bitRateValueminus1[23];
				BitRateValueMinus1_24 = bitRateValueminus1[24];
				BitRateValueMinus1_25 = bitRateValueminus1[25];
				BitRateValueMinus1_26 = bitRateValueminus1[26];
				BitRateValueMinus1_27 = bitRateValueminus1[27];
				BitRateValueMinus1_28 = bitRateValueminus1[28];
				BitRateValueMinus1_29 = bitRateValueminus1[29];
				BitRateValueMinus1_30 = bitRateValueminus1[30];
				BitRateValueMinus1_31 = bitRateValueminus1[31];
			}
			if (cpbSizeValueminus1 != default)
			{
				CpbSizeValueMinus1_0 = cpbSizeValueminus1[0];
				CpbSizeValueMinus1_1 = cpbSizeValueminus1[1];
				CpbSizeValueMinus1_2 = cpbSizeValueminus1[2];
				CpbSizeValueMinus1_3 = cpbSizeValueminus1[3];
				CpbSizeValueMinus1_4 = cpbSizeValueminus1[4];
				CpbSizeValueMinus1_5 = cpbSizeValueminus1[5];
				CpbSizeValueMinus1_6 = cpbSizeValueminus1[6];
				CpbSizeValueMinus1_7 = cpbSizeValueminus1[7];
				CpbSizeValueMinus1_8 = cpbSizeValueminus1[8];
				CpbSizeValueMinus1_9 = cpbSizeValueminus1[9];
				CpbSizeValueMinus1_10 = cpbSizeValueminus1[10];
				CpbSizeValueMinus1_11 = cpbSizeValueminus1[11];
				CpbSizeValueMinus1_12 = cpbSizeValueminus1[12];
				CpbSizeValueMinus1_13 = cpbSizeValueminus1[13];
				CpbSizeValueMinus1_14 = cpbSizeValueminus1[14];
				CpbSizeValueMinus1_15 = cpbSizeValueminus1[15];
				CpbSizeValueMinus1_16 = cpbSizeValueminus1[16];
				CpbSizeValueMinus1_17 = cpbSizeValueminus1[17];
				CpbSizeValueMinus1_18 = cpbSizeValueminus1[18];
				CpbSizeValueMinus1_19 = cpbSizeValueminus1[19];
				CpbSizeValueMinus1_20 = cpbSizeValueminus1[20];
				CpbSizeValueMinus1_21 = cpbSizeValueminus1[21];
				CpbSizeValueMinus1_22 = cpbSizeValueminus1[22];
				CpbSizeValueMinus1_23 = cpbSizeValueminus1[23];
				CpbSizeValueMinus1_24 = cpbSizeValueminus1[24];
				CpbSizeValueMinus1_25 = cpbSizeValueminus1[25];
				CpbSizeValueMinus1_26 = cpbSizeValueminus1[26];
				CpbSizeValueMinus1_27 = cpbSizeValueminus1[27];
				CpbSizeValueMinus1_28 = cpbSizeValueminus1[28];
				CpbSizeValueMinus1_29 = cpbSizeValueminus1[29];
				CpbSizeValueMinus1_30 = cpbSizeValueminus1[30];
				CpbSizeValueMinus1_31 = cpbSizeValueminus1[31];
			}
			if (cbrFlag != default)
			{
				CbrFlag_0 = cbrFlag[0];
				CbrFlag_1 = cbrFlag[1];
				CbrFlag_2 = cbrFlag[2];
				CbrFlag_3 = cbrFlag[3];
				CbrFlag_4 = cbrFlag[4];
				CbrFlag_5 = cbrFlag[5];
				CbrFlag_6 = cbrFlag[6];
				CbrFlag_7 = cbrFlag[7];
				CbrFlag_8 = cbrFlag[8];
				CbrFlag_9 = cbrFlag[9];
				CbrFlag_10 = cbrFlag[10];
				CbrFlag_11 = cbrFlag[11];
				CbrFlag_12 = cbrFlag[12];
				CbrFlag_13 = cbrFlag[13];
				CbrFlag_14 = cbrFlag[14];
				CbrFlag_15 = cbrFlag[15];
				CbrFlag_16 = cbrFlag[16];
				CbrFlag_17 = cbrFlag[17];
				CbrFlag_18 = cbrFlag[18];
				CbrFlag_19 = cbrFlag[19];
				CbrFlag_20 = cbrFlag[20];
				CbrFlag_21 = cbrFlag[21];
				CbrFlag_22 = cbrFlag[22];
				CbrFlag_23 = cbrFlag[23];
				CbrFlag_24 = cbrFlag[24];
				CbrFlag_25 = cbrFlag[25];
				CbrFlag_26 = cbrFlag[26];
				CbrFlag_27 = cbrFlag[27];
				CbrFlag_28 = cbrFlag[28];
				CbrFlag_29 = cbrFlag[29];
				CbrFlag_30 = cbrFlag[30];
				CbrFlag_31 = cbrFlag[31];
			}
			InitialCpbRemovalDelayLengthMinus1 = initialCpbRemovalDelayLengthminus1;
			CpbRemovalDelayLengthMinus1 = cpbRemovalDelayLengthminus1;
			DpbOutputDelayLengthMinus1 = dpbOutputDelayLengthminus1;
			TimeOffsetLength = timeOffsetLength;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH264SequenceParameterSetVui")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH264SequenceParameterSetVui
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoH264SpsVuiFlags")]
		public StdVideoH264SpsVuiFlags Flags;
		[NativeName(NativeNameType.Field, "aspect_ratio_idc")]
		[NativeName(NativeNameType.Type, "StdVideoH264AspectRatioIdc")]
		public StdVideoH264AspectRatioIdc AspectRatioIdc;
		[NativeName(NativeNameType.Field, "sar_width")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort SarWidth;
		[NativeName(NativeNameType.Field, "sar_height")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort SarHeight;
		[NativeName(NativeNameType.Field, "video_format")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte VideoFormat;
		[NativeName(NativeNameType.Field, "colour_primaries")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte ColourPrimaries;
		[NativeName(NativeNameType.Field, "transfer_characteristics")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte TransferCharacteristics;
		[NativeName(NativeNameType.Field, "matrix_coefficients")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte MatrixCoefficients;
		[NativeName(NativeNameType.Field, "num_units_in_tick")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NumUnitsInTick;
		[NativeName(NativeNameType.Field, "time_scale")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint TimeScale;
		[NativeName(NativeNameType.Field, "max_num_reorder_frames")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte MaxNumReorderFrames;
		[NativeName(NativeNameType.Field, "max_dec_frame_buffering")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte MaxDecFrameBuffering;
		[NativeName(NativeNameType.Field, "chroma_sample_loc_type_top_field")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte ChromaSampleLocTypeTopField;
		[NativeName(NativeNameType.Field, "chroma_sample_loc_type_bottom_field")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte ChromaSampleLocTypeBottomField;
		[NativeName(NativeNameType.Field, "reserved1")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Reserved1;
		[NativeName(NativeNameType.Field, "pHrdParameters")]
		[NativeName(NativeNameType.Type, "const StdVideoH264HrdParameters*")]
		public unsafe StdVideoH264HrdParameters* PHrdParameters;

		public unsafe StdVideoH264SequenceParameterSetVui(StdVideoH264SpsVuiFlags flags = default, StdVideoH264AspectRatioIdc aspectRatioIdc = default, ushort sarWidth = default, ushort sarHeight = default, byte videoFormat = default, byte colourPrimaries = default, byte transferCharacteristics = default, byte matrixCoefficients = default, uint numUnitsInTick = default, uint timeScale = default, byte maxNumReorderFrames = default, byte maxDecFrameBuffering = default, byte chromaSampleLocTypeTopField = default, byte chromaSampleLocTypeBottomField = default, uint reserved1 = default, StdVideoH264HrdParameters* pHrdParameters = default)
		{
			Flags = flags;
			AspectRatioIdc = aspectRatioIdc;
			SarWidth = sarWidth;
			SarHeight = sarHeight;
			VideoFormat = videoFormat;
			ColourPrimaries = colourPrimaries;
			TransferCharacteristics = transferCharacteristics;
			MatrixCoefficients = matrixCoefficients;
			NumUnitsInTick = numUnitsInTick;
			TimeScale = timeScale;
			MaxNumReorderFrames = maxNumReorderFrames;
			MaxDecFrameBuffering = maxDecFrameBuffering;
			ChromaSampleLocTypeTopField = chromaSampleLocTypeTopField;
			ChromaSampleLocTypeBottomField = chromaSampleLocTypeBottomField;
			Reserved1 = reserved1;
			PHrdParameters = pHrdParameters;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH264SpsFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH264SpsFlags
	{
		[NativeName(NativeNameType.Field, "constraint_set0_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConstraintSet0Flag;
		[NativeName(NativeNameType.Field, "constraint_set1_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConstraintSet1Flag;
		[NativeName(NativeNameType.Field, "constraint_set2_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConstraintSet2Flag;
		[NativeName(NativeNameType.Field, "constraint_set3_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConstraintSet3Flag;
		[NativeName(NativeNameType.Field, "constraint_set4_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConstraintSet4Flag;
		[NativeName(NativeNameType.Field, "constraint_set5_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConstraintSet5Flag;
		[NativeName(NativeNameType.Field, "direct_8x8_inference_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Direct8x8InferenceFlag;
		[NativeName(NativeNameType.Field, "mb_adaptive_frame_field_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MbAdaptiveFrameFieldFlag;
		[NativeName(NativeNameType.Field, "frame_mbs_only_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FrameMbsOnlyFlag;
		[NativeName(NativeNameType.Field, "delta_pic_order_always_zero_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeltaPicOrderAlwaysZeroFlag;
		[NativeName(NativeNameType.Field, "separate_colour_plane_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SeparateColourPlaneFlag;
		[NativeName(NativeNameType.Field, "gaps_in_frame_num_value_allowed_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint GapsInFrameNumValueAllowedFlag;
		[NativeName(NativeNameType.Field, "qpprime_y_zero_transform_bypass_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint QpprimeYZeroTransformBypassFlag;
		[NativeName(NativeNameType.Field, "frame_cropping_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FrameCroppingFlag;
		[NativeName(NativeNameType.Field, "seq_scaling_matrix_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SeqScalingMatrixPresentFlag;
		[NativeName(NativeNameType.Field, "vui_parameters_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VuiParametersPresentFlag;

		public unsafe StdVideoH264SpsFlags(uint constraintset0Flag = default, uint constraintset1Flag = default, uint constraintset2Flag = default, uint constraintset3Flag = default, uint constraintset4Flag = default, uint constraintset5Flag = default, uint direct8x8InferenceFlag = default, uint mbAdaptiveFrameFieldFlag = default, uint frameMbsOnlyFlag = default, uint deltaPicOrderAlwaysZeroFlag = default, uint separateColourPlaneFlag = default, uint gapsInFrameNumValueAllowedFlag = default, uint qpprimeYZeroTransformBypassFlag = default, uint frameCroppingFlag = default, uint seqScalingMatrixPresentFlag = default, uint vuiParametersPresentFlag = default)
		{
			ConstraintSet0Flag = constraintset0Flag;
			ConstraintSet1Flag = constraintset1Flag;
			ConstraintSet2Flag = constraintset2Flag;
			ConstraintSet3Flag = constraintset3Flag;
			ConstraintSet4Flag = constraintset4Flag;
			ConstraintSet5Flag = constraintset5Flag;
			Direct8x8InferenceFlag = direct8x8InferenceFlag;
			MbAdaptiveFrameFieldFlag = mbAdaptiveFrameFieldFlag;
			FrameMbsOnlyFlag = frameMbsOnlyFlag;
			DeltaPicOrderAlwaysZeroFlag = deltaPicOrderAlwaysZeroFlag;
			SeparateColourPlaneFlag = separateColourPlaneFlag;
			GapsInFrameNumValueAllowedFlag = gapsInFrameNumValueAllowedFlag;
			QpprimeYZeroTransformBypassFlag = qpprimeYZeroTransformBypassFlag;
			FrameCroppingFlag = frameCroppingFlag;
			SeqScalingMatrixPresentFlag = seqScalingMatrixPresentFlag;
			VuiParametersPresentFlag = vuiParametersPresentFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH264ScalingLists")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH264ScalingLists
	{
		[NativeName(NativeNameType.Field, "scaling_list_present_mask")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort ScalingListPresentMask;
		[NativeName(NativeNameType.Field, "use_default_scaling_matrix_mask")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort UseDefaultScalingMatrixMask;
		[NativeName(NativeNameType.Field, "ScalingList4x4")]
		[NativeName(NativeNameType.Type, "uint8_t[16][6]")]
		public unsafe byte* ScalingList4x4_0;
		public unsafe byte* ScalingList4x4_1;
		public unsafe byte* ScalingList4x4_2;
		public unsafe byte* ScalingList4x4_3;
		public unsafe byte* ScalingList4x4_4;
		public unsafe byte* ScalingList4x4_5;
		[NativeName(NativeNameType.Field, "ScalingList8x8")]
		[NativeName(NativeNameType.Type, "uint8_t[64][6]")]
		public unsafe byte* ScalingList8x8_0;
		public unsafe byte* ScalingList8x8_1;
		public unsafe byte* ScalingList8x8_2;
		public unsafe byte* ScalingList8x8_3;
		public unsafe byte* ScalingList8x8_4;
		public unsafe byte* ScalingList8x8_5;

		public unsafe StdVideoH264ScalingLists(ushort scalingListPresentMask = default, ushort useDefaultScalingMatrixMask = default, byte** scalingList4X4 = default, byte** scalingList8X8 = default)
		{
			ScalingListPresentMask = scalingListPresentMask;
			UseDefaultScalingMatrixMask = useDefaultScalingMatrixMask;
			if (scalingList4X4 != default)
			{
				ScalingList4x4_0 = scalingList4X4[0];
				ScalingList4x4_1 = scalingList4X4[1];
				ScalingList4x4_2 = scalingList4X4[2];
				ScalingList4x4_3 = scalingList4X4[3];
				ScalingList4x4_4 = scalingList4X4[4];
				ScalingList4x4_5 = scalingList4X4[5];
			}
			if (scalingList8X8 != default)
			{
				ScalingList8x8_0 = scalingList8X8[0];
				ScalingList8x8_1 = scalingList8X8[1];
				ScalingList8x8_2 = scalingList8X8[2];
				ScalingList8x8_3 = scalingList8X8[3];
				ScalingList8x8_4 = scalingList8X8[4];
				ScalingList8x8_5 = scalingList8X8[5];
			}
		}

		public unsafe StdVideoH264ScalingLists(ushort scalingListPresentMask = default, ushort useDefaultScalingMatrixMask = default, Span<Pointer<byte>> scalingList4X4 = default, Span<Pointer<byte>> scalingList8X8 = default)
		{
			ScalingListPresentMask = scalingListPresentMask;
			UseDefaultScalingMatrixMask = useDefaultScalingMatrixMask;
			if (scalingList4X4 != default)
			{
				ScalingList4x4_0 = scalingList4X4[0];
				ScalingList4x4_1 = scalingList4X4[1];
				ScalingList4x4_2 = scalingList4X4[2];
				ScalingList4x4_3 = scalingList4X4[3];
				ScalingList4x4_4 = scalingList4X4[4];
				ScalingList4x4_5 = scalingList4X4[5];
			}
			if (scalingList8X8 != default)
			{
				ScalingList8x8_0 = scalingList8X8[0];
				ScalingList8x8_1 = scalingList8X8[1];
				ScalingList8x8_2 = scalingList8X8[2];
				ScalingList8x8_3 = scalingList8X8[3];
				ScalingList8x8_4 = scalingList8X8[4];
				ScalingList8x8_5 = scalingList8X8[5];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH264SequenceParameterSet")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH264SequenceParameterSet
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoH264SpsFlags")]
		public StdVideoH264SpsFlags Flags;
		[NativeName(NativeNameType.Field, "profile_idc")]
		[NativeName(NativeNameType.Type, "StdVideoH264ProfileIdc")]
		public StdVideoH264ProfileIdc ProfileIdc;
		[NativeName(NativeNameType.Field, "level_idc")]
		[NativeName(NativeNameType.Type, "StdVideoH264LevelIdc")]
		public StdVideoH264LevelIdc LevelIdc;
		[NativeName(NativeNameType.Field, "chroma_format_idc")]
		[NativeName(NativeNameType.Type, "StdVideoH264ChromaFormatIdc")]
		public StdVideoH264ChromaFormatIdc ChromaFormatIdc;
		[NativeName(NativeNameType.Field, "seq_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte SeqParameterSetId;
		[NativeName(NativeNameType.Field, "bit_depth_luma_minus8")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte BitDepthLumaMinus8;
		[NativeName(NativeNameType.Field, "bit_depth_chroma_minus8")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte BitDepthChromaMinus8;
		[NativeName(NativeNameType.Field, "log2_max_frame_num_minus4")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2MaxFrameNumMinus4;
		[NativeName(NativeNameType.Field, "pic_order_cnt_type")]
		[NativeName(NativeNameType.Type, "StdVideoH264PocType")]
		public StdVideoH264PocType PicOrderCntType;
		[NativeName(NativeNameType.Field, "offset_for_non_ref_pic")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int OffsetForNonRefPic;
		[NativeName(NativeNameType.Field, "offset_for_top_to_bottom_field")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int OffsetForTopToBottomField;
		[NativeName(NativeNameType.Field, "log2_max_pic_order_cnt_lsb_minus4")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2MaxPicOrderCntLsbMinus4;
		[NativeName(NativeNameType.Field, "num_ref_frames_in_pic_order_cnt_cycle")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumRefFramesInPicOrderCntCycle;
		[NativeName(NativeNameType.Field, "max_num_ref_frames")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte MaxNumRefFrames;
		[NativeName(NativeNameType.Field, "reserved1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved1;
		[NativeName(NativeNameType.Field, "pic_width_in_mbs_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PicWidthInMbsMinus1;
		[NativeName(NativeNameType.Field, "pic_height_in_map_units_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PicHeightInMapUnitsMinus1;
		[NativeName(NativeNameType.Field, "frame_crop_left_offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FrameCropLeftOffset;
		[NativeName(NativeNameType.Field, "frame_crop_right_offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FrameCropRightOffset;
		[NativeName(NativeNameType.Field, "frame_crop_top_offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FrameCropTopOffset;
		[NativeName(NativeNameType.Field, "frame_crop_bottom_offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FrameCropBottomOffset;
		[NativeName(NativeNameType.Field, "reserved2")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Reserved2;
		[NativeName(NativeNameType.Field, "pOffsetForRefFrame")]
		[NativeName(NativeNameType.Type, "const int32_t*")]
		public unsafe int* POffsetForRefFrame;
		[NativeName(NativeNameType.Field, "pScalingLists")]
		[NativeName(NativeNameType.Type, "const StdVideoH264ScalingLists*")]
		public unsafe StdVideoH264ScalingLists* PScalingLists;
		[NativeName(NativeNameType.Field, "pSequenceParameterSetVui")]
		[NativeName(NativeNameType.Type, "const StdVideoH264SequenceParameterSetVui*")]
		public unsafe StdVideoH264SequenceParameterSetVui* PSequenceParameterSetVui;

		public unsafe StdVideoH264SequenceParameterSet(StdVideoH264SpsFlags flags = default, StdVideoH264ProfileIdc profileIdc = default, StdVideoH264LevelIdc levelIdc = default, StdVideoH264ChromaFormatIdc chromaFormatIdc = default, byte seqParameterSetId = default, byte bitDepthLumaminus8 = default, byte bitDepthChromaminus8 = default, byte log2MaxFrameNumminus4 = default, StdVideoH264PocType picOrderCntType = default, int offsetForNonRefPic = default, int offsetForTopToBottomField = default, byte log2MaxPicOrderCntLsbminus4 = default, byte numRefFramesInPicOrderCntCycle = default, byte maxNumRefFrames = default, byte reserved1 = default, uint picWidthInMbsminus1 = default, uint picHeightInMapUnitsminus1 = default, uint frameCropLeftOffset = default, uint frameCropRightOffset = default, uint frameCropTopOffset = default, uint frameCropBottomOffset = default, uint reserved2 = default, int* pOffsetForRefFrame = default, StdVideoH264ScalingLists* pScalingLists = default, StdVideoH264SequenceParameterSetVui* pSequenceParameterSetVui = default)
		{
			Flags = flags;
			ProfileIdc = profileIdc;
			LevelIdc = levelIdc;
			ChromaFormatIdc = chromaFormatIdc;
			SeqParameterSetId = seqParameterSetId;
			BitDepthLumaMinus8 = bitDepthLumaminus8;
			BitDepthChromaMinus8 = bitDepthChromaminus8;
			Log2MaxFrameNumMinus4 = log2MaxFrameNumminus4;
			PicOrderCntType = picOrderCntType;
			OffsetForNonRefPic = offsetForNonRefPic;
			OffsetForTopToBottomField = offsetForTopToBottomField;
			Log2MaxPicOrderCntLsbMinus4 = log2MaxPicOrderCntLsbminus4;
			NumRefFramesInPicOrderCntCycle = numRefFramesInPicOrderCntCycle;
			MaxNumRefFrames = maxNumRefFrames;
			Reserved1 = reserved1;
			PicWidthInMbsMinus1 = picWidthInMbsminus1;
			PicHeightInMapUnitsMinus1 = picHeightInMapUnitsminus1;
			FrameCropLeftOffset = frameCropLeftOffset;
			FrameCropRightOffset = frameCropRightOffset;
			FrameCropTopOffset = frameCropTopOffset;
			FrameCropBottomOffset = frameCropBottomOffset;
			Reserved2 = reserved2;
			POffsetForRefFrame = pOffsetForRefFrame;
			PScalingLists = pScalingLists;
			PSequenceParameterSetVui = pSequenceParameterSetVui;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH264PpsFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH264PpsFlags
	{
		[NativeName(NativeNameType.Field, "transform_8x8_mode_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Transform8x8ModeFlag;
		[NativeName(NativeNameType.Field, "redundant_pic_cnt_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint RedundantPicCntPresentFlag;
		[NativeName(NativeNameType.Field, "constrained_intra_pred_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConstrainedIntraPredFlag;
		[NativeName(NativeNameType.Field, "deblocking_filter_control_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeblockingFilterControlPresentFlag;
		[NativeName(NativeNameType.Field, "weighted_pred_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint WeightedPredFlag;
		[NativeName(NativeNameType.Field, "bottom_field_pic_order_in_frame_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BottomFieldPicOrderInFramePresentFlag;
		[NativeName(NativeNameType.Field, "entropy_coding_mode_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint EntropyCodingModeFlag;
		[NativeName(NativeNameType.Field, "pic_scaling_matrix_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PicScalingMatrixPresentFlag;

		public unsafe StdVideoH264PpsFlags(uint transform8x8ModeFlag = default, uint redundantPicCntPresentFlag = default, uint constrainedIntraPredFlag = default, uint deblockingFilterControlPresentFlag = default, uint weightedPredFlag = default, uint bottomFieldPicOrderInFramePresentFlag = default, uint entropyCodingModeFlag = default, uint picScalingMatrixPresentFlag = default)
		{
			Transform8x8ModeFlag = transform8x8ModeFlag;
			RedundantPicCntPresentFlag = redundantPicCntPresentFlag;
			ConstrainedIntraPredFlag = constrainedIntraPredFlag;
			DeblockingFilterControlPresentFlag = deblockingFilterControlPresentFlag;
			WeightedPredFlag = weightedPredFlag;
			BottomFieldPicOrderInFramePresentFlag = bottomFieldPicOrderInFramePresentFlag;
			EntropyCodingModeFlag = entropyCodingModeFlag;
			PicScalingMatrixPresentFlag = picScalingMatrixPresentFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH264PictureParameterSet")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH264PictureParameterSet
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoH264PpsFlags")]
		public StdVideoH264PpsFlags Flags;
		[NativeName(NativeNameType.Field, "seq_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte SeqParameterSetId;
		[NativeName(NativeNameType.Field, "pic_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PicParameterSetId;
		[NativeName(NativeNameType.Field, "num_ref_idx_l0_default_active_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumRefIdxL0DefaultActiveMinus1;
		[NativeName(NativeNameType.Field, "num_ref_idx_l1_default_active_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumRefIdxL1DefaultActiveMinus1;
		[NativeName(NativeNameType.Field, "weighted_bipred_idc")]
		[NativeName(NativeNameType.Type, "StdVideoH264WeightedBipredIdc")]
		public StdVideoH264WeightedBipredIdc WeightedBipredIdc;
		[NativeName(NativeNameType.Field, "pic_init_qp_minus26")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte PicInitQpMinus26;
		[NativeName(NativeNameType.Field, "pic_init_qs_minus26")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte PicInitQsMinus26;
		[NativeName(NativeNameType.Field, "chroma_qp_index_offset")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte ChromaQpIndexOffset;
		[NativeName(NativeNameType.Field, "second_chroma_qp_index_offset")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte SecondChromaQpIndexOffset;
		[NativeName(NativeNameType.Field, "pScalingLists")]
		[NativeName(NativeNameType.Type, "const StdVideoH264ScalingLists*")]
		public unsafe StdVideoH264ScalingLists* PScalingLists;

		public unsafe StdVideoH264PictureParameterSet(StdVideoH264PpsFlags flags = default, byte seqParameterSetId = default, byte picParameterSetId = default, byte numRefIdxl0DefaultActiveminus1 = default, byte numRefIdxl1DefaultActiveminus1 = default, StdVideoH264WeightedBipredIdc weightedBipredIdc = default, byte picInitQpminus26 = default, byte picInitQsminus26 = default, byte chromaQpIndexOffset = default, byte secondChromaQpIndexOffset = default, StdVideoH264ScalingLists* pScalingLists = default)
		{
			Flags = flags;
			SeqParameterSetId = seqParameterSetId;
			PicParameterSetId = picParameterSetId;
			NumRefIdxL0DefaultActiveMinus1 = numRefIdxl0DefaultActiveminus1;
			NumRefIdxL1DefaultActiveMinus1 = numRefIdxl1DefaultActiveminus1;
			WeightedBipredIdc = weightedBipredIdc;
			PicInitQpMinus26 = picInitQpminus26;
			PicInitQsMinus26 = picInitQsminus26;
			ChromaQpIndexOffset = chromaQpIndexOffset;
			SecondChromaQpIndexOffset = secondChromaQpIndexOffset;
			PScalingLists = pScalingLists;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265DecPicBufMgr")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265DecPicBufMgr
	{
		[NativeName(NativeNameType.Field, "max_latency_increase_plus1")]
		[NativeName(NativeNameType.Type, "uint32_t[7]")]
		public uint MaxLatencyIncreasePlus1_0;
		public uint MaxLatencyIncreasePlus1_1;
		public uint MaxLatencyIncreasePlus1_2;
		public uint MaxLatencyIncreasePlus1_3;
		public uint MaxLatencyIncreasePlus1_4;
		public uint MaxLatencyIncreasePlus1_5;
		public uint MaxLatencyIncreasePlus1_6;
		[NativeName(NativeNameType.Field, "max_dec_pic_buffering_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t[7]")]
		public byte MaxDecPicBufferingMinus1_0;
		public byte MaxDecPicBufferingMinus1_1;
		public byte MaxDecPicBufferingMinus1_2;
		public byte MaxDecPicBufferingMinus1_3;
		public byte MaxDecPicBufferingMinus1_4;
		public byte MaxDecPicBufferingMinus1_5;
		public byte MaxDecPicBufferingMinus1_6;
		[NativeName(NativeNameType.Field, "max_num_reorder_pics")]
		[NativeName(NativeNameType.Type, "uint8_t[7]")]
		public byte MaxNumReorderPics_0;
		public byte MaxNumReorderPics_1;
		public byte MaxNumReorderPics_2;
		public byte MaxNumReorderPics_3;
		public byte MaxNumReorderPics_4;
		public byte MaxNumReorderPics_5;
		public byte MaxNumReorderPics_6;

		public unsafe StdVideoH265DecPicBufMgr(uint* maxLatencyIncreaseplus1 = default, byte* maxDecPicBufferingminus1 = default, byte* maxNumReorderPics = default)
		{
			if (maxLatencyIncreaseplus1 != default)
			{
				MaxLatencyIncreasePlus1_0 = maxLatencyIncreaseplus1[0];
				MaxLatencyIncreasePlus1_1 = maxLatencyIncreaseplus1[1];
				MaxLatencyIncreasePlus1_2 = maxLatencyIncreaseplus1[2];
				MaxLatencyIncreasePlus1_3 = maxLatencyIncreaseplus1[3];
				MaxLatencyIncreasePlus1_4 = maxLatencyIncreaseplus1[4];
				MaxLatencyIncreasePlus1_5 = maxLatencyIncreaseplus1[5];
				MaxLatencyIncreasePlus1_6 = maxLatencyIncreaseplus1[6];
			}
			if (maxDecPicBufferingminus1 != default)
			{
				MaxDecPicBufferingMinus1_0 = maxDecPicBufferingminus1[0];
				MaxDecPicBufferingMinus1_1 = maxDecPicBufferingminus1[1];
				MaxDecPicBufferingMinus1_2 = maxDecPicBufferingminus1[2];
				MaxDecPicBufferingMinus1_3 = maxDecPicBufferingminus1[3];
				MaxDecPicBufferingMinus1_4 = maxDecPicBufferingminus1[4];
				MaxDecPicBufferingMinus1_5 = maxDecPicBufferingminus1[5];
				MaxDecPicBufferingMinus1_6 = maxDecPicBufferingminus1[6];
			}
			if (maxNumReorderPics != default)
			{
				MaxNumReorderPics_0 = maxNumReorderPics[0];
				MaxNumReorderPics_1 = maxNumReorderPics[1];
				MaxNumReorderPics_2 = maxNumReorderPics[2];
				MaxNumReorderPics_3 = maxNumReorderPics[3];
				MaxNumReorderPics_4 = maxNumReorderPics[4];
				MaxNumReorderPics_5 = maxNumReorderPics[5];
				MaxNumReorderPics_6 = maxNumReorderPics[6];
			}
		}

		public unsafe StdVideoH265DecPicBufMgr(Span<uint> maxLatencyIncreaseplus1 = default, Span<byte> maxDecPicBufferingminus1 = default, Span<byte> maxNumReorderPics = default)
		{
			if (maxLatencyIncreaseplus1 != default)
			{
				MaxLatencyIncreasePlus1_0 = maxLatencyIncreaseplus1[0];
				MaxLatencyIncreasePlus1_1 = maxLatencyIncreaseplus1[1];
				MaxLatencyIncreasePlus1_2 = maxLatencyIncreaseplus1[2];
				MaxLatencyIncreasePlus1_3 = maxLatencyIncreaseplus1[3];
				MaxLatencyIncreasePlus1_4 = maxLatencyIncreaseplus1[4];
				MaxLatencyIncreasePlus1_5 = maxLatencyIncreaseplus1[5];
				MaxLatencyIncreasePlus1_6 = maxLatencyIncreaseplus1[6];
			}
			if (maxDecPicBufferingminus1 != default)
			{
				MaxDecPicBufferingMinus1_0 = maxDecPicBufferingminus1[0];
				MaxDecPicBufferingMinus1_1 = maxDecPicBufferingminus1[1];
				MaxDecPicBufferingMinus1_2 = maxDecPicBufferingminus1[2];
				MaxDecPicBufferingMinus1_3 = maxDecPicBufferingminus1[3];
				MaxDecPicBufferingMinus1_4 = maxDecPicBufferingminus1[4];
				MaxDecPicBufferingMinus1_5 = maxDecPicBufferingminus1[5];
				MaxDecPicBufferingMinus1_6 = maxDecPicBufferingminus1[6];
			}
			if (maxNumReorderPics != default)
			{
				MaxNumReorderPics_0 = maxNumReorderPics[0];
				MaxNumReorderPics_1 = maxNumReorderPics[1];
				MaxNumReorderPics_2 = maxNumReorderPics[2];
				MaxNumReorderPics_3 = maxNumReorderPics[3];
				MaxNumReorderPics_4 = maxNumReorderPics[4];
				MaxNumReorderPics_5 = maxNumReorderPics[5];
				MaxNumReorderPics_6 = maxNumReorderPics[6];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265SubLayerHrdParameters")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265SubLayerHrdParameters
	{
		[NativeName(NativeNameType.Field, "bit_rate_value_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t[32]")]
		public uint BitRateValueMinus1_0;
		public uint BitRateValueMinus1_1;
		public uint BitRateValueMinus1_2;
		public uint BitRateValueMinus1_3;
		public uint BitRateValueMinus1_4;
		public uint BitRateValueMinus1_5;
		public uint BitRateValueMinus1_6;
		public uint BitRateValueMinus1_7;
		public uint BitRateValueMinus1_8;
		public uint BitRateValueMinus1_9;
		public uint BitRateValueMinus1_10;
		public uint BitRateValueMinus1_11;
		public uint BitRateValueMinus1_12;
		public uint BitRateValueMinus1_13;
		public uint BitRateValueMinus1_14;
		public uint BitRateValueMinus1_15;
		public uint BitRateValueMinus1_16;
		public uint BitRateValueMinus1_17;
		public uint BitRateValueMinus1_18;
		public uint BitRateValueMinus1_19;
		public uint BitRateValueMinus1_20;
		public uint BitRateValueMinus1_21;
		public uint BitRateValueMinus1_22;
		public uint BitRateValueMinus1_23;
		public uint BitRateValueMinus1_24;
		public uint BitRateValueMinus1_25;
		public uint BitRateValueMinus1_26;
		public uint BitRateValueMinus1_27;
		public uint BitRateValueMinus1_28;
		public uint BitRateValueMinus1_29;
		public uint BitRateValueMinus1_30;
		public uint BitRateValueMinus1_31;
		[NativeName(NativeNameType.Field, "cpb_size_value_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t[32]")]
		public uint CpbSizeValueMinus1_0;
		public uint CpbSizeValueMinus1_1;
		public uint CpbSizeValueMinus1_2;
		public uint CpbSizeValueMinus1_3;
		public uint CpbSizeValueMinus1_4;
		public uint CpbSizeValueMinus1_5;
		public uint CpbSizeValueMinus1_6;
		public uint CpbSizeValueMinus1_7;
		public uint CpbSizeValueMinus1_8;
		public uint CpbSizeValueMinus1_9;
		public uint CpbSizeValueMinus1_10;
		public uint CpbSizeValueMinus1_11;
		public uint CpbSizeValueMinus1_12;
		public uint CpbSizeValueMinus1_13;
		public uint CpbSizeValueMinus1_14;
		public uint CpbSizeValueMinus1_15;
		public uint CpbSizeValueMinus1_16;
		public uint CpbSizeValueMinus1_17;
		public uint CpbSizeValueMinus1_18;
		public uint CpbSizeValueMinus1_19;
		public uint CpbSizeValueMinus1_20;
		public uint CpbSizeValueMinus1_21;
		public uint CpbSizeValueMinus1_22;
		public uint CpbSizeValueMinus1_23;
		public uint CpbSizeValueMinus1_24;
		public uint CpbSizeValueMinus1_25;
		public uint CpbSizeValueMinus1_26;
		public uint CpbSizeValueMinus1_27;
		public uint CpbSizeValueMinus1_28;
		public uint CpbSizeValueMinus1_29;
		public uint CpbSizeValueMinus1_30;
		public uint CpbSizeValueMinus1_31;
		[NativeName(NativeNameType.Field, "cpb_size_du_value_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t[32]")]
		public uint CpbSizeDuValueMinus1_0;
		public uint CpbSizeDuValueMinus1_1;
		public uint CpbSizeDuValueMinus1_2;
		public uint CpbSizeDuValueMinus1_3;
		public uint CpbSizeDuValueMinus1_4;
		public uint CpbSizeDuValueMinus1_5;
		public uint CpbSizeDuValueMinus1_6;
		public uint CpbSizeDuValueMinus1_7;
		public uint CpbSizeDuValueMinus1_8;
		public uint CpbSizeDuValueMinus1_9;
		public uint CpbSizeDuValueMinus1_10;
		public uint CpbSizeDuValueMinus1_11;
		public uint CpbSizeDuValueMinus1_12;
		public uint CpbSizeDuValueMinus1_13;
		public uint CpbSizeDuValueMinus1_14;
		public uint CpbSizeDuValueMinus1_15;
		public uint CpbSizeDuValueMinus1_16;
		public uint CpbSizeDuValueMinus1_17;
		public uint CpbSizeDuValueMinus1_18;
		public uint CpbSizeDuValueMinus1_19;
		public uint CpbSizeDuValueMinus1_20;
		public uint CpbSizeDuValueMinus1_21;
		public uint CpbSizeDuValueMinus1_22;
		public uint CpbSizeDuValueMinus1_23;
		public uint CpbSizeDuValueMinus1_24;
		public uint CpbSizeDuValueMinus1_25;
		public uint CpbSizeDuValueMinus1_26;
		public uint CpbSizeDuValueMinus1_27;
		public uint CpbSizeDuValueMinus1_28;
		public uint CpbSizeDuValueMinus1_29;
		public uint CpbSizeDuValueMinus1_30;
		public uint CpbSizeDuValueMinus1_31;
		[NativeName(NativeNameType.Field, "bit_rate_du_value_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t[32]")]
		public uint BitRateDuValueMinus1_0;
		public uint BitRateDuValueMinus1_1;
		public uint BitRateDuValueMinus1_2;
		public uint BitRateDuValueMinus1_3;
		public uint BitRateDuValueMinus1_4;
		public uint BitRateDuValueMinus1_5;
		public uint BitRateDuValueMinus1_6;
		public uint BitRateDuValueMinus1_7;
		public uint BitRateDuValueMinus1_8;
		public uint BitRateDuValueMinus1_9;
		public uint BitRateDuValueMinus1_10;
		public uint BitRateDuValueMinus1_11;
		public uint BitRateDuValueMinus1_12;
		public uint BitRateDuValueMinus1_13;
		public uint BitRateDuValueMinus1_14;
		public uint BitRateDuValueMinus1_15;
		public uint BitRateDuValueMinus1_16;
		public uint BitRateDuValueMinus1_17;
		public uint BitRateDuValueMinus1_18;
		public uint BitRateDuValueMinus1_19;
		public uint BitRateDuValueMinus1_20;
		public uint BitRateDuValueMinus1_21;
		public uint BitRateDuValueMinus1_22;
		public uint BitRateDuValueMinus1_23;
		public uint BitRateDuValueMinus1_24;
		public uint BitRateDuValueMinus1_25;
		public uint BitRateDuValueMinus1_26;
		public uint BitRateDuValueMinus1_27;
		public uint BitRateDuValueMinus1_28;
		public uint BitRateDuValueMinus1_29;
		public uint BitRateDuValueMinus1_30;
		public uint BitRateDuValueMinus1_31;
		[NativeName(NativeNameType.Field, "cbr_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CbrFlag;

		public unsafe StdVideoH265SubLayerHrdParameters(uint* bitRateValueminus1 = default, uint* cpbSizeValueminus1 = default, uint* cpbSizeDuValueminus1 = default, uint* bitRateDuValueminus1 = default, uint cbrFlag = default)
		{
			if (bitRateValueminus1 != default)
			{
				BitRateValueMinus1_0 = bitRateValueminus1[0];
				BitRateValueMinus1_1 = bitRateValueminus1[1];
				BitRateValueMinus1_2 = bitRateValueminus1[2];
				BitRateValueMinus1_3 = bitRateValueminus1[3];
				BitRateValueMinus1_4 = bitRateValueminus1[4];
				BitRateValueMinus1_5 = bitRateValueminus1[5];
				BitRateValueMinus1_6 = bitRateValueminus1[6];
				BitRateValueMinus1_7 = bitRateValueminus1[7];
				BitRateValueMinus1_8 = bitRateValueminus1[8];
				BitRateValueMinus1_9 = bitRateValueminus1[9];
				BitRateValueMinus1_10 = bitRateValueminus1[10];
				BitRateValueMinus1_11 = bitRateValueminus1[11];
				BitRateValueMinus1_12 = bitRateValueminus1[12];
				BitRateValueMinus1_13 = bitRateValueminus1[13];
				BitRateValueMinus1_14 = bitRateValueminus1[14];
				BitRateValueMinus1_15 = bitRateValueminus1[15];
				BitRateValueMinus1_16 = bitRateValueminus1[16];
				BitRateValueMinus1_17 = bitRateValueminus1[17];
				BitRateValueMinus1_18 = bitRateValueminus1[18];
				BitRateValueMinus1_19 = bitRateValueminus1[19];
				BitRateValueMinus1_20 = bitRateValueminus1[20];
				BitRateValueMinus1_21 = bitRateValueminus1[21];
				BitRateValueMinus1_22 = bitRateValueminus1[22];
				BitRateValueMinus1_23 = bitRateValueminus1[23];
				BitRateValueMinus1_24 = bitRateValueminus1[24];
				BitRateValueMinus1_25 = bitRateValueminus1[25];
				BitRateValueMinus1_26 = bitRateValueminus1[26];
				BitRateValueMinus1_27 = bitRateValueminus1[27];
				BitRateValueMinus1_28 = bitRateValueminus1[28];
				BitRateValueMinus1_29 = bitRateValueminus1[29];
				BitRateValueMinus1_30 = bitRateValueminus1[30];
				BitRateValueMinus1_31 = bitRateValueminus1[31];
			}
			if (cpbSizeValueminus1 != default)
			{
				CpbSizeValueMinus1_0 = cpbSizeValueminus1[0];
				CpbSizeValueMinus1_1 = cpbSizeValueminus1[1];
				CpbSizeValueMinus1_2 = cpbSizeValueminus1[2];
				CpbSizeValueMinus1_3 = cpbSizeValueminus1[3];
				CpbSizeValueMinus1_4 = cpbSizeValueminus1[4];
				CpbSizeValueMinus1_5 = cpbSizeValueminus1[5];
				CpbSizeValueMinus1_6 = cpbSizeValueminus1[6];
				CpbSizeValueMinus1_7 = cpbSizeValueminus1[7];
				CpbSizeValueMinus1_8 = cpbSizeValueminus1[8];
				CpbSizeValueMinus1_9 = cpbSizeValueminus1[9];
				CpbSizeValueMinus1_10 = cpbSizeValueminus1[10];
				CpbSizeValueMinus1_11 = cpbSizeValueminus1[11];
				CpbSizeValueMinus1_12 = cpbSizeValueminus1[12];
				CpbSizeValueMinus1_13 = cpbSizeValueminus1[13];
				CpbSizeValueMinus1_14 = cpbSizeValueminus1[14];
				CpbSizeValueMinus1_15 = cpbSizeValueminus1[15];
				CpbSizeValueMinus1_16 = cpbSizeValueminus1[16];
				CpbSizeValueMinus1_17 = cpbSizeValueminus1[17];
				CpbSizeValueMinus1_18 = cpbSizeValueminus1[18];
				CpbSizeValueMinus1_19 = cpbSizeValueminus1[19];
				CpbSizeValueMinus1_20 = cpbSizeValueminus1[20];
				CpbSizeValueMinus1_21 = cpbSizeValueminus1[21];
				CpbSizeValueMinus1_22 = cpbSizeValueminus1[22];
				CpbSizeValueMinus1_23 = cpbSizeValueminus1[23];
				CpbSizeValueMinus1_24 = cpbSizeValueminus1[24];
				CpbSizeValueMinus1_25 = cpbSizeValueminus1[25];
				CpbSizeValueMinus1_26 = cpbSizeValueminus1[26];
				CpbSizeValueMinus1_27 = cpbSizeValueminus1[27];
				CpbSizeValueMinus1_28 = cpbSizeValueminus1[28];
				CpbSizeValueMinus1_29 = cpbSizeValueminus1[29];
				CpbSizeValueMinus1_30 = cpbSizeValueminus1[30];
				CpbSizeValueMinus1_31 = cpbSizeValueminus1[31];
			}
			if (cpbSizeDuValueminus1 != default)
			{
				CpbSizeDuValueMinus1_0 = cpbSizeDuValueminus1[0];
				CpbSizeDuValueMinus1_1 = cpbSizeDuValueminus1[1];
				CpbSizeDuValueMinus1_2 = cpbSizeDuValueminus1[2];
				CpbSizeDuValueMinus1_3 = cpbSizeDuValueminus1[3];
				CpbSizeDuValueMinus1_4 = cpbSizeDuValueminus1[4];
				CpbSizeDuValueMinus1_5 = cpbSizeDuValueminus1[5];
				CpbSizeDuValueMinus1_6 = cpbSizeDuValueminus1[6];
				CpbSizeDuValueMinus1_7 = cpbSizeDuValueminus1[7];
				CpbSizeDuValueMinus1_8 = cpbSizeDuValueminus1[8];
				CpbSizeDuValueMinus1_9 = cpbSizeDuValueminus1[9];
				CpbSizeDuValueMinus1_10 = cpbSizeDuValueminus1[10];
				CpbSizeDuValueMinus1_11 = cpbSizeDuValueminus1[11];
				CpbSizeDuValueMinus1_12 = cpbSizeDuValueminus1[12];
				CpbSizeDuValueMinus1_13 = cpbSizeDuValueminus1[13];
				CpbSizeDuValueMinus1_14 = cpbSizeDuValueminus1[14];
				CpbSizeDuValueMinus1_15 = cpbSizeDuValueminus1[15];
				CpbSizeDuValueMinus1_16 = cpbSizeDuValueminus1[16];
				CpbSizeDuValueMinus1_17 = cpbSizeDuValueminus1[17];
				CpbSizeDuValueMinus1_18 = cpbSizeDuValueminus1[18];
				CpbSizeDuValueMinus1_19 = cpbSizeDuValueminus1[19];
				CpbSizeDuValueMinus1_20 = cpbSizeDuValueminus1[20];
				CpbSizeDuValueMinus1_21 = cpbSizeDuValueminus1[21];
				CpbSizeDuValueMinus1_22 = cpbSizeDuValueminus1[22];
				CpbSizeDuValueMinus1_23 = cpbSizeDuValueminus1[23];
				CpbSizeDuValueMinus1_24 = cpbSizeDuValueminus1[24];
				CpbSizeDuValueMinus1_25 = cpbSizeDuValueminus1[25];
				CpbSizeDuValueMinus1_26 = cpbSizeDuValueminus1[26];
				CpbSizeDuValueMinus1_27 = cpbSizeDuValueminus1[27];
				CpbSizeDuValueMinus1_28 = cpbSizeDuValueminus1[28];
				CpbSizeDuValueMinus1_29 = cpbSizeDuValueminus1[29];
				CpbSizeDuValueMinus1_30 = cpbSizeDuValueminus1[30];
				CpbSizeDuValueMinus1_31 = cpbSizeDuValueminus1[31];
			}
			if (bitRateDuValueminus1 != default)
			{
				BitRateDuValueMinus1_0 = bitRateDuValueminus1[0];
				BitRateDuValueMinus1_1 = bitRateDuValueminus1[1];
				BitRateDuValueMinus1_2 = bitRateDuValueminus1[2];
				BitRateDuValueMinus1_3 = bitRateDuValueminus1[3];
				BitRateDuValueMinus1_4 = bitRateDuValueminus1[4];
				BitRateDuValueMinus1_5 = bitRateDuValueminus1[5];
				BitRateDuValueMinus1_6 = bitRateDuValueminus1[6];
				BitRateDuValueMinus1_7 = bitRateDuValueminus1[7];
				BitRateDuValueMinus1_8 = bitRateDuValueminus1[8];
				BitRateDuValueMinus1_9 = bitRateDuValueminus1[9];
				BitRateDuValueMinus1_10 = bitRateDuValueminus1[10];
				BitRateDuValueMinus1_11 = bitRateDuValueminus1[11];
				BitRateDuValueMinus1_12 = bitRateDuValueminus1[12];
				BitRateDuValueMinus1_13 = bitRateDuValueminus1[13];
				BitRateDuValueMinus1_14 = bitRateDuValueminus1[14];
				BitRateDuValueMinus1_15 = bitRateDuValueminus1[15];
				BitRateDuValueMinus1_16 = bitRateDuValueminus1[16];
				BitRateDuValueMinus1_17 = bitRateDuValueminus1[17];
				BitRateDuValueMinus1_18 = bitRateDuValueminus1[18];
				BitRateDuValueMinus1_19 = bitRateDuValueminus1[19];
				BitRateDuValueMinus1_20 = bitRateDuValueminus1[20];
				BitRateDuValueMinus1_21 = bitRateDuValueminus1[21];
				BitRateDuValueMinus1_22 = bitRateDuValueminus1[22];
				BitRateDuValueMinus1_23 = bitRateDuValueminus1[23];
				BitRateDuValueMinus1_24 = bitRateDuValueminus1[24];
				BitRateDuValueMinus1_25 = bitRateDuValueminus1[25];
				BitRateDuValueMinus1_26 = bitRateDuValueminus1[26];
				BitRateDuValueMinus1_27 = bitRateDuValueminus1[27];
				BitRateDuValueMinus1_28 = bitRateDuValueminus1[28];
				BitRateDuValueMinus1_29 = bitRateDuValueminus1[29];
				BitRateDuValueMinus1_30 = bitRateDuValueminus1[30];
				BitRateDuValueMinus1_31 = bitRateDuValueminus1[31];
			}
			CbrFlag = cbrFlag;
		}

		public unsafe StdVideoH265SubLayerHrdParameters(Span<uint> bitRateValueminus1 = default, Span<uint> cpbSizeValueminus1 = default, Span<uint> cpbSizeDuValueminus1 = default, Span<uint> bitRateDuValueminus1 = default, uint cbrFlag = default)
		{
			if (bitRateValueminus1 != default)
			{
				BitRateValueMinus1_0 = bitRateValueminus1[0];
				BitRateValueMinus1_1 = bitRateValueminus1[1];
				BitRateValueMinus1_2 = bitRateValueminus1[2];
				BitRateValueMinus1_3 = bitRateValueminus1[3];
				BitRateValueMinus1_4 = bitRateValueminus1[4];
				BitRateValueMinus1_5 = bitRateValueminus1[5];
				BitRateValueMinus1_6 = bitRateValueminus1[6];
				BitRateValueMinus1_7 = bitRateValueminus1[7];
				BitRateValueMinus1_8 = bitRateValueminus1[8];
				BitRateValueMinus1_9 = bitRateValueminus1[9];
				BitRateValueMinus1_10 = bitRateValueminus1[10];
				BitRateValueMinus1_11 = bitRateValueminus1[11];
				BitRateValueMinus1_12 = bitRateValueminus1[12];
				BitRateValueMinus1_13 = bitRateValueminus1[13];
				BitRateValueMinus1_14 = bitRateValueminus1[14];
				BitRateValueMinus1_15 = bitRateValueminus1[15];
				BitRateValueMinus1_16 = bitRateValueminus1[16];
				BitRateValueMinus1_17 = bitRateValueminus1[17];
				BitRateValueMinus1_18 = bitRateValueminus1[18];
				BitRateValueMinus1_19 = bitRateValueminus1[19];
				BitRateValueMinus1_20 = bitRateValueminus1[20];
				BitRateValueMinus1_21 = bitRateValueminus1[21];
				BitRateValueMinus1_22 = bitRateValueminus1[22];
				BitRateValueMinus1_23 = bitRateValueminus1[23];
				BitRateValueMinus1_24 = bitRateValueminus1[24];
				BitRateValueMinus1_25 = bitRateValueminus1[25];
				BitRateValueMinus1_26 = bitRateValueminus1[26];
				BitRateValueMinus1_27 = bitRateValueminus1[27];
				BitRateValueMinus1_28 = bitRateValueminus1[28];
				BitRateValueMinus1_29 = bitRateValueminus1[29];
				BitRateValueMinus1_30 = bitRateValueminus1[30];
				BitRateValueMinus1_31 = bitRateValueminus1[31];
			}
			if (cpbSizeValueminus1 != default)
			{
				CpbSizeValueMinus1_0 = cpbSizeValueminus1[0];
				CpbSizeValueMinus1_1 = cpbSizeValueminus1[1];
				CpbSizeValueMinus1_2 = cpbSizeValueminus1[2];
				CpbSizeValueMinus1_3 = cpbSizeValueminus1[3];
				CpbSizeValueMinus1_4 = cpbSizeValueminus1[4];
				CpbSizeValueMinus1_5 = cpbSizeValueminus1[5];
				CpbSizeValueMinus1_6 = cpbSizeValueminus1[6];
				CpbSizeValueMinus1_7 = cpbSizeValueminus1[7];
				CpbSizeValueMinus1_8 = cpbSizeValueminus1[8];
				CpbSizeValueMinus1_9 = cpbSizeValueminus1[9];
				CpbSizeValueMinus1_10 = cpbSizeValueminus1[10];
				CpbSizeValueMinus1_11 = cpbSizeValueminus1[11];
				CpbSizeValueMinus1_12 = cpbSizeValueminus1[12];
				CpbSizeValueMinus1_13 = cpbSizeValueminus1[13];
				CpbSizeValueMinus1_14 = cpbSizeValueminus1[14];
				CpbSizeValueMinus1_15 = cpbSizeValueminus1[15];
				CpbSizeValueMinus1_16 = cpbSizeValueminus1[16];
				CpbSizeValueMinus1_17 = cpbSizeValueminus1[17];
				CpbSizeValueMinus1_18 = cpbSizeValueminus1[18];
				CpbSizeValueMinus1_19 = cpbSizeValueminus1[19];
				CpbSizeValueMinus1_20 = cpbSizeValueminus1[20];
				CpbSizeValueMinus1_21 = cpbSizeValueminus1[21];
				CpbSizeValueMinus1_22 = cpbSizeValueminus1[22];
				CpbSizeValueMinus1_23 = cpbSizeValueminus1[23];
				CpbSizeValueMinus1_24 = cpbSizeValueminus1[24];
				CpbSizeValueMinus1_25 = cpbSizeValueminus1[25];
				CpbSizeValueMinus1_26 = cpbSizeValueminus1[26];
				CpbSizeValueMinus1_27 = cpbSizeValueminus1[27];
				CpbSizeValueMinus1_28 = cpbSizeValueminus1[28];
				CpbSizeValueMinus1_29 = cpbSizeValueminus1[29];
				CpbSizeValueMinus1_30 = cpbSizeValueminus1[30];
				CpbSizeValueMinus1_31 = cpbSizeValueminus1[31];
			}
			if (cpbSizeDuValueminus1 != default)
			{
				CpbSizeDuValueMinus1_0 = cpbSizeDuValueminus1[0];
				CpbSizeDuValueMinus1_1 = cpbSizeDuValueminus1[1];
				CpbSizeDuValueMinus1_2 = cpbSizeDuValueminus1[2];
				CpbSizeDuValueMinus1_3 = cpbSizeDuValueminus1[3];
				CpbSizeDuValueMinus1_4 = cpbSizeDuValueminus1[4];
				CpbSizeDuValueMinus1_5 = cpbSizeDuValueminus1[5];
				CpbSizeDuValueMinus1_6 = cpbSizeDuValueminus1[6];
				CpbSizeDuValueMinus1_7 = cpbSizeDuValueminus1[7];
				CpbSizeDuValueMinus1_8 = cpbSizeDuValueminus1[8];
				CpbSizeDuValueMinus1_9 = cpbSizeDuValueminus1[9];
				CpbSizeDuValueMinus1_10 = cpbSizeDuValueminus1[10];
				CpbSizeDuValueMinus1_11 = cpbSizeDuValueminus1[11];
				CpbSizeDuValueMinus1_12 = cpbSizeDuValueminus1[12];
				CpbSizeDuValueMinus1_13 = cpbSizeDuValueminus1[13];
				CpbSizeDuValueMinus1_14 = cpbSizeDuValueminus1[14];
				CpbSizeDuValueMinus1_15 = cpbSizeDuValueminus1[15];
				CpbSizeDuValueMinus1_16 = cpbSizeDuValueminus1[16];
				CpbSizeDuValueMinus1_17 = cpbSizeDuValueminus1[17];
				CpbSizeDuValueMinus1_18 = cpbSizeDuValueminus1[18];
				CpbSizeDuValueMinus1_19 = cpbSizeDuValueminus1[19];
				CpbSizeDuValueMinus1_20 = cpbSizeDuValueminus1[20];
				CpbSizeDuValueMinus1_21 = cpbSizeDuValueminus1[21];
				CpbSizeDuValueMinus1_22 = cpbSizeDuValueminus1[22];
				CpbSizeDuValueMinus1_23 = cpbSizeDuValueminus1[23];
				CpbSizeDuValueMinus1_24 = cpbSizeDuValueminus1[24];
				CpbSizeDuValueMinus1_25 = cpbSizeDuValueminus1[25];
				CpbSizeDuValueMinus1_26 = cpbSizeDuValueminus1[26];
				CpbSizeDuValueMinus1_27 = cpbSizeDuValueminus1[27];
				CpbSizeDuValueMinus1_28 = cpbSizeDuValueminus1[28];
				CpbSizeDuValueMinus1_29 = cpbSizeDuValueminus1[29];
				CpbSizeDuValueMinus1_30 = cpbSizeDuValueminus1[30];
				CpbSizeDuValueMinus1_31 = cpbSizeDuValueminus1[31];
			}
			if (bitRateDuValueminus1 != default)
			{
				BitRateDuValueMinus1_0 = bitRateDuValueminus1[0];
				BitRateDuValueMinus1_1 = bitRateDuValueminus1[1];
				BitRateDuValueMinus1_2 = bitRateDuValueminus1[2];
				BitRateDuValueMinus1_3 = bitRateDuValueminus1[3];
				BitRateDuValueMinus1_4 = bitRateDuValueminus1[4];
				BitRateDuValueMinus1_5 = bitRateDuValueminus1[5];
				BitRateDuValueMinus1_6 = bitRateDuValueminus1[6];
				BitRateDuValueMinus1_7 = bitRateDuValueminus1[7];
				BitRateDuValueMinus1_8 = bitRateDuValueminus1[8];
				BitRateDuValueMinus1_9 = bitRateDuValueminus1[9];
				BitRateDuValueMinus1_10 = bitRateDuValueminus1[10];
				BitRateDuValueMinus1_11 = bitRateDuValueminus1[11];
				BitRateDuValueMinus1_12 = bitRateDuValueminus1[12];
				BitRateDuValueMinus1_13 = bitRateDuValueminus1[13];
				BitRateDuValueMinus1_14 = bitRateDuValueminus1[14];
				BitRateDuValueMinus1_15 = bitRateDuValueminus1[15];
				BitRateDuValueMinus1_16 = bitRateDuValueminus1[16];
				BitRateDuValueMinus1_17 = bitRateDuValueminus1[17];
				BitRateDuValueMinus1_18 = bitRateDuValueminus1[18];
				BitRateDuValueMinus1_19 = bitRateDuValueminus1[19];
				BitRateDuValueMinus1_20 = bitRateDuValueminus1[20];
				BitRateDuValueMinus1_21 = bitRateDuValueminus1[21];
				BitRateDuValueMinus1_22 = bitRateDuValueminus1[22];
				BitRateDuValueMinus1_23 = bitRateDuValueminus1[23];
				BitRateDuValueMinus1_24 = bitRateDuValueminus1[24];
				BitRateDuValueMinus1_25 = bitRateDuValueminus1[25];
				BitRateDuValueMinus1_26 = bitRateDuValueminus1[26];
				BitRateDuValueMinus1_27 = bitRateDuValueminus1[27];
				BitRateDuValueMinus1_28 = bitRateDuValueminus1[28];
				BitRateDuValueMinus1_29 = bitRateDuValueminus1[29];
				BitRateDuValueMinus1_30 = bitRateDuValueminus1[30];
				BitRateDuValueMinus1_31 = bitRateDuValueminus1[31];
			}
			CbrFlag = cbrFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265HrdFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265HrdFlags
	{
		[NativeName(NativeNameType.Field, "nal_hrd_parameters_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NalHrdParametersPresentFlag;
		[NativeName(NativeNameType.Field, "vcl_hrd_parameters_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VclHrdParametersPresentFlag;
		[NativeName(NativeNameType.Field, "sub_pic_hrd_params_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SubPicHrdParamsPresentFlag;
		[NativeName(NativeNameType.Field, "sub_pic_cpb_params_in_pic_timing_sei_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SubPicCpbParamsInPicTimingSeiFlag;
		[NativeName(NativeNameType.Field, "fixed_pic_rate_general_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FixedPicRateGeneralFlag;
		[NativeName(NativeNameType.Field, "fixed_pic_rate_within_cvs_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FixedPicRateWithinCvsFlag;
		[NativeName(NativeNameType.Field, "low_delay_hrd_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint LowDelayHrdFlag;

		public unsafe StdVideoH265HrdFlags(uint nalHrdParametersPresentFlag = default, uint vclHrdParametersPresentFlag = default, uint subPicHrdParamsPresentFlag = default, uint subPicCpbParamsInPicTimingSeiFlag = default, uint fixedPicRateGeneralFlag = default, uint fixedPicRateWithinCvsFlag = default, uint lowDelayHrdFlag = default)
		{
			NalHrdParametersPresentFlag = nalHrdParametersPresentFlag;
			VclHrdParametersPresentFlag = vclHrdParametersPresentFlag;
			SubPicHrdParamsPresentFlag = subPicHrdParamsPresentFlag;
			SubPicCpbParamsInPicTimingSeiFlag = subPicCpbParamsInPicTimingSeiFlag;
			FixedPicRateGeneralFlag = fixedPicRateGeneralFlag;
			FixedPicRateWithinCvsFlag = fixedPicRateWithinCvsFlag;
			LowDelayHrdFlag = lowDelayHrdFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265HrdParameters")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265HrdParameters
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoH265HrdFlags")]
		public StdVideoH265HrdFlags Flags;
		[NativeName(NativeNameType.Field, "tick_divisor_minus2")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte TickDivisorMinus2;
		[NativeName(NativeNameType.Field, "du_cpb_removal_delay_increment_length_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte DuCpbRemovalDelayIncrementLengthMinus1;
		[NativeName(NativeNameType.Field, "dpb_output_delay_du_length_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte DpbOutputDelayDuLengthMinus1;
		[NativeName(NativeNameType.Field, "bit_rate_scale")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte BitRateScale;
		[NativeName(NativeNameType.Field, "cpb_size_scale")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte CpbSizeScale;
		[NativeName(NativeNameType.Field, "cpb_size_du_scale")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte CpbSizeDuScale;
		[NativeName(NativeNameType.Field, "initial_cpb_removal_delay_length_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte InitialCpbRemovalDelayLengthMinus1;
		[NativeName(NativeNameType.Field, "au_cpb_removal_delay_length_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte AuCpbRemovalDelayLengthMinus1;
		[NativeName(NativeNameType.Field, "dpb_output_delay_length_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte DpbOutputDelayLengthMinus1;
		[NativeName(NativeNameType.Field, "cpb_cnt_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t[7]")]
		public byte CpbCntMinus1_0;
		public byte CpbCntMinus1_1;
		public byte CpbCntMinus1_2;
		public byte CpbCntMinus1_3;
		public byte CpbCntMinus1_4;
		public byte CpbCntMinus1_5;
		public byte CpbCntMinus1_6;
		[NativeName(NativeNameType.Field, "elemental_duration_in_tc_minus1")]
		[NativeName(NativeNameType.Type, "uint16_t[7]")]
		public ushort ElementalDurationInTcMinus1_0;
		public ushort ElementalDurationInTcMinus1_1;
		public ushort ElementalDurationInTcMinus1_2;
		public ushort ElementalDurationInTcMinus1_3;
		public ushort ElementalDurationInTcMinus1_4;
		public ushort ElementalDurationInTcMinus1_5;
		public ushort ElementalDurationInTcMinus1_6;
		[NativeName(NativeNameType.Field, "reserved")]
		[NativeName(NativeNameType.Type, "uint16_t[3]")]
		public ushort Reserved_0;
		public ushort Reserved_1;
		public ushort Reserved_2;
		[NativeName(NativeNameType.Field, "pSubLayerHrdParametersNal")]
		[NativeName(NativeNameType.Type, "const StdVideoH265SubLayerHrdParameters*")]
		public unsafe StdVideoH265SubLayerHrdParameters* PSubLayerHrdParametersNal;
		[NativeName(NativeNameType.Field, "pSubLayerHrdParametersVcl")]
		[NativeName(NativeNameType.Type, "const StdVideoH265SubLayerHrdParameters*")]
		public unsafe StdVideoH265SubLayerHrdParameters* PSubLayerHrdParametersVcl;

		public unsafe StdVideoH265HrdParameters(StdVideoH265HrdFlags flags = default, byte tickDivisorminus2 = default, byte duCpbRemovalDelayIncrementLengthminus1 = default, byte dpbOutputDelayDuLengthminus1 = default, byte bitRateScale = default, byte cpbSizeScale = default, byte cpbSizeDuScale = default, byte initialCpbRemovalDelayLengthminus1 = default, byte auCpbRemovalDelayLengthminus1 = default, byte dpbOutputDelayLengthminus1 = default, byte* cpbCntminus1 = default, ushort* elementalDurationInTcminus1 = default, ushort* reserved = default, StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersNal = default, StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersVcl = default)
		{
			Flags = flags;
			TickDivisorMinus2 = tickDivisorminus2;
			DuCpbRemovalDelayIncrementLengthMinus1 = duCpbRemovalDelayIncrementLengthminus1;
			DpbOutputDelayDuLengthMinus1 = dpbOutputDelayDuLengthminus1;
			BitRateScale = bitRateScale;
			CpbSizeScale = cpbSizeScale;
			CpbSizeDuScale = cpbSizeDuScale;
			InitialCpbRemovalDelayLengthMinus1 = initialCpbRemovalDelayLengthminus1;
			AuCpbRemovalDelayLengthMinus1 = auCpbRemovalDelayLengthminus1;
			DpbOutputDelayLengthMinus1 = dpbOutputDelayLengthminus1;
			if (cpbCntminus1 != default)
			{
				CpbCntMinus1_0 = cpbCntminus1[0];
				CpbCntMinus1_1 = cpbCntminus1[1];
				CpbCntMinus1_2 = cpbCntminus1[2];
				CpbCntMinus1_3 = cpbCntminus1[3];
				CpbCntMinus1_4 = cpbCntminus1[4];
				CpbCntMinus1_5 = cpbCntminus1[5];
				CpbCntMinus1_6 = cpbCntminus1[6];
			}
			if (elementalDurationInTcminus1 != default)
			{
				ElementalDurationInTcMinus1_0 = elementalDurationInTcminus1[0];
				ElementalDurationInTcMinus1_1 = elementalDurationInTcminus1[1];
				ElementalDurationInTcMinus1_2 = elementalDurationInTcminus1[2];
				ElementalDurationInTcMinus1_3 = elementalDurationInTcminus1[3];
				ElementalDurationInTcMinus1_4 = elementalDurationInTcminus1[4];
				ElementalDurationInTcMinus1_5 = elementalDurationInTcminus1[5];
				ElementalDurationInTcMinus1_6 = elementalDurationInTcminus1[6];
			}
			if (reserved != default)
			{
				Reserved_0 = reserved[0];
				Reserved_1 = reserved[1];
				Reserved_2 = reserved[2];
			}
			PSubLayerHrdParametersNal = pSubLayerHrdParametersNal;
			PSubLayerHrdParametersVcl = pSubLayerHrdParametersVcl;
		}

		public unsafe StdVideoH265HrdParameters(StdVideoH265HrdFlags flags = default, byte tickDivisorminus2 = default, byte duCpbRemovalDelayIncrementLengthminus1 = default, byte dpbOutputDelayDuLengthminus1 = default, byte bitRateScale = default, byte cpbSizeScale = default, byte cpbSizeDuScale = default, byte initialCpbRemovalDelayLengthminus1 = default, byte auCpbRemovalDelayLengthminus1 = default, byte dpbOutputDelayLengthminus1 = default, Span<byte> cpbCntminus1 = default, Span<ushort> elementalDurationInTcminus1 = default, Span<ushort> reserved = default, StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersNal = default, StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersVcl = default)
		{
			Flags = flags;
			TickDivisorMinus2 = tickDivisorminus2;
			DuCpbRemovalDelayIncrementLengthMinus1 = duCpbRemovalDelayIncrementLengthminus1;
			DpbOutputDelayDuLengthMinus1 = dpbOutputDelayDuLengthminus1;
			BitRateScale = bitRateScale;
			CpbSizeScale = cpbSizeScale;
			CpbSizeDuScale = cpbSizeDuScale;
			InitialCpbRemovalDelayLengthMinus1 = initialCpbRemovalDelayLengthminus1;
			AuCpbRemovalDelayLengthMinus1 = auCpbRemovalDelayLengthminus1;
			DpbOutputDelayLengthMinus1 = dpbOutputDelayLengthminus1;
			if (cpbCntminus1 != default)
			{
				CpbCntMinus1_0 = cpbCntminus1[0];
				CpbCntMinus1_1 = cpbCntminus1[1];
				CpbCntMinus1_2 = cpbCntminus1[2];
				CpbCntMinus1_3 = cpbCntminus1[3];
				CpbCntMinus1_4 = cpbCntminus1[4];
				CpbCntMinus1_5 = cpbCntminus1[5];
				CpbCntMinus1_6 = cpbCntminus1[6];
			}
			if (elementalDurationInTcminus1 != default)
			{
				ElementalDurationInTcMinus1_0 = elementalDurationInTcminus1[0];
				ElementalDurationInTcMinus1_1 = elementalDurationInTcminus1[1];
				ElementalDurationInTcMinus1_2 = elementalDurationInTcminus1[2];
				ElementalDurationInTcMinus1_3 = elementalDurationInTcminus1[3];
				ElementalDurationInTcMinus1_4 = elementalDurationInTcminus1[4];
				ElementalDurationInTcMinus1_5 = elementalDurationInTcminus1[5];
				ElementalDurationInTcMinus1_6 = elementalDurationInTcminus1[6];
			}
			if (reserved != default)
			{
				Reserved_0 = reserved[0];
				Reserved_1 = reserved[1];
				Reserved_2 = reserved[2];
			}
			PSubLayerHrdParametersNal = pSubLayerHrdParametersNal;
			PSubLayerHrdParametersVcl = pSubLayerHrdParametersVcl;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265VpsFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265VpsFlags
	{
		[NativeName(NativeNameType.Field, "vps_temporal_id_nesting_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VpsTemporalIdNestingFlag;
		[NativeName(NativeNameType.Field, "vps_sub_layer_ordering_info_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VpsSubLayerOrderingInfoPresentFlag;
		[NativeName(NativeNameType.Field, "vps_timing_info_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VpsTimingInfoPresentFlag;
		[NativeName(NativeNameType.Field, "vps_poc_proportional_to_timing_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VpsPocProportionalToTimingFlag;

		public unsafe StdVideoH265VpsFlags(uint vpsTemporalIdNestingFlag = default, uint vpsSubLayerOrderingInfoPresentFlag = default, uint vpsTimingInfoPresentFlag = default, uint vpsPocProportionalToTimingFlag = default)
		{
			VpsTemporalIdNestingFlag = vpsTemporalIdNestingFlag;
			VpsSubLayerOrderingInfoPresentFlag = vpsSubLayerOrderingInfoPresentFlag;
			VpsTimingInfoPresentFlag = vpsTimingInfoPresentFlag;
			VpsPocProportionalToTimingFlag = vpsPocProportionalToTimingFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265ProfileTierLevelFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265ProfileTierLevelFlags
	{
		[NativeName(NativeNameType.Field, "general_tier_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint GeneralTierFlag;
		[NativeName(NativeNameType.Field, "general_progressive_source_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint GeneralProgressiveSourceFlag;
		[NativeName(NativeNameType.Field, "general_interlaced_source_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint GeneralInterlacedSourceFlag;
		[NativeName(NativeNameType.Field, "general_non_packed_constraint_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint GeneralNonPackedConstraintFlag;
		[NativeName(NativeNameType.Field, "general_frame_only_constraint_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint GeneralFrameOnlyConstraintFlag;

		public unsafe StdVideoH265ProfileTierLevelFlags(uint generalTierFlag = default, uint generalProgressiveSourceFlag = default, uint generalInterlacedSourceFlag = default, uint generalNonPackedConstraintFlag = default, uint generalFrameOnlyConstraintFlag = default)
		{
			GeneralTierFlag = generalTierFlag;
			GeneralProgressiveSourceFlag = generalProgressiveSourceFlag;
			GeneralInterlacedSourceFlag = generalInterlacedSourceFlag;
			GeneralNonPackedConstraintFlag = generalNonPackedConstraintFlag;
			GeneralFrameOnlyConstraintFlag = generalFrameOnlyConstraintFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265ProfileTierLevel")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265ProfileTierLevel
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoH265ProfileTierLevelFlags")]
		public StdVideoH265ProfileTierLevelFlags Flags;
		[NativeName(NativeNameType.Field, "general_profile_idc")]
		[NativeName(NativeNameType.Type, "StdVideoH265ProfileIdc")]
		public StdVideoH265ProfileIdc GeneralProfileIdc;
		[NativeName(NativeNameType.Field, "general_level_idc")]
		[NativeName(NativeNameType.Type, "StdVideoH265LevelIdc")]
		public StdVideoH265LevelIdc GeneralLevelIdc;

		public unsafe StdVideoH265ProfileTierLevel(StdVideoH265ProfileTierLevelFlags flags = default, StdVideoH265ProfileIdc generalProfileIdc = default, StdVideoH265LevelIdc generalLevelIdc = default)
		{
			Flags = flags;
			GeneralProfileIdc = generalProfileIdc;
			GeneralLevelIdc = generalLevelIdc;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265VideoParameterSet")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265VideoParameterSet
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoH265VpsFlags")]
		public StdVideoH265VpsFlags Flags;
		[NativeName(NativeNameType.Field, "vps_video_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte VpsVideoParameterSetId;
		[NativeName(NativeNameType.Field, "vps_max_sub_layers_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte VpsMaxSubLayersMinus1;
		[NativeName(NativeNameType.Field, "reserved1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved1;
		[NativeName(NativeNameType.Field, "reserved2")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved2;
		[NativeName(NativeNameType.Field, "vps_num_units_in_tick")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VpsNumUnitsInTick;
		[NativeName(NativeNameType.Field, "vps_time_scale")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VpsTimeScale;
		[NativeName(NativeNameType.Field, "vps_num_ticks_poc_diff_one_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VpsNumTicksPocDiffOneMinus1;
		[NativeName(NativeNameType.Field, "reserved3")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Reserved3;
		[NativeName(NativeNameType.Field, "pDecPicBufMgr")]
		[NativeName(NativeNameType.Type, "const StdVideoH265DecPicBufMgr*")]
		public unsafe StdVideoH265DecPicBufMgr* PDecPicBufMgr;
		[NativeName(NativeNameType.Field, "pHrdParameters")]
		[NativeName(NativeNameType.Type, "const StdVideoH265HrdParameters*")]
		public unsafe StdVideoH265HrdParameters* PHrdParameters;
		[NativeName(NativeNameType.Field, "pProfileTierLevel")]
		[NativeName(NativeNameType.Type, "const StdVideoH265ProfileTierLevel*")]
		public unsafe StdVideoH265ProfileTierLevel* PProfileTierLevel;

		public unsafe StdVideoH265VideoParameterSet(StdVideoH265VpsFlags flags = default, byte vpsVideoParameterSetId = default, byte vpsMaxSubLayersminus1 = default, byte reserved1 = default, byte reserved2 = default, uint vpsNumUnitsInTick = default, uint vpsTimeScale = default, uint vpsNumTicksPocDiffOneminus1 = default, uint reserved3 = default, StdVideoH265DecPicBufMgr* pDecPicBufMgr = default, StdVideoH265HrdParameters* pHrdParameters = default, StdVideoH265ProfileTierLevel* pProfileTierLevel = default)
		{
			Flags = flags;
			VpsVideoParameterSetId = vpsVideoParameterSetId;
			VpsMaxSubLayersMinus1 = vpsMaxSubLayersminus1;
			Reserved1 = reserved1;
			Reserved2 = reserved2;
			VpsNumUnitsInTick = vpsNumUnitsInTick;
			VpsTimeScale = vpsTimeScale;
			VpsNumTicksPocDiffOneMinus1 = vpsNumTicksPocDiffOneminus1;
			Reserved3 = reserved3;
			PDecPicBufMgr = pDecPicBufMgr;
			PHrdParameters = pHrdParameters;
			PProfileTierLevel = pProfileTierLevel;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265ScalingLists")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265ScalingLists
	{
		[NativeName(NativeNameType.Field, "ScalingList4x4")]
		[NativeName(NativeNameType.Type, "uint8_t[16][6]")]
		public unsafe byte* ScalingList4x4_0;
		public unsafe byte* ScalingList4x4_1;
		public unsafe byte* ScalingList4x4_2;
		public unsafe byte* ScalingList4x4_3;
		public unsafe byte* ScalingList4x4_4;
		public unsafe byte* ScalingList4x4_5;
		[NativeName(NativeNameType.Field, "ScalingList8x8")]
		[NativeName(NativeNameType.Type, "uint8_t[64][6]")]
		public unsafe byte* ScalingList8x8_0;
		public unsafe byte* ScalingList8x8_1;
		public unsafe byte* ScalingList8x8_2;
		public unsafe byte* ScalingList8x8_3;
		public unsafe byte* ScalingList8x8_4;
		public unsafe byte* ScalingList8x8_5;
		[NativeName(NativeNameType.Field, "ScalingList16x16")]
		[NativeName(NativeNameType.Type, "uint8_t[64][6]")]
		public unsafe byte* ScalingList16x16_0;
		public unsafe byte* ScalingList16x16_1;
		public unsafe byte* ScalingList16x16_2;
		public unsafe byte* ScalingList16x16_3;
		public unsafe byte* ScalingList16x16_4;
		public unsafe byte* ScalingList16x16_5;
		[NativeName(NativeNameType.Field, "ScalingList32x32")]
		[NativeName(NativeNameType.Type, "uint8_t[64][2]")]
		public unsafe byte* ScalingList32x32_0;
		public unsafe byte* ScalingList32x32_1;
		[NativeName(NativeNameType.Field, "ScalingListDCCoef16x16")]
		[NativeName(NativeNameType.Type, "uint8_t[6]")]
		public byte ScalingListDCCoef16x16_0;
		public byte ScalingListDCCoef16x16_1;
		public byte ScalingListDCCoef16x16_2;
		public byte ScalingListDCCoef16x16_3;
		public byte ScalingListDCCoef16x16_4;
		public byte ScalingListDCCoef16x16_5;
		[NativeName(NativeNameType.Field, "ScalingListDCCoef32x32")]
		[NativeName(NativeNameType.Type, "uint8_t[2]")]
		public byte ScalingListDCCoef32x32_0;
		public byte ScalingListDCCoef32x32_1;

		public unsafe StdVideoH265ScalingLists(byte** scalingList4X4 = default, byte** scalingList8X8 = default, byte** scalingList16X16 = default, byte** scalingList32X32 = default, byte* scalingListDcCoef16X16 = default, byte* scalingListDcCoef32X32 = default)
		{
			if (scalingList4X4 != default)
			{
				ScalingList4x4_0 = scalingList4X4[0];
				ScalingList4x4_1 = scalingList4X4[1];
				ScalingList4x4_2 = scalingList4X4[2];
				ScalingList4x4_3 = scalingList4X4[3];
				ScalingList4x4_4 = scalingList4X4[4];
				ScalingList4x4_5 = scalingList4X4[5];
			}
			if (scalingList8X8 != default)
			{
				ScalingList8x8_0 = scalingList8X8[0];
				ScalingList8x8_1 = scalingList8X8[1];
				ScalingList8x8_2 = scalingList8X8[2];
				ScalingList8x8_3 = scalingList8X8[3];
				ScalingList8x8_4 = scalingList8X8[4];
				ScalingList8x8_5 = scalingList8X8[5];
			}
			if (scalingList16X16 != default)
			{
				ScalingList16x16_0 = scalingList16X16[0];
				ScalingList16x16_1 = scalingList16X16[1];
				ScalingList16x16_2 = scalingList16X16[2];
				ScalingList16x16_3 = scalingList16X16[3];
				ScalingList16x16_4 = scalingList16X16[4];
				ScalingList16x16_5 = scalingList16X16[5];
			}
			if (scalingList32X32 != default)
			{
				ScalingList32x32_0 = scalingList32X32[0];
				ScalingList32x32_1 = scalingList32X32[1];
			}
			if (scalingListDcCoef16X16 != default)
			{
				ScalingListDCCoef16x16_0 = scalingListDcCoef16X16[0];
				ScalingListDCCoef16x16_1 = scalingListDcCoef16X16[1];
				ScalingListDCCoef16x16_2 = scalingListDcCoef16X16[2];
				ScalingListDCCoef16x16_3 = scalingListDcCoef16X16[3];
				ScalingListDCCoef16x16_4 = scalingListDcCoef16X16[4];
				ScalingListDCCoef16x16_5 = scalingListDcCoef16X16[5];
			}
			if (scalingListDcCoef32X32 != default)
			{
				ScalingListDCCoef32x32_0 = scalingListDcCoef32X32[0];
				ScalingListDCCoef32x32_1 = scalingListDcCoef32X32[1];
			}
		}

		public unsafe StdVideoH265ScalingLists(Span<Pointer<byte>> scalingList4X4 = default, Span<Pointer<byte>> scalingList8X8 = default, Span<Pointer<byte>> scalingList16X16 = default, Span<Pointer<byte>> scalingList32X32 = default, Span<byte> scalingListDcCoef16X16 = default, Span<byte> scalingListDcCoef32X32 = default)
		{
			if (scalingList4X4 != default)
			{
				ScalingList4x4_0 = scalingList4X4[0];
				ScalingList4x4_1 = scalingList4X4[1];
				ScalingList4x4_2 = scalingList4X4[2];
				ScalingList4x4_3 = scalingList4X4[3];
				ScalingList4x4_4 = scalingList4X4[4];
				ScalingList4x4_5 = scalingList4X4[5];
			}
			if (scalingList8X8 != default)
			{
				ScalingList8x8_0 = scalingList8X8[0];
				ScalingList8x8_1 = scalingList8X8[1];
				ScalingList8x8_2 = scalingList8X8[2];
				ScalingList8x8_3 = scalingList8X8[3];
				ScalingList8x8_4 = scalingList8X8[4];
				ScalingList8x8_5 = scalingList8X8[5];
			}
			if (scalingList16X16 != default)
			{
				ScalingList16x16_0 = scalingList16X16[0];
				ScalingList16x16_1 = scalingList16X16[1];
				ScalingList16x16_2 = scalingList16X16[2];
				ScalingList16x16_3 = scalingList16X16[3];
				ScalingList16x16_4 = scalingList16X16[4];
				ScalingList16x16_5 = scalingList16X16[5];
			}
			if (scalingList32X32 != default)
			{
				ScalingList32x32_0 = scalingList32X32[0];
				ScalingList32x32_1 = scalingList32X32[1];
			}
			if (scalingListDcCoef16X16 != default)
			{
				ScalingListDCCoef16x16_0 = scalingListDcCoef16X16[0];
				ScalingListDCCoef16x16_1 = scalingListDcCoef16X16[1];
				ScalingListDCCoef16x16_2 = scalingListDcCoef16X16[2];
				ScalingListDCCoef16x16_3 = scalingListDcCoef16X16[3];
				ScalingListDCCoef16x16_4 = scalingListDcCoef16X16[4];
				ScalingListDCCoef16x16_5 = scalingListDcCoef16X16[5];
			}
			if (scalingListDcCoef32X32 != default)
			{
				ScalingListDCCoef32x32_0 = scalingListDcCoef32X32[0];
				ScalingListDCCoef32x32_1 = scalingListDcCoef32X32[1];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265SpsVuiFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265SpsVuiFlags
	{
		[NativeName(NativeNameType.Field, "aspect_ratio_info_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint AspectRatioInfoPresentFlag;
		[NativeName(NativeNameType.Field, "overscan_info_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint OverscanInfoPresentFlag;
		[NativeName(NativeNameType.Field, "overscan_appropriate_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint OverscanAppropriateFlag;
		[NativeName(NativeNameType.Field, "video_signal_type_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VideoSignalTypePresentFlag;
		[NativeName(NativeNameType.Field, "video_full_range_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VideoFullRangeFlag;
		[NativeName(NativeNameType.Field, "colour_description_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ColourDescriptionPresentFlag;
		[NativeName(NativeNameType.Field, "chroma_loc_info_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ChromaLocInfoPresentFlag;
		[NativeName(NativeNameType.Field, "neutral_chroma_indication_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NeutralChromaIndicationFlag;
		[NativeName(NativeNameType.Field, "field_seq_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FieldSeqFlag;
		[NativeName(NativeNameType.Field, "frame_field_info_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FrameFieldInfoPresentFlag;
		[NativeName(NativeNameType.Field, "default_display_window_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DefaultDisplayWindowFlag;
		[NativeName(NativeNameType.Field, "vui_timing_info_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VuiTimingInfoPresentFlag;
		[NativeName(NativeNameType.Field, "vui_poc_proportional_to_timing_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VuiPocProportionalToTimingFlag;
		[NativeName(NativeNameType.Field, "vui_hrd_parameters_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VuiHrdParametersPresentFlag;
		[NativeName(NativeNameType.Field, "bitstream_restriction_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BitstreamRestrictionFlag;
		[NativeName(NativeNameType.Field, "tiles_fixed_structure_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint TilesFixedStructureFlag;
		[NativeName(NativeNameType.Field, "motion_vectors_over_pic_boundaries_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MotionVectorsOverPicBoundariesFlag;
		[NativeName(NativeNameType.Field, "restricted_ref_pic_lists_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint RestrictedRefPicListsFlag;

		public unsafe StdVideoH265SpsVuiFlags(uint aspectRatioInfoPresentFlag = default, uint overscanInfoPresentFlag = default, uint overscanAppropriateFlag = default, uint videoSignalTypePresentFlag = default, uint videoFullRangeFlag = default, uint colourDescriptionPresentFlag = default, uint chromaLocInfoPresentFlag = default, uint neutralChromaIndicationFlag = default, uint fieldSeqFlag = default, uint frameFieldInfoPresentFlag = default, uint defaultDisplayWindowFlag = default, uint vuiTimingInfoPresentFlag = default, uint vuiPocProportionalToTimingFlag = default, uint vuiHrdParametersPresentFlag = default, uint bitstreamRestrictionFlag = default, uint tilesFixedStructureFlag = default, uint motionVectorsOverPicBoundariesFlag = default, uint restrictedRefPicListsFlag = default)
		{
			AspectRatioInfoPresentFlag = aspectRatioInfoPresentFlag;
			OverscanInfoPresentFlag = overscanInfoPresentFlag;
			OverscanAppropriateFlag = overscanAppropriateFlag;
			VideoSignalTypePresentFlag = videoSignalTypePresentFlag;
			VideoFullRangeFlag = videoFullRangeFlag;
			ColourDescriptionPresentFlag = colourDescriptionPresentFlag;
			ChromaLocInfoPresentFlag = chromaLocInfoPresentFlag;
			NeutralChromaIndicationFlag = neutralChromaIndicationFlag;
			FieldSeqFlag = fieldSeqFlag;
			FrameFieldInfoPresentFlag = frameFieldInfoPresentFlag;
			DefaultDisplayWindowFlag = defaultDisplayWindowFlag;
			VuiTimingInfoPresentFlag = vuiTimingInfoPresentFlag;
			VuiPocProportionalToTimingFlag = vuiPocProportionalToTimingFlag;
			VuiHrdParametersPresentFlag = vuiHrdParametersPresentFlag;
			BitstreamRestrictionFlag = bitstreamRestrictionFlag;
			TilesFixedStructureFlag = tilesFixedStructureFlag;
			MotionVectorsOverPicBoundariesFlag = motionVectorsOverPicBoundariesFlag;
			RestrictedRefPicListsFlag = restrictedRefPicListsFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265SequenceParameterSetVui")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265SequenceParameterSetVui
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoH265SpsVuiFlags")]
		public StdVideoH265SpsVuiFlags Flags;
		[NativeName(NativeNameType.Field, "aspect_ratio_idc")]
		[NativeName(NativeNameType.Type, "StdVideoH265AspectRatioIdc")]
		public StdVideoH265AspectRatioIdc AspectRatioIdc;
		[NativeName(NativeNameType.Field, "sar_width")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort SarWidth;
		[NativeName(NativeNameType.Field, "sar_height")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort SarHeight;
		[NativeName(NativeNameType.Field, "video_format")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte VideoFormat;
		[NativeName(NativeNameType.Field, "colour_primaries")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte ColourPrimaries;
		[NativeName(NativeNameType.Field, "transfer_characteristics")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte TransferCharacteristics;
		[NativeName(NativeNameType.Field, "matrix_coeffs")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte MatrixCoeffs;
		[NativeName(NativeNameType.Field, "chroma_sample_loc_type_top_field")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte ChromaSampleLocTypeTopField;
		[NativeName(NativeNameType.Field, "chroma_sample_loc_type_bottom_field")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte ChromaSampleLocTypeBottomField;
		[NativeName(NativeNameType.Field, "reserved1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved1;
		[NativeName(NativeNameType.Field, "reserved2")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved2;
		[NativeName(NativeNameType.Field, "def_disp_win_left_offset")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort DefDispWinLeftOffset;
		[NativeName(NativeNameType.Field, "def_disp_win_right_offset")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort DefDispWinRightOffset;
		[NativeName(NativeNameType.Field, "def_disp_win_top_offset")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort DefDispWinTopOffset;
		[NativeName(NativeNameType.Field, "def_disp_win_bottom_offset")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort DefDispWinBottomOffset;
		[NativeName(NativeNameType.Field, "vui_num_units_in_tick")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VuiNumUnitsInTick;
		[NativeName(NativeNameType.Field, "vui_time_scale")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VuiTimeScale;
		[NativeName(NativeNameType.Field, "vui_num_ticks_poc_diff_one_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VuiNumTicksPocDiffOneMinus1;
		[NativeName(NativeNameType.Field, "min_spatial_segmentation_idc")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort MinSpatialSegmentationIdc;
		[NativeName(NativeNameType.Field, "reserved3")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort Reserved3;
		[NativeName(NativeNameType.Field, "max_bytes_per_pic_denom")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte MaxBytesPerPicDenom;
		[NativeName(NativeNameType.Field, "max_bits_per_min_cu_denom")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte MaxBitsPerMinCuDenom;
		[NativeName(NativeNameType.Field, "log2_max_mv_length_horizontal")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2MaxMvLengthHorizontal;
		[NativeName(NativeNameType.Field, "log2_max_mv_length_vertical")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2MaxMvLengthVertical;
		[NativeName(NativeNameType.Field, "pHrdParameters")]
		[NativeName(NativeNameType.Type, "const StdVideoH265HrdParameters*")]
		public unsafe StdVideoH265HrdParameters* PHrdParameters;

		public unsafe StdVideoH265SequenceParameterSetVui(StdVideoH265SpsVuiFlags flags = default, StdVideoH265AspectRatioIdc aspectRatioIdc = default, ushort sarWidth = default, ushort sarHeight = default, byte videoFormat = default, byte colourPrimaries = default, byte transferCharacteristics = default, byte matrixCoeffs = default, byte chromaSampleLocTypeTopField = default, byte chromaSampleLocTypeBottomField = default, byte reserved1 = default, byte reserved2 = default, ushort defDispWinLeftOffset = default, ushort defDispWinRightOffset = default, ushort defDispWinTopOffset = default, ushort defDispWinBottomOffset = default, uint vuiNumUnitsInTick = default, uint vuiTimeScale = default, uint vuiNumTicksPocDiffOneminus1 = default, ushort minSpatialSegmentationIdc = default, ushort reserved3 = default, byte maxBytesPerPicDenom = default, byte maxBitsPerMinCuDenom = default, byte log2MaxMvLengthHorizontal = default, byte log2MaxMvLengthVertical = default, StdVideoH265HrdParameters* pHrdParameters = default)
		{
			Flags = flags;
			AspectRatioIdc = aspectRatioIdc;
			SarWidth = sarWidth;
			SarHeight = sarHeight;
			VideoFormat = videoFormat;
			ColourPrimaries = colourPrimaries;
			TransferCharacteristics = transferCharacteristics;
			MatrixCoeffs = matrixCoeffs;
			ChromaSampleLocTypeTopField = chromaSampleLocTypeTopField;
			ChromaSampleLocTypeBottomField = chromaSampleLocTypeBottomField;
			Reserved1 = reserved1;
			Reserved2 = reserved2;
			DefDispWinLeftOffset = defDispWinLeftOffset;
			DefDispWinRightOffset = defDispWinRightOffset;
			DefDispWinTopOffset = defDispWinTopOffset;
			DefDispWinBottomOffset = defDispWinBottomOffset;
			VuiNumUnitsInTick = vuiNumUnitsInTick;
			VuiTimeScale = vuiTimeScale;
			VuiNumTicksPocDiffOneMinus1 = vuiNumTicksPocDiffOneminus1;
			MinSpatialSegmentationIdc = minSpatialSegmentationIdc;
			Reserved3 = reserved3;
			MaxBytesPerPicDenom = maxBytesPerPicDenom;
			MaxBitsPerMinCuDenom = maxBitsPerMinCuDenom;
			Log2MaxMvLengthHorizontal = log2MaxMvLengthHorizontal;
			Log2MaxMvLengthVertical = log2MaxMvLengthVertical;
			PHrdParameters = pHrdParameters;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265PredictorPaletteEntries")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265PredictorPaletteEntries
	{
		[NativeName(NativeNameType.Field, "PredictorPaletteEntries")]
		[NativeName(NativeNameType.Type, "uint16_t[128][3]")]
		public unsafe ushort* PredictorPaletteEntries_0;
		public unsafe ushort* PredictorPaletteEntries_1;
		public unsafe ushort* PredictorPaletteEntries_2;

		public unsafe StdVideoH265PredictorPaletteEntries(ushort** predictorPaletteEntries = default)
		{
			if (predictorPaletteEntries != default)
			{
				PredictorPaletteEntries_0 = predictorPaletteEntries[0];
				PredictorPaletteEntries_1 = predictorPaletteEntries[1];
				PredictorPaletteEntries_2 = predictorPaletteEntries[2];
			}
		}

		public unsafe StdVideoH265PredictorPaletteEntries(Span<Pointer<ushort>> predictorPaletteEntries = default)
		{
			if (predictorPaletteEntries != default)
			{
				PredictorPaletteEntries_0 = predictorPaletteEntries[0];
				PredictorPaletteEntries_1 = predictorPaletteEntries[1];
				PredictorPaletteEntries_2 = predictorPaletteEntries[2];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265SpsFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265SpsFlags
	{
		[NativeName(NativeNameType.Field, "sps_temporal_id_nesting_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpsTemporalIdNestingFlag;
		[NativeName(NativeNameType.Field, "separate_colour_plane_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SeparateColourPlaneFlag;
		[NativeName(NativeNameType.Field, "conformance_window_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConformanceWindowFlag;
		[NativeName(NativeNameType.Field, "sps_sub_layer_ordering_info_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpsSubLayerOrderingInfoPresentFlag;
		[NativeName(NativeNameType.Field, "scaling_list_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ScalingListEnabledFlag;
		[NativeName(NativeNameType.Field, "sps_scaling_list_data_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpsScalingListDataPresentFlag;
		[NativeName(NativeNameType.Field, "amp_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint AmpEnabledFlag;
		[NativeName(NativeNameType.Field, "sample_adaptive_offset_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SampleAdaptiveOffsetEnabledFlag;
		[NativeName(NativeNameType.Field, "pcm_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PcmEnabledFlag;
		[NativeName(NativeNameType.Field, "pcm_loop_filter_disabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PcmLoopFilterDisabledFlag;
		[NativeName(NativeNameType.Field, "long_term_ref_pics_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint LongTermRefPicsPresentFlag;
		[NativeName(NativeNameType.Field, "sps_temporal_mvp_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpsTemporalMvpEnabledFlag;
		[NativeName(NativeNameType.Field, "strong_intra_smoothing_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint StrongIntraSmoothingEnabledFlag;
		[NativeName(NativeNameType.Field, "vui_parameters_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VuiParametersPresentFlag;
		[NativeName(NativeNameType.Field, "sps_extension_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpsExtensionPresentFlag;
		[NativeName(NativeNameType.Field, "sps_range_extension_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpsRangeExtensionFlag;
		[NativeName(NativeNameType.Field, "transform_skip_rotation_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint TransformSkipRotationEnabledFlag;
		[NativeName(NativeNameType.Field, "transform_skip_context_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint TransformSkipContextEnabledFlag;
		[NativeName(NativeNameType.Field, "implicit_rdpcm_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ImplicitRdpcmEnabledFlag;
		[NativeName(NativeNameType.Field, "explicit_rdpcm_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ExplicitRdpcmEnabledFlag;
		[NativeName(NativeNameType.Field, "extended_precision_processing_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ExtendedPrecisionProcessingFlag;
		[NativeName(NativeNameType.Field, "intra_smoothing_disabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IntraSmoothingDisabledFlag;
		[NativeName(NativeNameType.Field, "high_precision_offsets_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint HighPrecisionOffsetsEnabledFlag;
		[NativeName(NativeNameType.Field, "persistent_rice_adaptation_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PersistentRiceAdaptationEnabledFlag;
		[NativeName(NativeNameType.Field, "cabac_bypass_alignment_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CabacBypassAlignmentEnabledFlag;
		[NativeName(NativeNameType.Field, "sps_scc_extension_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpsSccExtensionFlag;
		[NativeName(NativeNameType.Field, "sps_curr_pic_ref_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpsCurrPicRefEnabledFlag;
		[NativeName(NativeNameType.Field, "palette_mode_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PaletteModeEnabledFlag;
		[NativeName(NativeNameType.Field, "sps_palette_predictor_initializers_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpsPalettePredictorInitializersPresentFlag;
		[NativeName(NativeNameType.Field, "intra_boundary_filtering_disabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IntraBoundaryFilteringDisabledFlag;

		public unsafe StdVideoH265SpsFlags(uint spsTemporalIdNestingFlag = default, uint separateColourPlaneFlag = default, uint conformanceWindowFlag = default, uint spsSubLayerOrderingInfoPresentFlag = default, uint scalingListEnabledFlag = default, uint spsScalingListDataPresentFlag = default, uint ampEnabledFlag = default, uint sampleAdaptiveOffsetEnabledFlag = default, uint pcmEnabledFlag = default, uint pcmLoopFilterDisabledFlag = default, uint longTermRefPicsPresentFlag = default, uint spsTemporalMvpEnabledFlag = default, uint strongIntraSmoothingEnabledFlag = default, uint vuiParametersPresentFlag = default, uint spsExtensionPresentFlag = default, uint spsRangeExtensionFlag = default, uint transformSkipRotationEnabledFlag = default, uint transformSkipContextEnabledFlag = default, uint implicitRdpcmEnabledFlag = default, uint explicitRdpcmEnabledFlag = default, uint extendedPrecisionProcessingFlag = default, uint intraSmoothingDisabledFlag = default, uint highPrecisionOffsetsEnabledFlag = default, uint persistentRiceAdaptationEnabledFlag = default, uint cabacBypassAlignmentEnabledFlag = default, uint spsSccExtensionFlag = default, uint spsCurrPicRefEnabledFlag = default, uint paletteModeEnabledFlag = default, uint spsPalettePredictorInitializersPresentFlag = default, uint intraBoundaryFilteringDisabledFlag = default)
		{
			SpsTemporalIdNestingFlag = spsTemporalIdNestingFlag;
			SeparateColourPlaneFlag = separateColourPlaneFlag;
			ConformanceWindowFlag = conformanceWindowFlag;
			SpsSubLayerOrderingInfoPresentFlag = spsSubLayerOrderingInfoPresentFlag;
			ScalingListEnabledFlag = scalingListEnabledFlag;
			SpsScalingListDataPresentFlag = spsScalingListDataPresentFlag;
			AmpEnabledFlag = ampEnabledFlag;
			SampleAdaptiveOffsetEnabledFlag = sampleAdaptiveOffsetEnabledFlag;
			PcmEnabledFlag = pcmEnabledFlag;
			PcmLoopFilterDisabledFlag = pcmLoopFilterDisabledFlag;
			LongTermRefPicsPresentFlag = longTermRefPicsPresentFlag;
			SpsTemporalMvpEnabledFlag = spsTemporalMvpEnabledFlag;
			StrongIntraSmoothingEnabledFlag = strongIntraSmoothingEnabledFlag;
			VuiParametersPresentFlag = vuiParametersPresentFlag;
			SpsExtensionPresentFlag = spsExtensionPresentFlag;
			SpsRangeExtensionFlag = spsRangeExtensionFlag;
			TransformSkipRotationEnabledFlag = transformSkipRotationEnabledFlag;
			TransformSkipContextEnabledFlag = transformSkipContextEnabledFlag;
			ImplicitRdpcmEnabledFlag = implicitRdpcmEnabledFlag;
			ExplicitRdpcmEnabledFlag = explicitRdpcmEnabledFlag;
			ExtendedPrecisionProcessingFlag = extendedPrecisionProcessingFlag;
			IntraSmoothingDisabledFlag = intraSmoothingDisabledFlag;
			HighPrecisionOffsetsEnabledFlag = highPrecisionOffsetsEnabledFlag;
			PersistentRiceAdaptationEnabledFlag = persistentRiceAdaptationEnabledFlag;
			CabacBypassAlignmentEnabledFlag = cabacBypassAlignmentEnabledFlag;
			SpsSccExtensionFlag = spsSccExtensionFlag;
			SpsCurrPicRefEnabledFlag = spsCurrPicRefEnabledFlag;
			PaletteModeEnabledFlag = paletteModeEnabledFlag;
			SpsPalettePredictorInitializersPresentFlag = spsPalettePredictorInitializersPresentFlag;
			IntraBoundaryFilteringDisabledFlag = intraBoundaryFilteringDisabledFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265ShortTermRefPicSetFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265ShortTermRefPicSetFlags
	{
		[NativeName(NativeNameType.Field, "inter_ref_pic_set_prediction_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint InterRefPicSetPredictionFlag;
		[NativeName(NativeNameType.Field, "delta_rps_sign")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeltaRpsSign;

		public unsafe StdVideoH265ShortTermRefPicSetFlags(uint interRefPicSetPredictionFlag = default, uint deltaRpsSign = default)
		{
			InterRefPicSetPredictionFlag = interRefPicSetPredictionFlag;
			DeltaRpsSign = deltaRpsSign;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265ShortTermRefPicSet")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265ShortTermRefPicSet
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoH265ShortTermRefPicSetFlags")]
		public StdVideoH265ShortTermRefPicSetFlags Flags;
		[NativeName(NativeNameType.Field, "delta_idx_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeltaIdxMinus1;
		[NativeName(NativeNameType.Field, "use_delta_flag")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort UseDeltaFlag;
		[NativeName(NativeNameType.Field, "abs_delta_rps_minus1")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort AbsDeltaRpsMinus1;
		[NativeName(NativeNameType.Field, "used_by_curr_pic_flag")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort UsedByCurrPicFlag;
		[NativeName(NativeNameType.Field, "used_by_curr_pic_s0_flag")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort UsedByCurrPicS0Flag;
		[NativeName(NativeNameType.Field, "used_by_curr_pic_s1_flag")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort UsedByCurrPicS1Flag;
		[NativeName(NativeNameType.Field, "reserved1")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort Reserved1;
		[NativeName(NativeNameType.Field, "reserved2")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved2;
		[NativeName(NativeNameType.Field, "reserved3")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved3;
		[NativeName(NativeNameType.Field, "num_negative_pics")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumNegativePics;
		[NativeName(NativeNameType.Field, "num_positive_pics")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumPositivePics;
		[NativeName(NativeNameType.Field, "delta_poc_s0_minus1")]
		[NativeName(NativeNameType.Type, "uint16_t[16]")]
		public ushort DeltaPocS0Minus1_0;
		public ushort DeltaPocS0Minus1_1;
		public ushort DeltaPocS0Minus1_2;
		public ushort DeltaPocS0Minus1_3;
		public ushort DeltaPocS0Minus1_4;
		public ushort DeltaPocS0Minus1_5;
		public ushort DeltaPocS0Minus1_6;
		public ushort DeltaPocS0Minus1_7;
		public ushort DeltaPocS0Minus1_8;
		public ushort DeltaPocS0Minus1_9;
		public ushort DeltaPocS0Minus1_10;
		public ushort DeltaPocS0Minus1_11;
		public ushort DeltaPocS0Minus1_12;
		public ushort DeltaPocS0Minus1_13;
		public ushort DeltaPocS0Minus1_14;
		public ushort DeltaPocS0Minus1_15;
		[NativeName(NativeNameType.Field, "delta_poc_s1_minus1")]
		[NativeName(NativeNameType.Type, "uint16_t[16]")]
		public ushort DeltaPocS1Minus1_0;
		public ushort DeltaPocS1Minus1_1;
		public ushort DeltaPocS1Minus1_2;
		public ushort DeltaPocS1Minus1_3;
		public ushort DeltaPocS1Minus1_4;
		public ushort DeltaPocS1Minus1_5;
		public ushort DeltaPocS1Minus1_6;
		public ushort DeltaPocS1Minus1_7;
		public ushort DeltaPocS1Minus1_8;
		public ushort DeltaPocS1Minus1_9;
		public ushort DeltaPocS1Minus1_10;
		public ushort DeltaPocS1Minus1_11;
		public ushort DeltaPocS1Minus1_12;
		public ushort DeltaPocS1Minus1_13;
		public ushort DeltaPocS1Minus1_14;
		public ushort DeltaPocS1Minus1_15;

		public unsafe StdVideoH265ShortTermRefPicSet(StdVideoH265ShortTermRefPicSetFlags flags = default, uint deltaIdxminus1 = default, ushort useDeltaFlag = default, ushort absDeltaRpsminus1 = default, ushort usedByCurrPicFlag = default, ushort usedByCurrPics0Flag = default, ushort usedByCurrPics1Flag = default, ushort reserved1 = default, byte reserved2 = default, byte reserved3 = default, byte numNegativePics = default, byte numPositivePics = default, ushort* deltaPocs0minus1 = default, ushort* deltaPocs1minus1 = default)
		{
			Flags = flags;
			DeltaIdxMinus1 = deltaIdxminus1;
			UseDeltaFlag = useDeltaFlag;
			AbsDeltaRpsMinus1 = absDeltaRpsminus1;
			UsedByCurrPicFlag = usedByCurrPicFlag;
			UsedByCurrPicS0Flag = usedByCurrPics0Flag;
			UsedByCurrPicS1Flag = usedByCurrPics1Flag;
			Reserved1 = reserved1;
			Reserved2 = reserved2;
			Reserved3 = reserved3;
			NumNegativePics = numNegativePics;
			NumPositivePics = numPositivePics;
			if (deltaPocs0minus1 != default)
			{
				DeltaPocS0Minus1_0 = deltaPocs0minus1[0];
				DeltaPocS0Minus1_1 = deltaPocs0minus1[1];
				DeltaPocS0Minus1_2 = deltaPocs0minus1[2];
				DeltaPocS0Minus1_3 = deltaPocs0minus1[3];
				DeltaPocS0Minus1_4 = deltaPocs0minus1[4];
				DeltaPocS0Minus1_5 = deltaPocs0minus1[5];
				DeltaPocS0Minus1_6 = deltaPocs0minus1[6];
				DeltaPocS0Minus1_7 = deltaPocs0minus1[7];
				DeltaPocS0Minus1_8 = deltaPocs0minus1[8];
				DeltaPocS0Minus1_9 = deltaPocs0minus1[9];
				DeltaPocS0Minus1_10 = deltaPocs0minus1[10];
				DeltaPocS0Minus1_11 = deltaPocs0minus1[11];
				DeltaPocS0Minus1_12 = deltaPocs0minus1[12];
				DeltaPocS0Minus1_13 = deltaPocs0minus1[13];
				DeltaPocS0Minus1_14 = deltaPocs0minus1[14];
				DeltaPocS0Minus1_15 = deltaPocs0minus1[15];
			}
			if (deltaPocs1minus1 != default)
			{
				DeltaPocS1Minus1_0 = deltaPocs1minus1[0];
				DeltaPocS1Minus1_1 = deltaPocs1minus1[1];
				DeltaPocS1Minus1_2 = deltaPocs1minus1[2];
				DeltaPocS1Minus1_3 = deltaPocs1minus1[3];
				DeltaPocS1Minus1_4 = deltaPocs1minus1[4];
				DeltaPocS1Minus1_5 = deltaPocs1minus1[5];
				DeltaPocS1Minus1_6 = deltaPocs1minus1[6];
				DeltaPocS1Minus1_7 = deltaPocs1minus1[7];
				DeltaPocS1Minus1_8 = deltaPocs1minus1[8];
				DeltaPocS1Minus1_9 = deltaPocs1minus1[9];
				DeltaPocS1Minus1_10 = deltaPocs1minus1[10];
				DeltaPocS1Minus1_11 = deltaPocs1minus1[11];
				DeltaPocS1Minus1_12 = deltaPocs1minus1[12];
				DeltaPocS1Minus1_13 = deltaPocs1minus1[13];
				DeltaPocS1Minus1_14 = deltaPocs1minus1[14];
				DeltaPocS1Minus1_15 = deltaPocs1minus1[15];
			}
		}

		public unsafe StdVideoH265ShortTermRefPicSet(StdVideoH265ShortTermRefPicSetFlags flags = default, uint deltaIdxminus1 = default, ushort useDeltaFlag = default, ushort absDeltaRpsminus1 = default, ushort usedByCurrPicFlag = default, ushort usedByCurrPics0Flag = default, ushort usedByCurrPics1Flag = default, ushort reserved1 = default, byte reserved2 = default, byte reserved3 = default, byte numNegativePics = default, byte numPositivePics = default, Span<ushort> deltaPocs0minus1 = default, Span<ushort> deltaPocs1minus1 = default)
		{
			Flags = flags;
			DeltaIdxMinus1 = deltaIdxminus1;
			UseDeltaFlag = useDeltaFlag;
			AbsDeltaRpsMinus1 = absDeltaRpsminus1;
			UsedByCurrPicFlag = usedByCurrPicFlag;
			UsedByCurrPicS0Flag = usedByCurrPics0Flag;
			UsedByCurrPicS1Flag = usedByCurrPics1Flag;
			Reserved1 = reserved1;
			Reserved2 = reserved2;
			Reserved3 = reserved3;
			NumNegativePics = numNegativePics;
			NumPositivePics = numPositivePics;
			if (deltaPocs0minus1 != default)
			{
				DeltaPocS0Minus1_0 = deltaPocs0minus1[0];
				DeltaPocS0Minus1_1 = deltaPocs0minus1[1];
				DeltaPocS0Minus1_2 = deltaPocs0minus1[2];
				DeltaPocS0Minus1_3 = deltaPocs0minus1[3];
				DeltaPocS0Minus1_4 = deltaPocs0minus1[4];
				DeltaPocS0Minus1_5 = deltaPocs0minus1[5];
				DeltaPocS0Minus1_6 = deltaPocs0minus1[6];
				DeltaPocS0Minus1_7 = deltaPocs0minus1[7];
				DeltaPocS0Minus1_8 = deltaPocs0minus1[8];
				DeltaPocS0Minus1_9 = deltaPocs0minus1[9];
				DeltaPocS0Minus1_10 = deltaPocs0minus1[10];
				DeltaPocS0Minus1_11 = deltaPocs0minus1[11];
				DeltaPocS0Minus1_12 = deltaPocs0minus1[12];
				DeltaPocS0Minus1_13 = deltaPocs0minus1[13];
				DeltaPocS0Minus1_14 = deltaPocs0minus1[14];
				DeltaPocS0Minus1_15 = deltaPocs0minus1[15];
			}
			if (deltaPocs1minus1 != default)
			{
				DeltaPocS1Minus1_0 = deltaPocs1minus1[0];
				DeltaPocS1Minus1_1 = deltaPocs1minus1[1];
				DeltaPocS1Minus1_2 = deltaPocs1minus1[2];
				DeltaPocS1Minus1_3 = deltaPocs1minus1[3];
				DeltaPocS1Minus1_4 = deltaPocs1minus1[4];
				DeltaPocS1Minus1_5 = deltaPocs1minus1[5];
				DeltaPocS1Minus1_6 = deltaPocs1minus1[6];
				DeltaPocS1Minus1_7 = deltaPocs1minus1[7];
				DeltaPocS1Minus1_8 = deltaPocs1minus1[8];
				DeltaPocS1Minus1_9 = deltaPocs1minus1[9];
				DeltaPocS1Minus1_10 = deltaPocs1minus1[10];
				DeltaPocS1Minus1_11 = deltaPocs1minus1[11];
				DeltaPocS1Minus1_12 = deltaPocs1minus1[12];
				DeltaPocS1Minus1_13 = deltaPocs1minus1[13];
				DeltaPocS1Minus1_14 = deltaPocs1minus1[14];
				DeltaPocS1Minus1_15 = deltaPocs1minus1[15];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265LongTermRefPicsSps")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265LongTermRefPicsSps
	{
		[NativeName(NativeNameType.Field, "used_by_curr_pic_lt_sps_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint UsedByCurrPicLtSpsFlag;
		[NativeName(NativeNameType.Field, "lt_ref_pic_poc_lsb_sps")]
		[NativeName(NativeNameType.Type, "uint32_t[32]")]
		public uint LtRefPicPocLsbSps_0;
		public uint LtRefPicPocLsbSps_1;
		public uint LtRefPicPocLsbSps_2;
		public uint LtRefPicPocLsbSps_3;
		public uint LtRefPicPocLsbSps_4;
		public uint LtRefPicPocLsbSps_5;
		public uint LtRefPicPocLsbSps_6;
		public uint LtRefPicPocLsbSps_7;
		public uint LtRefPicPocLsbSps_8;
		public uint LtRefPicPocLsbSps_9;
		public uint LtRefPicPocLsbSps_10;
		public uint LtRefPicPocLsbSps_11;
		public uint LtRefPicPocLsbSps_12;
		public uint LtRefPicPocLsbSps_13;
		public uint LtRefPicPocLsbSps_14;
		public uint LtRefPicPocLsbSps_15;
		public uint LtRefPicPocLsbSps_16;
		public uint LtRefPicPocLsbSps_17;
		public uint LtRefPicPocLsbSps_18;
		public uint LtRefPicPocLsbSps_19;
		public uint LtRefPicPocLsbSps_20;
		public uint LtRefPicPocLsbSps_21;
		public uint LtRefPicPocLsbSps_22;
		public uint LtRefPicPocLsbSps_23;
		public uint LtRefPicPocLsbSps_24;
		public uint LtRefPicPocLsbSps_25;
		public uint LtRefPicPocLsbSps_26;
		public uint LtRefPicPocLsbSps_27;
		public uint LtRefPicPocLsbSps_28;
		public uint LtRefPicPocLsbSps_29;
		public uint LtRefPicPocLsbSps_30;
		public uint LtRefPicPocLsbSps_31;

		public unsafe StdVideoH265LongTermRefPicsSps(uint usedByCurrPicLtSpsFlag = default, uint* ltRefPicPocLsbSps = default)
		{
			UsedByCurrPicLtSpsFlag = usedByCurrPicLtSpsFlag;
			if (ltRefPicPocLsbSps != default)
			{
				LtRefPicPocLsbSps_0 = ltRefPicPocLsbSps[0];
				LtRefPicPocLsbSps_1 = ltRefPicPocLsbSps[1];
				LtRefPicPocLsbSps_2 = ltRefPicPocLsbSps[2];
				LtRefPicPocLsbSps_3 = ltRefPicPocLsbSps[3];
				LtRefPicPocLsbSps_4 = ltRefPicPocLsbSps[4];
				LtRefPicPocLsbSps_5 = ltRefPicPocLsbSps[5];
				LtRefPicPocLsbSps_6 = ltRefPicPocLsbSps[6];
				LtRefPicPocLsbSps_7 = ltRefPicPocLsbSps[7];
				LtRefPicPocLsbSps_8 = ltRefPicPocLsbSps[8];
				LtRefPicPocLsbSps_9 = ltRefPicPocLsbSps[9];
				LtRefPicPocLsbSps_10 = ltRefPicPocLsbSps[10];
				LtRefPicPocLsbSps_11 = ltRefPicPocLsbSps[11];
				LtRefPicPocLsbSps_12 = ltRefPicPocLsbSps[12];
				LtRefPicPocLsbSps_13 = ltRefPicPocLsbSps[13];
				LtRefPicPocLsbSps_14 = ltRefPicPocLsbSps[14];
				LtRefPicPocLsbSps_15 = ltRefPicPocLsbSps[15];
				LtRefPicPocLsbSps_16 = ltRefPicPocLsbSps[16];
				LtRefPicPocLsbSps_17 = ltRefPicPocLsbSps[17];
				LtRefPicPocLsbSps_18 = ltRefPicPocLsbSps[18];
				LtRefPicPocLsbSps_19 = ltRefPicPocLsbSps[19];
				LtRefPicPocLsbSps_20 = ltRefPicPocLsbSps[20];
				LtRefPicPocLsbSps_21 = ltRefPicPocLsbSps[21];
				LtRefPicPocLsbSps_22 = ltRefPicPocLsbSps[22];
				LtRefPicPocLsbSps_23 = ltRefPicPocLsbSps[23];
				LtRefPicPocLsbSps_24 = ltRefPicPocLsbSps[24];
				LtRefPicPocLsbSps_25 = ltRefPicPocLsbSps[25];
				LtRefPicPocLsbSps_26 = ltRefPicPocLsbSps[26];
				LtRefPicPocLsbSps_27 = ltRefPicPocLsbSps[27];
				LtRefPicPocLsbSps_28 = ltRefPicPocLsbSps[28];
				LtRefPicPocLsbSps_29 = ltRefPicPocLsbSps[29];
				LtRefPicPocLsbSps_30 = ltRefPicPocLsbSps[30];
				LtRefPicPocLsbSps_31 = ltRefPicPocLsbSps[31];
			}
		}

		public unsafe StdVideoH265LongTermRefPicsSps(uint usedByCurrPicLtSpsFlag = default, Span<uint> ltRefPicPocLsbSps = default)
		{
			UsedByCurrPicLtSpsFlag = usedByCurrPicLtSpsFlag;
			if (ltRefPicPocLsbSps != default)
			{
				LtRefPicPocLsbSps_0 = ltRefPicPocLsbSps[0];
				LtRefPicPocLsbSps_1 = ltRefPicPocLsbSps[1];
				LtRefPicPocLsbSps_2 = ltRefPicPocLsbSps[2];
				LtRefPicPocLsbSps_3 = ltRefPicPocLsbSps[3];
				LtRefPicPocLsbSps_4 = ltRefPicPocLsbSps[4];
				LtRefPicPocLsbSps_5 = ltRefPicPocLsbSps[5];
				LtRefPicPocLsbSps_6 = ltRefPicPocLsbSps[6];
				LtRefPicPocLsbSps_7 = ltRefPicPocLsbSps[7];
				LtRefPicPocLsbSps_8 = ltRefPicPocLsbSps[8];
				LtRefPicPocLsbSps_9 = ltRefPicPocLsbSps[9];
				LtRefPicPocLsbSps_10 = ltRefPicPocLsbSps[10];
				LtRefPicPocLsbSps_11 = ltRefPicPocLsbSps[11];
				LtRefPicPocLsbSps_12 = ltRefPicPocLsbSps[12];
				LtRefPicPocLsbSps_13 = ltRefPicPocLsbSps[13];
				LtRefPicPocLsbSps_14 = ltRefPicPocLsbSps[14];
				LtRefPicPocLsbSps_15 = ltRefPicPocLsbSps[15];
				LtRefPicPocLsbSps_16 = ltRefPicPocLsbSps[16];
				LtRefPicPocLsbSps_17 = ltRefPicPocLsbSps[17];
				LtRefPicPocLsbSps_18 = ltRefPicPocLsbSps[18];
				LtRefPicPocLsbSps_19 = ltRefPicPocLsbSps[19];
				LtRefPicPocLsbSps_20 = ltRefPicPocLsbSps[20];
				LtRefPicPocLsbSps_21 = ltRefPicPocLsbSps[21];
				LtRefPicPocLsbSps_22 = ltRefPicPocLsbSps[22];
				LtRefPicPocLsbSps_23 = ltRefPicPocLsbSps[23];
				LtRefPicPocLsbSps_24 = ltRefPicPocLsbSps[24];
				LtRefPicPocLsbSps_25 = ltRefPicPocLsbSps[25];
				LtRefPicPocLsbSps_26 = ltRefPicPocLsbSps[26];
				LtRefPicPocLsbSps_27 = ltRefPicPocLsbSps[27];
				LtRefPicPocLsbSps_28 = ltRefPicPocLsbSps[28];
				LtRefPicPocLsbSps_29 = ltRefPicPocLsbSps[29];
				LtRefPicPocLsbSps_30 = ltRefPicPocLsbSps[30];
				LtRefPicPocLsbSps_31 = ltRefPicPocLsbSps[31];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265SequenceParameterSet")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265SequenceParameterSet
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoH265SpsFlags")]
		public StdVideoH265SpsFlags Flags;
		[NativeName(NativeNameType.Field, "chroma_format_idc")]
		[NativeName(NativeNameType.Type, "StdVideoH265ChromaFormatIdc")]
		public StdVideoH265ChromaFormatIdc ChromaFormatIdc;
		[NativeName(NativeNameType.Field, "pic_width_in_luma_samples")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PicWidthInLumaSamples;
		[NativeName(NativeNameType.Field, "pic_height_in_luma_samples")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PicHeightInLumaSamples;
		[NativeName(NativeNameType.Field, "sps_video_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte SpsVideoParameterSetId;
		[NativeName(NativeNameType.Field, "sps_max_sub_layers_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte SpsMaxSubLayersMinus1;
		[NativeName(NativeNameType.Field, "sps_seq_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte SpsSeqParameterSetId;
		[NativeName(NativeNameType.Field, "bit_depth_luma_minus8")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte BitDepthLumaMinus8;
		[NativeName(NativeNameType.Field, "bit_depth_chroma_minus8")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte BitDepthChromaMinus8;
		[NativeName(NativeNameType.Field, "log2_max_pic_order_cnt_lsb_minus4")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2MaxPicOrderCntLsbMinus4;
		[NativeName(NativeNameType.Field, "log2_min_luma_coding_block_size_minus3")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2MinLumaCodingBlockSizeMinus3;
		[NativeName(NativeNameType.Field, "log2_diff_max_min_luma_coding_block_size")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2DiffMaxMinLumaCodingBlockSize;
		[NativeName(NativeNameType.Field, "log2_min_luma_transform_block_size_minus2")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2MinLumaTransformBlockSizeMinus2;
		[NativeName(NativeNameType.Field, "log2_diff_max_min_luma_transform_block_size")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2DiffMaxMinLumaTransformBlockSize;
		[NativeName(NativeNameType.Field, "max_transform_hierarchy_depth_inter")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte MaxTransformHierarchyDepthInter;
		[NativeName(NativeNameType.Field, "max_transform_hierarchy_depth_intra")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte MaxTransformHierarchyDepthIntra;
		[NativeName(NativeNameType.Field, "num_short_term_ref_pic_sets")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumShortTermRefPicSets;
		[NativeName(NativeNameType.Field, "num_long_term_ref_pics_sps")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumLongTermRefPicsSps;
		[NativeName(NativeNameType.Field, "pcm_sample_bit_depth_luma_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PcmSampleBitDepthLumaMinus1;
		[NativeName(NativeNameType.Field, "pcm_sample_bit_depth_chroma_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PcmSampleBitDepthChromaMinus1;
		[NativeName(NativeNameType.Field, "log2_min_pcm_luma_coding_block_size_minus3")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2MinPcmLumaCodingBlockSizeMinus3;
		[NativeName(NativeNameType.Field, "log2_diff_max_min_pcm_luma_coding_block_size")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2DiffMaxMinPcmLumaCodingBlockSize;
		[NativeName(NativeNameType.Field, "reserved1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved1;
		[NativeName(NativeNameType.Field, "reserved2")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved2;
		[NativeName(NativeNameType.Field, "palette_max_size")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PaletteMaxSize;
		[NativeName(NativeNameType.Field, "delta_palette_max_predictor_size")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte DeltaPaletteMaxPredictorSize;
		[NativeName(NativeNameType.Field, "motion_vector_resolution_control_idc")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte MotionVectorResolutionControlIdc;
		[NativeName(NativeNameType.Field, "sps_num_palette_predictor_initializers_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte SpsNumPalettePredictorInitializersMinus1;
		[NativeName(NativeNameType.Field, "conf_win_left_offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConfWinLeftOffset;
		[NativeName(NativeNameType.Field, "conf_win_right_offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConfWinRightOffset;
		[NativeName(NativeNameType.Field, "conf_win_top_offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConfWinTopOffset;
		[NativeName(NativeNameType.Field, "conf_win_bottom_offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConfWinBottomOffset;
		[NativeName(NativeNameType.Field, "pProfileTierLevel")]
		[NativeName(NativeNameType.Type, "const StdVideoH265ProfileTierLevel*")]
		public unsafe StdVideoH265ProfileTierLevel* PProfileTierLevel;
		[NativeName(NativeNameType.Field, "pDecPicBufMgr")]
		[NativeName(NativeNameType.Type, "const StdVideoH265DecPicBufMgr*")]
		public unsafe StdVideoH265DecPicBufMgr* PDecPicBufMgr;
		[NativeName(NativeNameType.Field, "pScalingLists")]
		[NativeName(NativeNameType.Type, "const StdVideoH265ScalingLists*")]
		public unsafe StdVideoH265ScalingLists* PScalingLists;
		[NativeName(NativeNameType.Field, "pShortTermRefPicSet")]
		[NativeName(NativeNameType.Type, "const StdVideoH265ShortTermRefPicSet*")]
		public unsafe StdVideoH265ShortTermRefPicSet* PShortTermRefPicSet;
		[NativeName(NativeNameType.Field, "pLongTermRefPicsSps")]
		[NativeName(NativeNameType.Type, "const StdVideoH265LongTermRefPicsSps*")]
		public unsafe StdVideoH265LongTermRefPicsSps* PLongTermRefPicsSps;
		[NativeName(NativeNameType.Field, "pSequenceParameterSetVui")]
		[NativeName(NativeNameType.Type, "const StdVideoH265SequenceParameterSetVui*")]
		public unsafe StdVideoH265SequenceParameterSetVui* PSequenceParameterSetVui;
		[NativeName(NativeNameType.Field, "pPredictorPaletteEntries")]
		[NativeName(NativeNameType.Type, "const StdVideoH265PredictorPaletteEntries*")]
		public unsafe StdVideoH265PredictorPaletteEntries* PPredictorPaletteEntries;

		public unsafe StdVideoH265SequenceParameterSet(StdVideoH265SpsFlags flags = default, StdVideoH265ChromaFormatIdc chromaFormatIdc = default, uint picWidthInLumaSamples = default, uint picHeightInLumaSamples = default, byte spsVideoParameterSetId = default, byte spsMaxSubLayersminus1 = default, byte spsSeqParameterSetId = default, byte bitDepthLumaminus8 = default, byte bitDepthChromaminus8 = default, byte log2MaxPicOrderCntLsbminus4 = default, byte log2MinLumaCodingBlockSizeminus3 = default, byte log2DiffMaxMinLumaCodingBlockSize = default, byte log2MinLumaTransformBlockSizeminus2 = default, byte log2DiffMaxMinLumaTransformBlockSize = default, byte maxTransformHierarchyDepthInter = default, byte maxTransformHierarchyDepthIntra = default, byte numShortTermRefPicSets = default, byte numLongTermRefPicsSps = default, byte pcmSampleBitDepthLumaminus1 = default, byte pcmSampleBitDepthChromaminus1 = default, byte log2MinPcmLumaCodingBlockSizeminus3 = default, byte log2DiffMaxMinPcmLumaCodingBlockSize = default, byte reserved1 = default, byte reserved2 = default, byte paletteMaxSize = default, byte deltaPaletteMaxPredictorSize = default, byte motionVectorResolutionControlIdc = default, byte spsNumPalettePredictorInitializersminus1 = default, uint confWinLeftOffset = default, uint confWinRightOffset = default, uint confWinTopOffset = default, uint confWinBottomOffset = default, StdVideoH265ProfileTierLevel* pProfileTierLevel = default, StdVideoH265DecPicBufMgr* pDecPicBufMgr = default, StdVideoH265ScalingLists* pScalingLists = default, StdVideoH265ShortTermRefPicSet* pShortTermRefPicSet = default, StdVideoH265LongTermRefPicsSps* pLongTermRefPicsSps = default, StdVideoH265SequenceParameterSetVui* pSequenceParameterSetVui = default, StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries = default)
		{
			Flags = flags;
			ChromaFormatIdc = chromaFormatIdc;
			PicWidthInLumaSamples = picWidthInLumaSamples;
			PicHeightInLumaSamples = picHeightInLumaSamples;
			SpsVideoParameterSetId = spsVideoParameterSetId;
			SpsMaxSubLayersMinus1 = spsMaxSubLayersminus1;
			SpsSeqParameterSetId = spsSeqParameterSetId;
			BitDepthLumaMinus8 = bitDepthLumaminus8;
			BitDepthChromaMinus8 = bitDepthChromaminus8;
			Log2MaxPicOrderCntLsbMinus4 = log2MaxPicOrderCntLsbminus4;
			Log2MinLumaCodingBlockSizeMinus3 = log2MinLumaCodingBlockSizeminus3;
			Log2DiffMaxMinLumaCodingBlockSize = log2DiffMaxMinLumaCodingBlockSize;
			Log2MinLumaTransformBlockSizeMinus2 = log2MinLumaTransformBlockSizeminus2;
			Log2DiffMaxMinLumaTransformBlockSize = log2DiffMaxMinLumaTransformBlockSize;
			MaxTransformHierarchyDepthInter = maxTransformHierarchyDepthInter;
			MaxTransformHierarchyDepthIntra = maxTransformHierarchyDepthIntra;
			NumShortTermRefPicSets = numShortTermRefPicSets;
			NumLongTermRefPicsSps = numLongTermRefPicsSps;
			PcmSampleBitDepthLumaMinus1 = pcmSampleBitDepthLumaminus1;
			PcmSampleBitDepthChromaMinus1 = pcmSampleBitDepthChromaminus1;
			Log2MinPcmLumaCodingBlockSizeMinus3 = log2MinPcmLumaCodingBlockSizeminus3;
			Log2DiffMaxMinPcmLumaCodingBlockSize = log2DiffMaxMinPcmLumaCodingBlockSize;
			Reserved1 = reserved1;
			Reserved2 = reserved2;
			PaletteMaxSize = paletteMaxSize;
			DeltaPaletteMaxPredictorSize = deltaPaletteMaxPredictorSize;
			MotionVectorResolutionControlIdc = motionVectorResolutionControlIdc;
			SpsNumPalettePredictorInitializersMinus1 = spsNumPalettePredictorInitializersminus1;
			ConfWinLeftOffset = confWinLeftOffset;
			ConfWinRightOffset = confWinRightOffset;
			ConfWinTopOffset = confWinTopOffset;
			ConfWinBottomOffset = confWinBottomOffset;
			PProfileTierLevel = pProfileTierLevel;
			PDecPicBufMgr = pDecPicBufMgr;
			PScalingLists = pScalingLists;
			PShortTermRefPicSet = pShortTermRefPicSet;
			PLongTermRefPicsSps = pLongTermRefPicsSps;
			PSequenceParameterSetVui = pSequenceParameterSetVui;
			PPredictorPaletteEntries = pPredictorPaletteEntries;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265PpsFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265PpsFlags
	{
		[NativeName(NativeNameType.Field, "dependent_slice_segments_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DependentSliceSegmentsEnabledFlag;
		[NativeName(NativeNameType.Field, "output_flag_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint OutputFlagPresentFlag;
		[NativeName(NativeNameType.Field, "sign_data_hiding_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SignDataHidingEnabledFlag;
		[NativeName(NativeNameType.Field, "cabac_init_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CabacInitPresentFlag;
		[NativeName(NativeNameType.Field, "constrained_intra_pred_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConstrainedIntraPredFlag;
		[NativeName(NativeNameType.Field, "transform_skip_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint TransformSkipEnabledFlag;
		[NativeName(NativeNameType.Field, "cu_qp_delta_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CuQpDeltaEnabledFlag;
		[NativeName(NativeNameType.Field, "pps_slice_chroma_qp_offsets_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PpsSliceChromaQpOffsetsPresentFlag;
		[NativeName(NativeNameType.Field, "weighted_pred_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint WeightedPredFlag;
		[NativeName(NativeNameType.Field, "weighted_bipred_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint WeightedBipredFlag;
		[NativeName(NativeNameType.Field, "transquant_bypass_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint TransquantBypassEnabledFlag;
		[NativeName(NativeNameType.Field, "tiles_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint TilesEnabledFlag;
		[NativeName(NativeNameType.Field, "entropy_coding_sync_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint EntropyCodingSyncEnabledFlag;
		[NativeName(NativeNameType.Field, "uniform_spacing_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint UniformSpacingFlag;
		[NativeName(NativeNameType.Field, "loop_filter_across_tiles_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint LoopFilterAcrossTilesEnabledFlag;
		[NativeName(NativeNameType.Field, "pps_loop_filter_across_slices_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PpsLoopFilterAcrossSlicesEnabledFlag;
		[NativeName(NativeNameType.Field, "deblocking_filter_control_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeblockingFilterControlPresentFlag;
		[NativeName(NativeNameType.Field, "deblocking_filter_override_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeblockingFilterOverrideEnabledFlag;
		[NativeName(NativeNameType.Field, "pps_deblocking_filter_disabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PpsDeblockingFilterDisabledFlag;
		[NativeName(NativeNameType.Field, "pps_scaling_list_data_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PpsScalingListDataPresentFlag;
		[NativeName(NativeNameType.Field, "lists_modification_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ListsModificationPresentFlag;
		[NativeName(NativeNameType.Field, "slice_segment_header_extension_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SliceSegmentHeaderExtensionPresentFlag;
		[NativeName(NativeNameType.Field, "pps_extension_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PpsExtensionPresentFlag;
		[NativeName(NativeNameType.Field, "cross_component_prediction_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CrossComponentPredictionEnabledFlag;
		[NativeName(NativeNameType.Field, "chroma_qp_offset_list_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ChromaQpOffsetListEnabledFlag;
		[NativeName(NativeNameType.Field, "pps_curr_pic_ref_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PpsCurrPicRefEnabledFlag;
		[NativeName(NativeNameType.Field, "residual_adaptive_colour_transform_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ResidualAdaptiveColourTransformEnabledFlag;
		[NativeName(NativeNameType.Field, "pps_slice_act_qp_offsets_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PpsSliceActQpOffsetsPresentFlag;
		[NativeName(NativeNameType.Field, "pps_palette_predictor_initializers_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PpsPalettePredictorInitializersPresentFlag;
		[NativeName(NativeNameType.Field, "monochrome_palette_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MonochromePaletteFlag;
		[NativeName(NativeNameType.Field, "pps_range_extension_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PpsRangeExtensionFlag;

		public unsafe StdVideoH265PpsFlags(uint dependentSliceSegmentsEnabledFlag = default, uint outputFlagPresentFlag = default, uint signDataHidingEnabledFlag = default, uint cabacInitPresentFlag = default, uint constrainedIntraPredFlag = default, uint transformSkipEnabledFlag = default, uint cuQpDeltaEnabledFlag = default, uint ppsSliceChromaQpOffsetsPresentFlag = default, uint weightedPredFlag = default, uint weightedBipredFlag = default, uint transquantBypassEnabledFlag = default, uint tilesEnabledFlag = default, uint entropyCodingSyncEnabledFlag = default, uint uniformSpacingFlag = default, uint loopFilterAcrossTilesEnabledFlag = default, uint ppsLoopFilterAcrossSlicesEnabledFlag = default, uint deblockingFilterControlPresentFlag = default, uint deblockingFilterOverrideEnabledFlag = default, uint ppsDeblockingFilterDisabledFlag = default, uint ppsScalingListDataPresentFlag = default, uint listsModificationPresentFlag = default, uint sliceSegmentHeaderExtensionPresentFlag = default, uint ppsExtensionPresentFlag = default, uint crossComponentPredictionEnabledFlag = default, uint chromaQpOffsetListEnabledFlag = default, uint ppsCurrPicRefEnabledFlag = default, uint residualAdaptiveColourTransformEnabledFlag = default, uint ppsSliceActQpOffsetsPresentFlag = default, uint ppsPalettePredictorInitializersPresentFlag = default, uint monochromePaletteFlag = default, uint ppsRangeExtensionFlag = default)
		{
			DependentSliceSegmentsEnabledFlag = dependentSliceSegmentsEnabledFlag;
			OutputFlagPresentFlag = outputFlagPresentFlag;
			SignDataHidingEnabledFlag = signDataHidingEnabledFlag;
			CabacInitPresentFlag = cabacInitPresentFlag;
			ConstrainedIntraPredFlag = constrainedIntraPredFlag;
			TransformSkipEnabledFlag = transformSkipEnabledFlag;
			CuQpDeltaEnabledFlag = cuQpDeltaEnabledFlag;
			PpsSliceChromaQpOffsetsPresentFlag = ppsSliceChromaQpOffsetsPresentFlag;
			WeightedPredFlag = weightedPredFlag;
			WeightedBipredFlag = weightedBipredFlag;
			TransquantBypassEnabledFlag = transquantBypassEnabledFlag;
			TilesEnabledFlag = tilesEnabledFlag;
			EntropyCodingSyncEnabledFlag = entropyCodingSyncEnabledFlag;
			UniformSpacingFlag = uniformSpacingFlag;
			LoopFilterAcrossTilesEnabledFlag = loopFilterAcrossTilesEnabledFlag;
			PpsLoopFilterAcrossSlicesEnabledFlag = ppsLoopFilterAcrossSlicesEnabledFlag;
			DeblockingFilterControlPresentFlag = deblockingFilterControlPresentFlag;
			DeblockingFilterOverrideEnabledFlag = deblockingFilterOverrideEnabledFlag;
			PpsDeblockingFilterDisabledFlag = ppsDeblockingFilterDisabledFlag;
			PpsScalingListDataPresentFlag = ppsScalingListDataPresentFlag;
			ListsModificationPresentFlag = listsModificationPresentFlag;
			SliceSegmentHeaderExtensionPresentFlag = sliceSegmentHeaderExtensionPresentFlag;
			PpsExtensionPresentFlag = ppsExtensionPresentFlag;
			CrossComponentPredictionEnabledFlag = crossComponentPredictionEnabledFlag;
			ChromaQpOffsetListEnabledFlag = chromaQpOffsetListEnabledFlag;
			PpsCurrPicRefEnabledFlag = ppsCurrPicRefEnabledFlag;
			ResidualAdaptiveColourTransformEnabledFlag = residualAdaptiveColourTransformEnabledFlag;
			PpsSliceActQpOffsetsPresentFlag = ppsSliceActQpOffsetsPresentFlag;
			PpsPalettePredictorInitializersPresentFlag = ppsPalettePredictorInitializersPresentFlag;
			MonochromePaletteFlag = monochromePaletteFlag;
			PpsRangeExtensionFlag = ppsRangeExtensionFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265PictureParameterSet")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265PictureParameterSet
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoH265PpsFlags")]
		public StdVideoH265PpsFlags Flags;
		[NativeName(NativeNameType.Field, "pps_pic_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PpsPicParameterSetId;
		[NativeName(NativeNameType.Field, "pps_seq_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PpsSeqParameterSetId;
		[NativeName(NativeNameType.Field, "sps_video_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte SpsVideoParameterSetId;
		[NativeName(NativeNameType.Field, "num_extra_slice_header_bits")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumExtraSliceHeaderBits;
		[NativeName(NativeNameType.Field, "num_ref_idx_l0_default_active_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumRefIdxL0DefaultActiveMinus1;
		[NativeName(NativeNameType.Field, "num_ref_idx_l1_default_active_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumRefIdxL1DefaultActiveMinus1;
		[NativeName(NativeNameType.Field, "init_qp_minus26")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte InitQpMinus26;
		[NativeName(NativeNameType.Field, "diff_cu_qp_delta_depth")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte DiffCuQpDeltaDepth;
		[NativeName(NativeNameType.Field, "pps_cb_qp_offset")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte PpsCbQpOffset;
		[NativeName(NativeNameType.Field, "pps_cr_qp_offset")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte PpsCrQpOffset;
		[NativeName(NativeNameType.Field, "pps_beta_offset_div2")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte PpsBetaOffsetDiv2;
		[NativeName(NativeNameType.Field, "pps_tc_offset_div2")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte PpsTcOffsetDiv2;
		[NativeName(NativeNameType.Field, "log2_parallel_merge_level_minus2")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2ParallelMergeLevelMinus2;
		[NativeName(NativeNameType.Field, "log2_max_transform_skip_block_size_minus2")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2MaxTransformSkipBlockSizeMinus2;
		[NativeName(NativeNameType.Field, "diff_cu_chroma_qp_offset_depth")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte DiffCuChromaQpOffsetDepth;
		[NativeName(NativeNameType.Field, "chroma_qp_offset_list_len_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte ChromaQpOffsetListLenMinus1;
		[NativeName(NativeNameType.Field, "cb_qp_offset_list")]
		[NativeName(NativeNameType.Type, "int8_t[6]")]
		public byte CbQpOffsetList_0;
		public byte CbQpOffsetList_1;
		public byte CbQpOffsetList_2;
		public byte CbQpOffsetList_3;
		public byte CbQpOffsetList_4;
		public byte CbQpOffsetList_5;
		[NativeName(NativeNameType.Field, "cr_qp_offset_list")]
		[NativeName(NativeNameType.Type, "int8_t[6]")]
		public byte CrQpOffsetList_0;
		public byte CrQpOffsetList_1;
		public byte CrQpOffsetList_2;
		public byte CrQpOffsetList_3;
		public byte CrQpOffsetList_4;
		public byte CrQpOffsetList_5;
		[NativeName(NativeNameType.Field, "log2_sao_offset_scale_luma")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2SaoOffsetScaleLuma;
		[NativeName(NativeNameType.Field, "log2_sao_offset_scale_chroma")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2SaoOffsetScaleChroma;
		[NativeName(NativeNameType.Field, "pps_act_y_qp_offset_plus5")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte PpsActYQpOffsetPlus5;
		[NativeName(NativeNameType.Field, "pps_act_cb_qp_offset_plus5")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte PpsActCbQpOffsetPlus5;
		[NativeName(NativeNameType.Field, "pps_act_cr_qp_offset_plus3")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte PpsActCrQpOffsetPlus3;
		[NativeName(NativeNameType.Field, "pps_num_palette_predictor_initializers")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PpsNumPalettePredictorInitializers;
		[NativeName(NativeNameType.Field, "luma_bit_depth_entry_minus8")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte LumaBitDepthEntryMinus8;
		[NativeName(NativeNameType.Field, "chroma_bit_depth_entry_minus8")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte ChromaBitDepthEntryMinus8;
		[NativeName(NativeNameType.Field, "num_tile_columns_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumTileColumnsMinus1;
		[NativeName(NativeNameType.Field, "num_tile_rows_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumTileRowsMinus1;
		[NativeName(NativeNameType.Field, "reserved1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved1;
		[NativeName(NativeNameType.Field, "reserved2")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved2;
		[NativeName(NativeNameType.Field, "column_width_minus1")]
		[NativeName(NativeNameType.Type, "uint16_t[19]")]
		public ushort ColumnWidthMinus1_0;
		public ushort ColumnWidthMinus1_1;
		public ushort ColumnWidthMinus1_2;
		public ushort ColumnWidthMinus1_3;
		public ushort ColumnWidthMinus1_4;
		public ushort ColumnWidthMinus1_5;
		public ushort ColumnWidthMinus1_6;
		public ushort ColumnWidthMinus1_7;
		public ushort ColumnWidthMinus1_8;
		public ushort ColumnWidthMinus1_9;
		public ushort ColumnWidthMinus1_10;
		public ushort ColumnWidthMinus1_11;
		public ushort ColumnWidthMinus1_12;
		public ushort ColumnWidthMinus1_13;
		public ushort ColumnWidthMinus1_14;
		public ushort ColumnWidthMinus1_15;
		public ushort ColumnWidthMinus1_16;
		public ushort ColumnWidthMinus1_17;
		public ushort ColumnWidthMinus1_18;
		[NativeName(NativeNameType.Field, "row_height_minus1")]
		[NativeName(NativeNameType.Type, "uint16_t[21]")]
		public ushort RowHeightMinus1_0;
		public ushort RowHeightMinus1_1;
		public ushort RowHeightMinus1_2;
		public ushort RowHeightMinus1_3;
		public ushort RowHeightMinus1_4;
		public ushort RowHeightMinus1_5;
		public ushort RowHeightMinus1_6;
		public ushort RowHeightMinus1_7;
		public ushort RowHeightMinus1_8;
		public ushort RowHeightMinus1_9;
		public ushort RowHeightMinus1_10;
		public ushort RowHeightMinus1_11;
		public ushort RowHeightMinus1_12;
		public ushort RowHeightMinus1_13;
		public ushort RowHeightMinus1_14;
		public ushort RowHeightMinus1_15;
		public ushort RowHeightMinus1_16;
		public ushort RowHeightMinus1_17;
		public ushort RowHeightMinus1_18;
		public ushort RowHeightMinus1_19;
		public ushort RowHeightMinus1_20;
		[NativeName(NativeNameType.Field, "reserved3")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Reserved3;
		[NativeName(NativeNameType.Field, "pScalingLists")]
		[NativeName(NativeNameType.Type, "const StdVideoH265ScalingLists*")]
		public unsafe StdVideoH265ScalingLists* PScalingLists;
		[NativeName(NativeNameType.Field, "pPredictorPaletteEntries")]
		[NativeName(NativeNameType.Type, "const StdVideoH265PredictorPaletteEntries*")]
		public unsafe StdVideoH265PredictorPaletteEntries* PPredictorPaletteEntries;

		public unsafe StdVideoH265PictureParameterSet(StdVideoH265PpsFlags flags = default, byte ppsPicParameterSetId = default, byte ppsSeqParameterSetId = default, byte spsVideoParameterSetId = default, byte numExtraSliceHeaderBits = default, byte numRefIdxl0DefaultActiveminus1 = default, byte numRefIdxl1DefaultActiveminus1 = default, byte initQpminus26 = default, byte diffCuQpDeltaDepth = default, byte ppsCbQpOffset = default, byte ppsCrQpOffset = default, byte ppsBetaOffsetdiv2 = default, byte ppsTcOffsetdiv2 = default, byte log2ParallelMergeLevelminus2 = default, byte log2MaxTransformSkipBlockSizeminus2 = default, byte diffCuChromaQpOffsetDepth = default, byte chromaQpOffsetListLenminus1 = default, byte* cbQpOffsetList = default, byte* crQpOffsetList = default, byte log2SaoOffsetScaleLuma = default, byte log2SaoOffsetScaleChroma = default, byte ppsActYQpOffsetplus5 = default, byte ppsActCbQpOffsetplus5 = default, byte ppsActCrQpOffsetplus3 = default, byte ppsNumPalettePredictorInitializers = default, byte lumaBitDepthEntryminus8 = default, byte chromaBitDepthEntryminus8 = default, byte numTileColumnsminus1 = default, byte numTileRowsminus1 = default, byte reserved1 = default, byte reserved2 = default, ushort* columnWidthminus1 = default, ushort* rowHeightminus1 = default, uint reserved3 = default, StdVideoH265ScalingLists* pScalingLists = default, StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries = default)
		{
			Flags = flags;
			PpsPicParameterSetId = ppsPicParameterSetId;
			PpsSeqParameterSetId = ppsSeqParameterSetId;
			SpsVideoParameterSetId = spsVideoParameterSetId;
			NumExtraSliceHeaderBits = numExtraSliceHeaderBits;
			NumRefIdxL0DefaultActiveMinus1 = numRefIdxl0DefaultActiveminus1;
			NumRefIdxL1DefaultActiveMinus1 = numRefIdxl1DefaultActiveminus1;
			InitQpMinus26 = initQpminus26;
			DiffCuQpDeltaDepth = diffCuQpDeltaDepth;
			PpsCbQpOffset = ppsCbQpOffset;
			PpsCrQpOffset = ppsCrQpOffset;
			PpsBetaOffsetDiv2 = ppsBetaOffsetdiv2;
			PpsTcOffsetDiv2 = ppsTcOffsetdiv2;
			Log2ParallelMergeLevelMinus2 = log2ParallelMergeLevelminus2;
			Log2MaxTransformSkipBlockSizeMinus2 = log2MaxTransformSkipBlockSizeminus2;
			DiffCuChromaQpOffsetDepth = diffCuChromaQpOffsetDepth;
			ChromaQpOffsetListLenMinus1 = chromaQpOffsetListLenminus1;
			if (cbQpOffsetList != default)
			{
				CbQpOffsetList_0 = cbQpOffsetList[0];
				CbQpOffsetList_1 = cbQpOffsetList[1];
				CbQpOffsetList_2 = cbQpOffsetList[2];
				CbQpOffsetList_3 = cbQpOffsetList[3];
				CbQpOffsetList_4 = cbQpOffsetList[4];
				CbQpOffsetList_5 = cbQpOffsetList[5];
			}
			if (crQpOffsetList != default)
			{
				CrQpOffsetList_0 = crQpOffsetList[0];
				CrQpOffsetList_1 = crQpOffsetList[1];
				CrQpOffsetList_2 = crQpOffsetList[2];
				CrQpOffsetList_3 = crQpOffsetList[3];
				CrQpOffsetList_4 = crQpOffsetList[4];
				CrQpOffsetList_5 = crQpOffsetList[5];
			}
			Log2SaoOffsetScaleLuma = log2SaoOffsetScaleLuma;
			Log2SaoOffsetScaleChroma = log2SaoOffsetScaleChroma;
			PpsActYQpOffsetPlus5 = ppsActYQpOffsetplus5;
			PpsActCbQpOffsetPlus5 = ppsActCbQpOffsetplus5;
			PpsActCrQpOffsetPlus3 = ppsActCrQpOffsetplus3;
			PpsNumPalettePredictorInitializers = ppsNumPalettePredictorInitializers;
			LumaBitDepthEntryMinus8 = lumaBitDepthEntryminus8;
			ChromaBitDepthEntryMinus8 = chromaBitDepthEntryminus8;
			NumTileColumnsMinus1 = numTileColumnsminus1;
			NumTileRowsMinus1 = numTileRowsminus1;
			Reserved1 = reserved1;
			Reserved2 = reserved2;
			if (columnWidthminus1 != default)
			{
				ColumnWidthMinus1_0 = columnWidthminus1[0];
				ColumnWidthMinus1_1 = columnWidthminus1[1];
				ColumnWidthMinus1_2 = columnWidthminus1[2];
				ColumnWidthMinus1_3 = columnWidthminus1[3];
				ColumnWidthMinus1_4 = columnWidthminus1[4];
				ColumnWidthMinus1_5 = columnWidthminus1[5];
				ColumnWidthMinus1_6 = columnWidthminus1[6];
				ColumnWidthMinus1_7 = columnWidthminus1[7];
				ColumnWidthMinus1_8 = columnWidthminus1[8];
				ColumnWidthMinus1_9 = columnWidthminus1[9];
				ColumnWidthMinus1_10 = columnWidthminus1[10];
				ColumnWidthMinus1_11 = columnWidthminus1[11];
				ColumnWidthMinus1_12 = columnWidthminus1[12];
				ColumnWidthMinus1_13 = columnWidthminus1[13];
				ColumnWidthMinus1_14 = columnWidthminus1[14];
				ColumnWidthMinus1_15 = columnWidthminus1[15];
				ColumnWidthMinus1_16 = columnWidthminus1[16];
				ColumnWidthMinus1_17 = columnWidthminus1[17];
				ColumnWidthMinus1_18 = columnWidthminus1[18];
			}
			if (rowHeightminus1 != default)
			{
				RowHeightMinus1_0 = rowHeightminus1[0];
				RowHeightMinus1_1 = rowHeightminus1[1];
				RowHeightMinus1_2 = rowHeightminus1[2];
				RowHeightMinus1_3 = rowHeightminus1[3];
				RowHeightMinus1_4 = rowHeightminus1[4];
				RowHeightMinus1_5 = rowHeightminus1[5];
				RowHeightMinus1_6 = rowHeightminus1[6];
				RowHeightMinus1_7 = rowHeightminus1[7];
				RowHeightMinus1_8 = rowHeightminus1[8];
				RowHeightMinus1_9 = rowHeightminus1[9];
				RowHeightMinus1_10 = rowHeightminus1[10];
				RowHeightMinus1_11 = rowHeightminus1[11];
				RowHeightMinus1_12 = rowHeightminus1[12];
				RowHeightMinus1_13 = rowHeightminus1[13];
				RowHeightMinus1_14 = rowHeightminus1[14];
				RowHeightMinus1_15 = rowHeightminus1[15];
				RowHeightMinus1_16 = rowHeightminus1[16];
				RowHeightMinus1_17 = rowHeightminus1[17];
				RowHeightMinus1_18 = rowHeightminus1[18];
				RowHeightMinus1_19 = rowHeightminus1[19];
				RowHeightMinus1_20 = rowHeightminus1[20];
			}
			Reserved3 = reserved3;
			PScalingLists = pScalingLists;
			PPredictorPaletteEntries = pPredictorPaletteEntries;
		}

		public unsafe StdVideoH265PictureParameterSet(StdVideoH265PpsFlags flags = default, byte ppsPicParameterSetId = default, byte ppsSeqParameterSetId = default, byte spsVideoParameterSetId = default, byte numExtraSliceHeaderBits = default, byte numRefIdxl0DefaultActiveminus1 = default, byte numRefIdxl1DefaultActiveminus1 = default, byte initQpminus26 = default, byte diffCuQpDeltaDepth = default, byte ppsCbQpOffset = default, byte ppsCrQpOffset = default, byte ppsBetaOffsetdiv2 = default, byte ppsTcOffsetdiv2 = default, byte log2ParallelMergeLevelminus2 = default, byte log2MaxTransformSkipBlockSizeminus2 = default, byte diffCuChromaQpOffsetDepth = default, byte chromaQpOffsetListLenminus1 = default, Span<byte> cbQpOffsetList = default, Span<byte> crQpOffsetList = default, byte log2SaoOffsetScaleLuma = default, byte log2SaoOffsetScaleChroma = default, byte ppsActYQpOffsetplus5 = default, byte ppsActCbQpOffsetplus5 = default, byte ppsActCrQpOffsetplus3 = default, byte ppsNumPalettePredictorInitializers = default, byte lumaBitDepthEntryminus8 = default, byte chromaBitDepthEntryminus8 = default, byte numTileColumnsminus1 = default, byte numTileRowsminus1 = default, byte reserved1 = default, byte reserved2 = default, Span<ushort> columnWidthminus1 = default, Span<ushort> rowHeightminus1 = default, uint reserved3 = default, StdVideoH265ScalingLists* pScalingLists = default, StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries = default)
		{
			Flags = flags;
			PpsPicParameterSetId = ppsPicParameterSetId;
			PpsSeqParameterSetId = ppsSeqParameterSetId;
			SpsVideoParameterSetId = spsVideoParameterSetId;
			NumExtraSliceHeaderBits = numExtraSliceHeaderBits;
			NumRefIdxL0DefaultActiveMinus1 = numRefIdxl0DefaultActiveminus1;
			NumRefIdxL1DefaultActiveMinus1 = numRefIdxl1DefaultActiveminus1;
			InitQpMinus26 = initQpminus26;
			DiffCuQpDeltaDepth = diffCuQpDeltaDepth;
			PpsCbQpOffset = ppsCbQpOffset;
			PpsCrQpOffset = ppsCrQpOffset;
			PpsBetaOffsetDiv2 = ppsBetaOffsetdiv2;
			PpsTcOffsetDiv2 = ppsTcOffsetdiv2;
			Log2ParallelMergeLevelMinus2 = log2ParallelMergeLevelminus2;
			Log2MaxTransformSkipBlockSizeMinus2 = log2MaxTransformSkipBlockSizeminus2;
			DiffCuChromaQpOffsetDepth = diffCuChromaQpOffsetDepth;
			ChromaQpOffsetListLenMinus1 = chromaQpOffsetListLenminus1;
			if (cbQpOffsetList != default)
			{
				CbQpOffsetList_0 = cbQpOffsetList[0];
				CbQpOffsetList_1 = cbQpOffsetList[1];
				CbQpOffsetList_2 = cbQpOffsetList[2];
				CbQpOffsetList_3 = cbQpOffsetList[3];
				CbQpOffsetList_4 = cbQpOffsetList[4];
				CbQpOffsetList_5 = cbQpOffsetList[5];
			}
			if (crQpOffsetList != default)
			{
				CrQpOffsetList_0 = crQpOffsetList[0];
				CrQpOffsetList_1 = crQpOffsetList[1];
				CrQpOffsetList_2 = crQpOffsetList[2];
				CrQpOffsetList_3 = crQpOffsetList[3];
				CrQpOffsetList_4 = crQpOffsetList[4];
				CrQpOffsetList_5 = crQpOffsetList[5];
			}
			Log2SaoOffsetScaleLuma = log2SaoOffsetScaleLuma;
			Log2SaoOffsetScaleChroma = log2SaoOffsetScaleChroma;
			PpsActYQpOffsetPlus5 = ppsActYQpOffsetplus5;
			PpsActCbQpOffsetPlus5 = ppsActCbQpOffsetplus5;
			PpsActCrQpOffsetPlus3 = ppsActCrQpOffsetplus3;
			PpsNumPalettePredictorInitializers = ppsNumPalettePredictorInitializers;
			LumaBitDepthEntryMinus8 = lumaBitDepthEntryminus8;
			ChromaBitDepthEntryMinus8 = chromaBitDepthEntryminus8;
			NumTileColumnsMinus1 = numTileColumnsminus1;
			NumTileRowsMinus1 = numTileRowsminus1;
			Reserved1 = reserved1;
			Reserved2 = reserved2;
			if (columnWidthminus1 != default)
			{
				ColumnWidthMinus1_0 = columnWidthminus1[0];
				ColumnWidthMinus1_1 = columnWidthminus1[1];
				ColumnWidthMinus1_2 = columnWidthminus1[2];
				ColumnWidthMinus1_3 = columnWidthminus1[3];
				ColumnWidthMinus1_4 = columnWidthminus1[4];
				ColumnWidthMinus1_5 = columnWidthminus1[5];
				ColumnWidthMinus1_6 = columnWidthminus1[6];
				ColumnWidthMinus1_7 = columnWidthminus1[7];
				ColumnWidthMinus1_8 = columnWidthminus1[8];
				ColumnWidthMinus1_9 = columnWidthminus1[9];
				ColumnWidthMinus1_10 = columnWidthminus1[10];
				ColumnWidthMinus1_11 = columnWidthminus1[11];
				ColumnWidthMinus1_12 = columnWidthminus1[12];
				ColumnWidthMinus1_13 = columnWidthminus1[13];
				ColumnWidthMinus1_14 = columnWidthminus1[14];
				ColumnWidthMinus1_15 = columnWidthminus1[15];
				ColumnWidthMinus1_16 = columnWidthminus1[16];
				ColumnWidthMinus1_17 = columnWidthminus1[17];
				ColumnWidthMinus1_18 = columnWidthminus1[18];
			}
			if (rowHeightminus1 != default)
			{
				RowHeightMinus1_0 = rowHeightminus1[0];
				RowHeightMinus1_1 = rowHeightminus1[1];
				RowHeightMinus1_2 = rowHeightminus1[2];
				RowHeightMinus1_3 = rowHeightminus1[3];
				RowHeightMinus1_4 = rowHeightminus1[4];
				RowHeightMinus1_5 = rowHeightminus1[5];
				RowHeightMinus1_6 = rowHeightminus1[6];
				RowHeightMinus1_7 = rowHeightminus1[7];
				RowHeightMinus1_8 = rowHeightminus1[8];
				RowHeightMinus1_9 = rowHeightminus1[9];
				RowHeightMinus1_10 = rowHeightminus1[10];
				RowHeightMinus1_11 = rowHeightminus1[11];
				RowHeightMinus1_12 = rowHeightminus1[12];
				RowHeightMinus1_13 = rowHeightminus1[13];
				RowHeightMinus1_14 = rowHeightminus1[14];
				RowHeightMinus1_15 = rowHeightminus1[15];
				RowHeightMinus1_16 = rowHeightminus1[16];
				RowHeightMinus1_17 = rowHeightminus1[17];
				RowHeightMinus1_18 = rowHeightminus1[18];
				RowHeightMinus1_19 = rowHeightminus1[19];
				RowHeightMinus1_20 = rowHeightminus1[20];
			}
			Reserved3 = reserved3;
			PScalingLists = pScalingLists;
			PPredictorPaletteEntries = pPredictorPaletteEntries;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoDecodeH264PictureInfoFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoDecodeH264PictureInfoFlags
	{
		[NativeName(NativeNameType.Field, "field_pic_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FieldPicFlag;
		[NativeName(NativeNameType.Field, "is_intra")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IsIntra;
		[NativeName(NativeNameType.Field, "IdrPicFlag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IdrPicFlag;
		[NativeName(NativeNameType.Field, "bottom_field_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BottomFieldFlag;
		[NativeName(NativeNameType.Field, "is_reference")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IsReference;
		[NativeName(NativeNameType.Field, "complementary_field_pair")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ComplementaryFieldPair;

		public unsafe StdVideoDecodeH264PictureInfoFlags(uint fieldPicFlag = default, uint isIntra = default, uint idrPicFlag = default, uint bottomFieldFlag = default, uint isReference = default, uint complementaryFieldPair = default)
		{
			FieldPicFlag = fieldPicFlag;
			IsIntra = isIntra;
			IdrPicFlag = idrPicFlag;
			BottomFieldFlag = bottomFieldFlag;
			IsReference = isReference;
			ComplementaryFieldPair = complementaryFieldPair;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoDecodeH264PictureInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoDecodeH264PictureInfo
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoDecodeH264PictureInfoFlags")]
		public StdVideoDecodeH264PictureInfoFlags Flags;
		[NativeName(NativeNameType.Field, "seq_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte SeqParameterSetId;
		[NativeName(NativeNameType.Field, "pic_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PicParameterSetId;
		[NativeName(NativeNameType.Field, "reserved1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved1;
		[NativeName(NativeNameType.Field, "reserved2")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved2;
		[NativeName(NativeNameType.Field, "frame_num")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort FrameNum;
		[NativeName(NativeNameType.Field, "idr_pic_id")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort IdrPicId;
		[NativeName(NativeNameType.Field, "PicOrderCnt")]
		[NativeName(NativeNameType.Type, "int32_t[2]")]
		public int PicOrderCnt_0;
		public int PicOrderCnt_1;

		public unsafe StdVideoDecodeH264PictureInfo(StdVideoDecodeH264PictureInfoFlags flags = default, byte seqParameterSetId = default, byte picParameterSetId = default, byte reserved1 = default, byte reserved2 = default, ushort frameNum = default, ushort idrPicId = default, int* picOrderCnt = default)
		{
			Flags = flags;
			SeqParameterSetId = seqParameterSetId;
			PicParameterSetId = picParameterSetId;
			Reserved1 = reserved1;
			Reserved2 = reserved2;
			FrameNum = frameNum;
			IdrPicId = idrPicId;
			if (picOrderCnt != default)
			{
				PicOrderCnt_0 = picOrderCnt[0];
				PicOrderCnt_1 = picOrderCnt[1];
			}
		}

		public unsafe StdVideoDecodeH264PictureInfo(StdVideoDecodeH264PictureInfoFlags flags = default, byte seqParameterSetId = default, byte picParameterSetId = default, byte reserved1 = default, byte reserved2 = default, ushort frameNum = default, ushort idrPicId = default, Span<int> picOrderCnt = default)
		{
			Flags = flags;
			SeqParameterSetId = seqParameterSetId;
			PicParameterSetId = picParameterSetId;
			Reserved1 = reserved1;
			Reserved2 = reserved2;
			FrameNum = frameNum;
			IdrPicId = idrPicId;
			if (picOrderCnt != default)
			{
				PicOrderCnt_0 = picOrderCnt[0];
				PicOrderCnt_1 = picOrderCnt[1];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoDecodeH264ReferenceInfoFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoDecodeH264ReferenceInfoFlags
	{
		[NativeName(NativeNameType.Field, "top_field_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint TopFieldFlag;
		[NativeName(NativeNameType.Field, "bottom_field_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BottomFieldFlag;
		[NativeName(NativeNameType.Field, "used_for_long_term_reference")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint UsedForLongTermReference;
		[NativeName(NativeNameType.Field, "is_non_existing")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IsNonExisting;

		public unsafe StdVideoDecodeH264ReferenceInfoFlags(uint topFieldFlag = default, uint bottomFieldFlag = default, uint usedForLongTermReference = default, uint isNonExisting = default)
		{
			TopFieldFlag = topFieldFlag;
			BottomFieldFlag = bottomFieldFlag;
			UsedForLongTermReference = usedForLongTermReference;
			IsNonExisting = isNonExisting;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoDecodeH264ReferenceInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoDecodeH264ReferenceInfo
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoDecodeH264ReferenceInfoFlags")]
		public StdVideoDecodeH264ReferenceInfoFlags Flags;
		[NativeName(NativeNameType.Field, "FrameNum")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort FrameNum;
		[NativeName(NativeNameType.Field, "reserved")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort Reserved;
		[NativeName(NativeNameType.Field, "PicOrderCnt")]
		[NativeName(NativeNameType.Type, "int32_t[2]")]
		public int PicOrderCnt_0;
		public int PicOrderCnt_1;

		public unsafe StdVideoDecodeH264ReferenceInfo(StdVideoDecodeH264ReferenceInfoFlags flags = default, ushort frameNum = default, ushort reserved = default, int* picOrderCnt = default)
		{
			Flags = flags;
			FrameNum = frameNum;
			Reserved = reserved;
			if (picOrderCnt != default)
			{
				PicOrderCnt_0 = picOrderCnt[0];
				PicOrderCnt_1 = picOrderCnt[1];
			}
		}

		public unsafe StdVideoDecodeH264ReferenceInfo(StdVideoDecodeH264ReferenceInfoFlags flags = default, ushort frameNum = default, ushort reserved = default, Span<int> picOrderCnt = default)
		{
			Flags = flags;
			FrameNum = frameNum;
			Reserved = reserved;
			if (picOrderCnt != default)
			{
				PicOrderCnt_0 = picOrderCnt[0];
				PicOrderCnt_1 = picOrderCnt[1];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoDecodeH265PictureInfoFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoDecodeH265PictureInfoFlags
	{
		[NativeName(NativeNameType.Field, "IrapPicFlag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IrapPicFlag;
		[NativeName(NativeNameType.Field, "IdrPicFlag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IdrPicFlag;
		[NativeName(NativeNameType.Field, "IsReference")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IsReference;
		[NativeName(NativeNameType.Field, "short_term_ref_pic_set_sps_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ShortTermRefPicSetSpsFlag;

		public unsafe StdVideoDecodeH265PictureInfoFlags(uint irapPicFlag = default, uint idrPicFlag = default, uint isReference = default, uint shortTermRefPicSetSpsFlag = default)
		{
			IrapPicFlag = irapPicFlag;
			IdrPicFlag = idrPicFlag;
			IsReference = isReference;
			ShortTermRefPicSetSpsFlag = shortTermRefPicSetSpsFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoDecodeH265PictureInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoDecodeH265PictureInfo
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoDecodeH265PictureInfoFlags")]
		public StdVideoDecodeH265PictureInfoFlags Flags;
		[NativeName(NativeNameType.Field, "sps_video_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte SpsVideoParameterSetId;
		[NativeName(NativeNameType.Field, "pps_seq_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PpsSeqParameterSetId;
		[NativeName(NativeNameType.Field, "pps_pic_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PpsPicParameterSetId;
		[NativeName(NativeNameType.Field, "NumDeltaPocsOfRefRpsIdx")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumDeltaPocsOfRefRpsIdx;
		[NativeName(NativeNameType.Field, "PicOrderCntVal")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int PicOrderCntVal;
		[NativeName(NativeNameType.Field, "NumBitsForSTRefPicSetInSlice")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort NumBitsForSTRefPicSetInSlice;
		[NativeName(NativeNameType.Field, "reserved")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort Reserved;
		[NativeName(NativeNameType.Field, "RefPicSetStCurrBefore")]
		[NativeName(NativeNameType.Type, "uint8_t[8]")]
		public byte RefPicSetStCurrBefore_0;
		public byte RefPicSetStCurrBefore_1;
		public byte RefPicSetStCurrBefore_2;
		public byte RefPicSetStCurrBefore_3;
		public byte RefPicSetStCurrBefore_4;
		public byte RefPicSetStCurrBefore_5;
		public byte RefPicSetStCurrBefore_6;
		public byte RefPicSetStCurrBefore_7;
		[NativeName(NativeNameType.Field, "RefPicSetStCurrAfter")]
		[NativeName(NativeNameType.Type, "uint8_t[8]")]
		public byte RefPicSetStCurrAfter_0;
		public byte RefPicSetStCurrAfter_1;
		public byte RefPicSetStCurrAfter_2;
		public byte RefPicSetStCurrAfter_3;
		public byte RefPicSetStCurrAfter_4;
		public byte RefPicSetStCurrAfter_5;
		public byte RefPicSetStCurrAfter_6;
		public byte RefPicSetStCurrAfter_7;
		[NativeName(NativeNameType.Field, "RefPicSetLtCurr")]
		[NativeName(NativeNameType.Type, "uint8_t[8]")]
		public byte RefPicSetLtCurr_0;
		public byte RefPicSetLtCurr_1;
		public byte RefPicSetLtCurr_2;
		public byte RefPicSetLtCurr_3;
		public byte RefPicSetLtCurr_4;
		public byte RefPicSetLtCurr_5;
		public byte RefPicSetLtCurr_6;
		public byte RefPicSetLtCurr_7;

		public unsafe StdVideoDecodeH265PictureInfo(StdVideoDecodeH265PictureInfoFlags flags = default, byte spsVideoParameterSetId = default, byte ppsSeqParameterSetId = default, byte ppsPicParameterSetId = default, byte numDeltaPocsOfRefRpsIdx = default, int picOrderCntVal = default, ushort numBitsForStRefPicSetInSlice = default, ushort reserved = default, byte* refPicSetStCurrBefore = default, byte* refPicSetStCurrAfter = default, byte* refPicSetLtCurr = default)
		{
			Flags = flags;
			SpsVideoParameterSetId = spsVideoParameterSetId;
			PpsSeqParameterSetId = ppsSeqParameterSetId;
			PpsPicParameterSetId = ppsPicParameterSetId;
			NumDeltaPocsOfRefRpsIdx = numDeltaPocsOfRefRpsIdx;
			PicOrderCntVal = picOrderCntVal;
			NumBitsForSTRefPicSetInSlice = numBitsForStRefPicSetInSlice;
			Reserved = reserved;
			if (refPicSetStCurrBefore != default)
			{
				RefPicSetStCurrBefore_0 = refPicSetStCurrBefore[0];
				RefPicSetStCurrBefore_1 = refPicSetStCurrBefore[1];
				RefPicSetStCurrBefore_2 = refPicSetStCurrBefore[2];
				RefPicSetStCurrBefore_3 = refPicSetStCurrBefore[3];
				RefPicSetStCurrBefore_4 = refPicSetStCurrBefore[4];
				RefPicSetStCurrBefore_5 = refPicSetStCurrBefore[5];
				RefPicSetStCurrBefore_6 = refPicSetStCurrBefore[6];
				RefPicSetStCurrBefore_7 = refPicSetStCurrBefore[7];
			}
			if (refPicSetStCurrAfter != default)
			{
				RefPicSetStCurrAfter_0 = refPicSetStCurrAfter[0];
				RefPicSetStCurrAfter_1 = refPicSetStCurrAfter[1];
				RefPicSetStCurrAfter_2 = refPicSetStCurrAfter[2];
				RefPicSetStCurrAfter_3 = refPicSetStCurrAfter[3];
				RefPicSetStCurrAfter_4 = refPicSetStCurrAfter[4];
				RefPicSetStCurrAfter_5 = refPicSetStCurrAfter[5];
				RefPicSetStCurrAfter_6 = refPicSetStCurrAfter[6];
				RefPicSetStCurrAfter_7 = refPicSetStCurrAfter[7];
			}
			if (refPicSetLtCurr != default)
			{
				RefPicSetLtCurr_0 = refPicSetLtCurr[0];
				RefPicSetLtCurr_1 = refPicSetLtCurr[1];
				RefPicSetLtCurr_2 = refPicSetLtCurr[2];
				RefPicSetLtCurr_3 = refPicSetLtCurr[3];
				RefPicSetLtCurr_4 = refPicSetLtCurr[4];
				RefPicSetLtCurr_5 = refPicSetLtCurr[5];
				RefPicSetLtCurr_6 = refPicSetLtCurr[6];
				RefPicSetLtCurr_7 = refPicSetLtCurr[7];
			}
		}

		public unsafe StdVideoDecodeH265PictureInfo(StdVideoDecodeH265PictureInfoFlags flags = default, byte spsVideoParameterSetId = default, byte ppsSeqParameterSetId = default, byte ppsPicParameterSetId = default, byte numDeltaPocsOfRefRpsIdx = default, int picOrderCntVal = default, ushort numBitsForStRefPicSetInSlice = default, ushort reserved = default, Span<byte> refPicSetStCurrBefore = default, Span<byte> refPicSetStCurrAfter = default, Span<byte> refPicSetLtCurr = default)
		{
			Flags = flags;
			SpsVideoParameterSetId = spsVideoParameterSetId;
			PpsSeqParameterSetId = ppsSeqParameterSetId;
			PpsPicParameterSetId = ppsPicParameterSetId;
			NumDeltaPocsOfRefRpsIdx = numDeltaPocsOfRefRpsIdx;
			PicOrderCntVal = picOrderCntVal;
			NumBitsForSTRefPicSetInSlice = numBitsForStRefPicSetInSlice;
			Reserved = reserved;
			if (refPicSetStCurrBefore != default)
			{
				RefPicSetStCurrBefore_0 = refPicSetStCurrBefore[0];
				RefPicSetStCurrBefore_1 = refPicSetStCurrBefore[1];
				RefPicSetStCurrBefore_2 = refPicSetStCurrBefore[2];
				RefPicSetStCurrBefore_3 = refPicSetStCurrBefore[3];
				RefPicSetStCurrBefore_4 = refPicSetStCurrBefore[4];
				RefPicSetStCurrBefore_5 = refPicSetStCurrBefore[5];
				RefPicSetStCurrBefore_6 = refPicSetStCurrBefore[6];
				RefPicSetStCurrBefore_7 = refPicSetStCurrBefore[7];
			}
			if (refPicSetStCurrAfter != default)
			{
				RefPicSetStCurrAfter_0 = refPicSetStCurrAfter[0];
				RefPicSetStCurrAfter_1 = refPicSetStCurrAfter[1];
				RefPicSetStCurrAfter_2 = refPicSetStCurrAfter[2];
				RefPicSetStCurrAfter_3 = refPicSetStCurrAfter[3];
				RefPicSetStCurrAfter_4 = refPicSetStCurrAfter[4];
				RefPicSetStCurrAfter_5 = refPicSetStCurrAfter[5];
				RefPicSetStCurrAfter_6 = refPicSetStCurrAfter[6];
				RefPicSetStCurrAfter_7 = refPicSetStCurrAfter[7];
			}
			if (refPicSetLtCurr != default)
			{
				RefPicSetLtCurr_0 = refPicSetLtCurr[0];
				RefPicSetLtCurr_1 = refPicSetLtCurr[1];
				RefPicSetLtCurr_2 = refPicSetLtCurr[2];
				RefPicSetLtCurr_3 = refPicSetLtCurr[3];
				RefPicSetLtCurr_4 = refPicSetLtCurr[4];
				RefPicSetLtCurr_5 = refPicSetLtCurr[5];
				RefPicSetLtCurr_6 = refPicSetLtCurr[6];
				RefPicSetLtCurr_7 = refPicSetLtCurr[7];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoDecodeH265ReferenceInfoFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoDecodeH265ReferenceInfoFlags
	{
		[NativeName(NativeNameType.Field, "used_for_long_term_reference")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint UsedForLongTermReference;
		[NativeName(NativeNameType.Field, "unused_for_reference")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint UnusedForReference;

		public unsafe StdVideoDecodeH265ReferenceInfoFlags(uint usedForLongTermReference = default, uint unusedForReference = default)
		{
			UsedForLongTermReference = usedForLongTermReference;
			UnusedForReference = unusedForReference;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoDecodeH265ReferenceInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoDecodeH265ReferenceInfo
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoDecodeH265ReferenceInfoFlags")]
		public StdVideoDecodeH265ReferenceInfoFlags Flags;
		[NativeName(NativeNameType.Field, "PicOrderCntVal")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int PicOrderCntVal;

		public unsafe StdVideoDecodeH265ReferenceInfo(StdVideoDecodeH265ReferenceInfoFlags flags = default, int picOrderCntVal = default)
		{
			Flags = flags;
			PicOrderCntVal = picOrderCntVal;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH264WeightTableFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH264WeightTableFlags
	{
		[NativeName(NativeNameType.Field, "luma_weight_l0_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint LumaWeightL0Flag;
		[NativeName(NativeNameType.Field, "chroma_weight_l0_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ChromaWeightL0Flag;
		[NativeName(NativeNameType.Field, "luma_weight_l1_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint LumaWeightL1Flag;
		[NativeName(NativeNameType.Field, "chroma_weight_l1_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ChromaWeightL1Flag;

		public unsafe StdVideoEncodeH264WeightTableFlags(uint lumaWeightl0Flag = default, uint chromaWeightl0Flag = default, uint lumaWeightl1Flag = default, uint chromaWeightl1Flag = default)
		{
			LumaWeightL0Flag = lumaWeightl0Flag;
			ChromaWeightL0Flag = chromaWeightl0Flag;
			LumaWeightL1Flag = lumaWeightl1Flag;
			ChromaWeightL1Flag = chromaWeightl1Flag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH264WeightTable")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH264WeightTable
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoEncodeH264WeightTableFlags")]
		public StdVideoEncodeH264WeightTableFlags Flags;
		[NativeName(NativeNameType.Field, "luma_log2_weight_denom")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte LumaLog2WeightDenom;
		[NativeName(NativeNameType.Field, "chroma_log2_weight_denom")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte ChromaLog2WeightDenom;
		[NativeName(NativeNameType.Field, "luma_weight_l0")]
		[NativeName(NativeNameType.Type, "int8_t[32]")]
		public byte LumaWeightL0_0;
		public byte LumaWeightL0_1;
		public byte LumaWeightL0_2;
		public byte LumaWeightL0_3;
		public byte LumaWeightL0_4;
		public byte LumaWeightL0_5;
		public byte LumaWeightL0_6;
		public byte LumaWeightL0_7;
		public byte LumaWeightL0_8;
		public byte LumaWeightL0_9;
		public byte LumaWeightL0_10;
		public byte LumaWeightL0_11;
		public byte LumaWeightL0_12;
		public byte LumaWeightL0_13;
		public byte LumaWeightL0_14;
		public byte LumaWeightL0_15;
		public byte LumaWeightL0_16;
		public byte LumaWeightL0_17;
		public byte LumaWeightL0_18;
		public byte LumaWeightL0_19;
		public byte LumaWeightL0_20;
		public byte LumaWeightL0_21;
		public byte LumaWeightL0_22;
		public byte LumaWeightL0_23;
		public byte LumaWeightL0_24;
		public byte LumaWeightL0_25;
		public byte LumaWeightL0_26;
		public byte LumaWeightL0_27;
		public byte LumaWeightL0_28;
		public byte LumaWeightL0_29;
		public byte LumaWeightL0_30;
		public byte LumaWeightL0_31;
		[NativeName(NativeNameType.Field, "luma_offset_l0")]
		[NativeName(NativeNameType.Type, "int8_t[32]")]
		public byte LumaOffsetL0_0;
		public byte LumaOffsetL0_1;
		public byte LumaOffsetL0_2;
		public byte LumaOffsetL0_3;
		public byte LumaOffsetL0_4;
		public byte LumaOffsetL0_5;
		public byte LumaOffsetL0_6;
		public byte LumaOffsetL0_7;
		public byte LumaOffsetL0_8;
		public byte LumaOffsetL0_9;
		public byte LumaOffsetL0_10;
		public byte LumaOffsetL0_11;
		public byte LumaOffsetL0_12;
		public byte LumaOffsetL0_13;
		public byte LumaOffsetL0_14;
		public byte LumaOffsetL0_15;
		public byte LumaOffsetL0_16;
		public byte LumaOffsetL0_17;
		public byte LumaOffsetL0_18;
		public byte LumaOffsetL0_19;
		public byte LumaOffsetL0_20;
		public byte LumaOffsetL0_21;
		public byte LumaOffsetL0_22;
		public byte LumaOffsetL0_23;
		public byte LumaOffsetL0_24;
		public byte LumaOffsetL0_25;
		public byte LumaOffsetL0_26;
		public byte LumaOffsetL0_27;
		public byte LumaOffsetL0_28;
		public byte LumaOffsetL0_29;
		public byte LumaOffsetL0_30;
		public byte LumaOffsetL0_31;
		[NativeName(NativeNameType.Field, "chroma_weight_l0")]
		[NativeName(NativeNameType.Type, "int8_t[2][32]")]
		public unsafe byte* ChromaWeightL0_0;
		public unsafe byte* ChromaWeightL0_1;
		public unsafe byte* ChromaWeightL0_2;
		public unsafe byte* ChromaWeightL0_3;
		public unsafe byte* ChromaWeightL0_4;
		public unsafe byte* ChromaWeightL0_5;
		public unsafe byte* ChromaWeightL0_6;
		public unsafe byte* ChromaWeightL0_7;
		public unsafe byte* ChromaWeightL0_8;
		public unsafe byte* ChromaWeightL0_9;
		public unsafe byte* ChromaWeightL0_10;
		public unsafe byte* ChromaWeightL0_11;
		public unsafe byte* ChromaWeightL0_12;
		public unsafe byte* ChromaWeightL0_13;
		public unsafe byte* ChromaWeightL0_14;
		public unsafe byte* ChromaWeightL0_15;
		public unsafe byte* ChromaWeightL0_16;
		public unsafe byte* ChromaWeightL0_17;
		public unsafe byte* ChromaWeightL0_18;
		public unsafe byte* ChromaWeightL0_19;
		public unsafe byte* ChromaWeightL0_20;
		public unsafe byte* ChromaWeightL0_21;
		public unsafe byte* ChromaWeightL0_22;
		public unsafe byte* ChromaWeightL0_23;
		public unsafe byte* ChromaWeightL0_24;
		public unsafe byte* ChromaWeightL0_25;
		public unsafe byte* ChromaWeightL0_26;
		public unsafe byte* ChromaWeightL0_27;
		public unsafe byte* ChromaWeightL0_28;
		public unsafe byte* ChromaWeightL0_29;
		public unsafe byte* ChromaWeightL0_30;
		public unsafe byte* ChromaWeightL0_31;
		[NativeName(NativeNameType.Field, "chroma_offset_l0")]
		[NativeName(NativeNameType.Type, "int8_t[2][32]")]
		public unsafe byte* ChromaOffsetL0_0;
		public unsafe byte* ChromaOffsetL0_1;
		public unsafe byte* ChromaOffsetL0_2;
		public unsafe byte* ChromaOffsetL0_3;
		public unsafe byte* ChromaOffsetL0_4;
		public unsafe byte* ChromaOffsetL0_5;
		public unsafe byte* ChromaOffsetL0_6;
		public unsafe byte* ChromaOffsetL0_7;
		public unsafe byte* ChromaOffsetL0_8;
		public unsafe byte* ChromaOffsetL0_9;
		public unsafe byte* ChromaOffsetL0_10;
		public unsafe byte* ChromaOffsetL0_11;
		public unsafe byte* ChromaOffsetL0_12;
		public unsafe byte* ChromaOffsetL0_13;
		public unsafe byte* ChromaOffsetL0_14;
		public unsafe byte* ChromaOffsetL0_15;
		public unsafe byte* ChromaOffsetL0_16;
		public unsafe byte* ChromaOffsetL0_17;
		public unsafe byte* ChromaOffsetL0_18;
		public unsafe byte* ChromaOffsetL0_19;
		public unsafe byte* ChromaOffsetL0_20;
		public unsafe byte* ChromaOffsetL0_21;
		public unsafe byte* ChromaOffsetL0_22;
		public unsafe byte* ChromaOffsetL0_23;
		public unsafe byte* ChromaOffsetL0_24;
		public unsafe byte* ChromaOffsetL0_25;
		public unsafe byte* ChromaOffsetL0_26;
		public unsafe byte* ChromaOffsetL0_27;
		public unsafe byte* ChromaOffsetL0_28;
		public unsafe byte* ChromaOffsetL0_29;
		public unsafe byte* ChromaOffsetL0_30;
		public unsafe byte* ChromaOffsetL0_31;
		[NativeName(NativeNameType.Field, "luma_weight_l1")]
		[NativeName(NativeNameType.Type, "int8_t[32]")]
		public byte LumaWeightL1_0;
		public byte LumaWeightL1_1;
		public byte LumaWeightL1_2;
		public byte LumaWeightL1_3;
		public byte LumaWeightL1_4;
		public byte LumaWeightL1_5;
		public byte LumaWeightL1_6;
		public byte LumaWeightL1_7;
		public byte LumaWeightL1_8;
		public byte LumaWeightL1_9;
		public byte LumaWeightL1_10;
		public byte LumaWeightL1_11;
		public byte LumaWeightL1_12;
		public byte LumaWeightL1_13;
		public byte LumaWeightL1_14;
		public byte LumaWeightL1_15;
		public byte LumaWeightL1_16;
		public byte LumaWeightL1_17;
		public byte LumaWeightL1_18;
		public byte LumaWeightL1_19;
		public byte LumaWeightL1_20;
		public byte LumaWeightL1_21;
		public byte LumaWeightL1_22;
		public byte LumaWeightL1_23;
		public byte LumaWeightL1_24;
		public byte LumaWeightL1_25;
		public byte LumaWeightL1_26;
		public byte LumaWeightL1_27;
		public byte LumaWeightL1_28;
		public byte LumaWeightL1_29;
		public byte LumaWeightL1_30;
		public byte LumaWeightL1_31;
		[NativeName(NativeNameType.Field, "luma_offset_l1")]
		[NativeName(NativeNameType.Type, "int8_t[32]")]
		public byte LumaOffsetL1_0;
		public byte LumaOffsetL1_1;
		public byte LumaOffsetL1_2;
		public byte LumaOffsetL1_3;
		public byte LumaOffsetL1_4;
		public byte LumaOffsetL1_5;
		public byte LumaOffsetL1_6;
		public byte LumaOffsetL1_7;
		public byte LumaOffsetL1_8;
		public byte LumaOffsetL1_9;
		public byte LumaOffsetL1_10;
		public byte LumaOffsetL1_11;
		public byte LumaOffsetL1_12;
		public byte LumaOffsetL1_13;
		public byte LumaOffsetL1_14;
		public byte LumaOffsetL1_15;
		public byte LumaOffsetL1_16;
		public byte LumaOffsetL1_17;
		public byte LumaOffsetL1_18;
		public byte LumaOffsetL1_19;
		public byte LumaOffsetL1_20;
		public byte LumaOffsetL1_21;
		public byte LumaOffsetL1_22;
		public byte LumaOffsetL1_23;
		public byte LumaOffsetL1_24;
		public byte LumaOffsetL1_25;
		public byte LumaOffsetL1_26;
		public byte LumaOffsetL1_27;
		public byte LumaOffsetL1_28;
		public byte LumaOffsetL1_29;
		public byte LumaOffsetL1_30;
		public byte LumaOffsetL1_31;
		[NativeName(NativeNameType.Field, "chroma_weight_l1")]
		[NativeName(NativeNameType.Type, "int8_t[2][32]")]
		public unsafe byte* ChromaWeightL1_0;
		public unsafe byte* ChromaWeightL1_1;
		public unsafe byte* ChromaWeightL1_2;
		public unsafe byte* ChromaWeightL1_3;
		public unsafe byte* ChromaWeightL1_4;
		public unsafe byte* ChromaWeightL1_5;
		public unsafe byte* ChromaWeightL1_6;
		public unsafe byte* ChromaWeightL1_7;
		public unsafe byte* ChromaWeightL1_8;
		public unsafe byte* ChromaWeightL1_9;
		public unsafe byte* ChromaWeightL1_10;
		public unsafe byte* ChromaWeightL1_11;
		public unsafe byte* ChromaWeightL1_12;
		public unsafe byte* ChromaWeightL1_13;
		public unsafe byte* ChromaWeightL1_14;
		public unsafe byte* ChromaWeightL1_15;
		public unsafe byte* ChromaWeightL1_16;
		public unsafe byte* ChromaWeightL1_17;
		public unsafe byte* ChromaWeightL1_18;
		public unsafe byte* ChromaWeightL1_19;
		public unsafe byte* ChromaWeightL1_20;
		public unsafe byte* ChromaWeightL1_21;
		public unsafe byte* ChromaWeightL1_22;
		public unsafe byte* ChromaWeightL1_23;
		public unsafe byte* ChromaWeightL1_24;
		public unsafe byte* ChromaWeightL1_25;
		public unsafe byte* ChromaWeightL1_26;
		public unsafe byte* ChromaWeightL1_27;
		public unsafe byte* ChromaWeightL1_28;
		public unsafe byte* ChromaWeightL1_29;
		public unsafe byte* ChromaWeightL1_30;
		public unsafe byte* ChromaWeightL1_31;
		[NativeName(NativeNameType.Field, "chroma_offset_l1")]
		[NativeName(NativeNameType.Type, "int8_t[2][32]")]
		public unsafe byte* ChromaOffsetL1_0;
		public unsafe byte* ChromaOffsetL1_1;
		public unsafe byte* ChromaOffsetL1_2;
		public unsafe byte* ChromaOffsetL1_3;
		public unsafe byte* ChromaOffsetL1_4;
		public unsafe byte* ChromaOffsetL1_5;
		public unsafe byte* ChromaOffsetL1_6;
		public unsafe byte* ChromaOffsetL1_7;
		public unsafe byte* ChromaOffsetL1_8;
		public unsafe byte* ChromaOffsetL1_9;
		public unsafe byte* ChromaOffsetL1_10;
		public unsafe byte* ChromaOffsetL1_11;
		public unsafe byte* ChromaOffsetL1_12;
		public unsafe byte* ChromaOffsetL1_13;
		public unsafe byte* ChromaOffsetL1_14;
		public unsafe byte* ChromaOffsetL1_15;
		public unsafe byte* ChromaOffsetL1_16;
		public unsafe byte* ChromaOffsetL1_17;
		public unsafe byte* ChromaOffsetL1_18;
		public unsafe byte* ChromaOffsetL1_19;
		public unsafe byte* ChromaOffsetL1_20;
		public unsafe byte* ChromaOffsetL1_21;
		public unsafe byte* ChromaOffsetL1_22;
		public unsafe byte* ChromaOffsetL1_23;
		public unsafe byte* ChromaOffsetL1_24;
		public unsafe byte* ChromaOffsetL1_25;
		public unsafe byte* ChromaOffsetL1_26;
		public unsafe byte* ChromaOffsetL1_27;
		public unsafe byte* ChromaOffsetL1_28;
		public unsafe byte* ChromaOffsetL1_29;
		public unsafe byte* ChromaOffsetL1_30;
		public unsafe byte* ChromaOffsetL1_31;

		public unsafe StdVideoEncodeH264WeightTable(StdVideoEncodeH264WeightTableFlags flags = default, byte lumalog2WeightDenom = default, byte chromalog2WeightDenom = default, byte* lumaWeightl0 = default, byte* lumaOffsetl0 = default, byte** chromaWeightl0 = default, byte** chromaOffsetl0 = default, byte* lumaWeightl1 = default, byte* lumaOffsetl1 = default, byte** chromaWeightl1 = default, byte** chromaOffsetl1 = default)
		{
			Flags = flags;
			LumaLog2WeightDenom = lumalog2WeightDenom;
			ChromaLog2WeightDenom = chromalog2WeightDenom;
			if (lumaWeightl0 != default)
			{
				LumaWeightL0_0 = lumaWeightl0[0];
				LumaWeightL0_1 = lumaWeightl0[1];
				LumaWeightL0_2 = lumaWeightl0[2];
				LumaWeightL0_3 = lumaWeightl0[3];
				LumaWeightL0_4 = lumaWeightl0[4];
				LumaWeightL0_5 = lumaWeightl0[5];
				LumaWeightL0_6 = lumaWeightl0[6];
				LumaWeightL0_7 = lumaWeightl0[7];
				LumaWeightL0_8 = lumaWeightl0[8];
				LumaWeightL0_9 = lumaWeightl0[9];
				LumaWeightL0_10 = lumaWeightl0[10];
				LumaWeightL0_11 = lumaWeightl0[11];
				LumaWeightL0_12 = lumaWeightl0[12];
				LumaWeightL0_13 = lumaWeightl0[13];
				LumaWeightL0_14 = lumaWeightl0[14];
				LumaWeightL0_15 = lumaWeightl0[15];
				LumaWeightL0_16 = lumaWeightl0[16];
				LumaWeightL0_17 = lumaWeightl0[17];
				LumaWeightL0_18 = lumaWeightl0[18];
				LumaWeightL0_19 = lumaWeightl0[19];
				LumaWeightL0_20 = lumaWeightl0[20];
				LumaWeightL0_21 = lumaWeightl0[21];
				LumaWeightL0_22 = lumaWeightl0[22];
				LumaWeightL0_23 = lumaWeightl0[23];
				LumaWeightL0_24 = lumaWeightl0[24];
				LumaWeightL0_25 = lumaWeightl0[25];
				LumaWeightL0_26 = lumaWeightl0[26];
				LumaWeightL0_27 = lumaWeightl0[27];
				LumaWeightL0_28 = lumaWeightl0[28];
				LumaWeightL0_29 = lumaWeightl0[29];
				LumaWeightL0_30 = lumaWeightl0[30];
				LumaWeightL0_31 = lumaWeightl0[31];
			}
			if (lumaOffsetl0 != default)
			{
				LumaOffsetL0_0 = lumaOffsetl0[0];
				LumaOffsetL0_1 = lumaOffsetl0[1];
				LumaOffsetL0_2 = lumaOffsetl0[2];
				LumaOffsetL0_3 = lumaOffsetl0[3];
				LumaOffsetL0_4 = lumaOffsetl0[4];
				LumaOffsetL0_5 = lumaOffsetl0[5];
				LumaOffsetL0_6 = lumaOffsetl0[6];
				LumaOffsetL0_7 = lumaOffsetl0[7];
				LumaOffsetL0_8 = lumaOffsetl0[8];
				LumaOffsetL0_9 = lumaOffsetl0[9];
				LumaOffsetL0_10 = lumaOffsetl0[10];
				LumaOffsetL0_11 = lumaOffsetl0[11];
				LumaOffsetL0_12 = lumaOffsetl0[12];
				LumaOffsetL0_13 = lumaOffsetl0[13];
				LumaOffsetL0_14 = lumaOffsetl0[14];
				LumaOffsetL0_15 = lumaOffsetl0[15];
				LumaOffsetL0_16 = lumaOffsetl0[16];
				LumaOffsetL0_17 = lumaOffsetl0[17];
				LumaOffsetL0_18 = lumaOffsetl0[18];
				LumaOffsetL0_19 = lumaOffsetl0[19];
				LumaOffsetL0_20 = lumaOffsetl0[20];
				LumaOffsetL0_21 = lumaOffsetl0[21];
				LumaOffsetL0_22 = lumaOffsetl0[22];
				LumaOffsetL0_23 = lumaOffsetl0[23];
				LumaOffsetL0_24 = lumaOffsetl0[24];
				LumaOffsetL0_25 = lumaOffsetl0[25];
				LumaOffsetL0_26 = lumaOffsetl0[26];
				LumaOffsetL0_27 = lumaOffsetl0[27];
				LumaOffsetL0_28 = lumaOffsetl0[28];
				LumaOffsetL0_29 = lumaOffsetl0[29];
				LumaOffsetL0_30 = lumaOffsetl0[30];
				LumaOffsetL0_31 = lumaOffsetl0[31];
			}
			if (chromaWeightl0 != default)
			{
				ChromaWeightL0_0 = chromaWeightl0[0];
				ChromaWeightL0_1 = chromaWeightl0[1];
				ChromaWeightL0_2 = chromaWeightl0[2];
				ChromaWeightL0_3 = chromaWeightl0[3];
				ChromaWeightL0_4 = chromaWeightl0[4];
				ChromaWeightL0_5 = chromaWeightl0[5];
				ChromaWeightL0_6 = chromaWeightl0[6];
				ChromaWeightL0_7 = chromaWeightl0[7];
				ChromaWeightL0_8 = chromaWeightl0[8];
				ChromaWeightL0_9 = chromaWeightl0[9];
				ChromaWeightL0_10 = chromaWeightl0[10];
				ChromaWeightL0_11 = chromaWeightl0[11];
				ChromaWeightL0_12 = chromaWeightl0[12];
				ChromaWeightL0_13 = chromaWeightl0[13];
				ChromaWeightL0_14 = chromaWeightl0[14];
				ChromaWeightL0_15 = chromaWeightl0[15];
				ChromaWeightL0_16 = chromaWeightl0[16];
				ChromaWeightL0_17 = chromaWeightl0[17];
				ChromaWeightL0_18 = chromaWeightl0[18];
				ChromaWeightL0_19 = chromaWeightl0[19];
				ChromaWeightL0_20 = chromaWeightl0[20];
				ChromaWeightL0_21 = chromaWeightl0[21];
				ChromaWeightL0_22 = chromaWeightl0[22];
				ChromaWeightL0_23 = chromaWeightl0[23];
				ChromaWeightL0_24 = chromaWeightl0[24];
				ChromaWeightL0_25 = chromaWeightl0[25];
				ChromaWeightL0_26 = chromaWeightl0[26];
				ChromaWeightL0_27 = chromaWeightl0[27];
				ChromaWeightL0_28 = chromaWeightl0[28];
				ChromaWeightL0_29 = chromaWeightl0[29];
				ChromaWeightL0_30 = chromaWeightl0[30];
				ChromaWeightL0_31 = chromaWeightl0[31];
			}
			if (chromaOffsetl0 != default)
			{
				ChromaOffsetL0_0 = chromaOffsetl0[0];
				ChromaOffsetL0_1 = chromaOffsetl0[1];
				ChromaOffsetL0_2 = chromaOffsetl0[2];
				ChromaOffsetL0_3 = chromaOffsetl0[3];
				ChromaOffsetL0_4 = chromaOffsetl0[4];
				ChromaOffsetL0_5 = chromaOffsetl0[5];
				ChromaOffsetL0_6 = chromaOffsetl0[6];
				ChromaOffsetL0_7 = chromaOffsetl0[7];
				ChromaOffsetL0_8 = chromaOffsetl0[8];
				ChromaOffsetL0_9 = chromaOffsetl0[9];
				ChromaOffsetL0_10 = chromaOffsetl0[10];
				ChromaOffsetL0_11 = chromaOffsetl0[11];
				ChromaOffsetL0_12 = chromaOffsetl0[12];
				ChromaOffsetL0_13 = chromaOffsetl0[13];
				ChromaOffsetL0_14 = chromaOffsetl0[14];
				ChromaOffsetL0_15 = chromaOffsetl0[15];
				ChromaOffsetL0_16 = chromaOffsetl0[16];
				ChromaOffsetL0_17 = chromaOffsetl0[17];
				ChromaOffsetL0_18 = chromaOffsetl0[18];
				ChromaOffsetL0_19 = chromaOffsetl0[19];
				ChromaOffsetL0_20 = chromaOffsetl0[20];
				ChromaOffsetL0_21 = chromaOffsetl0[21];
				ChromaOffsetL0_22 = chromaOffsetl0[22];
				ChromaOffsetL0_23 = chromaOffsetl0[23];
				ChromaOffsetL0_24 = chromaOffsetl0[24];
				ChromaOffsetL0_25 = chromaOffsetl0[25];
				ChromaOffsetL0_26 = chromaOffsetl0[26];
				ChromaOffsetL0_27 = chromaOffsetl0[27];
				ChromaOffsetL0_28 = chromaOffsetl0[28];
				ChromaOffsetL0_29 = chromaOffsetl0[29];
				ChromaOffsetL0_30 = chromaOffsetl0[30];
				ChromaOffsetL0_31 = chromaOffsetl0[31];
			}
			if (lumaWeightl1 != default)
			{
				LumaWeightL1_0 = lumaWeightl1[0];
				LumaWeightL1_1 = lumaWeightl1[1];
				LumaWeightL1_2 = lumaWeightl1[2];
				LumaWeightL1_3 = lumaWeightl1[3];
				LumaWeightL1_4 = lumaWeightl1[4];
				LumaWeightL1_5 = lumaWeightl1[5];
				LumaWeightL1_6 = lumaWeightl1[6];
				LumaWeightL1_7 = lumaWeightl1[7];
				LumaWeightL1_8 = lumaWeightl1[8];
				LumaWeightL1_9 = lumaWeightl1[9];
				LumaWeightL1_10 = lumaWeightl1[10];
				LumaWeightL1_11 = lumaWeightl1[11];
				LumaWeightL1_12 = lumaWeightl1[12];
				LumaWeightL1_13 = lumaWeightl1[13];
				LumaWeightL1_14 = lumaWeightl1[14];
				LumaWeightL1_15 = lumaWeightl1[15];
				LumaWeightL1_16 = lumaWeightl1[16];
				LumaWeightL1_17 = lumaWeightl1[17];
				LumaWeightL1_18 = lumaWeightl1[18];
				LumaWeightL1_19 = lumaWeightl1[19];
				LumaWeightL1_20 = lumaWeightl1[20];
				LumaWeightL1_21 = lumaWeightl1[21];
				LumaWeightL1_22 = lumaWeightl1[22];
				LumaWeightL1_23 = lumaWeightl1[23];
				LumaWeightL1_24 = lumaWeightl1[24];
				LumaWeightL1_25 = lumaWeightl1[25];
				LumaWeightL1_26 = lumaWeightl1[26];
				LumaWeightL1_27 = lumaWeightl1[27];
				LumaWeightL1_28 = lumaWeightl1[28];
				LumaWeightL1_29 = lumaWeightl1[29];
				LumaWeightL1_30 = lumaWeightl1[30];
				LumaWeightL1_31 = lumaWeightl1[31];
			}
			if (lumaOffsetl1 != default)
			{
				LumaOffsetL1_0 = lumaOffsetl1[0];
				LumaOffsetL1_1 = lumaOffsetl1[1];
				LumaOffsetL1_2 = lumaOffsetl1[2];
				LumaOffsetL1_3 = lumaOffsetl1[3];
				LumaOffsetL1_4 = lumaOffsetl1[4];
				LumaOffsetL1_5 = lumaOffsetl1[5];
				LumaOffsetL1_6 = lumaOffsetl1[6];
				LumaOffsetL1_7 = lumaOffsetl1[7];
				LumaOffsetL1_8 = lumaOffsetl1[8];
				LumaOffsetL1_9 = lumaOffsetl1[9];
				LumaOffsetL1_10 = lumaOffsetl1[10];
				LumaOffsetL1_11 = lumaOffsetl1[11];
				LumaOffsetL1_12 = lumaOffsetl1[12];
				LumaOffsetL1_13 = lumaOffsetl1[13];
				LumaOffsetL1_14 = lumaOffsetl1[14];
				LumaOffsetL1_15 = lumaOffsetl1[15];
				LumaOffsetL1_16 = lumaOffsetl1[16];
				LumaOffsetL1_17 = lumaOffsetl1[17];
				LumaOffsetL1_18 = lumaOffsetl1[18];
				LumaOffsetL1_19 = lumaOffsetl1[19];
				LumaOffsetL1_20 = lumaOffsetl1[20];
				LumaOffsetL1_21 = lumaOffsetl1[21];
				LumaOffsetL1_22 = lumaOffsetl1[22];
				LumaOffsetL1_23 = lumaOffsetl1[23];
				LumaOffsetL1_24 = lumaOffsetl1[24];
				LumaOffsetL1_25 = lumaOffsetl1[25];
				LumaOffsetL1_26 = lumaOffsetl1[26];
				LumaOffsetL1_27 = lumaOffsetl1[27];
				LumaOffsetL1_28 = lumaOffsetl1[28];
				LumaOffsetL1_29 = lumaOffsetl1[29];
				LumaOffsetL1_30 = lumaOffsetl1[30];
				LumaOffsetL1_31 = lumaOffsetl1[31];
			}
			if (chromaWeightl1 != default)
			{
				ChromaWeightL1_0 = chromaWeightl1[0];
				ChromaWeightL1_1 = chromaWeightl1[1];
				ChromaWeightL1_2 = chromaWeightl1[2];
				ChromaWeightL1_3 = chromaWeightl1[3];
				ChromaWeightL1_4 = chromaWeightl1[4];
				ChromaWeightL1_5 = chromaWeightl1[5];
				ChromaWeightL1_6 = chromaWeightl1[6];
				ChromaWeightL1_7 = chromaWeightl1[7];
				ChromaWeightL1_8 = chromaWeightl1[8];
				ChromaWeightL1_9 = chromaWeightl1[9];
				ChromaWeightL1_10 = chromaWeightl1[10];
				ChromaWeightL1_11 = chromaWeightl1[11];
				ChromaWeightL1_12 = chromaWeightl1[12];
				ChromaWeightL1_13 = chromaWeightl1[13];
				ChromaWeightL1_14 = chromaWeightl1[14];
				ChromaWeightL1_15 = chromaWeightl1[15];
				ChromaWeightL1_16 = chromaWeightl1[16];
				ChromaWeightL1_17 = chromaWeightl1[17];
				ChromaWeightL1_18 = chromaWeightl1[18];
				ChromaWeightL1_19 = chromaWeightl1[19];
				ChromaWeightL1_20 = chromaWeightl1[20];
				ChromaWeightL1_21 = chromaWeightl1[21];
				ChromaWeightL1_22 = chromaWeightl1[22];
				ChromaWeightL1_23 = chromaWeightl1[23];
				ChromaWeightL1_24 = chromaWeightl1[24];
				ChromaWeightL1_25 = chromaWeightl1[25];
				ChromaWeightL1_26 = chromaWeightl1[26];
				ChromaWeightL1_27 = chromaWeightl1[27];
				ChromaWeightL1_28 = chromaWeightl1[28];
				ChromaWeightL1_29 = chromaWeightl1[29];
				ChromaWeightL1_30 = chromaWeightl1[30];
				ChromaWeightL1_31 = chromaWeightl1[31];
			}
			if (chromaOffsetl1 != default)
			{
				ChromaOffsetL1_0 = chromaOffsetl1[0];
				ChromaOffsetL1_1 = chromaOffsetl1[1];
				ChromaOffsetL1_2 = chromaOffsetl1[2];
				ChromaOffsetL1_3 = chromaOffsetl1[3];
				ChromaOffsetL1_4 = chromaOffsetl1[4];
				ChromaOffsetL1_5 = chromaOffsetl1[5];
				ChromaOffsetL1_6 = chromaOffsetl1[6];
				ChromaOffsetL1_7 = chromaOffsetl1[7];
				ChromaOffsetL1_8 = chromaOffsetl1[8];
				ChromaOffsetL1_9 = chromaOffsetl1[9];
				ChromaOffsetL1_10 = chromaOffsetl1[10];
				ChromaOffsetL1_11 = chromaOffsetl1[11];
				ChromaOffsetL1_12 = chromaOffsetl1[12];
				ChromaOffsetL1_13 = chromaOffsetl1[13];
				ChromaOffsetL1_14 = chromaOffsetl1[14];
				ChromaOffsetL1_15 = chromaOffsetl1[15];
				ChromaOffsetL1_16 = chromaOffsetl1[16];
				ChromaOffsetL1_17 = chromaOffsetl1[17];
				ChromaOffsetL1_18 = chromaOffsetl1[18];
				ChromaOffsetL1_19 = chromaOffsetl1[19];
				ChromaOffsetL1_20 = chromaOffsetl1[20];
				ChromaOffsetL1_21 = chromaOffsetl1[21];
				ChromaOffsetL1_22 = chromaOffsetl1[22];
				ChromaOffsetL1_23 = chromaOffsetl1[23];
				ChromaOffsetL1_24 = chromaOffsetl1[24];
				ChromaOffsetL1_25 = chromaOffsetl1[25];
				ChromaOffsetL1_26 = chromaOffsetl1[26];
				ChromaOffsetL1_27 = chromaOffsetl1[27];
				ChromaOffsetL1_28 = chromaOffsetl1[28];
				ChromaOffsetL1_29 = chromaOffsetl1[29];
				ChromaOffsetL1_30 = chromaOffsetl1[30];
				ChromaOffsetL1_31 = chromaOffsetl1[31];
			}
		}

		public unsafe StdVideoEncodeH264WeightTable(StdVideoEncodeH264WeightTableFlags flags = default, byte lumalog2WeightDenom = default, byte chromalog2WeightDenom = default, Span<byte> lumaWeightl0 = default, Span<byte> lumaOffsetl0 = default, Span<Pointer<byte>> chromaWeightl0 = default, Span<Pointer<byte>> chromaOffsetl0 = default, Span<byte> lumaWeightl1 = default, Span<byte> lumaOffsetl1 = default, Span<Pointer<byte>> chromaWeightl1 = default, Span<Pointer<byte>> chromaOffsetl1 = default)
		{
			Flags = flags;
			LumaLog2WeightDenom = lumalog2WeightDenom;
			ChromaLog2WeightDenom = chromalog2WeightDenom;
			if (lumaWeightl0 != default)
			{
				LumaWeightL0_0 = lumaWeightl0[0];
				LumaWeightL0_1 = lumaWeightl0[1];
				LumaWeightL0_2 = lumaWeightl0[2];
				LumaWeightL0_3 = lumaWeightl0[3];
				LumaWeightL0_4 = lumaWeightl0[4];
				LumaWeightL0_5 = lumaWeightl0[5];
				LumaWeightL0_6 = lumaWeightl0[6];
				LumaWeightL0_7 = lumaWeightl0[7];
				LumaWeightL0_8 = lumaWeightl0[8];
				LumaWeightL0_9 = lumaWeightl0[9];
				LumaWeightL0_10 = lumaWeightl0[10];
				LumaWeightL0_11 = lumaWeightl0[11];
				LumaWeightL0_12 = lumaWeightl0[12];
				LumaWeightL0_13 = lumaWeightl0[13];
				LumaWeightL0_14 = lumaWeightl0[14];
				LumaWeightL0_15 = lumaWeightl0[15];
				LumaWeightL0_16 = lumaWeightl0[16];
				LumaWeightL0_17 = lumaWeightl0[17];
				LumaWeightL0_18 = lumaWeightl0[18];
				LumaWeightL0_19 = lumaWeightl0[19];
				LumaWeightL0_20 = lumaWeightl0[20];
				LumaWeightL0_21 = lumaWeightl0[21];
				LumaWeightL0_22 = lumaWeightl0[22];
				LumaWeightL0_23 = lumaWeightl0[23];
				LumaWeightL0_24 = lumaWeightl0[24];
				LumaWeightL0_25 = lumaWeightl0[25];
				LumaWeightL0_26 = lumaWeightl0[26];
				LumaWeightL0_27 = lumaWeightl0[27];
				LumaWeightL0_28 = lumaWeightl0[28];
				LumaWeightL0_29 = lumaWeightl0[29];
				LumaWeightL0_30 = lumaWeightl0[30];
				LumaWeightL0_31 = lumaWeightl0[31];
			}
			if (lumaOffsetl0 != default)
			{
				LumaOffsetL0_0 = lumaOffsetl0[0];
				LumaOffsetL0_1 = lumaOffsetl0[1];
				LumaOffsetL0_2 = lumaOffsetl0[2];
				LumaOffsetL0_3 = lumaOffsetl0[3];
				LumaOffsetL0_4 = lumaOffsetl0[4];
				LumaOffsetL0_5 = lumaOffsetl0[5];
				LumaOffsetL0_6 = lumaOffsetl0[6];
				LumaOffsetL0_7 = lumaOffsetl0[7];
				LumaOffsetL0_8 = lumaOffsetl0[8];
				LumaOffsetL0_9 = lumaOffsetl0[9];
				LumaOffsetL0_10 = lumaOffsetl0[10];
				LumaOffsetL0_11 = lumaOffsetl0[11];
				LumaOffsetL0_12 = lumaOffsetl0[12];
				LumaOffsetL0_13 = lumaOffsetl0[13];
				LumaOffsetL0_14 = lumaOffsetl0[14];
				LumaOffsetL0_15 = lumaOffsetl0[15];
				LumaOffsetL0_16 = lumaOffsetl0[16];
				LumaOffsetL0_17 = lumaOffsetl0[17];
				LumaOffsetL0_18 = lumaOffsetl0[18];
				LumaOffsetL0_19 = lumaOffsetl0[19];
				LumaOffsetL0_20 = lumaOffsetl0[20];
				LumaOffsetL0_21 = lumaOffsetl0[21];
				LumaOffsetL0_22 = lumaOffsetl0[22];
				LumaOffsetL0_23 = lumaOffsetl0[23];
				LumaOffsetL0_24 = lumaOffsetl0[24];
				LumaOffsetL0_25 = lumaOffsetl0[25];
				LumaOffsetL0_26 = lumaOffsetl0[26];
				LumaOffsetL0_27 = lumaOffsetl0[27];
				LumaOffsetL0_28 = lumaOffsetl0[28];
				LumaOffsetL0_29 = lumaOffsetl0[29];
				LumaOffsetL0_30 = lumaOffsetl0[30];
				LumaOffsetL0_31 = lumaOffsetl0[31];
			}
			if (chromaWeightl0 != default)
			{
				ChromaWeightL0_0 = chromaWeightl0[0];
				ChromaWeightL0_1 = chromaWeightl0[1];
				ChromaWeightL0_2 = chromaWeightl0[2];
				ChromaWeightL0_3 = chromaWeightl0[3];
				ChromaWeightL0_4 = chromaWeightl0[4];
				ChromaWeightL0_5 = chromaWeightl0[5];
				ChromaWeightL0_6 = chromaWeightl0[6];
				ChromaWeightL0_7 = chromaWeightl0[7];
				ChromaWeightL0_8 = chromaWeightl0[8];
				ChromaWeightL0_9 = chromaWeightl0[9];
				ChromaWeightL0_10 = chromaWeightl0[10];
				ChromaWeightL0_11 = chromaWeightl0[11];
				ChromaWeightL0_12 = chromaWeightl0[12];
				ChromaWeightL0_13 = chromaWeightl0[13];
				ChromaWeightL0_14 = chromaWeightl0[14];
				ChromaWeightL0_15 = chromaWeightl0[15];
				ChromaWeightL0_16 = chromaWeightl0[16];
				ChromaWeightL0_17 = chromaWeightl0[17];
				ChromaWeightL0_18 = chromaWeightl0[18];
				ChromaWeightL0_19 = chromaWeightl0[19];
				ChromaWeightL0_20 = chromaWeightl0[20];
				ChromaWeightL0_21 = chromaWeightl0[21];
				ChromaWeightL0_22 = chromaWeightl0[22];
				ChromaWeightL0_23 = chromaWeightl0[23];
				ChromaWeightL0_24 = chromaWeightl0[24];
				ChromaWeightL0_25 = chromaWeightl0[25];
				ChromaWeightL0_26 = chromaWeightl0[26];
				ChromaWeightL0_27 = chromaWeightl0[27];
				ChromaWeightL0_28 = chromaWeightl0[28];
				ChromaWeightL0_29 = chromaWeightl0[29];
				ChromaWeightL0_30 = chromaWeightl0[30];
				ChromaWeightL0_31 = chromaWeightl0[31];
			}
			if (chromaOffsetl0 != default)
			{
				ChromaOffsetL0_0 = chromaOffsetl0[0];
				ChromaOffsetL0_1 = chromaOffsetl0[1];
				ChromaOffsetL0_2 = chromaOffsetl0[2];
				ChromaOffsetL0_3 = chromaOffsetl0[3];
				ChromaOffsetL0_4 = chromaOffsetl0[4];
				ChromaOffsetL0_5 = chromaOffsetl0[5];
				ChromaOffsetL0_6 = chromaOffsetl0[6];
				ChromaOffsetL0_7 = chromaOffsetl0[7];
				ChromaOffsetL0_8 = chromaOffsetl0[8];
				ChromaOffsetL0_9 = chromaOffsetl0[9];
				ChromaOffsetL0_10 = chromaOffsetl0[10];
				ChromaOffsetL0_11 = chromaOffsetl0[11];
				ChromaOffsetL0_12 = chromaOffsetl0[12];
				ChromaOffsetL0_13 = chromaOffsetl0[13];
				ChromaOffsetL0_14 = chromaOffsetl0[14];
				ChromaOffsetL0_15 = chromaOffsetl0[15];
				ChromaOffsetL0_16 = chromaOffsetl0[16];
				ChromaOffsetL0_17 = chromaOffsetl0[17];
				ChromaOffsetL0_18 = chromaOffsetl0[18];
				ChromaOffsetL0_19 = chromaOffsetl0[19];
				ChromaOffsetL0_20 = chromaOffsetl0[20];
				ChromaOffsetL0_21 = chromaOffsetl0[21];
				ChromaOffsetL0_22 = chromaOffsetl0[22];
				ChromaOffsetL0_23 = chromaOffsetl0[23];
				ChromaOffsetL0_24 = chromaOffsetl0[24];
				ChromaOffsetL0_25 = chromaOffsetl0[25];
				ChromaOffsetL0_26 = chromaOffsetl0[26];
				ChromaOffsetL0_27 = chromaOffsetl0[27];
				ChromaOffsetL0_28 = chromaOffsetl0[28];
				ChromaOffsetL0_29 = chromaOffsetl0[29];
				ChromaOffsetL0_30 = chromaOffsetl0[30];
				ChromaOffsetL0_31 = chromaOffsetl0[31];
			}
			if (lumaWeightl1 != default)
			{
				LumaWeightL1_0 = lumaWeightl1[0];
				LumaWeightL1_1 = lumaWeightl1[1];
				LumaWeightL1_2 = lumaWeightl1[2];
				LumaWeightL1_3 = lumaWeightl1[3];
				LumaWeightL1_4 = lumaWeightl1[4];
				LumaWeightL1_5 = lumaWeightl1[5];
				LumaWeightL1_6 = lumaWeightl1[6];
				LumaWeightL1_7 = lumaWeightl1[7];
				LumaWeightL1_8 = lumaWeightl1[8];
				LumaWeightL1_9 = lumaWeightl1[9];
				LumaWeightL1_10 = lumaWeightl1[10];
				LumaWeightL1_11 = lumaWeightl1[11];
				LumaWeightL1_12 = lumaWeightl1[12];
				LumaWeightL1_13 = lumaWeightl1[13];
				LumaWeightL1_14 = lumaWeightl1[14];
				LumaWeightL1_15 = lumaWeightl1[15];
				LumaWeightL1_16 = lumaWeightl1[16];
				LumaWeightL1_17 = lumaWeightl1[17];
				LumaWeightL1_18 = lumaWeightl1[18];
				LumaWeightL1_19 = lumaWeightl1[19];
				LumaWeightL1_20 = lumaWeightl1[20];
				LumaWeightL1_21 = lumaWeightl1[21];
				LumaWeightL1_22 = lumaWeightl1[22];
				LumaWeightL1_23 = lumaWeightl1[23];
				LumaWeightL1_24 = lumaWeightl1[24];
				LumaWeightL1_25 = lumaWeightl1[25];
				LumaWeightL1_26 = lumaWeightl1[26];
				LumaWeightL1_27 = lumaWeightl1[27];
				LumaWeightL1_28 = lumaWeightl1[28];
				LumaWeightL1_29 = lumaWeightl1[29];
				LumaWeightL1_30 = lumaWeightl1[30];
				LumaWeightL1_31 = lumaWeightl1[31];
			}
			if (lumaOffsetl1 != default)
			{
				LumaOffsetL1_0 = lumaOffsetl1[0];
				LumaOffsetL1_1 = lumaOffsetl1[1];
				LumaOffsetL1_2 = lumaOffsetl1[2];
				LumaOffsetL1_3 = lumaOffsetl1[3];
				LumaOffsetL1_4 = lumaOffsetl1[4];
				LumaOffsetL1_5 = lumaOffsetl1[5];
				LumaOffsetL1_6 = lumaOffsetl1[6];
				LumaOffsetL1_7 = lumaOffsetl1[7];
				LumaOffsetL1_8 = lumaOffsetl1[8];
				LumaOffsetL1_9 = lumaOffsetl1[9];
				LumaOffsetL1_10 = lumaOffsetl1[10];
				LumaOffsetL1_11 = lumaOffsetl1[11];
				LumaOffsetL1_12 = lumaOffsetl1[12];
				LumaOffsetL1_13 = lumaOffsetl1[13];
				LumaOffsetL1_14 = lumaOffsetl1[14];
				LumaOffsetL1_15 = lumaOffsetl1[15];
				LumaOffsetL1_16 = lumaOffsetl1[16];
				LumaOffsetL1_17 = lumaOffsetl1[17];
				LumaOffsetL1_18 = lumaOffsetl1[18];
				LumaOffsetL1_19 = lumaOffsetl1[19];
				LumaOffsetL1_20 = lumaOffsetl1[20];
				LumaOffsetL1_21 = lumaOffsetl1[21];
				LumaOffsetL1_22 = lumaOffsetl1[22];
				LumaOffsetL1_23 = lumaOffsetl1[23];
				LumaOffsetL1_24 = lumaOffsetl1[24];
				LumaOffsetL1_25 = lumaOffsetl1[25];
				LumaOffsetL1_26 = lumaOffsetl1[26];
				LumaOffsetL1_27 = lumaOffsetl1[27];
				LumaOffsetL1_28 = lumaOffsetl1[28];
				LumaOffsetL1_29 = lumaOffsetl1[29];
				LumaOffsetL1_30 = lumaOffsetl1[30];
				LumaOffsetL1_31 = lumaOffsetl1[31];
			}
			if (chromaWeightl1 != default)
			{
				ChromaWeightL1_0 = chromaWeightl1[0];
				ChromaWeightL1_1 = chromaWeightl1[1];
				ChromaWeightL1_2 = chromaWeightl1[2];
				ChromaWeightL1_3 = chromaWeightl1[3];
				ChromaWeightL1_4 = chromaWeightl1[4];
				ChromaWeightL1_5 = chromaWeightl1[5];
				ChromaWeightL1_6 = chromaWeightl1[6];
				ChromaWeightL1_7 = chromaWeightl1[7];
				ChromaWeightL1_8 = chromaWeightl1[8];
				ChromaWeightL1_9 = chromaWeightl1[9];
				ChromaWeightL1_10 = chromaWeightl1[10];
				ChromaWeightL1_11 = chromaWeightl1[11];
				ChromaWeightL1_12 = chromaWeightl1[12];
				ChromaWeightL1_13 = chromaWeightl1[13];
				ChromaWeightL1_14 = chromaWeightl1[14];
				ChromaWeightL1_15 = chromaWeightl1[15];
				ChromaWeightL1_16 = chromaWeightl1[16];
				ChromaWeightL1_17 = chromaWeightl1[17];
				ChromaWeightL1_18 = chromaWeightl1[18];
				ChromaWeightL1_19 = chromaWeightl1[19];
				ChromaWeightL1_20 = chromaWeightl1[20];
				ChromaWeightL1_21 = chromaWeightl1[21];
				ChromaWeightL1_22 = chromaWeightl1[22];
				ChromaWeightL1_23 = chromaWeightl1[23];
				ChromaWeightL1_24 = chromaWeightl1[24];
				ChromaWeightL1_25 = chromaWeightl1[25];
				ChromaWeightL1_26 = chromaWeightl1[26];
				ChromaWeightL1_27 = chromaWeightl1[27];
				ChromaWeightL1_28 = chromaWeightl1[28];
				ChromaWeightL1_29 = chromaWeightl1[29];
				ChromaWeightL1_30 = chromaWeightl1[30];
				ChromaWeightL1_31 = chromaWeightl1[31];
			}
			if (chromaOffsetl1 != default)
			{
				ChromaOffsetL1_0 = chromaOffsetl1[0];
				ChromaOffsetL1_1 = chromaOffsetl1[1];
				ChromaOffsetL1_2 = chromaOffsetl1[2];
				ChromaOffsetL1_3 = chromaOffsetl1[3];
				ChromaOffsetL1_4 = chromaOffsetl1[4];
				ChromaOffsetL1_5 = chromaOffsetl1[5];
				ChromaOffsetL1_6 = chromaOffsetl1[6];
				ChromaOffsetL1_7 = chromaOffsetl1[7];
				ChromaOffsetL1_8 = chromaOffsetl1[8];
				ChromaOffsetL1_9 = chromaOffsetl1[9];
				ChromaOffsetL1_10 = chromaOffsetl1[10];
				ChromaOffsetL1_11 = chromaOffsetl1[11];
				ChromaOffsetL1_12 = chromaOffsetl1[12];
				ChromaOffsetL1_13 = chromaOffsetl1[13];
				ChromaOffsetL1_14 = chromaOffsetl1[14];
				ChromaOffsetL1_15 = chromaOffsetl1[15];
				ChromaOffsetL1_16 = chromaOffsetl1[16];
				ChromaOffsetL1_17 = chromaOffsetl1[17];
				ChromaOffsetL1_18 = chromaOffsetl1[18];
				ChromaOffsetL1_19 = chromaOffsetl1[19];
				ChromaOffsetL1_20 = chromaOffsetl1[20];
				ChromaOffsetL1_21 = chromaOffsetl1[21];
				ChromaOffsetL1_22 = chromaOffsetl1[22];
				ChromaOffsetL1_23 = chromaOffsetl1[23];
				ChromaOffsetL1_24 = chromaOffsetl1[24];
				ChromaOffsetL1_25 = chromaOffsetl1[25];
				ChromaOffsetL1_26 = chromaOffsetl1[26];
				ChromaOffsetL1_27 = chromaOffsetl1[27];
				ChromaOffsetL1_28 = chromaOffsetl1[28];
				ChromaOffsetL1_29 = chromaOffsetl1[29];
				ChromaOffsetL1_30 = chromaOffsetl1[30];
				ChromaOffsetL1_31 = chromaOffsetl1[31];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH264SliceHeaderFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH264SliceHeaderFlags
	{
		[NativeName(NativeNameType.Field, "direct_spatial_mv_pred_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DirectSpatialMvPredFlag;
		[NativeName(NativeNameType.Field, "num_ref_idx_active_override_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NumRefIdxActiveOverrideFlag;
		[NativeName(NativeNameType.Field, "no_output_of_prior_pics_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NoOutputOfPriorPicsFlag;
		[NativeName(NativeNameType.Field, "adaptive_ref_pic_marking_mode_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint AdaptiveRefPicMarkingModeFlag;
		[NativeName(NativeNameType.Field, "no_prior_references_available_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NoPriorReferencesAvailableFlag;

		public unsafe StdVideoEncodeH264SliceHeaderFlags(uint directSpatialMvPredFlag = default, uint numRefIdxActiveOverrideFlag = default, uint noOutputOfPriorPicsFlag = default, uint adaptiveRefPicMarkingModeFlag = default, uint noPriorReferencesAvailableFlag = default)
		{
			DirectSpatialMvPredFlag = directSpatialMvPredFlag;
			NumRefIdxActiveOverrideFlag = numRefIdxActiveOverrideFlag;
			NoOutputOfPriorPicsFlag = noOutputOfPriorPicsFlag;
			AdaptiveRefPicMarkingModeFlag = adaptiveRefPicMarkingModeFlag;
			NoPriorReferencesAvailableFlag = noPriorReferencesAvailableFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH264PictureInfoFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH264PictureInfoFlags
	{
		[NativeName(NativeNameType.Field, "idr_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IdrFlag;
		[NativeName(NativeNameType.Field, "is_reference_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IsReferenceFlag;
		[NativeName(NativeNameType.Field, "used_for_long_term_reference")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint UsedForLongTermReference;

		public unsafe StdVideoEncodeH264PictureInfoFlags(uint idrFlag = default, uint isReferenceFlag = default, uint usedForLongTermReference = default)
		{
			IdrFlag = idrFlag;
			IsReferenceFlag = isReferenceFlag;
			UsedForLongTermReference = usedForLongTermReference;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH264ReferenceInfoFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH264ReferenceInfoFlags
	{
		[NativeName(NativeNameType.Field, "used_for_long_term_reference")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint UsedForLongTermReference;

		public unsafe StdVideoEncodeH264ReferenceInfoFlags(uint usedForLongTermReference = default)
		{
			UsedForLongTermReference = usedForLongTermReference;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH264ReferenceListsInfoFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH264ReferenceListsInfoFlags
	{
		[NativeName(NativeNameType.Field, "ref_pic_list_modification_flag_l0")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint RefPicListModificationFlagL0;
		[NativeName(NativeNameType.Field, "ref_pic_list_modification_flag_l1")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint RefPicListModificationFlagL1;

		public unsafe StdVideoEncodeH264ReferenceListsInfoFlags(uint refPicListModificationFlagl0 = default, uint refPicListModificationFlagl1 = default)
		{
			RefPicListModificationFlagL0 = refPicListModificationFlagl0;
			RefPicListModificationFlagL1 = refPicListModificationFlagl1;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH264RefListModEntry")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH264RefListModEntry
	{
		[NativeName(NativeNameType.Field, "modification_of_pic_nums_idc")]
		[NativeName(NativeNameType.Type, "StdVideoH264ModificationOfPicNumsIdc")]
		public StdVideoH264ModificationOfPicNumsIdc ModificationOfPicNumsIdc;
		[NativeName(NativeNameType.Field, "abs_diff_pic_num_minus1")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort AbsDiffPicNumMinus1;
		[NativeName(NativeNameType.Field, "long_term_pic_num")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort LongTermPicNum;

		public unsafe StdVideoEncodeH264RefListModEntry(StdVideoH264ModificationOfPicNumsIdc modificationOfPicNumsIdc = default, ushort absDiffPicNumminus1 = default, ushort longTermPicNum = default)
		{
			ModificationOfPicNumsIdc = modificationOfPicNumsIdc;
			AbsDiffPicNumMinus1 = absDiffPicNumminus1;
			LongTermPicNum = longTermPicNum;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH264RefPicMarkingEntry")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH264RefPicMarkingEntry
	{
		[NativeName(NativeNameType.Field, "operation")]
		[NativeName(NativeNameType.Type, "StdVideoH264MemMgmtControlOp")]
		public StdVideoH264MemMgmtControlOp Operation;
		[NativeName(NativeNameType.Field, "difference_of_pic_nums_minus1")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort DifferenceOfPicNumsMinus1;
		[NativeName(NativeNameType.Field, "long_term_pic_num")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort LongTermPicNum;
		[NativeName(NativeNameType.Field, "long_term_frame_idx")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort LongTermFrameIdx;
		[NativeName(NativeNameType.Field, "max_long_term_frame_idx_plus1")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort MaxLongTermFrameIdxPlus1;

		public unsafe StdVideoEncodeH264RefPicMarkingEntry(StdVideoH264MemMgmtControlOp operation = default, ushort differenceOfPicNumsminus1 = default, ushort longTermPicNum = default, ushort longTermFrameIdx = default, ushort maxLongTermFrameIdxplus1 = default)
		{
			Operation = operation;
			DifferenceOfPicNumsMinus1 = differenceOfPicNumsminus1;
			LongTermPicNum = longTermPicNum;
			LongTermFrameIdx = longTermFrameIdx;
			MaxLongTermFrameIdxPlus1 = maxLongTermFrameIdxplus1;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH264ReferenceListsInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH264ReferenceListsInfo
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoEncodeH264ReferenceListsInfoFlags")]
		public StdVideoEncodeH264ReferenceListsInfoFlags Flags;
		[NativeName(NativeNameType.Field, "refPicList0EntryCount")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte RefPicList0EntryCount;
		[NativeName(NativeNameType.Field, "refPicList1EntryCount")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte RefPicList1EntryCount;
		[NativeName(NativeNameType.Field, "refList0ModOpCount")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte RefList0ModOpCount;
		[NativeName(NativeNameType.Field, "refList1ModOpCount")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte RefList1ModOpCount;
		[NativeName(NativeNameType.Field, "refPicMarkingOpCount")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte RefPicMarkingOpCount;
		[NativeName(NativeNameType.Field, "reserved1")]
		[NativeName(NativeNameType.Type, "uint8_t[7]")]
		public byte Reserved1_0;
		public byte Reserved1_1;
		public byte Reserved1_2;
		public byte Reserved1_3;
		public byte Reserved1_4;
		public byte Reserved1_5;
		public byte Reserved1_6;
		[NativeName(NativeNameType.Field, "pRefPicList0Entries")]
		[NativeName(NativeNameType.Type, "const uint8_t*")]
		public unsafe byte* PRefPicList0Entries;
		[NativeName(NativeNameType.Field, "pRefPicList1Entries")]
		[NativeName(NativeNameType.Type, "const uint8_t*")]
		public unsafe byte* PRefPicList1Entries;
		[NativeName(NativeNameType.Field, "pRefList0ModOperations")]
		[NativeName(NativeNameType.Type, "const StdVideoEncodeH264RefListModEntry*")]
		public unsafe StdVideoEncodeH264RefListModEntry* PRefList0ModOperations;
		[NativeName(NativeNameType.Field, "pRefList1ModOperations")]
		[NativeName(NativeNameType.Type, "const StdVideoEncodeH264RefListModEntry*")]
		public unsafe StdVideoEncodeH264RefListModEntry* PRefList1ModOperations;
		[NativeName(NativeNameType.Field, "pRefPicMarkingOperations")]
		[NativeName(NativeNameType.Type, "const StdVideoEncodeH264RefPicMarkingEntry*")]
		public unsafe StdVideoEncodeH264RefPicMarkingEntry* PRefPicMarkingOperations;

		public unsafe StdVideoEncodeH264ReferenceListsInfo(StdVideoEncodeH264ReferenceListsInfoFlags flags = default, byte refPicList0EntryCount = default, byte refPicList1EntryCount = default, byte refList0ModOpCount = default, byte refList1ModOpCount = default, byte refPicMarkingOpCount = default, byte* reserved1 = default, byte* pRefPicList0Entries = default, byte* pRefPicList1Entries = default, StdVideoEncodeH264RefListModEntry* pRefList0ModOperations = default, StdVideoEncodeH264RefListModEntry* pRefList1ModOperations = default, StdVideoEncodeH264RefPicMarkingEntry* pRefPicMarkingOperations = default)
		{
			Flags = flags;
			RefPicList0EntryCount = refPicList0EntryCount;
			RefPicList1EntryCount = refPicList1EntryCount;
			RefList0ModOpCount = refList0ModOpCount;
			RefList1ModOpCount = refList1ModOpCount;
			RefPicMarkingOpCount = refPicMarkingOpCount;
			if (reserved1 != default)
			{
				Reserved1_0 = reserved1[0];
				Reserved1_1 = reserved1[1];
				Reserved1_2 = reserved1[2];
				Reserved1_3 = reserved1[3];
				Reserved1_4 = reserved1[4];
				Reserved1_5 = reserved1[5];
				Reserved1_6 = reserved1[6];
			}
			PRefPicList0Entries = pRefPicList0Entries;
			PRefPicList1Entries = pRefPicList1Entries;
			PRefList0ModOperations = pRefList0ModOperations;
			PRefList1ModOperations = pRefList1ModOperations;
			PRefPicMarkingOperations = pRefPicMarkingOperations;
		}

		public unsafe StdVideoEncodeH264ReferenceListsInfo(StdVideoEncodeH264ReferenceListsInfoFlags flags = default, byte refPicList0EntryCount = default, byte refPicList1EntryCount = default, byte refList0ModOpCount = default, byte refList1ModOpCount = default, byte refPicMarkingOpCount = default, Span<byte> reserved1 = default, byte* pRefPicList0Entries = default, byte* pRefPicList1Entries = default, StdVideoEncodeH264RefListModEntry* pRefList0ModOperations = default, StdVideoEncodeH264RefListModEntry* pRefList1ModOperations = default, StdVideoEncodeH264RefPicMarkingEntry* pRefPicMarkingOperations = default)
		{
			Flags = flags;
			RefPicList0EntryCount = refPicList0EntryCount;
			RefPicList1EntryCount = refPicList1EntryCount;
			RefList0ModOpCount = refList0ModOpCount;
			RefList1ModOpCount = refList1ModOpCount;
			RefPicMarkingOpCount = refPicMarkingOpCount;
			if (reserved1 != default)
			{
				Reserved1_0 = reserved1[0];
				Reserved1_1 = reserved1[1];
				Reserved1_2 = reserved1[2];
				Reserved1_3 = reserved1[3];
				Reserved1_4 = reserved1[4];
				Reserved1_5 = reserved1[5];
				Reserved1_6 = reserved1[6];
			}
			PRefPicList0Entries = pRefPicList0Entries;
			PRefPicList1Entries = pRefPicList1Entries;
			PRefList0ModOperations = pRefList0ModOperations;
			PRefList1ModOperations = pRefList1ModOperations;
			PRefPicMarkingOperations = pRefPicMarkingOperations;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH264PictureInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH264PictureInfo
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoEncodeH264PictureInfoFlags")]
		public StdVideoEncodeH264PictureInfoFlags Flags;
		[NativeName(NativeNameType.Field, "seq_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte SeqParameterSetId;
		[NativeName(NativeNameType.Field, "pic_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PicParameterSetId;
		[NativeName(NativeNameType.Field, "reserved1")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort Reserved1;
		[NativeName(NativeNameType.Field, "pictureType")]
		[NativeName(NativeNameType.Type, "StdVideoH264PictureType")]
		public StdVideoH264PictureType PictureType;
		[NativeName(NativeNameType.Field, "frame_num")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FrameNum;
		[NativeName(NativeNameType.Field, "PicOrderCnt")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int PicOrderCnt;

		public unsafe StdVideoEncodeH264PictureInfo(StdVideoEncodeH264PictureInfoFlags flags = default, byte seqParameterSetId = default, byte picParameterSetId = default, ushort reserved1 = default, StdVideoH264PictureType pictureType = default, uint frameNum = default, int picOrderCnt = default)
		{
			Flags = flags;
			SeqParameterSetId = seqParameterSetId;
			PicParameterSetId = picParameterSetId;
			Reserved1 = reserved1;
			PictureType = pictureType;
			FrameNum = frameNum;
			PicOrderCnt = picOrderCnt;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH264ReferenceInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH264ReferenceInfo
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoEncodeH264ReferenceInfoFlags")]
		public StdVideoEncodeH264ReferenceInfoFlags Flags;
		[NativeName(NativeNameType.Field, "pictureType")]
		[NativeName(NativeNameType.Type, "StdVideoH264PictureType")]
		public StdVideoH264PictureType PictureType;
		[NativeName(NativeNameType.Field, "FrameNum")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FrameNum;
		[NativeName(NativeNameType.Field, "PicOrderCnt")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int PicOrderCnt;
		[NativeName(NativeNameType.Field, "long_term_pic_num")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort LongTermPicNum;
		[NativeName(NativeNameType.Field, "long_term_frame_idx")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort LongTermFrameIdx;

		public unsafe StdVideoEncodeH264ReferenceInfo(StdVideoEncodeH264ReferenceInfoFlags flags = default, StdVideoH264PictureType pictureType = default, uint frameNum = default, int picOrderCnt = default, ushort longTermPicNum = default, ushort longTermFrameIdx = default)
		{
			Flags = flags;
			PictureType = pictureType;
			FrameNum = frameNum;
			PicOrderCnt = picOrderCnt;
			LongTermPicNum = longTermPicNum;
			LongTermFrameIdx = longTermFrameIdx;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH264SliceHeader")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH264SliceHeader
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoEncodeH264SliceHeaderFlags")]
		public StdVideoEncodeH264SliceHeaderFlags Flags;
		[NativeName(NativeNameType.Field, "first_mb_in_slice")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FirstMbInSlice;
		[NativeName(NativeNameType.Field, "slice_type")]
		[NativeName(NativeNameType.Type, "StdVideoH264SliceType")]
		public StdVideoH264SliceType SliceType;
		[NativeName(NativeNameType.Field, "idr_pic_id")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort IdrPicId;
		[NativeName(NativeNameType.Field, "num_ref_idx_l0_active_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumRefIdxL0ActiveMinus1;
		[NativeName(NativeNameType.Field, "num_ref_idx_l1_active_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumRefIdxL1ActiveMinus1;
		[NativeName(NativeNameType.Field, "cabac_init_idc")]
		[NativeName(NativeNameType.Type, "StdVideoH264CabacInitIdc")]
		public StdVideoH264CabacInitIdc CabacInitIdc;
		[NativeName(NativeNameType.Field, "disable_deblocking_filter_idc")]
		[NativeName(NativeNameType.Type, "StdVideoH264DisableDeblockingFilterIdc")]
		public StdVideoH264DisableDeblockingFilterIdc DisableDeblockingFilterIdc;
		[NativeName(NativeNameType.Field, "slice_alpha_c0_offset_div2")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte SliceAlphaC0OffsetDiv2;
		[NativeName(NativeNameType.Field, "slice_beta_offset_div2")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte SliceBetaOffsetDiv2;
		[NativeName(NativeNameType.Field, "reserved1")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort Reserved1;
		[NativeName(NativeNameType.Field, "reserved2")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Reserved2;
		[NativeName(NativeNameType.Field, "pWeightTable")]
		[NativeName(NativeNameType.Type, "const StdVideoEncodeH264WeightTable*")]
		public unsafe StdVideoEncodeH264WeightTable* PWeightTable;

		public unsafe StdVideoEncodeH264SliceHeader(StdVideoEncodeH264SliceHeaderFlags flags = default, uint firstMbInSlice = default, StdVideoH264SliceType sliceType = default, ushort idrPicId = default, byte numRefIdxl0Activeminus1 = default, byte numRefIdxl1Activeminus1 = default, StdVideoH264CabacInitIdc cabacInitIdc = default, StdVideoH264DisableDeblockingFilterIdc disableDeblockingFilterIdc = default, byte sliceAlphac0Offsetdiv2 = default, byte sliceBetaOffsetdiv2 = default, ushort reserved1 = default, uint reserved2 = default, StdVideoEncodeH264WeightTable* pWeightTable = default)
		{
			Flags = flags;
			FirstMbInSlice = firstMbInSlice;
			SliceType = sliceType;
			IdrPicId = idrPicId;
			NumRefIdxL0ActiveMinus1 = numRefIdxl0Activeminus1;
			NumRefIdxL1ActiveMinus1 = numRefIdxl1Activeminus1;
			CabacInitIdc = cabacInitIdc;
			DisableDeblockingFilterIdc = disableDeblockingFilterIdc;
			SliceAlphaC0OffsetDiv2 = sliceAlphac0Offsetdiv2;
			SliceBetaOffsetDiv2 = sliceBetaOffsetdiv2;
			Reserved1 = reserved1;
			Reserved2 = reserved2;
			PWeightTable = pWeightTable;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH265WeightTableFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH265WeightTableFlags
	{
		[NativeName(NativeNameType.Field, "luma_weight_l0_flag")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort LumaWeightL0Flag;
		[NativeName(NativeNameType.Field, "chroma_weight_l0_flag")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort ChromaWeightL0Flag;
		[NativeName(NativeNameType.Field, "luma_weight_l1_flag")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort LumaWeightL1Flag;
		[NativeName(NativeNameType.Field, "chroma_weight_l1_flag")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort ChromaWeightL1Flag;

		public unsafe StdVideoEncodeH265WeightTableFlags(ushort lumaWeightl0Flag = default, ushort chromaWeightl0Flag = default, ushort lumaWeightl1Flag = default, ushort chromaWeightl1Flag = default)
		{
			LumaWeightL0Flag = lumaWeightl0Flag;
			ChromaWeightL0Flag = chromaWeightl0Flag;
			LumaWeightL1Flag = lumaWeightl1Flag;
			ChromaWeightL1Flag = chromaWeightl1Flag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH265WeightTable")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH265WeightTable
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoEncodeH265WeightTableFlags")]
		public StdVideoEncodeH265WeightTableFlags Flags;
		[NativeName(NativeNameType.Field, "luma_log2_weight_denom")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte LumaLog2WeightDenom;
		[NativeName(NativeNameType.Field, "delta_chroma_log2_weight_denom")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte DeltaChromaLog2WeightDenom;
		[NativeName(NativeNameType.Field, "delta_luma_weight_l0")]
		[NativeName(NativeNameType.Type, "int8_t[15]")]
		public byte DeltaLumaWeightL0_0;
		public byte DeltaLumaWeightL0_1;
		public byte DeltaLumaWeightL0_2;
		public byte DeltaLumaWeightL0_3;
		public byte DeltaLumaWeightL0_4;
		public byte DeltaLumaWeightL0_5;
		public byte DeltaLumaWeightL0_6;
		public byte DeltaLumaWeightL0_7;
		public byte DeltaLumaWeightL0_8;
		public byte DeltaLumaWeightL0_9;
		public byte DeltaLumaWeightL0_10;
		public byte DeltaLumaWeightL0_11;
		public byte DeltaLumaWeightL0_12;
		public byte DeltaLumaWeightL0_13;
		public byte DeltaLumaWeightL0_14;
		[NativeName(NativeNameType.Field, "luma_offset_l0")]
		[NativeName(NativeNameType.Type, "int8_t[15]")]
		public byte LumaOffsetL0_0;
		public byte LumaOffsetL0_1;
		public byte LumaOffsetL0_2;
		public byte LumaOffsetL0_3;
		public byte LumaOffsetL0_4;
		public byte LumaOffsetL0_5;
		public byte LumaOffsetL0_6;
		public byte LumaOffsetL0_7;
		public byte LumaOffsetL0_8;
		public byte LumaOffsetL0_9;
		public byte LumaOffsetL0_10;
		public byte LumaOffsetL0_11;
		public byte LumaOffsetL0_12;
		public byte LumaOffsetL0_13;
		public byte LumaOffsetL0_14;
		[NativeName(NativeNameType.Field, "delta_chroma_weight_l0")]
		[NativeName(NativeNameType.Type, "int8_t[2][15]")]
		public unsafe byte* DeltaChromaWeightL0_0;
		public unsafe byte* DeltaChromaWeightL0_1;
		public unsafe byte* DeltaChromaWeightL0_2;
		public unsafe byte* DeltaChromaWeightL0_3;
		public unsafe byte* DeltaChromaWeightL0_4;
		public unsafe byte* DeltaChromaWeightL0_5;
		public unsafe byte* DeltaChromaWeightL0_6;
		public unsafe byte* DeltaChromaWeightL0_7;
		public unsafe byte* DeltaChromaWeightL0_8;
		public unsafe byte* DeltaChromaWeightL0_9;
		public unsafe byte* DeltaChromaWeightL0_10;
		public unsafe byte* DeltaChromaWeightL0_11;
		public unsafe byte* DeltaChromaWeightL0_12;
		public unsafe byte* DeltaChromaWeightL0_13;
		public unsafe byte* DeltaChromaWeightL0_14;
		[NativeName(NativeNameType.Field, "delta_chroma_offset_l0")]
		[NativeName(NativeNameType.Type, "int8_t[2][15]")]
		public unsafe byte* DeltaChromaOffsetL0_0;
		public unsafe byte* DeltaChromaOffsetL0_1;
		public unsafe byte* DeltaChromaOffsetL0_2;
		public unsafe byte* DeltaChromaOffsetL0_3;
		public unsafe byte* DeltaChromaOffsetL0_4;
		public unsafe byte* DeltaChromaOffsetL0_5;
		public unsafe byte* DeltaChromaOffsetL0_6;
		public unsafe byte* DeltaChromaOffsetL0_7;
		public unsafe byte* DeltaChromaOffsetL0_8;
		public unsafe byte* DeltaChromaOffsetL0_9;
		public unsafe byte* DeltaChromaOffsetL0_10;
		public unsafe byte* DeltaChromaOffsetL0_11;
		public unsafe byte* DeltaChromaOffsetL0_12;
		public unsafe byte* DeltaChromaOffsetL0_13;
		public unsafe byte* DeltaChromaOffsetL0_14;
		[NativeName(NativeNameType.Field, "delta_luma_weight_l1")]
		[NativeName(NativeNameType.Type, "int8_t[15]")]
		public byte DeltaLumaWeightL1_0;
		public byte DeltaLumaWeightL1_1;
		public byte DeltaLumaWeightL1_2;
		public byte DeltaLumaWeightL1_3;
		public byte DeltaLumaWeightL1_4;
		public byte DeltaLumaWeightL1_5;
		public byte DeltaLumaWeightL1_6;
		public byte DeltaLumaWeightL1_7;
		public byte DeltaLumaWeightL1_8;
		public byte DeltaLumaWeightL1_9;
		public byte DeltaLumaWeightL1_10;
		public byte DeltaLumaWeightL1_11;
		public byte DeltaLumaWeightL1_12;
		public byte DeltaLumaWeightL1_13;
		public byte DeltaLumaWeightL1_14;
		[NativeName(NativeNameType.Field, "luma_offset_l1")]
		[NativeName(NativeNameType.Type, "int8_t[15]")]
		public byte LumaOffsetL1_0;
		public byte LumaOffsetL1_1;
		public byte LumaOffsetL1_2;
		public byte LumaOffsetL1_3;
		public byte LumaOffsetL1_4;
		public byte LumaOffsetL1_5;
		public byte LumaOffsetL1_6;
		public byte LumaOffsetL1_7;
		public byte LumaOffsetL1_8;
		public byte LumaOffsetL1_9;
		public byte LumaOffsetL1_10;
		public byte LumaOffsetL1_11;
		public byte LumaOffsetL1_12;
		public byte LumaOffsetL1_13;
		public byte LumaOffsetL1_14;
		[NativeName(NativeNameType.Field, "delta_chroma_weight_l1")]
		[NativeName(NativeNameType.Type, "int8_t[2][15]")]
		public unsafe byte* DeltaChromaWeightL1_0;
		public unsafe byte* DeltaChromaWeightL1_1;
		public unsafe byte* DeltaChromaWeightL1_2;
		public unsafe byte* DeltaChromaWeightL1_3;
		public unsafe byte* DeltaChromaWeightL1_4;
		public unsafe byte* DeltaChromaWeightL1_5;
		public unsafe byte* DeltaChromaWeightL1_6;
		public unsafe byte* DeltaChromaWeightL1_7;
		public unsafe byte* DeltaChromaWeightL1_8;
		public unsafe byte* DeltaChromaWeightL1_9;
		public unsafe byte* DeltaChromaWeightL1_10;
		public unsafe byte* DeltaChromaWeightL1_11;
		public unsafe byte* DeltaChromaWeightL1_12;
		public unsafe byte* DeltaChromaWeightL1_13;
		public unsafe byte* DeltaChromaWeightL1_14;
		[NativeName(NativeNameType.Field, "delta_chroma_offset_l1")]
		[NativeName(NativeNameType.Type, "int8_t[2][15]")]
		public unsafe byte* DeltaChromaOffsetL1_0;
		public unsafe byte* DeltaChromaOffsetL1_1;
		public unsafe byte* DeltaChromaOffsetL1_2;
		public unsafe byte* DeltaChromaOffsetL1_3;
		public unsafe byte* DeltaChromaOffsetL1_4;
		public unsafe byte* DeltaChromaOffsetL1_5;
		public unsafe byte* DeltaChromaOffsetL1_6;
		public unsafe byte* DeltaChromaOffsetL1_7;
		public unsafe byte* DeltaChromaOffsetL1_8;
		public unsafe byte* DeltaChromaOffsetL1_9;
		public unsafe byte* DeltaChromaOffsetL1_10;
		public unsafe byte* DeltaChromaOffsetL1_11;
		public unsafe byte* DeltaChromaOffsetL1_12;
		public unsafe byte* DeltaChromaOffsetL1_13;
		public unsafe byte* DeltaChromaOffsetL1_14;

		public unsafe StdVideoEncodeH265WeightTable(StdVideoEncodeH265WeightTableFlags flags = default, byte lumalog2WeightDenom = default, byte deltaChromalog2WeightDenom = default, byte* deltaLumaWeightl0 = default, byte* lumaOffsetl0 = default, byte** deltaChromaWeightl0 = default, byte** deltaChromaOffsetl0 = default, byte* deltaLumaWeightl1 = default, byte* lumaOffsetl1 = default, byte** deltaChromaWeightl1 = default, byte** deltaChromaOffsetl1 = default)
		{
			Flags = flags;
			LumaLog2WeightDenom = lumalog2WeightDenom;
			DeltaChromaLog2WeightDenom = deltaChromalog2WeightDenom;
			if (deltaLumaWeightl0 != default)
			{
				DeltaLumaWeightL0_0 = deltaLumaWeightl0[0];
				DeltaLumaWeightL0_1 = deltaLumaWeightl0[1];
				DeltaLumaWeightL0_2 = deltaLumaWeightl0[2];
				DeltaLumaWeightL0_3 = deltaLumaWeightl0[3];
				DeltaLumaWeightL0_4 = deltaLumaWeightl0[4];
				DeltaLumaWeightL0_5 = deltaLumaWeightl0[5];
				DeltaLumaWeightL0_6 = deltaLumaWeightl0[6];
				DeltaLumaWeightL0_7 = deltaLumaWeightl0[7];
				DeltaLumaWeightL0_8 = deltaLumaWeightl0[8];
				DeltaLumaWeightL0_9 = deltaLumaWeightl0[9];
				DeltaLumaWeightL0_10 = deltaLumaWeightl0[10];
				DeltaLumaWeightL0_11 = deltaLumaWeightl0[11];
				DeltaLumaWeightL0_12 = deltaLumaWeightl0[12];
				DeltaLumaWeightL0_13 = deltaLumaWeightl0[13];
				DeltaLumaWeightL0_14 = deltaLumaWeightl0[14];
			}
			if (lumaOffsetl0 != default)
			{
				LumaOffsetL0_0 = lumaOffsetl0[0];
				LumaOffsetL0_1 = lumaOffsetl0[1];
				LumaOffsetL0_2 = lumaOffsetl0[2];
				LumaOffsetL0_3 = lumaOffsetl0[3];
				LumaOffsetL0_4 = lumaOffsetl0[4];
				LumaOffsetL0_5 = lumaOffsetl0[5];
				LumaOffsetL0_6 = lumaOffsetl0[6];
				LumaOffsetL0_7 = lumaOffsetl0[7];
				LumaOffsetL0_8 = lumaOffsetl0[8];
				LumaOffsetL0_9 = lumaOffsetl0[9];
				LumaOffsetL0_10 = lumaOffsetl0[10];
				LumaOffsetL0_11 = lumaOffsetl0[11];
				LumaOffsetL0_12 = lumaOffsetl0[12];
				LumaOffsetL0_13 = lumaOffsetl0[13];
				LumaOffsetL0_14 = lumaOffsetl0[14];
			}
			if (deltaChromaWeightl0 != default)
			{
				DeltaChromaWeightL0_0 = deltaChromaWeightl0[0];
				DeltaChromaWeightL0_1 = deltaChromaWeightl0[1];
				DeltaChromaWeightL0_2 = deltaChromaWeightl0[2];
				DeltaChromaWeightL0_3 = deltaChromaWeightl0[3];
				DeltaChromaWeightL0_4 = deltaChromaWeightl0[4];
				DeltaChromaWeightL0_5 = deltaChromaWeightl0[5];
				DeltaChromaWeightL0_6 = deltaChromaWeightl0[6];
				DeltaChromaWeightL0_7 = deltaChromaWeightl0[7];
				DeltaChromaWeightL0_8 = deltaChromaWeightl0[8];
				DeltaChromaWeightL0_9 = deltaChromaWeightl0[9];
				DeltaChromaWeightL0_10 = deltaChromaWeightl0[10];
				DeltaChromaWeightL0_11 = deltaChromaWeightl0[11];
				DeltaChromaWeightL0_12 = deltaChromaWeightl0[12];
				DeltaChromaWeightL0_13 = deltaChromaWeightl0[13];
				DeltaChromaWeightL0_14 = deltaChromaWeightl0[14];
			}
			if (deltaChromaOffsetl0 != default)
			{
				DeltaChromaOffsetL0_0 = deltaChromaOffsetl0[0];
				DeltaChromaOffsetL0_1 = deltaChromaOffsetl0[1];
				DeltaChromaOffsetL0_2 = deltaChromaOffsetl0[2];
				DeltaChromaOffsetL0_3 = deltaChromaOffsetl0[3];
				DeltaChromaOffsetL0_4 = deltaChromaOffsetl0[4];
				DeltaChromaOffsetL0_5 = deltaChromaOffsetl0[5];
				DeltaChromaOffsetL0_6 = deltaChromaOffsetl0[6];
				DeltaChromaOffsetL0_7 = deltaChromaOffsetl0[7];
				DeltaChromaOffsetL0_8 = deltaChromaOffsetl0[8];
				DeltaChromaOffsetL0_9 = deltaChromaOffsetl0[9];
				DeltaChromaOffsetL0_10 = deltaChromaOffsetl0[10];
				DeltaChromaOffsetL0_11 = deltaChromaOffsetl0[11];
				DeltaChromaOffsetL0_12 = deltaChromaOffsetl0[12];
				DeltaChromaOffsetL0_13 = deltaChromaOffsetl0[13];
				DeltaChromaOffsetL0_14 = deltaChromaOffsetl0[14];
			}
			if (deltaLumaWeightl1 != default)
			{
				DeltaLumaWeightL1_0 = deltaLumaWeightl1[0];
				DeltaLumaWeightL1_1 = deltaLumaWeightl1[1];
				DeltaLumaWeightL1_2 = deltaLumaWeightl1[2];
				DeltaLumaWeightL1_3 = deltaLumaWeightl1[3];
				DeltaLumaWeightL1_4 = deltaLumaWeightl1[4];
				DeltaLumaWeightL1_5 = deltaLumaWeightl1[5];
				DeltaLumaWeightL1_6 = deltaLumaWeightl1[6];
				DeltaLumaWeightL1_7 = deltaLumaWeightl1[7];
				DeltaLumaWeightL1_8 = deltaLumaWeightl1[8];
				DeltaLumaWeightL1_9 = deltaLumaWeightl1[9];
				DeltaLumaWeightL1_10 = deltaLumaWeightl1[10];
				DeltaLumaWeightL1_11 = deltaLumaWeightl1[11];
				DeltaLumaWeightL1_12 = deltaLumaWeightl1[12];
				DeltaLumaWeightL1_13 = deltaLumaWeightl1[13];
				DeltaLumaWeightL1_14 = deltaLumaWeightl1[14];
			}
			if (lumaOffsetl1 != default)
			{
				LumaOffsetL1_0 = lumaOffsetl1[0];
				LumaOffsetL1_1 = lumaOffsetl1[1];
				LumaOffsetL1_2 = lumaOffsetl1[2];
				LumaOffsetL1_3 = lumaOffsetl1[3];
				LumaOffsetL1_4 = lumaOffsetl1[4];
				LumaOffsetL1_5 = lumaOffsetl1[5];
				LumaOffsetL1_6 = lumaOffsetl1[6];
				LumaOffsetL1_7 = lumaOffsetl1[7];
				LumaOffsetL1_8 = lumaOffsetl1[8];
				LumaOffsetL1_9 = lumaOffsetl1[9];
				LumaOffsetL1_10 = lumaOffsetl1[10];
				LumaOffsetL1_11 = lumaOffsetl1[11];
				LumaOffsetL1_12 = lumaOffsetl1[12];
				LumaOffsetL1_13 = lumaOffsetl1[13];
				LumaOffsetL1_14 = lumaOffsetl1[14];
			}
			if (deltaChromaWeightl1 != default)
			{
				DeltaChromaWeightL1_0 = deltaChromaWeightl1[0];
				DeltaChromaWeightL1_1 = deltaChromaWeightl1[1];
				DeltaChromaWeightL1_2 = deltaChromaWeightl1[2];
				DeltaChromaWeightL1_3 = deltaChromaWeightl1[3];
				DeltaChromaWeightL1_4 = deltaChromaWeightl1[4];
				DeltaChromaWeightL1_5 = deltaChromaWeightl1[5];
				DeltaChromaWeightL1_6 = deltaChromaWeightl1[6];
				DeltaChromaWeightL1_7 = deltaChromaWeightl1[7];
				DeltaChromaWeightL1_8 = deltaChromaWeightl1[8];
				DeltaChromaWeightL1_9 = deltaChromaWeightl1[9];
				DeltaChromaWeightL1_10 = deltaChromaWeightl1[10];
				DeltaChromaWeightL1_11 = deltaChromaWeightl1[11];
				DeltaChromaWeightL1_12 = deltaChromaWeightl1[12];
				DeltaChromaWeightL1_13 = deltaChromaWeightl1[13];
				DeltaChromaWeightL1_14 = deltaChromaWeightl1[14];
			}
			if (deltaChromaOffsetl1 != default)
			{
				DeltaChromaOffsetL1_0 = deltaChromaOffsetl1[0];
				DeltaChromaOffsetL1_1 = deltaChromaOffsetl1[1];
				DeltaChromaOffsetL1_2 = deltaChromaOffsetl1[2];
				DeltaChromaOffsetL1_3 = deltaChromaOffsetl1[3];
				DeltaChromaOffsetL1_4 = deltaChromaOffsetl1[4];
				DeltaChromaOffsetL1_5 = deltaChromaOffsetl1[5];
				DeltaChromaOffsetL1_6 = deltaChromaOffsetl1[6];
				DeltaChromaOffsetL1_7 = deltaChromaOffsetl1[7];
				DeltaChromaOffsetL1_8 = deltaChromaOffsetl1[8];
				DeltaChromaOffsetL1_9 = deltaChromaOffsetl1[9];
				DeltaChromaOffsetL1_10 = deltaChromaOffsetl1[10];
				DeltaChromaOffsetL1_11 = deltaChromaOffsetl1[11];
				DeltaChromaOffsetL1_12 = deltaChromaOffsetl1[12];
				DeltaChromaOffsetL1_13 = deltaChromaOffsetl1[13];
				DeltaChromaOffsetL1_14 = deltaChromaOffsetl1[14];
			}
		}

		public unsafe StdVideoEncodeH265WeightTable(StdVideoEncodeH265WeightTableFlags flags = default, byte lumalog2WeightDenom = default, byte deltaChromalog2WeightDenom = default, Span<byte> deltaLumaWeightl0 = default, Span<byte> lumaOffsetl0 = default, Span<Pointer<byte>> deltaChromaWeightl0 = default, Span<Pointer<byte>> deltaChromaOffsetl0 = default, Span<byte> deltaLumaWeightl1 = default, Span<byte> lumaOffsetl1 = default, Span<Pointer<byte>> deltaChromaWeightl1 = default, Span<Pointer<byte>> deltaChromaOffsetl1 = default)
		{
			Flags = flags;
			LumaLog2WeightDenom = lumalog2WeightDenom;
			DeltaChromaLog2WeightDenom = deltaChromalog2WeightDenom;
			if (deltaLumaWeightl0 != default)
			{
				DeltaLumaWeightL0_0 = deltaLumaWeightl0[0];
				DeltaLumaWeightL0_1 = deltaLumaWeightl0[1];
				DeltaLumaWeightL0_2 = deltaLumaWeightl0[2];
				DeltaLumaWeightL0_3 = deltaLumaWeightl0[3];
				DeltaLumaWeightL0_4 = deltaLumaWeightl0[4];
				DeltaLumaWeightL0_5 = deltaLumaWeightl0[5];
				DeltaLumaWeightL0_6 = deltaLumaWeightl0[6];
				DeltaLumaWeightL0_7 = deltaLumaWeightl0[7];
				DeltaLumaWeightL0_8 = deltaLumaWeightl0[8];
				DeltaLumaWeightL0_9 = deltaLumaWeightl0[9];
				DeltaLumaWeightL0_10 = deltaLumaWeightl0[10];
				DeltaLumaWeightL0_11 = deltaLumaWeightl0[11];
				DeltaLumaWeightL0_12 = deltaLumaWeightl0[12];
				DeltaLumaWeightL0_13 = deltaLumaWeightl0[13];
				DeltaLumaWeightL0_14 = deltaLumaWeightl0[14];
			}
			if (lumaOffsetl0 != default)
			{
				LumaOffsetL0_0 = lumaOffsetl0[0];
				LumaOffsetL0_1 = lumaOffsetl0[1];
				LumaOffsetL0_2 = lumaOffsetl0[2];
				LumaOffsetL0_3 = lumaOffsetl0[3];
				LumaOffsetL0_4 = lumaOffsetl0[4];
				LumaOffsetL0_5 = lumaOffsetl0[5];
				LumaOffsetL0_6 = lumaOffsetl0[6];
				LumaOffsetL0_7 = lumaOffsetl0[7];
				LumaOffsetL0_8 = lumaOffsetl0[8];
				LumaOffsetL0_9 = lumaOffsetl0[9];
				LumaOffsetL0_10 = lumaOffsetl0[10];
				LumaOffsetL0_11 = lumaOffsetl0[11];
				LumaOffsetL0_12 = lumaOffsetl0[12];
				LumaOffsetL0_13 = lumaOffsetl0[13];
				LumaOffsetL0_14 = lumaOffsetl0[14];
			}
			if (deltaChromaWeightl0 != default)
			{
				DeltaChromaWeightL0_0 = deltaChromaWeightl0[0];
				DeltaChromaWeightL0_1 = deltaChromaWeightl0[1];
				DeltaChromaWeightL0_2 = deltaChromaWeightl0[2];
				DeltaChromaWeightL0_3 = deltaChromaWeightl0[3];
				DeltaChromaWeightL0_4 = deltaChromaWeightl0[4];
				DeltaChromaWeightL0_5 = deltaChromaWeightl0[5];
				DeltaChromaWeightL0_6 = deltaChromaWeightl0[6];
				DeltaChromaWeightL0_7 = deltaChromaWeightl0[7];
				DeltaChromaWeightL0_8 = deltaChromaWeightl0[8];
				DeltaChromaWeightL0_9 = deltaChromaWeightl0[9];
				DeltaChromaWeightL0_10 = deltaChromaWeightl0[10];
				DeltaChromaWeightL0_11 = deltaChromaWeightl0[11];
				DeltaChromaWeightL0_12 = deltaChromaWeightl0[12];
				DeltaChromaWeightL0_13 = deltaChromaWeightl0[13];
				DeltaChromaWeightL0_14 = deltaChromaWeightl0[14];
			}
			if (deltaChromaOffsetl0 != default)
			{
				DeltaChromaOffsetL0_0 = deltaChromaOffsetl0[0];
				DeltaChromaOffsetL0_1 = deltaChromaOffsetl0[1];
				DeltaChromaOffsetL0_2 = deltaChromaOffsetl0[2];
				DeltaChromaOffsetL0_3 = deltaChromaOffsetl0[3];
				DeltaChromaOffsetL0_4 = deltaChromaOffsetl0[4];
				DeltaChromaOffsetL0_5 = deltaChromaOffsetl0[5];
				DeltaChromaOffsetL0_6 = deltaChromaOffsetl0[6];
				DeltaChromaOffsetL0_7 = deltaChromaOffsetl0[7];
				DeltaChromaOffsetL0_8 = deltaChromaOffsetl0[8];
				DeltaChromaOffsetL0_9 = deltaChromaOffsetl0[9];
				DeltaChromaOffsetL0_10 = deltaChromaOffsetl0[10];
				DeltaChromaOffsetL0_11 = deltaChromaOffsetl0[11];
				DeltaChromaOffsetL0_12 = deltaChromaOffsetl0[12];
				DeltaChromaOffsetL0_13 = deltaChromaOffsetl0[13];
				DeltaChromaOffsetL0_14 = deltaChromaOffsetl0[14];
			}
			if (deltaLumaWeightl1 != default)
			{
				DeltaLumaWeightL1_0 = deltaLumaWeightl1[0];
				DeltaLumaWeightL1_1 = deltaLumaWeightl1[1];
				DeltaLumaWeightL1_2 = deltaLumaWeightl1[2];
				DeltaLumaWeightL1_3 = deltaLumaWeightl1[3];
				DeltaLumaWeightL1_4 = deltaLumaWeightl1[4];
				DeltaLumaWeightL1_5 = deltaLumaWeightl1[5];
				DeltaLumaWeightL1_6 = deltaLumaWeightl1[6];
				DeltaLumaWeightL1_7 = deltaLumaWeightl1[7];
				DeltaLumaWeightL1_8 = deltaLumaWeightl1[8];
				DeltaLumaWeightL1_9 = deltaLumaWeightl1[9];
				DeltaLumaWeightL1_10 = deltaLumaWeightl1[10];
				DeltaLumaWeightL1_11 = deltaLumaWeightl1[11];
				DeltaLumaWeightL1_12 = deltaLumaWeightl1[12];
				DeltaLumaWeightL1_13 = deltaLumaWeightl1[13];
				DeltaLumaWeightL1_14 = deltaLumaWeightl1[14];
			}
			if (lumaOffsetl1 != default)
			{
				LumaOffsetL1_0 = lumaOffsetl1[0];
				LumaOffsetL1_1 = lumaOffsetl1[1];
				LumaOffsetL1_2 = lumaOffsetl1[2];
				LumaOffsetL1_3 = lumaOffsetl1[3];
				LumaOffsetL1_4 = lumaOffsetl1[4];
				LumaOffsetL1_5 = lumaOffsetl1[5];
				LumaOffsetL1_6 = lumaOffsetl1[6];
				LumaOffsetL1_7 = lumaOffsetl1[7];
				LumaOffsetL1_8 = lumaOffsetl1[8];
				LumaOffsetL1_9 = lumaOffsetl1[9];
				LumaOffsetL1_10 = lumaOffsetl1[10];
				LumaOffsetL1_11 = lumaOffsetl1[11];
				LumaOffsetL1_12 = lumaOffsetl1[12];
				LumaOffsetL1_13 = lumaOffsetl1[13];
				LumaOffsetL1_14 = lumaOffsetl1[14];
			}
			if (deltaChromaWeightl1 != default)
			{
				DeltaChromaWeightL1_0 = deltaChromaWeightl1[0];
				DeltaChromaWeightL1_1 = deltaChromaWeightl1[1];
				DeltaChromaWeightL1_2 = deltaChromaWeightl1[2];
				DeltaChromaWeightL1_3 = deltaChromaWeightl1[3];
				DeltaChromaWeightL1_4 = deltaChromaWeightl1[4];
				DeltaChromaWeightL1_5 = deltaChromaWeightl1[5];
				DeltaChromaWeightL1_6 = deltaChromaWeightl1[6];
				DeltaChromaWeightL1_7 = deltaChromaWeightl1[7];
				DeltaChromaWeightL1_8 = deltaChromaWeightl1[8];
				DeltaChromaWeightL1_9 = deltaChromaWeightl1[9];
				DeltaChromaWeightL1_10 = deltaChromaWeightl1[10];
				DeltaChromaWeightL1_11 = deltaChromaWeightl1[11];
				DeltaChromaWeightL1_12 = deltaChromaWeightl1[12];
				DeltaChromaWeightL1_13 = deltaChromaWeightl1[13];
				DeltaChromaWeightL1_14 = deltaChromaWeightl1[14];
			}
			if (deltaChromaOffsetl1 != default)
			{
				DeltaChromaOffsetL1_0 = deltaChromaOffsetl1[0];
				DeltaChromaOffsetL1_1 = deltaChromaOffsetl1[1];
				DeltaChromaOffsetL1_2 = deltaChromaOffsetl1[2];
				DeltaChromaOffsetL1_3 = deltaChromaOffsetl1[3];
				DeltaChromaOffsetL1_4 = deltaChromaOffsetl1[4];
				DeltaChromaOffsetL1_5 = deltaChromaOffsetl1[5];
				DeltaChromaOffsetL1_6 = deltaChromaOffsetl1[6];
				DeltaChromaOffsetL1_7 = deltaChromaOffsetl1[7];
				DeltaChromaOffsetL1_8 = deltaChromaOffsetl1[8];
				DeltaChromaOffsetL1_9 = deltaChromaOffsetl1[9];
				DeltaChromaOffsetL1_10 = deltaChromaOffsetl1[10];
				DeltaChromaOffsetL1_11 = deltaChromaOffsetl1[11];
				DeltaChromaOffsetL1_12 = deltaChromaOffsetl1[12];
				DeltaChromaOffsetL1_13 = deltaChromaOffsetl1[13];
				DeltaChromaOffsetL1_14 = deltaChromaOffsetl1[14];
			}
		}


	}
}
