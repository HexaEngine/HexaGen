// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.Vulkan
{

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH265WeightTableFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH265WeightTableFlags
	{
		[NativeName(NativeNameType.Field, "luma_weight_l0_flag")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort LumaWeightL0Flag;
		[NativeName(NativeNameType.Field, "chroma_weight_l0_flag")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort ChromaWeightL0Flag;
		[NativeName(NativeNameType.Field, "luma_weight_l1_flag")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort LumaWeightL1Flag;
		[NativeName(NativeNameType.Field, "chroma_weight_l1_flag")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort ChromaWeightL1Flag;

		public unsafe StdVideoEncodeH265WeightTableFlags(ushort lumaWeightl0Flag = default, ushort chromaWeightl0Flag = default, ushort lumaWeightl1Flag = default, ushort chromaWeightl1Flag = default)
		{
			LumaWeightL0Flag = lumaWeightl0Flag;
			ChromaWeightL0Flag = chromaWeightl0Flag;
			LumaWeightL1Flag = lumaWeightl1Flag;
			ChromaWeightL1Flag = chromaWeightl1Flag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH265WeightTable")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH265WeightTable
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoEncodeH265WeightTableFlags")]
		public StdVideoEncodeH265WeightTableFlags Flags;
		[NativeName(NativeNameType.Field, "luma_log2_weight_denom")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte LumaLog2WeightDenom;
		[NativeName(NativeNameType.Field, "delta_chroma_log2_weight_denom")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte DeltaChromaLog2WeightDenom;
		[NativeName(NativeNameType.Field, "delta_luma_weight_l0")]
		[NativeName(NativeNameType.Type, "int8_t[15]")]
		public byte DeltaLumaWeightL0_0;
		public byte DeltaLumaWeightL0_1;
		public byte DeltaLumaWeightL0_2;
		public byte DeltaLumaWeightL0_3;
		public byte DeltaLumaWeightL0_4;
		public byte DeltaLumaWeightL0_5;
		public byte DeltaLumaWeightL0_6;
		public byte DeltaLumaWeightL0_7;
		public byte DeltaLumaWeightL0_8;
		public byte DeltaLumaWeightL0_9;
		public byte DeltaLumaWeightL0_10;
		public byte DeltaLumaWeightL0_11;
		public byte DeltaLumaWeightL0_12;
		public byte DeltaLumaWeightL0_13;
		public byte DeltaLumaWeightL0_14;
		[NativeName(NativeNameType.Field, "luma_offset_l0")]
		[NativeName(NativeNameType.Type, "int8_t[15]")]
		public byte LumaOffsetL0_0;
		public byte LumaOffsetL0_1;
		public byte LumaOffsetL0_2;
		public byte LumaOffsetL0_3;
		public byte LumaOffsetL0_4;
		public byte LumaOffsetL0_5;
		public byte LumaOffsetL0_6;
		public byte LumaOffsetL0_7;
		public byte LumaOffsetL0_8;
		public byte LumaOffsetL0_9;
		public byte LumaOffsetL0_10;
		public byte LumaOffsetL0_11;
		public byte LumaOffsetL0_12;
		public byte LumaOffsetL0_13;
		public byte LumaOffsetL0_14;
		[NativeName(NativeNameType.Field, "delta_chroma_weight_l0")]
		[NativeName(NativeNameType.Type, "int8_t[2][15]")]
		public unsafe byte* DeltaChromaWeightL0_0;
		public unsafe byte* DeltaChromaWeightL0_1;
		public unsafe byte* DeltaChromaWeightL0_2;
		public unsafe byte* DeltaChromaWeightL0_3;
		public unsafe byte* DeltaChromaWeightL0_4;
		public unsafe byte* DeltaChromaWeightL0_5;
		public unsafe byte* DeltaChromaWeightL0_6;
		public unsafe byte* DeltaChromaWeightL0_7;
		public unsafe byte* DeltaChromaWeightL0_8;
		public unsafe byte* DeltaChromaWeightL0_9;
		public unsafe byte* DeltaChromaWeightL0_10;
		public unsafe byte* DeltaChromaWeightL0_11;
		public unsafe byte* DeltaChromaWeightL0_12;
		public unsafe byte* DeltaChromaWeightL0_13;
		public unsafe byte* DeltaChromaWeightL0_14;
		[NativeName(NativeNameType.Field, "delta_chroma_offset_l0")]
		[NativeName(NativeNameType.Type, "int8_t[2][15]")]
		public unsafe byte* DeltaChromaOffsetL0_0;
		public unsafe byte* DeltaChromaOffsetL0_1;
		public unsafe byte* DeltaChromaOffsetL0_2;
		public unsafe byte* DeltaChromaOffsetL0_3;
		public unsafe byte* DeltaChromaOffsetL0_4;
		public unsafe byte* DeltaChromaOffsetL0_5;
		public unsafe byte* DeltaChromaOffsetL0_6;
		public unsafe byte* DeltaChromaOffsetL0_7;
		public unsafe byte* DeltaChromaOffsetL0_8;
		public unsafe byte* DeltaChromaOffsetL0_9;
		public unsafe byte* DeltaChromaOffsetL0_10;
		public unsafe byte* DeltaChromaOffsetL0_11;
		public unsafe byte* DeltaChromaOffsetL0_12;
		public unsafe byte* DeltaChromaOffsetL0_13;
		public unsafe byte* DeltaChromaOffsetL0_14;
		[NativeName(NativeNameType.Field, "delta_luma_weight_l1")]
		[NativeName(NativeNameType.Type, "int8_t[15]")]
		public byte DeltaLumaWeightL1_0;
		public byte DeltaLumaWeightL1_1;
		public byte DeltaLumaWeightL1_2;
		public byte DeltaLumaWeightL1_3;
		public byte DeltaLumaWeightL1_4;
		public byte DeltaLumaWeightL1_5;
		public byte DeltaLumaWeightL1_6;
		public byte DeltaLumaWeightL1_7;
		public byte DeltaLumaWeightL1_8;
		public byte DeltaLumaWeightL1_9;
		public byte DeltaLumaWeightL1_10;
		public byte DeltaLumaWeightL1_11;
		public byte DeltaLumaWeightL1_12;
		public byte DeltaLumaWeightL1_13;
		public byte DeltaLumaWeightL1_14;
		[NativeName(NativeNameType.Field, "luma_offset_l1")]
		[NativeName(NativeNameType.Type, "int8_t[15]")]
		public byte LumaOffsetL1_0;
		public byte LumaOffsetL1_1;
		public byte LumaOffsetL1_2;
		public byte LumaOffsetL1_3;
		public byte LumaOffsetL1_4;
		public byte LumaOffsetL1_5;
		public byte LumaOffsetL1_6;
		public byte LumaOffsetL1_7;
		public byte LumaOffsetL1_8;
		public byte LumaOffsetL1_9;
		public byte LumaOffsetL1_10;
		public byte LumaOffsetL1_11;
		public byte LumaOffsetL1_12;
		public byte LumaOffsetL1_13;
		public byte LumaOffsetL1_14;
		[NativeName(NativeNameType.Field, "delta_chroma_weight_l1")]
		[NativeName(NativeNameType.Type, "int8_t[2][15]")]
		public unsafe byte* DeltaChromaWeightL1_0;
		public unsafe byte* DeltaChromaWeightL1_1;
		public unsafe byte* DeltaChromaWeightL1_2;
		public unsafe byte* DeltaChromaWeightL1_3;
		public unsafe byte* DeltaChromaWeightL1_4;
		public unsafe byte* DeltaChromaWeightL1_5;
		public unsafe byte* DeltaChromaWeightL1_6;
		public unsafe byte* DeltaChromaWeightL1_7;
		public unsafe byte* DeltaChromaWeightL1_8;
		public unsafe byte* DeltaChromaWeightL1_9;
		public unsafe byte* DeltaChromaWeightL1_10;
		public unsafe byte* DeltaChromaWeightL1_11;
		public unsafe byte* DeltaChromaWeightL1_12;
		public unsafe byte* DeltaChromaWeightL1_13;
		public unsafe byte* DeltaChromaWeightL1_14;
		[NativeName(NativeNameType.Field, "delta_chroma_offset_l1")]
		[NativeName(NativeNameType.Type, "int8_t[2][15]")]
		public unsafe byte* DeltaChromaOffsetL1_0;
		public unsafe byte* DeltaChromaOffsetL1_1;
		public unsafe byte* DeltaChromaOffsetL1_2;
		public unsafe byte* DeltaChromaOffsetL1_3;
		public unsafe byte* DeltaChromaOffsetL1_4;
		public unsafe byte* DeltaChromaOffsetL1_5;
		public unsafe byte* DeltaChromaOffsetL1_6;
		public unsafe byte* DeltaChromaOffsetL1_7;
		public unsafe byte* DeltaChromaOffsetL1_8;
		public unsafe byte* DeltaChromaOffsetL1_9;
		public unsafe byte* DeltaChromaOffsetL1_10;
		public unsafe byte* DeltaChromaOffsetL1_11;
		public unsafe byte* DeltaChromaOffsetL1_12;
		public unsafe byte* DeltaChromaOffsetL1_13;
		public unsafe byte* DeltaChromaOffsetL1_14;

		public unsafe StdVideoEncodeH265WeightTable(StdVideoEncodeH265WeightTableFlags flags = default, byte lumalog2WeightDenom = default, byte deltaChromalog2WeightDenom = default, byte* deltaLumaWeightl0 = default, byte* lumaOffsetl0 = default, byte** deltaChromaWeightl0 = default, byte** deltaChromaOffsetl0 = default, byte* deltaLumaWeightl1 = default, byte* lumaOffsetl1 = default, byte** deltaChromaWeightl1 = default, byte** deltaChromaOffsetl1 = default)
		{
			Flags = flags;
			LumaLog2WeightDenom = lumalog2WeightDenom;
			DeltaChromaLog2WeightDenom = deltaChromalog2WeightDenom;
			if (deltaLumaWeightl0 != default)
			{
				DeltaLumaWeightL0_0 = deltaLumaWeightl0[0];
				DeltaLumaWeightL0_1 = deltaLumaWeightl0[1];
				DeltaLumaWeightL0_2 = deltaLumaWeightl0[2];
				DeltaLumaWeightL0_3 = deltaLumaWeightl0[3];
				DeltaLumaWeightL0_4 = deltaLumaWeightl0[4];
				DeltaLumaWeightL0_5 = deltaLumaWeightl0[5];
				DeltaLumaWeightL0_6 = deltaLumaWeightl0[6];
				DeltaLumaWeightL0_7 = deltaLumaWeightl0[7];
				DeltaLumaWeightL0_8 = deltaLumaWeightl0[8];
				DeltaLumaWeightL0_9 = deltaLumaWeightl0[9];
				DeltaLumaWeightL0_10 = deltaLumaWeightl0[10];
				DeltaLumaWeightL0_11 = deltaLumaWeightl0[11];
				DeltaLumaWeightL0_12 = deltaLumaWeightl0[12];
				DeltaLumaWeightL0_13 = deltaLumaWeightl0[13];
				DeltaLumaWeightL0_14 = deltaLumaWeightl0[14];
			}
			if (lumaOffsetl0 != default)
			{
				LumaOffsetL0_0 = lumaOffsetl0[0];
				LumaOffsetL0_1 = lumaOffsetl0[1];
				LumaOffsetL0_2 = lumaOffsetl0[2];
				LumaOffsetL0_3 = lumaOffsetl0[3];
				LumaOffsetL0_4 = lumaOffsetl0[4];
				LumaOffsetL0_5 = lumaOffsetl0[5];
				LumaOffsetL0_6 = lumaOffsetl0[6];
				LumaOffsetL0_7 = lumaOffsetl0[7];
				LumaOffsetL0_8 = lumaOffsetl0[8];
				LumaOffsetL0_9 = lumaOffsetl0[9];
				LumaOffsetL0_10 = lumaOffsetl0[10];
				LumaOffsetL0_11 = lumaOffsetl0[11];
				LumaOffsetL0_12 = lumaOffsetl0[12];
				LumaOffsetL0_13 = lumaOffsetl0[13];
				LumaOffsetL0_14 = lumaOffsetl0[14];
			}
			if (deltaChromaWeightl0 != default)
			{
				DeltaChromaWeightL0_0 = deltaChromaWeightl0[0];
				DeltaChromaWeightL0_1 = deltaChromaWeightl0[1];
				DeltaChromaWeightL0_2 = deltaChromaWeightl0[2];
				DeltaChromaWeightL0_3 = deltaChromaWeightl0[3];
				DeltaChromaWeightL0_4 = deltaChromaWeightl0[4];
				DeltaChromaWeightL0_5 = deltaChromaWeightl0[5];
				DeltaChromaWeightL0_6 = deltaChromaWeightl0[6];
				DeltaChromaWeightL0_7 = deltaChromaWeightl0[7];
				DeltaChromaWeightL0_8 = deltaChromaWeightl0[8];
				DeltaChromaWeightL0_9 = deltaChromaWeightl0[9];
				DeltaChromaWeightL0_10 = deltaChromaWeightl0[10];
				DeltaChromaWeightL0_11 = deltaChromaWeightl0[11];
				DeltaChromaWeightL0_12 = deltaChromaWeightl0[12];
				DeltaChromaWeightL0_13 = deltaChromaWeightl0[13];
				DeltaChromaWeightL0_14 = deltaChromaWeightl0[14];
			}
			if (deltaChromaOffsetl0 != default)
			{
				DeltaChromaOffsetL0_0 = deltaChromaOffsetl0[0];
				DeltaChromaOffsetL0_1 = deltaChromaOffsetl0[1];
				DeltaChromaOffsetL0_2 = deltaChromaOffsetl0[2];
				DeltaChromaOffsetL0_3 = deltaChromaOffsetl0[3];
				DeltaChromaOffsetL0_4 = deltaChromaOffsetl0[4];
				DeltaChromaOffsetL0_5 = deltaChromaOffsetl0[5];
				DeltaChromaOffsetL0_6 = deltaChromaOffsetl0[6];
				DeltaChromaOffsetL0_7 = deltaChromaOffsetl0[7];
				DeltaChromaOffsetL0_8 = deltaChromaOffsetl0[8];
				DeltaChromaOffsetL0_9 = deltaChromaOffsetl0[9];
				DeltaChromaOffsetL0_10 = deltaChromaOffsetl0[10];
				DeltaChromaOffsetL0_11 = deltaChromaOffsetl0[11];
				DeltaChromaOffsetL0_12 = deltaChromaOffsetl0[12];
				DeltaChromaOffsetL0_13 = deltaChromaOffsetl0[13];
				DeltaChromaOffsetL0_14 = deltaChromaOffsetl0[14];
			}
			if (deltaLumaWeightl1 != default)
			{
				DeltaLumaWeightL1_0 = deltaLumaWeightl1[0];
				DeltaLumaWeightL1_1 = deltaLumaWeightl1[1];
				DeltaLumaWeightL1_2 = deltaLumaWeightl1[2];
				DeltaLumaWeightL1_3 = deltaLumaWeightl1[3];
				DeltaLumaWeightL1_4 = deltaLumaWeightl1[4];
				DeltaLumaWeightL1_5 = deltaLumaWeightl1[5];
				DeltaLumaWeightL1_6 = deltaLumaWeightl1[6];
				DeltaLumaWeightL1_7 = deltaLumaWeightl1[7];
				DeltaLumaWeightL1_8 = deltaLumaWeightl1[8];
				DeltaLumaWeightL1_9 = deltaLumaWeightl1[9];
				DeltaLumaWeightL1_10 = deltaLumaWeightl1[10];
				DeltaLumaWeightL1_11 = deltaLumaWeightl1[11];
				DeltaLumaWeightL1_12 = deltaLumaWeightl1[12];
				DeltaLumaWeightL1_13 = deltaLumaWeightl1[13];
				DeltaLumaWeightL1_14 = deltaLumaWeightl1[14];
			}
			if (lumaOffsetl1 != default)
			{
				LumaOffsetL1_0 = lumaOffsetl1[0];
				LumaOffsetL1_1 = lumaOffsetl1[1];
				LumaOffsetL1_2 = lumaOffsetl1[2];
				LumaOffsetL1_3 = lumaOffsetl1[3];
				LumaOffsetL1_4 = lumaOffsetl1[4];
				LumaOffsetL1_5 = lumaOffsetl1[5];
				LumaOffsetL1_6 = lumaOffsetl1[6];
				LumaOffsetL1_7 = lumaOffsetl1[7];
				LumaOffsetL1_8 = lumaOffsetl1[8];
				LumaOffsetL1_9 = lumaOffsetl1[9];
				LumaOffsetL1_10 = lumaOffsetl1[10];
				LumaOffsetL1_11 = lumaOffsetl1[11];
				LumaOffsetL1_12 = lumaOffsetl1[12];
				LumaOffsetL1_13 = lumaOffsetl1[13];
				LumaOffsetL1_14 = lumaOffsetl1[14];
			}
			if (deltaChromaWeightl1 != default)
			{
				DeltaChromaWeightL1_0 = deltaChromaWeightl1[0];
				DeltaChromaWeightL1_1 = deltaChromaWeightl1[1];
				DeltaChromaWeightL1_2 = deltaChromaWeightl1[2];
				DeltaChromaWeightL1_3 = deltaChromaWeightl1[3];
				DeltaChromaWeightL1_4 = deltaChromaWeightl1[4];
				DeltaChromaWeightL1_5 = deltaChromaWeightl1[5];
				DeltaChromaWeightL1_6 = deltaChromaWeightl1[6];
				DeltaChromaWeightL1_7 = deltaChromaWeightl1[7];
				DeltaChromaWeightL1_8 = deltaChromaWeightl1[8];
				DeltaChromaWeightL1_9 = deltaChromaWeightl1[9];
				DeltaChromaWeightL1_10 = deltaChromaWeightl1[10];
				DeltaChromaWeightL1_11 = deltaChromaWeightl1[11];
				DeltaChromaWeightL1_12 = deltaChromaWeightl1[12];
				DeltaChromaWeightL1_13 = deltaChromaWeightl1[13];
				DeltaChromaWeightL1_14 = deltaChromaWeightl1[14];
			}
			if (deltaChromaOffsetl1 != default)
			{
				DeltaChromaOffsetL1_0 = deltaChromaOffsetl1[0];
				DeltaChromaOffsetL1_1 = deltaChromaOffsetl1[1];
				DeltaChromaOffsetL1_2 = deltaChromaOffsetl1[2];
				DeltaChromaOffsetL1_3 = deltaChromaOffsetl1[3];
				DeltaChromaOffsetL1_4 = deltaChromaOffsetl1[4];
				DeltaChromaOffsetL1_5 = deltaChromaOffsetl1[5];
				DeltaChromaOffsetL1_6 = deltaChromaOffsetl1[6];
				DeltaChromaOffsetL1_7 = deltaChromaOffsetl1[7];
				DeltaChromaOffsetL1_8 = deltaChromaOffsetl1[8];
				DeltaChromaOffsetL1_9 = deltaChromaOffsetl1[9];
				DeltaChromaOffsetL1_10 = deltaChromaOffsetl1[10];
				DeltaChromaOffsetL1_11 = deltaChromaOffsetl1[11];
				DeltaChromaOffsetL1_12 = deltaChromaOffsetl1[12];
				DeltaChromaOffsetL1_13 = deltaChromaOffsetl1[13];
				DeltaChromaOffsetL1_14 = deltaChromaOffsetl1[14];
			}
		}

		public unsafe StdVideoEncodeH265WeightTable(StdVideoEncodeH265WeightTableFlags flags = default, byte lumalog2WeightDenom = default, byte deltaChromalog2WeightDenom = default, Span<byte> deltaLumaWeightl0 = default, Span<byte> lumaOffsetl0 = default, Span<Pointer<byte>> deltaChromaWeightl0 = default, Span<Pointer<byte>> deltaChromaOffsetl0 = default, Span<byte> deltaLumaWeightl1 = default, Span<byte> lumaOffsetl1 = default, Span<Pointer<byte>> deltaChromaWeightl1 = default, Span<Pointer<byte>> deltaChromaOffsetl1 = default)
		{
			Flags = flags;
			LumaLog2WeightDenom = lumalog2WeightDenom;
			DeltaChromaLog2WeightDenom = deltaChromalog2WeightDenom;
			if (deltaLumaWeightl0 != default)
			{
				DeltaLumaWeightL0_0 = deltaLumaWeightl0[0];
				DeltaLumaWeightL0_1 = deltaLumaWeightl0[1];
				DeltaLumaWeightL0_2 = deltaLumaWeightl0[2];
				DeltaLumaWeightL0_3 = deltaLumaWeightl0[3];
				DeltaLumaWeightL0_4 = deltaLumaWeightl0[4];
				DeltaLumaWeightL0_5 = deltaLumaWeightl0[5];
				DeltaLumaWeightL0_6 = deltaLumaWeightl0[6];
				DeltaLumaWeightL0_7 = deltaLumaWeightl0[7];
				DeltaLumaWeightL0_8 = deltaLumaWeightl0[8];
				DeltaLumaWeightL0_9 = deltaLumaWeightl0[9];
				DeltaLumaWeightL0_10 = deltaLumaWeightl0[10];
				DeltaLumaWeightL0_11 = deltaLumaWeightl0[11];
				DeltaLumaWeightL0_12 = deltaLumaWeightl0[12];
				DeltaLumaWeightL0_13 = deltaLumaWeightl0[13];
				DeltaLumaWeightL0_14 = deltaLumaWeightl0[14];
			}
			if (lumaOffsetl0 != default)
			{
				LumaOffsetL0_0 = lumaOffsetl0[0];
				LumaOffsetL0_1 = lumaOffsetl0[1];
				LumaOffsetL0_2 = lumaOffsetl0[2];
				LumaOffsetL0_3 = lumaOffsetl0[3];
				LumaOffsetL0_4 = lumaOffsetl0[4];
				LumaOffsetL0_5 = lumaOffsetl0[5];
				LumaOffsetL0_6 = lumaOffsetl0[6];
				LumaOffsetL0_7 = lumaOffsetl0[7];
				LumaOffsetL0_8 = lumaOffsetl0[8];
				LumaOffsetL0_9 = lumaOffsetl0[9];
				LumaOffsetL0_10 = lumaOffsetl0[10];
				LumaOffsetL0_11 = lumaOffsetl0[11];
				LumaOffsetL0_12 = lumaOffsetl0[12];
				LumaOffsetL0_13 = lumaOffsetl0[13];
				LumaOffsetL0_14 = lumaOffsetl0[14];
			}
			if (deltaChromaWeightl0 != default)
			{
				DeltaChromaWeightL0_0 = deltaChromaWeightl0[0];
				DeltaChromaWeightL0_1 = deltaChromaWeightl0[1];
				DeltaChromaWeightL0_2 = deltaChromaWeightl0[2];
				DeltaChromaWeightL0_3 = deltaChromaWeightl0[3];
				DeltaChromaWeightL0_4 = deltaChromaWeightl0[4];
				DeltaChromaWeightL0_5 = deltaChromaWeightl0[5];
				DeltaChromaWeightL0_6 = deltaChromaWeightl0[6];
				DeltaChromaWeightL0_7 = deltaChromaWeightl0[7];
				DeltaChromaWeightL0_8 = deltaChromaWeightl0[8];
				DeltaChromaWeightL0_9 = deltaChromaWeightl0[9];
				DeltaChromaWeightL0_10 = deltaChromaWeightl0[10];
				DeltaChromaWeightL0_11 = deltaChromaWeightl0[11];
				DeltaChromaWeightL0_12 = deltaChromaWeightl0[12];
				DeltaChromaWeightL0_13 = deltaChromaWeightl0[13];
				DeltaChromaWeightL0_14 = deltaChromaWeightl0[14];
			}
			if (deltaChromaOffsetl0 != default)
			{
				DeltaChromaOffsetL0_0 = deltaChromaOffsetl0[0];
				DeltaChromaOffsetL0_1 = deltaChromaOffsetl0[1];
				DeltaChromaOffsetL0_2 = deltaChromaOffsetl0[2];
				DeltaChromaOffsetL0_3 = deltaChromaOffsetl0[3];
				DeltaChromaOffsetL0_4 = deltaChromaOffsetl0[4];
				DeltaChromaOffsetL0_5 = deltaChromaOffsetl0[5];
				DeltaChromaOffsetL0_6 = deltaChromaOffsetl0[6];
				DeltaChromaOffsetL0_7 = deltaChromaOffsetl0[7];
				DeltaChromaOffsetL0_8 = deltaChromaOffsetl0[8];
				DeltaChromaOffsetL0_9 = deltaChromaOffsetl0[9];
				DeltaChromaOffsetL0_10 = deltaChromaOffsetl0[10];
				DeltaChromaOffsetL0_11 = deltaChromaOffsetl0[11];
				DeltaChromaOffsetL0_12 = deltaChromaOffsetl0[12];
				DeltaChromaOffsetL0_13 = deltaChromaOffsetl0[13];
				DeltaChromaOffsetL0_14 = deltaChromaOffsetl0[14];
			}
			if (deltaLumaWeightl1 != default)
			{
				DeltaLumaWeightL1_0 = deltaLumaWeightl1[0];
				DeltaLumaWeightL1_1 = deltaLumaWeightl1[1];
				DeltaLumaWeightL1_2 = deltaLumaWeightl1[2];
				DeltaLumaWeightL1_3 = deltaLumaWeightl1[3];
				DeltaLumaWeightL1_4 = deltaLumaWeightl1[4];
				DeltaLumaWeightL1_5 = deltaLumaWeightl1[5];
				DeltaLumaWeightL1_6 = deltaLumaWeightl1[6];
				DeltaLumaWeightL1_7 = deltaLumaWeightl1[7];
				DeltaLumaWeightL1_8 = deltaLumaWeightl1[8];
				DeltaLumaWeightL1_9 = deltaLumaWeightl1[9];
				DeltaLumaWeightL1_10 = deltaLumaWeightl1[10];
				DeltaLumaWeightL1_11 = deltaLumaWeightl1[11];
				DeltaLumaWeightL1_12 = deltaLumaWeightl1[12];
				DeltaLumaWeightL1_13 = deltaLumaWeightl1[13];
				DeltaLumaWeightL1_14 = deltaLumaWeightl1[14];
			}
			if (lumaOffsetl1 != default)
			{
				LumaOffsetL1_0 = lumaOffsetl1[0];
				LumaOffsetL1_1 = lumaOffsetl1[1];
				LumaOffsetL1_2 = lumaOffsetl1[2];
				LumaOffsetL1_3 = lumaOffsetl1[3];
				LumaOffsetL1_4 = lumaOffsetl1[4];
				LumaOffsetL1_5 = lumaOffsetl1[5];
				LumaOffsetL1_6 = lumaOffsetl1[6];
				LumaOffsetL1_7 = lumaOffsetl1[7];
				LumaOffsetL1_8 = lumaOffsetl1[8];
				LumaOffsetL1_9 = lumaOffsetl1[9];
				LumaOffsetL1_10 = lumaOffsetl1[10];
				LumaOffsetL1_11 = lumaOffsetl1[11];
				LumaOffsetL1_12 = lumaOffsetl1[12];
				LumaOffsetL1_13 = lumaOffsetl1[13];
				LumaOffsetL1_14 = lumaOffsetl1[14];
			}
			if (deltaChromaWeightl1 != default)
			{
				DeltaChromaWeightL1_0 = deltaChromaWeightl1[0];
				DeltaChromaWeightL1_1 = deltaChromaWeightl1[1];
				DeltaChromaWeightL1_2 = deltaChromaWeightl1[2];
				DeltaChromaWeightL1_3 = deltaChromaWeightl1[3];
				DeltaChromaWeightL1_4 = deltaChromaWeightl1[4];
				DeltaChromaWeightL1_5 = deltaChromaWeightl1[5];
				DeltaChromaWeightL1_6 = deltaChromaWeightl1[6];
				DeltaChromaWeightL1_7 = deltaChromaWeightl1[7];
				DeltaChromaWeightL1_8 = deltaChromaWeightl1[8];
				DeltaChromaWeightL1_9 = deltaChromaWeightl1[9];
				DeltaChromaWeightL1_10 = deltaChromaWeightl1[10];
				DeltaChromaWeightL1_11 = deltaChromaWeightl1[11];
				DeltaChromaWeightL1_12 = deltaChromaWeightl1[12];
				DeltaChromaWeightL1_13 = deltaChromaWeightl1[13];
				DeltaChromaWeightL1_14 = deltaChromaWeightl1[14];
			}
			if (deltaChromaOffsetl1 != default)
			{
				DeltaChromaOffsetL1_0 = deltaChromaOffsetl1[0];
				DeltaChromaOffsetL1_1 = deltaChromaOffsetl1[1];
				DeltaChromaOffsetL1_2 = deltaChromaOffsetl1[2];
				DeltaChromaOffsetL1_3 = deltaChromaOffsetl1[3];
				DeltaChromaOffsetL1_4 = deltaChromaOffsetl1[4];
				DeltaChromaOffsetL1_5 = deltaChromaOffsetl1[5];
				DeltaChromaOffsetL1_6 = deltaChromaOffsetl1[6];
				DeltaChromaOffsetL1_7 = deltaChromaOffsetl1[7];
				DeltaChromaOffsetL1_8 = deltaChromaOffsetl1[8];
				DeltaChromaOffsetL1_9 = deltaChromaOffsetl1[9];
				DeltaChromaOffsetL1_10 = deltaChromaOffsetl1[10];
				DeltaChromaOffsetL1_11 = deltaChromaOffsetl1[11];
				DeltaChromaOffsetL1_12 = deltaChromaOffsetl1[12];
				DeltaChromaOffsetL1_13 = deltaChromaOffsetl1[13];
				DeltaChromaOffsetL1_14 = deltaChromaOffsetl1[14];
			}
		}


		public unsafe Span<Pointer<byte>> DeltaChromaWeightL0
		
		{
			get
			{
				fixed (byte** p = &this.DeltaChromaWeightL0_0)
				{
					return new Span<Pointer<byte>>(p, 15);
				}
			}
		}
		public unsafe Span<Pointer<byte>> DeltaChromaOffsetL0
		
		{
			get
			{
				fixed (byte** p = &this.DeltaChromaOffsetL0_0)
				{
					return new Span<Pointer<byte>>(p, 15);
				}
			}
		}
		public unsafe Span<Pointer<byte>> DeltaChromaWeightL1
		
		{
			get
			{
				fixed (byte** p = &this.DeltaChromaWeightL1_0)
				{
					return new Span<Pointer<byte>>(p, 15);
				}
			}
		}
		public unsafe Span<Pointer<byte>> DeltaChromaOffsetL1
		
		{
			get
			{
				fixed (byte** p = &this.DeltaChromaOffsetL1_0)
				{
					return new Span<Pointer<byte>>(p, 15);
				}
			}
		}
	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH265SliceSegmentHeaderFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH265SliceSegmentHeaderFlags
	{
		[NativeName(NativeNameType.Field, "first_slice_segment_in_pic_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FirstSliceSegmentInPicFlag;
		[NativeName(NativeNameType.Field, "no_output_of_prior_pics_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NoOutputOfPriorPicsFlag;
		[NativeName(NativeNameType.Field, "dependent_slice_segment_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DependentSliceSegmentFlag;
		[NativeName(NativeNameType.Field, "pic_output_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PicOutputFlag;
		[NativeName(NativeNameType.Field, "short_term_ref_pic_set_sps_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ShortTermRefPicSetSpsFlag;
		[NativeName(NativeNameType.Field, "slice_temporal_mvp_enable_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SliceTemporalMvpEnableFlag;
		[NativeName(NativeNameType.Field, "slice_sao_luma_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SliceSaoLumaFlag;
		[NativeName(NativeNameType.Field, "slice_sao_chroma_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SliceSaoChromaFlag;
		[NativeName(NativeNameType.Field, "num_ref_idx_active_override_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NumRefIdxActiveOverrideFlag;
		[NativeName(NativeNameType.Field, "mvd_l1_zero_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MvdL1ZeroFlag;
		[NativeName(NativeNameType.Field, "cabac_init_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CabacInitFlag;
		[NativeName(NativeNameType.Field, "cu_chroma_qp_offset_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CuChromaQpOffsetEnabledFlag;
		[NativeName(NativeNameType.Field, "deblocking_filter_override_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeblockingFilterOverrideFlag;
		[NativeName(NativeNameType.Field, "slice_deblocking_filter_disabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SliceDeblockingFilterDisabledFlag;
		[NativeName(NativeNameType.Field, "collocated_from_l0_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CollocatedFromL0Flag;
		[NativeName(NativeNameType.Field, "slice_loop_filter_across_slices_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SliceLoopFilterAcrossSlicesEnabledFlag;

		public unsafe StdVideoEncodeH265SliceSegmentHeaderFlags(uint firstSliceSegmentInPicFlag = default, uint noOutputOfPriorPicsFlag = default, uint dependentSliceSegmentFlag = default, uint picOutputFlag = default, uint shortTermRefPicSetSpsFlag = default, uint sliceTemporalMvpEnableFlag = default, uint sliceSaoLumaFlag = default, uint sliceSaoChromaFlag = default, uint numRefIdxActiveOverrideFlag = default, uint mvdl1ZeroFlag = default, uint cabacInitFlag = default, uint cuChromaQpOffsetEnabledFlag = default, uint deblockingFilterOverrideFlag = default, uint sliceDeblockingFilterDisabledFlag = default, uint collocatedFroml0Flag = default, uint sliceLoopFilterAcrossSlicesEnabledFlag = default)
		{
			FirstSliceSegmentInPicFlag = firstSliceSegmentInPicFlag;
			NoOutputOfPriorPicsFlag = noOutputOfPriorPicsFlag;
			DependentSliceSegmentFlag = dependentSliceSegmentFlag;
			PicOutputFlag = picOutputFlag;
			ShortTermRefPicSetSpsFlag = shortTermRefPicSetSpsFlag;
			SliceTemporalMvpEnableFlag = sliceTemporalMvpEnableFlag;
			SliceSaoLumaFlag = sliceSaoLumaFlag;
			SliceSaoChromaFlag = sliceSaoChromaFlag;
			NumRefIdxActiveOverrideFlag = numRefIdxActiveOverrideFlag;
			MvdL1ZeroFlag = mvdl1ZeroFlag;
			CabacInitFlag = cabacInitFlag;
			CuChromaQpOffsetEnabledFlag = cuChromaQpOffsetEnabledFlag;
			DeblockingFilterOverrideFlag = deblockingFilterOverrideFlag;
			SliceDeblockingFilterDisabledFlag = sliceDeblockingFilterDisabledFlag;
			CollocatedFromL0Flag = collocatedFroml0Flag;
			SliceLoopFilterAcrossSlicesEnabledFlag = sliceLoopFilterAcrossSlicesEnabledFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH265SliceSegmentLongTermRefPics")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH265SliceSegmentLongTermRefPics
	{
		[NativeName(NativeNameType.Field, "num_long_term_sps")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumLongTermSps;
		[NativeName(NativeNameType.Field, "num_long_term_pics")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumLongTermPics;
		[NativeName(NativeNameType.Field, "lt_idx_sps")]
		[NativeName(NativeNameType.Type, "uint8_t[32]")]
		public byte LtIdxSps_0;
		public byte LtIdxSps_1;
		public byte LtIdxSps_2;
		public byte LtIdxSps_3;
		public byte LtIdxSps_4;
		public byte LtIdxSps_5;
		public byte LtIdxSps_6;
		public byte LtIdxSps_7;
		public byte LtIdxSps_8;
		public byte LtIdxSps_9;
		public byte LtIdxSps_10;
		public byte LtIdxSps_11;
		public byte LtIdxSps_12;
		public byte LtIdxSps_13;
		public byte LtIdxSps_14;
		public byte LtIdxSps_15;
		public byte LtIdxSps_16;
		public byte LtIdxSps_17;
		public byte LtIdxSps_18;
		public byte LtIdxSps_19;
		public byte LtIdxSps_20;
		public byte LtIdxSps_21;
		public byte LtIdxSps_22;
		public byte LtIdxSps_23;
		public byte LtIdxSps_24;
		public byte LtIdxSps_25;
		public byte LtIdxSps_26;
		public byte LtIdxSps_27;
		public byte LtIdxSps_28;
		public byte LtIdxSps_29;
		public byte LtIdxSps_30;
		public byte LtIdxSps_31;
		[NativeName(NativeNameType.Field, "poc_lsb_lt")]
		[NativeName(NativeNameType.Type, "uint8_t[16]")]
		public byte PocLsbLt_0;
		public byte PocLsbLt_1;
		public byte PocLsbLt_2;
		public byte PocLsbLt_3;
		public byte PocLsbLt_4;
		public byte PocLsbLt_5;
		public byte PocLsbLt_6;
		public byte PocLsbLt_7;
		public byte PocLsbLt_8;
		public byte PocLsbLt_9;
		public byte PocLsbLt_10;
		public byte PocLsbLt_11;
		public byte PocLsbLt_12;
		public byte PocLsbLt_13;
		public byte PocLsbLt_14;
		public byte PocLsbLt_15;
		[NativeName(NativeNameType.Field, "used_by_curr_pic_lt_flag")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort UsedByCurrPicLtFlag;
		[NativeName(NativeNameType.Field, "delta_poc_msb_present_flag")]
		[NativeName(NativeNameType.Type, "uint8_t[48]")]
		public byte DeltaPocMsbPresentFlag_0;
		public byte DeltaPocMsbPresentFlag_1;
		public byte DeltaPocMsbPresentFlag_2;
		public byte DeltaPocMsbPresentFlag_3;
		public byte DeltaPocMsbPresentFlag_4;
		public byte DeltaPocMsbPresentFlag_5;
		public byte DeltaPocMsbPresentFlag_6;
		public byte DeltaPocMsbPresentFlag_7;
		public byte DeltaPocMsbPresentFlag_8;
		public byte DeltaPocMsbPresentFlag_9;
		public byte DeltaPocMsbPresentFlag_10;
		public byte DeltaPocMsbPresentFlag_11;
		public byte DeltaPocMsbPresentFlag_12;
		public byte DeltaPocMsbPresentFlag_13;
		public byte DeltaPocMsbPresentFlag_14;
		public byte DeltaPocMsbPresentFlag_15;
		public byte DeltaPocMsbPresentFlag_16;
		public byte DeltaPocMsbPresentFlag_17;
		public byte DeltaPocMsbPresentFlag_18;
		public byte DeltaPocMsbPresentFlag_19;
		public byte DeltaPocMsbPresentFlag_20;
		public byte DeltaPocMsbPresentFlag_21;
		public byte DeltaPocMsbPresentFlag_22;
		public byte DeltaPocMsbPresentFlag_23;
		public byte DeltaPocMsbPresentFlag_24;
		public byte DeltaPocMsbPresentFlag_25;
		public byte DeltaPocMsbPresentFlag_26;
		public byte DeltaPocMsbPresentFlag_27;
		public byte DeltaPocMsbPresentFlag_28;
		public byte DeltaPocMsbPresentFlag_29;
		public byte DeltaPocMsbPresentFlag_30;
		public byte DeltaPocMsbPresentFlag_31;
		public byte DeltaPocMsbPresentFlag_32;
		public byte DeltaPocMsbPresentFlag_33;
		public byte DeltaPocMsbPresentFlag_34;
		public byte DeltaPocMsbPresentFlag_35;
		public byte DeltaPocMsbPresentFlag_36;
		public byte DeltaPocMsbPresentFlag_37;
		public byte DeltaPocMsbPresentFlag_38;
		public byte DeltaPocMsbPresentFlag_39;
		public byte DeltaPocMsbPresentFlag_40;
		public byte DeltaPocMsbPresentFlag_41;
		public byte DeltaPocMsbPresentFlag_42;
		public byte DeltaPocMsbPresentFlag_43;
		public byte DeltaPocMsbPresentFlag_44;
		public byte DeltaPocMsbPresentFlag_45;
		public byte DeltaPocMsbPresentFlag_46;
		public byte DeltaPocMsbPresentFlag_47;
		[NativeName(NativeNameType.Field, "delta_poc_msb_cycle_lt")]
		[NativeName(NativeNameType.Type, "uint8_t[48]")]
		public byte DeltaPocMsbCycleLt_0;
		public byte DeltaPocMsbCycleLt_1;
		public byte DeltaPocMsbCycleLt_2;
		public byte DeltaPocMsbCycleLt_3;
		public byte DeltaPocMsbCycleLt_4;
		public byte DeltaPocMsbCycleLt_5;
		public byte DeltaPocMsbCycleLt_6;
		public byte DeltaPocMsbCycleLt_7;
		public byte DeltaPocMsbCycleLt_8;
		public byte DeltaPocMsbCycleLt_9;
		public byte DeltaPocMsbCycleLt_10;
		public byte DeltaPocMsbCycleLt_11;
		public byte DeltaPocMsbCycleLt_12;
		public byte DeltaPocMsbCycleLt_13;
		public byte DeltaPocMsbCycleLt_14;
		public byte DeltaPocMsbCycleLt_15;
		public byte DeltaPocMsbCycleLt_16;
		public byte DeltaPocMsbCycleLt_17;
		public byte DeltaPocMsbCycleLt_18;
		public byte DeltaPocMsbCycleLt_19;
		public byte DeltaPocMsbCycleLt_20;
		public byte DeltaPocMsbCycleLt_21;
		public byte DeltaPocMsbCycleLt_22;
		public byte DeltaPocMsbCycleLt_23;
		public byte DeltaPocMsbCycleLt_24;
		public byte DeltaPocMsbCycleLt_25;
		public byte DeltaPocMsbCycleLt_26;
		public byte DeltaPocMsbCycleLt_27;
		public byte DeltaPocMsbCycleLt_28;
		public byte DeltaPocMsbCycleLt_29;
		public byte DeltaPocMsbCycleLt_30;
		public byte DeltaPocMsbCycleLt_31;
		public byte DeltaPocMsbCycleLt_32;
		public byte DeltaPocMsbCycleLt_33;
		public byte DeltaPocMsbCycleLt_34;
		public byte DeltaPocMsbCycleLt_35;
		public byte DeltaPocMsbCycleLt_36;
		public byte DeltaPocMsbCycleLt_37;
		public byte DeltaPocMsbCycleLt_38;
		public byte DeltaPocMsbCycleLt_39;
		public byte DeltaPocMsbCycleLt_40;
		public byte DeltaPocMsbCycleLt_41;
		public byte DeltaPocMsbCycleLt_42;
		public byte DeltaPocMsbCycleLt_43;
		public byte DeltaPocMsbCycleLt_44;
		public byte DeltaPocMsbCycleLt_45;
		public byte DeltaPocMsbCycleLt_46;
		public byte DeltaPocMsbCycleLt_47;

		public unsafe StdVideoEncodeH265SliceSegmentLongTermRefPics(byte numLongTermSps = default, byte numLongTermPics = default, byte* ltIdxSps = default, byte* pocLsbLt = default, ushort usedByCurrPicLtFlag = default, byte* deltaPocMsbPresentFlag = default, byte* deltaPocMsbCycleLt = default)
		{
			NumLongTermSps = numLongTermSps;
			NumLongTermPics = numLongTermPics;
			if (ltIdxSps != default)
			{
				LtIdxSps_0 = ltIdxSps[0];
				LtIdxSps_1 = ltIdxSps[1];
				LtIdxSps_2 = ltIdxSps[2];
				LtIdxSps_3 = ltIdxSps[3];
				LtIdxSps_4 = ltIdxSps[4];
				LtIdxSps_5 = ltIdxSps[5];
				LtIdxSps_6 = ltIdxSps[6];
				LtIdxSps_7 = ltIdxSps[7];
				LtIdxSps_8 = ltIdxSps[8];
				LtIdxSps_9 = ltIdxSps[9];
				LtIdxSps_10 = ltIdxSps[10];
				LtIdxSps_11 = ltIdxSps[11];
				LtIdxSps_12 = ltIdxSps[12];
				LtIdxSps_13 = ltIdxSps[13];
				LtIdxSps_14 = ltIdxSps[14];
				LtIdxSps_15 = ltIdxSps[15];
				LtIdxSps_16 = ltIdxSps[16];
				LtIdxSps_17 = ltIdxSps[17];
				LtIdxSps_18 = ltIdxSps[18];
				LtIdxSps_19 = ltIdxSps[19];
				LtIdxSps_20 = ltIdxSps[20];
				LtIdxSps_21 = ltIdxSps[21];
				LtIdxSps_22 = ltIdxSps[22];
				LtIdxSps_23 = ltIdxSps[23];
				LtIdxSps_24 = ltIdxSps[24];
				LtIdxSps_25 = ltIdxSps[25];
				LtIdxSps_26 = ltIdxSps[26];
				LtIdxSps_27 = ltIdxSps[27];
				LtIdxSps_28 = ltIdxSps[28];
				LtIdxSps_29 = ltIdxSps[29];
				LtIdxSps_30 = ltIdxSps[30];
				LtIdxSps_31 = ltIdxSps[31];
			}
			if (pocLsbLt != default)
			{
				PocLsbLt_0 = pocLsbLt[0];
				PocLsbLt_1 = pocLsbLt[1];
				PocLsbLt_2 = pocLsbLt[2];
				PocLsbLt_3 = pocLsbLt[3];
				PocLsbLt_4 = pocLsbLt[4];
				PocLsbLt_5 = pocLsbLt[5];
				PocLsbLt_6 = pocLsbLt[6];
				PocLsbLt_7 = pocLsbLt[7];
				PocLsbLt_8 = pocLsbLt[8];
				PocLsbLt_9 = pocLsbLt[9];
				PocLsbLt_10 = pocLsbLt[10];
				PocLsbLt_11 = pocLsbLt[11];
				PocLsbLt_12 = pocLsbLt[12];
				PocLsbLt_13 = pocLsbLt[13];
				PocLsbLt_14 = pocLsbLt[14];
				PocLsbLt_15 = pocLsbLt[15];
			}
			UsedByCurrPicLtFlag = usedByCurrPicLtFlag;
			if (deltaPocMsbPresentFlag != default)
			{
				DeltaPocMsbPresentFlag_0 = deltaPocMsbPresentFlag[0];
				DeltaPocMsbPresentFlag_1 = deltaPocMsbPresentFlag[1];
				DeltaPocMsbPresentFlag_2 = deltaPocMsbPresentFlag[2];
				DeltaPocMsbPresentFlag_3 = deltaPocMsbPresentFlag[3];
				DeltaPocMsbPresentFlag_4 = deltaPocMsbPresentFlag[4];
				DeltaPocMsbPresentFlag_5 = deltaPocMsbPresentFlag[5];
				DeltaPocMsbPresentFlag_6 = deltaPocMsbPresentFlag[6];
				DeltaPocMsbPresentFlag_7 = deltaPocMsbPresentFlag[7];
				DeltaPocMsbPresentFlag_8 = deltaPocMsbPresentFlag[8];
				DeltaPocMsbPresentFlag_9 = deltaPocMsbPresentFlag[9];
				DeltaPocMsbPresentFlag_10 = deltaPocMsbPresentFlag[10];
				DeltaPocMsbPresentFlag_11 = deltaPocMsbPresentFlag[11];
				DeltaPocMsbPresentFlag_12 = deltaPocMsbPresentFlag[12];
				DeltaPocMsbPresentFlag_13 = deltaPocMsbPresentFlag[13];
				DeltaPocMsbPresentFlag_14 = deltaPocMsbPresentFlag[14];
				DeltaPocMsbPresentFlag_15 = deltaPocMsbPresentFlag[15];
				DeltaPocMsbPresentFlag_16 = deltaPocMsbPresentFlag[16];
				DeltaPocMsbPresentFlag_17 = deltaPocMsbPresentFlag[17];
				DeltaPocMsbPresentFlag_18 = deltaPocMsbPresentFlag[18];
				DeltaPocMsbPresentFlag_19 = deltaPocMsbPresentFlag[19];
				DeltaPocMsbPresentFlag_20 = deltaPocMsbPresentFlag[20];
				DeltaPocMsbPresentFlag_21 = deltaPocMsbPresentFlag[21];
				DeltaPocMsbPresentFlag_22 = deltaPocMsbPresentFlag[22];
				DeltaPocMsbPresentFlag_23 = deltaPocMsbPresentFlag[23];
				DeltaPocMsbPresentFlag_24 = deltaPocMsbPresentFlag[24];
				DeltaPocMsbPresentFlag_25 = deltaPocMsbPresentFlag[25];
				DeltaPocMsbPresentFlag_26 = deltaPocMsbPresentFlag[26];
				DeltaPocMsbPresentFlag_27 = deltaPocMsbPresentFlag[27];
				DeltaPocMsbPresentFlag_28 = deltaPocMsbPresentFlag[28];
				DeltaPocMsbPresentFlag_29 = deltaPocMsbPresentFlag[29];
				DeltaPocMsbPresentFlag_30 = deltaPocMsbPresentFlag[30];
				DeltaPocMsbPresentFlag_31 = deltaPocMsbPresentFlag[31];
				DeltaPocMsbPresentFlag_32 = deltaPocMsbPresentFlag[32];
				DeltaPocMsbPresentFlag_33 = deltaPocMsbPresentFlag[33];
				DeltaPocMsbPresentFlag_34 = deltaPocMsbPresentFlag[34];
				DeltaPocMsbPresentFlag_35 = deltaPocMsbPresentFlag[35];
				DeltaPocMsbPresentFlag_36 = deltaPocMsbPresentFlag[36];
				DeltaPocMsbPresentFlag_37 = deltaPocMsbPresentFlag[37];
				DeltaPocMsbPresentFlag_38 = deltaPocMsbPresentFlag[38];
				DeltaPocMsbPresentFlag_39 = deltaPocMsbPresentFlag[39];
				DeltaPocMsbPresentFlag_40 = deltaPocMsbPresentFlag[40];
				DeltaPocMsbPresentFlag_41 = deltaPocMsbPresentFlag[41];
				DeltaPocMsbPresentFlag_42 = deltaPocMsbPresentFlag[42];
				DeltaPocMsbPresentFlag_43 = deltaPocMsbPresentFlag[43];
				DeltaPocMsbPresentFlag_44 = deltaPocMsbPresentFlag[44];
				DeltaPocMsbPresentFlag_45 = deltaPocMsbPresentFlag[45];
				DeltaPocMsbPresentFlag_46 = deltaPocMsbPresentFlag[46];
				DeltaPocMsbPresentFlag_47 = deltaPocMsbPresentFlag[47];
			}
			if (deltaPocMsbCycleLt != default)
			{
				DeltaPocMsbCycleLt_0 = deltaPocMsbCycleLt[0];
				DeltaPocMsbCycleLt_1 = deltaPocMsbCycleLt[1];
				DeltaPocMsbCycleLt_2 = deltaPocMsbCycleLt[2];
				DeltaPocMsbCycleLt_3 = deltaPocMsbCycleLt[3];
				DeltaPocMsbCycleLt_4 = deltaPocMsbCycleLt[4];
				DeltaPocMsbCycleLt_5 = deltaPocMsbCycleLt[5];
				DeltaPocMsbCycleLt_6 = deltaPocMsbCycleLt[6];
				DeltaPocMsbCycleLt_7 = deltaPocMsbCycleLt[7];
				DeltaPocMsbCycleLt_8 = deltaPocMsbCycleLt[8];
				DeltaPocMsbCycleLt_9 = deltaPocMsbCycleLt[9];
				DeltaPocMsbCycleLt_10 = deltaPocMsbCycleLt[10];
				DeltaPocMsbCycleLt_11 = deltaPocMsbCycleLt[11];
				DeltaPocMsbCycleLt_12 = deltaPocMsbCycleLt[12];
				DeltaPocMsbCycleLt_13 = deltaPocMsbCycleLt[13];
				DeltaPocMsbCycleLt_14 = deltaPocMsbCycleLt[14];
				DeltaPocMsbCycleLt_15 = deltaPocMsbCycleLt[15];
				DeltaPocMsbCycleLt_16 = deltaPocMsbCycleLt[16];
				DeltaPocMsbCycleLt_17 = deltaPocMsbCycleLt[17];
				DeltaPocMsbCycleLt_18 = deltaPocMsbCycleLt[18];
				DeltaPocMsbCycleLt_19 = deltaPocMsbCycleLt[19];
				DeltaPocMsbCycleLt_20 = deltaPocMsbCycleLt[20];
				DeltaPocMsbCycleLt_21 = deltaPocMsbCycleLt[21];
				DeltaPocMsbCycleLt_22 = deltaPocMsbCycleLt[22];
				DeltaPocMsbCycleLt_23 = deltaPocMsbCycleLt[23];
				DeltaPocMsbCycleLt_24 = deltaPocMsbCycleLt[24];
				DeltaPocMsbCycleLt_25 = deltaPocMsbCycleLt[25];
				DeltaPocMsbCycleLt_26 = deltaPocMsbCycleLt[26];
				DeltaPocMsbCycleLt_27 = deltaPocMsbCycleLt[27];
				DeltaPocMsbCycleLt_28 = deltaPocMsbCycleLt[28];
				DeltaPocMsbCycleLt_29 = deltaPocMsbCycleLt[29];
				DeltaPocMsbCycleLt_30 = deltaPocMsbCycleLt[30];
				DeltaPocMsbCycleLt_31 = deltaPocMsbCycleLt[31];
				DeltaPocMsbCycleLt_32 = deltaPocMsbCycleLt[32];
				DeltaPocMsbCycleLt_33 = deltaPocMsbCycleLt[33];
				DeltaPocMsbCycleLt_34 = deltaPocMsbCycleLt[34];
				DeltaPocMsbCycleLt_35 = deltaPocMsbCycleLt[35];
				DeltaPocMsbCycleLt_36 = deltaPocMsbCycleLt[36];
				DeltaPocMsbCycleLt_37 = deltaPocMsbCycleLt[37];
				DeltaPocMsbCycleLt_38 = deltaPocMsbCycleLt[38];
				DeltaPocMsbCycleLt_39 = deltaPocMsbCycleLt[39];
				DeltaPocMsbCycleLt_40 = deltaPocMsbCycleLt[40];
				DeltaPocMsbCycleLt_41 = deltaPocMsbCycleLt[41];
				DeltaPocMsbCycleLt_42 = deltaPocMsbCycleLt[42];
				DeltaPocMsbCycleLt_43 = deltaPocMsbCycleLt[43];
				DeltaPocMsbCycleLt_44 = deltaPocMsbCycleLt[44];
				DeltaPocMsbCycleLt_45 = deltaPocMsbCycleLt[45];
				DeltaPocMsbCycleLt_46 = deltaPocMsbCycleLt[46];
				DeltaPocMsbCycleLt_47 = deltaPocMsbCycleLt[47];
			}
		}

		public unsafe StdVideoEncodeH265SliceSegmentLongTermRefPics(byte numLongTermSps = default, byte numLongTermPics = default, Span<byte> ltIdxSps = default, Span<byte> pocLsbLt = default, ushort usedByCurrPicLtFlag = default, Span<byte> deltaPocMsbPresentFlag = default, Span<byte> deltaPocMsbCycleLt = default)
		{
			NumLongTermSps = numLongTermSps;
			NumLongTermPics = numLongTermPics;
			if (ltIdxSps != default)
			{
				LtIdxSps_0 = ltIdxSps[0];
				LtIdxSps_1 = ltIdxSps[1];
				LtIdxSps_2 = ltIdxSps[2];
				LtIdxSps_3 = ltIdxSps[3];
				LtIdxSps_4 = ltIdxSps[4];
				LtIdxSps_5 = ltIdxSps[5];
				LtIdxSps_6 = ltIdxSps[6];
				LtIdxSps_7 = ltIdxSps[7];
				LtIdxSps_8 = ltIdxSps[8];
				LtIdxSps_9 = ltIdxSps[9];
				LtIdxSps_10 = ltIdxSps[10];
				LtIdxSps_11 = ltIdxSps[11];
				LtIdxSps_12 = ltIdxSps[12];
				LtIdxSps_13 = ltIdxSps[13];
				LtIdxSps_14 = ltIdxSps[14];
				LtIdxSps_15 = ltIdxSps[15];
				LtIdxSps_16 = ltIdxSps[16];
				LtIdxSps_17 = ltIdxSps[17];
				LtIdxSps_18 = ltIdxSps[18];
				LtIdxSps_19 = ltIdxSps[19];
				LtIdxSps_20 = ltIdxSps[20];
				LtIdxSps_21 = ltIdxSps[21];
				LtIdxSps_22 = ltIdxSps[22];
				LtIdxSps_23 = ltIdxSps[23];
				LtIdxSps_24 = ltIdxSps[24];
				LtIdxSps_25 = ltIdxSps[25];
				LtIdxSps_26 = ltIdxSps[26];
				LtIdxSps_27 = ltIdxSps[27];
				LtIdxSps_28 = ltIdxSps[28];
				LtIdxSps_29 = ltIdxSps[29];
				LtIdxSps_30 = ltIdxSps[30];
				LtIdxSps_31 = ltIdxSps[31];
			}
			if (pocLsbLt != default)
			{
				PocLsbLt_0 = pocLsbLt[0];
				PocLsbLt_1 = pocLsbLt[1];
				PocLsbLt_2 = pocLsbLt[2];
				PocLsbLt_3 = pocLsbLt[3];
				PocLsbLt_4 = pocLsbLt[4];
				PocLsbLt_5 = pocLsbLt[5];
				PocLsbLt_6 = pocLsbLt[6];
				PocLsbLt_7 = pocLsbLt[7];
				PocLsbLt_8 = pocLsbLt[8];
				PocLsbLt_9 = pocLsbLt[9];
				PocLsbLt_10 = pocLsbLt[10];
				PocLsbLt_11 = pocLsbLt[11];
				PocLsbLt_12 = pocLsbLt[12];
				PocLsbLt_13 = pocLsbLt[13];
				PocLsbLt_14 = pocLsbLt[14];
				PocLsbLt_15 = pocLsbLt[15];
			}
			UsedByCurrPicLtFlag = usedByCurrPicLtFlag;
			if (deltaPocMsbPresentFlag != default)
			{
				DeltaPocMsbPresentFlag_0 = deltaPocMsbPresentFlag[0];
				DeltaPocMsbPresentFlag_1 = deltaPocMsbPresentFlag[1];
				DeltaPocMsbPresentFlag_2 = deltaPocMsbPresentFlag[2];
				DeltaPocMsbPresentFlag_3 = deltaPocMsbPresentFlag[3];
				DeltaPocMsbPresentFlag_4 = deltaPocMsbPresentFlag[4];
				DeltaPocMsbPresentFlag_5 = deltaPocMsbPresentFlag[5];
				DeltaPocMsbPresentFlag_6 = deltaPocMsbPresentFlag[6];
				DeltaPocMsbPresentFlag_7 = deltaPocMsbPresentFlag[7];
				DeltaPocMsbPresentFlag_8 = deltaPocMsbPresentFlag[8];
				DeltaPocMsbPresentFlag_9 = deltaPocMsbPresentFlag[9];
				DeltaPocMsbPresentFlag_10 = deltaPocMsbPresentFlag[10];
				DeltaPocMsbPresentFlag_11 = deltaPocMsbPresentFlag[11];
				DeltaPocMsbPresentFlag_12 = deltaPocMsbPresentFlag[12];
				DeltaPocMsbPresentFlag_13 = deltaPocMsbPresentFlag[13];
				DeltaPocMsbPresentFlag_14 = deltaPocMsbPresentFlag[14];
				DeltaPocMsbPresentFlag_15 = deltaPocMsbPresentFlag[15];
				DeltaPocMsbPresentFlag_16 = deltaPocMsbPresentFlag[16];
				DeltaPocMsbPresentFlag_17 = deltaPocMsbPresentFlag[17];
				DeltaPocMsbPresentFlag_18 = deltaPocMsbPresentFlag[18];
				DeltaPocMsbPresentFlag_19 = deltaPocMsbPresentFlag[19];
				DeltaPocMsbPresentFlag_20 = deltaPocMsbPresentFlag[20];
				DeltaPocMsbPresentFlag_21 = deltaPocMsbPresentFlag[21];
				DeltaPocMsbPresentFlag_22 = deltaPocMsbPresentFlag[22];
				DeltaPocMsbPresentFlag_23 = deltaPocMsbPresentFlag[23];
				DeltaPocMsbPresentFlag_24 = deltaPocMsbPresentFlag[24];
				DeltaPocMsbPresentFlag_25 = deltaPocMsbPresentFlag[25];
				DeltaPocMsbPresentFlag_26 = deltaPocMsbPresentFlag[26];
				DeltaPocMsbPresentFlag_27 = deltaPocMsbPresentFlag[27];
				DeltaPocMsbPresentFlag_28 = deltaPocMsbPresentFlag[28];
				DeltaPocMsbPresentFlag_29 = deltaPocMsbPresentFlag[29];
				DeltaPocMsbPresentFlag_30 = deltaPocMsbPresentFlag[30];
				DeltaPocMsbPresentFlag_31 = deltaPocMsbPresentFlag[31];
				DeltaPocMsbPresentFlag_32 = deltaPocMsbPresentFlag[32];
				DeltaPocMsbPresentFlag_33 = deltaPocMsbPresentFlag[33];
				DeltaPocMsbPresentFlag_34 = deltaPocMsbPresentFlag[34];
				DeltaPocMsbPresentFlag_35 = deltaPocMsbPresentFlag[35];
				DeltaPocMsbPresentFlag_36 = deltaPocMsbPresentFlag[36];
				DeltaPocMsbPresentFlag_37 = deltaPocMsbPresentFlag[37];
				DeltaPocMsbPresentFlag_38 = deltaPocMsbPresentFlag[38];
				DeltaPocMsbPresentFlag_39 = deltaPocMsbPresentFlag[39];
				DeltaPocMsbPresentFlag_40 = deltaPocMsbPresentFlag[40];
				DeltaPocMsbPresentFlag_41 = deltaPocMsbPresentFlag[41];
				DeltaPocMsbPresentFlag_42 = deltaPocMsbPresentFlag[42];
				DeltaPocMsbPresentFlag_43 = deltaPocMsbPresentFlag[43];
				DeltaPocMsbPresentFlag_44 = deltaPocMsbPresentFlag[44];
				DeltaPocMsbPresentFlag_45 = deltaPocMsbPresentFlag[45];
				DeltaPocMsbPresentFlag_46 = deltaPocMsbPresentFlag[46];
				DeltaPocMsbPresentFlag_47 = deltaPocMsbPresentFlag[47];
			}
			if (deltaPocMsbCycleLt != default)
			{
				DeltaPocMsbCycleLt_0 = deltaPocMsbCycleLt[0];
				DeltaPocMsbCycleLt_1 = deltaPocMsbCycleLt[1];
				DeltaPocMsbCycleLt_2 = deltaPocMsbCycleLt[2];
				DeltaPocMsbCycleLt_3 = deltaPocMsbCycleLt[3];
				DeltaPocMsbCycleLt_4 = deltaPocMsbCycleLt[4];
				DeltaPocMsbCycleLt_5 = deltaPocMsbCycleLt[5];
				DeltaPocMsbCycleLt_6 = deltaPocMsbCycleLt[6];
				DeltaPocMsbCycleLt_7 = deltaPocMsbCycleLt[7];
				DeltaPocMsbCycleLt_8 = deltaPocMsbCycleLt[8];
				DeltaPocMsbCycleLt_9 = deltaPocMsbCycleLt[9];
				DeltaPocMsbCycleLt_10 = deltaPocMsbCycleLt[10];
				DeltaPocMsbCycleLt_11 = deltaPocMsbCycleLt[11];
				DeltaPocMsbCycleLt_12 = deltaPocMsbCycleLt[12];
				DeltaPocMsbCycleLt_13 = deltaPocMsbCycleLt[13];
				DeltaPocMsbCycleLt_14 = deltaPocMsbCycleLt[14];
				DeltaPocMsbCycleLt_15 = deltaPocMsbCycleLt[15];
				DeltaPocMsbCycleLt_16 = deltaPocMsbCycleLt[16];
				DeltaPocMsbCycleLt_17 = deltaPocMsbCycleLt[17];
				DeltaPocMsbCycleLt_18 = deltaPocMsbCycleLt[18];
				DeltaPocMsbCycleLt_19 = deltaPocMsbCycleLt[19];
				DeltaPocMsbCycleLt_20 = deltaPocMsbCycleLt[20];
				DeltaPocMsbCycleLt_21 = deltaPocMsbCycleLt[21];
				DeltaPocMsbCycleLt_22 = deltaPocMsbCycleLt[22];
				DeltaPocMsbCycleLt_23 = deltaPocMsbCycleLt[23];
				DeltaPocMsbCycleLt_24 = deltaPocMsbCycleLt[24];
				DeltaPocMsbCycleLt_25 = deltaPocMsbCycleLt[25];
				DeltaPocMsbCycleLt_26 = deltaPocMsbCycleLt[26];
				DeltaPocMsbCycleLt_27 = deltaPocMsbCycleLt[27];
				DeltaPocMsbCycleLt_28 = deltaPocMsbCycleLt[28];
				DeltaPocMsbCycleLt_29 = deltaPocMsbCycleLt[29];
				DeltaPocMsbCycleLt_30 = deltaPocMsbCycleLt[30];
				DeltaPocMsbCycleLt_31 = deltaPocMsbCycleLt[31];
				DeltaPocMsbCycleLt_32 = deltaPocMsbCycleLt[32];
				DeltaPocMsbCycleLt_33 = deltaPocMsbCycleLt[33];
				DeltaPocMsbCycleLt_34 = deltaPocMsbCycleLt[34];
				DeltaPocMsbCycleLt_35 = deltaPocMsbCycleLt[35];
				DeltaPocMsbCycleLt_36 = deltaPocMsbCycleLt[36];
				DeltaPocMsbCycleLt_37 = deltaPocMsbCycleLt[37];
				DeltaPocMsbCycleLt_38 = deltaPocMsbCycleLt[38];
				DeltaPocMsbCycleLt_39 = deltaPocMsbCycleLt[39];
				DeltaPocMsbCycleLt_40 = deltaPocMsbCycleLt[40];
				DeltaPocMsbCycleLt_41 = deltaPocMsbCycleLt[41];
				DeltaPocMsbCycleLt_42 = deltaPocMsbCycleLt[42];
				DeltaPocMsbCycleLt_43 = deltaPocMsbCycleLt[43];
				DeltaPocMsbCycleLt_44 = deltaPocMsbCycleLt[44];
				DeltaPocMsbCycleLt_45 = deltaPocMsbCycleLt[45];
				DeltaPocMsbCycleLt_46 = deltaPocMsbCycleLt[46];
				DeltaPocMsbCycleLt_47 = deltaPocMsbCycleLt[47];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH265SliceSegmentHeader")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH265SliceSegmentHeader
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoEncodeH265SliceSegmentHeaderFlags")]
		public StdVideoEncodeH265SliceSegmentHeaderFlags Flags;
		[NativeName(NativeNameType.Field, "slice_type")]
		[NativeName(NativeNameType.Type, "StdVideoH265SliceType")]
		public StdVideoH265SliceType SliceType;
		[NativeName(NativeNameType.Field, "slice_segment_address")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SliceSegmentAddress;
		[NativeName(NativeNameType.Field, "short_term_ref_pic_set_idx")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte ShortTermRefPicSetIdx;
		[NativeName(NativeNameType.Field, "collocated_ref_idx")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte CollocatedRefIdx;
		[NativeName(NativeNameType.Field, "num_ref_idx_l0_active_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumRefIdxL0ActiveMinus1;
		[NativeName(NativeNameType.Field, "num_ref_idx_l1_active_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumRefIdxL1ActiveMinus1;
		[NativeName(NativeNameType.Field, "MaxNumMergeCand")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte MaxNumMergeCand;
		[NativeName(NativeNameType.Field, "slice_cb_qp_offset")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte SliceCbQpOffset;
		[NativeName(NativeNameType.Field, "slice_cr_qp_offset")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte SliceCrQpOffset;
		[NativeName(NativeNameType.Field, "slice_beta_offset_div2")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte SliceBetaOffsetDiv2;
		[NativeName(NativeNameType.Field, "slice_tc_offset_div2")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte SliceTcOffsetDiv2;
		[NativeName(NativeNameType.Field, "slice_act_y_qp_offset")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte SliceActYQpOffset;
		[NativeName(NativeNameType.Field, "slice_act_cb_qp_offset")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte SliceActCbQpOffset;
		[NativeName(NativeNameType.Field, "slice_act_cr_qp_offset")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte SliceActCrQpOffset;
		[NativeName(NativeNameType.Field, "pShortTermRefPicSet")]
		[NativeName(NativeNameType.Type, "const StdVideoH265ShortTermRefPicSet*")]
		public unsafe StdVideoH265ShortTermRefPicSet* PShortTermRefPicSet;
		[NativeName(NativeNameType.Field, "pLongTermRefPics")]
		[NativeName(NativeNameType.Type, "const StdVideoEncodeH265SliceSegmentLongTermRefPics*")]
		public unsafe StdVideoEncodeH265SliceSegmentLongTermRefPics* PLongTermRefPics;
		[NativeName(NativeNameType.Field, "pWeightTable")]
		[NativeName(NativeNameType.Type, "const StdVideoEncodeH265WeightTable*")]
		public unsafe StdVideoEncodeH265WeightTable* PWeightTable;

		public unsafe StdVideoEncodeH265SliceSegmentHeader(StdVideoEncodeH265SliceSegmentHeaderFlags flags = default, StdVideoH265SliceType sliceType = default, uint sliceSegmentAddress = default, byte shortTermRefPicSetIdx = default, byte collocatedRefIdx = default, byte numRefIdxl0Activeminus1 = default, byte numRefIdxl1Activeminus1 = default, byte maxNumMergeCand = default, byte sliceCbQpOffset = default, byte sliceCrQpOffset = default, byte sliceBetaOffsetdiv2 = default, byte sliceTcOffsetdiv2 = default, byte sliceActYQpOffset = default, byte sliceActCbQpOffset = default, byte sliceActCrQpOffset = default, StdVideoH265ShortTermRefPicSet* pShortTermRefPicSet = default, StdVideoEncodeH265SliceSegmentLongTermRefPics* pLongTermRefPics = default, StdVideoEncodeH265WeightTable* pWeightTable = default)
		{
			Flags = flags;
			SliceType = sliceType;
			SliceSegmentAddress = sliceSegmentAddress;
			ShortTermRefPicSetIdx = shortTermRefPicSetIdx;
			CollocatedRefIdx = collocatedRefIdx;
			NumRefIdxL0ActiveMinus1 = numRefIdxl0Activeminus1;
			NumRefIdxL1ActiveMinus1 = numRefIdxl1Activeminus1;
			MaxNumMergeCand = maxNumMergeCand;
			SliceCbQpOffset = sliceCbQpOffset;
			SliceCrQpOffset = sliceCrQpOffset;
			SliceBetaOffsetDiv2 = sliceBetaOffsetdiv2;
			SliceTcOffsetDiv2 = sliceTcOffsetdiv2;
			SliceActYQpOffset = sliceActYQpOffset;
			SliceActCbQpOffset = sliceActCbQpOffset;
			SliceActCrQpOffset = sliceActCrQpOffset;
			PShortTermRefPicSet = pShortTermRefPicSet;
			PLongTermRefPics = pLongTermRefPics;
			PWeightTable = pWeightTable;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH265ReferenceListsInfoFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH265ReferenceListsInfoFlags
	{
		[NativeName(NativeNameType.Field, "ref_pic_list_modification_flag_l0")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint RefPicListModificationFlagL0;
		[NativeName(NativeNameType.Field, "ref_pic_list_modification_flag_l1")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint RefPicListModificationFlagL1;

		public unsafe StdVideoEncodeH265ReferenceListsInfoFlags(uint refPicListModificationFlagl0 = default, uint refPicListModificationFlagl1 = default)
		{
			RefPicListModificationFlagL0 = refPicListModificationFlagl0;
			RefPicListModificationFlagL1 = refPicListModificationFlagl1;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH265ReferenceListsInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH265ReferenceListsInfo
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoEncodeH265ReferenceListsInfoFlags")]
		public StdVideoEncodeH265ReferenceListsInfoFlags Flags;
		[NativeName(NativeNameType.Field, "num_ref_idx_l0_active_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumRefIdxL0ActiveMinus1;
		[NativeName(NativeNameType.Field, "num_ref_idx_l1_active_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumRefIdxL1ActiveMinus1;
		[NativeName(NativeNameType.Field, "reserved1")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort Reserved1;
		[NativeName(NativeNameType.Field, "pRefPicList0Entries")]
		[NativeName(NativeNameType.Type, "const uint8_t*")]
		public unsafe byte* PRefPicList0Entries;
		[NativeName(NativeNameType.Field, "pRefPicList1Entries")]
		[NativeName(NativeNameType.Type, "const uint8_t*")]
		public unsafe byte* PRefPicList1Entries;
		[NativeName(NativeNameType.Field, "pRefList0Modifications")]
		[NativeName(NativeNameType.Type, "const uint8_t*")]
		public unsafe byte* PRefList0Modifications;
		[NativeName(NativeNameType.Field, "pRefList1Modifications")]
		[NativeName(NativeNameType.Type, "const uint8_t*")]
		public unsafe byte* PRefList1Modifications;

		public unsafe StdVideoEncodeH265ReferenceListsInfo(StdVideoEncodeH265ReferenceListsInfoFlags flags = default, byte numRefIdxl0Activeminus1 = default, byte numRefIdxl1Activeminus1 = default, ushort reserved1 = default, byte* pRefPicList0Entries = default, byte* pRefPicList1Entries = default, byte* pRefList0Modifications = default, byte* pRefList1Modifications = default)
		{
			Flags = flags;
			NumRefIdxL0ActiveMinus1 = numRefIdxl0Activeminus1;
			NumRefIdxL1ActiveMinus1 = numRefIdxl1Activeminus1;
			Reserved1 = reserved1;
			PRefPicList0Entries = pRefPicList0Entries;
			PRefPicList1Entries = pRefPicList1Entries;
			PRefList0Modifications = pRefList0Modifications;
			PRefList1Modifications = pRefList1Modifications;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH265PictureInfoFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH265PictureInfoFlags
	{
		[NativeName(NativeNameType.Field, "is_reference_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IsReferenceFlag;
		[NativeName(NativeNameType.Field, "IrapPicFlag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IrapPicFlag;
		[NativeName(NativeNameType.Field, "long_term_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint LongTermFlag;
		[NativeName(NativeNameType.Field, "discardable_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DiscardableFlag;
		[NativeName(NativeNameType.Field, "cross_layer_bla_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CrossLayerBlaFlag;

		public unsafe StdVideoEncodeH265PictureInfoFlags(uint isReferenceFlag = default, uint irapPicFlag = default, uint longTermFlag = default, uint discardableFlag = default, uint crossLayerBlaFlag = default)
		{
			IsReferenceFlag = isReferenceFlag;
			IrapPicFlag = irapPicFlag;
			LongTermFlag = longTermFlag;
			DiscardableFlag = discardableFlag;
			CrossLayerBlaFlag = crossLayerBlaFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH265PictureInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH265PictureInfo
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoEncodeH265PictureInfoFlags")]
		public StdVideoEncodeH265PictureInfoFlags Flags;
		[NativeName(NativeNameType.Field, "PictureType")]
		[NativeName(NativeNameType.Type, "StdVideoH265PictureType")]
		public StdVideoH265PictureType PictureType;
		[NativeName(NativeNameType.Field, "sps_video_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte SpsVideoParameterSetId;
		[NativeName(NativeNameType.Field, "pps_seq_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PpsSeqParameterSetId;
		[NativeName(NativeNameType.Field, "pps_pic_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PpsPicParameterSetId;
		[NativeName(NativeNameType.Field, "TemporalId")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte TemporalId;
		[NativeName(NativeNameType.Field, "PicOrderCntVal")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int PicOrderCntVal;

		public unsafe StdVideoEncodeH265PictureInfo(StdVideoEncodeH265PictureInfoFlags flags = default, StdVideoH265PictureType pictureType = default, byte spsVideoParameterSetId = default, byte ppsSeqParameterSetId = default, byte ppsPicParameterSetId = default, byte temporalId = default, int picOrderCntVal = default)
		{
			Flags = flags;
			PictureType = pictureType;
			SpsVideoParameterSetId = spsVideoParameterSetId;
			PpsSeqParameterSetId = ppsSeqParameterSetId;
			PpsPicParameterSetId = ppsPicParameterSetId;
			TemporalId = temporalId;
			PicOrderCntVal = picOrderCntVal;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH265ReferenceInfoFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH265ReferenceInfoFlags
	{
		[NativeName(NativeNameType.Field, "used_for_long_term_reference")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint UsedForLongTermReference;
		[NativeName(NativeNameType.Field, "unused_for_reference")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint UnusedForReference;

		public unsafe StdVideoEncodeH265ReferenceInfoFlags(uint usedForLongTermReference = default, uint unusedForReference = default)
		{
			UsedForLongTermReference = usedForLongTermReference;
			UnusedForReference = unusedForReference;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoEncodeH265ReferenceInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoEncodeH265ReferenceInfo
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoEncodeH265ReferenceInfoFlags")]
		public StdVideoEncodeH265ReferenceInfoFlags Flags;
		[NativeName(NativeNameType.Field, "PictureType")]
		[NativeName(NativeNameType.Type, "StdVideoH265PictureType")]
		public StdVideoH265PictureType PictureType;
		[NativeName(NativeNameType.Field, "PicOrderCntVal")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int PicOrderCntVal;
		[NativeName(NativeNameType.Field, "TemporalId")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte TemporalId;

		public unsafe StdVideoEncodeH265ReferenceInfo(StdVideoEncodeH265ReferenceInfoFlags flags = default, StdVideoH265PictureType pictureType = default, int picOrderCntVal = default, byte temporalId = default)
		{
			Flags = flags;
			PictureType = pictureType;
			PicOrderCntVal = picOrderCntVal;
			TemporalId = temporalId;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkExtent2D")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkExtent2D
	{
		[NativeName(NativeNameType.Field, "width")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Width;
		[NativeName(NativeNameType.Field, "height")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Height;

		public unsafe VkExtent2D(uint width = default, uint height = default)
		{
			Width = width;
			Height = height;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkExtent3D")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkExtent3D
	{
		[NativeName(NativeNameType.Field, "width")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Width;
		[NativeName(NativeNameType.Field, "height")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Height;
		[NativeName(NativeNameType.Field, "depth")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Depth;

		public unsafe VkExtent3D(uint width = default, uint height = default, uint depth = default)
		{
			Width = width;
			Height = height;
			Depth = depth;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkOffset2D")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkOffset2D
	{
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int X;
		[NativeName(NativeNameType.Field, "y")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int Y;

		public unsafe VkOffset2D(int x = default, int y = default)
		{
			X = x;
			Y = y;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkOffset3D")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkOffset3D
	{
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int X;
		[NativeName(NativeNameType.Field, "y")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int Y;
		[NativeName(NativeNameType.Field, "z")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int Z;

		public unsafe VkOffset3D(int x = default, int y = default, int z = default)
		{
			X = x;
			Y = y;
			Z = z;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkRect2D")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkRect2D
	{
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "VkOffset2D")]
		public VkOffset2D Offset;
		[NativeName(NativeNameType.Field, "extent")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D Extent;

		public unsafe VkRect2D(VkOffset2D offset = default, VkExtent2D extent = default)
		{
			Offset = offset;
			Extent = extent;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkBaseInStructure")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkBaseInStructure
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const VkBaseInStructure*")]
		public unsafe VkBaseInStructure* PNext;

		public unsafe VkBaseInStructure(VkStructureType sType = default, VkBaseInStructure* pNext = default)
		{
			SType = sType;
			PNext = pNext;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkBaseOutStructure")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkBaseOutStructure
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "VkBaseOutStructure*")]
		public unsafe VkBaseOutStructure* PNext;

		public unsafe VkBaseOutStructure(VkStructureType sType = default, VkBaseOutStructure* pNext = default)
		{
			SType = sType;
			PNext = pNext;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkBufferMemoryBarrier")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkBufferMemoryBarrier
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "srcAccessMask")]
		[NativeName(NativeNameType.Type, "VkAccessFlags")]
		public uint SrcAccessMask;
		[NativeName(NativeNameType.Field, "dstAccessMask")]
		[NativeName(NativeNameType.Type, "VkAccessFlags")]
		public uint DstAccessMask;
		[NativeName(NativeNameType.Field, "srcQueueFamilyIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SrcQueueFamilyIndex;
		[NativeName(NativeNameType.Field, "dstQueueFamilyIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DstQueueFamilyIndex;
		[NativeName(NativeNameType.Field, "buffer")]
		[NativeName(NativeNameType.Type, "VkBuffer")]
		public VkBuffer Buffer;
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Offset;
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Size;

		public unsafe VkBufferMemoryBarrier(VkStructureType sType = default, void* pNext = default, uint srcAccessMask = default, uint dstAccessMask = default, uint srcQueueFamilyIndex = default, uint dstQueueFamilyIndex = default, VkBuffer buffer = default, ulong offset = default, ulong size = default)
		{
			SType = sType;
			PNext = pNext;
			SrcAccessMask = srcAccessMask;
			DstAccessMask = dstAccessMask;
			SrcQueueFamilyIndex = srcQueueFamilyIndex;
			DstQueueFamilyIndex = dstQueueFamilyIndex;
			Buffer = buffer;
			Offset = offset;
			Size = size;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDispatchIndirectCommand")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDispatchIndirectCommand
	{
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint X;
		[NativeName(NativeNameType.Field, "y")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Y;
		[NativeName(NativeNameType.Field, "z")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Z;

		public unsafe VkDispatchIndirectCommand(uint x = default, uint y = default, uint z = default)
		{
			X = x;
			Y = y;
			Z = z;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDrawIndexedIndirectCommand")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDrawIndexedIndirectCommand
	{
		[NativeName(NativeNameType.Field, "indexCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IndexCount;
		[NativeName(NativeNameType.Field, "instanceCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint InstanceCount;
		[NativeName(NativeNameType.Field, "firstIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FirstIndex;
		[NativeName(NativeNameType.Field, "vertexOffset")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int VertexOffset;
		[NativeName(NativeNameType.Field, "firstInstance")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FirstInstance;

		public unsafe VkDrawIndexedIndirectCommand(uint indexCount = default, uint instanceCount = default, uint firstIndex = default, int vertexOffset = default, uint firstInstance = default)
		{
			IndexCount = indexCount;
			InstanceCount = instanceCount;
			FirstIndex = firstIndex;
			VertexOffset = vertexOffset;
			FirstInstance = firstInstance;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDrawIndirectCommand")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDrawIndirectCommand
	{
		[NativeName(NativeNameType.Field, "vertexCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VertexCount;
		[NativeName(NativeNameType.Field, "instanceCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint InstanceCount;
		[NativeName(NativeNameType.Field, "firstVertex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FirstVertex;
		[NativeName(NativeNameType.Field, "firstInstance")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FirstInstance;

		public unsafe VkDrawIndirectCommand(uint vertexCount = default, uint instanceCount = default, uint firstVertex = default, uint firstInstance = default)
		{
			VertexCount = vertexCount;
			InstanceCount = instanceCount;
			FirstVertex = firstVertex;
			FirstInstance = firstInstance;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImageSubresourceRange")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageSubresourceRange
	{
		[NativeName(NativeNameType.Field, "aspectMask")]
		[NativeName(NativeNameType.Type, "VkImageAspectFlags")]
		public uint AspectMask;
		[NativeName(NativeNameType.Field, "baseMipLevel")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BaseMipLevel;
		[NativeName(NativeNameType.Field, "levelCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint LevelCount;
		[NativeName(NativeNameType.Field, "baseArrayLayer")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BaseArrayLayer;
		[NativeName(NativeNameType.Field, "layerCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint LayerCount;

		public unsafe VkImageSubresourceRange(uint aspectMask = default, uint baseMipLevel = default, uint levelCount = default, uint baseArrayLayer = default, uint layerCount = default)
		{
			AspectMask = aspectMask;
			BaseMipLevel = baseMipLevel;
			LevelCount = levelCount;
			BaseArrayLayer = baseArrayLayer;
			LayerCount = layerCount;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImageMemoryBarrier")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageMemoryBarrier
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "srcAccessMask")]
		[NativeName(NativeNameType.Type, "VkAccessFlags")]
		public uint SrcAccessMask;
		[NativeName(NativeNameType.Field, "dstAccessMask")]
		[NativeName(NativeNameType.Type, "VkAccessFlags")]
		public uint DstAccessMask;
		[NativeName(NativeNameType.Field, "oldLayout")]
		[NativeName(NativeNameType.Type, "VkImageLayout")]
		public VkImageLayout OldLayout;
		[NativeName(NativeNameType.Field, "newLayout")]
		[NativeName(NativeNameType.Type, "VkImageLayout")]
		public VkImageLayout NewLayout;
		[NativeName(NativeNameType.Field, "srcQueueFamilyIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SrcQueueFamilyIndex;
		[NativeName(NativeNameType.Field, "dstQueueFamilyIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DstQueueFamilyIndex;
		[NativeName(NativeNameType.Field, "image")]
		[NativeName(NativeNameType.Type, "VkImage")]
		public VkImage Image;
		[NativeName(NativeNameType.Field, "subresourceRange")]
		[NativeName(NativeNameType.Type, "VkImageSubresourceRange")]
		public VkImageSubresourceRange SubresourceRange;

		public unsafe VkImageMemoryBarrier(VkStructureType sType = default, void* pNext = default, uint srcAccessMask = default, uint dstAccessMask = default, VkImageLayout oldLayout = default, VkImageLayout newLayout = default, uint srcQueueFamilyIndex = default, uint dstQueueFamilyIndex = default, VkImage image = default, VkImageSubresourceRange subresourceRange = default)
		{
			SType = sType;
			PNext = pNext;
			SrcAccessMask = srcAccessMask;
			DstAccessMask = dstAccessMask;
			OldLayout = oldLayout;
			NewLayout = newLayout;
			SrcQueueFamilyIndex = srcQueueFamilyIndex;
			DstQueueFamilyIndex = dstQueueFamilyIndex;
			Image = image;
			SubresourceRange = subresourceRange;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMemoryBarrier")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMemoryBarrier
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "srcAccessMask")]
		[NativeName(NativeNameType.Type, "VkAccessFlags")]
		public uint SrcAccessMask;
		[NativeName(NativeNameType.Field, "dstAccessMask")]
		[NativeName(NativeNameType.Type, "VkAccessFlags")]
		public uint DstAccessMask;

		public unsafe VkMemoryBarrier(VkStructureType sType = default, void* pNext = default, uint srcAccessMask = default, uint dstAccessMask = default)
		{
			SType = sType;
			PNext = pNext;
			SrcAccessMask = srcAccessMask;
			DstAccessMask = dstAccessMask;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineCacheHeaderVersionOne")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineCacheHeaderVersionOne
	{
		[NativeName(NativeNameType.Field, "headerSize")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint HeaderSize;
		[NativeName(NativeNameType.Field, "headerVersion")]
		[NativeName(NativeNameType.Type, "VkPipelineCacheHeaderVersion")]
		public VkPipelineCacheHeaderVersion HeaderVersion;
		[NativeName(NativeNameType.Field, "vendorID")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VendorID;
		[NativeName(NativeNameType.Field, "deviceID")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeviceID;
		[NativeName(NativeNameType.Field, "pipelineCacheUUID")]
		[NativeName(NativeNameType.Type, "uint8_t[16]")]
		public byte PipelineCacheUUID_0;
		public byte PipelineCacheUUID_1;
		public byte PipelineCacheUUID_2;
		public byte PipelineCacheUUID_3;
		public byte PipelineCacheUUID_4;
		public byte PipelineCacheUUID_5;
		public byte PipelineCacheUUID_6;
		public byte PipelineCacheUUID_7;
		public byte PipelineCacheUUID_8;
		public byte PipelineCacheUUID_9;
		public byte PipelineCacheUUID_10;
		public byte PipelineCacheUUID_11;
		public byte PipelineCacheUUID_12;
		public byte PipelineCacheUUID_13;
		public byte PipelineCacheUUID_14;
		public byte PipelineCacheUUID_15;

		public unsafe VkPipelineCacheHeaderVersionOne(uint headerSize = default, VkPipelineCacheHeaderVersion headerVersion = default, uint vendorID = default, uint deviceID = default, byte* pipelineCacheUUID = default)
		{
			HeaderSize = headerSize;
			HeaderVersion = headerVersion;
			VendorID = vendorID;
			DeviceID = deviceID;
			if (pipelineCacheUUID != default)
			{
				PipelineCacheUUID_0 = pipelineCacheUUID[0];
				PipelineCacheUUID_1 = pipelineCacheUUID[1];
				PipelineCacheUUID_2 = pipelineCacheUUID[2];
				PipelineCacheUUID_3 = pipelineCacheUUID[3];
				PipelineCacheUUID_4 = pipelineCacheUUID[4];
				PipelineCacheUUID_5 = pipelineCacheUUID[5];
				PipelineCacheUUID_6 = pipelineCacheUUID[6];
				PipelineCacheUUID_7 = pipelineCacheUUID[7];
				PipelineCacheUUID_8 = pipelineCacheUUID[8];
				PipelineCacheUUID_9 = pipelineCacheUUID[9];
				PipelineCacheUUID_10 = pipelineCacheUUID[10];
				PipelineCacheUUID_11 = pipelineCacheUUID[11];
				PipelineCacheUUID_12 = pipelineCacheUUID[12];
				PipelineCacheUUID_13 = pipelineCacheUUID[13];
				PipelineCacheUUID_14 = pipelineCacheUUID[14];
				PipelineCacheUUID_15 = pipelineCacheUUID[15];
			}
		}

		public unsafe VkPipelineCacheHeaderVersionOne(uint headerSize = default, VkPipelineCacheHeaderVersion headerVersion = default, uint vendorID = default, uint deviceID = default, Span<byte> pipelineCacheUUID = default)
		{
			HeaderSize = headerSize;
			HeaderVersion = headerVersion;
			VendorID = vendorID;
			DeviceID = deviceID;
			if (pipelineCacheUUID != default)
			{
				PipelineCacheUUID_0 = pipelineCacheUUID[0];
				PipelineCacheUUID_1 = pipelineCacheUUID[1];
				PipelineCacheUUID_2 = pipelineCacheUUID[2];
				PipelineCacheUUID_3 = pipelineCacheUUID[3];
				PipelineCacheUUID_4 = pipelineCacheUUID[4];
				PipelineCacheUUID_5 = pipelineCacheUUID[5];
				PipelineCacheUUID_6 = pipelineCacheUUID[6];
				PipelineCacheUUID_7 = pipelineCacheUUID[7];
				PipelineCacheUUID_8 = pipelineCacheUUID[8];
				PipelineCacheUUID_9 = pipelineCacheUUID[9];
				PipelineCacheUUID_10 = pipelineCacheUUID[10];
				PipelineCacheUUID_11 = pipelineCacheUUID[11];
				PipelineCacheUUID_12 = pipelineCacheUUID[12];
				PipelineCacheUUID_13 = pipelineCacheUUID[13];
				PipelineCacheUUID_14 = pipelineCacheUUID[14];
				PipelineCacheUUID_15 = pipelineCacheUUID[15];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkAllocationCallbacks")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkAllocationCallbacks
	{
		[NativeName(NativeNameType.Field, "pUserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PUserData;
		[NativeName(NativeNameType.Field, "pfnAllocation")]
		[NativeName(NativeNameType.Type, "PFN_vkAllocationFunction")]
		public unsafe void* PfnAllocation;
		[NativeName(NativeNameType.Field, "pfnReallocation")]
		[NativeName(NativeNameType.Type, "PFN_vkReallocationFunction")]
		public unsafe void* PfnReallocation;
		[NativeName(NativeNameType.Field, "pfnFree")]
		[NativeName(NativeNameType.Type, "PFN_vkFreeFunction")]
		public unsafe void* PfnFree;
		[NativeName(NativeNameType.Field, "pfnInternalAllocation")]
		[NativeName(NativeNameType.Type, "PFN_vkInternalAllocationNotification")]
		public unsafe void* PfnInternalAllocation;
		[NativeName(NativeNameType.Field, "pfnInternalFree")]
		[NativeName(NativeNameType.Type, "PFN_vkInternalFreeNotification")]
		public unsafe void* PfnInternalFree;

		public unsafe VkAllocationCallbacks(void* pUserData = default, delegate*<void*, ulong, ulong, VkSystemAllocationScope, void*> pfnAllocation = default, delegate*<void*, void*, ulong, ulong, VkSystemAllocationScope, void*> pfnReallocation = default, delegate*<void*, void*, void> pfnFree = default, delegate*<void*, ulong, VkInternalAllocationType, VkSystemAllocationScope, void> pfnInternalAllocation = default, delegate*<void*, ulong, VkInternalAllocationType, VkSystemAllocationScope, void> pfnInternalFree = default)
		{
			PUserData = pUserData;
			PfnAllocation = (void*)pfnAllocation;
			PfnReallocation = (void*)pfnReallocation;
			PfnFree = (void*)pfnFree;
			PfnInternalAllocation = (void*)pfnInternalAllocation;
			PfnInternalFree = (void*)pfnInternalFree;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkApplicationInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkApplicationInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pApplicationName")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* PApplicationName;
		[NativeName(NativeNameType.Field, "applicationVersion")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ApplicationVersion;
		[NativeName(NativeNameType.Field, "pEngineName")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* PEngineName;
		[NativeName(NativeNameType.Field, "engineVersion")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint EngineVersion;
		[NativeName(NativeNameType.Field, "apiVersion")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ApiVersion;

		public unsafe VkApplicationInfo(VkStructureType sType = default, void* pNext = default, byte* pApplicationName = default, uint applicationVersion = default, byte* pEngineName = default, uint engineVersion = default, uint apiVersion = default)
		{
			SType = sType;
			PNext = pNext;
			PApplicationName = pApplicationName;
			ApplicationVersion = applicationVersion;
			PEngineName = pEngineName;
			EngineVersion = engineVersion;
			ApiVersion = apiVersion;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkFormatProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkFormatProperties
	{
		[NativeName(NativeNameType.Field, "linearTilingFeatures")]
		[NativeName(NativeNameType.Type, "VkFormatFeatureFlags")]
		public uint LinearTilingFeatures;
		[NativeName(NativeNameType.Field, "optimalTilingFeatures")]
		[NativeName(NativeNameType.Type, "VkFormatFeatureFlags")]
		public uint OptimalTilingFeatures;
		[NativeName(NativeNameType.Field, "bufferFeatures")]
		[NativeName(NativeNameType.Type, "VkFormatFeatureFlags")]
		public uint BufferFeatures;

		public unsafe VkFormatProperties(uint linearTilingFeatures = default, uint optimalTilingFeatures = default, uint bufferFeatures = default)
		{
			LinearTilingFeatures = linearTilingFeatures;
			OptimalTilingFeatures = optimalTilingFeatures;
			BufferFeatures = bufferFeatures;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImageFormatProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageFormatProperties
	{
		[NativeName(NativeNameType.Field, "maxExtent")]
		[NativeName(NativeNameType.Type, "VkExtent3D")]
		public VkExtent3D MaxExtent;
		[NativeName(NativeNameType.Field, "maxMipLevels")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxMipLevels;
		[NativeName(NativeNameType.Field, "maxArrayLayers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxArrayLayers;
		[NativeName(NativeNameType.Field, "sampleCounts")]
		[NativeName(NativeNameType.Type, "VkSampleCountFlags")]
		public uint SampleCounts;
		[NativeName(NativeNameType.Field, "maxResourceSize")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong MaxResourceSize;

		public unsafe VkImageFormatProperties(VkExtent3D maxExtent = default, uint maxMipLevels = default, uint maxArrayLayers = default, uint sampleCounts = default, ulong maxResourceSize = default)
		{
			MaxExtent = maxExtent;
			MaxMipLevels = maxMipLevels;
			MaxArrayLayers = maxArrayLayers;
			SampleCounts = sampleCounts;
			MaxResourceSize = maxResourceSize;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkInstanceCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkInstanceCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkInstanceCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "pApplicationInfo")]
		[NativeName(NativeNameType.Type, "const VkApplicationInfo*")]
		public unsafe VkApplicationInfo* PApplicationInfo;
		[NativeName(NativeNameType.Field, "enabledLayerCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint EnabledLayerCount;
		[NativeName(NativeNameType.Field, "ppEnabledLayerNames")]
		[NativeName(NativeNameType.Type, "const const char**")]
		public unsafe byte** PpEnabledLayerNames;
		[NativeName(NativeNameType.Field, "enabledExtensionCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint EnabledExtensionCount;
		[NativeName(NativeNameType.Field, "ppEnabledExtensionNames")]
		[NativeName(NativeNameType.Type, "const const char**")]
		public unsafe byte** PpEnabledExtensionNames;

		public unsafe VkInstanceCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, VkApplicationInfo* pApplicationInfo = default, uint enabledLayerCount = default, byte** ppEnabledLayerNames = default, uint enabledExtensionCount = default, byte** ppEnabledExtensionNames = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			PApplicationInfo = pApplicationInfo;
			EnabledLayerCount = enabledLayerCount;
			PpEnabledLayerNames = ppEnabledLayerNames;
			EnabledExtensionCount = enabledExtensionCount;
			PpEnabledExtensionNames = ppEnabledExtensionNames;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMemoryHeap")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMemoryHeap
	{
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Size;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkMemoryHeapFlags")]
		public uint Flags;

		public unsafe VkMemoryHeap(ulong size = default, uint flags = default)
		{
			Size = size;
			Flags = flags;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMemoryType")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMemoryType
	{
		[NativeName(NativeNameType.Field, "propertyFlags")]
		[NativeName(NativeNameType.Type, "VkMemoryPropertyFlags")]
		public uint PropertyFlags;
		[NativeName(NativeNameType.Field, "heapIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint HeapIndex;

		public unsafe VkMemoryType(uint propertyFlags = default, uint heapIndex = default)
		{
			PropertyFlags = propertyFlags;
			HeapIndex = heapIndex;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceFeatures")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceFeatures
	{
		[NativeName(NativeNameType.Field, "robustBufferAccess")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint RobustBufferAccess;
		[NativeName(NativeNameType.Field, "fullDrawIndexUint32")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint FullDrawIndexUint32;
		[NativeName(NativeNameType.Field, "imageCubeArray")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ImageCubeArray;
		[NativeName(NativeNameType.Field, "independentBlend")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IndependentBlend;
		[NativeName(NativeNameType.Field, "geometryShader")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint GeometryShader;
		[NativeName(NativeNameType.Field, "tessellationShader")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint TessellationShader;
		[NativeName(NativeNameType.Field, "sampleRateShading")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint SampleRateShading;
		[NativeName(NativeNameType.Field, "dualSrcBlend")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DualSrcBlend;
		[NativeName(NativeNameType.Field, "logicOp")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint LogicOp;
		[NativeName(NativeNameType.Field, "multiDrawIndirect")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint MultiDrawIndirect;
		[NativeName(NativeNameType.Field, "drawIndirectFirstInstance")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DrawIndirectFirstInstance;
		[NativeName(NativeNameType.Field, "depthClamp")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DepthClamp;
		[NativeName(NativeNameType.Field, "depthBiasClamp")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DepthBiasClamp;
		[NativeName(NativeNameType.Field, "fillModeNonSolid")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint FillModeNonSolid;
		[NativeName(NativeNameType.Field, "depthBounds")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DepthBounds;
		[NativeName(NativeNameType.Field, "wideLines")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint WideLines;
		[NativeName(NativeNameType.Field, "largePoints")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint LargePoints;
		[NativeName(NativeNameType.Field, "alphaToOne")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint AlphaToOne;
		[NativeName(NativeNameType.Field, "multiViewport")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint MultiViewport;
		[NativeName(NativeNameType.Field, "samplerAnisotropy")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint SamplerAnisotropy;
		[NativeName(NativeNameType.Field, "textureCompressionETC2")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint TextureCompressionETC2;
		[NativeName(NativeNameType.Field, "textureCompressionASTC_LDR")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint TextureCompressionASTCLDR;
		[NativeName(NativeNameType.Field, "textureCompressionBC")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint TextureCompressionBC;
		[NativeName(NativeNameType.Field, "occlusionQueryPrecise")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint OcclusionQueryPrecise;
		[NativeName(NativeNameType.Field, "pipelineStatisticsQuery")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PipelineStatisticsQuery;
		[NativeName(NativeNameType.Field, "vertexPipelineStoresAndAtomics")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint VertexPipelineStoresAndAtomics;
		[NativeName(NativeNameType.Field, "fragmentStoresAndAtomics")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint FragmentStoresAndAtomics;
		[NativeName(NativeNameType.Field, "shaderTessellationAndGeometryPointSize")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderTessellationAndGeometryPointSize;
		[NativeName(NativeNameType.Field, "shaderImageGatherExtended")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderImageGatherExtended;
		[NativeName(NativeNameType.Field, "shaderStorageImageExtendedFormats")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderStorageImageExtendedFormats;
		[NativeName(NativeNameType.Field, "shaderStorageImageMultisample")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderStorageImageMultisample;
		[NativeName(NativeNameType.Field, "shaderStorageImageReadWithoutFormat")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderStorageImageReadWithoutFormat;
		[NativeName(NativeNameType.Field, "shaderStorageImageWriteWithoutFormat")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderStorageImageWriteWithoutFormat;
		[NativeName(NativeNameType.Field, "shaderUniformBufferArrayDynamicIndexing")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderUniformBufferArrayDynamicIndexing;
		[NativeName(NativeNameType.Field, "shaderSampledImageArrayDynamicIndexing")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderSampledImageArrayDynamicIndexing;
		[NativeName(NativeNameType.Field, "shaderStorageBufferArrayDynamicIndexing")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderStorageBufferArrayDynamicIndexing;
		[NativeName(NativeNameType.Field, "shaderStorageImageArrayDynamicIndexing")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderStorageImageArrayDynamicIndexing;
		[NativeName(NativeNameType.Field, "shaderClipDistance")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderClipDistance;
		[NativeName(NativeNameType.Field, "shaderCullDistance")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderCullDistance;
		[NativeName(NativeNameType.Field, "shaderFloat64")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderFloat64;
		[NativeName(NativeNameType.Field, "shaderInt64")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderInt64;
		[NativeName(NativeNameType.Field, "shaderInt16")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderInt16;
		[NativeName(NativeNameType.Field, "shaderResourceResidency")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderResourceResidency;
		[NativeName(NativeNameType.Field, "shaderResourceMinLod")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderResourceMinLod;
		[NativeName(NativeNameType.Field, "sparseBinding")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint SparseBinding;
		[NativeName(NativeNameType.Field, "sparseResidencyBuffer")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint SparseResidencyBuffer;
		[NativeName(NativeNameType.Field, "sparseResidencyImage2D")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint SparseResidencyImage2D;
		[NativeName(NativeNameType.Field, "sparseResidencyImage3D")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint SparseResidencyImage3D;
		[NativeName(NativeNameType.Field, "sparseResidency2Samples")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint SparseResidency2Samples;
		[NativeName(NativeNameType.Field, "sparseResidency4Samples")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint SparseResidency4Samples;
		[NativeName(NativeNameType.Field, "sparseResidency8Samples")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint SparseResidency8Samples;
		[NativeName(NativeNameType.Field, "sparseResidency16Samples")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint SparseResidency16Samples;
		[NativeName(NativeNameType.Field, "sparseResidencyAliased")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint SparseResidencyAliased;
		[NativeName(NativeNameType.Field, "variableMultisampleRate")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint VariableMultisampleRate;
		[NativeName(NativeNameType.Field, "inheritedQueries")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint InheritedQueries;

		public unsafe VkPhysicalDeviceFeatures(uint robustBufferAccess = default, uint fullDrawIndexUint32 = default, uint imageCubeArray = default, uint independentBlend = default, uint geometryShader = default, uint tessellationShader = default, uint sampleRateShading = default, uint dualSrcBlend = default, uint logicOp = default, uint multiDrawIndirect = default, uint drawIndirectFirstInstance = default, uint depthClamp = default, uint depthBiasClamp = default, uint fillModeNonSolid = default, uint depthBounds = default, uint wideLines = default, uint largePoints = default, uint alphaToOne = default, uint multiViewport = default, uint samplerAnisotropy = default, uint textureCompressionETC2 = default, uint texturecompressionastcLdr = default, uint textureCompressionBC = default, uint occlusionQueryPrecise = default, uint pipelineStatisticsQuery = default, uint vertexPipelineStoresAndAtomics = default, uint fragmentStoresAndAtomics = default, uint shaderTessellationAndGeometryPointSize = default, uint shaderImageGatherExtended = default, uint shaderStorageImageExtendedFormats = default, uint shaderStorageImageMultisample = default, uint shaderStorageImageReadWithoutFormat = default, uint shaderStorageImageWriteWithoutFormat = default, uint shaderUniformBufferArrayDynamicIndexing = default, uint shaderSampledImageArrayDynamicIndexing = default, uint shaderStorageBufferArrayDynamicIndexing = default, uint shaderStorageImageArrayDynamicIndexing = default, uint shaderClipDistance = default, uint shaderCullDistance = default, uint shaderFloat64 = default, uint shaderInt64 = default, uint shaderInt16 = default, uint shaderResourceResidency = default, uint shaderResourceMinLod = default, uint sparseBinding = default, uint sparseResidencyBuffer = default, uint sparseResidencyImage2D = default, uint sparseResidencyImage3D = default, uint sparseResidency2Samples = default, uint sparseResidency4Samples = default, uint sparseResidency8Samples = default, uint sparseResidency16Samples = default, uint sparseResidencyAliased = default, uint variableMultisampleRate = default, uint inheritedQueries = default)
		{
			RobustBufferAccess = robustBufferAccess;
			FullDrawIndexUint32 = fullDrawIndexUint32;
			ImageCubeArray = imageCubeArray;
			IndependentBlend = independentBlend;
			GeometryShader = geometryShader;
			TessellationShader = tessellationShader;
			SampleRateShading = sampleRateShading;
			DualSrcBlend = dualSrcBlend;
			LogicOp = logicOp;
			MultiDrawIndirect = multiDrawIndirect;
			DrawIndirectFirstInstance = drawIndirectFirstInstance;
			DepthClamp = depthClamp;
			DepthBiasClamp = depthBiasClamp;
			FillModeNonSolid = fillModeNonSolid;
			DepthBounds = depthBounds;
			WideLines = wideLines;
			LargePoints = largePoints;
			AlphaToOne = alphaToOne;
			MultiViewport = multiViewport;
			SamplerAnisotropy = samplerAnisotropy;
			TextureCompressionETC2 = textureCompressionETC2;
			TextureCompressionASTCLDR = texturecompressionastcLdr;
			TextureCompressionBC = textureCompressionBC;
			OcclusionQueryPrecise = occlusionQueryPrecise;
			PipelineStatisticsQuery = pipelineStatisticsQuery;
			VertexPipelineStoresAndAtomics = vertexPipelineStoresAndAtomics;
			FragmentStoresAndAtomics = fragmentStoresAndAtomics;
			ShaderTessellationAndGeometryPointSize = shaderTessellationAndGeometryPointSize;
			ShaderImageGatherExtended = shaderImageGatherExtended;
			ShaderStorageImageExtendedFormats = shaderStorageImageExtendedFormats;
			ShaderStorageImageMultisample = shaderStorageImageMultisample;
			ShaderStorageImageReadWithoutFormat = shaderStorageImageReadWithoutFormat;
			ShaderStorageImageWriteWithoutFormat = shaderStorageImageWriteWithoutFormat;
			ShaderUniformBufferArrayDynamicIndexing = shaderUniformBufferArrayDynamicIndexing;
			ShaderSampledImageArrayDynamicIndexing = shaderSampledImageArrayDynamicIndexing;
			ShaderStorageBufferArrayDynamicIndexing = shaderStorageBufferArrayDynamicIndexing;
			ShaderStorageImageArrayDynamicIndexing = shaderStorageImageArrayDynamicIndexing;
			ShaderClipDistance = shaderClipDistance;
			ShaderCullDistance = shaderCullDistance;
			ShaderFloat64 = shaderFloat64;
			ShaderInt64 = shaderInt64;
			ShaderInt16 = shaderInt16;
			ShaderResourceResidency = shaderResourceResidency;
			ShaderResourceMinLod = shaderResourceMinLod;
			SparseBinding = sparseBinding;
			SparseResidencyBuffer = sparseResidencyBuffer;
			SparseResidencyImage2D = sparseResidencyImage2D;
			SparseResidencyImage3D = sparseResidencyImage3D;
			SparseResidency2Samples = sparseResidency2Samples;
			SparseResidency4Samples = sparseResidency4Samples;
			SparseResidency8Samples = sparseResidency8Samples;
			SparseResidency16Samples = sparseResidency16Samples;
			SparseResidencyAliased = sparseResidencyAliased;
			VariableMultisampleRate = variableMultisampleRate;
			InheritedQueries = inheritedQueries;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceLimits")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceLimits
	{
		[NativeName(NativeNameType.Field, "maxImageDimension1D")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxImageDimension1D;
		[NativeName(NativeNameType.Field, "maxImageDimension2D")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxImageDimension2D;
		[NativeName(NativeNameType.Field, "maxImageDimension3D")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxImageDimension3D;
		[NativeName(NativeNameType.Field, "maxImageDimensionCube")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxImageDimensionCube;
		[NativeName(NativeNameType.Field, "maxImageArrayLayers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxImageArrayLayers;
		[NativeName(NativeNameType.Field, "maxTexelBufferElements")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTexelBufferElements;
		[NativeName(NativeNameType.Field, "maxUniformBufferRange")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxUniformBufferRange;
		[NativeName(NativeNameType.Field, "maxStorageBufferRange")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxStorageBufferRange;
		[NativeName(NativeNameType.Field, "maxPushConstantsSize")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPushConstantsSize;
		[NativeName(NativeNameType.Field, "maxMemoryAllocationCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxMemoryAllocationCount;
		[NativeName(NativeNameType.Field, "maxSamplerAllocationCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxSamplerAllocationCount;
		[NativeName(NativeNameType.Field, "bufferImageGranularity")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong BufferImageGranularity;
		[NativeName(NativeNameType.Field, "sparseAddressSpaceSize")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong SparseAddressSpaceSize;
		[NativeName(NativeNameType.Field, "maxBoundDescriptorSets")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxBoundDescriptorSets;
		[NativeName(NativeNameType.Field, "maxPerStageDescriptorSamplers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPerStageDescriptorSamplers;
		[NativeName(NativeNameType.Field, "maxPerStageDescriptorUniformBuffers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPerStageDescriptorUniformBuffers;
		[NativeName(NativeNameType.Field, "maxPerStageDescriptorStorageBuffers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPerStageDescriptorStorageBuffers;
		[NativeName(NativeNameType.Field, "maxPerStageDescriptorSampledImages")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPerStageDescriptorSampledImages;
		[NativeName(NativeNameType.Field, "maxPerStageDescriptorStorageImages")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPerStageDescriptorStorageImages;
		[NativeName(NativeNameType.Field, "maxPerStageDescriptorInputAttachments")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPerStageDescriptorInputAttachments;
		[NativeName(NativeNameType.Field, "maxPerStageResources")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPerStageResources;
		[NativeName(NativeNameType.Field, "maxDescriptorSetSamplers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDescriptorSetSamplers;
		[NativeName(NativeNameType.Field, "maxDescriptorSetUniformBuffers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDescriptorSetUniformBuffers;
		[NativeName(NativeNameType.Field, "maxDescriptorSetUniformBuffersDynamic")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDescriptorSetUniformBuffersDynamic;
		[NativeName(NativeNameType.Field, "maxDescriptorSetStorageBuffers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDescriptorSetStorageBuffers;
		[NativeName(NativeNameType.Field, "maxDescriptorSetStorageBuffersDynamic")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDescriptorSetStorageBuffersDynamic;
		[NativeName(NativeNameType.Field, "maxDescriptorSetSampledImages")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDescriptorSetSampledImages;
		[NativeName(NativeNameType.Field, "maxDescriptorSetStorageImages")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDescriptorSetStorageImages;
		[NativeName(NativeNameType.Field, "maxDescriptorSetInputAttachments")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDescriptorSetInputAttachments;
		[NativeName(NativeNameType.Field, "maxVertexInputAttributes")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxVertexInputAttributes;
		[NativeName(NativeNameType.Field, "maxVertexInputBindings")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxVertexInputBindings;
		[NativeName(NativeNameType.Field, "maxVertexInputAttributeOffset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxVertexInputAttributeOffset;
		[NativeName(NativeNameType.Field, "maxVertexInputBindingStride")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxVertexInputBindingStride;
		[NativeName(NativeNameType.Field, "maxVertexOutputComponents")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxVertexOutputComponents;
		[NativeName(NativeNameType.Field, "maxTessellationGenerationLevel")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTessellationGenerationLevel;
		[NativeName(NativeNameType.Field, "maxTessellationPatchSize")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTessellationPatchSize;
		[NativeName(NativeNameType.Field, "maxTessellationControlPerVertexInputComponents")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTessellationControlPerVertexInputComponents;
		[NativeName(NativeNameType.Field, "maxTessellationControlPerVertexOutputComponents")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTessellationControlPerVertexOutputComponents;
		[NativeName(NativeNameType.Field, "maxTessellationControlPerPatchOutputComponents")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTessellationControlPerPatchOutputComponents;
		[NativeName(NativeNameType.Field, "maxTessellationControlTotalOutputComponents")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTessellationControlTotalOutputComponents;
		[NativeName(NativeNameType.Field, "maxTessellationEvaluationInputComponents")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTessellationEvaluationInputComponents;
		[NativeName(NativeNameType.Field, "maxTessellationEvaluationOutputComponents")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTessellationEvaluationOutputComponents;
		[NativeName(NativeNameType.Field, "maxGeometryShaderInvocations")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxGeometryShaderInvocations;
		[NativeName(NativeNameType.Field, "maxGeometryInputComponents")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxGeometryInputComponents;
		[NativeName(NativeNameType.Field, "maxGeometryOutputComponents")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxGeometryOutputComponents;
		[NativeName(NativeNameType.Field, "maxGeometryOutputVertices")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxGeometryOutputVertices;
		[NativeName(NativeNameType.Field, "maxGeometryTotalOutputComponents")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxGeometryTotalOutputComponents;
		[NativeName(NativeNameType.Field, "maxFragmentInputComponents")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxFragmentInputComponents;
		[NativeName(NativeNameType.Field, "maxFragmentOutputAttachments")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxFragmentOutputAttachments;
		[NativeName(NativeNameType.Field, "maxFragmentDualSrcAttachments")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxFragmentDualSrcAttachments;
		[NativeName(NativeNameType.Field, "maxFragmentCombinedOutputResources")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxFragmentCombinedOutputResources;
		[NativeName(NativeNameType.Field, "maxComputeSharedMemorySize")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxComputeSharedMemorySize;
		[NativeName(NativeNameType.Field, "maxComputeWorkGroupCount")]
		[NativeName(NativeNameType.Type, "uint32_t[3]")]
		public uint MaxComputeWorkGroupCount_0;
		public uint MaxComputeWorkGroupCount_1;
		public uint MaxComputeWorkGroupCount_2;
		[NativeName(NativeNameType.Field, "maxComputeWorkGroupInvocations")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxComputeWorkGroupInvocations;
		[NativeName(NativeNameType.Field, "maxComputeWorkGroupSize")]
		[NativeName(NativeNameType.Type, "uint32_t[3]")]
		public uint MaxComputeWorkGroupSize_0;
		public uint MaxComputeWorkGroupSize_1;
		public uint MaxComputeWorkGroupSize_2;
		[NativeName(NativeNameType.Field, "subPixelPrecisionBits")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SubPixelPrecisionBits;
		[NativeName(NativeNameType.Field, "subTexelPrecisionBits")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SubTexelPrecisionBits;
		[NativeName(NativeNameType.Field, "mipmapPrecisionBits")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MipmapPrecisionBits;
		[NativeName(NativeNameType.Field, "maxDrawIndexedIndexValue")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDrawIndexedIndexValue;
		[NativeName(NativeNameType.Field, "maxDrawIndirectCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDrawIndirectCount;
		[NativeName(NativeNameType.Field, "maxSamplerLodBias")]
		[NativeName(NativeNameType.Type, "float")]
		public float MaxSamplerLodBias;
		[NativeName(NativeNameType.Field, "maxSamplerAnisotropy")]
		[NativeName(NativeNameType.Type, "float")]
		public float MaxSamplerAnisotropy;
		[NativeName(NativeNameType.Field, "maxViewports")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxViewports;
		[NativeName(NativeNameType.Field, "maxViewportDimensions")]
		[NativeName(NativeNameType.Type, "uint32_t[2]")]
		public uint MaxViewportDimensions_0;
		public uint MaxViewportDimensions_1;
		[NativeName(NativeNameType.Field, "viewportBoundsRange")]
		[NativeName(NativeNameType.Type, "float[2]")]
		public float ViewportBoundsRange_0;
		public float ViewportBoundsRange_1;
		[NativeName(NativeNameType.Field, "viewportSubPixelBits")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ViewportSubPixelBits;
		[NativeName(NativeNameType.Field, "minMemoryMapAlignment")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong MinMemoryMapAlignment;
		[NativeName(NativeNameType.Field, "minTexelBufferOffsetAlignment")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong MinTexelBufferOffsetAlignment;
		[NativeName(NativeNameType.Field, "minUniformBufferOffsetAlignment")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong MinUniformBufferOffsetAlignment;
		[NativeName(NativeNameType.Field, "minStorageBufferOffsetAlignment")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong MinStorageBufferOffsetAlignment;
		[NativeName(NativeNameType.Field, "minTexelOffset")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int MinTexelOffset;
		[NativeName(NativeNameType.Field, "maxTexelOffset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTexelOffset;
		[NativeName(NativeNameType.Field, "minTexelGatherOffset")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int MinTexelGatherOffset;
		[NativeName(NativeNameType.Field, "maxTexelGatherOffset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTexelGatherOffset;
		[NativeName(NativeNameType.Field, "minInterpolationOffset")]
		[NativeName(NativeNameType.Type, "float")]
		public float MinInterpolationOffset;
		[NativeName(NativeNameType.Field, "maxInterpolationOffset")]
		[NativeName(NativeNameType.Type, "float")]
		public float MaxInterpolationOffset;
		[NativeName(NativeNameType.Field, "subPixelInterpolationOffsetBits")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SubPixelInterpolationOffsetBits;
		[NativeName(NativeNameType.Field, "maxFramebufferWidth")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxFramebufferWidth;
		[NativeName(NativeNameType.Field, "maxFramebufferHeight")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxFramebufferHeight;
		[NativeName(NativeNameType.Field, "maxFramebufferLayers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxFramebufferLayers;
		[NativeName(NativeNameType.Field, "framebufferColorSampleCounts")]
		[NativeName(NativeNameType.Type, "VkSampleCountFlags")]
		public uint FramebufferColorSampleCounts;
		[NativeName(NativeNameType.Field, "framebufferDepthSampleCounts")]
		[NativeName(NativeNameType.Type, "VkSampleCountFlags")]
		public uint FramebufferDepthSampleCounts;
		[NativeName(NativeNameType.Field, "framebufferStencilSampleCounts")]
		[NativeName(NativeNameType.Type, "VkSampleCountFlags")]
		public uint FramebufferStencilSampleCounts;
		[NativeName(NativeNameType.Field, "framebufferNoAttachmentsSampleCounts")]
		[NativeName(NativeNameType.Type, "VkSampleCountFlags")]
		public uint FramebufferNoAttachmentsSampleCounts;
		[NativeName(NativeNameType.Field, "maxColorAttachments")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxColorAttachments;
		[NativeName(NativeNameType.Field, "sampledImageColorSampleCounts")]
		[NativeName(NativeNameType.Type, "VkSampleCountFlags")]
		public uint SampledImageColorSampleCounts;
		[NativeName(NativeNameType.Field, "sampledImageIntegerSampleCounts")]
		[NativeName(NativeNameType.Type, "VkSampleCountFlags")]
		public uint SampledImageIntegerSampleCounts;
		[NativeName(NativeNameType.Field, "sampledImageDepthSampleCounts")]
		[NativeName(NativeNameType.Type, "VkSampleCountFlags")]
		public uint SampledImageDepthSampleCounts;
		[NativeName(NativeNameType.Field, "sampledImageStencilSampleCounts")]
		[NativeName(NativeNameType.Type, "VkSampleCountFlags")]
		public uint SampledImageStencilSampleCounts;
		[NativeName(NativeNameType.Field, "storageImageSampleCounts")]
		[NativeName(NativeNameType.Type, "VkSampleCountFlags")]
		public uint StorageImageSampleCounts;
		[NativeName(NativeNameType.Field, "maxSampleMaskWords")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxSampleMaskWords;
		[NativeName(NativeNameType.Field, "timestampComputeAndGraphics")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint TimestampComputeAndGraphics;
		[NativeName(NativeNameType.Field, "timestampPeriod")]
		[NativeName(NativeNameType.Type, "float")]
		public float TimestampPeriod;
		[NativeName(NativeNameType.Field, "maxClipDistances")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxClipDistances;
		[NativeName(NativeNameType.Field, "maxCullDistances")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxCullDistances;
		[NativeName(NativeNameType.Field, "maxCombinedClipAndCullDistances")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxCombinedClipAndCullDistances;
		[NativeName(NativeNameType.Field, "discreteQueuePriorities")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DiscreteQueuePriorities;
		[NativeName(NativeNameType.Field, "pointSizeRange")]
		[NativeName(NativeNameType.Type, "float[2]")]
		public float PointSizeRange_0;
		public float PointSizeRange_1;
		[NativeName(NativeNameType.Field, "lineWidthRange")]
		[NativeName(NativeNameType.Type, "float[2]")]
		public float LineWidthRange_0;
		public float LineWidthRange_1;
		[NativeName(NativeNameType.Field, "pointSizeGranularity")]
		[NativeName(NativeNameType.Type, "float")]
		public float PointSizeGranularity;
		[NativeName(NativeNameType.Field, "lineWidthGranularity")]
		[NativeName(NativeNameType.Type, "float")]
		public float LineWidthGranularity;
		[NativeName(NativeNameType.Field, "strictLines")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint StrictLines;
		[NativeName(NativeNameType.Field, "standardSampleLocations")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint StandardSampleLocations;
		[NativeName(NativeNameType.Field, "optimalBufferCopyOffsetAlignment")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong OptimalBufferCopyOffsetAlignment;
		[NativeName(NativeNameType.Field, "optimalBufferCopyRowPitchAlignment")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong OptimalBufferCopyRowPitchAlignment;
		[NativeName(NativeNameType.Field, "nonCoherentAtomSize")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong NonCoherentAtomSize;

		public unsafe VkPhysicalDeviceLimits(uint maxImageDimension1D = default, uint maxImageDimension2D = default, uint maxImageDimension3D = default, uint maxImageDimensionCube = default, uint maxImageArrayLayers = default, uint maxTexelBufferElements = default, uint maxUniformBufferRange = default, uint maxStorageBufferRange = default, uint maxPushConstantsSize = default, uint maxMemoryAllocationCount = default, uint maxSamplerAllocationCount = default, ulong bufferImageGranularity = default, ulong sparseAddressSpaceSize = default, uint maxBoundDescriptorSets = default, uint maxPerStageDescriptorSamplers = default, uint maxPerStageDescriptorUniformBuffers = default, uint maxPerStageDescriptorStorageBuffers = default, uint maxPerStageDescriptorSampledImages = default, uint maxPerStageDescriptorStorageImages = default, uint maxPerStageDescriptorInputAttachments = default, uint maxPerStageResources = default, uint maxDescriptorSetSamplers = default, uint maxDescriptorSetUniformBuffers = default, uint maxDescriptorSetUniformBuffersDynamic = default, uint maxDescriptorSetStorageBuffers = default, uint maxDescriptorSetStorageBuffersDynamic = default, uint maxDescriptorSetSampledImages = default, uint maxDescriptorSetStorageImages = default, uint maxDescriptorSetInputAttachments = default, uint maxVertexInputAttributes = default, uint maxVertexInputBindings = default, uint maxVertexInputAttributeOffset = default, uint maxVertexInputBindingStride = default, uint maxVertexOutputComponents = default, uint maxTessellationGenerationLevel = default, uint maxTessellationPatchSize = default, uint maxTessellationControlPerVertexInputComponents = default, uint maxTessellationControlPerVertexOutputComponents = default, uint maxTessellationControlPerPatchOutputComponents = default, uint maxTessellationControlTotalOutputComponents = default, uint maxTessellationEvaluationInputComponents = default, uint maxTessellationEvaluationOutputComponents = default, uint maxGeometryShaderInvocations = default, uint maxGeometryInputComponents = default, uint maxGeometryOutputComponents = default, uint maxGeometryOutputVertices = default, uint maxGeometryTotalOutputComponents = default, uint maxFragmentInputComponents = default, uint maxFragmentOutputAttachments = default, uint maxFragmentDualSrcAttachments = default, uint maxFragmentCombinedOutputResources = default, uint maxComputeSharedMemorySize = default, uint* maxComputeWorkGroupCount = default, uint maxComputeWorkGroupInvocations = default, uint* maxComputeWorkGroupSize = default, uint subPixelPrecisionBits = default, uint subTexelPrecisionBits = default, uint mipmapPrecisionBits = default, uint maxDrawIndexedIndexValue = default, uint maxDrawIndirectCount = default, float maxSamplerLodBias = default, float maxSamplerAnisotropy = default, uint maxViewports = default, uint* maxViewportDimensions = default, float* viewportBoundsRange = default, uint viewportSubPixelBits = default, ulong minMemoryMapAlignment = default, ulong minTexelBufferOffsetAlignment = default, ulong minUniformBufferOffsetAlignment = default, ulong minStorageBufferOffsetAlignment = default, int minTexelOffset = default, uint maxTexelOffset = default, int minTexelGatherOffset = default, uint maxTexelGatherOffset = default, float minInterpolationOffset = default, float maxInterpolationOffset = default, uint subPixelInterpolationOffsetBits = default, uint maxFramebufferWidth = default, uint maxFramebufferHeight = default, uint maxFramebufferLayers = default, uint framebufferColorSampleCounts = default, uint framebufferDepthSampleCounts = default, uint framebufferStencilSampleCounts = default, uint framebufferNoAttachmentsSampleCounts = default, uint maxColorAttachments = default, uint sampledImageColorSampleCounts = default, uint sampledImageIntegerSampleCounts = default, uint sampledImageDepthSampleCounts = default, uint sampledImageStencilSampleCounts = default, uint storageImageSampleCounts = default, uint maxSampleMaskWords = default, uint timestampComputeAndGraphics = default, float timestampPeriod = default, uint maxClipDistances = default, uint maxCullDistances = default, uint maxCombinedClipAndCullDistances = default, uint discreteQueuePriorities = default, float* pointSizeRange = default, float* lineWidthRange = default, float pointSizeGranularity = default, float lineWidthGranularity = default, uint strictLines = default, uint standardSampleLocations = default, ulong optimalBufferCopyOffsetAlignment = default, ulong optimalBufferCopyRowPitchAlignment = default, ulong nonCoherentAtomSize = default)
		{
			MaxImageDimension1D = maxImageDimension1D;
			MaxImageDimension2D = maxImageDimension2D;
			MaxImageDimension3D = maxImageDimension3D;
			MaxImageDimensionCube = maxImageDimensionCube;
			MaxImageArrayLayers = maxImageArrayLayers;
			MaxTexelBufferElements = maxTexelBufferElements;
			MaxUniformBufferRange = maxUniformBufferRange;
			MaxStorageBufferRange = maxStorageBufferRange;
			MaxPushConstantsSize = maxPushConstantsSize;
			MaxMemoryAllocationCount = maxMemoryAllocationCount;
			MaxSamplerAllocationCount = maxSamplerAllocationCount;
			BufferImageGranularity = bufferImageGranularity;
			SparseAddressSpaceSize = sparseAddressSpaceSize;
			MaxBoundDescriptorSets = maxBoundDescriptorSets;
			MaxPerStageDescriptorSamplers = maxPerStageDescriptorSamplers;
			MaxPerStageDescriptorUniformBuffers = maxPerStageDescriptorUniformBuffers;
			MaxPerStageDescriptorStorageBuffers = maxPerStageDescriptorStorageBuffers;
			MaxPerStageDescriptorSampledImages = maxPerStageDescriptorSampledImages;
			MaxPerStageDescriptorStorageImages = maxPerStageDescriptorStorageImages;
			MaxPerStageDescriptorInputAttachments = maxPerStageDescriptorInputAttachments;
			MaxPerStageResources = maxPerStageResources;
			MaxDescriptorSetSamplers = maxDescriptorSetSamplers;
			MaxDescriptorSetUniformBuffers = maxDescriptorSetUniformBuffers;
			MaxDescriptorSetUniformBuffersDynamic = maxDescriptorSetUniformBuffersDynamic;
			MaxDescriptorSetStorageBuffers = maxDescriptorSetStorageBuffers;
			MaxDescriptorSetStorageBuffersDynamic = maxDescriptorSetStorageBuffersDynamic;
			MaxDescriptorSetSampledImages = maxDescriptorSetSampledImages;
			MaxDescriptorSetStorageImages = maxDescriptorSetStorageImages;
			MaxDescriptorSetInputAttachments = maxDescriptorSetInputAttachments;
			MaxVertexInputAttributes = maxVertexInputAttributes;
			MaxVertexInputBindings = maxVertexInputBindings;
			MaxVertexInputAttributeOffset = maxVertexInputAttributeOffset;
			MaxVertexInputBindingStride = maxVertexInputBindingStride;
			MaxVertexOutputComponents = maxVertexOutputComponents;
			MaxTessellationGenerationLevel = maxTessellationGenerationLevel;
			MaxTessellationPatchSize = maxTessellationPatchSize;
			MaxTessellationControlPerVertexInputComponents = maxTessellationControlPerVertexInputComponents;
			MaxTessellationControlPerVertexOutputComponents = maxTessellationControlPerVertexOutputComponents;
			MaxTessellationControlPerPatchOutputComponents = maxTessellationControlPerPatchOutputComponents;
			MaxTessellationControlTotalOutputComponents = maxTessellationControlTotalOutputComponents;
			MaxTessellationEvaluationInputComponents = maxTessellationEvaluationInputComponents;
			MaxTessellationEvaluationOutputComponents = maxTessellationEvaluationOutputComponents;
			MaxGeometryShaderInvocations = maxGeometryShaderInvocations;
			MaxGeometryInputComponents = maxGeometryInputComponents;
			MaxGeometryOutputComponents = maxGeometryOutputComponents;
			MaxGeometryOutputVertices = maxGeometryOutputVertices;
			MaxGeometryTotalOutputComponents = maxGeometryTotalOutputComponents;
			MaxFragmentInputComponents = maxFragmentInputComponents;
			MaxFragmentOutputAttachments = maxFragmentOutputAttachments;
			MaxFragmentDualSrcAttachments = maxFragmentDualSrcAttachments;
			MaxFragmentCombinedOutputResources = maxFragmentCombinedOutputResources;
			MaxComputeSharedMemorySize = maxComputeSharedMemorySize;
			if (maxComputeWorkGroupCount != default)
			{
				MaxComputeWorkGroupCount_0 = maxComputeWorkGroupCount[0];
				MaxComputeWorkGroupCount_1 = maxComputeWorkGroupCount[1];
				MaxComputeWorkGroupCount_2 = maxComputeWorkGroupCount[2];
			}
			MaxComputeWorkGroupInvocations = maxComputeWorkGroupInvocations;
			if (maxComputeWorkGroupSize != default)
			{
				MaxComputeWorkGroupSize_0 = maxComputeWorkGroupSize[0];
				MaxComputeWorkGroupSize_1 = maxComputeWorkGroupSize[1];
				MaxComputeWorkGroupSize_2 = maxComputeWorkGroupSize[2];
			}
			SubPixelPrecisionBits = subPixelPrecisionBits;
			SubTexelPrecisionBits = subTexelPrecisionBits;
			MipmapPrecisionBits = mipmapPrecisionBits;
			MaxDrawIndexedIndexValue = maxDrawIndexedIndexValue;
			MaxDrawIndirectCount = maxDrawIndirectCount;
			MaxSamplerLodBias = maxSamplerLodBias;
			MaxSamplerAnisotropy = maxSamplerAnisotropy;
			MaxViewports = maxViewports;
			if (maxViewportDimensions != default)
			{
				MaxViewportDimensions_0 = maxViewportDimensions[0];
				MaxViewportDimensions_1 = maxViewportDimensions[1];
			}
			if (viewportBoundsRange != default)
			{
				ViewportBoundsRange_0 = viewportBoundsRange[0];
				ViewportBoundsRange_1 = viewportBoundsRange[1];
			}
			ViewportSubPixelBits = viewportSubPixelBits;
			MinMemoryMapAlignment = minMemoryMapAlignment;
			MinTexelBufferOffsetAlignment = minTexelBufferOffsetAlignment;
			MinUniformBufferOffsetAlignment = minUniformBufferOffsetAlignment;
			MinStorageBufferOffsetAlignment = minStorageBufferOffsetAlignment;
			MinTexelOffset = minTexelOffset;
			MaxTexelOffset = maxTexelOffset;
			MinTexelGatherOffset = minTexelGatherOffset;
			MaxTexelGatherOffset = maxTexelGatherOffset;
			MinInterpolationOffset = minInterpolationOffset;
			MaxInterpolationOffset = maxInterpolationOffset;
			SubPixelInterpolationOffsetBits = subPixelInterpolationOffsetBits;
			MaxFramebufferWidth = maxFramebufferWidth;
			MaxFramebufferHeight = maxFramebufferHeight;
			MaxFramebufferLayers = maxFramebufferLayers;
			FramebufferColorSampleCounts = framebufferColorSampleCounts;
			FramebufferDepthSampleCounts = framebufferDepthSampleCounts;
			FramebufferStencilSampleCounts = framebufferStencilSampleCounts;
			FramebufferNoAttachmentsSampleCounts = framebufferNoAttachmentsSampleCounts;
			MaxColorAttachments = maxColorAttachments;
			SampledImageColorSampleCounts = sampledImageColorSampleCounts;
			SampledImageIntegerSampleCounts = sampledImageIntegerSampleCounts;
			SampledImageDepthSampleCounts = sampledImageDepthSampleCounts;
			SampledImageStencilSampleCounts = sampledImageStencilSampleCounts;
			StorageImageSampleCounts = storageImageSampleCounts;
			MaxSampleMaskWords = maxSampleMaskWords;
			TimestampComputeAndGraphics = timestampComputeAndGraphics;
			TimestampPeriod = timestampPeriod;
			MaxClipDistances = maxClipDistances;
			MaxCullDistances = maxCullDistances;
			MaxCombinedClipAndCullDistances = maxCombinedClipAndCullDistances;
			DiscreteQueuePriorities = discreteQueuePriorities;
			if (pointSizeRange != default)
			{
				PointSizeRange_0 = pointSizeRange[0];
				PointSizeRange_1 = pointSizeRange[1];
			}
			if (lineWidthRange != default)
			{
				LineWidthRange_0 = lineWidthRange[0];
				LineWidthRange_1 = lineWidthRange[1];
			}
			PointSizeGranularity = pointSizeGranularity;
			LineWidthGranularity = lineWidthGranularity;
			StrictLines = strictLines;
			StandardSampleLocations = standardSampleLocations;
			OptimalBufferCopyOffsetAlignment = optimalBufferCopyOffsetAlignment;
			OptimalBufferCopyRowPitchAlignment = optimalBufferCopyRowPitchAlignment;
			NonCoherentAtomSize = nonCoherentAtomSize;
		}

		public unsafe VkPhysicalDeviceLimits(uint maxImageDimension1D = default, uint maxImageDimension2D = default, uint maxImageDimension3D = default, uint maxImageDimensionCube = default, uint maxImageArrayLayers = default, uint maxTexelBufferElements = default, uint maxUniformBufferRange = default, uint maxStorageBufferRange = default, uint maxPushConstantsSize = default, uint maxMemoryAllocationCount = default, uint maxSamplerAllocationCount = default, ulong bufferImageGranularity = default, ulong sparseAddressSpaceSize = default, uint maxBoundDescriptorSets = default, uint maxPerStageDescriptorSamplers = default, uint maxPerStageDescriptorUniformBuffers = default, uint maxPerStageDescriptorStorageBuffers = default, uint maxPerStageDescriptorSampledImages = default, uint maxPerStageDescriptorStorageImages = default, uint maxPerStageDescriptorInputAttachments = default, uint maxPerStageResources = default, uint maxDescriptorSetSamplers = default, uint maxDescriptorSetUniformBuffers = default, uint maxDescriptorSetUniformBuffersDynamic = default, uint maxDescriptorSetStorageBuffers = default, uint maxDescriptorSetStorageBuffersDynamic = default, uint maxDescriptorSetSampledImages = default, uint maxDescriptorSetStorageImages = default, uint maxDescriptorSetInputAttachments = default, uint maxVertexInputAttributes = default, uint maxVertexInputBindings = default, uint maxVertexInputAttributeOffset = default, uint maxVertexInputBindingStride = default, uint maxVertexOutputComponents = default, uint maxTessellationGenerationLevel = default, uint maxTessellationPatchSize = default, uint maxTessellationControlPerVertexInputComponents = default, uint maxTessellationControlPerVertexOutputComponents = default, uint maxTessellationControlPerPatchOutputComponents = default, uint maxTessellationControlTotalOutputComponents = default, uint maxTessellationEvaluationInputComponents = default, uint maxTessellationEvaluationOutputComponents = default, uint maxGeometryShaderInvocations = default, uint maxGeometryInputComponents = default, uint maxGeometryOutputComponents = default, uint maxGeometryOutputVertices = default, uint maxGeometryTotalOutputComponents = default, uint maxFragmentInputComponents = default, uint maxFragmentOutputAttachments = default, uint maxFragmentDualSrcAttachments = default, uint maxFragmentCombinedOutputResources = default, uint maxComputeSharedMemorySize = default, Span<uint> maxComputeWorkGroupCount = default, uint maxComputeWorkGroupInvocations = default, Span<uint> maxComputeWorkGroupSize = default, uint subPixelPrecisionBits = default, uint subTexelPrecisionBits = default, uint mipmapPrecisionBits = default, uint maxDrawIndexedIndexValue = default, uint maxDrawIndirectCount = default, float maxSamplerLodBias = default, float maxSamplerAnisotropy = default, uint maxViewports = default, Span<uint> maxViewportDimensions = default, Span<float> viewportBoundsRange = default, uint viewportSubPixelBits = default, ulong minMemoryMapAlignment = default, ulong minTexelBufferOffsetAlignment = default, ulong minUniformBufferOffsetAlignment = default, ulong minStorageBufferOffsetAlignment = default, int minTexelOffset = default, uint maxTexelOffset = default, int minTexelGatherOffset = default, uint maxTexelGatherOffset = default, float minInterpolationOffset = default, float maxInterpolationOffset = default, uint subPixelInterpolationOffsetBits = default, uint maxFramebufferWidth = default, uint maxFramebufferHeight = default, uint maxFramebufferLayers = default, uint framebufferColorSampleCounts = default, uint framebufferDepthSampleCounts = default, uint framebufferStencilSampleCounts = default, uint framebufferNoAttachmentsSampleCounts = default, uint maxColorAttachments = default, uint sampledImageColorSampleCounts = default, uint sampledImageIntegerSampleCounts = default, uint sampledImageDepthSampleCounts = default, uint sampledImageStencilSampleCounts = default, uint storageImageSampleCounts = default, uint maxSampleMaskWords = default, uint timestampComputeAndGraphics = default, float timestampPeriod = default, uint maxClipDistances = default, uint maxCullDistances = default, uint maxCombinedClipAndCullDistances = default, uint discreteQueuePriorities = default, Span<float> pointSizeRange = default, Span<float> lineWidthRange = default, float pointSizeGranularity = default, float lineWidthGranularity = default, uint strictLines = default, uint standardSampleLocations = default, ulong optimalBufferCopyOffsetAlignment = default, ulong optimalBufferCopyRowPitchAlignment = default, ulong nonCoherentAtomSize = default)
		{
			MaxImageDimension1D = maxImageDimension1D;
			MaxImageDimension2D = maxImageDimension2D;
			MaxImageDimension3D = maxImageDimension3D;
			MaxImageDimensionCube = maxImageDimensionCube;
			MaxImageArrayLayers = maxImageArrayLayers;
			MaxTexelBufferElements = maxTexelBufferElements;
			MaxUniformBufferRange = maxUniformBufferRange;
			MaxStorageBufferRange = maxStorageBufferRange;
			MaxPushConstantsSize = maxPushConstantsSize;
			MaxMemoryAllocationCount = maxMemoryAllocationCount;
			MaxSamplerAllocationCount = maxSamplerAllocationCount;
			BufferImageGranularity = bufferImageGranularity;
			SparseAddressSpaceSize = sparseAddressSpaceSize;
			MaxBoundDescriptorSets = maxBoundDescriptorSets;
			MaxPerStageDescriptorSamplers = maxPerStageDescriptorSamplers;
			MaxPerStageDescriptorUniformBuffers = maxPerStageDescriptorUniformBuffers;
			MaxPerStageDescriptorStorageBuffers = maxPerStageDescriptorStorageBuffers;
			MaxPerStageDescriptorSampledImages = maxPerStageDescriptorSampledImages;
			MaxPerStageDescriptorStorageImages = maxPerStageDescriptorStorageImages;
			MaxPerStageDescriptorInputAttachments = maxPerStageDescriptorInputAttachments;
			MaxPerStageResources = maxPerStageResources;
			MaxDescriptorSetSamplers = maxDescriptorSetSamplers;
			MaxDescriptorSetUniformBuffers = maxDescriptorSetUniformBuffers;
			MaxDescriptorSetUniformBuffersDynamic = maxDescriptorSetUniformBuffersDynamic;
			MaxDescriptorSetStorageBuffers = maxDescriptorSetStorageBuffers;
			MaxDescriptorSetStorageBuffersDynamic = maxDescriptorSetStorageBuffersDynamic;
			MaxDescriptorSetSampledImages = maxDescriptorSetSampledImages;
			MaxDescriptorSetStorageImages = maxDescriptorSetStorageImages;
			MaxDescriptorSetInputAttachments = maxDescriptorSetInputAttachments;
			MaxVertexInputAttributes = maxVertexInputAttributes;
			MaxVertexInputBindings = maxVertexInputBindings;
			MaxVertexInputAttributeOffset = maxVertexInputAttributeOffset;
			MaxVertexInputBindingStride = maxVertexInputBindingStride;
			MaxVertexOutputComponents = maxVertexOutputComponents;
			MaxTessellationGenerationLevel = maxTessellationGenerationLevel;
			MaxTessellationPatchSize = maxTessellationPatchSize;
			MaxTessellationControlPerVertexInputComponents = maxTessellationControlPerVertexInputComponents;
			MaxTessellationControlPerVertexOutputComponents = maxTessellationControlPerVertexOutputComponents;
			MaxTessellationControlPerPatchOutputComponents = maxTessellationControlPerPatchOutputComponents;
			MaxTessellationControlTotalOutputComponents = maxTessellationControlTotalOutputComponents;
			MaxTessellationEvaluationInputComponents = maxTessellationEvaluationInputComponents;
			MaxTessellationEvaluationOutputComponents = maxTessellationEvaluationOutputComponents;
			MaxGeometryShaderInvocations = maxGeometryShaderInvocations;
			MaxGeometryInputComponents = maxGeometryInputComponents;
			MaxGeometryOutputComponents = maxGeometryOutputComponents;
			MaxGeometryOutputVertices = maxGeometryOutputVertices;
			MaxGeometryTotalOutputComponents = maxGeometryTotalOutputComponents;
			MaxFragmentInputComponents = maxFragmentInputComponents;
			MaxFragmentOutputAttachments = maxFragmentOutputAttachments;
			MaxFragmentDualSrcAttachments = maxFragmentDualSrcAttachments;
			MaxFragmentCombinedOutputResources = maxFragmentCombinedOutputResources;
			MaxComputeSharedMemorySize = maxComputeSharedMemorySize;
			if (maxComputeWorkGroupCount != default)
			{
				MaxComputeWorkGroupCount_0 = maxComputeWorkGroupCount[0];
				MaxComputeWorkGroupCount_1 = maxComputeWorkGroupCount[1];
				MaxComputeWorkGroupCount_2 = maxComputeWorkGroupCount[2];
			}
			MaxComputeWorkGroupInvocations = maxComputeWorkGroupInvocations;
			if (maxComputeWorkGroupSize != default)
			{
				MaxComputeWorkGroupSize_0 = maxComputeWorkGroupSize[0];
				MaxComputeWorkGroupSize_1 = maxComputeWorkGroupSize[1];
				MaxComputeWorkGroupSize_2 = maxComputeWorkGroupSize[2];
			}
			SubPixelPrecisionBits = subPixelPrecisionBits;
			SubTexelPrecisionBits = subTexelPrecisionBits;
			MipmapPrecisionBits = mipmapPrecisionBits;
			MaxDrawIndexedIndexValue = maxDrawIndexedIndexValue;
			MaxDrawIndirectCount = maxDrawIndirectCount;
			MaxSamplerLodBias = maxSamplerLodBias;
			MaxSamplerAnisotropy = maxSamplerAnisotropy;
			MaxViewports = maxViewports;
			if (maxViewportDimensions != default)
			{
				MaxViewportDimensions_0 = maxViewportDimensions[0];
				MaxViewportDimensions_1 = maxViewportDimensions[1];
			}
			if (viewportBoundsRange != default)
			{
				ViewportBoundsRange_0 = viewportBoundsRange[0];
				ViewportBoundsRange_1 = viewportBoundsRange[1];
			}
			ViewportSubPixelBits = viewportSubPixelBits;
			MinMemoryMapAlignment = minMemoryMapAlignment;
			MinTexelBufferOffsetAlignment = minTexelBufferOffsetAlignment;
			MinUniformBufferOffsetAlignment = minUniformBufferOffsetAlignment;
			MinStorageBufferOffsetAlignment = minStorageBufferOffsetAlignment;
			MinTexelOffset = minTexelOffset;
			MaxTexelOffset = maxTexelOffset;
			MinTexelGatherOffset = minTexelGatherOffset;
			MaxTexelGatherOffset = maxTexelGatherOffset;
			MinInterpolationOffset = minInterpolationOffset;
			MaxInterpolationOffset = maxInterpolationOffset;
			SubPixelInterpolationOffsetBits = subPixelInterpolationOffsetBits;
			MaxFramebufferWidth = maxFramebufferWidth;
			MaxFramebufferHeight = maxFramebufferHeight;
			MaxFramebufferLayers = maxFramebufferLayers;
			FramebufferColorSampleCounts = framebufferColorSampleCounts;
			FramebufferDepthSampleCounts = framebufferDepthSampleCounts;
			FramebufferStencilSampleCounts = framebufferStencilSampleCounts;
			FramebufferNoAttachmentsSampleCounts = framebufferNoAttachmentsSampleCounts;
			MaxColorAttachments = maxColorAttachments;
			SampledImageColorSampleCounts = sampledImageColorSampleCounts;
			SampledImageIntegerSampleCounts = sampledImageIntegerSampleCounts;
			SampledImageDepthSampleCounts = sampledImageDepthSampleCounts;
			SampledImageStencilSampleCounts = sampledImageStencilSampleCounts;
			StorageImageSampleCounts = storageImageSampleCounts;
			MaxSampleMaskWords = maxSampleMaskWords;
			TimestampComputeAndGraphics = timestampComputeAndGraphics;
			TimestampPeriod = timestampPeriod;
			MaxClipDistances = maxClipDistances;
			MaxCullDistances = maxCullDistances;
			MaxCombinedClipAndCullDistances = maxCombinedClipAndCullDistances;
			DiscreteQueuePriorities = discreteQueuePriorities;
			if (pointSizeRange != default)
			{
				PointSizeRange_0 = pointSizeRange[0];
				PointSizeRange_1 = pointSizeRange[1];
			}
			if (lineWidthRange != default)
			{
				LineWidthRange_0 = lineWidthRange[0];
				LineWidthRange_1 = lineWidthRange[1];
			}
			PointSizeGranularity = pointSizeGranularity;
			LineWidthGranularity = lineWidthGranularity;
			StrictLines = strictLines;
			StandardSampleLocations = standardSampleLocations;
			OptimalBufferCopyOffsetAlignment = optimalBufferCopyOffsetAlignment;
			OptimalBufferCopyRowPitchAlignment = optimalBufferCopyRowPitchAlignment;
			NonCoherentAtomSize = nonCoherentAtomSize;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceMemoryProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceMemoryProperties
	{
		[NativeName(NativeNameType.Field, "memoryTypeCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MemoryTypeCount;
		[NativeName(NativeNameType.Field, "memoryTypes")]
		[NativeName(NativeNameType.Type, "VkMemoryType[32]")]
		public VkMemoryType MemoryTypes_0;
		public VkMemoryType MemoryTypes_1;
		public VkMemoryType MemoryTypes_2;
		public VkMemoryType MemoryTypes_3;
		public VkMemoryType MemoryTypes_4;
		public VkMemoryType MemoryTypes_5;
		public VkMemoryType MemoryTypes_6;
		public VkMemoryType MemoryTypes_7;
		public VkMemoryType MemoryTypes_8;
		public VkMemoryType MemoryTypes_9;
		public VkMemoryType MemoryTypes_10;
		public VkMemoryType MemoryTypes_11;
		public VkMemoryType MemoryTypes_12;
		public VkMemoryType MemoryTypes_13;
		public VkMemoryType MemoryTypes_14;
		public VkMemoryType MemoryTypes_15;
		public VkMemoryType MemoryTypes_16;
		public VkMemoryType MemoryTypes_17;
		public VkMemoryType MemoryTypes_18;
		public VkMemoryType MemoryTypes_19;
		public VkMemoryType MemoryTypes_20;
		public VkMemoryType MemoryTypes_21;
		public VkMemoryType MemoryTypes_22;
		public VkMemoryType MemoryTypes_23;
		public VkMemoryType MemoryTypes_24;
		public VkMemoryType MemoryTypes_25;
		public VkMemoryType MemoryTypes_26;
		public VkMemoryType MemoryTypes_27;
		public VkMemoryType MemoryTypes_28;
		public VkMemoryType MemoryTypes_29;
		public VkMemoryType MemoryTypes_30;
		public VkMemoryType MemoryTypes_31;
		[NativeName(NativeNameType.Field, "memoryHeapCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MemoryHeapCount;
		[NativeName(NativeNameType.Field, "memoryHeaps")]
		[NativeName(NativeNameType.Type, "VkMemoryHeap[16]")]
		public VkMemoryHeap MemoryHeaps_0;
		public VkMemoryHeap MemoryHeaps_1;
		public VkMemoryHeap MemoryHeaps_2;
		public VkMemoryHeap MemoryHeaps_3;
		public VkMemoryHeap MemoryHeaps_4;
		public VkMemoryHeap MemoryHeaps_5;
		public VkMemoryHeap MemoryHeaps_6;
		public VkMemoryHeap MemoryHeaps_7;
		public VkMemoryHeap MemoryHeaps_8;
		public VkMemoryHeap MemoryHeaps_9;
		public VkMemoryHeap MemoryHeaps_10;
		public VkMemoryHeap MemoryHeaps_11;
		public VkMemoryHeap MemoryHeaps_12;
		public VkMemoryHeap MemoryHeaps_13;
		public VkMemoryHeap MemoryHeaps_14;
		public VkMemoryHeap MemoryHeaps_15;

		public unsafe VkPhysicalDeviceMemoryProperties(uint memoryTypeCount = default, VkMemoryType* memoryTypes = default, uint memoryHeapCount = default, VkMemoryHeap* memoryHeaps = default)
		{
			MemoryTypeCount = memoryTypeCount;
			if (memoryTypes != default)
			{
				MemoryTypes_0 = memoryTypes[0];
				MemoryTypes_1 = memoryTypes[1];
				MemoryTypes_2 = memoryTypes[2];
				MemoryTypes_3 = memoryTypes[3];
				MemoryTypes_4 = memoryTypes[4];
				MemoryTypes_5 = memoryTypes[5];
				MemoryTypes_6 = memoryTypes[6];
				MemoryTypes_7 = memoryTypes[7];
				MemoryTypes_8 = memoryTypes[8];
				MemoryTypes_9 = memoryTypes[9];
				MemoryTypes_10 = memoryTypes[10];
				MemoryTypes_11 = memoryTypes[11];
				MemoryTypes_12 = memoryTypes[12];
				MemoryTypes_13 = memoryTypes[13];
				MemoryTypes_14 = memoryTypes[14];
				MemoryTypes_15 = memoryTypes[15];
				MemoryTypes_16 = memoryTypes[16];
				MemoryTypes_17 = memoryTypes[17];
				MemoryTypes_18 = memoryTypes[18];
				MemoryTypes_19 = memoryTypes[19];
				MemoryTypes_20 = memoryTypes[20];
				MemoryTypes_21 = memoryTypes[21];
				MemoryTypes_22 = memoryTypes[22];
				MemoryTypes_23 = memoryTypes[23];
				MemoryTypes_24 = memoryTypes[24];
				MemoryTypes_25 = memoryTypes[25];
				MemoryTypes_26 = memoryTypes[26];
				MemoryTypes_27 = memoryTypes[27];
				MemoryTypes_28 = memoryTypes[28];
				MemoryTypes_29 = memoryTypes[29];
				MemoryTypes_30 = memoryTypes[30];
				MemoryTypes_31 = memoryTypes[31];
			}
			MemoryHeapCount = memoryHeapCount;
			if (memoryHeaps != default)
			{
				MemoryHeaps_0 = memoryHeaps[0];
				MemoryHeaps_1 = memoryHeaps[1];
				MemoryHeaps_2 = memoryHeaps[2];
				MemoryHeaps_3 = memoryHeaps[3];
				MemoryHeaps_4 = memoryHeaps[4];
				MemoryHeaps_5 = memoryHeaps[5];
				MemoryHeaps_6 = memoryHeaps[6];
				MemoryHeaps_7 = memoryHeaps[7];
				MemoryHeaps_8 = memoryHeaps[8];
				MemoryHeaps_9 = memoryHeaps[9];
				MemoryHeaps_10 = memoryHeaps[10];
				MemoryHeaps_11 = memoryHeaps[11];
				MemoryHeaps_12 = memoryHeaps[12];
				MemoryHeaps_13 = memoryHeaps[13];
				MemoryHeaps_14 = memoryHeaps[14];
				MemoryHeaps_15 = memoryHeaps[15];
			}
		}

		public unsafe VkPhysicalDeviceMemoryProperties(uint memoryTypeCount = default, Span<VkMemoryType> memoryTypes = default, uint memoryHeapCount = default, Span<VkMemoryHeap> memoryHeaps = default)
		{
			MemoryTypeCount = memoryTypeCount;
			if (memoryTypes != default)
			{
				MemoryTypes_0 = memoryTypes[0];
				MemoryTypes_1 = memoryTypes[1];
				MemoryTypes_2 = memoryTypes[2];
				MemoryTypes_3 = memoryTypes[3];
				MemoryTypes_4 = memoryTypes[4];
				MemoryTypes_5 = memoryTypes[5];
				MemoryTypes_6 = memoryTypes[6];
				MemoryTypes_7 = memoryTypes[7];
				MemoryTypes_8 = memoryTypes[8];
				MemoryTypes_9 = memoryTypes[9];
				MemoryTypes_10 = memoryTypes[10];
				MemoryTypes_11 = memoryTypes[11];
				MemoryTypes_12 = memoryTypes[12];
				MemoryTypes_13 = memoryTypes[13];
				MemoryTypes_14 = memoryTypes[14];
				MemoryTypes_15 = memoryTypes[15];
				MemoryTypes_16 = memoryTypes[16];
				MemoryTypes_17 = memoryTypes[17];
				MemoryTypes_18 = memoryTypes[18];
				MemoryTypes_19 = memoryTypes[19];
				MemoryTypes_20 = memoryTypes[20];
				MemoryTypes_21 = memoryTypes[21];
				MemoryTypes_22 = memoryTypes[22];
				MemoryTypes_23 = memoryTypes[23];
				MemoryTypes_24 = memoryTypes[24];
				MemoryTypes_25 = memoryTypes[25];
				MemoryTypes_26 = memoryTypes[26];
				MemoryTypes_27 = memoryTypes[27];
				MemoryTypes_28 = memoryTypes[28];
				MemoryTypes_29 = memoryTypes[29];
				MemoryTypes_30 = memoryTypes[30];
				MemoryTypes_31 = memoryTypes[31];
			}
			MemoryHeapCount = memoryHeapCount;
			if (memoryHeaps != default)
			{
				MemoryHeaps_0 = memoryHeaps[0];
				MemoryHeaps_1 = memoryHeaps[1];
				MemoryHeaps_2 = memoryHeaps[2];
				MemoryHeaps_3 = memoryHeaps[3];
				MemoryHeaps_4 = memoryHeaps[4];
				MemoryHeaps_5 = memoryHeaps[5];
				MemoryHeaps_6 = memoryHeaps[6];
				MemoryHeaps_7 = memoryHeaps[7];
				MemoryHeaps_8 = memoryHeaps[8];
				MemoryHeaps_9 = memoryHeaps[9];
				MemoryHeaps_10 = memoryHeaps[10];
				MemoryHeaps_11 = memoryHeaps[11];
				MemoryHeaps_12 = memoryHeaps[12];
				MemoryHeaps_13 = memoryHeaps[13];
				MemoryHeaps_14 = memoryHeaps[14];
				MemoryHeaps_15 = memoryHeaps[15];
			}
		}


		public unsafe Span<VkMemoryType> MemoryTypes
		
		{
			get
			{
				fixed (VkMemoryType* p = &this.MemoryTypes_0)
				{
					return new Span<VkMemoryType>(p, 32);
				}
			}
		}
		public unsafe Span<VkMemoryHeap> MemoryHeaps
		
		{
			get
			{
				fixed (VkMemoryHeap* p = &this.MemoryHeaps_0)
				{
					return new Span<VkMemoryHeap>(p, 16);
				}
			}
		}
	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceSparseProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceSparseProperties
	{
		[NativeName(NativeNameType.Field, "residencyStandard2DBlockShape")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ResidencyStandard2DBlockShape;
		[NativeName(NativeNameType.Field, "residencyStandard2DMultisampleBlockShape")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ResidencyStandard2DMultisampleBlockShape;
		[NativeName(NativeNameType.Field, "residencyStandard3DBlockShape")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ResidencyStandard3DBlockShape;
		[NativeName(NativeNameType.Field, "residencyAlignedMipSize")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ResidencyAlignedMipSize;
		[NativeName(NativeNameType.Field, "residencyNonResidentStrict")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ResidencyNonResidentStrict;

		public unsafe VkPhysicalDeviceSparseProperties(uint residencyStandard2DBlockShape = default, uint residencyStandard2DMultisampleBlockShape = default, uint residencyStandard3DBlockShape = default, uint residencyAlignedMipSize = default, uint residencyNonResidentStrict = default)
		{
			ResidencyStandard2DBlockShape = residencyStandard2DBlockShape;
			ResidencyStandard2DMultisampleBlockShape = residencyStandard2DMultisampleBlockShape;
			ResidencyStandard3DBlockShape = residencyStandard3DBlockShape;
			ResidencyAlignedMipSize = residencyAlignedMipSize;
			ResidencyNonResidentStrict = residencyNonResidentStrict;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceProperties
	{
		[NativeName(NativeNameType.Field, "apiVersion")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ApiVersion;
		[NativeName(NativeNameType.Field, "driverVersion")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DriverVersion;
		[NativeName(NativeNameType.Field, "vendorID")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VendorID;
		[NativeName(NativeNameType.Field, "deviceID")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeviceID;
		[NativeName(NativeNameType.Field, "deviceType")]
		[NativeName(NativeNameType.Type, "VkPhysicalDeviceType")]
		public VkPhysicalDeviceType DeviceType;
		[NativeName(NativeNameType.Field, "deviceName")]
		[NativeName(NativeNameType.Type, "char[256]")]
		public byte DeviceName_0;
		public byte DeviceName_1;
		public byte DeviceName_2;
		public byte DeviceName_3;
		public byte DeviceName_4;
		public byte DeviceName_5;
		public byte DeviceName_6;
		public byte DeviceName_7;
		public byte DeviceName_8;
		public byte DeviceName_9;
		public byte DeviceName_10;
		public byte DeviceName_11;
		public byte DeviceName_12;
		public byte DeviceName_13;
		public byte DeviceName_14;
		public byte DeviceName_15;
		public byte DeviceName_16;
		public byte DeviceName_17;
		public byte DeviceName_18;
		public byte DeviceName_19;
		public byte DeviceName_20;
		public byte DeviceName_21;
		public byte DeviceName_22;
		public byte DeviceName_23;
		public byte DeviceName_24;
		public byte DeviceName_25;
		public byte DeviceName_26;
		public byte DeviceName_27;
		public byte DeviceName_28;
		public byte DeviceName_29;
		public byte DeviceName_30;
		public byte DeviceName_31;
		public byte DeviceName_32;
		public byte DeviceName_33;
		public byte DeviceName_34;
		public byte DeviceName_35;
		public byte DeviceName_36;
		public byte DeviceName_37;
		public byte DeviceName_38;
		public byte DeviceName_39;
		public byte DeviceName_40;
		public byte DeviceName_41;
		public byte DeviceName_42;
		public byte DeviceName_43;
		public byte DeviceName_44;
		public byte DeviceName_45;
		public byte DeviceName_46;
		public byte DeviceName_47;
		public byte DeviceName_48;
		public byte DeviceName_49;
		public byte DeviceName_50;
		public byte DeviceName_51;
		public byte DeviceName_52;
		public byte DeviceName_53;
		public byte DeviceName_54;
		public byte DeviceName_55;
		public byte DeviceName_56;
		public byte DeviceName_57;
		public byte DeviceName_58;
		public byte DeviceName_59;
		public byte DeviceName_60;
		public byte DeviceName_61;
		public byte DeviceName_62;
		public byte DeviceName_63;
		public byte DeviceName_64;
		public byte DeviceName_65;
		public byte DeviceName_66;
		public byte DeviceName_67;
		public byte DeviceName_68;
		public byte DeviceName_69;
		public byte DeviceName_70;
		public byte DeviceName_71;
		public byte DeviceName_72;
		public byte DeviceName_73;
		public byte DeviceName_74;
		public byte DeviceName_75;
		public byte DeviceName_76;
		public byte DeviceName_77;
		public byte DeviceName_78;
		public byte DeviceName_79;
		public byte DeviceName_80;
		public byte DeviceName_81;
		public byte DeviceName_82;
		public byte DeviceName_83;
		public byte DeviceName_84;
		public byte DeviceName_85;
		public byte DeviceName_86;
		public byte DeviceName_87;
		public byte DeviceName_88;
		public byte DeviceName_89;
		public byte DeviceName_90;
		public byte DeviceName_91;
		public byte DeviceName_92;
		public byte DeviceName_93;
		public byte DeviceName_94;
		public byte DeviceName_95;
		public byte DeviceName_96;
		public byte DeviceName_97;
		public byte DeviceName_98;
		public byte DeviceName_99;
		public byte DeviceName_100;
		public byte DeviceName_101;
		public byte DeviceName_102;
		public byte DeviceName_103;
		public byte DeviceName_104;
		public byte DeviceName_105;
		public byte DeviceName_106;
		public byte DeviceName_107;
		public byte DeviceName_108;
		public byte DeviceName_109;
		public byte DeviceName_110;
		public byte DeviceName_111;
		public byte DeviceName_112;
		public byte DeviceName_113;
		public byte DeviceName_114;
		public byte DeviceName_115;
		public byte DeviceName_116;
		public byte DeviceName_117;
		public byte DeviceName_118;
		public byte DeviceName_119;
		public byte DeviceName_120;
		public byte DeviceName_121;
		public byte DeviceName_122;
		public byte DeviceName_123;
		public byte DeviceName_124;
		public byte DeviceName_125;
		public byte DeviceName_126;
		public byte DeviceName_127;
		public byte DeviceName_128;
		public byte DeviceName_129;
		public byte DeviceName_130;
		public byte DeviceName_131;
		public byte DeviceName_132;
		public byte DeviceName_133;
		public byte DeviceName_134;
		public byte DeviceName_135;
		public byte DeviceName_136;
		public byte DeviceName_137;
		public byte DeviceName_138;
		public byte DeviceName_139;
		public byte DeviceName_140;
		public byte DeviceName_141;
		public byte DeviceName_142;
		public byte DeviceName_143;
		public byte DeviceName_144;
		public byte DeviceName_145;
		public byte DeviceName_146;
		public byte DeviceName_147;
		public byte DeviceName_148;
		public byte DeviceName_149;
		public byte DeviceName_150;
		public byte DeviceName_151;
		public byte DeviceName_152;
		public byte DeviceName_153;
		public byte DeviceName_154;
		public byte DeviceName_155;
		public byte DeviceName_156;
		public byte DeviceName_157;
		public byte DeviceName_158;
		public byte DeviceName_159;
		public byte DeviceName_160;
		public byte DeviceName_161;
		public byte DeviceName_162;
		public byte DeviceName_163;
		public byte DeviceName_164;
		public byte DeviceName_165;
		public byte DeviceName_166;
		public byte DeviceName_167;
		public byte DeviceName_168;
		public byte DeviceName_169;
		public byte DeviceName_170;
		public byte DeviceName_171;
		public byte DeviceName_172;
		public byte DeviceName_173;
		public byte DeviceName_174;
		public byte DeviceName_175;
		public byte DeviceName_176;
		public byte DeviceName_177;
		public byte DeviceName_178;
		public byte DeviceName_179;
		public byte DeviceName_180;
		public byte DeviceName_181;
		public byte DeviceName_182;
		public byte DeviceName_183;
		public byte DeviceName_184;
		public byte DeviceName_185;
		public byte DeviceName_186;
		public byte DeviceName_187;
		public byte DeviceName_188;
		public byte DeviceName_189;
		public byte DeviceName_190;
		public byte DeviceName_191;
		public byte DeviceName_192;
		public byte DeviceName_193;
		public byte DeviceName_194;
		public byte DeviceName_195;
		public byte DeviceName_196;
		public byte DeviceName_197;
		public byte DeviceName_198;
		public byte DeviceName_199;
		public byte DeviceName_200;
		public byte DeviceName_201;
		public byte DeviceName_202;
		public byte DeviceName_203;
		public byte DeviceName_204;
		public byte DeviceName_205;
		public byte DeviceName_206;
		public byte DeviceName_207;
		public byte DeviceName_208;
		public byte DeviceName_209;
		public byte DeviceName_210;
		public byte DeviceName_211;
		public byte DeviceName_212;
		public byte DeviceName_213;
		public byte DeviceName_214;
		public byte DeviceName_215;
		public byte DeviceName_216;
		public byte DeviceName_217;
		public byte DeviceName_218;
		public byte DeviceName_219;
		public byte DeviceName_220;
		public byte DeviceName_221;
		public byte DeviceName_222;
		public byte DeviceName_223;
		public byte DeviceName_224;
		public byte DeviceName_225;
		public byte DeviceName_226;
		public byte DeviceName_227;
		public byte DeviceName_228;
		public byte DeviceName_229;
		public byte DeviceName_230;
		public byte DeviceName_231;
		public byte DeviceName_232;
		public byte DeviceName_233;
		public byte DeviceName_234;
		public byte DeviceName_235;
		public byte DeviceName_236;
		public byte DeviceName_237;
		public byte DeviceName_238;
		public byte DeviceName_239;
		public byte DeviceName_240;
		public byte DeviceName_241;
		public byte DeviceName_242;
		public byte DeviceName_243;
		public byte DeviceName_244;
		public byte DeviceName_245;
		public byte DeviceName_246;
		public byte DeviceName_247;
		public byte DeviceName_248;
		public byte DeviceName_249;
		public byte DeviceName_250;
		public byte DeviceName_251;
		public byte DeviceName_252;
		public byte DeviceName_253;
		public byte DeviceName_254;
		public byte DeviceName_255;
		[NativeName(NativeNameType.Field, "pipelineCacheUUID")]
		[NativeName(NativeNameType.Type, "uint8_t[16]")]
		public byte PipelineCacheUUID_0;
		public byte PipelineCacheUUID_1;
		public byte PipelineCacheUUID_2;
		public byte PipelineCacheUUID_3;
		public byte PipelineCacheUUID_4;
		public byte PipelineCacheUUID_5;
		public byte PipelineCacheUUID_6;
		public byte PipelineCacheUUID_7;
		public byte PipelineCacheUUID_8;
		public byte PipelineCacheUUID_9;
		public byte PipelineCacheUUID_10;
		public byte PipelineCacheUUID_11;
		public byte PipelineCacheUUID_12;
		public byte PipelineCacheUUID_13;
		public byte PipelineCacheUUID_14;
		public byte PipelineCacheUUID_15;
		[NativeName(NativeNameType.Field, "limits")]
		[NativeName(NativeNameType.Type, "VkPhysicalDeviceLimits")]
		public VkPhysicalDeviceLimits Limits;
		[NativeName(NativeNameType.Field, "sparseProperties")]
		[NativeName(NativeNameType.Type, "VkPhysicalDeviceSparseProperties")]
		public VkPhysicalDeviceSparseProperties SparseProperties;

		public unsafe VkPhysicalDeviceProperties(uint apiVersion = default, uint driverVersion = default, uint vendorID = default, uint deviceID = default, VkPhysicalDeviceType deviceType = default, byte* deviceName = default, byte* pipelineCacheUUID = default, VkPhysicalDeviceLimits limits = default, VkPhysicalDeviceSparseProperties sparseProperties = default)
		{
			ApiVersion = apiVersion;
			DriverVersion = driverVersion;
			VendorID = vendorID;
			DeviceID = deviceID;
			DeviceType = deviceType;
			if (deviceName != default)
			{
				DeviceName_0 = deviceName[0];
				DeviceName_1 = deviceName[1];
				DeviceName_2 = deviceName[2];
				DeviceName_3 = deviceName[3];
				DeviceName_4 = deviceName[4];
				DeviceName_5 = deviceName[5];
				DeviceName_6 = deviceName[6];
				DeviceName_7 = deviceName[7];
				DeviceName_8 = deviceName[8];
				DeviceName_9 = deviceName[9];
				DeviceName_10 = deviceName[10];
				DeviceName_11 = deviceName[11];
				DeviceName_12 = deviceName[12];
				DeviceName_13 = deviceName[13];
				DeviceName_14 = deviceName[14];
				DeviceName_15 = deviceName[15];
				DeviceName_16 = deviceName[16];
				DeviceName_17 = deviceName[17];
				DeviceName_18 = deviceName[18];
				DeviceName_19 = deviceName[19];
				DeviceName_20 = deviceName[20];
				DeviceName_21 = deviceName[21];
				DeviceName_22 = deviceName[22];
				DeviceName_23 = deviceName[23];
				DeviceName_24 = deviceName[24];
				DeviceName_25 = deviceName[25];
				DeviceName_26 = deviceName[26];
				DeviceName_27 = deviceName[27];
				DeviceName_28 = deviceName[28];
				DeviceName_29 = deviceName[29];
				DeviceName_30 = deviceName[30];
				DeviceName_31 = deviceName[31];
				DeviceName_32 = deviceName[32];
				DeviceName_33 = deviceName[33];
				DeviceName_34 = deviceName[34];
				DeviceName_35 = deviceName[35];
				DeviceName_36 = deviceName[36];
				DeviceName_37 = deviceName[37];
				DeviceName_38 = deviceName[38];
				DeviceName_39 = deviceName[39];
				DeviceName_40 = deviceName[40];
				DeviceName_41 = deviceName[41];
				DeviceName_42 = deviceName[42];
				DeviceName_43 = deviceName[43];
				DeviceName_44 = deviceName[44];
				DeviceName_45 = deviceName[45];
				DeviceName_46 = deviceName[46];
				DeviceName_47 = deviceName[47];
				DeviceName_48 = deviceName[48];
				DeviceName_49 = deviceName[49];
				DeviceName_50 = deviceName[50];
				DeviceName_51 = deviceName[51];
				DeviceName_52 = deviceName[52];
				DeviceName_53 = deviceName[53];
				DeviceName_54 = deviceName[54];
				DeviceName_55 = deviceName[55];
				DeviceName_56 = deviceName[56];
				DeviceName_57 = deviceName[57];
				DeviceName_58 = deviceName[58];
				DeviceName_59 = deviceName[59];
				DeviceName_60 = deviceName[60];
				DeviceName_61 = deviceName[61];
				DeviceName_62 = deviceName[62];
				DeviceName_63 = deviceName[63];
				DeviceName_64 = deviceName[64];
				DeviceName_65 = deviceName[65];
				DeviceName_66 = deviceName[66];
				DeviceName_67 = deviceName[67];
				DeviceName_68 = deviceName[68];
				DeviceName_69 = deviceName[69];
				DeviceName_70 = deviceName[70];
				DeviceName_71 = deviceName[71];
				DeviceName_72 = deviceName[72];
				DeviceName_73 = deviceName[73];
				DeviceName_74 = deviceName[74];
				DeviceName_75 = deviceName[75];
				DeviceName_76 = deviceName[76];
				DeviceName_77 = deviceName[77];
				DeviceName_78 = deviceName[78];
				DeviceName_79 = deviceName[79];
				DeviceName_80 = deviceName[80];
				DeviceName_81 = deviceName[81];
				DeviceName_82 = deviceName[82];
				DeviceName_83 = deviceName[83];
				DeviceName_84 = deviceName[84];
				DeviceName_85 = deviceName[85];
				DeviceName_86 = deviceName[86];
				DeviceName_87 = deviceName[87];
				DeviceName_88 = deviceName[88];
				DeviceName_89 = deviceName[89];
				DeviceName_90 = deviceName[90];
				DeviceName_91 = deviceName[91];
				DeviceName_92 = deviceName[92];
				DeviceName_93 = deviceName[93];
				DeviceName_94 = deviceName[94];
				DeviceName_95 = deviceName[95];
				DeviceName_96 = deviceName[96];
				DeviceName_97 = deviceName[97];
				DeviceName_98 = deviceName[98];
				DeviceName_99 = deviceName[99];
				DeviceName_100 = deviceName[100];
				DeviceName_101 = deviceName[101];
				DeviceName_102 = deviceName[102];
				DeviceName_103 = deviceName[103];
				DeviceName_104 = deviceName[104];
				DeviceName_105 = deviceName[105];
				DeviceName_106 = deviceName[106];
				DeviceName_107 = deviceName[107];
				DeviceName_108 = deviceName[108];
				DeviceName_109 = deviceName[109];
				DeviceName_110 = deviceName[110];
				DeviceName_111 = deviceName[111];
				DeviceName_112 = deviceName[112];
				DeviceName_113 = deviceName[113];
				DeviceName_114 = deviceName[114];
				DeviceName_115 = deviceName[115];
				DeviceName_116 = deviceName[116];
				DeviceName_117 = deviceName[117];
				DeviceName_118 = deviceName[118];
				DeviceName_119 = deviceName[119];
				DeviceName_120 = deviceName[120];
				DeviceName_121 = deviceName[121];
				DeviceName_122 = deviceName[122];
				DeviceName_123 = deviceName[123];
				DeviceName_124 = deviceName[124];
				DeviceName_125 = deviceName[125];
				DeviceName_126 = deviceName[126];
				DeviceName_127 = deviceName[127];
				DeviceName_128 = deviceName[128];
				DeviceName_129 = deviceName[129];
				DeviceName_130 = deviceName[130];
				DeviceName_131 = deviceName[131];
				DeviceName_132 = deviceName[132];
				DeviceName_133 = deviceName[133];
				DeviceName_134 = deviceName[134];
				DeviceName_135 = deviceName[135];
				DeviceName_136 = deviceName[136];
				DeviceName_137 = deviceName[137];
				DeviceName_138 = deviceName[138];
				DeviceName_139 = deviceName[139];
				DeviceName_140 = deviceName[140];
				DeviceName_141 = deviceName[141];
				DeviceName_142 = deviceName[142];
				DeviceName_143 = deviceName[143];
				DeviceName_144 = deviceName[144];
				DeviceName_145 = deviceName[145];
				DeviceName_146 = deviceName[146];
				DeviceName_147 = deviceName[147];
				DeviceName_148 = deviceName[148];
				DeviceName_149 = deviceName[149];
				DeviceName_150 = deviceName[150];
				DeviceName_151 = deviceName[151];
				DeviceName_152 = deviceName[152];
				DeviceName_153 = deviceName[153];
				DeviceName_154 = deviceName[154];
				DeviceName_155 = deviceName[155];
				DeviceName_156 = deviceName[156];
				DeviceName_157 = deviceName[157];
				DeviceName_158 = deviceName[158];
				DeviceName_159 = deviceName[159];
				DeviceName_160 = deviceName[160];
				DeviceName_161 = deviceName[161];
				DeviceName_162 = deviceName[162];
				DeviceName_163 = deviceName[163];
				DeviceName_164 = deviceName[164];
				DeviceName_165 = deviceName[165];
				DeviceName_166 = deviceName[166];
				DeviceName_167 = deviceName[167];
				DeviceName_168 = deviceName[168];
				DeviceName_169 = deviceName[169];
				DeviceName_170 = deviceName[170];
				DeviceName_171 = deviceName[171];
				DeviceName_172 = deviceName[172];
				DeviceName_173 = deviceName[173];
				DeviceName_174 = deviceName[174];
				DeviceName_175 = deviceName[175];
				DeviceName_176 = deviceName[176];
				DeviceName_177 = deviceName[177];
				DeviceName_178 = deviceName[178];
				DeviceName_179 = deviceName[179];
				DeviceName_180 = deviceName[180];
				DeviceName_181 = deviceName[181];
				DeviceName_182 = deviceName[182];
				DeviceName_183 = deviceName[183];
				DeviceName_184 = deviceName[184];
				DeviceName_185 = deviceName[185];
				DeviceName_186 = deviceName[186];
				DeviceName_187 = deviceName[187];
				DeviceName_188 = deviceName[188];
				DeviceName_189 = deviceName[189];
				DeviceName_190 = deviceName[190];
				DeviceName_191 = deviceName[191];
				DeviceName_192 = deviceName[192];
				DeviceName_193 = deviceName[193];
				DeviceName_194 = deviceName[194];
				DeviceName_195 = deviceName[195];
				DeviceName_196 = deviceName[196];
				DeviceName_197 = deviceName[197];
				DeviceName_198 = deviceName[198];
				DeviceName_199 = deviceName[199];
				DeviceName_200 = deviceName[200];
				DeviceName_201 = deviceName[201];
				DeviceName_202 = deviceName[202];
				DeviceName_203 = deviceName[203];
				DeviceName_204 = deviceName[204];
				DeviceName_205 = deviceName[205];
				DeviceName_206 = deviceName[206];
				DeviceName_207 = deviceName[207];
				DeviceName_208 = deviceName[208];
				DeviceName_209 = deviceName[209];
				DeviceName_210 = deviceName[210];
				DeviceName_211 = deviceName[211];
				DeviceName_212 = deviceName[212];
				DeviceName_213 = deviceName[213];
				DeviceName_214 = deviceName[214];
				DeviceName_215 = deviceName[215];
				DeviceName_216 = deviceName[216];
				DeviceName_217 = deviceName[217];
				DeviceName_218 = deviceName[218];
				DeviceName_219 = deviceName[219];
				DeviceName_220 = deviceName[220];
				DeviceName_221 = deviceName[221];
				DeviceName_222 = deviceName[222];
				DeviceName_223 = deviceName[223];
				DeviceName_224 = deviceName[224];
				DeviceName_225 = deviceName[225];
				DeviceName_226 = deviceName[226];
				DeviceName_227 = deviceName[227];
				DeviceName_228 = deviceName[228];
				DeviceName_229 = deviceName[229];
				DeviceName_230 = deviceName[230];
				DeviceName_231 = deviceName[231];
				DeviceName_232 = deviceName[232];
				DeviceName_233 = deviceName[233];
				DeviceName_234 = deviceName[234];
				DeviceName_235 = deviceName[235];
				DeviceName_236 = deviceName[236];
				DeviceName_237 = deviceName[237];
				DeviceName_238 = deviceName[238];
				DeviceName_239 = deviceName[239];
				DeviceName_240 = deviceName[240];
				DeviceName_241 = deviceName[241];
				DeviceName_242 = deviceName[242];
				DeviceName_243 = deviceName[243];
				DeviceName_244 = deviceName[244];
				DeviceName_245 = deviceName[245];
				DeviceName_246 = deviceName[246];
				DeviceName_247 = deviceName[247];
				DeviceName_248 = deviceName[248];
				DeviceName_249 = deviceName[249];
				DeviceName_250 = deviceName[250];
				DeviceName_251 = deviceName[251];
				DeviceName_252 = deviceName[252];
				DeviceName_253 = deviceName[253];
				DeviceName_254 = deviceName[254];
				DeviceName_255 = deviceName[255];
			}
			if (pipelineCacheUUID != default)
			{
				PipelineCacheUUID_0 = pipelineCacheUUID[0];
				PipelineCacheUUID_1 = pipelineCacheUUID[1];
				PipelineCacheUUID_2 = pipelineCacheUUID[2];
				PipelineCacheUUID_3 = pipelineCacheUUID[3];
				PipelineCacheUUID_4 = pipelineCacheUUID[4];
				PipelineCacheUUID_5 = pipelineCacheUUID[5];
				PipelineCacheUUID_6 = pipelineCacheUUID[6];
				PipelineCacheUUID_7 = pipelineCacheUUID[7];
				PipelineCacheUUID_8 = pipelineCacheUUID[8];
				PipelineCacheUUID_9 = pipelineCacheUUID[9];
				PipelineCacheUUID_10 = pipelineCacheUUID[10];
				PipelineCacheUUID_11 = pipelineCacheUUID[11];
				PipelineCacheUUID_12 = pipelineCacheUUID[12];
				PipelineCacheUUID_13 = pipelineCacheUUID[13];
				PipelineCacheUUID_14 = pipelineCacheUUID[14];
				PipelineCacheUUID_15 = pipelineCacheUUID[15];
			}
			Limits = limits;
			SparseProperties = sparseProperties;
		}

		public unsafe VkPhysicalDeviceProperties(uint apiVersion = default, uint driverVersion = default, uint vendorID = default, uint deviceID = default, VkPhysicalDeviceType deviceType = default, Span<byte> deviceName = default, Span<byte> pipelineCacheUUID = default, VkPhysicalDeviceLimits limits = default, VkPhysicalDeviceSparseProperties sparseProperties = default)
		{
			ApiVersion = apiVersion;
			DriverVersion = driverVersion;
			VendorID = vendorID;
			DeviceID = deviceID;
			DeviceType = deviceType;
			if (deviceName != default)
			{
				DeviceName_0 = deviceName[0];
				DeviceName_1 = deviceName[1];
				DeviceName_2 = deviceName[2];
				DeviceName_3 = deviceName[3];
				DeviceName_4 = deviceName[4];
				DeviceName_5 = deviceName[5];
				DeviceName_6 = deviceName[6];
				DeviceName_7 = deviceName[7];
				DeviceName_8 = deviceName[8];
				DeviceName_9 = deviceName[9];
				DeviceName_10 = deviceName[10];
				DeviceName_11 = deviceName[11];
				DeviceName_12 = deviceName[12];
				DeviceName_13 = deviceName[13];
				DeviceName_14 = deviceName[14];
				DeviceName_15 = deviceName[15];
				DeviceName_16 = deviceName[16];
				DeviceName_17 = deviceName[17];
				DeviceName_18 = deviceName[18];
				DeviceName_19 = deviceName[19];
				DeviceName_20 = deviceName[20];
				DeviceName_21 = deviceName[21];
				DeviceName_22 = deviceName[22];
				DeviceName_23 = deviceName[23];
				DeviceName_24 = deviceName[24];
				DeviceName_25 = deviceName[25];
				DeviceName_26 = deviceName[26];
				DeviceName_27 = deviceName[27];
				DeviceName_28 = deviceName[28];
				DeviceName_29 = deviceName[29];
				DeviceName_30 = deviceName[30];
				DeviceName_31 = deviceName[31];
				DeviceName_32 = deviceName[32];
				DeviceName_33 = deviceName[33];
				DeviceName_34 = deviceName[34];
				DeviceName_35 = deviceName[35];
				DeviceName_36 = deviceName[36];
				DeviceName_37 = deviceName[37];
				DeviceName_38 = deviceName[38];
				DeviceName_39 = deviceName[39];
				DeviceName_40 = deviceName[40];
				DeviceName_41 = deviceName[41];
				DeviceName_42 = deviceName[42];
				DeviceName_43 = deviceName[43];
				DeviceName_44 = deviceName[44];
				DeviceName_45 = deviceName[45];
				DeviceName_46 = deviceName[46];
				DeviceName_47 = deviceName[47];
				DeviceName_48 = deviceName[48];
				DeviceName_49 = deviceName[49];
				DeviceName_50 = deviceName[50];
				DeviceName_51 = deviceName[51];
				DeviceName_52 = deviceName[52];
				DeviceName_53 = deviceName[53];
				DeviceName_54 = deviceName[54];
				DeviceName_55 = deviceName[55];
				DeviceName_56 = deviceName[56];
				DeviceName_57 = deviceName[57];
				DeviceName_58 = deviceName[58];
				DeviceName_59 = deviceName[59];
				DeviceName_60 = deviceName[60];
				DeviceName_61 = deviceName[61];
				DeviceName_62 = deviceName[62];
				DeviceName_63 = deviceName[63];
				DeviceName_64 = deviceName[64];
				DeviceName_65 = deviceName[65];
				DeviceName_66 = deviceName[66];
				DeviceName_67 = deviceName[67];
				DeviceName_68 = deviceName[68];
				DeviceName_69 = deviceName[69];
				DeviceName_70 = deviceName[70];
				DeviceName_71 = deviceName[71];
				DeviceName_72 = deviceName[72];
				DeviceName_73 = deviceName[73];
				DeviceName_74 = deviceName[74];
				DeviceName_75 = deviceName[75];
				DeviceName_76 = deviceName[76];
				DeviceName_77 = deviceName[77];
				DeviceName_78 = deviceName[78];
				DeviceName_79 = deviceName[79];
				DeviceName_80 = deviceName[80];
				DeviceName_81 = deviceName[81];
				DeviceName_82 = deviceName[82];
				DeviceName_83 = deviceName[83];
				DeviceName_84 = deviceName[84];
				DeviceName_85 = deviceName[85];
				DeviceName_86 = deviceName[86];
				DeviceName_87 = deviceName[87];
				DeviceName_88 = deviceName[88];
				DeviceName_89 = deviceName[89];
				DeviceName_90 = deviceName[90];
				DeviceName_91 = deviceName[91];
				DeviceName_92 = deviceName[92];
				DeviceName_93 = deviceName[93];
				DeviceName_94 = deviceName[94];
				DeviceName_95 = deviceName[95];
				DeviceName_96 = deviceName[96];
				DeviceName_97 = deviceName[97];
				DeviceName_98 = deviceName[98];
				DeviceName_99 = deviceName[99];
				DeviceName_100 = deviceName[100];
				DeviceName_101 = deviceName[101];
				DeviceName_102 = deviceName[102];
				DeviceName_103 = deviceName[103];
				DeviceName_104 = deviceName[104];
				DeviceName_105 = deviceName[105];
				DeviceName_106 = deviceName[106];
				DeviceName_107 = deviceName[107];
				DeviceName_108 = deviceName[108];
				DeviceName_109 = deviceName[109];
				DeviceName_110 = deviceName[110];
				DeviceName_111 = deviceName[111];
				DeviceName_112 = deviceName[112];
				DeviceName_113 = deviceName[113];
				DeviceName_114 = deviceName[114];
				DeviceName_115 = deviceName[115];
				DeviceName_116 = deviceName[116];
				DeviceName_117 = deviceName[117];
				DeviceName_118 = deviceName[118];
				DeviceName_119 = deviceName[119];
				DeviceName_120 = deviceName[120];
				DeviceName_121 = deviceName[121];
				DeviceName_122 = deviceName[122];
				DeviceName_123 = deviceName[123];
				DeviceName_124 = deviceName[124];
				DeviceName_125 = deviceName[125];
				DeviceName_126 = deviceName[126];
				DeviceName_127 = deviceName[127];
				DeviceName_128 = deviceName[128];
				DeviceName_129 = deviceName[129];
				DeviceName_130 = deviceName[130];
				DeviceName_131 = deviceName[131];
				DeviceName_132 = deviceName[132];
				DeviceName_133 = deviceName[133];
				DeviceName_134 = deviceName[134];
				DeviceName_135 = deviceName[135];
				DeviceName_136 = deviceName[136];
				DeviceName_137 = deviceName[137];
				DeviceName_138 = deviceName[138];
				DeviceName_139 = deviceName[139];
				DeviceName_140 = deviceName[140];
				DeviceName_141 = deviceName[141];
				DeviceName_142 = deviceName[142];
				DeviceName_143 = deviceName[143];
				DeviceName_144 = deviceName[144];
				DeviceName_145 = deviceName[145];
				DeviceName_146 = deviceName[146];
				DeviceName_147 = deviceName[147];
				DeviceName_148 = deviceName[148];
				DeviceName_149 = deviceName[149];
				DeviceName_150 = deviceName[150];
				DeviceName_151 = deviceName[151];
				DeviceName_152 = deviceName[152];
				DeviceName_153 = deviceName[153];
				DeviceName_154 = deviceName[154];
				DeviceName_155 = deviceName[155];
				DeviceName_156 = deviceName[156];
				DeviceName_157 = deviceName[157];
				DeviceName_158 = deviceName[158];
				DeviceName_159 = deviceName[159];
				DeviceName_160 = deviceName[160];
				DeviceName_161 = deviceName[161];
				DeviceName_162 = deviceName[162];
				DeviceName_163 = deviceName[163];
				DeviceName_164 = deviceName[164];
				DeviceName_165 = deviceName[165];
				DeviceName_166 = deviceName[166];
				DeviceName_167 = deviceName[167];
				DeviceName_168 = deviceName[168];
				DeviceName_169 = deviceName[169];
				DeviceName_170 = deviceName[170];
				DeviceName_171 = deviceName[171];
				DeviceName_172 = deviceName[172];
				DeviceName_173 = deviceName[173];
				DeviceName_174 = deviceName[174];
				DeviceName_175 = deviceName[175];
				DeviceName_176 = deviceName[176];
				DeviceName_177 = deviceName[177];
				DeviceName_178 = deviceName[178];
				DeviceName_179 = deviceName[179];
				DeviceName_180 = deviceName[180];
				DeviceName_181 = deviceName[181];
				DeviceName_182 = deviceName[182];
				DeviceName_183 = deviceName[183];
				DeviceName_184 = deviceName[184];
				DeviceName_185 = deviceName[185];
				DeviceName_186 = deviceName[186];
				DeviceName_187 = deviceName[187];
				DeviceName_188 = deviceName[188];
				DeviceName_189 = deviceName[189];
				DeviceName_190 = deviceName[190];
				DeviceName_191 = deviceName[191];
				DeviceName_192 = deviceName[192];
				DeviceName_193 = deviceName[193];
				DeviceName_194 = deviceName[194];
				DeviceName_195 = deviceName[195];
				DeviceName_196 = deviceName[196];
				DeviceName_197 = deviceName[197];
				DeviceName_198 = deviceName[198];
				DeviceName_199 = deviceName[199];
				DeviceName_200 = deviceName[200];
				DeviceName_201 = deviceName[201];
				DeviceName_202 = deviceName[202];
				DeviceName_203 = deviceName[203];
				DeviceName_204 = deviceName[204];
				DeviceName_205 = deviceName[205];
				DeviceName_206 = deviceName[206];
				DeviceName_207 = deviceName[207];
				DeviceName_208 = deviceName[208];
				DeviceName_209 = deviceName[209];
				DeviceName_210 = deviceName[210];
				DeviceName_211 = deviceName[211];
				DeviceName_212 = deviceName[212];
				DeviceName_213 = deviceName[213];
				DeviceName_214 = deviceName[214];
				DeviceName_215 = deviceName[215];
				DeviceName_216 = deviceName[216];
				DeviceName_217 = deviceName[217];
				DeviceName_218 = deviceName[218];
				DeviceName_219 = deviceName[219];
				DeviceName_220 = deviceName[220];
				DeviceName_221 = deviceName[221];
				DeviceName_222 = deviceName[222];
				DeviceName_223 = deviceName[223];
				DeviceName_224 = deviceName[224];
				DeviceName_225 = deviceName[225];
				DeviceName_226 = deviceName[226];
				DeviceName_227 = deviceName[227];
				DeviceName_228 = deviceName[228];
				DeviceName_229 = deviceName[229];
				DeviceName_230 = deviceName[230];
				DeviceName_231 = deviceName[231];
				DeviceName_232 = deviceName[232];
				DeviceName_233 = deviceName[233];
				DeviceName_234 = deviceName[234];
				DeviceName_235 = deviceName[235];
				DeviceName_236 = deviceName[236];
				DeviceName_237 = deviceName[237];
				DeviceName_238 = deviceName[238];
				DeviceName_239 = deviceName[239];
				DeviceName_240 = deviceName[240];
				DeviceName_241 = deviceName[241];
				DeviceName_242 = deviceName[242];
				DeviceName_243 = deviceName[243];
				DeviceName_244 = deviceName[244];
				DeviceName_245 = deviceName[245];
				DeviceName_246 = deviceName[246];
				DeviceName_247 = deviceName[247];
				DeviceName_248 = deviceName[248];
				DeviceName_249 = deviceName[249];
				DeviceName_250 = deviceName[250];
				DeviceName_251 = deviceName[251];
				DeviceName_252 = deviceName[252];
				DeviceName_253 = deviceName[253];
				DeviceName_254 = deviceName[254];
				DeviceName_255 = deviceName[255];
			}
			if (pipelineCacheUUID != default)
			{
				PipelineCacheUUID_0 = pipelineCacheUUID[0];
				PipelineCacheUUID_1 = pipelineCacheUUID[1];
				PipelineCacheUUID_2 = pipelineCacheUUID[2];
				PipelineCacheUUID_3 = pipelineCacheUUID[3];
				PipelineCacheUUID_4 = pipelineCacheUUID[4];
				PipelineCacheUUID_5 = pipelineCacheUUID[5];
				PipelineCacheUUID_6 = pipelineCacheUUID[6];
				PipelineCacheUUID_7 = pipelineCacheUUID[7];
				PipelineCacheUUID_8 = pipelineCacheUUID[8];
				PipelineCacheUUID_9 = pipelineCacheUUID[9];
				PipelineCacheUUID_10 = pipelineCacheUUID[10];
				PipelineCacheUUID_11 = pipelineCacheUUID[11];
				PipelineCacheUUID_12 = pipelineCacheUUID[12];
				PipelineCacheUUID_13 = pipelineCacheUUID[13];
				PipelineCacheUUID_14 = pipelineCacheUUID[14];
				PipelineCacheUUID_15 = pipelineCacheUUID[15];
			}
			Limits = limits;
			SparseProperties = sparseProperties;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkQueueFamilyProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkQueueFamilyProperties
	{
		[NativeName(NativeNameType.Field, "queueFlags")]
		[NativeName(NativeNameType.Type, "VkQueueFlags")]
		public uint QueueFlags;
		[NativeName(NativeNameType.Field, "queueCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint QueueCount;
		[NativeName(NativeNameType.Field, "timestampValidBits")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint TimestampValidBits;
		[NativeName(NativeNameType.Field, "minImageTransferGranularity")]
		[NativeName(NativeNameType.Type, "VkExtent3D")]
		public VkExtent3D MinImageTransferGranularity;

		public unsafe VkQueueFamilyProperties(uint queueFlags = default, uint queueCount = default, uint timestampValidBits = default, VkExtent3D minImageTransferGranularity = default)
		{
			QueueFlags = queueFlags;
			QueueCount = queueCount;
			TimestampValidBits = timestampValidBits;
			MinImageTransferGranularity = minImageTransferGranularity;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDeviceQueueCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDeviceQueueCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkDeviceQueueCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "queueFamilyIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint QueueFamilyIndex;
		[NativeName(NativeNameType.Field, "queueCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint QueueCount;
		[NativeName(NativeNameType.Field, "pQueuePriorities")]
		[NativeName(NativeNameType.Type, "const float*")]
		public unsafe float* PQueuePriorities;

		public unsafe VkDeviceQueueCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, uint queueFamilyIndex = default, uint queueCount = default, float* pQueuePriorities = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			QueueFamilyIndex = queueFamilyIndex;
			QueueCount = queueCount;
			PQueuePriorities = pQueuePriorities;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDeviceCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDeviceCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkDeviceCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "queueCreateInfoCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint QueueCreateInfoCount;
		[NativeName(NativeNameType.Field, "pQueueCreateInfos")]
		[NativeName(NativeNameType.Type, "const VkDeviceQueueCreateInfo*")]
		public unsafe VkDeviceQueueCreateInfo* PQueueCreateInfos;
		[NativeName(NativeNameType.Field, "enabledLayerCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint EnabledLayerCount;
		[NativeName(NativeNameType.Field, "ppEnabledLayerNames")]
		[NativeName(NativeNameType.Type, "const const char**")]
		public unsafe byte** PpEnabledLayerNames;
		[NativeName(NativeNameType.Field, "enabledExtensionCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint EnabledExtensionCount;
		[NativeName(NativeNameType.Field, "ppEnabledExtensionNames")]
		[NativeName(NativeNameType.Type, "const const char**")]
		public unsafe byte** PpEnabledExtensionNames;
		[NativeName(NativeNameType.Field, "pEnabledFeatures")]
		[NativeName(NativeNameType.Type, "const VkPhysicalDeviceFeatures*")]
		public unsafe VkPhysicalDeviceFeatures* PEnabledFeatures;

		public unsafe VkDeviceCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, uint queueCreateInfoCount = default, VkDeviceQueueCreateInfo* pQueueCreateInfos = default, uint enabledLayerCount = default, byte** ppEnabledLayerNames = default, uint enabledExtensionCount = default, byte** ppEnabledExtensionNames = default, VkPhysicalDeviceFeatures* pEnabledFeatures = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			QueueCreateInfoCount = queueCreateInfoCount;
			PQueueCreateInfos = pQueueCreateInfos;
			EnabledLayerCount = enabledLayerCount;
			PpEnabledLayerNames = ppEnabledLayerNames;
			EnabledExtensionCount = enabledExtensionCount;
			PpEnabledExtensionNames = ppEnabledExtensionNames;
			PEnabledFeatures = pEnabledFeatures;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkExtensionProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkExtensionProperties
	{
		[NativeName(NativeNameType.Field, "extensionName")]
		[NativeName(NativeNameType.Type, "char[256]")]
		public byte ExtensionName_0;
		public byte ExtensionName_1;
		public byte ExtensionName_2;
		public byte ExtensionName_3;
		public byte ExtensionName_4;
		public byte ExtensionName_5;
		public byte ExtensionName_6;
		public byte ExtensionName_7;
		public byte ExtensionName_8;
		public byte ExtensionName_9;
		public byte ExtensionName_10;
		public byte ExtensionName_11;
		public byte ExtensionName_12;
		public byte ExtensionName_13;
		public byte ExtensionName_14;
		public byte ExtensionName_15;
		public byte ExtensionName_16;
		public byte ExtensionName_17;
		public byte ExtensionName_18;
		public byte ExtensionName_19;
		public byte ExtensionName_20;
		public byte ExtensionName_21;
		public byte ExtensionName_22;
		public byte ExtensionName_23;
		public byte ExtensionName_24;
		public byte ExtensionName_25;
		public byte ExtensionName_26;
		public byte ExtensionName_27;
		public byte ExtensionName_28;
		public byte ExtensionName_29;
		public byte ExtensionName_30;
		public byte ExtensionName_31;
		public byte ExtensionName_32;
		public byte ExtensionName_33;
		public byte ExtensionName_34;
		public byte ExtensionName_35;
		public byte ExtensionName_36;
		public byte ExtensionName_37;
		public byte ExtensionName_38;
		public byte ExtensionName_39;
		public byte ExtensionName_40;
		public byte ExtensionName_41;
		public byte ExtensionName_42;
		public byte ExtensionName_43;
		public byte ExtensionName_44;
		public byte ExtensionName_45;
		public byte ExtensionName_46;
		public byte ExtensionName_47;
		public byte ExtensionName_48;
		public byte ExtensionName_49;
		public byte ExtensionName_50;
		public byte ExtensionName_51;
		public byte ExtensionName_52;
		public byte ExtensionName_53;
		public byte ExtensionName_54;
		public byte ExtensionName_55;
		public byte ExtensionName_56;
		public byte ExtensionName_57;
		public byte ExtensionName_58;
		public byte ExtensionName_59;
		public byte ExtensionName_60;
		public byte ExtensionName_61;
		public byte ExtensionName_62;
		public byte ExtensionName_63;
		public byte ExtensionName_64;
		public byte ExtensionName_65;
		public byte ExtensionName_66;
		public byte ExtensionName_67;
		public byte ExtensionName_68;
		public byte ExtensionName_69;
		public byte ExtensionName_70;
		public byte ExtensionName_71;
		public byte ExtensionName_72;
		public byte ExtensionName_73;
		public byte ExtensionName_74;
		public byte ExtensionName_75;
		public byte ExtensionName_76;
		public byte ExtensionName_77;
		public byte ExtensionName_78;
		public byte ExtensionName_79;
		public byte ExtensionName_80;
		public byte ExtensionName_81;
		public byte ExtensionName_82;
		public byte ExtensionName_83;
		public byte ExtensionName_84;
		public byte ExtensionName_85;
		public byte ExtensionName_86;
		public byte ExtensionName_87;
		public byte ExtensionName_88;
		public byte ExtensionName_89;
		public byte ExtensionName_90;
		public byte ExtensionName_91;
		public byte ExtensionName_92;
		public byte ExtensionName_93;
		public byte ExtensionName_94;
		public byte ExtensionName_95;
		public byte ExtensionName_96;
		public byte ExtensionName_97;
		public byte ExtensionName_98;
		public byte ExtensionName_99;
		public byte ExtensionName_100;
		public byte ExtensionName_101;
		public byte ExtensionName_102;
		public byte ExtensionName_103;
		public byte ExtensionName_104;
		public byte ExtensionName_105;
		public byte ExtensionName_106;
		public byte ExtensionName_107;
		public byte ExtensionName_108;
		public byte ExtensionName_109;
		public byte ExtensionName_110;
		public byte ExtensionName_111;
		public byte ExtensionName_112;
		public byte ExtensionName_113;
		public byte ExtensionName_114;
		public byte ExtensionName_115;
		public byte ExtensionName_116;
		public byte ExtensionName_117;
		public byte ExtensionName_118;
		public byte ExtensionName_119;
		public byte ExtensionName_120;
		public byte ExtensionName_121;
		public byte ExtensionName_122;
		public byte ExtensionName_123;
		public byte ExtensionName_124;
		public byte ExtensionName_125;
		public byte ExtensionName_126;
		public byte ExtensionName_127;
		public byte ExtensionName_128;
		public byte ExtensionName_129;
		public byte ExtensionName_130;
		public byte ExtensionName_131;
		public byte ExtensionName_132;
		public byte ExtensionName_133;
		public byte ExtensionName_134;
		public byte ExtensionName_135;
		public byte ExtensionName_136;
		public byte ExtensionName_137;
		public byte ExtensionName_138;
		public byte ExtensionName_139;
		public byte ExtensionName_140;
		public byte ExtensionName_141;
		public byte ExtensionName_142;
		public byte ExtensionName_143;
		public byte ExtensionName_144;
		public byte ExtensionName_145;
		public byte ExtensionName_146;
		public byte ExtensionName_147;
		public byte ExtensionName_148;
		public byte ExtensionName_149;
		public byte ExtensionName_150;
		public byte ExtensionName_151;
		public byte ExtensionName_152;
		public byte ExtensionName_153;
		public byte ExtensionName_154;
		public byte ExtensionName_155;
		public byte ExtensionName_156;
		public byte ExtensionName_157;
		public byte ExtensionName_158;
		public byte ExtensionName_159;
		public byte ExtensionName_160;
		public byte ExtensionName_161;
		public byte ExtensionName_162;
		public byte ExtensionName_163;
		public byte ExtensionName_164;
		public byte ExtensionName_165;
		public byte ExtensionName_166;
		public byte ExtensionName_167;
		public byte ExtensionName_168;
		public byte ExtensionName_169;
		public byte ExtensionName_170;
		public byte ExtensionName_171;
		public byte ExtensionName_172;
		public byte ExtensionName_173;
		public byte ExtensionName_174;
		public byte ExtensionName_175;
		public byte ExtensionName_176;
		public byte ExtensionName_177;
		public byte ExtensionName_178;
		public byte ExtensionName_179;
		public byte ExtensionName_180;
		public byte ExtensionName_181;
		public byte ExtensionName_182;
		public byte ExtensionName_183;
		public byte ExtensionName_184;
		public byte ExtensionName_185;
		public byte ExtensionName_186;
		public byte ExtensionName_187;
		public byte ExtensionName_188;
		public byte ExtensionName_189;
		public byte ExtensionName_190;
		public byte ExtensionName_191;
		public byte ExtensionName_192;
		public byte ExtensionName_193;
		public byte ExtensionName_194;
		public byte ExtensionName_195;
		public byte ExtensionName_196;
		public byte ExtensionName_197;
		public byte ExtensionName_198;
		public byte ExtensionName_199;
		public byte ExtensionName_200;
		public byte ExtensionName_201;
		public byte ExtensionName_202;
		public byte ExtensionName_203;
		public byte ExtensionName_204;
		public byte ExtensionName_205;
		public byte ExtensionName_206;
		public byte ExtensionName_207;
		public byte ExtensionName_208;
		public byte ExtensionName_209;
		public byte ExtensionName_210;
		public byte ExtensionName_211;
		public byte ExtensionName_212;
		public byte ExtensionName_213;
		public byte ExtensionName_214;
		public byte ExtensionName_215;
		public byte ExtensionName_216;
		public byte ExtensionName_217;
		public byte ExtensionName_218;
		public byte ExtensionName_219;
		public byte ExtensionName_220;
		public byte ExtensionName_221;
		public byte ExtensionName_222;
		public byte ExtensionName_223;
		public byte ExtensionName_224;
		public byte ExtensionName_225;
		public byte ExtensionName_226;
		public byte ExtensionName_227;
		public byte ExtensionName_228;
		public byte ExtensionName_229;
		public byte ExtensionName_230;
		public byte ExtensionName_231;
		public byte ExtensionName_232;
		public byte ExtensionName_233;
		public byte ExtensionName_234;
		public byte ExtensionName_235;
		public byte ExtensionName_236;
		public byte ExtensionName_237;
		public byte ExtensionName_238;
		public byte ExtensionName_239;
		public byte ExtensionName_240;
		public byte ExtensionName_241;
		public byte ExtensionName_242;
		public byte ExtensionName_243;
		public byte ExtensionName_244;
		public byte ExtensionName_245;
		public byte ExtensionName_246;
		public byte ExtensionName_247;
		public byte ExtensionName_248;
		public byte ExtensionName_249;
		public byte ExtensionName_250;
		public byte ExtensionName_251;
		public byte ExtensionName_252;
		public byte ExtensionName_253;
		public byte ExtensionName_254;
		public byte ExtensionName_255;
		[NativeName(NativeNameType.Field, "specVersion")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpecVersion;

		public unsafe VkExtensionProperties(byte* extensionName = default, uint specVersion = default)
		{
			if (extensionName != default)
			{
				ExtensionName_0 = extensionName[0];
				ExtensionName_1 = extensionName[1];
				ExtensionName_2 = extensionName[2];
				ExtensionName_3 = extensionName[3];
				ExtensionName_4 = extensionName[4];
				ExtensionName_5 = extensionName[5];
				ExtensionName_6 = extensionName[6];
				ExtensionName_7 = extensionName[7];
				ExtensionName_8 = extensionName[8];
				ExtensionName_9 = extensionName[9];
				ExtensionName_10 = extensionName[10];
				ExtensionName_11 = extensionName[11];
				ExtensionName_12 = extensionName[12];
				ExtensionName_13 = extensionName[13];
				ExtensionName_14 = extensionName[14];
				ExtensionName_15 = extensionName[15];
				ExtensionName_16 = extensionName[16];
				ExtensionName_17 = extensionName[17];
				ExtensionName_18 = extensionName[18];
				ExtensionName_19 = extensionName[19];
				ExtensionName_20 = extensionName[20];
				ExtensionName_21 = extensionName[21];
				ExtensionName_22 = extensionName[22];
				ExtensionName_23 = extensionName[23];
				ExtensionName_24 = extensionName[24];
				ExtensionName_25 = extensionName[25];
				ExtensionName_26 = extensionName[26];
				ExtensionName_27 = extensionName[27];
				ExtensionName_28 = extensionName[28];
				ExtensionName_29 = extensionName[29];
				ExtensionName_30 = extensionName[30];
				ExtensionName_31 = extensionName[31];
				ExtensionName_32 = extensionName[32];
				ExtensionName_33 = extensionName[33];
				ExtensionName_34 = extensionName[34];
				ExtensionName_35 = extensionName[35];
				ExtensionName_36 = extensionName[36];
				ExtensionName_37 = extensionName[37];
				ExtensionName_38 = extensionName[38];
				ExtensionName_39 = extensionName[39];
				ExtensionName_40 = extensionName[40];
				ExtensionName_41 = extensionName[41];
				ExtensionName_42 = extensionName[42];
				ExtensionName_43 = extensionName[43];
				ExtensionName_44 = extensionName[44];
				ExtensionName_45 = extensionName[45];
				ExtensionName_46 = extensionName[46];
				ExtensionName_47 = extensionName[47];
				ExtensionName_48 = extensionName[48];
				ExtensionName_49 = extensionName[49];
				ExtensionName_50 = extensionName[50];
				ExtensionName_51 = extensionName[51];
				ExtensionName_52 = extensionName[52];
				ExtensionName_53 = extensionName[53];
				ExtensionName_54 = extensionName[54];
				ExtensionName_55 = extensionName[55];
				ExtensionName_56 = extensionName[56];
				ExtensionName_57 = extensionName[57];
				ExtensionName_58 = extensionName[58];
				ExtensionName_59 = extensionName[59];
				ExtensionName_60 = extensionName[60];
				ExtensionName_61 = extensionName[61];
				ExtensionName_62 = extensionName[62];
				ExtensionName_63 = extensionName[63];
				ExtensionName_64 = extensionName[64];
				ExtensionName_65 = extensionName[65];
				ExtensionName_66 = extensionName[66];
				ExtensionName_67 = extensionName[67];
				ExtensionName_68 = extensionName[68];
				ExtensionName_69 = extensionName[69];
				ExtensionName_70 = extensionName[70];
				ExtensionName_71 = extensionName[71];
				ExtensionName_72 = extensionName[72];
				ExtensionName_73 = extensionName[73];
				ExtensionName_74 = extensionName[74];
				ExtensionName_75 = extensionName[75];
				ExtensionName_76 = extensionName[76];
				ExtensionName_77 = extensionName[77];
				ExtensionName_78 = extensionName[78];
				ExtensionName_79 = extensionName[79];
				ExtensionName_80 = extensionName[80];
				ExtensionName_81 = extensionName[81];
				ExtensionName_82 = extensionName[82];
				ExtensionName_83 = extensionName[83];
				ExtensionName_84 = extensionName[84];
				ExtensionName_85 = extensionName[85];
				ExtensionName_86 = extensionName[86];
				ExtensionName_87 = extensionName[87];
				ExtensionName_88 = extensionName[88];
				ExtensionName_89 = extensionName[89];
				ExtensionName_90 = extensionName[90];
				ExtensionName_91 = extensionName[91];
				ExtensionName_92 = extensionName[92];
				ExtensionName_93 = extensionName[93];
				ExtensionName_94 = extensionName[94];
				ExtensionName_95 = extensionName[95];
				ExtensionName_96 = extensionName[96];
				ExtensionName_97 = extensionName[97];
				ExtensionName_98 = extensionName[98];
				ExtensionName_99 = extensionName[99];
				ExtensionName_100 = extensionName[100];
				ExtensionName_101 = extensionName[101];
				ExtensionName_102 = extensionName[102];
				ExtensionName_103 = extensionName[103];
				ExtensionName_104 = extensionName[104];
				ExtensionName_105 = extensionName[105];
				ExtensionName_106 = extensionName[106];
				ExtensionName_107 = extensionName[107];
				ExtensionName_108 = extensionName[108];
				ExtensionName_109 = extensionName[109];
				ExtensionName_110 = extensionName[110];
				ExtensionName_111 = extensionName[111];
				ExtensionName_112 = extensionName[112];
				ExtensionName_113 = extensionName[113];
				ExtensionName_114 = extensionName[114];
				ExtensionName_115 = extensionName[115];
				ExtensionName_116 = extensionName[116];
				ExtensionName_117 = extensionName[117];
				ExtensionName_118 = extensionName[118];
				ExtensionName_119 = extensionName[119];
				ExtensionName_120 = extensionName[120];
				ExtensionName_121 = extensionName[121];
				ExtensionName_122 = extensionName[122];
				ExtensionName_123 = extensionName[123];
				ExtensionName_124 = extensionName[124];
				ExtensionName_125 = extensionName[125];
				ExtensionName_126 = extensionName[126];
				ExtensionName_127 = extensionName[127];
				ExtensionName_128 = extensionName[128];
				ExtensionName_129 = extensionName[129];
				ExtensionName_130 = extensionName[130];
				ExtensionName_131 = extensionName[131];
				ExtensionName_132 = extensionName[132];
				ExtensionName_133 = extensionName[133];
				ExtensionName_134 = extensionName[134];
				ExtensionName_135 = extensionName[135];
				ExtensionName_136 = extensionName[136];
				ExtensionName_137 = extensionName[137];
				ExtensionName_138 = extensionName[138];
				ExtensionName_139 = extensionName[139];
				ExtensionName_140 = extensionName[140];
				ExtensionName_141 = extensionName[141];
				ExtensionName_142 = extensionName[142];
				ExtensionName_143 = extensionName[143];
				ExtensionName_144 = extensionName[144];
				ExtensionName_145 = extensionName[145];
				ExtensionName_146 = extensionName[146];
				ExtensionName_147 = extensionName[147];
				ExtensionName_148 = extensionName[148];
				ExtensionName_149 = extensionName[149];
				ExtensionName_150 = extensionName[150];
				ExtensionName_151 = extensionName[151];
				ExtensionName_152 = extensionName[152];
				ExtensionName_153 = extensionName[153];
				ExtensionName_154 = extensionName[154];
				ExtensionName_155 = extensionName[155];
				ExtensionName_156 = extensionName[156];
				ExtensionName_157 = extensionName[157];
				ExtensionName_158 = extensionName[158];
				ExtensionName_159 = extensionName[159];
				ExtensionName_160 = extensionName[160];
				ExtensionName_161 = extensionName[161];
				ExtensionName_162 = extensionName[162];
				ExtensionName_163 = extensionName[163];
				ExtensionName_164 = extensionName[164];
				ExtensionName_165 = extensionName[165];
				ExtensionName_166 = extensionName[166];
				ExtensionName_167 = extensionName[167];
				ExtensionName_168 = extensionName[168];
				ExtensionName_169 = extensionName[169];
				ExtensionName_170 = extensionName[170];
				ExtensionName_171 = extensionName[171];
				ExtensionName_172 = extensionName[172];
				ExtensionName_173 = extensionName[173];
				ExtensionName_174 = extensionName[174];
				ExtensionName_175 = extensionName[175];
				ExtensionName_176 = extensionName[176];
				ExtensionName_177 = extensionName[177];
				ExtensionName_178 = extensionName[178];
				ExtensionName_179 = extensionName[179];
				ExtensionName_180 = extensionName[180];
				ExtensionName_181 = extensionName[181];
				ExtensionName_182 = extensionName[182];
				ExtensionName_183 = extensionName[183];
				ExtensionName_184 = extensionName[184];
				ExtensionName_185 = extensionName[185];
				ExtensionName_186 = extensionName[186];
				ExtensionName_187 = extensionName[187];
				ExtensionName_188 = extensionName[188];
				ExtensionName_189 = extensionName[189];
				ExtensionName_190 = extensionName[190];
				ExtensionName_191 = extensionName[191];
				ExtensionName_192 = extensionName[192];
				ExtensionName_193 = extensionName[193];
				ExtensionName_194 = extensionName[194];
				ExtensionName_195 = extensionName[195];
				ExtensionName_196 = extensionName[196];
				ExtensionName_197 = extensionName[197];
				ExtensionName_198 = extensionName[198];
				ExtensionName_199 = extensionName[199];
				ExtensionName_200 = extensionName[200];
				ExtensionName_201 = extensionName[201];
				ExtensionName_202 = extensionName[202];
				ExtensionName_203 = extensionName[203];
				ExtensionName_204 = extensionName[204];
				ExtensionName_205 = extensionName[205];
				ExtensionName_206 = extensionName[206];
				ExtensionName_207 = extensionName[207];
				ExtensionName_208 = extensionName[208];
				ExtensionName_209 = extensionName[209];
				ExtensionName_210 = extensionName[210];
				ExtensionName_211 = extensionName[211];
				ExtensionName_212 = extensionName[212];
				ExtensionName_213 = extensionName[213];
				ExtensionName_214 = extensionName[214];
				ExtensionName_215 = extensionName[215];
				ExtensionName_216 = extensionName[216];
				ExtensionName_217 = extensionName[217];
				ExtensionName_218 = extensionName[218];
				ExtensionName_219 = extensionName[219];
				ExtensionName_220 = extensionName[220];
				ExtensionName_221 = extensionName[221];
				ExtensionName_222 = extensionName[222];
				ExtensionName_223 = extensionName[223];
				ExtensionName_224 = extensionName[224];
				ExtensionName_225 = extensionName[225];
				ExtensionName_226 = extensionName[226];
				ExtensionName_227 = extensionName[227];
				ExtensionName_228 = extensionName[228];
				ExtensionName_229 = extensionName[229];
				ExtensionName_230 = extensionName[230];
				ExtensionName_231 = extensionName[231];
				ExtensionName_232 = extensionName[232];
				ExtensionName_233 = extensionName[233];
				ExtensionName_234 = extensionName[234];
				ExtensionName_235 = extensionName[235];
				ExtensionName_236 = extensionName[236];
				ExtensionName_237 = extensionName[237];
				ExtensionName_238 = extensionName[238];
				ExtensionName_239 = extensionName[239];
				ExtensionName_240 = extensionName[240];
				ExtensionName_241 = extensionName[241];
				ExtensionName_242 = extensionName[242];
				ExtensionName_243 = extensionName[243];
				ExtensionName_244 = extensionName[244];
				ExtensionName_245 = extensionName[245];
				ExtensionName_246 = extensionName[246];
				ExtensionName_247 = extensionName[247];
				ExtensionName_248 = extensionName[248];
				ExtensionName_249 = extensionName[249];
				ExtensionName_250 = extensionName[250];
				ExtensionName_251 = extensionName[251];
				ExtensionName_252 = extensionName[252];
				ExtensionName_253 = extensionName[253];
				ExtensionName_254 = extensionName[254];
				ExtensionName_255 = extensionName[255];
			}
			SpecVersion = specVersion;
		}

		public unsafe VkExtensionProperties(Span<byte> extensionName = default, uint specVersion = default)
		{
			if (extensionName != default)
			{
				ExtensionName_0 = extensionName[0];
				ExtensionName_1 = extensionName[1];
				ExtensionName_2 = extensionName[2];
				ExtensionName_3 = extensionName[3];
				ExtensionName_4 = extensionName[4];
				ExtensionName_5 = extensionName[5];
				ExtensionName_6 = extensionName[6];
				ExtensionName_7 = extensionName[7];
				ExtensionName_8 = extensionName[8];
				ExtensionName_9 = extensionName[9];
				ExtensionName_10 = extensionName[10];
				ExtensionName_11 = extensionName[11];
				ExtensionName_12 = extensionName[12];
				ExtensionName_13 = extensionName[13];
				ExtensionName_14 = extensionName[14];
				ExtensionName_15 = extensionName[15];
				ExtensionName_16 = extensionName[16];
				ExtensionName_17 = extensionName[17];
				ExtensionName_18 = extensionName[18];
				ExtensionName_19 = extensionName[19];
				ExtensionName_20 = extensionName[20];
				ExtensionName_21 = extensionName[21];
				ExtensionName_22 = extensionName[22];
				ExtensionName_23 = extensionName[23];
				ExtensionName_24 = extensionName[24];
				ExtensionName_25 = extensionName[25];
				ExtensionName_26 = extensionName[26];
				ExtensionName_27 = extensionName[27];
				ExtensionName_28 = extensionName[28];
				ExtensionName_29 = extensionName[29];
				ExtensionName_30 = extensionName[30];
				ExtensionName_31 = extensionName[31];
				ExtensionName_32 = extensionName[32];
				ExtensionName_33 = extensionName[33];
				ExtensionName_34 = extensionName[34];
				ExtensionName_35 = extensionName[35];
				ExtensionName_36 = extensionName[36];
				ExtensionName_37 = extensionName[37];
				ExtensionName_38 = extensionName[38];
				ExtensionName_39 = extensionName[39];
				ExtensionName_40 = extensionName[40];
				ExtensionName_41 = extensionName[41];
				ExtensionName_42 = extensionName[42];
				ExtensionName_43 = extensionName[43];
				ExtensionName_44 = extensionName[44];
				ExtensionName_45 = extensionName[45];
				ExtensionName_46 = extensionName[46];
				ExtensionName_47 = extensionName[47];
				ExtensionName_48 = extensionName[48];
				ExtensionName_49 = extensionName[49];
				ExtensionName_50 = extensionName[50];
				ExtensionName_51 = extensionName[51];
				ExtensionName_52 = extensionName[52];
				ExtensionName_53 = extensionName[53];
				ExtensionName_54 = extensionName[54];
				ExtensionName_55 = extensionName[55];
				ExtensionName_56 = extensionName[56];
				ExtensionName_57 = extensionName[57];
				ExtensionName_58 = extensionName[58];
				ExtensionName_59 = extensionName[59];
				ExtensionName_60 = extensionName[60];
				ExtensionName_61 = extensionName[61];
				ExtensionName_62 = extensionName[62];
				ExtensionName_63 = extensionName[63];
				ExtensionName_64 = extensionName[64];
				ExtensionName_65 = extensionName[65];
				ExtensionName_66 = extensionName[66];
				ExtensionName_67 = extensionName[67];
				ExtensionName_68 = extensionName[68];
				ExtensionName_69 = extensionName[69];
				ExtensionName_70 = extensionName[70];
				ExtensionName_71 = extensionName[71];
				ExtensionName_72 = extensionName[72];
				ExtensionName_73 = extensionName[73];
				ExtensionName_74 = extensionName[74];
				ExtensionName_75 = extensionName[75];
				ExtensionName_76 = extensionName[76];
				ExtensionName_77 = extensionName[77];
				ExtensionName_78 = extensionName[78];
				ExtensionName_79 = extensionName[79];
				ExtensionName_80 = extensionName[80];
				ExtensionName_81 = extensionName[81];
				ExtensionName_82 = extensionName[82];
				ExtensionName_83 = extensionName[83];
				ExtensionName_84 = extensionName[84];
				ExtensionName_85 = extensionName[85];
				ExtensionName_86 = extensionName[86];
				ExtensionName_87 = extensionName[87];
				ExtensionName_88 = extensionName[88];
				ExtensionName_89 = extensionName[89];
				ExtensionName_90 = extensionName[90];
				ExtensionName_91 = extensionName[91];
				ExtensionName_92 = extensionName[92];
				ExtensionName_93 = extensionName[93];
				ExtensionName_94 = extensionName[94];
				ExtensionName_95 = extensionName[95];
				ExtensionName_96 = extensionName[96];
				ExtensionName_97 = extensionName[97];
				ExtensionName_98 = extensionName[98];
				ExtensionName_99 = extensionName[99];
				ExtensionName_100 = extensionName[100];
				ExtensionName_101 = extensionName[101];
				ExtensionName_102 = extensionName[102];
				ExtensionName_103 = extensionName[103];
				ExtensionName_104 = extensionName[104];
				ExtensionName_105 = extensionName[105];
				ExtensionName_106 = extensionName[106];
				ExtensionName_107 = extensionName[107];
				ExtensionName_108 = extensionName[108];
				ExtensionName_109 = extensionName[109];
				ExtensionName_110 = extensionName[110];
				ExtensionName_111 = extensionName[111];
				ExtensionName_112 = extensionName[112];
				ExtensionName_113 = extensionName[113];
				ExtensionName_114 = extensionName[114];
				ExtensionName_115 = extensionName[115];
				ExtensionName_116 = extensionName[116];
				ExtensionName_117 = extensionName[117];
				ExtensionName_118 = extensionName[118];
				ExtensionName_119 = extensionName[119];
				ExtensionName_120 = extensionName[120];
				ExtensionName_121 = extensionName[121];
				ExtensionName_122 = extensionName[122];
				ExtensionName_123 = extensionName[123];
				ExtensionName_124 = extensionName[124];
				ExtensionName_125 = extensionName[125];
				ExtensionName_126 = extensionName[126];
				ExtensionName_127 = extensionName[127];
				ExtensionName_128 = extensionName[128];
				ExtensionName_129 = extensionName[129];
				ExtensionName_130 = extensionName[130];
				ExtensionName_131 = extensionName[131];
				ExtensionName_132 = extensionName[132];
				ExtensionName_133 = extensionName[133];
				ExtensionName_134 = extensionName[134];
				ExtensionName_135 = extensionName[135];
				ExtensionName_136 = extensionName[136];
				ExtensionName_137 = extensionName[137];
				ExtensionName_138 = extensionName[138];
				ExtensionName_139 = extensionName[139];
				ExtensionName_140 = extensionName[140];
				ExtensionName_141 = extensionName[141];
				ExtensionName_142 = extensionName[142];
				ExtensionName_143 = extensionName[143];
				ExtensionName_144 = extensionName[144];
				ExtensionName_145 = extensionName[145];
				ExtensionName_146 = extensionName[146];
				ExtensionName_147 = extensionName[147];
				ExtensionName_148 = extensionName[148];
				ExtensionName_149 = extensionName[149];
				ExtensionName_150 = extensionName[150];
				ExtensionName_151 = extensionName[151];
				ExtensionName_152 = extensionName[152];
				ExtensionName_153 = extensionName[153];
				ExtensionName_154 = extensionName[154];
				ExtensionName_155 = extensionName[155];
				ExtensionName_156 = extensionName[156];
				ExtensionName_157 = extensionName[157];
				ExtensionName_158 = extensionName[158];
				ExtensionName_159 = extensionName[159];
				ExtensionName_160 = extensionName[160];
				ExtensionName_161 = extensionName[161];
				ExtensionName_162 = extensionName[162];
				ExtensionName_163 = extensionName[163];
				ExtensionName_164 = extensionName[164];
				ExtensionName_165 = extensionName[165];
				ExtensionName_166 = extensionName[166];
				ExtensionName_167 = extensionName[167];
				ExtensionName_168 = extensionName[168];
				ExtensionName_169 = extensionName[169];
				ExtensionName_170 = extensionName[170];
				ExtensionName_171 = extensionName[171];
				ExtensionName_172 = extensionName[172];
				ExtensionName_173 = extensionName[173];
				ExtensionName_174 = extensionName[174];
				ExtensionName_175 = extensionName[175];
				ExtensionName_176 = extensionName[176];
				ExtensionName_177 = extensionName[177];
				ExtensionName_178 = extensionName[178];
				ExtensionName_179 = extensionName[179];
				ExtensionName_180 = extensionName[180];
				ExtensionName_181 = extensionName[181];
				ExtensionName_182 = extensionName[182];
				ExtensionName_183 = extensionName[183];
				ExtensionName_184 = extensionName[184];
				ExtensionName_185 = extensionName[185];
				ExtensionName_186 = extensionName[186];
				ExtensionName_187 = extensionName[187];
				ExtensionName_188 = extensionName[188];
				ExtensionName_189 = extensionName[189];
				ExtensionName_190 = extensionName[190];
				ExtensionName_191 = extensionName[191];
				ExtensionName_192 = extensionName[192];
				ExtensionName_193 = extensionName[193];
				ExtensionName_194 = extensionName[194];
				ExtensionName_195 = extensionName[195];
				ExtensionName_196 = extensionName[196];
				ExtensionName_197 = extensionName[197];
				ExtensionName_198 = extensionName[198];
				ExtensionName_199 = extensionName[199];
				ExtensionName_200 = extensionName[200];
				ExtensionName_201 = extensionName[201];
				ExtensionName_202 = extensionName[202];
				ExtensionName_203 = extensionName[203];
				ExtensionName_204 = extensionName[204];
				ExtensionName_205 = extensionName[205];
				ExtensionName_206 = extensionName[206];
				ExtensionName_207 = extensionName[207];
				ExtensionName_208 = extensionName[208];
				ExtensionName_209 = extensionName[209];
				ExtensionName_210 = extensionName[210];
				ExtensionName_211 = extensionName[211];
				ExtensionName_212 = extensionName[212];
				ExtensionName_213 = extensionName[213];
				ExtensionName_214 = extensionName[214];
				ExtensionName_215 = extensionName[215];
				ExtensionName_216 = extensionName[216];
				ExtensionName_217 = extensionName[217];
				ExtensionName_218 = extensionName[218];
				ExtensionName_219 = extensionName[219];
				ExtensionName_220 = extensionName[220];
				ExtensionName_221 = extensionName[221];
				ExtensionName_222 = extensionName[222];
				ExtensionName_223 = extensionName[223];
				ExtensionName_224 = extensionName[224];
				ExtensionName_225 = extensionName[225];
				ExtensionName_226 = extensionName[226];
				ExtensionName_227 = extensionName[227];
				ExtensionName_228 = extensionName[228];
				ExtensionName_229 = extensionName[229];
				ExtensionName_230 = extensionName[230];
				ExtensionName_231 = extensionName[231];
				ExtensionName_232 = extensionName[232];
				ExtensionName_233 = extensionName[233];
				ExtensionName_234 = extensionName[234];
				ExtensionName_235 = extensionName[235];
				ExtensionName_236 = extensionName[236];
				ExtensionName_237 = extensionName[237];
				ExtensionName_238 = extensionName[238];
				ExtensionName_239 = extensionName[239];
				ExtensionName_240 = extensionName[240];
				ExtensionName_241 = extensionName[241];
				ExtensionName_242 = extensionName[242];
				ExtensionName_243 = extensionName[243];
				ExtensionName_244 = extensionName[244];
				ExtensionName_245 = extensionName[245];
				ExtensionName_246 = extensionName[246];
				ExtensionName_247 = extensionName[247];
				ExtensionName_248 = extensionName[248];
				ExtensionName_249 = extensionName[249];
				ExtensionName_250 = extensionName[250];
				ExtensionName_251 = extensionName[251];
				ExtensionName_252 = extensionName[252];
				ExtensionName_253 = extensionName[253];
				ExtensionName_254 = extensionName[254];
				ExtensionName_255 = extensionName[255];
			}
			SpecVersion = specVersion;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkLayerProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkLayerProperties
	{
		[NativeName(NativeNameType.Field, "layerName")]
		[NativeName(NativeNameType.Type, "char[256]")]
		public byte LayerName_0;
		public byte LayerName_1;
		public byte LayerName_2;
		public byte LayerName_3;
		public byte LayerName_4;
		public byte LayerName_5;
		public byte LayerName_6;
		public byte LayerName_7;
		public byte LayerName_8;
		public byte LayerName_9;
		public byte LayerName_10;
		public byte LayerName_11;
		public byte LayerName_12;
		public byte LayerName_13;
		public byte LayerName_14;
		public byte LayerName_15;
		public byte LayerName_16;
		public byte LayerName_17;
		public byte LayerName_18;
		public byte LayerName_19;
		public byte LayerName_20;
		public byte LayerName_21;
		public byte LayerName_22;
		public byte LayerName_23;
		public byte LayerName_24;
		public byte LayerName_25;
		public byte LayerName_26;
		public byte LayerName_27;
		public byte LayerName_28;
		public byte LayerName_29;
		public byte LayerName_30;
		public byte LayerName_31;
		public byte LayerName_32;
		public byte LayerName_33;
		public byte LayerName_34;
		public byte LayerName_35;
		public byte LayerName_36;
		public byte LayerName_37;
		public byte LayerName_38;
		public byte LayerName_39;
		public byte LayerName_40;
		public byte LayerName_41;
		public byte LayerName_42;
		public byte LayerName_43;
		public byte LayerName_44;
		public byte LayerName_45;
		public byte LayerName_46;
		public byte LayerName_47;
		public byte LayerName_48;
		public byte LayerName_49;
		public byte LayerName_50;
		public byte LayerName_51;
		public byte LayerName_52;
		public byte LayerName_53;
		public byte LayerName_54;
		public byte LayerName_55;
		public byte LayerName_56;
		public byte LayerName_57;
		public byte LayerName_58;
		public byte LayerName_59;
		public byte LayerName_60;
		public byte LayerName_61;
		public byte LayerName_62;
		public byte LayerName_63;
		public byte LayerName_64;
		public byte LayerName_65;
		public byte LayerName_66;
		public byte LayerName_67;
		public byte LayerName_68;
		public byte LayerName_69;
		public byte LayerName_70;
		public byte LayerName_71;
		public byte LayerName_72;
		public byte LayerName_73;
		public byte LayerName_74;
		public byte LayerName_75;
		public byte LayerName_76;
		public byte LayerName_77;
		public byte LayerName_78;
		public byte LayerName_79;
		public byte LayerName_80;
		public byte LayerName_81;
		public byte LayerName_82;
		public byte LayerName_83;
		public byte LayerName_84;
		public byte LayerName_85;
		public byte LayerName_86;
		public byte LayerName_87;
		public byte LayerName_88;
		public byte LayerName_89;
		public byte LayerName_90;
		public byte LayerName_91;
		public byte LayerName_92;
		public byte LayerName_93;
		public byte LayerName_94;
		public byte LayerName_95;
		public byte LayerName_96;
		public byte LayerName_97;
		public byte LayerName_98;
		public byte LayerName_99;
		public byte LayerName_100;
		public byte LayerName_101;
		public byte LayerName_102;
		public byte LayerName_103;
		public byte LayerName_104;
		public byte LayerName_105;
		public byte LayerName_106;
		public byte LayerName_107;
		public byte LayerName_108;
		public byte LayerName_109;
		public byte LayerName_110;
		public byte LayerName_111;
		public byte LayerName_112;
		public byte LayerName_113;
		public byte LayerName_114;
		public byte LayerName_115;
		public byte LayerName_116;
		public byte LayerName_117;
		public byte LayerName_118;
		public byte LayerName_119;
		public byte LayerName_120;
		public byte LayerName_121;
		public byte LayerName_122;
		public byte LayerName_123;
		public byte LayerName_124;
		public byte LayerName_125;
		public byte LayerName_126;
		public byte LayerName_127;
		public byte LayerName_128;
		public byte LayerName_129;
		public byte LayerName_130;
		public byte LayerName_131;
		public byte LayerName_132;
		public byte LayerName_133;
		public byte LayerName_134;
		public byte LayerName_135;
		public byte LayerName_136;
		public byte LayerName_137;
		public byte LayerName_138;
		public byte LayerName_139;
		public byte LayerName_140;
		public byte LayerName_141;
		public byte LayerName_142;
		public byte LayerName_143;
		public byte LayerName_144;
		public byte LayerName_145;
		public byte LayerName_146;
		public byte LayerName_147;
		public byte LayerName_148;
		public byte LayerName_149;
		public byte LayerName_150;
		public byte LayerName_151;
		public byte LayerName_152;
		public byte LayerName_153;
		public byte LayerName_154;
		public byte LayerName_155;
		public byte LayerName_156;
		public byte LayerName_157;
		public byte LayerName_158;
		public byte LayerName_159;
		public byte LayerName_160;
		public byte LayerName_161;
		public byte LayerName_162;
		public byte LayerName_163;
		public byte LayerName_164;
		public byte LayerName_165;
		public byte LayerName_166;
		public byte LayerName_167;
		public byte LayerName_168;
		public byte LayerName_169;
		public byte LayerName_170;
		public byte LayerName_171;
		public byte LayerName_172;
		public byte LayerName_173;
		public byte LayerName_174;
		public byte LayerName_175;
		public byte LayerName_176;
		public byte LayerName_177;
		public byte LayerName_178;
		public byte LayerName_179;
		public byte LayerName_180;
		public byte LayerName_181;
		public byte LayerName_182;
		public byte LayerName_183;
		public byte LayerName_184;
		public byte LayerName_185;
		public byte LayerName_186;
		public byte LayerName_187;
		public byte LayerName_188;
		public byte LayerName_189;
		public byte LayerName_190;
		public byte LayerName_191;
		public byte LayerName_192;
		public byte LayerName_193;
		public byte LayerName_194;
		public byte LayerName_195;
		public byte LayerName_196;
		public byte LayerName_197;
		public byte LayerName_198;
		public byte LayerName_199;
		public byte LayerName_200;
		public byte LayerName_201;
		public byte LayerName_202;
		public byte LayerName_203;
		public byte LayerName_204;
		public byte LayerName_205;
		public byte LayerName_206;
		public byte LayerName_207;
		public byte LayerName_208;
		public byte LayerName_209;
		public byte LayerName_210;
		public byte LayerName_211;
		public byte LayerName_212;
		public byte LayerName_213;
		public byte LayerName_214;
		public byte LayerName_215;
		public byte LayerName_216;
		public byte LayerName_217;
		public byte LayerName_218;
		public byte LayerName_219;
		public byte LayerName_220;
		public byte LayerName_221;
		public byte LayerName_222;
		public byte LayerName_223;
		public byte LayerName_224;
		public byte LayerName_225;
		public byte LayerName_226;
		public byte LayerName_227;
		public byte LayerName_228;
		public byte LayerName_229;
		public byte LayerName_230;
		public byte LayerName_231;
		public byte LayerName_232;
		public byte LayerName_233;
		public byte LayerName_234;
		public byte LayerName_235;
		public byte LayerName_236;
		public byte LayerName_237;
		public byte LayerName_238;
		public byte LayerName_239;
		public byte LayerName_240;
		public byte LayerName_241;
		public byte LayerName_242;
		public byte LayerName_243;
		public byte LayerName_244;
		public byte LayerName_245;
		public byte LayerName_246;
		public byte LayerName_247;
		public byte LayerName_248;
		public byte LayerName_249;
		public byte LayerName_250;
		public byte LayerName_251;
		public byte LayerName_252;
		public byte LayerName_253;
		public byte LayerName_254;
		public byte LayerName_255;
		[NativeName(NativeNameType.Field, "specVersion")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpecVersion;
		[NativeName(NativeNameType.Field, "implementationVersion")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ImplementationVersion;
		[NativeName(NativeNameType.Field, "description")]
		[NativeName(NativeNameType.Type, "char[256]")]
		public byte Description_0;
		public byte Description_1;
		public byte Description_2;
		public byte Description_3;
		public byte Description_4;
		public byte Description_5;
		public byte Description_6;
		public byte Description_7;
		public byte Description_8;
		public byte Description_9;
		public byte Description_10;
		public byte Description_11;
		public byte Description_12;
		public byte Description_13;
		public byte Description_14;
		public byte Description_15;
		public byte Description_16;
		public byte Description_17;
		public byte Description_18;
		public byte Description_19;
		public byte Description_20;
		public byte Description_21;
		public byte Description_22;
		public byte Description_23;
		public byte Description_24;
		public byte Description_25;
		public byte Description_26;
		public byte Description_27;
		public byte Description_28;
		public byte Description_29;
		public byte Description_30;
		public byte Description_31;
		public byte Description_32;
		public byte Description_33;
		public byte Description_34;
		public byte Description_35;
		public byte Description_36;
		public byte Description_37;
		public byte Description_38;
		public byte Description_39;
		public byte Description_40;
		public byte Description_41;
		public byte Description_42;
		public byte Description_43;
		public byte Description_44;
		public byte Description_45;
		public byte Description_46;
		public byte Description_47;
		public byte Description_48;
		public byte Description_49;
		public byte Description_50;
		public byte Description_51;
		public byte Description_52;
		public byte Description_53;
		public byte Description_54;
		public byte Description_55;
		public byte Description_56;
		public byte Description_57;
		public byte Description_58;
		public byte Description_59;
		public byte Description_60;
		public byte Description_61;
		public byte Description_62;
		public byte Description_63;
		public byte Description_64;
		public byte Description_65;
		public byte Description_66;
		public byte Description_67;
		public byte Description_68;
		public byte Description_69;
		public byte Description_70;
		public byte Description_71;
		public byte Description_72;
		public byte Description_73;
		public byte Description_74;
		public byte Description_75;
		public byte Description_76;
		public byte Description_77;
		public byte Description_78;
		public byte Description_79;
		public byte Description_80;
		public byte Description_81;
		public byte Description_82;
		public byte Description_83;
		public byte Description_84;
		public byte Description_85;
		public byte Description_86;
		public byte Description_87;
		public byte Description_88;
		public byte Description_89;
		public byte Description_90;
		public byte Description_91;
		public byte Description_92;
		public byte Description_93;
		public byte Description_94;
		public byte Description_95;
		public byte Description_96;
		public byte Description_97;
		public byte Description_98;
		public byte Description_99;
		public byte Description_100;
		public byte Description_101;
		public byte Description_102;
		public byte Description_103;
		public byte Description_104;
		public byte Description_105;
		public byte Description_106;
		public byte Description_107;
		public byte Description_108;
		public byte Description_109;
		public byte Description_110;
		public byte Description_111;
		public byte Description_112;
		public byte Description_113;
		public byte Description_114;
		public byte Description_115;
		public byte Description_116;
		public byte Description_117;
		public byte Description_118;
		public byte Description_119;
		public byte Description_120;
		public byte Description_121;
		public byte Description_122;
		public byte Description_123;
		public byte Description_124;
		public byte Description_125;
		public byte Description_126;
		public byte Description_127;
		public byte Description_128;
		public byte Description_129;
		public byte Description_130;
		public byte Description_131;
		public byte Description_132;
		public byte Description_133;
		public byte Description_134;
		public byte Description_135;
		public byte Description_136;
		public byte Description_137;
		public byte Description_138;
		public byte Description_139;
		public byte Description_140;
		public byte Description_141;
		public byte Description_142;
		public byte Description_143;
		public byte Description_144;
		public byte Description_145;
		public byte Description_146;
		public byte Description_147;
		public byte Description_148;
		public byte Description_149;
		public byte Description_150;
		public byte Description_151;
		public byte Description_152;
		public byte Description_153;
		public byte Description_154;
		public byte Description_155;
		public byte Description_156;
		public byte Description_157;
		public byte Description_158;
		public byte Description_159;
		public byte Description_160;
		public byte Description_161;
		public byte Description_162;
		public byte Description_163;
		public byte Description_164;
		public byte Description_165;
		public byte Description_166;
		public byte Description_167;
		public byte Description_168;
		public byte Description_169;
		public byte Description_170;
		public byte Description_171;
		public byte Description_172;
		public byte Description_173;
		public byte Description_174;
		public byte Description_175;
		public byte Description_176;
		public byte Description_177;
		public byte Description_178;
		public byte Description_179;
		public byte Description_180;
		public byte Description_181;
		public byte Description_182;
		public byte Description_183;
		public byte Description_184;
		public byte Description_185;
		public byte Description_186;
		public byte Description_187;
		public byte Description_188;
		public byte Description_189;
		public byte Description_190;
		public byte Description_191;
		public byte Description_192;
		public byte Description_193;
		public byte Description_194;
		public byte Description_195;
		public byte Description_196;
		public byte Description_197;
		public byte Description_198;
		public byte Description_199;
		public byte Description_200;
		public byte Description_201;
		public byte Description_202;
		public byte Description_203;
		public byte Description_204;
		public byte Description_205;
		public byte Description_206;
		public byte Description_207;
		public byte Description_208;
		public byte Description_209;
		public byte Description_210;
		public byte Description_211;
		public byte Description_212;
		public byte Description_213;
		public byte Description_214;
		public byte Description_215;
		public byte Description_216;
		public byte Description_217;
		public byte Description_218;
		public byte Description_219;
		public byte Description_220;
		public byte Description_221;
		public byte Description_222;
		public byte Description_223;
		public byte Description_224;
		public byte Description_225;
		public byte Description_226;
		public byte Description_227;
		public byte Description_228;
		public byte Description_229;
		public byte Description_230;
		public byte Description_231;
		public byte Description_232;
		public byte Description_233;
		public byte Description_234;
		public byte Description_235;
		public byte Description_236;
		public byte Description_237;
		public byte Description_238;
		public byte Description_239;
		public byte Description_240;
		public byte Description_241;
		public byte Description_242;
		public byte Description_243;
		public byte Description_244;
		public byte Description_245;
		public byte Description_246;
		public byte Description_247;
		public byte Description_248;
		public byte Description_249;
		public byte Description_250;
		public byte Description_251;
		public byte Description_252;
		public byte Description_253;
		public byte Description_254;
		public byte Description_255;

		public unsafe VkLayerProperties(byte* layerName = default, uint specVersion = default, uint implementationVersion = default, byte* description = default)
		{
			if (layerName != default)
			{
				LayerName_0 = layerName[0];
				LayerName_1 = layerName[1];
				LayerName_2 = layerName[2];
				LayerName_3 = layerName[3];
				LayerName_4 = layerName[4];
				LayerName_5 = layerName[5];
				LayerName_6 = layerName[6];
				LayerName_7 = layerName[7];
				LayerName_8 = layerName[8];
				LayerName_9 = layerName[9];
				LayerName_10 = layerName[10];
				LayerName_11 = layerName[11];
				LayerName_12 = layerName[12];
				LayerName_13 = layerName[13];
				LayerName_14 = layerName[14];
				LayerName_15 = layerName[15];
				LayerName_16 = layerName[16];
				LayerName_17 = layerName[17];
				LayerName_18 = layerName[18];
				LayerName_19 = layerName[19];
				LayerName_20 = layerName[20];
				LayerName_21 = layerName[21];
				LayerName_22 = layerName[22];
				LayerName_23 = layerName[23];
				LayerName_24 = layerName[24];
				LayerName_25 = layerName[25];
				LayerName_26 = layerName[26];
				LayerName_27 = layerName[27];
				LayerName_28 = layerName[28];
				LayerName_29 = layerName[29];
				LayerName_30 = layerName[30];
				LayerName_31 = layerName[31];
				LayerName_32 = layerName[32];
				LayerName_33 = layerName[33];
				LayerName_34 = layerName[34];
				LayerName_35 = layerName[35];
				LayerName_36 = layerName[36];
				LayerName_37 = layerName[37];
				LayerName_38 = layerName[38];
				LayerName_39 = layerName[39];
				LayerName_40 = layerName[40];
				LayerName_41 = layerName[41];
				LayerName_42 = layerName[42];
				LayerName_43 = layerName[43];
				LayerName_44 = layerName[44];
				LayerName_45 = layerName[45];
				LayerName_46 = layerName[46];
				LayerName_47 = layerName[47];
				LayerName_48 = layerName[48];
				LayerName_49 = layerName[49];
				LayerName_50 = layerName[50];
				LayerName_51 = layerName[51];
				LayerName_52 = layerName[52];
				LayerName_53 = layerName[53];
				LayerName_54 = layerName[54];
				LayerName_55 = layerName[55];
				LayerName_56 = layerName[56];
				LayerName_57 = layerName[57];
				LayerName_58 = layerName[58];
				LayerName_59 = layerName[59];
				LayerName_60 = layerName[60];
				LayerName_61 = layerName[61];
				LayerName_62 = layerName[62];
				LayerName_63 = layerName[63];
				LayerName_64 = layerName[64];
				LayerName_65 = layerName[65];
				LayerName_66 = layerName[66];
				LayerName_67 = layerName[67];
				LayerName_68 = layerName[68];
				LayerName_69 = layerName[69];
				LayerName_70 = layerName[70];
				LayerName_71 = layerName[71];
				LayerName_72 = layerName[72];
				LayerName_73 = layerName[73];
				LayerName_74 = layerName[74];
				LayerName_75 = layerName[75];
				LayerName_76 = layerName[76];
				LayerName_77 = layerName[77];
				LayerName_78 = layerName[78];
				LayerName_79 = layerName[79];
				LayerName_80 = layerName[80];
				LayerName_81 = layerName[81];
				LayerName_82 = layerName[82];
				LayerName_83 = layerName[83];
				LayerName_84 = layerName[84];
				LayerName_85 = layerName[85];
				LayerName_86 = layerName[86];
				LayerName_87 = layerName[87];
				LayerName_88 = layerName[88];
				LayerName_89 = layerName[89];
				LayerName_90 = layerName[90];
				LayerName_91 = layerName[91];
				LayerName_92 = layerName[92];
				LayerName_93 = layerName[93];
				LayerName_94 = layerName[94];
				LayerName_95 = layerName[95];
				LayerName_96 = layerName[96];
				LayerName_97 = layerName[97];
				LayerName_98 = layerName[98];
				LayerName_99 = layerName[99];
				LayerName_100 = layerName[100];
				LayerName_101 = layerName[101];
				LayerName_102 = layerName[102];
				LayerName_103 = layerName[103];
				LayerName_104 = layerName[104];
				LayerName_105 = layerName[105];
				LayerName_106 = layerName[106];
				LayerName_107 = layerName[107];
				LayerName_108 = layerName[108];
				LayerName_109 = layerName[109];
				LayerName_110 = layerName[110];
				LayerName_111 = layerName[111];
				LayerName_112 = layerName[112];
				LayerName_113 = layerName[113];
				LayerName_114 = layerName[114];
				LayerName_115 = layerName[115];
				LayerName_116 = layerName[116];
				LayerName_117 = layerName[117];
				LayerName_118 = layerName[118];
				LayerName_119 = layerName[119];
				LayerName_120 = layerName[120];
				LayerName_121 = layerName[121];
				LayerName_122 = layerName[122];
				LayerName_123 = layerName[123];
				LayerName_124 = layerName[124];
				LayerName_125 = layerName[125];
				LayerName_126 = layerName[126];
				LayerName_127 = layerName[127];
				LayerName_128 = layerName[128];
				LayerName_129 = layerName[129];
				LayerName_130 = layerName[130];
				LayerName_131 = layerName[131];
				LayerName_132 = layerName[132];
				LayerName_133 = layerName[133];
				LayerName_134 = layerName[134];
				LayerName_135 = layerName[135];
				LayerName_136 = layerName[136];
				LayerName_137 = layerName[137];
				LayerName_138 = layerName[138];
				LayerName_139 = layerName[139];
				LayerName_140 = layerName[140];
				LayerName_141 = layerName[141];
				LayerName_142 = layerName[142];
				LayerName_143 = layerName[143];
				LayerName_144 = layerName[144];
				LayerName_145 = layerName[145];
				LayerName_146 = layerName[146];
				LayerName_147 = layerName[147];
				LayerName_148 = layerName[148];
				LayerName_149 = layerName[149];
				LayerName_150 = layerName[150];
				LayerName_151 = layerName[151];
				LayerName_152 = layerName[152];
				LayerName_153 = layerName[153];
				LayerName_154 = layerName[154];
				LayerName_155 = layerName[155];
				LayerName_156 = layerName[156];
				LayerName_157 = layerName[157];
				LayerName_158 = layerName[158];
				LayerName_159 = layerName[159];
				LayerName_160 = layerName[160];
				LayerName_161 = layerName[161];
				LayerName_162 = layerName[162];
				LayerName_163 = layerName[163];
				LayerName_164 = layerName[164];
				LayerName_165 = layerName[165];
				LayerName_166 = layerName[166];
				LayerName_167 = layerName[167];
				LayerName_168 = layerName[168];
				LayerName_169 = layerName[169];
				LayerName_170 = layerName[170];
				LayerName_171 = layerName[171];
				LayerName_172 = layerName[172];
				LayerName_173 = layerName[173];
				LayerName_174 = layerName[174];
				LayerName_175 = layerName[175];
				LayerName_176 = layerName[176];
				LayerName_177 = layerName[177];
				LayerName_178 = layerName[178];
				LayerName_179 = layerName[179];
				LayerName_180 = layerName[180];
				LayerName_181 = layerName[181];
				LayerName_182 = layerName[182];
				LayerName_183 = layerName[183];
				LayerName_184 = layerName[184];
				LayerName_185 = layerName[185];
				LayerName_186 = layerName[186];
				LayerName_187 = layerName[187];
				LayerName_188 = layerName[188];
				LayerName_189 = layerName[189];
				LayerName_190 = layerName[190];
				LayerName_191 = layerName[191];
				LayerName_192 = layerName[192];
				LayerName_193 = layerName[193];
				LayerName_194 = layerName[194];
				LayerName_195 = layerName[195];
				LayerName_196 = layerName[196];
				LayerName_197 = layerName[197];
				LayerName_198 = layerName[198];
				LayerName_199 = layerName[199];
				LayerName_200 = layerName[200];
				LayerName_201 = layerName[201];
				LayerName_202 = layerName[202];
				LayerName_203 = layerName[203];
				LayerName_204 = layerName[204];
				LayerName_205 = layerName[205];
				LayerName_206 = layerName[206];
				LayerName_207 = layerName[207];
				LayerName_208 = layerName[208];
				LayerName_209 = layerName[209];
				LayerName_210 = layerName[210];
				LayerName_211 = layerName[211];
				LayerName_212 = layerName[212];
				LayerName_213 = layerName[213];
				LayerName_214 = layerName[214];
				LayerName_215 = layerName[215];
				LayerName_216 = layerName[216];
				LayerName_217 = layerName[217];
				LayerName_218 = layerName[218];
				LayerName_219 = layerName[219];
				LayerName_220 = layerName[220];
				LayerName_221 = layerName[221];
				LayerName_222 = layerName[222];
				LayerName_223 = layerName[223];
				LayerName_224 = layerName[224];
				LayerName_225 = layerName[225];
				LayerName_226 = layerName[226];
				LayerName_227 = layerName[227];
				LayerName_228 = layerName[228];
				LayerName_229 = layerName[229];
				LayerName_230 = layerName[230];
				LayerName_231 = layerName[231];
				LayerName_232 = layerName[232];
				LayerName_233 = layerName[233];
				LayerName_234 = layerName[234];
				LayerName_235 = layerName[235];
				LayerName_236 = layerName[236];
				LayerName_237 = layerName[237];
				LayerName_238 = layerName[238];
				LayerName_239 = layerName[239];
				LayerName_240 = layerName[240];
				LayerName_241 = layerName[241];
				LayerName_242 = layerName[242];
				LayerName_243 = layerName[243];
				LayerName_244 = layerName[244];
				LayerName_245 = layerName[245];
				LayerName_246 = layerName[246];
				LayerName_247 = layerName[247];
				LayerName_248 = layerName[248];
				LayerName_249 = layerName[249];
				LayerName_250 = layerName[250];
				LayerName_251 = layerName[251];
				LayerName_252 = layerName[252];
				LayerName_253 = layerName[253];
				LayerName_254 = layerName[254];
				LayerName_255 = layerName[255];
			}
			SpecVersion = specVersion;
			ImplementationVersion = implementationVersion;
			if (description != default)
			{
				Description_0 = description[0];
				Description_1 = description[1];
				Description_2 = description[2];
				Description_3 = description[3];
				Description_4 = description[4];
				Description_5 = description[5];
				Description_6 = description[6];
				Description_7 = description[7];
				Description_8 = description[8];
				Description_9 = description[9];
				Description_10 = description[10];
				Description_11 = description[11];
				Description_12 = description[12];
				Description_13 = description[13];
				Description_14 = description[14];
				Description_15 = description[15];
				Description_16 = description[16];
				Description_17 = description[17];
				Description_18 = description[18];
				Description_19 = description[19];
				Description_20 = description[20];
				Description_21 = description[21];
				Description_22 = description[22];
				Description_23 = description[23];
				Description_24 = description[24];
				Description_25 = description[25];
				Description_26 = description[26];
				Description_27 = description[27];
				Description_28 = description[28];
				Description_29 = description[29];
				Description_30 = description[30];
				Description_31 = description[31];
				Description_32 = description[32];
				Description_33 = description[33];
				Description_34 = description[34];
				Description_35 = description[35];
				Description_36 = description[36];
				Description_37 = description[37];
				Description_38 = description[38];
				Description_39 = description[39];
				Description_40 = description[40];
				Description_41 = description[41];
				Description_42 = description[42];
				Description_43 = description[43];
				Description_44 = description[44];
				Description_45 = description[45];
				Description_46 = description[46];
				Description_47 = description[47];
				Description_48 = description[48];
				Description_49 = description[49];
				Description_50 = description[50];
				Description_51 = description[51];
				Description_52 = description[52];
				Description_53 = description[53];
				Description_54 = description[54];
				Description_55 = description[55];
				Description_56 = description[56];
				Description_57 = description[57];
				Description_58 = description[58];
				Description_59 = description[59];
				Description_60 = description[60];
				Description_61 = description[61];
				Description_62 = description[62];
				Description_63 = description[63];
				Description_64 = description[64];
				Description_65 = description[65];
				Description_66 = description[66];
				Description_67 = description[67];
				Description_68 = description[68];
				Description_69 = description[69];
				Description_70 = description[70];
				Description_71 = description[71];
				Description_72 = description[72];
				Description_73 = description[73];
				Description_74 = description[74];
				Description_75 = description[75];
				Description_76 = description[76];
				Description_77 = description[77];
				Description_78 = description[78];
				Description_79 = description[79];
				Description_80 = description[80];
				Description_81 = description[81];
				Description_82 = description[82];
				Description_83 = description[83];
				Description_84 = description[84];
				Description_85 = description[85];
				Description_86 = description[86];
				Description_87 = description[87];
				Description_88 = description[88];
				Description_89 = description[89];
				Description_90 = description[90];
				Description_91 = description[91];
				Description_92 = description[92];
				Description_93 = description[93];
				Description_94 = description[94];
				Description_95 = description[95];
				Description_96 = description[96];
				Description_97 = description[97];
				Description_98 = description[98];
				Description_99 = description[99];
				Description_100 = description[100];
				Description_101 = description[101];
				Description_102 = description[102];
				Description_103 = description[103];
				Description_104 = description[104];
				Description_105 = description[105];
				Description_106 = description[106];
				Description_107 = description[107];
				Description_108 = description[108];
				Description_109 = description[109];
				Description_110 = description[110];
				Description_111 = description[111];
				Description_112 = description[112];
				Description_113 = description[113];
				Description_114 = description[114];
				Description_115 = description[115];
				Description_116 = description[116];
				Description_117 = description[117];
				Description_118 = description[118];
				Description_119 = description[119];
				Description_120 = description[120];
				Description_121 = description[121];
				Description_122 = description[122];
				Description_123 = description[123];
				Description_124 = description[124];
				Description_125 = description[125];
				Description_126 = description[126];
				Description_127 = description[127];
				Description_128 = description[128];
				Description_129 = description[129];
				Description_130 = description[130];
				Description_131 = description[131];
				Description_132 = description[132];
				Description_133 = description[133];
				Description_134 = description[134];
				Description_135 = description[135];
				Description_136 = description[136];
				Description_137 = description[137];
				Description_138 = description[138];
				Description_139 = description[139];
				Description_140 = description[140];
				Description_141 = description[141];
				Description_142 = description[142];
				Description_143 = description[143];
				Description_144 = description[144];
				Description_145 = description[145];
				Description_146 = description[146];
				Description_147 = description[147];
				Description_148 = description[148];
				Description_149 = description[149];
				Description_150 = description[150];
				Description_151 = description[151];
				Description_152 = description[152];
				Description_153 = description[153];
				Description_154 = description[154];
				Description_155 = description[155];
				Description_156 = description[156];
				Description_157 = description[157];
				Description_158 = description[158];
				Description_159 = description[159];
				Description_160 = description[160];
				Description_161 = description[161];
				Description_162 = description[162];
				Description_163 = description[163];
				Description_164 = description[164];
				Description_165 = description[165];
				Description_166 = description[166];
				Description_167 = description[167];
				Description_168 = description[168];
				Description_169 = description[169];
				Description_170 = description[170];
				Description_171 = description[171];
				Description_172 = description[172];
				Description_173 = description[173];
				Description_174 = description[174];
				Description_175 = description[175];
				Description_176 = description[176];
				Description_177 = description[177];
				Description_178 = description[178];
				Description_179 = description[179];
				Description_180 = description[180];
				Description_181 = description[181];
				Description_182 = description[182];
				Description_183 = description[183];
				Description_184 = description[184];
				Description_185 = description[185];
				Description_186 = description[186];
				Description_187 = description[187];
				Description_188 = description[188];
				Description_189 = description[189];
				Description_190 = description[190];
				Description_191 = description[191];
				Description_192 = description[192];
				Description_193 = description[193];
				Description_194 = description[194];
				Description_195 = description[195];
				Description_196 = description[196];
				Description_197 = description[197];
				Description_198 = description[198];
				Description_199 = description[199];
				Description_200 = description[200];
				Description_201 = description[201];
				Description_202 = description[202];
				Description_203 = description[203];
				Description_204 = description[204];
				Description_205 = description[205];
				Description_206 = description[206];
				Description_207 = description[207];
				Description_208 = description[208];
				Description_209 = description[209];
				Description_210 = description[210];
				Description_211 = description[211];
				Description_212 = description[212];
				Description_213 = description[213];
				Description_214 = description[214];
				Description_215 = description[215];
				Description_216 = description[216];
				Description_217 = description[217];
				Description_218 = description[218];
				Description_219 = description[219];
				Description_220 = description[220];
				Description_221 = description[221];
				Description_222 = description[222];
				Description_223 = description[223];
				Description_224 = description[224];
				Description_225 = description[225];
				Description_226 = description[226];
				Description_227 = description[227];
				Description_228 = description[228];
				Description_229 = description[229];
				Description_230 = description[230];
				Description_231 = description[231];
				Description_232 = description[232];
				Description_233 = description[233];
				Description_234 = description[234];
				Description_235 = description[235];
				Description_236 = description[236];
				Description_237 = description[237];
				Description_238 = description[238];
				Description_239 = description[239];
				Description_240 = description[240];
				Description_241 = description[241];
				Description_242 = description[242];
				Description_243 = description[243];
				Description_244 = description[244];
				Description_245 = description[245];
				Description_246 = description[246];
				Description_247 = description[247];
				Description_248 = description[248];
				Description_249 = description[249];
				Description_250 = description[250];
				Description_251 = description[251];
				Description_252 = description[252];
				Description_253 = description[253];
				Description_254 = description[254];
				Description_255 = description[255];
			}
		}

		public unsafe VkLayerProperties(Span<byte> layerName = default, uint specVersion = default, uint implementationVersion = default, Span<byte> description = default)
		{
			if (layerName != default)
			{
				LayerName_0 = layerName[0];
				LayerName_1 = layerName[1];
				LayerName_2 = layerName[2];
				LayerName_3 = layerName[3];
				LayerName_4 = layerName[4];
				LayerName_5 = layerName[5];
				LayerName_6 = layerName[6];
				LayerName_7 = layerName[7];
				LayerName_8 = layerName[8];
				LayerName_9 = layerName[9];
				LayerName_10 = layerName[10];
				LayerName_11 = layerName[11];
				LayerName_12 = layerName[12];
				LayerName_13 = layerName[13];
				LayerName_14 = layerName[14];
				LayerName_15 = layerName[15];
				LayerName_16 = layerName[16];
				LayerName_17 = layerName[17];
				LayerName_18 = layerName[18];
				LayerName_19 = layerName[19];
				LayerName_20 = layerName[20];
				LayerName_21 = layerName[21];
				LayerName_22 = layerName[22];
				LayerName_23 = layerName[23];
				LayerName_24 = layerName[24];
				LayerName_25 = layerName[25];
				LayerName_26 = layerName[26];
				LayerName_27 = layerName[27];
				LayerName_28 = layerName[28];
				LayerName_29 = layerName[29];
				LayerName_30 = layerName[30];
				LayerName_31 = layerName[31];
				LayerName_32 = layerName[32];
				LayerName_33 = layerName[33];
				LayerName_34 = layerName[34];
				LayerName_35 = layerName[35];
				LayerName_36 = layerName[36];
				LayerName_37 = layerName[37];
				LayerName_38 = layerName[38];
				LayerName_39 = layerName[39];
				LayerName_40 = layerName[40];
				LayerName_41 = layerName[41];
				LayerName_42 = layerName[42];
				LayerName_43 = layerName[43];
				LayerName_44 = layerName[44];
				LayerName_45 = layerName[45];
				LayerName_46 = layerName[46];
				LayerName_47 = layerName[47];
				LayerName_48 = layerName[48];
				LayerName_49 = layerName[49];
				LayerName_50 = layerName[50];
				LayerName_51 = layerName[51];
				LayerName_52 = layerName[52];
				LayerName_53 = layerName[53];
				LayerName_54 = layerName[54];
				LayerName_55 = layerName[55];
				LayerName_56 = layerName[56];
				LayerName_57 = layerName[57];
				LayerName_58 = layerName[58];
				LayerName_59 = layerName[59];
				LayerName_60 = layerName[60];
				LayerName_61 = layerName[61];
				LayerName_62 = layerName[62];
				LayerName_63 = layerName[63];
				LayerName_64 = layerName[64];
				LayerName_65 = layerName[65];
				LayerName_66 = layerName[66];
				LayerName_67 = layerName[67];
				LayerName_68 = layerName[68];
				LayerName_69 = layerName[69];
				LayerName_70 = layerName[70];
				LayerName_71 = layerName[71];
				LayerName_72 = layerName[72];
				LayerName_73 = layerName[73];
				LayerName_74 = layerName[74];
				LayerName_75 = layerName[75];
				LayerName_76 = layerName[76];
				LayerName_77 = layerName[77];
				LayerName_78 = layerName[78];
				LayerName_79 = layerName[79];
				LayerName_80 = layerName[80];
				LayerName_81 = layerName[81];
				LayerName_82 = layerName[82];
				LayerName_83 = layerName[83];
				LayerName_84 = layerName[84];
				LayerName_85 = layerName[85];
				LayerName_86 = layerName[86];
				LayerName_87 = layerName[87];
				LayerName_88 = layerName[88];
				LayerName_89 = layerName[89];
				LayerName_90 = layerName[90];
				LayerName_91 = layerName[91];
				LayerName_92 = layerName[92];
				LayerName_93 = layerName[93];
				LayerName_94 = layerName[94];
				LayerName_95 = layerName[95];
				LayerName_96 = layerName[96];
				LayerName_97 = layerName[97];
				LayerName_98 = layerName[98];
				LayerName_99 = layerName[99];
				LayerName_100 = layerName[100];
				LayerName_101 = layerName[101];
				LayerName_102 = layerName[102];
				LayerName_103 = layerName[103];
				LayerName_104 = layerName[104];
				LayerName_105 = layerName[105];
				LayerName_106 = layerName[106];
				LayerName_107 = layerName[107];
				LayerName_108 = layerName[108];
				LayerName_109 = layerName[109];
				LayerName_110 = layerName[110];
				LayerName_111 = layerName[111];
				LayerName_112 = layerName[112];
				LayerName_113 = layerName[113];
				LayerName_114 = layerName[114];
				LayerName_115 = layerName[115];
				LayerName_116 = layerName[116];
				LayerName_117 = layerName[117];
				LayerName_118 = layerName[118];
				LayerName_119 = layerName[119];
				LayerName_120 = layerName[120];
				LayerName_121 = layerName[121];
				LayerName_122 = layerName[122];
				LayerName_123 = layerName[123];
				LayerName_124 = layerName[124];
				LayerName_125 = layerName[125];
				LayerName_126 = layerName[126];
				LayerName_127 = layerName[127];
				LayerName_128 = layerName[128];
				LayerName_129 = layerName[129];
				LayerName_130 = layerName[130];
				LayerName_131 = layerName[131];
				LayerName_132 = layerName[132];
				LayerName_133 = layerName[133];
				LayerName_134 = layerName[134];
				LayerName_135 = layerName[135];
				LayerName_136 = layerName[136];
				LayerName_137 = layerName[137];
				LayerName_138 = layerName[138];
				LayerName_139 = layerName[139];
				LayerName_140 = layerName[140];
				LayerName_141 = layerName[141];
				LayerName_142 = layerName[142];
				LayerName_143 = layerName[143];
				LayerName_144 = layerName[144];
				LayerName_145 = layerName[145];
				LayerName_146 = layerName[146];
				LayerName_147 = layerName[147];
				LayerName_148 = layerName[148];
				LayerName_149 = layerName[149];
				LayerName_150 = layerName[150];
				LayerName_151 = layerName[151];
				LayerName_152 = layerName[152];
				LayerName_153 = layerName[153];
				LayerName_154 = layerName[154];
				LayerName_155 = layerName[155];
				LayerName_156 = layerName[156];
				LayerName_157 = layerName[157];
				LayerName_158 = layerName[158];
				LayerName_159 = layerName[159];
				LayerName_160 = layerName[160];
				LayerName_161 = layerName[161];
				LayerName_162 = layerName[162];
				LayerName_163 = layerName[163];
				LayerName_164 = layerName[164];
				LayerName_165 = layerName[165];
				LayerName_166 = layerName[166];
				LayerName_167 = layerName[167];
				LayerName_168 = layerName[168];
				LayerName_169 = layerName[169];
				LayerName_170 = layerName[170];
				LayerName_171 = layerName[171];
				LayerName_172 = layerName[172];
				LayerName_173 = layerName[173];
				LayerName_174 = layerName[174];
				LayerName_175 = layerName[175];
				LayerName_176 = layerName[176];
				LayerName_177 = layerName[177];
				LayerName_178 = layerName[178];
				LayerName_179 = layerName[179];
				LayerName_180 = layerName[180];
				LayerName_181 = layerName[181];
				LayerName_182 = layerName[182];
				LayerName_183 = layerName[183];
				LayerName_184 = layerName[184];
				LayerName_185 = layerName[185];
				LayerName_186 = layerName[186];
				LayerName_187 = layerName[187];
				LayerName_188 = layerName[188];
				LayerName_189 = layerName[189];
				LayerName_190 = layerName[190];
				LayerName_191 = layerName[191];
				LayerName_192 = layerName[192];
				LayerName_193 = layerName[193];
				LayerName_194 = layerName[194];
				LayerName_195 = layerName[195];
				LayerName_196 = layerName[196];
				LayerName_197 = layerName[197];
				LayerName_198 = layerName[198];
				LayerName_199 = layerName[199];
				LayerName_200 = layerName[200];
				LayerName_201 = layerName[201];
				LayerName_202 = layerName[202];
				LayerName_203 = layerName[203];
				LayerName_204 = layerName[204];
				LayerName_205 = layerName[205];
				LayerName_206 = layerName[206];
				LayerName_207 = layerName[207];
				LayerName_208 = layerName[208];
				LayerName_209 = layerName[209];
				LayerName_210 = layerName[210];
				LayerName_211 = layerName[211];
				LayerName_212 = layerName[212];
				LayerName_213 = layerName[213];
				LayerName_214 = layerName[214];
				LayerName_215 = layerName[215];
				LayerName_216 = layerName[216];
				LayerName_217 = layerName[217];
				LayerName_218 = layerName[218];
				LayerName_219 = layerName[219];
				LayerName_220 = layerName[220];
				LayerName_221 = layerName[221];
				LayerName_222 = layerName[222];
				LayerName_223 = layerName[223];
				LayerName_224 = layerName[224];
				LayerName_225 = layerName[225];
				LayerName_226 = layerName[226];
				LayerName_227 = layerName[227];
				LayerName_228 = layerName[228];
				LayerName_229 = layerName[229];
				LayerName_230 = layerName[230];
				LayerName_231 = layerName[231];
				LayerName_232 = layerName[232];
				LayerName_233 = layerName[233];
				LayerName_234 = layerName[234];
				LayerName_235 = layerName[235];
				LayerName_236 = layerName[236];
				LayerName_237 = layerName[237];
				LayerName_238 = layerName[238];
				LayerName_239 = layerName[239];
				LayerName_240 = layerName[240];
				LayerName_241 = layerName[241];
				LayerName_242 = layerName[242];
				LayerName_243 = layerName[243];
				LayerName_244 = layerName[244];
				LayerName_245 = layerName[245];
				LayerName_246 = layerName[246];
				LayerName_247 = layerName[247];
				LayerName_248 = layerName[248];
				LayerName_249 = layerName[249];
				LayerName_250 = layerName[250];
				LayerName_251 = layerName[251];
				LayerName_252 = layerName[252];
				LayerName_253 = layerName[253];
				LayerName_254 = layerName[254];
				LayerName_255 = layerName[255];
			}
			SpecVersion = specVersion;
			ImplementationVersion = implementationVersion;
			if (description != default)
			{
				Description_0 = description[0];
				Description_1 = description[1];
				Description_2 = description[2];
				Description_3 = description[3];
				Description_4 = description[4];
				Description_5 = description[5];
				Description_6 = description[6];
				Description_7 = description[7];
				Description_8 = description[8];
				Description_9 = description[9];
				Description_10 = description[10];
				Description_11 = description[11];
				Description_12 = description[12];
				Description_13 = description[13];
				Description_14 = description[14];
				Description_15 = description[15];
				Description_16 = description[16];
				Description_17 = description[17];
				Description_18 = description[18];
				Description_19 = description[19];
				Description_20 = description[20];
				Description_21 = description[21];
				Description_22 = description[22];
				Description_23 = description[23];
				Description_24 = description[24];
				Description_25 = description[25];
				Description_26 = description[26];
				Description_27 = description[27];
				Description_28 = description[28];
				Description_29 = description[29];
				Description_30 = description[30];
				Description_31 = description[31];
				Description_32 = description[32];
				Description_33 = description[33];
				Description_34 = description[34];
				Description_35 = description[35];
				Description_36 = description[36];
				Description_37 = description[37];
				Description_38 = description[38];
				Description_39 = description[39];
				Description_40 = description[40];
				Description_41 = description[41];
				Description_42 = description[42];
				Description_43 = description[43];
				Description_44 = description[44];
				Description_45 = description[45];
				Description_46 = description[46];
				Description_47 = description[47];
				Description_48 = description[48];
				Description_49 = description[49];
				Description_50 = description[50];
				Description_51 = description[51];
				Description_52 = description[52];
				Description_53 = description[53];
				Description_54 = description[54];
				Description_55 = description[55];
				Description_56 = description[56];
				Description_57 = description[57];
				Description_58 = description[58];
				Description_59 = description[59];
				Description_60 = description[60];
				Description_61 = description[61];
				Description_62 = description[62];
				Description_63 = description[63];
				Description_64 = description[64];
				Description_65 = description[65];
				Description_66 = description[66];
				Description_67 = description[67];
				Description_68 = description[68];
				Description_69 = description[69];
				Description_70 = description[70];
				Description_71 = description[71];
				Description_72 = description[72];
				Description_73 = description[73];
				Description_74 = description[74];
				Description_75 = description[75];
				Description_76 = description[76];
				Description_77 = description[77];
				Description_78 = description[78];
				Description_79 = description[79];
				Description_80 = description[80];
				Description_81 = description[81];
				Description_82 = description[82];
				Description_83 = description[83];
				Description_84 = description[84];
				Description_85 = description[85];
				Description_86 = description[86];
				Description_87 = description[87];
				Description_88 = description[88];
				Description_89 = description[89];
				Description_90 = description[90];
				Description_91 = description[91];
				Description_92 = description[92];
				Description_93 = description[93];
				Description_94 = description[94];
				Description_95 = description[95];
				Description_96 = description[96];
				Description_97 = description[97];
				Description_98 = description[98];
				Description_99 = description[99];
				Description_100 = description[100];
				Description_101 = description[101];
				Description_102 = description[102];
				Description_103 = description[103];
				Description_104 = description[104];
				Description_105 = description[105];
				Description_106 = description[106];
				Description_107 = description[107];
				Description_108 = description[108];
				Description_109 = description[109];
				Description_110 = description[110];
				Description_111 = description[111];
				Description_112 = description[112];
				Description_113 = description[113];
				Description_114 = description[114];
				Description_115 = description[115];
				Description_116 = description[116];
				Description_117 = description[117];
				Description_118 = description[118];
				Description_119 = description[119];
				Description_120 = description[120];
				Description_121 = description[121];
				Description_122 = description[122];
				Description_123 = description[123];
				Description_124 = description[124];
				Description_125 = description[125];
				Description_126 = description[126];
				Description_127 = description[127];
				Description_128 = description[128];
				Description_129 = description[129];
				Description_130 = description[130];
				Description_131 = description[131];
				Description_132 = description[132];
				Description_133 = description[133];
				Description_134 = description[134];
				Description_135 = description[135];
				Description_136 = description[136];
				Description_137 = description[137];
				Description_138 = description[138];
				Description_139 = description[139];
				Description_140 = description[140];
				Description_141 = description[141];
				Description_142 = description[142];
				Description_143 = description[143];
				Description_144 = description[144];
				Description_145 = description[145];
				Description_146 = description[146];
				Description_147 = description[147];
				Description_148 = description[148];
				Description_149 = description[149];
				Description_150 = description[150];
				Description_151 = description[151];
				Description_152 = description[152];
				Description_153 = description[153];
				Description_154 = description[154];
				Description_155 = description[155];
				Description_156 = description[156];
				Description_157 = description[157];
				Description_158 = description[158];
				Description_159 = description[159];
				Description_160 = description[160];
				Description_161 = description[161];
				Description_162 = description[162];
				Description_163 = description[163];
				Description_164 = description[164];
				Description_165 = description[165];
				Description_166 = description[166];
				Description_167 = description[167];
				Description_168 = description[168];
				Description_169 = description[169];
				Description_170 = description[170];
				Description_171 = description[171];
				Description_172 = description[172];
				Description_173 = description[173];
				Description_174 = description[174];
				Description_175 = description[175];
				Description_176 = description[176];
				Description_177 = description[177];
				Description_178 = description[178];
				Description_179 = description[179];
				Description_180 = description[180];
				Description_181 = description[181];
				Description_182 = description[182];
				Description_183 = description[183];
				Description_184 = description[184];
				Description_185 = description[185];
				Description_186 = description[186];
				Description_187 = description[187];
				Description_188 = description[188];
				Description_189 = description[189];
				Description_190 = description[190];
				Description_191 = description[191];
				Description_192 = description[192];
				Description_193 = description[193];
				Description_194 = description[194];
				Description_195 = description[195];
				Description_196 = description[196];
				Description_197 = description[197];
				Description_198 = description[198];
				Description_199 = description[199];
				Description_200 = description[200];
				Description_201 = description[201];
				Description_202 = description[202];
				Description_203 = description[203];
				Description_204 = description[204];
				Description_205 = description[205];
				Description_206 = description[206];
				Description_207 = description[207];
				Description_208 = description[208];
				Description_209 = description[209];
				Description_210 = description[210];
				Description_211 = description[211];
				Description_212 = description[212];
				Description_213 = description[213];
				Description_214 = description[214];
				Description_215 = description[215];
				Description_216 = description[216];
				Description_217 = description[217];
				Description_218 = description[218];
				Description_219 = description[219];
				Description_220 = description[220];
				Description_221 = description[221];
				Description_222 = description[222];
				Description_223 = description[223];
				Description_224 = description[224];
				Description_225 = description[225];
				Description_226 = description[226];
				Description_227 = description[227];
				Description_228 = description[228];
				Description_229 = description[229];
				Description_230 = description[230];
				Description_231 = description[231];
				Description_232 = description[232];
				Description_233 = description[233];
				Description_234 = description[234];
				Description_235 = description[235];
				Description_236 = description[236];
				Description_237 = description[237];
				Description_238 = description[238];
				Description_239 = description[239];
				Description_240 = description[240];
				Description_241 = description[241];
				Description_242 = description[242];
				Description_243 = description[243];
				Description_244 = description[244];
				Description_245 = description[245];
				Description_246 = description[246];
				Description_247 = description[247];
				Description_248 = description[248];
				Description_249 = description[249];
				Description_250 = description[250];
				Description_251 = description[251];
				Description_252 = description[252];
				Description_253 = description[253];
				Description_254 = description[254];
				Description_255 = description[255];
			}
		}


	}
}
