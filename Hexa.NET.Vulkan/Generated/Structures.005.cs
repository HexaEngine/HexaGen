// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.Vulkan
{

	[NativeName(NativeNameType.StructOrClass, "VkImageResolve2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageResolve2
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "srcSubresource")]
		[NativeName(NativeNameType.Type, "VkImageSubresourceLayers")]
		public VkImageSubresourceLayers SrcSubresource;
		[NativeName(NativeNameType.Field, "srcOffset")]
		[NativeName(NativeNameType.Type, "VkOffset3D")]
		public VkOffset3D SrcOffset;
		[NativeName(NativeNameType.Field, "dstSubresource")]
		[NativeName(NativeNameType.Type, "VkImageSubresourceLayers")]
		public VkImageSubresourceLayers DstSubresource;
		[NativeName(NativeNameType.Field, "dstOffset")]
		[NativeName(NativeNameType.Type, "VkOffset3D")]
		public VkOffset3D DstOffset;
		[NativeName(NativeNameType.Field, "extent")]
		[NativeName(NativeNameType.Type, "VkExtent3D")]
		public VkExtent3D Extent;

		public unsafe VkImageResolve2(VkStructureType sType = default, void* pNext = default, VkImageSubresourceLayers srcSubresource = default, VkOffset3D srcOffset = default, VkImageSubresourceLayers dstSubresource = default, VkOffset3D dstOffset = default, VkExtent3D extent = default)
		{
			SType = sType;
			PNext = pNext;
			SrcSubresource = srcSubresource;
			SrcOffset = srcOffset;
			DstSubresource = dstSubresource;
			DstOffset = dstOffset;
			Extent = extent;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkResolveImageInfo2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkResolveImageInfo2
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "srcImage")]
		[NativeName(NativeNameType.Type, "VkImage")]
		public VkImage SrcImage;
		[NativeName(NativeNameType.Field, "srcImageLayout")]
		[NativeName(NativeNameType.Type, "VkImageLayout")]
		public VkImageLayout SrcImageLayout;
		[NativeName(NativeNameType.Field, "dstImage")]
		[NativeName(NativeNameType.Type, "VkImage")]
		public VkImage DstImage;
		[NativeName(NativeNameType.Field, "dstImageLayout")]
		[NativeName(NativeNameType.Type, "VkImageLayout")]
		public VkImageLayout DstImageLayout;
		[NativeName(NativeNameType.Field, "regionCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint RegionCount;
		[NativeName(NativeNameType.Field, "pRegions")]
		[NativeName(NativeNameType.Type, "const VkImageResolve2*")]
		public unsafe VkImageResolve2* PRegions;

		public unsafe VkResolveImageInfo2(VkStructureType sType = default, void* pNext = default, VkImage srcImage = default, VkImageLayout srcImageLayout = default, VkImage dstImage = default, VkImageLayout dstImageLayout = default, uint regionCount = default, VkImageResolve2* pRegions = default)
		{
			SType = sType;
			PNext = pNext;
			SrcImage = srcImage;
			SrcImageLayout = srcImageLayout;
			DstImage = dstImage;
			DstImageLayout = dstImageLayout;
			RegionCount = regionCount;
			PRegions = pRegions;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceSubgroupSizeControlFeatures")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceSubgroupSizeControlFeatures
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "subgroupSizeControl")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint SubgroupSizeControl;
		[NativeName(NativeNameType.Field, "computeFullSubgroups")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ComputeFullSubgroups;

		public unsafe VkPhysicalDeviceSubgroupSizeControlFeatures(VkStructureType sType = default, void* pNext = default, uint subgroupSizeControl = default, uint computeFullSubgroups = default)
		{
			SType = sType;
			PNext = pNext;
			SubgroupSizeControl = subgroupSizeControl;
			ComputeFullSubgroups = computeFullSubgroups;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceSubgroupSizeControlProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceSubgroupSizeControlProperties
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "minSubgroupSize")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MinSubgroupSize;
		[NativeName(NativeNameType.Field, "maxSubgroupSize")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxSubgroupSize;
		[NativeName(NativeNameType.Field, "maxComputeWorkgroupSubgroups")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxComputeWorkgroupSubgroups;
		[NativeName(NativeNameType.Field, "requiredSubgroupSizeStages")]
		[NativeName(NativeNameType.Type, "VkShaderStageFlags")]
		public uint RequiredSubgroupSizeStages;

		public unsafe VkPhysicalDeviceSubgroupSizeControlProperties(VkStructureType sType = default, void* pNext = default, uint minSubgroupSize = default, uint maxSubgroupSize = default, uint maxComputeWorkgroupSubgroups = default, uint requiredSubgroupSizeStages = default)
		{
			SType = sType;
			PNext = pNext;
			MinSubgroupSize = minSubgroupSize;
			MaxSubgroupSize = maxSubgroupSize;
			MaxComputeWorkgroupSubgroups = maxComputeWorkgroupSubgroups;
			RequiredSubgroupSizeStages = requiredSubgroupSizeStages;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineShaderStageRequiredSubgroupSizeCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "requiredSubgroupSize")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint RequiredSubgroupSize;

		public unsafe VkPipelineShaderStageRequiredSubgroupSizeCreateInfo(VkStructureType sType = default, void* pNext = default, uint requiredSubgroupSize = default)
		{
			SType = sType;
			PNext = pNext;
			RequiredSubgroupSize = requiredSubgroupSize;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceInlineUniformBlockFeatures")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceInlineUniformBlockFeatures
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "inlineUniformBlock")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint InlineUniformBlock;
		[NativeName(NativeNameType.Field, "descriptorBindingInlineUniformBlockUpdateAfterBind")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DescriptorBindingInlineUniformBlockUpdateAfterBind;

		public unsafe VkPhysicalDeviceInlineUniformBlockFeatures(VkStructureType sType = default, void* pNext = default, uint inlineUniformBlock = default, uint descriptorBindingInlineUniformBlockUpdateAfterBind = default)
		{
			SType = sType;
			PNext = pNext;
			InlineUniformBlock = inlineUniformBlock;
			DescriptorBindingInlineUniformBlockUpdateAfterBind = descriptorBindingInlineUniformBlockUpdateAfterBind;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceInlineUniformBlockProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceInlineUniformBlockProperties
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "maxInlineUniformBlockSize")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxInlineUniformBlockSize;
		[NativeName(NativeNameType.Field, "maxPerStageDescriptorInlineUniformBlocks")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPerStageDescriptorInlineUniformBlocks;
		[NativeName(NativeNameType.Field, "maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
		[NativeName(NativeNameType.Field, "maxDescriptorSetInlineUniformBlocks")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDescriptorSetInlineUniformBlocks;
		[NativeName(NativeNameType.Field, "maxDescriptorSetUpdateAfterBindInlineUniformBlocks")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDescriptorSetUpdateAfterBindInlineUniformBlocks;

		public unsafe VkPhysicalDeviceInlineUniformBlockProperties(VkStructureType sType = default, void* pNext = default, uint maxInlineUniformBlockSize = default, uint maxPerStageDescriptorInlineUniformBlocks = default, uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = default, uint maxDescriptorSetInlineUniformBlocks = default, uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks = default)
		{
			SType = sType;
			PNext = pNext;
			MaxInlineUniformBlockSize = maxInlineUniformBlockSize;
			MaxPerStageDescriptorInlineUniformBlocks = maxPerStageDescriptorInlineUniformBlocks;
			MaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
			MaxDescriptorSetInlineUniformBlocks = maxDescriptorSetInlineUniformBlocks;
			MaxDescriptorSetUpdateAfterBindInlineUniformBlocks = maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkWriteDescriptorSetInlineUniformBlock")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkWriteDescriptorSetInlineUniformBlock
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "dataSize")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DataSize;
		[NativeName(NativeNameType.Field, "pData")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PData;

		public unsafe VkWriteDescriptorSetInlineUniformBlock(VkStructureType sType = default, void* pNext = default, uint dataSize = default, void* pData = default)
		{
			SType = sType;
			PNext = pNext;
			DataSize = dataSize;
			PData = pData;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDescriptorPoolInlineUniformBlockCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDescriptorPoolInlineUniformBlockCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "maxInlineUniformBlockBindings")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxInlineUniformBlockBindings;

		public unsafe VkDescriptorPoolInlineUniformBlockCreateInfo(VkStructureType sType = default, void* pNext = default, uint maxInlineUniformBlockBindings = default)
		{
			SType = sType;
			PNext = pNext;
			MaxInlineUniformBlockBindings = maxInlineUniformBlockBindings;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceTextureCompressionASTCHDRFeatures")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "textureCompressionASTC_HDR")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint TextureCompressionASTCHDR;

		public unsafe VkPhysicalDeviceTextureCompressionASTCHDRFeatures(VkStructureType sType = default, void* pNext = default, uint texturecompressionastcHdr = default)
		{
			SType = sType;
			PNext = pNext;
			TextureCompressionASTCHDR = texturecompressionastcHdr;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkRenderingAttachmentInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkRenderingAttachmentInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "imageView")]
		[NativeName(NativeNameType.Type, "VkImageView")]
		public VkImageView ImageView;
		[NativeName(NativeNameType.Field, "imageLayout")]
		[NativeName(NativeNameType.Type, "VkImageLayout")]
		public VkImageLayout ImageLayout;
		[NativeName(NativeNameType.Field, "resolveMode")]
		[NativeName(NativeNameType.Type, "VkResolveModeFlagBits")]
		public VkResolveModeFlagBits ResolveMode;
		[NativeName(NativeNameType.Field, "resolveImageView")]
		[NativeName(NativeNameType.Type, "VkImageView")]
		public VkImageView ResolveImageView;
		[NativeName(NativeNameType.Field, "resolveImageLayout")]
		[NativeName(NativeNameType.Type, "VkImageLayout")]
		public VkImageLayout ResolveImageLayout;
		[NativeName(NativeNameType.Field, "loadOp")]
		[NativeName(NativeNameType.Type, "VkAttachmentLoadOp")]
		public VkAttachmentLoadOp LoadOp;
		[NativeName(NativeNameType.Field, "storeOp")]
		[NativeName(NativeNameType.Type, "VkAttachmentStoreOp")]
		public VkAttachmentStoreOp StoreOp;
		[NativeName(NativeNameType.Field, "clearValue")]
		[NativeName(NativeNameType.Type, "VkClearValue")]
		public VkClearValue ClearValue;

		public unsafe VkRenderingAttachmentInfo(VkStructureType sType = default, void* pNext = default, VkImageView imageView = default, VkImageLayout imageLayout = default, VkResolveModeFlagBits resolveMode = default, VkImageView resolveImageView = default, VkImageLayout resolveImageLayout = default, VkAttachmentLoadOp loadOp = default, VkAttachmentStoreOp storeOp = default, VkClearValue clearvalue = default)
		{
			SType = sType;
			PNext = pNext;
			ImageView = imageView;
			ImageLayout = imageLayout;
			ResolveMode = resolveMode;
			ResolveImageView = resolveImageView;
			ResolveImageLayout = resolveImageLayout;
			LoadOp = loadOp;
			StoreOp = storeOp;
			ClearValue = clearvalue;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkRenderingInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkRenderingInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkRenderingFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "renderArea")]
		[NativeName(NativeNameType.Type, "VkRect2D")]
		public VkRect2D RenderArea;
		[NativeName(NativeNameType.Field, "layerCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint LayerCount;
		[NativeName(NativeNameType.Field, "viewMask")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ViewMask;
		[NativeName(NativeNameType.Field, "colorAttachmentCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ColorAttachmentCount;
		[NativeName(NativeNameType.Field, "pColorAttachments")]
		[NativeName(NativeNameType.Type, "const VkRenderingAttachmentInfo*")]
		public unsafe VkRenderingAttachmentInfo* PColorAttachments;
		[NativeName(NativeNameType.Field, "pDepthAttachment")]
		[NativeName(NativeNameType.Type, "const VkRenderingAttachmentInfo*")]
		public unsafe VkRenderingAttachmentInfo* PDepthAttachment;
		[NativeName(NativeNameType.Field, "pStencilAttachment")]
		[NativeName(NativeNameType.Type, "const VkRenderingAttachmentInfo*")]
		public unsafe VkRenderingAttachmentInfo* PStencilAttachment;

		public unsafe VkRenderingInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, VkRect2D renderArea = default, uint layerCount = default, uint viewMask = default, uint colorAttachmentCount = default, VkRenderingAttachmentInfo* pColorAttachments = default, VkRenderingAttachmentInfo* pDepthAttachment = default, VkRenderingAttachmentInfo* pStencilAttachment = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			RenderArea = renderArea;
			LayerCount = layerCount;
			ViewMask = viewMask;
			ColorAttachmentCount = colorAttachmentCount;
			PColorAttachments = pColorAttachments;
			PDepthAttachment = pDepthAttachment;
			PStencilAttachment = pStencilAttachment;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineRenderingCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineRenderingCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "viewMask")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ViewMask;
		[NativeName(NativeNameType.Field, "colorAttachmentCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ColorAttachmentCount;
		[NativeName(NativeNameType.Field, "pColorAttachmentFormats")]
		[NativeName(NativeNameType.Type, "const VkFormat*")]
		public unsafe VkFormat* PColorAttachmentFormats;
		[NativeName(NativeNameType.Field, "depthAttachmentFormat")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat DepthAttachmentFormat;
		[NativeName(NativeNameType.Field, "stencilAttachmentFormat")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat StencilAttachmentFormat;

		public unsafe VkPipelineRenderingCreateInfo(VkStructureType sType = default, void* pNext = default, uint viewMask = default, uint colorAttachmentCount = default, VkFormat* pColorAttachmentFormats = default, VkFormat depthAttachmentFormat = default, VkFormat stencilAttachmentFormat = default)
		{
			SType = sType;
			PNext = pNext;
			ViewMask = viewMask;
			ColorAttachmentCount = colorAttachmentCount;
			PColorAttachmentFormats = pColorAttachmentFormats;
			DepthAttachmentFormat = depthAttachmentFormat;
			StencilAttachmentFormat = stencilAttachmentFormat;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceDynamicRenderingFeatures")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceDynamicRenderingFeatures
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "dynamicRendering")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DynamicRendering;

		public unsafe VkPhysicalDeviceDynamicRenderingFeatures(VkStructureType sType = default, void* pNext = default, uint dynamicRendering = default)
		{
			SType = sType;
			PNext = pNext;
			DynamicRendering = dynamicRendering;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkCommandBufferInheritanceRenderingInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkCommandBufferInheritanceRenderingInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkRenderingFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "viewMask")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ViewMask;
		[NativeName(NativeNameType.Field, "colorAttachmentCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ColorAttachmentCount;
		[NativeName(NativeNameType.Field, "pColorAttachmentFormats")]
		[NativeName(NativeNameType.Type, "const VkFormat*")]
		public unsafe VkFormat* PColorAttachmentFormats;
		[NativeName(NativeNameType.Field, "depthAttachmentFormat")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat DepthAttachmentFormat;
		[NativeName(NativeNameType.Field, "stencilAttachmentFormat")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat StencilAttachmentFormat;
		[NativeName(NativeNameType.Field, "rasterizationSamples")]
		[NativeName(NativeNameType.Type, "VkSampleCountFlagBits")]
		public VkSampleCountFlagBits RasterizationSamples;

		public unsafe VkCommandBufferInheritanceRenderingInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, uint viewMask = default, uint colorAttachmentCount = default, VkFormat* pColorAttachmentFormats = default, VkFormat depthAttachmentFormat = default, VkFormat stencilAttachmentFormat = default, VkSampleCountFlagBits rasterizationSamples = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			ViewMask = viewMask;
			ColorAttachmentCount = colorAttachmentCount;
			PColorAttachmentFormats = pColorAttachmentFormats;
			DepthAttachmentFormat = depthAttachmentFormat;
			StencilAttachmentFormat = stencilAttachmentFormat;
			RasterizationSamples = rasterizationSamples;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceShaderIntegerDotProductFeatures")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceShaderIntegerDotProductFeatures
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "shaderIntegerDotProduct")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderIntegerDotProduct;

		public unsafe VkPhysicalDeviceShaderIntegerDotProductFeatures(VkStructureType sType = default, void* pNext = default, uint shaderIntegerDotProduct = default)
		{
			SType = sType;
			PNext = pNext;
			ShaderIntegerDotProduct = shaderIntegerDotProduct;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceShaderIntegerDotProductProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceShaderIntegerDotProductProperties
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "integerDotProduct8BitUnsignedAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProduct8BitUnsignedAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProduct8BitSignedAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProduct8BitSignedAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProduct8BitMixedSignednessAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProduct8BitMixedSignednessAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProduct4x8BitPackedUnsignedAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProduct4x8BitPackedUnsignedAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProduct4x8BitPackedSignedAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProduct4x8BitPackedSignedAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProduct4x8BitPackedMixedSignednessAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProduct4x8BitPackedMixedSignednessAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProduct16BitUnsignedAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProduct16BitUnsignedAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProduct16BitSignedAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProduct16BitSignedAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProduct16BitMixedSignednessAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProduct16BitMixedSignednessAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProduct32BitUnsignedAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProduct32BitUnsignedAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProduct32BitSignedAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProduct32BitSignedAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProduct32BitMixedSignednessAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProduct32BitMixedSignednessAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProduct64BitUnsignedAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProduct64BitUnsignedAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProduct64BitSignedAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProduct64BitSignedAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProduct64BitMixedSignednessAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProduct64BitMixedSignednessAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProductAccumulatingSaturating8BitUnsignedAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProductAccumulatingSaturating8BitSignedAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProductAccumulatingSaturating8BitSignedAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProductAccumulatingSaturating16BitUnsignedAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProductAccumulatingSaturating16BitSignedAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProductAccumulatingSaturating16BitSignedAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProductAccumulatingSaturating32BitUnsignedAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProductAccumulatingSaturating32BitSignedAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProductAccumulatingSaturating32BitSignedAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProductAccumulatingSaturating64BitUnsignedAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProductAccumulatingSaturating64BitSignedAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProductAccumulatingSaturating64BitSignedAccelerated;
		[NativeName(NativeNameType.Field, "integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IntegerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;

		public unsafe VkPhysicalDeviceShaderIntegerDotProductProperties(VkStructureType sType = default, void* pNext = default, uint integerDotProduct8BitUnsignedAccelerated = default, uint integerDotProduct8BitSignedAccelerated = default, uint integerDotProduct8BitMixedSignednessAccelerated = default, uint integerDotProduct4x8BitPackedUnsignedAccelerated = default, uint integerDotProduct4x8BitPackedSignedAccelerated = default, uint integerDotProduct4x8BitPackedMixedSignednessAccelerated = default, uint integerDotProduct16BitUnsignedAccelerated = default, uint integerDotProduct16BitSignedAccelerated = default, uint integerDotProduct16BitMixedSignednessAccelerated = default, uint integerDotProduct32BitUnsignedAccelerated = default, uint integerDotProduct32BitSignedAccelerated = default, uint integerDotProduct32BitMixedSignednessAccelerated = default, uint integerDotProduct64BitUnsignedAccelerated = default, uint integerDotProduct64BitSignedAccelerated = default, uint integerDotProduct64BitMixedSignednessAccelerated = default, uint integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = default, uint integerDotProductAccumulatingSaturating8BitSignedAccelerated = default, uint integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = default, uint integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = default, uint integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = default, uint integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = default, uint integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = default, uint integerDotProductAccumulatingSaturating16BitSignedAccelerated = default, uint integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = default, uint integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = default, uint integerDotProductAccumulatingSaturating32BitSignedAccelerated = default, uint integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = default, uint integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = default, uint integerDotProductAccumulatingSaturating64BitSignedAccelerated = default, uint integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = default)
		{
			SType = sType;
			PNext = pNext;
			IntegerDotProduct8BitUnsignedAccelerated = integerDotProduct8BitUnsignedAccelerated;
			IntegerDotProduct8BitSignedAccelerated = integerDotProduct8BitSignedAccelerated;
			IntegerDotProduct8BitMixedSignednessAccelerated = integerDotProduct8BitMixedSignednessAccelerated;
			IntegerDotProduct4x8BitPackedUnsignedAccelerated = integerDotProduct4x8BitPackedUnsignedAccelerated;
			IntegerDotProduct4x8BitPackedSignedAccelerated = integerDotProduct4x8BitPackedSignedAccelerated;
			IntegerDotProduct4x8BitPackedMixedSignednessAccelerated = integerDotProduct4x8BitPackedMixedSignednessAccelerated;
			IntegerDotProduct16BitUnsignedAccelerated = integerDotProduct16BitUnsignedAccelerated;
			IntegerDotProduct16BitSignedAccelerated = integerDotProduct16BitSignedAccelerated;
			IntegerDotProduct16BitMixedSignednessAccelerated = integerDotProduct16BitMixedSignednessAccelerated;
			IntegerDotProduct32BitUnsignedAccelerated = integerDotProduct32BitUnsignedAccelerated;
			IntegerDotProduct32BitSignedAccelerated = integerDotProduct32BitSignedAccelerated;
			IntegerDotProduct32BitMixedSignednessAccelerated = integerDotProduct32BitMixedSignednessAccelerated;
			IntegerDotProduct64BitUnsignedAccelerated = integerDotProduct64BitUnsignedAccelerated;
			IntegerDotProduct64BitSignedAccelerated = integerDotProduct64BitSignedAccelerated;
			IntegerDotProduct64BitMixedSignednessAccelerated = integerDotProduct64BitMixedSignednessAccelerated;
			IntegerDotProductAccumulatingSaturating8BitUnsignedAccelerated = integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
			IntegerDotProductAccumulatingSaturating8BitSignedAccelerated = integerDotProductAccumulatingSaturating8BitSignedAccelerated;
			IntegerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
			IntegerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
			IntegerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
			IntegerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
			IntegerDotProductAccumulatingSaturating16BitUnsignedAccelerated = integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
			IntegerDotProductAccumulatingSaturating16BitSignedAccelerated = integerDotProductAccumulatingSaturating16BitSignedAccelerated;
			IntegerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
			IntegerDotProductAccumulatingSaturating32BitUnsignedAccelerated = integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
			IntegerDotProductAccumulatingSaturating32BitSignedAccelerated = integerDotProductAccumulatingSaturating32BitSignedAccelerated;
			IntegerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
			IntegerDotProductAccumulatingSaturating64BitUnsignedAccelerated = integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
			IntegerDotProductAccumulatingSaturating64BitSignedAccelerated = integerDotProductAccumulatingSaturating64BitSignedAccelerated;
			IntegerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceTexelBufferAlignmentProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceTexelBufferAlignmentProperties
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "storageTexelBufferOffsetAlignmentBytes")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong StorageTexelBufferOffsetAlignmentBytes;
		[NativeName(NativeNameType.Field, "storageTexelBufferOffsetSingleTexelAlignment")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint StorageTexelBufferOffsetSingleTexelAlignment;
		[NativeName(NativeNameType.Field, "uniformTexelBufferOffsetAlignmentBytes")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong UniformTexelBufferOffsetAlignmentBytes;
		[NativeName(NativeNameType.Field, "uniformTexelBufferOffsetSingleTexelAlignment")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint UniformTexelBufferOffsetSingleTexelAlignment;

		public unsafe VkPhysicalDeviceTexelBufferAlignmentProperties(VkStructureType sType = default, void* pNext = default, ulong storageTexelBufferOffsetAlignmentBytes = default, uint storageTexelBufferOffsetSingleTexelAlignment = default, ulong uniformTexelBufferOffsetAlignmentBytes = default, uint uniformTexelBufferOffsetSingleTexelAlignment = default)
		{
			SType = sType;
			PNext = pNext;
			StorageTexelBufferOffsetAlignmentBytes = storageTexelBufferOffsetAlignmentBytes;
			StorageTexelBufferOffsetSingleTexelAlignment = storageTexelBufferOffsetSingleTexelAlignment;
			UniformTexelBufferOffsetAlignmentBytes = uniformTexelBufferOffsetAlignmentBytes;
			UniformTexelBufferOffsetSingleTexelAlignment = uniformTexelBufferOffsetSingleTexelAlignment;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkFormatProperties3")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkFormatProperties3
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "linearTilingFeatures")]
		[NativeName(NativeNameType.Type, "VkFormatFeatureFlags2")]
		public uint LinearTilingFeatures;
		[NativeName(NativeNameType.Field, "optimalTilingFeatures")]
		[NativeName(NativeNameType.Type, "VkFormatFeatureFlags2")]
		public uint OptimalTilingFeatures;
		[NativeName(NativeNameType.Field, "bufferFeatures")]
		[NativeName(NativeNameType.Type, "VkFormatFeatureFlags2")]
		public uint BufferFeatures;

		public unsafe VkFormatProperties3(VkStructureType sType = default, void* pNext = default, uint linearTilingFeatures = default, uint optimalTilingFeatures = default, uint bufferFeatures = default)
		{
			SType = sType;
			PNext = pNext;
			LinearTilingFeatures = linearTilingFeatures;
			OptimalTilingFeatures = optimalTilingFeatures;
			BufferFeatures = bufferFeatures;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceMaintenance4Features")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceMaintenance4Features
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "maintenance4")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint Maintenance4;

		public unsafe VkPhysicalDeviceMaintenance4Features(VkStructureType sType = default, void* pNext = default, uint maintenance4 = default)
		{
			SType = sType;
			PNext = pNext;
			Maintenance4 = maintenance4;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceMaintenance4Properties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceMaintenance4Properties
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "maxBufferSize")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong MaxBufferSize;

		public unsafe VkPhysicalDeviceMaintenance4Properties(VkStructureType sType = default, void* pNext = default, ulong maxBufferSize = default)
		{
			SType = sType;
			PNext = pNext;
			MaxBufferSize = maxBufferSize;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDeviceBufferMemoryRequirements")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDeviceBufferMemoryRequirements
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pCreateInfo")]
		[NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")]
		public unsafe VkBufferCreateInfo* PCreateInfo;

		public unsafe VkDeviceBufferMemoryRequirements(VkStructureType sType = default, void* pNext = default, VkBufferCreateInfo* pCreateInfo = default)
		{
			SType = sType;
			PNext = pNext;
			PCreateInfo = pCreateInfo;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDeviceImageMemoryRequirements")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDeviceImageMemoryRequirements
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pCreateInfo")]
		[NativeName(NativeNameType.Type, "const VkImageCreateInfo*")]
		public unsafe VkImageCreateInfo* PCreateInfo;
		[NativeName(NativeNameType.Field, "planeAspect")]
		[NativeName(NativeNameType.Type, "VkImageAspectFlagBits")]
		public VkImageAspectFlagBits PlaneAspect;

		public unsafe VkDeviceImageMemoryRequirements(VkStructureType sType = default, void* pNext = default, VkImageCreateInfo* pCreateInfo = default, VkImageAspectFlagBits planeAspect = default)
		{
			SType = sType;
			PNext = pNext;
			PCreateInfo = pCreateInfo;
			PlaneAspect = planeAspect;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSurfaceCapabilitiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSurfaceCapabilitiesKHR
	{
		[NativeName(NativeNameType.Field, "minImageCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MinImageCount;
		[NativeName(NativeNameType.Field, "maxImageCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxImageCount;
		[NativeName(NativeNameType.Field, "currentExtent")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D CurrentExtent;
		[NativeName(NativeNameType.Field, "minImageExtent")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D MinImageExtent;
		[NativeName(NativeNameType.Field, "maxImageExtent")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D MaxImageExtent;
		[NativeName(NativeNameType.Field, "maxImageArrayLayers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxImageArrayLayers;
		[NativeName(NativeNameType.Field, "supportedTransforms")]
		[NativeName(NativeNameType.Type, "VkSurfaceTransformFlagsKHR")]
		public uint SupportedTransforms;
		[NativeName(NativeNameType.Field, "currentTransform")]
		[NativeName(NativeNameType.Type, "VkSurfaceTransformFlagBitsKHR")]
		public VkSurfaceTransformFlagBitsKHR CurrentTransform;
		[NativeName(NativeNameType.Field, "supportedCompositeAlpha")]
		[NativeName(NativeNameType.Type, "VkCompositeAlphaFlagsKHR")]
		public uint SupportedCompositeAlpha;
		[NativeName(NativeNameType.Field, "supportedUsageFlags")]
		[NativeName(NativeNameType.Type, "VkImageUsageFlags")]
		public uint SupportedUsageFlags;

		public unsafe VkSurfaceCapabilitiesKHR(uint minImageCount = default, uint maxImageCount = default, VkExtent2D currentExtent = default, VkExtent2D minImageExtent = default, VkExtent2D maxImageExtent = default, uint maxImageArrayLayers = default, uint supportedTransforms = default, VkSurfaceTransformFlagBitsKHR currentTransform = default, uint supportedCompositeAlpha = default, uint supportedUsageFlags = default)
		{
			MinImageCount = minImageCount;
			MaxImageCount = maxImageCount;
			CurrentExtent = currentExtent;
			MinImageExtent = minImageExtent;
			MaxImageExtent = maxImageExtent;
			MaxImageArrayLayers = maxImageArrayLayers;
			SupportedTransforms = supportedTransforms;
			CurrentTransform = currentTransform;
			SupportedCompositeAlpha = supportedCompositeAlpha;
			SupportedUsageFlags = supportedUsageFlags;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSurfaceFormatKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSurfaceFormatKHR
	{
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat Format;
		[NativeName(NativeNameType.Field, "colorSpace")]
		[NativeName(NativeNameType.Type, "VkColorSpaceKHR")]
		public VkColorSpaceKHR ColorSpace;

		public unsafe VkSurfaceFormatKHR(VkFormat format = default, VkColorSpaceKHR colorSpace = default)
		{
			Format = format;
			ColorSpace = colorSpace;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSwapchainCreateInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSwapchainCreateInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkSwapchainCreateFlagsKHR")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "surface")]
		[NativeName(NativeNameType.Type, "VkSurfaceKHR")]
		public VkSurfaceKHR Surface;
		[NativeName(NativeNameType.Field, "minImageCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MinImageCount;
		[NativeName(NativeNameType.Field, "imageFormat")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat ImageFormat;
		[NativeName(NativeNameType.Field, "imageColorSpace")]
		[NativeName(NativeNameType.Type, "VkColorSpaceKHR")]
		public VkColorSpaceKHR ImageColorSpace;
		[NativeName(NativeNameType.Field, "imageExtent")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D ImageExtent;
		[NativeName(NativeNameType.Field, "imageArrayLayers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ImageArrayLayers;
		[NativeName(NativeNameType.Field, "imageUsage")]
		[NativeName(NativeNameType.Type, "VkImageUsageFlags")]
		public uint ImageUsage;
		[NativeName(NativeNameType.Field, "imageSharingMode")]
		[NativeName(NativeNameType.Type, "VkSharingMode")]
		public VkSharingMode ImageSharingMode;
		[NativeName(NativeNameType.Field, "queueFamilyIndexCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint QueueFamilyIndexCount;
		[NativeName(NativeNameType.Field, "pQueueFamilyIndices")]
		[NativeName(NativeNameType.Type, "const uint32_t*")]
		public unsafe uint* PQueueFamilyIndices;
		[NativeName(NativeNameType.Field, "preTransform")]
		[NativeName(NativeNameType.Type, "VkSurfaceTransformFlagBitsKHR")]
		public VkSurfaceTransformFlagBitsKHR PreTransform;
		[NativeName(NativeNameType.Field, "compositeAlpha")]
		[NativeName(NativeNameType.Type, "VkCompositeAlphaFlagBitsKHR")]
		public VkCompositeAlphaFlagBitsKHR CompositeAlpha;
		[NativeName(NativeNameType.Field, "presentMode")]
		[NativeName(NativeNameType.Type, "VkPresentModeKHR")]
		public VkPresentModeKHR PresentMode;
		[NativeName(NativeNameType.Field, "clipped")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint Clipped;
		[NativeName(NativeNameType.Field, "oldSwapchain")]
		[NativeName(NativeNameType.Type, "VkSwapchainKHR")]
		public VkSwapchainKHR OldSwapchain;

		public unsafe VkSwapchainCreateInfoKHR(VkStructureType sType = default, void* pNext = default, uint flags = default, VkSurfaceKHR surface = default, uint minImageCount = default, VkFormat imageFormat = default, VkColorSpaceKHR imageColorSpace = default, VkExtent2D imageExtent = default, uint imageArrayLayers = default, uint imageUsage = default, VkSharingMode imageSharingMode = default, uint queueFamilyIndexCount = default, uint* pQueueFamilyIndices = default, VkSurfaceTransformFlagBitsKHR preTransform = default, VkCompositeAlphaFlagBitsKHR compositeAlpha = default, VkPresentModeKHR presentMode = default, uint clipped = default, VkSwapchainKHR oldSwapchain = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			Surface = surface;
			MinImageCount = minImageCount;
			ImageFormat = imageFormat;
			ImageColorSpace = imageColorSpace;
			ImageExtent = imageExtent;
			ImageArrayLayers = imageArrayLayers;
			ImageUsage = imageUsage;
			ImageSharingMode = imageSharingMode;
			QueueFamilyIndexCount = queueFamilyIndexCount;
			PQueueFamilyIndices = pQueueFamilyIndices;
			PreTransform = preTransform;
			CompositeAlpha = compositeAlpha;
			PresentMode = presentMode;
			Clipped = clipped;
			OldSwapchain = oldSwapchain;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPresentInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPresentInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "waitSemaphoreCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint WaitSemaphoreCount;
		[NativeName(NativeNameType.Field, "pWaitSemaphores")]
		[NativeName(NativeNameType.Type, "const VkSemaphore*")]
		public unsafe VkSemaphore* PWaitSemaphores;
		[NativeName(NativeNameType.Field, "swapchainCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SwapchainCount;
		[NativeName(NativeNameType.Field, "pSwapchains")]
		[NativeName(NativeNameType.Type, "const VkSwapchainKHR*")]
		public unsafe VkSwapchainKHR* PSwapchains;
		[NativeName(NativeNameType.Field, "pImageIndices")]
		[NativeName(NativeNameType.Type, "const uint32_t*")]
		public unsafe uint* PImageIndices;
		[NativeName(NativeNameType.Field, "pResults")]
		[NativeName(NativeNameType.Type, "VkResult*")]
		public unsafe VkResult* PResults;

		public unsafe VkPresentInfoKHR(VkStructureType sType = default, void* pNext = default, uint waitSemaphoreCount = default, VkSemaphore* pWaitSemaphores = default, uint swapchainCount = default, VkSwapchainKHR* pSwapchains = default, uint* pImageIndices = default, VkResult* pResults = default)
		{
			SType = sType;
			PNext = pNext;
			WaitSemaphoreCount = waitSemaphoreCount;
			PWaitSemaphores = pWaitSemaphores;
			SwapchainCount = swapchainCount;
			PSwapchains = pSwapchains;
			PImageIndices = pImageIndices;
			PResults = pResults;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImageSwapchainCreateInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageSwapchainCreateInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "swapchain")]
		[NativeName(NativeNameType.Type, "VkSwapchainKHR")]
		public VkSwapchainKHR Swapchain;

		public unsafe VkImageSwapchainCreateInfoKHR(VkStructureType sType = default, void* pNext = default, VkSwapchainKHR swapchain = default)
		{
			SType = sType;
			PNext = pNext;
			Swapchain = swapchain;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkBindImageMemorySwapchainInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkBindImageMemorySwapchainInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "swapchain")]
		[NativeName(NativeNameType.Type, "VkSwapchainKHR")]
		public VkSwapchainKHR Swapchain;
		[NativeName(NativeNameType.Field, "imageIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ImageIndex;

		public unsafe VkBindImageMemorySwapchainInfoKHR(VkStructureType sType = default, void* pNext = default, VkSwapchainKHR swapchain = default, uint imageIndex = default)
		{
			SType = sType;
			PNext = pNext;
			Swapchain = swapchain;
			ImageIndex = imageIndex;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkAcquireNextImageInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkAcquireNextImageInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "swapchain")]
		[NativeName(NativeNameType.Type, "VkSwapchainKHR")]
		public VkSwapchainKHR Swapchain;
		[NativeName(NativeNameType.Field, "timeout")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong Timeout;
		[NativeName(NativeNameType.Field, "semaphore")]
		[NativeName(NativeNameType.Type, "VkSemaphore")]
		public VkSemaphore Semaphore;
		[NativeName(NativeNameType.Field, "fence")]
		[NativeName(NativeNameType.Type, "VkFence")]
		public VkFence Fence;
		[NativeName(NativeNameType.Field, "deviceMask")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeviceMask;

		public unsafe VkAcquireNextImageInfoKHR(VkStructureType sType = default, void* pNext = default, VkSwapchainKHR swapchain = default, ulong timeout = default, VkSemaphore semaphore = default, VkFence fence = default, uint deviceMask = default)
		{
			SType = sType;
			PNext = pNext;
			Swapchain = swapchain;
			Timeout = timeout;
			Semaphore = semaphore;
			Fence = fence;
			DeviceMask = deviceMask;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDeviceGroupPresentCapabilitiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDeviceGroupPresentCapabilitiesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "presentMask")]
		[NativeName(NativeNameType.Type, "uint32_t[32]")]
		public uint PresentMask_0;
		public uint PresentMask_1;
		public uint PresentMask_2;
		public uint PresentMask_3;
		public uint PresentMask_4;
		public uint PresentMask_5;
		public uint PresentMask_6;
		public uint PresentMask_7;
		public uint PresentMask_8;
		public uint PresentMask_9;
		public uint PresentMask_10;
		public uint PresentMask_11;
		public uint PresentMask_12;
		public uint PresentMask_13;
		public uint PresentMask_14;
		public uint PresentMask_15;
		public uint PresentMask_16;
		public uint PresentMask_17;
		public uint PresentMask_18;
		public uint PresentMask_19;
		public uint PresentMask_20;
		public uint PresentMask_21;
		public uint PresentMask_22;
		public uint PresentMask_23;
		public uint PresentMask_24;
		public uint PresentMask_25;
		public uint PresentMask_26;
		public uint PresentMask_27;
		public uint PresentMask_28;
		public uint PresentMask_29;
		public uint PresentMask_30;
		public uint PresentMask_31;
		[NativeName(NativeNameType.Field, "modes")]
		[NativeName(NativeNameType.Type, "VkDeviceGroupPresentModeFlagsKHR")]
		public uint Modes;

		public unsafe VkDeviceGroupPresentCapabilitiesKHR(VkStructureType sType = default, void* pNext = default, uint* presentMask = default, uint modes = default)
		{
			SType = sType;
			PNext = pNext;
			if (presentMask != default)
			{
				PresentMask_0 = presentMask[0];
				PresentMask_1 = presentMask[1];
				PresentMask_2 = presentMask[2];
				PresentMask_3 = presentMask[3];
				PresentMask_4 = presentMask[4];
				PresentMask_5 = presentMask[5];
				PresentMask_6 = presentMask[6];
				PresentMask_7 = presentMask[7];
				PresentMask_8 = presentMask[8];
				PresentMask_9 = presentMask[9];
				PresentMask_10 = presentMask[10];
				PresentMask_11 = presentMask[11];
				PresentMask_12 = presentMask[12];
				PresentMask_13 = presentMask[13];
				PresentMask_14 = presentMask[14];
				PresentMask_15 = presentMask[15];
				PresentMask_16 = presentMask[16];
				PresentMask_17 = presentMask[17];
				PresentMask_18 = presentMask[18];
				PresentMask_19 = presentMask[19];
				PresentMask_20 = presentMask[20];
				PresentMask_21 = presentMask[21];
				PresentMask_22 = presentMask[22];
				PresentMask_23 = presentMask[23];
				PresentMask_24 = presentMask[24];
				PresentMask_25 = presentMask[25];
				PresentMask_26 = presentMask[26];
				PresentMask_27 = presentMask[27];
				PresentMask_28 = presentMask[28];
				PresentMask_29 = presentMask[29];
				PresentMask_30 = presentMask[30];
				PresentMask_31 = presentMask[31];
			}
			Modes = modes;
		}

		public unsafe VkDeviceGroupPresentCapabilitiesKHR(VkStructureType sType = default, void* pNext = default, Span<uint> presentMask = default, uint modes = default)
		{
			SType = sType;
			PNext = pNext;
			if (presentMask != default)
			{
				PresentMask_0 = presentMask[0];
				PresentMask_1 = presentMask[1];
				PresentMask_2 = presentMask[2];
				PresentMask_3 = presentMask[3];
				PresentMask_4 = presentMask[4];
				PresentMask_5 = presentMask[5];
				PresentMask_6 = presentMask[6];
				PresentMask_7 = presentMask[7];
				PresentMask_8 = presentMask[8];
				PresentMask_9 = presentMask[9];
				PresentMask_10 = presentMask[10];
				PresentMask_11 = presentMask[11];
				PresentMask_12 = presentMask[12];
				PresentMask_13 = presentMask[13];
				PresentMask_14 = presentMask[14];
				PresentMask_15 = presentMask[15];
				PresentMask_16 = presentMask[16];
				PresentMask_17 = presentMask[17];
				PresentMask_18 = presentMask[18];
				PresentMask_19 = presentMask[19];
				PresentMask_20 = presentMask[20];
				PresentMask_21 = presentMask[21];
				PresentMask_22 = presentMask[22];
				PresentMask_23 = presentMask[23];
				PresentMask_24 = presentMask[24];
				PresentMask_25 = presentMask[25];
				PresentMask_26 = presentMask[26];
				PresentMask_27 = presentMask[27];
				PresentMask_28 = presentMask[28];
				PresentMask_29 = presentMask[29];
				PresentMask_30 = presentMask[30];
				PresentMask_31 = presentMask[31];
			}
			Modes = modes;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDeviceGroupPresentInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDeviceGroupPresentInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "swapchainCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SwapchainCount;
		[NativeName(NativeNameType.Field, "pDeviceMasks")]
		[NativeName(NativeNameType.Type, "const uint32_t*")]
		public unsafe uint* PDeviceMasks;
		[NativeName(NativeNameType.Field, "mode")]
		[NativeName(NativeNameType.Type, "VkDeviceGroupPresentModeFlagBitsKHR")]
		public VkDeviceGroupPresentModeFlagBitsKHR Mode;

		public unsafe VkDeviceGroupPresentInfoKHR(VkStructureType sType = default, void* pNext = default, uint swapchainCount = default, uint* pDeviceMasks = default, VkDeviceGroupPresentModeFlagBitsKHR mode = default)
		{
			SType = sType;
			PNext = pNext;
			SwapchainCount = swapchainCount;
			PDeviceMasks = pDeviceMasks;
			Mode = mode;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDeviceGroupSwapchainCreateInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDeviceGroupSwapchainCreateInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "modes")]
		[NativeName(NativeNameType.Type, "VkDeviceGroupPresentModeFlagsKHR")]
		public uint Modes;

		public unsafe VkDeviceGroupSwapchainCreateInfoKHR(VkStructureType sType = default, void* pNext = default, uint modes = default)
		{
			SType = sType;
			PNext = pNext;
			Modes = modes;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDisplayModeParametersKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDisplayModeParametersKHR
	{
		[NativeName(NativeNameType.Field, "visibleRegion")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D VisibleRegion;
		[NativeName(NativeNameType.Field, "refreshRate")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint RefreshRate;

		public unsafe VkDisplayModeParametersKHR(VkExtent2D visibleRegion = default, uint refreshRate = default)
		{
			VisibleRegion = visibleRegion;
			RefreshRate = refreshRate;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDisplayModeCreateInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDisplayModeCreateInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkDisplayModeCreateFlagsKHR")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "parameters")]
		[NativeName(NativeNameType.Type, "VkDisplayModeParametersKHR")]
		public VkDisplayModeParametersKHR Parameters;

		public unsafe VkDisplayModeCreateInfoKHR(VkStructureType sType = default, void* pNext = default, uint flags = default, VkDisplayModeParametersKHR parameters = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			Parameters = parameters;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDisplayModePropertiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDisplayModePropertiesKHR
	{
		[NativeName(NativeNameType.Field, "displayMode")]
		[NativeName(NativeNameType.Type, "VkDisplayModeKHR")]
		public VkDisplayModeKHR DisplayMode;
		[NativeName(NativeNameType.Field, "parameters")]
		[NativeName(NativeNameType.Type, "VkDisplayModeParametersKHR")]
		public VkDisplayModeParametersKHR Parameters;

		public unsafe VkDisplayModePropertiesKHR(VkDisplayModeKHR displayMode = default, VkDisplayModeParametersKHR parameters = default)
		{
			DisplayMode = displayMode;
			Parameters = parameters;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDisplayPlaneCapabilitiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDisplayPlaneCapabilitiesKHR
	{
		[NativeName(NativeNameType.Field, "supportedAlpha")]
		[NativeName(NativeNameType.Type, "VkDisplayPlaneAlphaFlagsKHR")]
		public uint SupportedAlpha;
		[NativeName(NativeNameType.Field, "minSrcPosition")]
		[NativeName(NativeNameType.Type, "VkOffset2D")]
		public VkOffset2D MinSrcPosition;
		[NativeName(NativeNameType.Field, "maxSrcPosition")]
		[NativeName(NativeNameType.Type, "VkOffset2D")]
		public VkOffset2D MaxSrcPosition;
		[NativeName(NativeNameType.Field, "minSrcExtent")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D MinSrcExtent;
		[NativeName(NativeNameType.Field, "maxSrcExtent")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D MaxSrcExtent;
		[NativeName(NativeNameType.Field, "minDstPosition")]
		[NativeName(NativeNameType.Type, "VkOffset2D")]
		public VkOffset2D MinDstPosition;
		[NativeName(NativeNameType.Field, "maxDstPosition")]
		[NativeName(NativeNameType.Type, "VkOffset2D")]
		public VkOffset2D MaxDstPosition;
		[NativeName(NativeNameType.Field, "minDstExtent")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D MinDstExtent;
		[NativeName(NativeNameType.Field, "maxDstExtent")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D MaxDstExtent;

		public unsafe VkDisplayPlaneCapabilitiesKHR(uint supportedAlpha = default, VkOffset2D minSrcPosition = default, VkOffset2D maxSrcPosition = default, VkExtent2D minSrcExtent = default, VkExtent2D maxSrcExtent = default, VkOffset2D minDstPosition = default, VkOffset2D maxDstPosition = default, VkExtent2D minDstExtent = default, VkExtent2D maxDstExtent = default)
		{
			SupportedAlpha = supportedAlpha;
			MinSrcPosition = minSrcPosition;
			MaxSrcPosition = maxSrcPosition;
			MinSrcExtent = minSrcExtent;
			MaxSrcExtent = maxSrcExtent;
			MinDstPosition = minDstPosition;
			MaxDstPosition = maxDstPosition;
			MinDstExtent = minDstExtent;
			MaxDstExtent = maxDstExtent;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDisplayPlanePropertiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDisplayPlanePropertiesKHR
	{
		[NativeName(NativeNameType.Field, "currentDisplay")]
		[NativeName(NativeNameType.Type, "VkDisplayKHR")]
		public VkDisplayKHR CurrentDisplay;
		[NativeName(NativeNameType.Field, "currentStackIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CurrentStackIndex;

		public unsafe VkDisplayPlanePropertiesKHR(VkDisplayKHR currentDisplay = default, uint currentStackIndex = default)
		{
			CurrentDisplay = currentDisplay;
			CurrentStackIndex = currentStackIndex;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDisplayPropertiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDisplayPropertiesKHR
	{
		[NativeName(NativeNameType.Field, "display")]
		[NativeName(NativeNameType.Type, "VkDisplayKHR")]
		public VkDisplayKHR Display;
		[NativeName(NativeNameType.Field, "displayName")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* DisplayName;
		[NativeName(NativeNameType.Field, "physicalDimensions")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D PhysicalDimensions;
		[NativeName(NativeNameType.Field, "physicalResolution")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D PhysicalResolution;
		[NativeName(NativeNameType.Field, "supportedTransforms")]
		[NativeName(NativeNameType.Type, "VkSurfaceTransformFlagsKHR")]
		public uint SupportedTransforms;
		[NativeName(NativeNameType.Field, "planeReorderPossible")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PlaneReorderPossible;
		[NativeName(NativeNameType.Field, "persistentContent")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PersistentContent;

		public unsafe VkDisplayPropertiesKHR(VkDisplayKHR display = default, byte* displayName = default, VkExtent2D physicalDimensions = default, VkExtent2D physicalResolution = default, uint supportedTransforms = default, uint planeReorderPossible = default, uint persistentContent = default)
		{
			Display = display;
			DisplayName = displayName;
			PhysicalDimensions = physicalDimensions;
			PhysicalResolution = physicalResolution;
			SupportedTransforms = supportedTransforms;
			PlaneReorderPossible = planeReorderPossible;
			PersistentContent = persistentContent;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDisplaySurfaceCreateInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDisplaySurfaceCreateInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkDisplaySurfaceCreateFlagsKHR")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "displayMode")]
		[NativeName(NativeNameType.Type, "VkDisplayModeKHR")]
		public VkDisplayModeKHR DisplayMode;
		[NativeName(NativeNameType.Field, "planeIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PlaneIndex;
		[NativeName(NativeNameType.Field, "planeStackIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PlaneStackIndex;
		[NativeName(NativeNameType.Field, "transform")]
		[NativeName(NativeNameType.Type, "VkSurfaceTransformFlagBitsKHR")]
		public VkSurfaceTransformFlagBitsKHR Transform;
		[NativeName(NativeNameType.Field, "globalAlpha")]
		[NativeName(NativeNameType.Type, "float")]
		public float GlobalAlpha;
		[NativeName(NativeNameType.Field, "alphaMode")]
		[NativeName(NativeNameType.Type, "VkDisplayPlaneAlphaFlagBitsKHR")]
		public VkDisplayPlaneAlphaFlagBitsKHR AlphaMode;
		[NativeName(NativeNameType.Field, "imageExtent")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D ImageExtent;

		public unsafe VkDisplaySurfaceCreateInfoKHR(VkStructureType sType = default, void* pNext = default, uint flags = default, VkDisplayModeKHR displayMode = default, uint planeIndex = default, uint planeStackIndex = default, VkSurfaceTransformFlagBitsKHR transform = default, float globalAlpha = default, VkDisplayPlaneAlphaFlagBitsKHR alphaMode = default, VkExtent2D imageExtent = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			DisplayMode = displayMode;
			PlaneIndex = planeIndex;
			PlaneStackIndex = planeStackIndex;
			Transform = transform;
			GlobalAlpha = globalAlpha;
			AlphaMode = alphaMode;
			ImageExtent = imageExtent;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDisplayPresentInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDisplayPresentInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "srcRect")]
		[NativeName(NativeNameType.Type, "VkRect2D")]
		public VkRect2D SrcRect;
		[NativeName(NativeNameType.Field, "dstRect")]
		[NativeName(NativeNameType.Type, "VkRect2D")]
		public VkRect2D DstRect;
		[NativeName(NativeNameType.Field, "persistent")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint Persistent;

		public unsafe VkDisplayPresentInfoKHR(VkStructureType sType = default, void* pNext = default, VkRect2D srcRect = default, VkRect2D dstRect = default, uint persistent = default)
		{
			SType = sType;
			PNext = pNext;
			SrcRect = srcRect;
			DstRect = dstRect;
			Persistent = persistent;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkQueueFamilyQueryResultStatusPropertiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkQueueFamilyQueryResultStatusPropertiesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "queryResultStatusSupport")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint QueryResultStatusSupport;

		public unsafe VkQueueFamilyQueryResultStatusPropertiesKHR(VkStructureType sType = default, void* pNext = default, uint queryResultStatusSupport = default)
		{
			SType = sType;
			PNext = pNext;
			QueryResultStatusSupport = queryResultStatusSupport;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkQueueFamilyVideoPropertiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkQueueFamilyVideoPropertiesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "videoCodecOperations")]
		[NativeName(NativeNameType.Type, "VkVideoCodecOperationFlagsKHR")]
		public uint VideoCodecOperations;

		public unsafe VkQueueFamilyVideoPropertiesKHR(VkStructureType sType = default, void* pNext = default, uint videoCodecOperations = default)
		{
			SType = sType;
			PNext = pNext;
			VideoCodecOperations = videoCodecOperations;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoProfileInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoProfileInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "videoCodecOperation")]
		[NativeName(NativeNameType.Type, "VkVideoCodecOperationFlagBitsKHR")]
		public VkVideoCodecOperationFlagBitsKHR VideoCodecOperation;
		[NativeName(NativeNameType.Field, "chromaSubsampling")]
		[NativeName(NativeNameType.Type, "VkVideoChromaSubsamplingFlagsKHR")]
		public uint ChromaSubsampling;
		[NativeName(NativeNameType.Field, "lumaBitDepth")]
		[NativeName(NativeNameType.Type, "VkVideoComponentBitDepthFlagsKHR")]
		public uint LumaBitDepth;
		[NativeName(NativeNameType.Field, "chromaBitDepth")]
		[NativeName(NativeNameType.Type, "VkVideoComponentBitDepthFlagsKHR")]
		public uint ChromaBitDepth;

		public unsafe VkVideoProfileInfoKHR(VkStructureType sType = default, void* pNext = default, VkVideoCodecOperationFlagBitsKHR videoCodecOperation = default, uint chromaSubsampling = default, uint lumaBitDepth = default, uint chromaBitDepth = default)
		{
			SType = sType;
			PNext = pNext;
			VideoCodecOperation = videoCodecOperation;
			ChromaSubsampling = chromaSubsampling;
			LumaBitDepth = lumaBitDepth;
			ChromaBitDepth = chromaBitDepth;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoProfileListInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoProfileListInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "profileCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ProfileCount;
		[NativeName(NativeNameType.Field, "pProfiles")]
		[NativeName(NativeNameType.Type, "const VkVideoProfileInfoKHR*")]
		public unsafe VkVideoProfileInfoKHR* PProfiles;

		public unsafe VkVideoProfileListInfoKHR(VkStructureType sType = default, void* pNext = default, uint profileCount = default, VkVideoProfileInfoKHR* pProfiles = default)
		{
			SType = sType;
			PNext = pNext;
			ProfileCount = profileCount;
			PProfiles = pProfiles;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoCapabilitiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoCapabilitiesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkVideoCapabilityFlagsKHR")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "minBitstreamBufferOffsetAlignment")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong MinBitstreamBufferOffsetAlignment;
		[NativeName(NativeNameType.Field, "minBitstreamBufferSizeAlignment")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong MinBitstreamBufferSizeAlignment;
		[NativeName(NativeNameType.Field, "pictureAccessGranularity")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D PictureAccessGranularity;
		[NativeName(NativeNameType.Field, "minCodedExtent")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D MinCodedExtent;
		[NativeName(NativeNameType.Field, "maxCodedExtent")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D MaxCodedExtent;
		[NativeName(NativeNameType.Field, "maxDpbSlots")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDpbSlots;
		[NativeName(NativeNameType.Field, "maxActiveReferencePictures")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxActiveReferencePictures;
		[NativeName(NativeNameType.Field, "stdHeaderVersion")]
		[NativeName(NativeNameType.Type, "VkExtensionProperties")]
		public VkExtensionProperties StdHeaderVersion;

		public unsafe VkVideoCapabilitiesKHR(VkStructureType sType = default, void* pNext = default, uint flags = default, ulong minBitstreamBufferOffsetAlignment = default, ulong minBitstreamBufferSizeAlignment = default, VkExtent2D pictureAccessGranularity = default, VkExtent2D minCodedExtent = default, VkExtent2D maxCodedExtent = default, uint maxDpbSlots = default, uint maxActiveReferencePictures = default, VkExtensionProperties stdHeaderVersion = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			MinBitstreamBufferOffsetAlignment = minBitstreamBufferOffsetAlignment;
			MinBitstreamBufferSizeAlignment = minBitstreamBufferSizeAlignment;
			PictureAccessGranularity = pictureAccessGranularity;
			MinCodedExtent = minCodedExtent;
			MaxCodedExtent = maxCodedExtent;
			MaxDpbSlots = maxDpbSlots;
			MaxActiveReferencePictures = maxActiveReferencePictures;
			StdHeaderVersion = stdHeaderVersion;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceVideoFormatInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceVideoFormatInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "imageUsage")]
		[NativeName(NativeNameType.Type, "VkImageUsageFlags")]
		public uint ImageUsage;

		public unsafe VkPhysicalDeviceVideoFormatInfoKHR(VkStructureType sType = default, void* pNext = default, uint imageUsage = default)
		{
			SType = sType;
			PNext = pNext;
			ImageUsage = imageUsage;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoFormatPropertiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoFormatPropertiesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat Format;
		[NativeName(NativeNameType.Field, "componentMapping")]
		[NativeName(NativeNameType.Type, "VkComponentMapping")]
		public VkComponentMapping ComponentMapping;
		[NativeName(NativeNameType.Field, "imageCreateFlags")]
		[NativeName(NativeNameType.Type, "VkImageCreateFlags")]
		public uint ImageCreateFlags;
		[NativeName(NativeNameType.Field, "imageType")]
		[NativeName(NativeNameType.Type, "VkImageType")]
		public VkImageType ImageType;
		[NativeName(NativeNameType.Field, "imageTiling")]
		[NativeName(NativeNameType.Type, "VkImageTiling")]
		public VkImageTiling ImageTiling;
		[NativeName(NativeNameType.Field, "imageUsageFlags")]
		[NativeName(NativeNameType.Type, "VkImageUsageFlags")]
		public uint ImageUsageFlags;

		public unsafe VkVideoFormatPropertiesKHR(VkStructureType sType = default, void* pNext = default, VkFormat format = default, VkComponentMapping componentMapping = default, uint imageCreateFlags = default, VkImageType imageType = default, VkImageTiling imageTiling = default, uint imageUsageFlags = default)
		{
			SType = sType;
			PNext = pNext;
			Format = format;
			ComponentMapping = componentMapping;
			ImageCreateFlags = imageCreateFlags;
			ImageType = imageType;
			ImageTiling = imageTiling;
			ImageUsageFlags = imageUsageFlags;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoPictureResourceInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoPictureResourceInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "codedOffset")]
		[NativeName(NativeNameType.Type, "VkOffset2D")]
		public VkOffset2D CodedOffset;
		[NativeName(NativeNameType.Field, "codedExtent")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D CodedExtent;
		[NativeName(NativeNameType.Field, "baseArrayLayer")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BaseArrayLayer;
		[NativeName(NativeNameType.Field, "imageViewBinding")]
		[NativeName(NativeNameType.Type, "VkImageView")]
		public VkImageView ImageViewBinding;

		public unsafe VkVideoPictureResourceInfoKHR(VkStructureType sType = default, void* pNext = default, VkOffset2D codedOffset = default, VkExtent2D codedExtent = default, uint baseArrayLayer = default, VkImageView imageViewBinding = default)
		{
			SType = sType;
			PNext = pNext;
			CodedOffset = codedOffset;
			CodedExtent = codedExtent;
			BaseArrayLayer = baseArrayLayer;
			ImageViewBinding = imageViewBinding;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoReferenceSlotInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoReferenceSlotInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "slotIndex")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int SlotIndex;
		[NativeName(NativeNameType.Field, "pPictureResource")]
		[NativeName(NativeNameType.Type, "const VkVideoPictureResourceInfoKHR*")]
		public unsafe VkVideoPictureResourceInfoKHR* PPictureResource;

		public unsafe VkVideoReferenceSlotInfoKHR(VkStructureType sType = default, void* pNext = default, int slotIndex = default, VkVideoPictureResourceInfoKHR* pPictureResource = default)
		{
			SType = sType;
			PNext = pNext;
			SlotIndex = slotIndex;
			PPictureResource = pPictureResource;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoSessionMemoryRequirementsKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoSessionMemoryRequirementsKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "memoryBindIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MemoryBindIndex;
		[NativeName(NativeNameType.Field, "memoryRequirements")]
		[NativeName(NativeNameType.Type, "VkMemoryRequirements")]
		public VkMemoryRequirements MemoryRequirements;

		public unsafe VkVideoSessionMemoryRequirementsKHR(VkStructureType sType = default, void* pNext = default, uint memoryBindIndex = default, VkMemoryRequirements memoryRequirements = default)
		{
			SType = sType;
			PNext = pNext;
			MemoryBindIndex = memoryBindIndex;
			MemoryRequirements = memoryRequirements;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkBindVideoSessionMemoryInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkBindVideoSessionMemoryInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "memoryBindIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MemoryBindIndex;
		[NativeName(NativeNameType.Field, "memory")]
		[NativeName(NativeNameType.Type, "VkDeviceMemory")]
		public VkDeviceMemory Memory;
		[NativeName(NativeNameType.Field, "memoryOffset")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong MemoryOffset;
		[NativeName(NativeNameType.Field, "memorySize")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong MemorySize;

		public unsafe VkBindVideoSessionMemoryInfoKHR(VkStructureType sType = default, void* pNext = default, uint memoryBindIndex = default, VkDeviceMemory memory = default, ulong memoryOffset = default, ulong memorySize = default)
		{
			SType = sType;
			PNext = pNext;
			MemoryBindIndex = memoryBindIndex;
			Memory = memory;
			MemoryOffset = memoryOffset;
			MemorySize = memorySize;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoSessionCreateInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoSessionCreateInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "queueFamilyIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint QueueFamilyIndex;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkVideoSessionCreateFlagsKHR")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "pVideoProfile")]
		[NativeName(NativeNameType.Type, "const VkVideoProfileInfoKHR*")]
		public unsafe VkVideoProfileInfoKHR* PVideoProfile;
		[NativeName(NativeNameType.Field, "pictureFormat")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat PictureFormat;
		[NativeName(NativeNameType.Field, "maxCodedExtent")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D MaxCodedExtent;
		[NativeName(NativeNameType.Field, "referencePictureFormat")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat ReferencePictureFormat;
		[NativeName(NativeNameType.Field, "maxDpbSlots")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDpbSlots;
		[NativeName(NativeNameType.Field, "maxActiveReferencePictures")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxActiveReferencePictures;
		[NativeName(NativeNameType.Field, "pStdHeaderVersion")]
		[NativeName(NativeNameType.Type, "const VkExtensionProperties*")]
		public unsafe VkExtensionProperties* PStdHeaderVersion;

		public unsafe VkVideoSessionCreateInfoKHR(VkStructureType sType = default, void* pNext = default, uint queueFamilyIndex = default, uint flags = default, VkVideoProfileInfoKHR* pVideoProfile = default, VkFormat pictureFormat = default, VkExtent2D maxCodedExtent = default, VkFormat referencePictureFormat = default, uint maxDpbSlots = default, uint maxActiveReferencePictures = default, VkExtensionProperties* pStdHeaderVersion = default)
		{
			SType = sType;
			PNext = pNext;
			QueueFamilyIndex = queueFamilyIndex;
			Flags = flags;
			PVideoProfile = pVideoProfile;
			PictureFormat = pictureFormat;
			MaxCodedExtent = maxCodedExtent;
			ReferencePictureFormat = referencePictureFormat;
			MaxDpbSlots = maxDpbSlots;
			MaxActiveReferencePictures = maxActiveReferencePictures;
			PStdHeaderVersion = pStdHeaderVersion;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoSessionParametersCreateInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoSessionParametersCreateInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkVideoSessionParametersCreateFlagsKHR")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "videoSessionParametersTemplate")]
		[NativeName(NativeNameType.Type, "VkVideoSessionParametersKHR")]
		public VkVideoSessionParametersKHR VideoSessionParametersTemplate;
		[NativeName(NativeNameType.Field, "videoSession")]
		[NativeName(NativeNameType.Type, "VkVideoSessionKHR")]
		public VkVideoSessionKHR VideoSession;

		public unsafe VkVideoSessionParametersCreateInfoKHR(VkStructureType sType = default, void* pNext = default, uint flags = default, VkVideoSessionParametersKHR videoSessionParametersTemplate = default, VkVideoSessionKHR videoSession = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			VideoSessionParametersTemplate = videoSessionParametersTemplate;
			VideoSession = videoSession;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoSessionParametersUpdateInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoSessionParametersUpdateInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "updateSequenceCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint UpdateSequenceCount;

		public unsafe VkVideoSessionParametersUpdateInfoKHR(VkStructureType sType = default, void* pNext = default, uint updateSequenceCount = default)
		{
			SType = sType;
			PNext = pNext;
			UpdateSequenceCount = updateSequenceCount;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoBeginCodingInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoBeginCodingInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkVideoBeginCodingFlagsKHR")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "videoSession")]
		[NativeName(NativeNameType.Type, "VkVideoSessionKHR")]
		public VkVideoSessionKHR VideoSession;
		[NativeName(NativeNameType.Field, "videoSessionParameters")]
		[NativeName(NativeNameType.Type, "VkVideoSessionParametersKHR")]
		public VkVideoSessionParametersKHR VideoSessionParameters;
		[NativeName(NativeNameType.Field, "referenceSlotCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ReferenceSlotCount;
		[NativeName(NativeNameType.Field, "pReferenceSlots")]
		[NativeName(NativeNameType.Type, "const VkVideoReferenceSlotInfoKHR*")]
		public unsafe VkVideoReferenceSlotInfoKHR* PReferenceSlots;

		public unsafe VkVideoBeginCodingInfoKHR(VkStructureType sType = default, void* pNext = default, uint flags = default, VkVideoSessionKHR videoSession = default, VkVideoSessionParametersKHR videoSessionParameters = default, uint referenceSlotCount = default, VkVideoReferenceSlotInfoKHR* pReferenceSlots = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			VideoSession = videoSession;
			VideoSessionParameters = videoSessionParameters;
			ReferenceSlotCount = referenceSlotCount;
			PReferenceSlots = pReferenceSlots;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoEndCodingInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoEndCodingInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkVideoEndCodingFlagsKHR")]
		public uint Flags;

		public unsafe VkVideoEndCodingInfoKHR(VkStructureType sType = default, void* pNext = default, uint flags = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoCodingControlInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoCodingControlInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkVideoCodingControlFlagsKHR")]
		public uint Flags;

		public unsafe VkVideoCodingControlInfoKHR(VkStructureType sType = default, void* pNext = default, uint flags = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoDecodeCapabilitiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoDecodeCapabilitiesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkVideoDecodeCapabilityFlagsKHR")]
		public uint Flags;

		public unsafe VkVideoDecodeCapabilitiesKHR(VkStructureType sType = default, void* pNext = default, uint flags = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoDecodeUsageInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoDecodeUsageInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "videoUsageHints")]
		[NativeName(NativeNameType.Type, "VkVideoDecodeUsageFlagsKHR")]
		public uint VideoUsageHints;

		public unsafe VkVideoDecodeUsageInfoKHR(VkStructureType sType = default, void* pNext = default, uint videoUsageHints = default)
		{
			SType = sType;
			PNext = pNext;
			VideoUsageHints = videoUsageHints;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoDecodeInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoDecodeInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkVideoDecodeFlagsKHR")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "srcBuffer")]
		[NativeName(NativeNameType.Type, "VkBuffer")]
		public VkBuffer SrcBuffer;
		[NativeName(NativeNameType.Field, "srcBufferOffset")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong SrcBufferOffset;
		[NativeName(NativeNameType.Field, "srcBufferRange")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong SrcBufferRange;
		[NativeName(NativeNameType.Field, "dstPictureResource")]
		[NativeName(NativeNameType.Type, "VkVideoPictureResourceInfoKHR")]
		public VkVideoPictureResourceInfoKHR DstPictureResource;
		[NativeName(NativeNameType.Field, "pSetupReferenceSlot")]
		[NativeName(NativeNameType.Type, "const VkVideoReferenceSlotInfoKHR*")]
		public unsafe VkVideoReferenceSlotInfoKHR* PSetupReferenceSlot;
		[NativeName(NativeNameType.Field, "referenceSlotCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ReferenceSlotCount;
		[NativeName(NativeNameType.Field, "pReferenceSlots")]
		[NativeName(NativeNameType.Type, "const VkVideoReferenceSlotInfoKHR*")]
		public unsafe VkVideoReferenceSlotInfoKHR* PReferenceSlots;

		public unsafe VkVideoDecodeInfoKHR(VkStructureType sType = default, void* pNext = default, uint flags = default, VkBuffer srcBuffer = default, ulong srcBufferOffset = default, ulong srcBufferRange = default, VkVideoPictureResourceInfoKHR dstPictureResource = default, VkVideoReferenceSlotInfoKHR* pSetupReferenceSlot = default, uint referenceSlotCount = default, VkVideoReferenceSlotInfoKHR* pReferenceSlots = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			SrcBuffer = srcBuffer;
			SrcBufferOffset = srcBufferOffset;
			SrcBufferRange = srcBufferRange;
			DstPictureResource = dstPictureResource;
			PSetupReferenceSlot = pSetupReferenceSlot;
			ReferenceSlotCount = referenceSlotCount;
			PReferenceSlots = pReferenceSlots;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoDecodeH264ProfileInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoDecodeH264ProfileInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "stdProfileIdc")]
		[NativeName(NativeNameType.Type, "StdVideoH264ProfileIdc")]
		public StdVideoH264ProfileIdc StdProfileIdc;
		[NativeName(NativeNameType.Field, "pictureLayout")]
		[NativeName(NativeNameType.Type, "VkVideoDecodeH264PictureLayoutFlagBitsKHR")]
		public VkVideoDecodeH264PictureLayoutFlagBitsKHR PictureLayout;

		public unsafe VkVideoDecodeH264ProfileInfoKHR(VkStructureType sType = default, void* pNext = default, StdVideoH264ProfileIdc stdProfileIdc = default, VkVideoDecodeH264PictureLayoutFlagBitsKHR pictureLayout = default)
		{
			SType = sType;
			PNext = pNext;
			StdProfileIdc = stdProfileIdc;
			PictureLayout = pictureLayout;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoDecodeH264CapabilitiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoDecodeH264CapabilitiesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "maxLevelIdc")]
		[NativeName(NativeNameType.Type, "StdVideoH264LevelIdc")]
		public StdVideoH264LevelIdc MaxLevelIdc;
		[NativeName(NativeNameType.Field, "fieldOffsetGranularity")]
		[NativeName(NativeNameType.Type, "VkOffset2D")]
		public VkOffset2D FieldOffsetGranularity;

		public unsafe VkVideoDecodeH264CapabilitiesKHR(VkStructureType sType = default, void* pNext = default, StdVideoH264LevelIdc maxLevelIdc = default, VkOffset2D fieldOffsetGranularity = default)
		{
			SType = sType;
			PNext = pNext;
			MaxLevelIdc = maxLevelIdc;
			FieldOffsetGranularity = fieldOffsetGranularity;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoDecodeH264SessionParametersAddInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoDecodeH264SessionParametersAddInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "stdSPSCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint StdSPSCount;
		[NativeName(NativeNameType.Field, "pStdSPSs")]
		[NativeName(NativeNameType.Type, "const StdVideoH264SequenceParameterSet*")]
		public unsafe StdVideoH264SequenceParameterSet* PStdSPSs;
		[NativeName(NativeNameType.Field, "stdPPSCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint StdPPSCount;
		[NativeName(NativeNameType.Field, "pStdPPSs")]
		[NativeName(NativeNameType.Type, "const StdVideoH264PictureParameterSet*")]
		public unsafe StdVideoH264PictureParameterSet* PStdPPSs;

		public unsafe VkVideoDecodeH264SessionParametersAddInfoKHR(VkStructureType sType = default, void* pNext = default, uint stdSPSCount = default, StdVideoH264SequenceParameterSet* pStdSPSs = default, uint stdPPSCount = default, StdVideoH264PictureParameterSet* pStdPPSs = default)
		{
			SType = sType;
			PNext = pNext;
			StdSPSCount = stdSPSCount;
			PStdSPSs = pStdSPSs;
			StdPPSCount = stdPPSCount;
			PStdPPSs = pStdPPSs;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoDecodeH264SessionParametersCreateInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoDecodeH264SessionParametersCreateInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "maxStdSPSCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxStdSPSCount;
		[NativeName(NativeNameType.Field, "maxStdPPSCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxStdPPSCount;
		[NativeName(NativeNameType.Field, "pParametersAddInfo")]
		[NativeName(NativeNameType.Type, "const VkVideoDecodeH264SessionParametersAddInfoKHR*")]
		public unsafe VkVideoDecodeH264SessionParametersAddInfoKHR* PParametersAddInfo;

		public unsafe VkVideoDecodeH264SessionParametersCreateInfoKHR(VkStructureType sType = default, void* pNext = default, uint maxStdSPSCount = default, uint maxStdPPSCount = default, VkVideoDecodeH264SessionParametersAddInfoKHR* pParametersAddInfo = default)
		{
			SType = sType;
			PNext = pNext;
			MaxStdSPSCount = maxStdSPSCount;
			MaxStdPPSCount = maxStdPPSCount;
			PParametersAddInfo = pParametersAddInfo;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoDecodeH264PictureInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoDecodeH264PictureInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pStdPictureInfo")]
		[NativeName(NativeNameType.Type, "const StdVideoDecodeH264PictureInfo*")]
		public unsafe StdVideoDecodeH264PictureInfo* PStdPictureInfo;
		[NativeName(NativeNameType.Field, "sliceCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SliceCount;
		[NativeName(NativeNameType.Field, "pSliceOffsets")]
		[NativeName(NativeNameType.Type, "const uint32_t*")]
		public unsafe uint* PSliceOffsets;

		public unsafe VkVideoDecodeH264PictureInfoKHR(VkStructureType sType = default, void* pNext = default, StdVideoDecodeH264PictureInfo* pStdPictureInfo = default, uint sliceCount = default, uint* pSliceOffsets = default)
		{
			SType = sType;
			PNext = pNext;
			PStdPictureInfo = pStdPictureInfo;
			SliceCount = sliceCount;
			PSliceOffsets = pSliceOffsets;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoDecodeH264DpbSlotInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoDecodeH264DpbSlotInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pStdReferenceInfo")]
		[NativeName(NativeNameType.Type, "const StdVideoDecodeH264ReferenceInfo*")]
		public unsafe StdVideoDecodeH264ReferenceInfo* PStdReferenceInfo;

		public unsafe VkVideoDecodeH264DpbSlotInfoKHR(VkStructureType sType = default, void* pNext = default, StdVideoDecodeH264ReferenceInfo* pStdReferenceInfo = default)
		{
			SType = sType;
			PNext = pNext;
			PStdReferenceInfo = pStdReferenceInfo;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkRenderingFragmentShadingRateAttachmentInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkRenderingFragmentShadingRateAttachmentInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "imageView")]
		[NativeName(NativeNameType.Type, "VkImageView")]
		public VkImageView ImageView;
		[NativeName(NativeNameType.Field, "imageLayout")]
		[NativeName(NativeNameType.Type, "VkImageLayout")]
		public VkImageLayout ImageLayout;
		[NativeName(NativeNameType.Field, "shadingRateAttachmentTexelSize")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D ShadingRateAttachmentTexelSize;

		public unsafe VkRenderingFragmentShadingRateAttachmentInfoKHR(VkStructureType sType = default, void* pNext = default, VkImageView imageView = default, VkImageLayout imageLayout = default, VkExtent2D shadingRateAttachmentTexelSize = default)
		{
			SType = sType;
			PNext = pNext;
			ImageView = imageView;
			ImageLayout = imageLayout;
			ShadingRateAttachmentTexelSize = shadingRateAttachmentTexelSize;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkRenderingFragmentDensityMapAttachmentInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkRenderingFragmentDensityMapAttachmentInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "imageView")]
		[NativeName(NativeNameType.Type, "VkImageView")]
		public VkImageView ImageView;
		[NativeName(NativeNameType.Field, "imageLayout")]
		[NativeName(NativeNameType.Type, "VkImageLayout")]
		public VkImageLayout ImageLayout;

		public unsafe VkRenderingFragmentDensityMapAttachmentInfoEXT(VkStructureType sType = default, void* pNext = default, VkImageView imageView = default, VkImageLayout imageLayout = default)
		{
			SType = sType;
			PNext = pNext;
			ImageView = imageView;
			ImageLayout = imageLayout;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkAttachmentSampleCountInfoAMD")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkAttachmentSampleCountInfoAMD
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "colorAttachmentCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ColorAttachmentCount;
		[NativeName(NativeNameType.Field, "pColorAttachmentSamples")]
		[NativeName(NativeNameType.Type, "const VkSampleCountFlagBits*")]
		public unsafe VkSampleCountFlagBits* PColorAttachmentSamples;
		[NativeName(NativeNameType.Field, "depthStencilAttachmentSamples")]
		[NativeName(NativeNameType.Type, "VkSampleCountFlagBits")]
		public VkSampleCountFlagBits DepthStencilAttachmentSamples;

		public unsafe VkAttachmentSampleCountInfoAMD(VkStructureType sType = default, void* pNext = default, uint colorAttachmentCount = default, VkSampleCountFlagBits* pColorAttachmentSamples = default, VkSampleCountFlagBits depthStencilAttachmentSamples = default)
		{
			SType = sType;
			PNext = pNext;
			ColorAttachmentCount = colorAttachmentCount;
			PColorAttachmentSamples = pColorAttachmentSamples;
			DepthStencilAttachmentSamples = depthStencilAttachmentSamples;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMultiviewPerViewAttributesInfoNVX")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMultiviewPerViewAttributesInfoNVX
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "perViewAttributes")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PerViewAttributes;
		[NativeName(NativeNameType.Field, "perViewAttributesPositionXOnly")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PerViewAttributesPositionXOnly;

		public unsafe VkMultiviewPerViewAttributesInfoNVX(VkStructureType sType = default, void* pNext = default, uint perViewAttributes = default, uint perViewAttributesPositionXOnly = default)
		{
			SType = sType;
			PNext = pNext;
			PerViewAttributes = perViewAttributes;
			PerViewAttributesPositionXOnly = perViewAttributesPositionXOnly;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImportMemoryFdInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImportMemoryFdInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "handleType")]
		[NativeName(NativeNameType.Type, "VkExternalMemoryHandleTypeFlagBits")]
		public VkExternalMemoryHandleTypeFlagBits HandleType;
		[NativeName(NativeNameType.Field, "fd")]
		[NativeName(NativeNameType.Type, "int")]
		public int Fd;

		public unsafe VkImportMemoryFdInfoKHR(VkStructureType sType = default, void* pNext = default, VkExternalMemoryHandleTypeFlagBits handleType = default, int fd = default)
		{
			SType = sType;
			PNext = pNext;
			HandleType = handleType;
			Fd = fd;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMemoryFdPropertiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMemoryFdPropertiesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "memoryTypeBits")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MemoryTypeBits;

		public unsafe VkMemoryFdPropertiesKHR(VkStructureType sType = default, void* pNext = default, uint memoryTypeBits = default)
		{
			SType = sType;
			PNext = pNext;
			MemoryTypeBits = memoryTypeBits;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMemoryGetFdInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMemoryGetFdInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "memory")]
		[NativeName(NativeNameType.Type, "VkDeviceMemory")]
		public VkDeviceMemory Memory;
		[NativeName(NativeNameType.Field, "handleType")]
		[NativeName(NativeNameType.Type, "VkExternalMemoryHandleTypeFlagBits")]
		public VkExternalMemoryHandleTypeFlagBits HandleType;

		public unsafe VkMemoryGetFdInfoKHR(VkStructureType sType = default, void* pNext = default, VkDeviceMemory memory = default, VkExternalMemoryHandleTypeFlagBits handleType = default)
		{
			SType = sType;
			PNext = pNext;
			Memory = memory;
			HandleType = handleType;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImportSemaphoreFdInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImportSemaphoreFdInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "semaphore")]
		[NativeName(NativeNameType.Type, "VkSemaphore")]
		public VkSemaphore Semaphore;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkSemaphoreImportFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "handleType")]
		[NativeName(NativeNameType.Type, "VkExternalSemaphoreHandleTypeFlagBits")]
		public VkExternalSemaphoreHandleTypeFlagBits HandleType;
		[NativeName(NativeNameType.Field, "fd")]
		[NativeName(NativeNameType.Type, "int")]
		public int Fd;

		public unsafe VkImportSemaphoreFdInfoKHR(VkStructureType sType = default, void* pNext = default, VkSemaphore semaphore = default, uint flags = default, VkExternalSemaphoreHandleTypeFlagBits handleType = default, int fd = default)
		{
			SType = sType;
			PNext = pNext;
			Semaphore = semaphore;
			Flags = flags;
			HandleType = handleType;
			Fd = fd;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSemaphoreGetFdInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSemaphoreGetFdInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "semaphore")]
		[NativeName(NativeNameType.Type, "VkSemaphore")]
		public VkSemaphore Semaphore;
		[NativeName(NativeNameType.Field, "handleType")]
		[NativeName(NativeNameType.Type, "VkExternalSemaphoreHandleTypeFlagBits")]
		public VkExternalSemaphoreHandleTypeFlagBits HandleType;

		public unsafe VkSemaphoreGetFdInfoKHR(VkStructureType sType = default, void* pNext = default, VkSemaphore semaphore = default, VkExternalSemaphoreHandleTypeFlagBits handleType = default)
		{
			SType = sType;
			PNext = pNext;
			Semaphore = semaphore;
			HandleType = handleType;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDevicePushDescriptorPropertiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDevicePushDescriptorPropertiesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "maxPushDescriptors")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPushDescriptors;

		public unsafe VkPhysicalDevicePushDescriptorPropertiesKHR(VkStructureType sType = default, void* pNext = default, uint maxPushDescriptors = default)
		{
			SType = sType;
			PNext = pNext;
			MaxPushDescriptors = maxPushDescriptors;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkRectLayerKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkRectLayerKHR
	{
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "VkOffset2D")]
		public VkOffset2D Offset;
		[NativeName(NativeNameType.Field, "extent")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D Extent;
		[NativeName(NativeNameType.Field, "layer")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Layer;

		public unsafe VkRectLayerKHR(VkOffset2D offset = default, VkExtent2D extent = default, uint layer = default)
		{
			Offset = offset;
			Extent = extent;
			Layer = layer;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPresentRegionKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPresentRegionKHR
	{
		[NativeName(NativeNameType.Field, "rectangleCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint RectangleCount;
		[NativeName(NativeNameType.Field, "pRectangles")]
		[NativeName(NativeNameType.Type, "const VkRectLayerKHR*")]
		public unsafe VkRectLayerKHR* PRectangles;

		public unsafe VkPresentRegionKHR(uint rectangleCount = default, VkRectLayerKHR* pRectangles = default)
		{
			RectangleCount = rectangleCount;
			PRectangles = pRectangles;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPresentRegionsKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPresentRegionsKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "swapchainCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SwapchainCount;
		[NativeName(NativeNameType.Field, "pRegions")]
		[NativeName(NativeNameType.Type, "const VkPresentRegionKHR*")]
		public unsafe VkPresentRegionKHR* PRegions;

		public unsafe VkPresentRegionsKHR(VkStructureType sType = default, void* pNext = default, uint swapchainCount = default, VkPresentRegionKHR* pRegions = default)
		{
			SType = sType;
			PNext = pNext;
			SwapchainCount = swapchainCount;
			PRegions = pRegions;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSharedPresentSurfaceCapabilitiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSharedPresentSurfaceCapabilitiesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "sharedPresentSupportedUsageFlags")]
		[NativeName(NativeNameType.Type, "VkImageUsageFlags")]
		public uint SharedPresentSupportedUsageFlags;

		public unsafe VkSharedPresentSurfaceCapabilitiesKHR(VkStructureType sType = default, void* pNext = default, uint sharedPresentSupportedUsageFlags = default)
		{
			SType = sType;
			PNext = pNext;
			SharedPresentSupportedUsageFlags = sharedPresentSupportedUsageFlags;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImportFenceFdInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImportFenceFdInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "fence")]
		[NativeName(NativeNameType.Type, "VkFence")]
		public VkFence Fence;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkFenceImportFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "handleType")]
		[NativeName(NativeNameType.Type, "VkExternalFenceHandleTypeFlagBits")]
		public VkExternalFenceHandleTypeFlagBits HandleType;
		[NativeName(NativeNameType.Field, "fd")]
		[NativeName(NativeNameType.Type, "int")]
		public int Fd;

		public unsafe VkImportFenceFdInfoKHR(VkStructureType sType = default, void* pNext = default, VkFence fence = default, uint flags = default, VkExternalFenceHandleTypeFlagBits handleType = default, int fd = default)
		{
			SType = sType;
			PNext = pNext;
			Fence = fence;
			Flags = flags;
			HandleType = handleType;
			Fd = fd;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkFenceGetFdInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkFenceGetFdInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "fence")]
		[NativeName(NativeNameType.Type, "VkFence")]
		public VkFence Fence;
		[NativeName(NativeNameType.Field, "handleType")]
		[NativeName(NativeNameType.Type, "VkExternalFenceHandleTypeFlagBits")]
		public VkExternalFenceHandleTypeFlagBits HandleType;

		public unsafe VkFenceGetFdInfoKHR(VkStructureType sType = default, void* pNext = default, VkFence fence = default, VkExternalFenceHandleTypeFlagBits handleType = default)
		{
			SType = sType;
			PNext = pNext;
			Fence = fence;
			HandleType = handleType;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDevicePerformanceQueryFeaturesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDevicePerformanceQueryFeaturesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "performanceCounterQueryPools")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PerformanceCounterQueryPools;
		[NativeName(NativeNameType.Field, "performanceCounterMultipleQueryPools")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PerformanceCounterMultipleQueryPools;

		public unsafe VkPhysicalDevicePerformanceQueryFeaturesKHR(VkStructureType sType = default, void* pNext = default, uint performanceCounterQueryPools = default, uint performanceCounterMultipleQueryPools = default)
		{
			SType = sType;
			PNext = pNext;
			PerformanceCounterQueryPools = performanceCounterQueryPools;
			PerformanceCounterMultipleQueryPools = performanceCounterMultipleQueryPools;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDevicePerformanceQueryPropertiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDevicePerformanceQueryPropertiesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "allowCommandBufferQueryCopies")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint AllowCommandBufferQueryCopies;

		public unsafe VkPhysicalDevicePerformanceQueryPropertiesKHR(VkStructureType sType = default, void* pNext = default, uint allowCommandBufferQueryCopies = default)
		{
			SType = sType;
			PNext = pNext;
			AllowCommandBufferQueryCopies = allowCommandBufferQueryCopies;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPerformanceCounterKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPerformanceCounterKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "unit")]
		[NativeName(NativeNameType.Type, "VkPerformanceCounterUnitKHR")]
		public VkPerformanceCounterUnitKHR Unit;
		[NativeName(NativeNameType.Field, "scope")]
		[NativeName(NativeNameType.Type, "VkPerformanceCounterScopeKHR")]
		public VkPerformanceCounterScopeKHR Scope;
		[NativeName(NativeNameType.Field, "storage")]
		[NativeName(NativeNameType.Type, "VkPerformanceCounterStorageKHR")]
		public VkPerformanceCounterStorageKHR Storage;
		[NativeName(NativeNameType.Field, "uuid")]
		[NativeName(NativeNameType.Type, "uint8_t[16]")]
		public byte Uuid_0;
		public byte Uuid_1;
		public byte Uuid_2;
		public byte Uuid_3;
		public byte Uuid_4;
		public byte Uuid_5;
		public byte Uuid_6;
		public byte Uuid_7;
		public byte Uuid_8;
		public byte Uuid_9;
		public byte Uuid_10;
		public byte Uuid_11;
		public byte Uuid_12;
		public byte Uuid_13;
		public byte Uuid_14;
		public byte Uuid_15;

		public unsafe VkPerformanceCounterKHR(VkStructureType sType = default, void* pNext = default, VkPerformanceCounterUnitKHR unit = default, VkPerformanceCounterScopeKHR scope = default, VkPerformanceCounterStorageKHR storage = default, byte* uuid = default)
		{
			SType = sType;
			PNext = pNext;
			Unit = unit;
			Scope = scope;
			Storage = storage;
			if (uuid != default)
			{
				Uuid_0 = uuid[0];
				Uuid_1 = uuid[1];
				Uuid_2 = uuid[2];
				Uuid_3 = uuid[3];
				Uuid_4 = uuid[4];
				Uuid_5 = uuid[5];
				Uuid_6 = uuid[6];
				Uuid_7 = uuid[7];
				Uuid_8 = uuid[8];
				Uuid_9 = uuid[9];
				Uuid_10 = uuid[10];
				Uuid_11 = uuid[11];
				Uuid_12 = uuid[12];
				Uuid_13 = uuid[13];
				Uuid_14 = uuid[14];
				Uuid_15 = uuid[15];
			}
		}

		public unsafe VkPerformanceCounterKHR(VkStructureType sType = default, void* pNext = default, VkPerformanceCounterUnitKHR unit = default, VkPerformanceCounterScopeKHR scope = default, VkPerformanceCounterStorageKHR storage = default, Span<byte> uuid = default)
		{
			SType = sType;
			PNext = pNext;
			Unit = unit;
			Scope = scope;
			Storage = storage;
			if (uuid != default)
			{
				Uuid_0 = uuid[0];
				Uuid_1 = uuid[1];
				Uuid_2 = uuid[2];
				Uuid_3 = uuid[3];
				Uuid_4 = uuid[4];
				Uuid_5 = uuid[5];
				Uuid_6 = uuid[6];
				Uuid_7 = uuid[7];
				Uuid_8 = uuid[8];
				Uuid_9 = uuid[9];
				Uuid_10 = uuid[10];
				Uuid_11 = uuid[11];
				Uuid_12 = uuid[12];
				Uuid_13 = uuid[13];
				Uuid_14 = uuid[14];
				Uuid_15 = uuid[15];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPerformanceCounterDescriptionKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPerformanceCounterDescriptionKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkPerformanceCounterDescriptionFlagsKHR")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "char[256]")]
		public byte Name_0;
		public byte Name_1;
		public byte Name_2;
		public byte Name_3;
		public byte Name_4;
		public byte Name_5;
		public byte Name_6;
		public byte Name_7;
		public byte Name_8;
		public byte Name_9;
		public byte Name_10;
		public byte Name_11;
		public byte Name_12;
		public byte Name_13;
		public byte Name_14;
		public byte Name_15;
		public byte Name_16;
		public byte Name_17;
		public byte Name_18;
		public byte Name_19;
		public byte Name_20;
		public byte Name_21;
		public byte Name_22;
		public byte Name_23;
		public byte Name_24;
		public byte Name_25;
		public byte Name_26;
		public byte Name_27;
		public byte Name_28;
		public byte Name_29;
		public byte Name_30;
		public byte Name_31;
		public byte Name_32;
		public byte Name_33;
		public byte Name_34;
		public byte Name_35;
		public byte Name_36;
		public byte Name_37;
		public byte Name_38;
		public byte Name_39;
		public byte Name_40;
		public byte Name_41;
		public byte Name_42;
		public byte Name_43;
		public byte Name_44;
		public byte Name_45;
		public byte Name_46;
		public byte Name_47;
		public byte Name_48;
		public byte Name_49;
		public byte Name_50;
		public byte Name_51;
		public byte Name_52;
		public byte Name_53;
		public byte Name_54;
		public byte Name_55;
		public byte Name_56;
		public byte Name_57;
		public byte Name_58;
		public byte Name_59;
		public byte Name_60;
		public byte Name_61;
		public byte Name_62;
		public byte Name_63;
		public byte Name_64;
		public byte Name_65;
		public byte Name_66;
		public byte Name_67;
		public byte Name_68;
		public byte Name_69;
		public byte Name_70;
		public byte Name_71;
		public byte Name_72;
		public byte Name_73;
		public byte Name_74;
		public byte Name_75;
		public byte Name_76;
		public byte Name_77;
		public byte Name_78;
		public byte Name_79;
		public byte Name_80;
		public byte Name_81;
		public byte Name_82;
		public byte Name_83;
		public byte Name_84;
		public byte Name_85;
		public byte Name_86;
		public byte Name_87;
		public byte Name_88;
		public byte Name_89;
		public byte Name_90;
		public byte Name_91;
		public byte Name_92;
		public byte Name_93;
		public byte Name_94;
		public byte Name_95;
		public byte Name_96;
		public byte Name_97;
		public byte Name_98;
		public byte Name_99;
		public byte Name_100;
		public byte Name_101;
		public byte Name_102;
		public byte Name_103;
		public byte Name_104;
		public byte Name_105;
		public byte Name_106;
		public byte Name_107;
		public byte Name_108;
		public byte Name_109;
		public byte Name_110;
		public byte Name_111;
		public byte Name_112;
		public byte Name_113;
		public byte Name_114;
		public byte Name_115;
		public byte Name_116;
		public byte Name_117;
		public byte Name_118;
		public byte Name_119;
		public byte Name_120;
		public byte Name_121;
		public byte Name_122;
		public byte Name_123;
		public byte Name_124;
		public byte Name_125;
		public byte Name_126;
		public byte Name_127;
		public byte Name_128;
		public byte Name_129;
		public byte Name_130;
		public byte Name_131;
		public byte Name_132;
		public byte Name_133;
		public byte Name_134;
		public byte Name_135;
		public byte Name_136;
		public byte Name_137;
		public byte Name_138;
		public byte Name_139;
		public byte Name_140;
		public byte Name_141;
		public byte Name_142;
		public byte Name_143;
		public byte Name_144;
		public byte Name_145;
		public byte Name_146;
		public byte Name_147;
		public byte Name_148;
		public byte Name_149;
		public byte Name_150;
		public byte Name_151;
		public byte Name_152;
		public byte Name_153;
		public byte Name_154;
		public byte Name_155;
		public byte Name_156;
		public byte Name_157;
		public byte Name_158;
		public byte Name_159;
		public byte Name_160;
		public byte Name_161;
		public byte Name_162;
		public byte Name_163;
		public byte Name_164;
		public byte Name_165;
		public byte Name_166;
		public byte Name_167;
		public byte Name_168;
		public byte Name_169;
		public byte Name_170;
		public byte Name_171;
		public byte Name_172;
		public byte Name_173;
		public byte Name_174;
		public byte Name_175;
		public byte Name_176;
		public byte Name_177;
		public byte Name_178;
		public byte Name_179;
		public byte Name_180;
		public byte Name_181;
		public byte Name_182;
		public byte Name_183;
		public byte Name_184;
		public byte Name_185;
		public byte Name_186;
		public byte Name_187;
		public byte Name_188;
		public byte Name_189;
		public byte Name_190;
		public byte Name_191;
		public byte Name_192;
		public byte Name_193;
		public byte Name_194;
		public byte Name_195;
		public byte Name_196;
		public byte Name_197;
		public byte Name_198;
		public byte Name_199;
		public byte Name_200;
		public byte Name_201;
		public byte Name_202;
		public byte Name_203;
		public byte Name_204;
		public byte Name_205;
		public byte Name_206;
		public byte Name_207;
		public byte Name_208;
		public byte Name_209;
		public byte Name_210;
		public byte Name_211;
		public byte Name_212;
		public byte Name_213;
		public byte Name_214;
		public byte Name_215;
		public byte Name_216;
		public byte Name_217;
		public byte Name_218;
		public byte Name_219;
		public byte Name_220;
		public byte Name_221;
		public byte Name_222;
		public byte Name_223;
		public byte Name_224;
		public byte Name_225;
		public byte Name_226;
		public byte Name_227;
		public byte Name_228;
		public byte Name_229;
		public byte Name_230;
		public byte Name_231;
		public byte Name_232;
		public byte Name_233;
		public byte Name_234;
		public byte Name_235;
		public byte Name_236;
		public byte Name_237;
		public byte Name_238;
		public byte Name_239;
		public byte Name_240;
		public byte Name_241;
		public byte Name_242;
		public byte Name_243;
		public byte Name_244;
		public byte Name_245;
		public byte Name_246;
		public byte Name_247;
		public byte Name_248;
		public byte Name_249;
		public byte Name_250;
		public byte Name_251;
		public byte Name_252;
		public byte Name_253;
		public byte Name_254;
		public byte Name_255;
		[NativeName(NativeNameType.Field, "category")]
		[NativeName(NativeNameType.Type, "char[256]")]
		public byte Category_0;
		public byte Category_1;
		public byte Category_2;
		public byte Category_3;
		public byte Category_4;
		public byte Category_5;
		public byte Category_6;
		public byte Category_7;
		public byte Category_8;
		public byte Category_9;
		public byte Category_10;
		public byte Category_11;
		public byte Category_12;
		public byte Category_13;
		public byte Category_14;
		public byte Category_15;
		public byte Category_16;
		public byte Category_17;
		public byte Category_18;
		public byte Category_19;
		public byte Category_20;
		public byte Category_21;
		public byte Category_22;
		public byte Category_23;
		public byte Category_24;
		public byte Category_25;
		public byte Category_26;
		public byte Category_27;
		public byte Category_28;
		public byte Category_29;
		public byte Category_30;
		public byte Category_31;
		public byte Category_32;
		public byte Category_33;
		public byte Category_34;
		public byte Category_35;
		public byte Category_36;
		public byte Category_37;
		public byte Category_38;
		public byte Category_39;
		public byte Category_40;
		public byte Category_41;
		public byte Category_42;
		public byte Category_43;
		public byte Category_44;
		public byte Category_45;
		public byte Category_46;
		public byte Category_47;
		public byte Category_48;
		public byte Category_49;
		public byte Category_50;
		public byte Category_51;
		public byte Category_52;
		public byte Category_53;
		public byte Category_54;
		public byte Category_55;
		public byte Category_56;
		public byte Category_57;
		public byte Category_58;
		public byte Category_59;
		public byte Category_60;
		public byte Category_61;
		public byte Category_62;
		public byte Category_63;
		public byte Category_64;
		public byte Category_65;
		public byte Category_66;
		public byte Category_67;
		public byte Category_68;
		public byte Category_69;
		public byte Category_70;
		public byte Category_71;
		public byte Category_72;
		public byte Category_73;
		public byte Category_74;
		public byte Category_75;
		public byte Category_76;
		public byte Category_77;
		public byte Category_78;
		public byte Category_79;
		public byte Category_80;
		public byte Category_81;
		public byte Category_82;
		public byte Category_83;
		public byte Category_84;
		public byte Category_85;
		public byte Category_86;
		public byte Category_87;
		public byte Category_88;
		public byte Category_89;
		public byte Category_90;
		public byte Category_91;
		public byte Category_92;
		public byte Category_93;
		public byte Category_94;
		public byte Category_95;
		public byte Category_96;
		public byte Category_97;
		public byte Category_98;
		public byte Category_99;
		public byte Category_100;
		public byte Category_101;
		public byte Category_102;
		public byte Category_103;
		public byte Category_104;
		public byte Category_105;
		public byte Category_106;
		public byte Category_107;
		public byte Category_108;
		public byte Category_109;
		public byte Category_110;
		public byte Category_111;
		public byte Category_112;
		public byte Category_113;
		public byte Category_114;
		public byte Category_115;
		public byte Category_116;
		public byte Category_117;
		public byte Category_118;
		public byte Category_119;
		public byte Category_120;
		public byte Category_121;
		public byte Category_122;
		public byte Category_123;
		public byte Category_124;
		public byte Category_125;
		public byte Category_126;
		public byte Category_127;
		public byte Category_128;
		public byte Category_129;
		public byte Category_130;
		public byte Category_131;
		public byte Category_132;
		public byte Category_133;
		public byte Category_134;
		public byte Category_135;
		public byte Category_136;
		public byte Category_137;
		public byte Category_138;
		public byte Category_139;
		public byte Category_140;
		public byte Category_141;
		public byte Category_142;
		public byte Category_143;
		public byte Category_144;
		public byte Category_145;
		public byte Category_146;
		public byte Category_147;
		public byte Category_148;
		public byte Category_149;
		public byte Category_150;
		public byte Category_151;
		public byte Category_152;
		public byte Category_153;
		public byte Category_154;
		public byte Category_155;
		public byte Category_156;
		public byte Category_157;
		public byte Category_158;
		public byte Category_159;
		public byte Category_160;
		public byte Category_161;
		public byte Category_162;
		public byte Category_163;
		public byte Category_164;
		public byte Category_165;
		public byte Category_166;
		public byte Category_167;
		public byte Category_168;
		public byte Category_169;
		public byte Category_170;
		public byte Category_171;
		public byte Category_172;
		public byte Category_173;
		public byte Category_174;
		public byte Category_175;
		public byte Category_176;
		public byte Category_177;
		public byte Category_178;
		public byte Category_179;
		public byte Category_180;
		public byte Category_181;
		public byte Category_182;
		public byte Category_183;
		public byte Category_184;
		public byte Category_185;
		public byte Category_186;
		public byte Category_187;
		public byte Category_188;
		public byte Category_189;
		public byte Category_190;
		public byte Category_191;
		public byte Category_192;
		public byte Category_193;
		public byte Category_194;
		public byte Category_195;
		public byte Category_196;
		public byte Category_197;
		public byte Category_198;
		public byte Category_199;
		public byte Category_200;
		public byte Category_201;
		public byte Category_202;
		public byte Category_203;
		public byte Category_204;
		public byte Category_205;
		public byte Category_206;
		public byte Category_207;
		public byte Category_208;
		public byte Category_209;
		public byte Category_210;
		public byte Category_211;
		public byte Category_212;
		public byte Category_213;
		public byte Category_214;
		public byte Category_215;
		public byte Category_216;
		public byte Category_217;
		public byte Category_218;
		public byte Category_219;
		public byte Category_220;
		public byte Category_221;
		public byte Category_222;
		public byte Category_223;
		public byte Category_224;
		public byte Category_225;
		public byte Category_226;
		public byte Category_227;
		public byte Category_228;
		public byte Category_229;
		public byte Category_230;
		public byte Category_231;
		public byte Category_232;
		public byte Category_233;
		public byte Category_234;
		public byte Category_235;
		public byte Category_236;
		public byte Category_237;
		public byte Category_238;
		public byte Category_239;
		public byte Category_240;
		public byte Category_241;
		public byte Category_242;
		public byte Category_243;
		public byte Category_244;
		public byte Category_245;
		public byte Category_246;
		public byte Category_247;
		public byte Category_248;
		public byte Category_249;
		public byte Category_250;
		public byte Category_251;
		public byte Category_252;
		public byte Category_253;
		public byte Category_254;
		public byte Category_255;
		[NativeName(NativeNameType.Field, "description")]
		[NativeName(NativeNameType.Type, "char[256]")]
		public byte Description_0;
		public byte Description_1;
		public byte Description_2;
		public byte Description_3;
		public byte Description_4;
		public byte Description_5;
		public byte Description_6;
		public byte Description_7;
		public byte Description_8;
		public byte Description_9;
		public byte Description_10;
		public byte Description_11;
		public byte Description_12;
		public byte Description_13;
		public byte Description_14;
		public byte Description_15;
		public byte Description_16;
		public byte Description_17;
		public byte Description_18;
		public byte Description_19;
		public byte Description_20;
		public byte Description_21;
		public byte Description_22;
		public byte Description_23;
		public byte Description_24;
		public byte Description_25;
		public byte Description_26;
		public byte Description_27;
		public byte Description_28;
		public byte Description_29;
		public byte Description_30;
		public byte Description_31;
		public byte Description_32;
		public byte Description_33;
		public byte Description_34;
		public byte Description_35;
		public byte Description_36;
		public byte Description_37;
		public byte Description_38;
		public byte Description_39;
		public byte Description_40;
		public byte Description_41;
		public byte Description_42;
		public byte Description_43;
		public byte Description_44;
		public byte Description_45;
		public byte Description_46;
		public byte Description_47;
		public byte Description_48;
		public byte Description_49;
		public byte Description_50;
		public byte Description_51;
		public byte Description_52;
		public byte Description_53;
		public byte Description_54;
		public byte Description_55;
		public byte Description_56;
		public byte Description_57;
		public byte Description_58;
		public byte Description_59;
		public byte Description_60;
		public byte Description_61;
		public byte Description_62;
		public byte Description_63;
		public byte Description_64;
		public byte Description_65;
		public byte Description_66;
		public byte Description_67;
		public byte Description_68;
		public byte Description_69;
		public byte Description_70;
		public byte Description_71;
		public byte Description_72;
		public byte Description_73;
		public byte Description_74;
		public byte Description_75;
		public byte Description_76;
		public byte Description_77;
		public byte Description_78;
		public byte Description_79;
		public byte Description_80;
		public byte Description_81;
		public byte Description_82;
		public byte Description_83;
		public byte Description_84;
		public byte Description_85;
		public byte Description_86;
		public byte Description_87;
		public byte Description_88;
		public byte Description_89;
		public byte Description_90;
		public byte Description_91;
		public byte Description_92;
		public byte Description_93;
		public byte Description_94;
		public byte Description_95;
		public byte Description_96;
		public byte Description_97;
		public byte Description_98;
		public byte Description_99;
		public byte Description_100;
		public byte Description_101;
		public byte Description_102;
		public byte Description_103;
		public byte Description_104;
		public byte Description_105;
		public byte Description_106;
		public byte Description_107;
		public byte Description_108;
		public byte Description_109;
		public byte Description_110;
		public byte Description_111;
		public byte Description_112;
		public byte Description_113;
		public byte Description_114;
		public byte Description_115;
		public byte Description_116;
		public byte Description_117;
		public byte Description_118;
		public byte Description_119;
		public byte Description_120;
		public byte Description_121;
		public byte Description_122;
		public byte Description_123;
		public byte Description_124;
		public byte Description_125;
		public byte Description_126;
		public byte Description_127;
		public byte Description_128;
		public byte Description_129;
		public byte Description_130;
		public byte Description_131;
		public byte Description_132;
		public byte Description_133;
		public byte Description_134;
		public byte Description_135;
		public byte Description_136;
		public byte Description_137;
		public byte Description_138;
		public byte Description_139;
		public byte Description_140;
		public byte Description_141;
		public byte Description_142;
		public byte Description_143;
		public byte Description_144;
		public byte Description_145;
		public byte Description_146;
		public byte Description_147;
		public byte Description_148;
		public byte Description_149;
		public byte Description_150;
		public byte Description_151;
		public byte Description_152;
		public byte Description_153;
		public byte Description_154;
		public byte Description_155;
		public byte Description_156;
		public byte Description_157;
		public byte Description_158;
		public byte Description_159;
		public byte Description_160;
		public byte Description_161;
		public byte Description_162;
		public byte Description_163;
		public byte Description_164;
		public byte Description_165;
		public byte Description_166;
		public byte Description_167;
		public byte Description_168;
		public byte Description_169;
		public byte Description_170;
		public byte Description_171;
		public byte Description_172;
		public byte Description_173;
		public byte Description_174;
		public byte Description_175;
		public byte Description_176;
		public byte Description_177;
		public byte Description_178;
		public byte Description_179;
		public byte Description_180;
		public byte Description_181;
		public byte Description_182;
		public byte Description_183;
		public byte Description_184;
		public byte Description_185;
		public byte Description_186;
		public byte Description_187;
		public byte Description_188;
		public byte Description_189;
		public byte Description_190;
		public byte Description_191;
		public byte Description_192;
		public byte Description_193;
		public byte Description_194;
		public byte Description_195;
		public byte Description_196;
		public byte Description_197;
		public byte Description_198;
		public byte Description_199;
		public byte Description_200;
		public byte Description_201;
		public byte Description_202;
		public byte Description_203;
		public byte Description_204;
		public byte Description_205;
		public byte Description_206;
		public byte Description_207;
		public byte Description_208;
		public byte Description_209;
		public byte Description_210;
		public byte Description_211;
		public byte Description_212;
		public byte Description_213;
		public byte Description_214;
		public byte Description_215;
		public byte Description_216;
		public byte Description_217;
		public byte Description_218;
		public byte Description_219;
		public byte Description_220;
		public byte Description_221;
		public byte Description_222;
		public byte Description_223;
		public byte Description_224;
		public byte Description_225;
		public byte Description_226;
		public byte Description_227;
		public byte Description_228;
		public byte Description_229;
		public byte Description_230;
		public byte Description_231;
		public byte Description_232;
		public byte Description_233;
		public byte Description_234;
		public byte Description_235;
		public byte Description_236;
		public byte Description_237;
		public byte Description_238;
		public byte Description_239;
		public byte Description_240;
		public byte Description_241;
		public byte Description_242;
		public byte Description_243;
		public byte Description_244;
		public byte Description_245;
		public byte Description_246;
		public byte Description_247;
		public byte Description_248;
		public byte Description_249;
		public byte Description_250;
		public byte Description_251;
		public byte Description_252;
		public byte Description_253;
		public byte Description_254;
		public byte Description_255;

		public unsafe VkPerformanceCounterDescriptionKHR(VkStructureType sType = default, void* pNext = default, uint flags = default, byte* name = default, byte* category = default, byte* description = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			if (name != default)
			{
				Name_0 = name[0];
				Name_1 = name[1];
				Name_2 = name[2];
				Name_3 = name[3];
				Name_4 = name[4];
				Name_5 = name[5];
				Name_6 = name[6];
				Name_7 = name[7];
				Name_8 = name[8];
				Name_9 = name[9];
				Name_10 = name[10];
				Name_11 = name[11];
				Name_12 = name[12];
				Name_13 = name[13];
				Name_14 = name[14];
				Name_15 = name[15];
				Name_16 = name[16];
				Name_17 = name[17];
				Name_18 = name[18];
				Name_19 = name[19];
				Name_20 = name[20];
				Name_21 = name[21];
				Name_22 = name[22];
				Name_23 = name[23];
				Name_24 = name[24];
				Name_25 = name[25];
				Name_26 = name[26];
				Name_27 = name[27];
				Name_28 = name[28];
				Name_29 = name[29];
				Name_30 = name[30];
				Name_31 = name[31];
				Name_32 = name[32];
				Name_33 = name[33];
				Name_34 = name[34];
				Name_35 = name[35];
				Name_36 = name[36];
				Name_37 = name[37];
				Name_38 = name[38];
				Name_39 = name[39];
				Name_40 = name[40];
				Name_41 = name[41];
				Name_42 = name[42];
				Name_43 = name[43];
				Name_44 = name[44];
				Name_45 = name[45];
				Name_46 = name[46];
				Name_47 = name[47];
				Name_48 = name[48];
				Name_49 = name[49];
				Name_50 = name[50];
				Name_51 = name[51];
				Name_52 = name[52];
				Name_53 = name[53];
				Name_54 = name[54];
				Name_55 = name[55];
				Name_56 = name[56];
				Name_57 = name[57];
				Name_58 = name[58];
				Name_59 = name[59];
				Name_60 = name[60];
				Name_61 = name[61];
				Name_62 = name[62];
				Name_63 = name[63];
				Name_64 = name[64];
				Name_65 = name[65];
				Name_66 = name[66];
				Name_67 = name[67];
				Name_68 = name[68];
				Name_69 = name[69];
				Name_70 = name[70];
				Name_71 = name[71];
				Name_72 = name[72];
				Name_73 = name[73];
				Name_74 = name[74];
				Name_75 = name[75];
				Name_76 = name[76];
				Name_77 = name[77];
				Name_78 = name[78];
				Name_79 = name[79];
				Name_80 = name[80];
				Name_81 = name[81];
				Name_82 = name[82];
				Name_83 = name[83];
				Name_84 = name[84];
				Name_85 = name[85];
				Name_86 = name[86];
				Name_87 = name[87];
				Name_88 = name[88];
				Name_89 = name[89];
				Name_90 = name[90];
				Name_91 = name[91];
				Name_92 = name[92];
				Name_93 = name[93];
				Name_94 = name[94];
				Name_95 = name[95];
				Name_96 = name[96];
				Name_97 = name[97];
				Name_98 = name[98];
				Name_99 = name[99];
				Name_100 = name[100];
				Name_101 = name[101];
				Name_102 = name[102];
				Name_103 = name[103];
				Name_104 = name[104];
				Name_105 = name[105];
				Name_106 = name[106];
				Name_107 = name[107];
				Name_108 = name[108];
				Name_109 = name[109];
				Name_110 = name[110];
				Name_111 = name[111];
				Name_112 = name[112];
				Name_113 = name[113];
				Name_114 = name[114];
				Name_115 = name[115];
				Name_116 = name[116];
				Name_117 = name[117];
				Name_118 = name[118];
				Name_119 = name[119];
				Name_120 = name[120];
				Name_121 = name[121];
				Name_122 = name[122];
				Name_123 = name[123];
				Name_124 = name[124];
				Name_125 = name[125];
				Name_126 = name[126];
				Name_127 = name[127];
				Name_128 = name[128];
				Name_129 = name[129];
				Name_130 = name[130];
				Name_131 = name[131];
				Name_132 = name[132];
				Name_133 = name[133];
				Name_134 = name[134];
				Name_135 = name[135];
				Name_136 = name[136];
				Name_137 = name[137];
				Name_138 = name[138];
				Name_139 = name[139];
				Name_140 = name[140];
				Name_141 = name[141];
				Name_142 = name[142];
				Name_143 = name[143];
				Name_144 = name[144];
				Name_145 = name[145];
				Name_146 = name[146];
				Name_147 = name[147];
				Name_148 = name[148];
				Name_149 = name[149];
				Name_150 = name[150];
				Name_151 = name[151];
				Name_152 = name[152];
				Name_153 = name[153];
				Name_154 = name[154];
				Name_155 = name[155];
				Name_156 = name[156];
				Name_157 = name[157];
				Name_158 = name[158];
				Name_159 = name[159];
				Name_160 = name[160];
				Name_161 = name[161];
				Name_162 = name[162];
				Name_163 = name[163];
				Name_164 = name[164];
				Name_165 = name[165];
				Name_166 = name[166];
				Name_167 = name[167];
				Name_168 = name[168];
				Name_169 = name[169];
				Name_170 = name[170];
				Name_171 = name[171];
				Name_172 = name[172];
				Name_173 = name[173];
				Name_174 = name[174];
				Name_175 = name[175];
				Name_176 = name[176];
				Name_177 = name[177];
				Name_178 = name[178];
				Name_179 = name[179];
				Name_180 = name[180];
				Name_181 = name[181];
				Name_182 = name[182];
				Name_183 = name[183];
				Name_184 = name[184];
				Name_185 = name[185];
				Name_186 = name[186];
				Name_187 = name[187];
				Name_188 = name[188];
				Name_189 = name[189];
				Name_190 = name[190];
				Name_191 = name[191];
				Name_192 = name[192];
				Name_193 = name[193];
				Name_194 = name[194];
				Name_195 = name[195];
				Name_196 = name[196];
				Name_197 = name[197];
				Name_198 = name[198];
				Name_199 = name[199];
				Name_200 = name[200];
				Name_201 = name[201];
				Name_202 = name[202];
				Name_203 = name[203];
				Name_204 = name[204];
				Name_205 = name[205];
				Name_206 = name[206];
				Name_207 = name[207];
				Name_208 = name[208];
				Name_209 = name[209];
				Name_210 = name[210];
				Name_211 = name[211];
				Name_212 = name[212];
				Name_213 = name[213];
				Name_214 = name[214];
				Name_215 = name[215];
				Name_216 = name[216];
				Name_217 = name[217];
				Name_218 = name[218];
				Name_219 = name[219];
				Name_220 = name[220];
				Name_221 = name[221];
				Name_222 = name[222];
				Name_223 = name[223];
				Name_224 = name[224];
				Name_225 = name[225];
				Name_226 = name[226];
				Name_227 = name[227];
				Name_228 = name[228];
				Name_229 = name[229];
				Name_230 = name[230];
				Name_231 = name[231];
				Name_232 = name[232];
				Name_233 = name[233];
				Name_234 = name[234];
				Name_235 = name[235];
				Name_236 = name[236];
				Name_237 = name[237];
				Name_238 = name[238];
				Name_239 = name[239];
				Name_240 = name[240];
				Name_241 = name[241];
				Name_242 = name[242];
				Name_243 = name[243];
				Name_244 = name[244];
				Name_245 = name[245];
				Name_246 = name[246];
				Name_247 = name[247];
				Name_248 = name[248];
				Name_249 = name[249];
				Name_250 = name[250];
				Name_251 = name[251];
				Name_252 = name[252];
				Name_253 = name[253];
				Name_254 = name[254];
				Name_255 = name[255];
			}
			if (category != default)
			{
				Category_0 = category[0];
				Category_1 = category[1];
				Category_2 = category[2];
				Category_3 = category[3];
				Category_4 = category[4];
				Category_5 = category[5];
				Category_6 = category[6];
				Category_7 = category[7];
				Category_8 = category[8];
				Category_9 = category[9];
				Category_10 = category[10];
				Category_11 = category[11];
				Category_12 = category[12];
				Category_13 = category[13];
				Category_14 = category[14];
				Category_15 = category[15];
				Category_16 = category[16];
				Category_17 = category[17];
				Category_18 = category[18];
				Category_19 = category[19];
				Category_20 = category[20];
				Category_21 = category[21];
				Category_22 = category[22];
				Category_23 = category[23];
				Category_24 = category[24];
				Category_25 = category[25];
				Category_26 = category[26];
				Category_27 = category[27];
				Category_28 = category[28];
				Category_29 = category[29];
				Category_30 = category[30];
				Category_31 = category[31];
				Category_32 = category[32];
				Category_33 = category[33];
				Category_34 = category[34];
				Category_35 = category[35];
				Category_36 = category[36];
				Category_37 = category[37];
				Category_38 = category[38];
				Category_39 = category[39];
				Category_40 = category[40];
				Category_41 = category[41];
				Category_42 = category[42];
				Category_43 = category[43];
				Category_44 = category[44];
				Category_45 = category[45];
				Category_46 = category[46];
				Category_47 = category[47];
				Category_48 = category[48];
				Category_49 = category[49];
				Category_50 = category[50];
				Category_51 = category[51];
				Category_52 = category[52];
				Category_53 = category[53];
				Category_54 = category[54];
				Category_55 = category[55];
				Category_56 = category[56];
				Category_57 = category[57];
				Category_58 = category[58];
				Category_59 = category[59];
				Category_60 = category[60];
				Category_61 = category[61];
				Category_62 = category[62];
				Category_63 = category[63];
				Category_64 = category[64];
				Category_65 = category[65];
				Category_66 = category[66];
				Category_67 = category[67];
				Category_68 = category[68];
				Category_69 = category[69];
				Category_70 = category[70];
				Category_71 = category[71];
				Category_72 = category[72];
				Category_73 = category[73];
				Category_74 = category[74];
				Category_75 = category[75];
				Category_76 = category[76];
				Category_77 = category[77];
				Category_78 = category[78];
				Category_79 = category[79];
				Category_80 = category[80];
				Category_81 = category[81];
				Category_82 = category[82];
				Category_83 = category[83];
				Category_84 = category[84];
				Category_85 = category[85];
				Category_86 = category[86];
				Category_87 = category[87];
				Category_88 = category[88];
				Category_89 = category[89];
				Category_90 = category[90];
				Category_91 = category[91];
				Category_92 = category[92];
				Category_93 = category[93];
				Category_94 = category[94];
				Category_95 = category[95];
				Category_96 = category[96];
				Category_97 = category[97];
				Category_98 = category[98];
				Category_99 = category[99];
				Category_100 = category[100];
				Category_101 = category[101];
				Category_102 = category[102];
				Category_103 = category[103];
				Category_104 = category[104];
				Category_105 = category[105];
				Category_106 = category[106];
				Category_107 = category[107];
				Category_108 = category[108];
				Category_109 = category[109];
				Category_110 = category[110];
				Category_111 = category[111];
				Category_112 = category[112];
				Category_113 = category[113];
				Category_114 = category[114];
				Category_115 = category[115];
				Category_116 = category[116];
				Category_117 = category[117];
				Category_118 = category[118];
				Category_119 = category[119];
				Category_120 = category[120];
				Category_121 = category[121];
				Category_122 = category[122];
				Category_123 = category[123];
				Category_124 = category[124];
				Category_125 = category[125];
				Category_126 = category[126];
				Category_127 = category[127];
				Category_128 = category[128];
				Category_129 = category[129];
				Category_130 = category[130];
				Category_131 = category[131];
				Category_132 = category[132];
				Category_133 = category[133];
				Category_134 = category[134];
				Category_135 = category[135];
				Category_136 = category[136];
				Category_137 = category[137];
				Category_138 = category[138];
				Category_139 = category[139];
				Category_140 = category[140];
				Category_141 = category[141];
				Category_142 = category[142];
				Category_143 = category[143];
				Category_144 = category[144];
				Category_145 = category[145];
				Category_146 = category[146];
				Category_147 = category[147];
				Category_148 = category[148];
				Category_149 = category[149];
				Category_150 = category[150];
				Category_151 = category[151];
				Category_152 = category[152];
				Category_153 = category[153];
				Category_154 = category[154];
				Category_155 = category[155];
				Category_156 = category[156];
				Category_157 = category[157];
				Category_158 = category[158];
				Category_159 = category[159];
				Category_160 = category[160];
				Category_161 = category[161];
				Category_162 = category[162];
				Category_163 = category[163];
				Category_164 = category[164];
				Category_165 = category[165];
				Category_166 = category[166];
				Category_167 = category[167];
				Category_168 = category[168];
				Category_169 = category[169];
				Category_170 = category[170];
				Category_171 = category[171];
				Category_172 = category[172];
				Category_173 = category[173];
				Category_174 = category[174];
				Category_175 = category[175];
				Category_176 = category[176];
				Category_177 = category[177];
				Category_178 = category[178];
				Category_179 = category[179];
				Category_180 = category[180];
				Category_181 = category[181];
				Category_182 = category[182];
				Category_183 = category[183];
				Category_184 = category[184];
				Category_185 = category[185];
				Category_186 = category[186];
				Category_187 = category[187];
				Category_188 = category[188];
				Category_189 = category[189];
				Category_190 = category[190];
				Category_191 = category[191];
				Category_192 = category[192];
				Category_193 = category[193];
				Category_194 = category[194];
				Category_195 = category[195];
				Category_196 = category[196];
				Category_197 = category[197];
				Category_198 = category[198];
				Category_199 = category[199];
				Category_200 = category[200];
				Category_201 = category[201];
				Category_202 = category[202];
				Category_203 = category[203];
				Category_204 = category[204];
				Category_205 = category[205];
				Category_206 = category[206];
				Category_207 = category[207];
				Category_208 = category[208];
				Category_209 = category[209];
				Category_210 = category[210];
				Category_211 = category[211];
				Category_212 = category[212];
				Category_213 = category[213];
				Category_214 = category[214];
				Category_215 = category[215];
				Category_216 = category[216];
				Category_217 = category[217];
				Category_218 = category[218];
				Category_219 = category[219];
				Category_220 = category[220];
				Category_221 = category[221];
				Category_222 = category[222];
				Category_223 = category[223];
				Category_224 = category[224];
				Category_225 = category[225];
				Category_226 = category[226];
				Category_227 = category[227];
				Category_228 = category[228];
				Category_229 = category[229];
				Category_230 = category[230];
				Category_231 = category[231];
				Category_232 = category[232];
				Category_233 = category[233];
				Category_234 = category[234];
				Category_235 = category[235];
				Category_236 = category[236];
				Category_237 = category[237];
				Category_238 = category[238];
				Category_239 = category[239];
				Category_240 = category[240];
				Category_241 = category[241];
				Category_242 = category[242];
				Category_243 = category[243];
				Category_244 = category[244];
				Category_245 = category[245];
				Category_246 = category[246];
				Category_247 = category[247];
				Category_248 = category[248];
				Category_249 = category[249];
				Category_250 = category[250];
				Category_251 = category[251];
				Category_252 = category[252];
				Category_253 = category[253];
				Category_254 = category[254];
				Category_255 = category[255];
			}
			if (description != default)
			{
				Description_0 = description[0];
				Description_1 = description[1];
				Description_2 = description[2];
				Description_3 = description[3];
				Description_4 = description[4];
				Description_5 = description[5];
				Description_6 = description[6];
				Description_7 = description[7];
				Description_8 = description[8];
				Description_9 = description[9];
				Description_10 = description[10];
				Description_11 = description[11];
				Description_12 = description[12];
				Description_13 = description[13];
				Description_14 = description[14];
				Description_15 = description[15];
				Description_16 = description[16];
				Description_17 = description[17];
				Description_18 = description[18];
				Description_19 = description[19];
				Description_20 = description[20];
				Description_21 = description[21];
				Description_22 = description[22];
				Description_23 = description[23];
				Description_24 = description[24];
				Description_25 = description[25];
				Description_26 = description[26];
				Description_27 = description[27];
				Description_28 = description[28];
				Description_29 = description[29];
				Description_30 = description[30];
				Description_31 = description[31];
				Description_32 = description[32];
				Description_33 = description[33];
				Description_34 = description[34];
				Description_35 = description[35];
				Description_36 = description[36];
				Description_37 = description[37];
				Description_38 = description[38];
				Description_39 = description[39];
				Description_40 = description[40];
				Description_41 = description[41];
				Description_42 = description[42];
				Description_43 = description[43];
				Description_44 = description[44];
				Description_45 = description[45];
				Description_46 = description[46];
				Description_47 = description[47];
				Description_48 = description[48];
				Description_49 = description[49];
				Description_50 = description[50];
				Description_51 = description[51];
				Description_52 = description[52];
				Description_53 = description[53];
				Description_54 = description[54];
				Description_55 = description[55];
				Description_56 = description[56];
				Description_57 = description[57];
				Description_58 = description[58];
				Description_59 = description[59];
				Description_60 = description[60];
				Description_61 = description[61];
				Description_62 = description[62];
				Description_63 = description[63];
				Description_64 = description[64];
				Description_65 = description[65];
				Description_66 = description[66];
				Description_67 = description[67];
				Description_68 = description[68];
				Description_69 = description[69];
				Description_70 = description[70];
				Description_71 = description[71];
				Description_72 = description[72];
				Description_73 = description[73];
				Description_74 = description[74];
				Description_75 = description[75];
				Description_76 = description[76];
				Description_77 = description[77];
				Description_78 = description[78];
				Description_79 = description[79];
				Description_80 = description[80];
				Description_81 = description[81];
				Description_82 = description[82];
				Description_83 = description[83];
				Description_84 = description[84];
				Description_85 = description[85];
				Description_86 = description[86];
				Description_87 = description[87];
				Description_88 = description[88];
				Description_89 = description[89];
				Description_90 = description[90];
				Description_91 = description[91];
				Description_92 = description[92];
				Description_93 = description[93];
				Description_94 = description[94];
				Description_95 = description[95];
				Description_96 = description[96];
				Description_97 = description[97];
				Description_98 = description[98];
				Description_99 = description[99];
				Description_100 = description[100];
				Description_101 = description[101];
				Description_102 = description[102];
				Description_103 = description[103];
				Description_104 = description[104];
				Description_105 = description[105];
				Description_106 = description[106];
				Description_107 = description[107];
				Description_108 = description[108];
				Description_109 = description[109];
				Description_110 = description[110];
				Description_111 = description[111];
				Description_112 = description[112];
				Description_113 = description[113];
				Description_114 = description[114];
				Description_115 = description[115];
				Description_116 = description[116];
				Description_117 = description[117];
				Description_118 = description[118];
				Description_119 = description[119];
				Description_120 = description[120];
				Description_121 = description[121];
				Description_122 = description[122];
				Description_123 = description[123];
				Description_124 = description[124];
				Description_125 = description[125];
				Description_126 = description[126];
				Description_127 = description[127];
				Description_128 = description[128];
				Description_129 = description[129];
				Description_130 = description[130];
				Description_131 = description[131];
				Description_132 = description[132];
				Description_133 = description[133];
				Description_134 = description[134];
				Description_135 = description[135];
				Description_136 = description[136];
				Description_137 = description[137];
				Description_138 = description[138];
				Description_139 = description[139];
				Description_140 = description[140];
				Description_141 = description[141];
				Description_142 = description[142];
				Description_143 = description[143];
				Description_144 = description[144];
				Description_145 = description[145];
				Description_146 = description[146];
				Description_147 = description[147];
				Description_148 = description[148];
				Description_149 = description[149];
				Description_150 = description[150];
				Description_151 = description[151];
				Description_152 = description[152];
				Description_153 = description[153];
				Description_154 = description[154];
				Description_155 = description[155];
				Description_156 = description[156];
				Description_157 = description[157];
				Description_158 = description[158];
				Description_159 = description[159];
				Description_160 = description[160];
				Description_161 = description[161];
				Description_162 = description[162];
				Description_163 = description[163];
				Description_164 = description[164];
				Description_165 = description[165];
				Description_166 = description[166];
				Description_167 = description[167];
				Description_168 = description[168];
				Description_169 = description[169];
				Description_170 = description[170];
				Description_171 = description[171];
				Description_172 = description[172];
				Description_173 = description[173];
				Description_174 = description[174];
				Description_175 = description[175];
				Description_176 = description[176];
				Description_177 = description[177];
				Description_178 = description[178];
				Description_179 = description[179];
				Description_180 = description[180];
				Description_181 = description[181];
				Description_182 = description[182];
				Description_183 = description[183];
				Description_184 = description[184];
				Description_185 = description[185];
				Description_186 = description[186];
				Description_187 = description[187];
				Description_188 = description[188];
				Description_189 = description[189];
				Description_190 = description[190];
				Description_191 = description[191];
				Description_192 = description[192];
				Description_193 = description[193];
				Description_194 = description[194];
				Description_195 = description[195];
				Description_196 = description[196];
				Description_197 = description[197];
				Description_198 = description[198];
				Description_199 = description[199];
				Description_200 = description[200];
				Description_201 = description[201];
				Description_202 = description[202];
				Description_203 = description[203];
				Description_204 = description[204];
				Description_205 = description[205];
				Description_206 = description[206];
				Description_207 = description[207];
				Description_208 = description[208];
				Description_209 = description[209];
				Description_210 = description[210];
				Description_211 = description[211];
				Description_212 = description[212];
				Description_213 = description[213];
				Description_214 = description[214];
				Description_215 = description[215];
				Description_216 = description[216];
				Description_217 = description[217];
				Description_218 = description[218];
				Description_219 = description[219];
				Description_220 = description[220];
				Description_221 = description[221];
				Description_222 = description[222];
				Description_223 = description[223];
				Description_224 = description[224];
				Description_225 = description[225];
				Description_226 = description[226];
				Description_227 = description[227];
				Description_228 = description[228];
				Description_229 = description[229];
				Description_230 = description[230];
				Description_231 = description[231];
				Description_232 = description[232];
				Description_233 = description[233];
				Description_234 = description[234];
				Description_235 = description[235];
				Description_236 = description[236];
				Description_237 = description[237];
				Description_238 = description[238];
				Description_239 = description[239];
				Description_240 = description[240];
				Description_241 = description[241];
				Description_242 = description[242];
				Description_243 = description[243];
				Description_244 = description[244];
				Description_245 = description[245];
				Description_246 = description[246];
				Description_247 = description[247];
				Description_248 = description[248];
				Description_249 = description[249];
				Description_250 = description[250];
				Description_251 = description[251];
				Description_252 = description[252];
				Description_253 = description[253];
				Description_254 = description[254];
				Description_255 = description[255];
			}
		}

		public unsafe VkPerformanceCounterDescriptionKHR(VkStructureType sType = default, void* pNext = default, uint flags = default, Span<byte> name = default, Span<byte> category = default, Span<byte> description = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			if (name != default)
			{
				Name_0 = name[0];
				Name_1 = name[1];
				Name_2 = name[2];
				Name_3 = name[3];
				Name_4 = name[4];
				Name_5 = name[5];
				Name_6 = name[6];
				Name_7 = name[7];
				Name_8 = name[8];
				Name_9 = name[9];
				Name_10 = name[10];
				Name_11 = name[11];
				Name_12 = name[12];
				Name_13 = name[13];
				Name_14 = name[14];
				Name_15 = name[15];
				Name_16 = name[16];
				Name_17 = name[17];
				Name_18 = name[18];
				Name_19 = name[19];
				Name_20 = name[20];
				Name_21 = name[21];
				Name_22 = name[22];
				Name_23 = name[23];
				Name_24 = name[24];
				Name_25 = name[25];
				Name_26 = name[26];
				Name_27 = name[27];
				Name_28 = name[28];
				Name_29 = name[29];
				Name_30 = name[30];
				Name_31 = name[31];
				Name_32 = name[32];
				Name_33 = name[33];
				Name_34 = name[34];
				Name_35 = name[35];
				Name_36 = name[36];
				Name_37 = name[37];
				Name_38 = name[38];
				Name_39 = name[39];
				Name_40 = name[40];
				Name_41 = name[41];
				Name_42 = name[42];
				Name_43 = name[43];
				Name_44 = name[44];
				Name_45 = name[45];
				Name_46 = name[46];
				Name_47 = name[47];
				Name_48 = name[48];
				Name_49 = name[49];
				Name_50 = name[50];
				Name_51 = name[51];
				Name_52 = name[52];
				Name_53 = name[53];
				Name_54 = name[54];
				Name_55 = name[55];
				Name_56 = name[56];
				Name_57 = name[57];
				Name_58 = name[58];
				Name_59 = name[59];
				Name_60 = name[60];
				Name_61 = name[61];
				Name_62 = name[62];
				Name_63 = name[63];
				Name_64 = name[64];
				Name_65 = name[65];
				Name_66 = name[66];
				Name_67 = name[67];
				Name_68 = name[68];
				Name_69 = name[69];
				Name_70 = name[70];
				Name_71 = name[71];
				Name_72 = name[72];
				Name_73 = name[73];
				Name_74 = name[74];
				Name_75 = name[75];
				Name_76 = name[76];
				Name_77 = name[77];
				Name_78 = name[78];
				Name_79 = name[79];
				Name_80 = name[80];
				Name_81 = name[81];
				Name_82 = name[82];
				Name_83 = name[83];
				Name_84 = name[84];
				Name_85 = name[85];
				Name_86 = name[86];
				Name_87 = name[87];
				Name_88 = name[88];
				Name_89 = name[89];
				Name_90 = name[90];
				Name_91 = name[91];
				Name_92 = name[92];
				Name_93 = name[93];
				Name_94 = name[94];
				Name_95 = name[95];
				Name_96 = name[96];
				Name_97 = name[97];
				Name_98 = name[98];
				Name_99 = name[99];
				Name_100 = name[100];
				Name_101 = name[101];
				Name_102 = name[102];
				Name_103 = name[103];
				Name_104 = name[104];
				Name_105 = name[105];
				Name_106 = name[106];
				Name_107 = name[107];
				Name_108 = name[108];
				Name_109 = name[109];
				Name_110 = name[110];
				Name_111 = name[111];
				Name_112 = name[112];
				Name_113 = name[113];
				Name_114 = name[114];
				Name_115 = name[115];
				Name_116 = name[116];
				Name_117 = name[117];
				Name_118 = name[118];
				Name_119 = name[119];
				Name_120 = name[120];
				Name_121 = name[121];
				Name_122 = name[122];
				Name_123 = name[123];
				Name_124 = name[124];
				Name_125 = name[125];
				Name_126 = name[126];
				Name_127 = name[127];
				Name_128 = name[128];
				Name_129 = name[129];
				Name_130 = name[130];
				Name_131 = name[131];
				Name_132 = name[132];
				Name_133 = name[133];
				Name_134 = name[134];
				Name_135 = name[135];
				Name_136 = name[136];
				Name_137 = name[137];
				Name_138 = name[138];
				Name_139 = name[139];
				Name_140 = name[140];
				Name_141 = name[141];
				Name_142 = name[142];
				Name_143 = name[143];
				Name_144 = name[144];
				Name_145 = name[145];
				Name_146 = name[146];
				Name_147 = name[147];
				Name_148 = name[148];
				Name_149 = name[149];
				Name_150 = name[150];
				Name_151 = name[151];
				Name_152 = name[152];
				Name_153 = name[153];
				Name_154 = name[154];
				Name_155 = name[155];
				Name_156 = name[156];
				Name_157 = name[157];
				Name_158 = name[158];
				Name_159 = name[159];
				Name_160 = name[160];
				Name_161 = name[161];
				Name_162 = name[162];
				Name_163 = name[163];
				Name_164 = name[164];
				Name_165 = name[165];
				Name_166 = name[166];
				Name_167 = name[167];
				Name_168 = name[168];
				Name_169 = name[169];
				Name_170 = name[170];
				Name_171 = name[171];
				Name_172 = name[172];
				Name_173 = name[173];
				Name_174 = name[174];
				Name_175 = name[175];
				Name_176 = name[176];
				Name_177 = name[177];
				Name_178 = name[178];
				Name_179 = name[179];
				Name_180 = name[180];
				Name_181 = name[181];
				Name_182 = name[182];
				Name_183 = name[183];
				Name_184 = name[184];
				Name_185 = name[185];
				Name_186 = name[186];
				Name_187 = name[187];
				Name_188 = name[188];
				Name_189 = name[189];
				Name_190 = name[190];
				Name_191 = name[191];
				Name_192 = name[192];
				Name_193 = name[193];
				Name_194 = name[194];
				Name_195 = name[195];
				Name_196 = name[196];
				Name_197 = name[197];
				Name_198 = name[198];
				Name_199 = name[199];
				Name_200 = name[200];
				Name_201 = name[201];
				Name_202 = name[202];
				Name_203 = name[203];
				Name_204 = name[204];
				Name_205 = name[205];
				Name_206 = name[206];
				Name_207 = name[207];
				Name_208 = name[208];
				Name_209 = name[209];
				Name_210 = name[210];
				Name_211 = name[211];
				Name_212 = name[212];
				Name_213 = name[213];
				Name_214 = name[214];
				Name_215 = name[215];
				Name_216 = name[216];
				Name_217 = name[217];
				Name_218 = name[218];
				Name_219 = name[219];
				Name_220 = name[220];
				Name_221 = name[221];
				Name_222 = name[222];
				Name_223 = name[223];
				Name_224 = name[224];
				Name_225 = name[225];
				Name_226 = name[226];
				Name_227 = name[227];
				Name_228 = name[228];
				Name_229 = name[229];
				Name_230 = name[230];
				Name_231 = name[231];
				Name_232 = name[232];
				Name_233 = name[233];
				Name_234 = name[234];
				Name_235 = name[235];
				Name_236 = name[236];
				Name_237 = name[237];
				Name_238 = name[238];
				Name_239 = name[239];
				Name_240 = name[240];
				Name_241 = name[241];
				Name_242 = name[242];
				Name_243 = name[243];
				Name_244 = name[244];
				Name_245 = name[245];
				Name_246 = name[246];
				Name_247 = name[247];
				Name_248 = name[248];
				Name_249 = name[249];
				Name_250 = name[250];
				Name_251 = name[251];
				Name_252 = name[252];
				Name_253 = name[253];
				Name_254 = name[254];
				Name_255 = name[255];
			}
			if (category != default)
			{
				Category_0 = category[0];
				Category_1 = category[1];
				Category_2 = category[2];
				Category_3 = category[3];
				Category_4 = category[4];
				Category_5 = category[5];
				Category_6 = category[6];
				Category_7 = category[7];
				Category_8 = category[8];
				Category_9 = category[9];
				Category_10 = category[10];
				Category_11 = category[11];
				Category_12 = category[12];
				Category_13 = category[13];
				Category_14 = category[14];
				Category_15 = category[15];
				Category_16 = category[16];
				Category_17 = category[17];
				Category_18 = category[18];
				Category_19 = category[19];
				Category_20 = category[20];
				Category_21 = category[21];
				Category_22 = category[22];
				Category_23 = category[23];
				Category_24 = category[24];
				Category_25 = category[25];
				Category_26 = category[26];
				Category_27 = category[27];
				Category_28 = category[28];
				Category_29 = category[29];
				Category_30 = category[30];
				Category_31 = category[31];
				Category_32 = category[32];
				Category_33 = category[33];
				Category_34 = category[34];
				Category_35 = category[35];
				Category_36 = category[36];
				Category_37 = category[37];
				Category_38 = category[38];
				Category_39 = category[39];
				Category_40 = category[40];
				Category_41 = category[41];
				Category_42 = category[42];
				Category_43 = category[43];
				Category_44 = category[44];
				Category_45 = category[45];
				Category_46 = category[46];
				Category_47 = category[47];
				Category_48 = category[48];
				Category_49 = category[49];
				Category_50 = category[50];
				Category_51 = category[51];
				Category_52 = category[52];
				Category_53 = category[53];
				Category_54 = category[54];
				Category_55 = category[55];
				Category_56 = category[56];
				Category_57 = category[57];
				Category_58 = category[58];
				Category_59 = category[59];
				Category_60 = category[60];
				Category_61 = category[61];
				Category_62 = category[62];
				Category_63 = category[63];
				Category_64 = category[64];
				Category_65 = category[65];
				Category_66 = category[66];
				Category_67 = category[67];
				Category_68 = category[68];
				Category_69 = category[69];
				Category_70 = category[70];
				Category_71 = category[71];
				Category_72 = category[72];
				Category_73 = category[73];
				Category_74 = category[74];
				Category_75 = category[75];
				Category_76 = category[76];
				Category_77 = category[77];
				Category_78 = category[78];
				Category_79 = category[79];
				Category_80 = category[80];
				Category_81 = category[81];
				Category_82 = category[82];
				Category_83 = category[83];
				Category_84 = category[84];
				Category_85 = category[85];
				Category_86 = category[86];
				Category_87 = category[87];
				Category_88 = category[88];
				Category_89 = category[89];
				Category_90 = category[90];
				Category_91 = category[91];
				Category_92 = category[92];
				Category_93 = category[93];
				Category_94 = category[94];
				Category_95 = category[95];
				Category_96 = category[96];
				Category_97 = category[97];
				Category_98 = category[98];
				Category_99 = category[99];
				Category_100 = category[100];
				Category_101 = category[101];
				Category_102 = category[102];
				Category_103 = category[103];
				Category_104 = category[104];
				Category_105 = category[105];
				Category_106 = category[106];
				Category_107 = category[107];
				Category_108 = category[108];
				Category_109 = category[109];
				Category_110 = category[110];
				Category_111 = category[111];
				Category_112 = category[112];
				Category_113 = category[113];
				Category_114 = category[114];
				Category_115 = category[115];
				Category_116 = category[116];
				Category_117 = category[117];
				Category_118 = category[118];
				Category_119 = category[119];
				Category_120 = category[120];
				Category_121 = category[121];
				Category_122 = category[122];
				Category_123 = category[123];
				Category_124 = category[124];
				Category_125 = category[125];
				Category_126 = category[126];
				Category_127 = category[127];
				Category_128 = category[128];
				Category_129 = category[129];
				Category_130 = category[130];
				Category_131 = category[131];
				Category_132 = category[132];
				Category_133 = category[133];
				Category_134 = category[134];
				Category_135 = category[135];
				Category_136 = category[136];
				Category_137 = category[137];
				Category_138 = category[138];
				Category_139 = category[139];
				Category_140 = category[140];
				Category_141 = category[141];
				Category_142 = category[142];
				Category_143 = category[143];
				Category_144 = category[144];
				Category_145 = category[145];
				Category_146 = category[146];
				Category_147 = category[147];
				Category_148 = category[148];
				Category_149 = category[149];
				Category_150 = category[150];
				Category_151 = category[151];
				Category_152 = category[152];
				Category_153 = category[153];
				Category_154 = category[154];
				Category_155 = category[155];
				Category_156 = category[156];
				Category_157 = category[157];
				Category_158 = category[158];
				Category_159 = category[159];
				Category_160 = category[160];
				Category_161 = category[161];
				Category_162 = category[162];
				Category_163 = category[163];
				Category_164 = category[164];
				Category_165 = category[165];
				Category_166 = category[166];
				Category_167 = category[167];
				Category_168 = category[168];
				Category_169 = category[169];
				Category_170 = category[170];
				Category_171 = category[171];
				Category_172 = category[172];
				Category_173 = category[173];
				Category_174 = category[174];
				Category_175 = category[175];
				Category_176 = category[176];
				Category_177 = category[177];
				Category_178 = category[178];
				Category_179 = category[179];
				Category_180 = category[180];
				Category_181 = category[181];
				Category_182 = category[182];
				Category_183 = category[183];
				Category_184 = category[184];
				Category_185 = category[185];
				Category_186 = category[186];
				Category_187 = category[187];
				Category_188 = category[188];
				Category_189 = category[189];
				Category_190 = category[190];
				Category_191 = category[191];
				Category_192 = category[192];
				Category_193 = category[193];
				Category_194 = category[194];
				Category_195 = category[195];
				Category_196 = category[196];
				Category_197 = category[197];
				Category_198 = category[198];
				Category_199 = category[199];
				Category_200 = category[200];
				Category_201 = category[201];
				Category_202 = category[202];
				Category_203 = category[203];
				Category_204 = category[204];
				Category_205 = category[205];
				Category_206 = category[206];
				Category_207 = category[207];
				Category_208 = category[208];
				Category_209 = category[209];
				Category_210 = category[210];
				Category_211 = category[211];
				Category_212 = category[212];
				Category_213 = category[213];
				Category_214 = category[214];
				Category_215 = category[215];
				Category_216 = category[216];
				Category_217 = category[217];
				Category_218 = category[218];
				Category_219 = category[219];
				Category_220 = category[220];
				Category_221 = category[221];
				Category_222 = category[222];
				Category_223 = category[223];
				Category_224 = category[224];
				Category_225 = category[225];
				Category_226 = category[226];
				Category_227 = category[227];
				Category_228 = category[228];
				Category_229 = category[229];
				Category_230 = category[230];
				Category_231 = category[231];
				Category_232 = category[232];
				Category_233 = category[233];
				Category_234 = category[234];
				Category_235 = category[235];
				Category_236 = category[236];
				Category_237 = category[237];
				Category_238 = category[238];
				Category_239 = category[239];
				Category_240 = category[240];
				Category_241 = category[241];
				Category_242 = category[242];
				Category_243 = category[243];
				Category_244 = category[244];
				Category_245 = category[245];
				Category_246 = category[246];
				Category_247 = category[247];
				Category_248 = category[248];
				Category_249 = category[249];
				Category_250 = category[250];
				Category_251 = category[251];
				Category_252 = category[252];
				Category_253 = category[253];
				Category_254 = category[254];
				Category_255 = category[255];
			}
			if (description != default)
			{
				Description_0 = description[0];
				Description_1 = description[1];
				Description_2 = description[2];
				Description_3 = description[3];
				Description_4 = description[4];
				Description_5 = description[5];
				Description_6 = description[6];
				Description_7 = description[7];
				Description_8 = description[8];
				Description_9 = description[9];
				Description_10 = description[10];
				Description_11 = description[11];
				Description_12 = description[12];
				Description_13 = description[13];
				Description_14 = description[14];
				Description_15 = description[15];
				Description_16 = description[16];
				Description_17 = description[17];
				Description_18 = description[18];
				Description_19 = description[19];
				Description_20 = description[20];
				Description_21 = description[21];
				Description_22 = description[22];
				Description_23 = description[23];
				Description_24 = description[24];
				Description_25 = description[25];
				Description_26 = description[26];
				Description_27 = description[27];
				Description_28 = description[28];
				Description_29 = description[29];
				Description_30 = description[30];
				Description_31 = description[31];
				Description_32 = description[32];
				Description_33 = description[33];
				Description_34 = description[34];
				Description_35 = description[35];
				Description_36 = description[36];
				Description_37 = description[37];
				Description_38 = description[38];
				Description_39 = description[39];
				Description_40 = description[40];
				Description_41 = description[41];
				Description_42 = description[42];
				Description_43 = description[43];
				Description_44 = description[44];
				Description_45 = description[45];
				Description_46 = description[46];
				Description_47 = description[47];
				Description_48 = description[48];
				Description_49 = description[49];
				Description_50 = description[50];
				Description_51 = description[51];
				Description_52 = description[52];
				Description_53 = description[53];
				Description_54 = description[54];
				Description_55 = description[55];
				Description_56 = description[56];
				Description_57 = description[57];
				Description_58 = description[58];
				Description_59 = description[59];
				Description_60 = description[60];
				Description_61 = description[61];
				Description_62 = description[62];
				Description_63 = description[63];
				Description_64 = description[64];
				Description_65 = description[65];
				Description_66 = description[66];
				Description_67 = description[67];
				Description_68 = description[68];
				Description_69 = description[69];
				Description_70 = description[70];
				Description_71 = description[71];
				Description_72 = description[72];
				Description_73 = description[73];
				Description_74 = description[74];
				Description_75 = description[75];
				Description_76 = description[76];
				Description_77 = description[77];
				Description_78 = description[78];
				Description_79 = description[79];
				Description_80 = description[80];
				Description_81 = description[81];
				Description_82 = description[82];
				Description_83 = description[83];
				Description_84 = description[84];
				Description_85 = description[85];
				Description_86 = description[86];
				Description_87 = description[87];
				Description_88 = description[88];
				Description_89 = description[89];
				Description_90 = description[90];
				Description_91 = description[91];
				Description_92 = description[92];
				Description_93 = description[93];
				Description_94 = description[94];
				Description_95 = description[95];
				Description_96 = description[96];
				Description_97 = description[97];
				Description_98 = description[98];
				Description_99 = description[99];
				Description_100 = description[100];
				Description_101 = description[101];
				Description_102 = description[102];
				Description_103 = description[103];
				Description_104 = description[104];
				Description_105 = description[105];
				Description_106 = description[106];
				Description_107 = description[107];
				Description_108 = description[108];
				Description_109 = description[109];
				Description_110 = description[110];
				Description_111 = description[111];
				Description_112 = description[112];
				Description_113 = description[113];
				Description_114 = description[114];
				Description_115 = description[115];
				Description_116 = description[116];
				Description_117 = description[117];
				Description_118 = description[118];
				Description_119 = description[119];
				Description_120 = description[120];
				Description_121 = description[121];
				Description_122 = description[122];
				Description_123 = description[123];
				Description_124 = description[124];
				Description_125 = description[125];
				Description_126 = description[126];
				Description_127 = description[127];
				Description_128 = description[128];
				Description_129 = description[129];
				Description_130 = description[130];
				Description_131 = description[131];
				Description_132 = description[132];
				Description_133 = description[133];
				Description_134 = description[134];
				Description_135 = description[135];
				Description_136 = description[136];
				Description_137 = description[137];
				Description_138 = description[138];
				Description_139 = description[139];
				Description_140 = description[140];
				Description_141 = description[141];
				Description_142 = description[142];
				Description_143 = description[143];
				Description_144 = description[144];
				Description_145 = description[145];
				Description_146 = description[146];
				Description_147 = description[147];
				Description_148 = description[148];
				Description_149 = description[149];
				Description_150 = description[150];
				Description_151 = description[151];
				Description_152 = description[152];
				Description_153 = description[153];
				Description_154 = description[154];
				Description_155 = description[155];
				Description_156 = description[156];
				Description_157 = description[157];
				Description_158 = description[158];
				Description_159 = description[159];
				Description_160 = description[160];
				Description_161 = description[161];
				Description_162 = description[162];
				Description_163 = description[163];
				Description_164 = description[164];
				Description_165 = description[165];
				Description_166 = description[166];
				Description_167 = description[167];
				Description_168 = description[168];
				Description_169 = description[169];
				Description_170 = description[170];
				Description_171 = description[171];
				Description_172 = description[172];
				Description_173 = description[173];
				Description_174 = description[174];
				Description_175 = description[175];
				Description_176 = description[176];
				Description_177 = description[177];
				Description_178 = description[178];
				Description_179 = description[179];
				Description_180 = description[180];
				Description_181 = description[181];
				Description_182 = description[182];
				Description_183 = description[183];
				Description_184 = description[184];
				Description_185 = description[185];
				Description_186 = description[186];
				Description_187 = description[187];
				Description_188 = description[188];
				Description_189 = description[189];
				Description_190 = description[190];
				Description_191 = description[191];
				Description_192 = description[192];
				Description_193 = description[193];
				Description_194 = description[194];
				Description_195 = description[195];
				Description_196 = description[196];
				Description_197 = description[197];
				Description_198 = description[198];
				Description_199 = description[199];
				Description_200 = description[200];
				Description_201 = description[201];
				Description_202 = description[202];
				Description_203 = description[203];
				Description_204 = description[204];
				Description_205 = description[205];
				Description_206 = description[206];
				Description_207 = description[207];
				Description_208 = description[208];
				Description_209 = description[209];
				Description_210 = description[210];
				Description_211 = description[211];
				Description_212 = description[212];
				Description_213 = description[213];
				Description_214 = description[214];
				Description_215 = description[215];
				Description_216 = description[216];
				Description_217 = description[217];
				Description_218 = description[218];
				Description_219 = description[219];
				Description_220 = description[220];
				Description_221 = description[221];
				Description_222 = description[222];
				Description_223 = description[223];
				Description_224 = description[224];
				Description_225 = description[225];
				Description_226 = description[226];
				Description_227 = description[227];
				Description_228 = description[228];
				Description_229 = description[229];
				Description_230 = description[230];
				Description_231 = description[231];
				Description_232 = description[232];
				Description_233 = description[233];
				Description_234 = description[234];
				Description_235 = description[235];
				Description_236 = description[236];
				Description_237 = description[237];
				Description_238 = description[238];
				Description_239 = description[239];
				Description_240 = description[240];
				Description_241 = description[241];
				Description_242 = description[242];
				Description_243 = description[243];
				Description_244 = description[244];
				Description_245 = description[245];
				Description_246 = description[246];
				Description_247 = description[247];
				Description_248 = description[248];
				Description_249 = description[249];
				Description_250 = description[250];
				Description_251 = description[251];
				Description_252 = description[252];
				Description_253 = description[253];
				Description_254 = description[254];
				Description_255 = description[255];
			}
		}


	}
}
