// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.Vulkan
{

	[NativeName(NativeNameType.StructOrClass, "VkDeviceFaultVendorBinaryHeaderVersionOneEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDeviceFaultVendorBinaryHeaderVersionOneEXT
	{
		[NativeName(NativeNameType.Field, "headerSize")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint HeaderSize;
		[NativeName(NativeNameType.Field, "headerVersion")]
		[NativeName(NativeNameType.Type, "VkDeviceFaultVendorBinaryHeaderVersionEXT")]
		public VkDeviceFaultVendorBinaryHeaderVersionEXT HeaderVersion;
		[NativeName(NativeNameType.Field, "vendorID")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VendorID;
		[NativeName(NativeNameType.Field, "deviceID")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeviceID;
		[NativeName(NativeNameType.Field, "driverVersion")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DriverVersion;
		[NativeName(NativeNameType.Field, "pipelineCacheUUID")]
		[NativeName(NativeNameType.Type, "uint8_t[16]")]
		public byte PipelineCacheUUID_0;
		public byte PipelineCacheUUID_1;
		public byte PipelineCacheUUID_2;
		public byte PipelineCacheUUID_3;
		public byte PipelineCacheUUID_4;
		public byte PipelineCacheUUID_5;
		public byte PipelineCacheUUID_6;
		public byte PipelineCacheUUID_7;
		public byte PipelineCacheUUID_8;
		public byte PipelineCacheUUID_9;
		public byte PipelineCacheUUID_10;
		public byte PipelineCacheUUID_11;
		public byte PipelineCacheUUID_12;
		public byte PipelineCacheUUID_13;
		public byte PipelineCacheUUID_14;
		public byte PipelineCacheUUID_15;
		[NativeName(NativeNameType.Field, "applicationNameOffset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ApplicationNameOffset;
		[NativeName(NativeNameType.Field, "applicationVersion")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ApplicationVersion;
		[NativeName(NativeNameType.Field, "engineNameOffset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint EngineNameOffset;
		[NativeName(NativeNameType.Field, "engineVersion")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint EngineVersion;
		[NativeName(NativeNameType.Field, "apiVersion")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ApiVersion;

		public unsafe VkDeviceFaultVendorBinaryHeaderVersionOneEXT(uint headerSize = default, VkDeviceFaultVendorBinaryHeaderVersionEXT headerVersion = default, uint vendorID = default, uint deviceID = default, uint driverVersion = default, byte* pipelineCacheUUID = default, uint applicationNameOffset = default, uint applicationVersion = default, uint engineNameOffset = default, uint engineVersion = default, uint apiVersion = default)
		{
			HeaderSize = headerSize;
			HeaderVersion = headerVersion;
			VendorID = vendorID;
			DeviceID = deviceID;
			DriverVersion = driverVersion;
			if (pipelineCacheUUID != default)
			{
				PipelineCacheUUID_0 = pipelineCacheUUID[0];
				PipelineCacheUUID_1 = pipelineCacheUUID[1];
				PipelineCacheUUID_2 = pipelineCacheUUID[2];
				PipelineCacheUUID_3 = pipelineCacheUUID[3];
				PipelineCacheUUID_4 = pipelineCacheUUID[4];
				PipelineCacheUUID_5 = pipelineCacheUUID[5];
				PipelineCacheUUID_6 = pipelineCacheUUID[6];
				PipelineCacheUUID_7 = pipelineCacheUUID[7];
				PipelineCacheUUID_8 = pipelineCacheUUID[8];
				PipelineCacheUUID_9 = pipelineCacheUUID[9];
				PipelineCacheUUID_10 = pipelineCacheUUID[10];
				PipelineCacheUUID_11 = pipelineCacheUUID[11];
				PipelineCacheUUID_12 = pipelineCacheUUID[12];
				PipelineCacheUUID_13 = pipelineCacheUUID[13];
				PipelineCacheUUID_14 = pipelineCacheUUID[14];
				PipelineCacheUUID_15 = pipelineCacheUUID[15];
			}
			ApplicationNameOffset = applicationNameOffset;
			ApplicationVersion = applicationVersion;
			EngineNameOffset = engineNameOffset;
			EngineVersion = engineVersion;
			ApiVersion = apiVersion;
		}

		public unsafe VkDeviceFaultVendorBinaryHeaderVersionOneEXT(uint headerSize = default, VkDeviceFaultVendorBinaryHeaderVersionEXT headerVersion = default, uint vendorID = default, uint deviceID = default, uint driverVersion = default, Span<byte> pipelineCacheUUID = default, uint applicationNameOffset = default, uint applicationVersion = default, uint engineNameOffset = default, uint engineVersion = default, uint apiVersion = default)
		{
			HeaderSize = headerSize;
			HeaderVersion = headerVersion;
			VendorID = vendorID;
			DeviceID = deviceID;
			DriverVersion = driverVersion;
			if (pipelineCacheUUID != default)
			{
				PipelineCacheUUID_0 = pipelineCacheUUID[0];
				PipelineCacheUUID_1 = pipelineCacheUUID[1];
				PipelineCacheUUID_2 = pipelineCacheUUID[2];
				PipelineCacheUUID_3 = pipelineCacheUUID[3];
				PipelineCacheUUID_4 = pipelineCacheUUID[4];
				PipelineCacheUUID_5 = pipelineCacheUUID[5];
				PipelineCacheUUID_6 = pipelineCacheUUID[6];
				PipelineCacheUUID_7 = pipelineCacheUUID[7];
				PipelineCacheUUID_8 = pipelineCacheUUID[8];
				PipelineCacheUUID_9 = pipelineCacheUUID[9];
				PipelineCacheUUID_10 = pipelineCacheUUID[10];
				PipelineCacheUUID_11 = pipelineCacheUUID[11];
				PipelineCacheUUID_12 = pipelineCacheUUID[12];
				PipelineCacheUUID_13 = pipelineCacheUUID[13];
				PipelineCacheUUID_14 = pipelineCacheUUID[14];
				PipelineCacheUUID_15 = pipelineCacheUUID[15];
			}
			ApplicationNameOffset = applicationNameOffset;
			ApplicationVersion = applicationVersion;
			EngineNameOffset = engineNameOffset;
			EngineVersion = engineVersion;
			ApiVersion = apiVersion;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "rasterizationOrderColorAttachmentAccess")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint RasterizationOrderColorAttachmentAccess;
		[NativeName(NativeNameType.Field, "rasterizationOrderDepthAttachmentAccess")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint RasterizationOrderDepthAttachmentAccess;
		[NativeName(NativeNameType.Field, "rasterizationOrderStencilAttachmentAccess")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint RasterizationOrderStencilAttachmentAccess;

		public unsafe VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint rasterizationOrderColorAttachmentAccess = default, uint rasterizationOrderDepthAttachmentAccess = default, uint rasterizationOrderStencilAttachmentAccess = default)
		{
			SType = sType;
			PNext = pNext;
			RasterizationOrderColorAttachmentAccess = rasterizationOrderColorAttachmentAccess;
			RasterizationOrderDepthAttachmentAccess = rasterizationOrderDepthAttachmentAccess;
			RasterizationOrderStencilAttachmentAccess = rasterizationOrderStencilAttachmentAccess;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "formatRgba10x6WithoutYCbCrSampler")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint FormatRgba10x6WithoutYCbCrSampler;

		public unsafe VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint formatRgba10x6WithoutYCbCrSampler = default)
		{
			SType = sType;
			PNext = pNext;
			FormatRgba10x6WithoutYCbCrSampler = formatRgba10x6WithoutYCbCrSampler;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "mutableDescriptorType")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint MutableDescriptorType;

		public unsafe VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint mutableDescriptorType = default)
		{
			SType = sType;
			PNext = pNext;
			MutableDescriptorType = mutableDescriptorType;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMutableDescriptorTypeListEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMutableDescriptorTypeListEXT
	{
		[NativeName(NativeNameType.Field, "descriptorTypeCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DescriptorTypeCount;
		[NativeName(NativeNameType.Field, "pDescriptorTypes")]
		[NativeName(NativeNameType.Type, "const VkDescriptorType*")]
		public unsafe VkDescriptorType* PDescriptorTypes;

		public unsafe VkMutableDescriptorTypeListEXT(uint descriptorTypeCount = default, VkDescriptorType* pDescriptorTypes = default)
		{
			DescriptorTypeCount = descriptorTypeCount;
			PDescriptorTypes = pDescriptorTypes;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMutableDescriptorTypeCreateInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMutableDescriptorTypeCreateInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "mutableDescriptorTypeListCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MutableDescriptorTypeListCount;
		[NativeName(NativeNameType.Field, "pMutableDescriptorTypeLists")]
		[NativeName(NativeNameType.Type, "const VkMutableDescriptorTypeListEXT*")]
		public unsafe VkMutableDescriptorTypeListEXT* PMutableDescriptorTypeLists;

		public unsafe VkMutableDescriptorTypeCreateInfoEXT(VkStructureType sType = default, void* pNext = default, uint mutableDescriptorTypeListCount = default, VkMutableDescriptorTypeListEXT* pMutableDescriptorTypeLists = default)
		{
			SType = sType;
			PNext = pNext;
			MutableDescriptorTypeListCount = mutableDescriptorTypeListCount;
			PMutableDescriptorTypeLists = pMutableDescriptorTypeLists;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "vertexInputDynamicState")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint VertexInputDynamicState;

		public unsafe VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint vertexInputDynamicState = default)
		{
			SType = sType;
			PNext = pNext;
			VertexInputDynamicState = vertexInputDynamicState;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVertexInputBindingDescription2EXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVertexInputBindingDescription2EXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "binding")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Binding;
		[NativeName(NativeNameType.Field, "stride")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Stride;
		[NativeName(NativeNameType.Field, "inputRate")]
		[NativeName(NativeNameType.Type, "VkVertexInputRate")]
		public VkVertexInputRate InputRate;
		[NativeName(NativeNameType.Field, "divisor")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Divisor;

		public unsafe VkVertexInputBindingDescription2EXT(VkStructureType sType = default, void* pNext = default, uint binding = default, uint stride = default, VkVertexInputRate inputRate = default, uint divisor = default)
		{
			SType = sType;
			PNext = pNext;
			Binding = binding;
			Stride = stride;
			InputRate = inputRate;
			Divisor = divisor;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVertexInputAttributeDescription2EXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVertexInputAttributeDescription2EXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "location")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Location;
		[NativeName(NativeNameType.Field, "binding")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Binding;
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat Format;
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Offset;

		public unsafe VkVertexInputAttributeDescription2EXT(VkStructureType sType = default, void* pNext = default, uint location = default, uint binding = default, VkFormat format = default, uint offset = default)
		{
			SType = sType;
			PNext = pNext;
			Location = location;
			Binding = binding;
			Format = format;
			Offset = offset;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceDrmPropertiesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceDrmPropertiesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "hasPrimary")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint HasPrimary;
		[NativeName(NativeNameType.Field, "hasRender")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint HasRender;
		[NativeName(NativeNameType.Field, "primaryMajor")]
		[NativeName(NativeNameType.Type, "int64_t")]
		public long PrimaryMajor;
		[NativeName(NativeNameType.Field, "primaryMinor")]
		[NativeName(NativeNameType.Type, "int64_t")]
		public long PrimaryMinor;
		[NativeName(NativeNameType.Field, "renderMajor")]
		[NativeName(NativeNameType.Type, "int64_t")]
		public long RenderMajor;
		[NativeName(NativeNameType.Field, "renderMinor")]
		[NativeName(NativeNameType.Type, "int64_t")]
		public long RenderMinor;

		public unsafe VkPhysicalDeviceDrmPropertiesEXT(VkStructureType sType = default, void* pNext = default, uint hasPrimary = default, uint hasRender = default, long primaryMajor = default, long primaryMinor = default, long renderMajor = default, long renderMinor = default)
		{
			SType = sType;
			PNext = pNext;
			HasPrimary = hasPrimary;
			HasRender = hasRender;
			PrimaryMajor = primaryMajor;
			PrimaryMinor = primaryMinor;
			RenderMajor = renderMajor;
			RenderMinor = renderMinor;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceAddressBindingReportFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceAddressBindingReportFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "reportAddressBinding")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ReportAddressBinding;

		public unsafe VkPhysicalDeviceAddressBindingReportFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint reportAddressBinding = default)
		{
			SType = sType;
			PNext = pNext;
			ReportAddressBinding = reportAddressBinding;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDeviceAddressBindingCallbackDataEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDeviceAddressBindingCallbackDataEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkDeviceAddressBindingFlagsEXT")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "baseAddress")]
		[NativeName(NativeNameType.Type, "VkDeviceAddress")]
		public ulong BaseAddress;
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Size;
		[NativeName(NativeNameType.Field, "bindingType")]
		[NativeName(NativeNameType.Type, "VkDeviceAddressBindingTypeEXT")]
		public VkDeviceAddressBindingTypeEXT BindingType;

		public unsafe VkDeviceAddressBindingCallbackDataEXT(VkStructureType sType = default, void* pNext = default, uint flags = default, ulong baseAddress = default, ulong size = default, VkDeviceAddressBindingTypeEXT bindingType = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			BaseAddress = baseAddress;
			Size = size;
			BindingType = bindingType;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceDepthClipControlFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceDepthClipControlFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "depthClipControl")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DepthClipControl;

		public unsafe VkPhysicalDeviceDepthClipControlFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint depthClipControl = default)
		{
			SType = sType;
			PNext = pNext;
			DepthClipControl = depthClipControl;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineViewportDepthClipControlCreateInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineViewportDepthClipControlCreateInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "negativeOneToOne")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint NegativeOneToOne;

		public unsafe VkPipelineViewportDepthClipControlCreateInfoEXT(VkStructureType sType = default, void* pNext = default, uint negativeOneToOne = default)
		{
			SType = sType;
			PNext = pNext;
			NegativeOneToOne = negativeOneToOne;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "primitiveTopologyListRestart")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PrimitiveTopologyListRestart;
		[NativeName(NativeNameType.Field, "primitiveTopologyPatchListRestart")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PrimitiveTopologyPatchListRestart;

		public unsafe VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint primitiveTopologyListRestart = default, uint primitiveTopologyPatchListRestart = default)
		{
			SType = sType;
			PNext = pNext;
			PrimitiveTopologyListRestart = primitiveTopologyListRestart;
			PrimitiveTopologyPatchListRestart = primitiveTopologyPatchListRestart;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSubpassShadingPipelineCreateInfoHUAWEI")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSubpassShadingPipelineCreateInfoHUAWEI
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "renderPass")]
		[NativeName(NativeNameType.Type, "VkRenderPass")]
		public VkRenderPass RenderPass;
		[NativeName(NativeNameType.Field, "subpass")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Subpass;

		public unsafe VkSubpassShadingPipelineCreateInfoHUAWEI(VkStructureType sType = default, void* pNext = default, VkRenderPass renderPass = default, uint subpass = default)
		{
			SType = sType;
			PNext = pNext;
			RenderPass = renderPass;
			Subpass = subpass;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceSubpassShadingFeaturesHUAWEI")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "subpassShading")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint SubpassShading;

		public unsafe VkPhysicalDeviceSubpassShadingFeaturesHUAWEI(VkStructureType sType = default, void* pNext = default, uint subpassShading = default)
		{
			SType = sType;
			PNext = pNext;
			SubpassShading = subpassShading;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceSubpassShadingPropertiesHUAWEI")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "maxSubpassShadingWorkgroupSizeAspectRatio")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxSubpassShadingWorkgroupSizeAspectRatio;

		public unsafe VkPhysicalDeviceSubpassShadingPropertiesHUAWEI(VkStructureType sType = default, void* pNext = default, uint maxSubpassShadingWorkgroupSizeAspectRatio = default)
		{
			SType = sType;
			PNext = pNext;
			MaxSubpassShadingWorkgroupSizeAspectRatio = maxSubpassShadingWorkgroupSizeAspectRatio;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceInvocationMaskFeaturesHUAWEI")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "invocationMask")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint InvocationMask;

		public unsafe VkPhysicalDeviceInvocationMaskFeaturesHUAWEI(VkStructureType sType = default, void* pNext = default, uint invocationMask = default)
		{
			SType = sType;
			PNext = pNext;
			InvocationMask = invocationMask;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMemoryGetRemoteAddressInfoNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMemoryGetRemoteAddressInfoNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "memory")]
		[NativeName(NativeNameType.Type, "VkDeviceMemory")]
		public VkDeviceMemory Memory;
		[NativeName(NativeNameType.Field, "handleType")]
		[NativeName(NativeNameType.Type, "VkExternalMemoryHandleTypeFlagBits")]
		public VkExternalMemoryHandleTypeFlagBits HandleType;

		public unsafe VkMemoryGetRemoteAddressInfoNV(VkStructureType sType = default, void* pNext = default, VkDeviceMemory memory = default, VkExternalMemoryHandleTypeFlagBits handleType = default)
		{
			SType = sType;
			PNext = pNext;
			Memory = memory;
			HandleType = handleType;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceExternalMemoryRDMAFeaturesNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "externalMemoryRDMA")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExternalMemoryRDMA;

		public unsafe VkPhysicalDeviceExternalMemoryRDMAFeaturesNV(VkStructureType sType = default, void* pNext = default, uint externalMemoryRDMA = default)
		{
			SType = sType;
			PNext = pNext;
			ExternalMemoryRDMA = externalMemoryRDMA;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelinePropertiesIdentifierEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelinePropertiesIdentifierEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pipelineIdentifier")]
		[NativeName(NativeNameType.Type, "uint8_t[16]")]
		public byte PipelineIdentifier_0;
		public byte PipelineIdentifier_1;
		public byte PipelineIdentifier_2;
		public byte PipelineIdentifier_3;
		public byte PipelineIdentifier_4;
		public byte PipelineIdentifier_5;
		public byte PipelineIdentifier_6;
		public byte PipelineIdentifier_7;
		public byte PipelineIdentifier_8;
		public byte PipelineIdentifier_9;
		public byte PipelineIdentifier_10;
		public byte PipelineIdentifier_11;
		public byte PipelineIdentifier_12;
		public byte PipelineIdentifier_13;
		public byte PipelineIdentifier_14;
		public byte PipelineIdentifier_15;

		public unsafe VkPipelinePropertiesIdentifierEXT(VkStructureType sType = default, void* pNext = default, byte* pipelineIdentifier = default)
		{
			SType = sType;
			PNext = pNext;
			if (pipelineIdentifier != default)
			{
				PipelineIdentifier_0 = pipelineIdentifier[0];
				PipelineIdentifier_1 = pipelineIdentifier[1];
				PipelineIdentifier_2 = pipelineIdentifier[2];
				PipelineIdentifier_3 = pipelineIdentifier[3];
				PipelineIdentifier_4 = pipelineIdentifier[4];
				PipelineIdentifier_5 = pipelineIdentifier[5];
				PipelineIdentifier_6 = pipelineIdentifier[6];
				PipelineIdentifier_7 = pipelineIdentifier[7];
				PipelineIdentifier_8 = pipelineIdentifier[8];
				PipelineIdentifier_9 = pipelineIdentifier[9];
				PipelineIdentifier_10 = pipelineIdentifier[10];
				PipelineIdentifier_11 = pipelineIdentifier[11];
				PipelineIdentifier_12 = pipelineIdentifier[12];
				PipelineIdentifier_13 = pipelineIdentifier[13];
				PipelineIdentifier_14 = pipelineIdentifier[14];
				PipelineIdentifier_15 = pipelineIdentifier[15];
			}
		}

		public unsafe VkPipelinePropertiesIdentifierEXT(VkStructureType sType = default, void* pNext = default, Span<byte> pipelineIdentifier = default)
		{
			SType = sType;
			PNext = pNext;
			if (pipelineIdentifier != default)
			{
				PipelineIdentifier_0 = pipelineIdentifier[0];
				PipelineIdentifier_1 = pipelineIdentifier[1];
				PipelineIdentifier_2 = pipelineIdentifier[2];
				PipelineIdentifier_3 = pipelineIdentifier[3];
				PipelineIdentifier_4 = pipelineIdentifier[4];
				PipelineIdentifier_5 = pipelineIdentifier[5];
				PipelineIdentifier_6 = pipelineIdentifier[6];
				PipelineIdentifier_7 = pipelineIdentifier[7];
				PipelineIdentifier_8 = pipelineIdentifier[8];
				PipelineIdentifier_9 = pipelineIdentifier[9];
				PipelineIdentifier_10 = pipelineIdentifier[10];
				PipelineIdentifier_11 = pipelineIdentifier[11];
				PipelineIdentifier_12 = pipelineIdentifier[12];
				PipelineIdentifier_13 = pipelineIdentifier[13];
				PipelineIdentifier_14 = pipelineIdentifier[14];
				PipelineIdentifier_15 = pipelineIdentifier[15];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDevicePipelinePropertiesFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDevicePipelinePropertiesFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pipelinePropertiesIdentifier")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PipelinePropertiesIdentifier;

		public unsafe VkPhysicalDevicePipelinePropertiesFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint pipelinePropertiesIdentifier = default)
		{
			SType = sType;
			PNext = pNext;
			PipelinePropertiesIdentifier = pipelinePropertiesIdentifier;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "multisampledRenderToSingleSampled")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint MultisampledRenderToSingleSampled;

		public unsafe VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint multisampledRenderToSingleSampled = default)
		{
			SType = sType;
			PNext = pNext;
			MultisampledRenderToSingleSampled = multisampledRenderToSingleSampled;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSubpassResolvePerformanceQueryEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSubpassResolvePerformanceQueryEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "optimal")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint Optimal;

		public unsafe VkSubpassResolvePerformanceQueryEXT(VkStructureType sType = default, void* pNext = default, uint optimal = default)
		{
			SType = sType;
			PNext = pNext;
			Optimal = optimal;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMultisampledRenderToSingleSampledInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMultisampledRenderToSingleSampledInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "multisampledRenderToSingleSampledEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint MultisampledRenderToSingleSampledEnable;
		[NativeName(NativeNameType.Field, "rasterizationSamples")]
		[NativeName(NativeNameType.Type, "VkSampleCountFlagBits")]
		public VkSampleCountFlagBits RasterizationSamples;

		public unsafe VkMultisampledRenderToSingleSampledInfoEXT(VkStructureType sType = default, void* pNext = default, uint multisampledRenderToSingleSampledEnable = default, VkSampleCountFlagBits rasterizationSamples = default)
		{
			SType = sType;
			PNext = pNext;
			MultisampledRenderToSingleSampledEnable = multisampledRenderToSingleSampledEnable;
			RasterizationSamples = rasterizationSamples;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceExtendedDynamicState2FeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "extendedDynamicState2")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState2;
		[NativeName(NativeNameType.Field, "extendedDynamicState2LogicOp")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState2LogicOp;
		[NativeName(NativeNameType.Field, "extendedDynamicState2PatchControlPoints")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState2PatchControlPoints;

		public unsafe VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(VkStructureType sType = default, void* pNext = default, uint extendedDynamicState2 = default, uint extendedDynamicState2LogicOp = default, uint extendedDynamicState2PatchControlPoints = default)
		{
			SType = sType;
			PNext = pNext;
			ExtendedDynamicState2 = extendedDynamicState2;
			ExtendedDynamicState2LogicOp = extendedDynamicState2LogicOp;
			ExtendedDynamicState2PatchControlPoints = extendedDynamicState2PatchControlPoints;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceColorWriteEnableFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceColorWriteEnableFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "colorWriteEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ColorWriteEnable;

		public unsafe VkPhysicalDeviceColorWriteEnableFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint colorWriteEnable = default)
		{
			SType = sType;
			PNext = pNext;
			ColorWriteEnable = colorWriteEnable;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineColorWriteCreateInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineColorWriteCreateInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "attachmentCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint AttachmentCount;
		[NativeName(NativeNameType.Field, "pColorWriteEnables")]
		[NativeName(NativeNameType.Type, "const VkBool32*")]
		public unsafe uint* PColorWriteEnables;

		public unsafe VkPipelineColorWriteCreateInfoEXT(VkStructureType sType = default, void* pNext = default, uint attachmentCount = default, uint* pColorWriteEnables = default)
		{
			SType = sType;
			PNext = pNext;
			AttachmentCount = attachmentCount;
			PColorWriteEnables = pColorWriteEnables;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "primitivesGeneratedQuery")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PrimitivesGeneratedQuery;
		[NativeName(NativeNameType.Field, "primitivesGeneratedQueryWithRasterizerDiscard")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PrimitivesGeneratedQueryWithRasterizerDiscard;
		[NativeName(NativeNameType.Field, "primitivesGeneratedQueryWithNonZeroStreams")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PrimitivesGeneratedQueryWithNonZeroStreams;

		public unsafe VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint primitivesGeneratedQuery = default, uint primitivesGeneratedQueryWithRasterizerDiscard = default, uint primitivesGeneratedQueryWithNonZeroStreams = default)
		{
			SType = sType;
			PNext = pNext;
			PrimitivesGeneratedQuery = primitivesGeneratedQuery;
			PrimitivesGeneratedQueryWithRasterizerDiscard = primitivesGeneratedQueryWithRasterizerDiscard;
			PrimitivesGeneratedQueryWithNonZeroStreams = primitivesGeneratedQueryWithNonZeroStreams;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceImageViewMinLodFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceImageViewMinLodFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "minLod")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint MinLod;

		public unsafe VkPhysicalDeviceImageViewMinLodFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint minLod = default)
		{
			SType = sType;
			PNext = pNext;
			MinLod = minLod;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImageViewMinLodCreateInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageViewMinLodCreateInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "minLod")]
		[NativeName(NativeNameType.Type, "float")]
		public float MinLod;

		public unsafe VkImageViewMinLodCreateInfoEXT(VkStructureType sType = default, void* pNext = default, float minLod = default)
		{
			SType = sType;
			PNext = pNext;
			MinLod = minLod;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceMultiDrawFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceMultiDrawFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "multiDraw")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint MultiDraw;

		public unsafe VkPhysicalDeviceMultiDrawFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint multiDraw = default)
		{
			SType = sType;
			PNext = pNext;
			MultiDraw = multiDraw;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceMultiDrawPropertiesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceMultiDrawPropertiesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "maxMultiDrawCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxMultiDrawCount;

		public unsafe VkPhysicalDeviceMultiDrawPropertiesEXT(VkStructureType sType = default, void* pNext = default, uint maxMultiDrawCount = default)
		{
			SType = sType;
			PNext = pNext;
			MaxMultiDrawCount = maxMultiDrawCount;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMultiDrawInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMultiDrawInfoEXT
	{
		[NativeName(NativeNameType.Field, "firstVertex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FirstVertex;
		[NativeName(NativeNameType.Field, "vertexCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VertexCount;

		public unsafe VkMultiDrawInfoEXT(uint firstVertex = default, uint vertexCount = default)
		{
			FirstVertex = firstVertex;
			VertexCount = vertexCount;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMultiDrawIndexedInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMultiDrawIndexedInfoEXT
	{
		[NativeName(NativeNameType.Field, "firstIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FirstIndex;
		[NativeName(NativeNameType.Field, "indexCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IndexCount;
		[NativeName(NativeNameType.Field, "vertexOffset")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int VertexOffset;

		public unsafe VkMultiDrawIndexedInfoEXT(uint firstIndex = default, uint indexCount = default, int vertexOffset = default)
		{
			FirstIndex = firstIndex;
			IndexCount = indexCount;
			VertexOffset = vertexOffset;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceImage2DViewOf3DFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceImage2DViewOf3DFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "image2DViewOf3D")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint Image2DViewOf3D;
		[NativeName(NativeNameType.Field, "sampler2DViewOf3D")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint Sampler2DViewOf3D;

		public unsafe VkPhysicalDeviceImage2DViewOf3DFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint image2DViewOf3D = default, uint sampler2DViewOf3D = default)
		{
			SType = sType;
			PNext = pNext;
			Image2DViewOf3D = image2DViewOf3D;
			Sampler2DViewOf3D = sampler2DViewOf3D;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceShaderTileImageFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceShaderTileImageFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "shaderTileImageColorReadAccess")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderTileImageColorReadAccess;
		[NativeName(NativeNameType.Field, "shaderTileImageDepthReadAccess")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderTileImageDepthReadAccess;
		[NativeName(NativeNameType.Field, "shaderTileImageStencilReadAccess")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderTileImageStencilReadAccess;

		public unsafe VkPhysicalDeviceShaderTileImageFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint shaderTileImageColorReadAccess = default, uint shaderTileImageDepthReadAccess = default, uint shaderTileImageStencilReadAccess = default)
		{
			SType = sType;
			PNext = pNext;
			ShaderTileImageColorReadAccess = shaderTileImageColorReadAccess;
			ShaderTileImageDepthReadAccess = shaderTileImageDepthReadAccess;
			ShaderTileImageStencilReadAccess = shaderTileImageStencilReadAccess;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceShaderTileImagePropertiesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceShaderTileImagePropertiesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "shaderTileImageCoherentReadAccelerated")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderTileImageCoherentReadAccelerated;
		[NativeName(NativeNameType.Field, "shaderTileImageReadSampleFromPixelRateInvocation")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderTileImageReadSampleFromPixelRateInvocation;
		[NativeName(NativeNameType.Field, "shaderTileImageReadFromHelperInvocation")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderTileImageReadFromHelperInvocation;

		public unsafe VkPhysicalDeviceShaderTileImagePropertiesEXT(VkStructureType sType = default, void* pNext = default, uint shaderTileImageCoherentReadAccelerated = default, uint shaderTileImageReadSampleFromPixelRateInvocation = default, uint shaderTileImageReadFromHelperInvocation = default)
		{
			SType = sType;
			PNext = pNext;
			ShaderTileImageCoherentReadAccelerated = shaderTileImageCoherentReadAccelerated;
			ShaderTileImageReadSampleFromPixelRateInvocation = shaderTileImageReadSampleFromPixelRateInvocation;
			ShaderTileImageReadFromHelperInvocation = shaderTileImageReadFromHelperInvocation;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMicromapUsageEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMicromapUsageEXT
	{
		[NativeName(NativeNameType.Field, "count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Count;
		[NativeName(NativeNameType.Field, "subdivisionLevel")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SubdivisionLevel;
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Format;

		public unsafe VkMicromapUsageEXT(uint count = default, uint subdivisionLevel = default, uint format = default)
		{
			Count = count;
			SubdivisionLevel = subdivisionLevel;
			Format = format;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDeviceOrHostAddressKHR")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct VkDeviceOrHostAddressKHR
	{
		[NativeName(NativeNameType.Field, "deviceAddress")]
		[NativeName(NativeNameType.Type, "VkDeviceAddress")]
		[FieldOffset(0)]
		public ulong DeviceAddress;
		[NativeName(NativeNameType.Field, "hostAddress")]
		[NativeName(NativeNameType.Type, "void*")]
		[FieldOffset(0)]
		public unsafe void* HostAddress;

		public unsafe VkDeviceOrHostAddressKHR(ulong deviceAddress = default, void* hostAddress = default)
		{
			DeviceAddress = deviceAddress;
			HostAddress = hostAddress;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMicromapBuildInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMicromapBuildInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "VkMicromapTypeEXT")]
		public VkMicromapTypeEXT Type;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkBuildMicromapFlagsEXT")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "mode")]
		[NativeName(NativeNameType.Type, "VkBuildMicromapModeEXT")]
		public VkBuildMicromapModeEXT Mode;
		[NativeName(NativeNameType.Field, "dstMicromap")]
		[NativeName(NativeNameType.Type, "VkMicromapEXT")]
		public VkMicromapEXT DstMicromap;
		[NativeName(NativeNameType.Field, "usageCountsCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint UsageCountsCount;
		[NativeName(NativeNameType.Field, "pUsageCounts")]
		[NativeName(NativeNameType.Type, "const VkMicromapUsageEXT*")]
		public unsafe VkMicromapUsageEXT* PUsageCounts;
		[NativeName(NativeNameType.Field, "ppUsageCounts")]
		[NativeName(NativeNameType.Type, "const const VkMicromapUsageEXT**")]
		public unsafe VkMicromapUsageEXT** PpUsageCounts;
		[NativeName(NativeNameType.Field, "data")]
		[NativeName(NativeNameType.Type, "VkDeviceOrHostAddressConstKHR")]
		public VkDeviceOrHostAddressConstKHR Data;
		[NativeName(NativeNameType.Field, "scratchData")]
		[NativeName(NativeNameType.Type, "VkDeviceOrHostAddressKHR")]
		public VkDeviceOrHostAddressKHR ScratchData;
		[NativeName(NativeNameType.Field, "triangleArray")]
		[NativeName(NativeNameType.Type, "VkDeviceOrHostAddressConstKHR")]
		public VkDeviceOrHostAddressConstKHR TriangleArray;
		[NativeName(NativeNameType.Field, "triangleArrayStride")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong TriangleArrayStride;

		public unsafe VkMicromapBuildInfoEXT(VkStructureType sType = default, void* pNext = default, VkMicromapTypeEXT type = default, uint flags = default, VkBuildMicromapModeEXT mode = default, VkMicromapEXT dstMicromap = default, uint usageCountsCount = default, VkMicromapUsageEXT* pUsageCounts = default, VkMicromapUsageEXT** ppUsageCounts = default, VkDeviceOrHostAddressConstKHR data = default, VkDeviceOrHostAddressKHR scratchdata = default, VkDeviceOrHostAddressConstKHR trianglearray = default, ulong triangleArrayStride = default)
		{
			SType = sType;
			PNext = pNext;
			Type = type;
			Flags = flags;
			Mode = mode;
			DstMicromap = dstMicromap;
			UsageCountsCount = usageCountsCount;
			PUsageCounts = pUsageCounts;
			PpUsageCounts = ppUsageCounts;
			Data = data;
			ScratchData = scratchdata;
			TriangleArray = trianglearray;
			TriangleArrayStride = triangleArrayStride;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMicromapCreateInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMicromapCreateInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "createFlags")]
		[NativeName(NativeNameType.Type, "VkMicromapCreateFlagsEXT")]
		public uint CreateFlags;
		[NativeName(NativeNameType.Field, "buffer")]
		[NativeName(NativeNameType.Type, "VkBuffer")]
		public VkBuffer Buffer;
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Offset;
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Size;
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "VkMicromapTypeEXT")]
		public VkMicromapTypeEXT Type;
		[NativeName(NativeNameType.Field, "deviceAddress")]
		[NativeName(NativeNameType.Type, "VkDeviceAddress")]
		public ulong DeviceAddress;

		public unsafe VkMicromapCreateInfoEXT(VkStructureType sType = default, void* pNext = default, uint createFlags = default, VkBuffer buffer = default, ulong offset = default, ulong size = default, VkMicromapTypeEXT type = default, ulong deviceAddress = default)
		{
			SType = sType;
			PNext = pNext;
			CreateFlags = createFlags;
			Buffer = buffer;
			Offset = offset;
			Size = size;
			Type = type;
			DeviceAddress = deviceAddress;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceOpacityMicromapFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceOpacityMicromapFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "micromap")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint Micromap;
		[NativeName(NativeNameType.Field, "micromapCaptureReplay")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint MicromapCaptureReplay;
		[NativeName(NativeNameType.Field, "micromapHostCommands")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint MicromapHostCommands;

		public unsafe VkPhysicalDeviceOpacityMicromapFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint micromap = default, uint micromapCaptureReplay = default, uint micromapHostCommands = default)
		{
			SType = sType;
			PNext = pNext;
			Micromap = micromap;
			MicromapCaptureReplay = micromapCaptureReplay;
			MicromapHostCommands = micromapHostCommands;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceOpacityMicromapPropertiesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceOpacityMicromapPropertiesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "maxOpacity2StateSubdivisionLevel")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxOpacity2StateSubdivisionLevel;
		[NativeName(NativeNameType.Field, "maxOpacity4StateSubdivisionLevel")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxOpacity4StateSubdivisionLevel;

		public unsafe VkPhysicalDeviceOpacityMicromapPropertiesEXT(VkStructureType sType = default, void* pNext = default, uint maxOpacity2StateSubdivisionLevel = default, uint maxOpacity4StateSubdivisionLevel = default)
		{
			SType = sType;
			PNext = pNext;
			MaxOpacity2StateSubdivisionLevel = maxOpacity2StateSubdivisionLevel;
			MaxOpacity4StateSubdivisionLevel = maxOpacity4StateSubdivisionLevel;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMicromapVersionInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMicromapVersionInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pVersionData")]
		[NativeName(NativeNameType.Type, "const uint8_t*")]
		public unsafe byte* PVersionData;

		public unsafe VkMicromapVersionInfoEXT(VkStructureType sType = default, void* pNext = default, byte* pVersionData = default)
		{
			SType = sType;
			PNext = pNext;
			PVersionData = pVersionData;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkCopyMicromapToMemoryInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkCopyMicromapToMemoryInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "src")]
		[NativeName(NativeNameType.Type, "VkMicromapEXT")]
		public VkMicromapEXT Src;
		[NativeName(NativeNameType.Field, "dst")]
		[NativeName(NativeNameType.Type, "VkDeviceOrHostAddressKHR")]
		public VkDeviceOrHostAddressKHR Dst;
		[NativeName(NativeNameType.Field, "mode")]
		[NativeName(NativeNameType.Type, "VkCopyMicromapModeEXT")]
		public VkCopyMicromapModeEXT Mode;

		public unsafe VkCopyMicromapToMemoryInfoEXT(VkStructureType sType = default, void* pNext = default, VkMicromapEXT src = default, VkDeviceOrHostAddressKHR dst = default, VkCopyMicromapModeEXT mode = default)
		{
			SType = sType;
			PNext = pNext;
			Src = src;
			Dst = dst;
			Mode = mode;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkCopyMemoryToMicromapInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkCopyMemoryToMicromapInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "src")]
		[NativeName(NativeNameType.Type, "VkDeviceOrHostAddressConstKHR")]
		public VkDeviceOrHostAddressConstKHR Src;
		[NativeName(NativeNameType.Field, "dst")]
		[NativeName(NativeNameType.Type, "VkMicromapEXT")]
		public VkMicromapEXT Dst;
		[NativeName(NativeNameType.Field, "mode")]
		[NativeName(NativeNameType.Type, "VkCopyMicromapModeEXT")]
		public VkCopyMicromapModeEXT Mode;

		public unsafe VkCopyMemoryToMicromapInfoEXT(VkStructureType sType = default, void* pNext = default, VkDeviceOrHostAddressConstKHR src = default, VkMicromapEXT dst = default, VkCopyMicromapModeEXT mode = default)
		{
			SType = sType;
			PNext = pNext;
			Src = src;
			Dst = dst;
			Mode = mode;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkCopyMicromapInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkCopyMicromapInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "src")]
		[NativeName(NativeNameType.Type, "VkMicromapEXT")]
		public VkMicromapEXT Src;
		[NativeName(NativeNameType.Field, "dst")]
		[NativeName(NativeNameType.Type, "VkMicromapEXT")]
		public VkMicromapEXT Dst;
		[NativeName(NativeNameType.Field, "mode")]
		[NativeName(NativeNameType.Type, "VkCopyMicromapModeEXT")]
		public VkCopyMicromapModeEXT Mode;

		public unsafe VkCopyMicromapInfoEXT(VkStructureType sType = default, void* pNext = default, VkMicromapEXT src = default, VkMicromapEXT dst = default, VkCopyMicromapModeEXT mode = default)
		{
			SType = sType;
			PNext = pNext;
			Src = src;
			Dst = dst;
			Mode = mode;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMicromapBuildSizesInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMicromapBuildSizesInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "micromapSize")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong MicromapSize;
		[NativeName(NativeNameType.Field, "buildScratchSize")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong BuildScratchSize;
		[NativeName(NativeNameType.Field, "discardable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint Discardable;

		public unsafe VkMicromapBuildSizesInfoEXT(VkStructureType sType = default, void* pNext = default, ulong micromapSize = default, ulong buildScratchSize = default, uint discardable = default)
		{
			SType = sType;
			PNext = pNext;
			MicromapSize = micromapSize;
			BuildScratchSize = buildScratchSize;
			Discardable = discardable;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkAccelerationStructureTrianglesOpacityMicromapEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkAccelerationStructureTrianglesOpacityMicromapEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "indexType")]
		[NativeName(NativeNameType.Type, "VkIndexType")]
		public VkIndexType IndexType;
		[NativeName(NativeNameType.Field, "indexBuffer")]
		[NativeName(NativeNameType.Type, "VkDeviceOrHostAddressConstKHR")]
		public VkDeviceOrHostAddressConstKHR IndexBuffer;
		[NativeName(NativeNameType.Field, "indexStride")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong IndexStride;
		[NativeName(NativeNameType.Field, "baseTriangle")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BaseTriangle;
		[NativeName(NativeNameType.Field, "usageCountsCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint UsageCountsCount;
		[NativeName(NativeNameType.Field, "pUsageCounts")]
		[NativeName(NativeNameType.Type, "const VkMicromapUsageEXT*")]
		public unsafe VkMicromapUsageEXT* PUsageCounts;
		[NativeName(NativeNameType.Field, "ppUsageCounts")]
		[NativeName(NativeNameType.Type, "const const VkMicromapUsageEXT**")]
		public unsafe VkMicromapUsageEXT** PpUsageCounts;
		[NativeName(NativeNameType.Field, "micromap")]
		[NativeName(NativeNameType.Type, "VkMicromapEXT")]
		public VkMicromapEXT Micromap;

		public unsafe VkAccelerationStructureTrianglesOpacityMicromapEXT(VkStructureType sType = default, void* pNext = default, VkIndexType indexType = default, VkDeviceOrHostAddressConstKHR indexbuffer = default, ulong indexStride = default, uint baseTriangle = default, uint usageCountsCount = default, VkMicromapUsageEXT* pUsageCounts = default, VkMicromapUsageEXT** ppUsageCounts = default, VkMicromapEXT micromap = default)
		{
			SType = sType;
			PNext = pNext;
			IndexType = indexType;
			IndexBuffer = indexbuffer;
			IndexStride = indexStride;
			BaseTriangle = baseTriangle;
			UsageCountsCount = usageCountsCount;
			PUsageCounts = pUsageCounts;
			PpUsageCounts = ppUsageCounts;
			Micromap = micromap;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMicromapTriangleEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMicromapTriangleEXT
	{
		[NativeName(NativeNameType.Field, "dataOffset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DataOffset;
		[NativeName(NativeNameType.Field, "subdivisionLevel")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort SubdivisionLevel;
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort Format;

		public unsafe VkMicromapTriangleEXT(uint dataOffset = default, ushort subdivisionLevel = default, ushort format = default)
		{
			DataOffset = dataOffset;
			SubdivisionLevel = subdivisionLevel;
			Format = format;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "clustercullingShader")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ClustercullingShader;
		[NativeName(NativeNameType.Field, "multiviewClusterCullingShader")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint MultiviewClusterCullingShader;

		public unsafe VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI(VkStructureType sType = default, void* pNext = default, uint clustercullingShader = default, uint multiviewClusterCullingShader = default)
		{
			SType = sType;
			PNext = pNext;
			ClustercullingShader = clustercullingShader;
			MultiviewClusterCullingShader = multiviewClusterCullingShader;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "maxWorkGroupCount")]
		[NativeName(NativeNameType.Type, "uint32_t[3]")]
		public uint MaxWorkGroupCount_0;
		public uint MaxWorkGroupCount_1;
		public uint MaxWorkGroupCount_2;
		[NativeName(NativeNameType.Field, "maxWorkGroupSize")]
		[NativeName(NativeNameType.Type, "uint32_t[3]")]
		public uint MaxWorkGroupSize_0;
		public uint MaxWorkGroupSize_1;
		public uint MaxWorkGroupSize_2;
		[NativeName(NativeNameType.Field, "maxOutputClusterCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxOutputClusterCount;
		[NativeName(NativeNameType.Field, "indirectBufferOffsetAlignment")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong IndirectBufferOffsetAlignment;

		public unsafe VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI(VkStructureType sType = default, void* pNext = default, uint* maxWorkGroupCount = default, uint* maxWorkGroupSize = default, uint maxOutputClusterCount = default, ulong indirectBufferOffsetAlignment = default)
		{
			SType = sType;
			PNext = pNext;
			if (maxWorkGroupCount != default)
			{
				MaxWorkGroupCount_0 = maxWorkGroupCount[0];
				MaxWorkGroupCount_1 = maxWorkGroupCount[1];
				MaxWorkGroupCount_2 = maxWorkGroupCount[2];
			}
			if (maxWorkGroupSize != default)
			{
				MaxWorkGroupSize_0 = maxWorkGroupSize[0];
				MaxWorkGroupSize_1 = maxWorkGroupSize[1];
				MaxWorkGroupSize_2 = maxWorkGroupSize[2];
			}
			MaxOutputClusterCount = maxOutputClusterCount;
			IndirectBufferOffsetAlignment = indirectBufferOffsetAlignment;
		}

		public unsafe VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI(VkStructureType sType = default, void* pNext = default, Span<uint> maxWorkGroupCount = default, Span<uint> maxWorkGroupSize = default, uint maxOutputClusterCount = default, ulong indirectBufferOffsetAlignment = default)
		{
			SType = sType;
			PNext = pNext;
			if (maxWorkGroupCount != default)
			{
				MaxWorkGroupCount_0 = maxWorkGroupCount[0];
				MaxWorkGroupCount_1 = maxWorkGroupCount[1];
				MaxWorkGroupCount_2 = maxWorkGroupCount[2];
			}
			if (maxWorkGroupSize != default)
			{
				MaxWorkGroupSize_0 = maxWorkGroupSize[0];
				MaxWorkGroupSize_1 = maxWorkGroupSize[1];
				MaxWorkGroupSize_2 = maxWorkGroupSize[2];
			}
			MaxOutputClusterCount = maxOutputClusterCount;
			IndirectBufferOffsetAlignment = indirectBufferOffsetAlignment;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceBorderColorSwizzleFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "borderColorSwizzle")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint BorderColorSwizzle;
		[NativeName(NativeNameType.Field, "borderColorSwizzleFromImage")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint BorderColorSwizzleFromImage;

		public unsafe VkPhysicalDeviceBorderColorSwizzleFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint borderColorSwizzle = default, uint borderColorSwizzleFromImage = default)
		{
			SType = sType;
			PNext = pNext;
			BorderColorSwizzle = borderColorSwizzle;
			BorderColorSwizzleFromImage = borderColorSwizzleFromImage;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSamplerBorderColorComponentMappingCreateInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSamplerBorderColorComponentMappingCreateInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "components")]
		[NativeName(NativeNameType.Type, "VkComponentMapping")]
		public VkComponentMapping Components;
		[NativeName(NativeNameType.Field, "srgb")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint Srgb;

		public unsafe VkSamplerBorderColorComponentMappingCreateInfoEXT(VkStructureType sType = default, void* pNext = default, VkComponentMapping components = default, uint srgb = default)
		{
			SType = sType;
			PNext = pNext;
			Components = components;
			Srgb = srgb;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pageableDeviceLocalMemory")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PageableDeviceLocalMemory;

		public unsafe VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint pageableDeviceLocalMemory = default)
		{
			SType = sType;
			PNext = pNext;
			PageableDeviceLocalMemory = pageableDeviceLocalMemory;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceShaderCorePropertiesARM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceShaderCorePropertiesARM
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pixelRate")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PixelRate;
		[NativeName(NativeNameType.Field, "texelRate")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint TexelRate;
		[NativeName(NativeNameType.Field, "fmaRate")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FmaRate;

		public unsafe VkPhysicalDeviceShaderCorePropertiesARM(VkStructureType sType = default, void* pNext = default, uint pixelRate = default, uint texelRate = default, uint fmaRate = default)
		{
			SType = sType;
			PNext = pNext;
			PixelRate = pixelRate;
			TexelRate = texelRate;
			FmaRate = fmaRate;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "imageSlicedViewOf3D")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ImageSlicedViewOf3D;

		public unsafe VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint imageSlicedViewOf3D = default)
		{
			SType = sType;
			PNext = pNext;
			ImageSlicedViewOf3D = imageSlicedViewOf3D;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImageViewSlicedCreateInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageViewSlicedCreateInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "sliceOffset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SliceOffset;
		[NativeName(NativeNameType.Field, "sliceCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SliceCount;

		public unsafe VkImageViewSlicedCreateInfoEXT(VkStructureType sType = default, void* pNext = default, uint sliceOffset = default, uint sliceCount = default)
		{
			SType = sType;
			PNext = pNext;
			SliceOffset = sliceOffset;
			SliceCount = sliceCount;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "descriptorSetHostMapping")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DescriptorSetHostMapping;

		public unsafe VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(VkStructureType sType = default, void* pNext = default, uint descriptorSetHostMapping = default)
		{
			SType = sType;
			PNext = pNext;
			DescriptorSetHostMapping = descriptorSetHostMapping;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDescriptorSetBindingReferenceVALVE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDescriptorSetBindingReferenceVALVE
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "descriptorSetLayout")]
		[NativeName(NativeNameType.Type, "VkDescriptorSetLayout")]
		public VkDescriptorSetLayout DescriptorSetLayout;
		[NativeName(NativeNameType.Field, "binding")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Binding;

		public unsafe VkDescriptorSetBindingReferenceVALVE(VkStructureType sType = default, void* pNext = default, VkDescriptorSetLayout descriptorSetLayout = default, uint binding = default)
		{
			SType = sType;
			PNext = pNext;
			DescriptorSetLayout = descriptorSetLayout;
			Binding = binding;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDescriptorSetLayoutHostMappingInfoVALVE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDescriptorSetLayoutHostMappingInfoVALVE
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "descriptorOffset")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong DescriptorOffset;
		[NativeName(NativeNameType.Field, "descriptorSize")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DescriptorSize;

		public unsafe VkDescriptorSetLayoutHostMappingInfoVALVE(VkStructureType sType = default, void* pNext = default, ulong descriptorOffset = default, uint descriptorSize = default)
		{
			SType = sType;
			PNext = pNext;
			DescriptorOffset = descriptorOffset;
			DescriptorSize = descriptorSize;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceDepthClampZeroOneFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceDepthClampZeroOneFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "depthClampZeroOne")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DepthClampZeroOne;

		public unsafe VkPhysicalDeviceDepthClampZeroOneFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint depthClampZeroOne = default)
		{
			SType = sType;
			PNext = pNext;
			DepthClampZeroOne = depthClampZeroOne;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "nonSeamlessCubeMap")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint NonSeamlessCubeMap;

		public unsafe VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint nonSeamlessCubeMap = default)
		{
			SType = sType;
			PNext = pNext;
			NonSeamlessCubeMap = nonSeamlessCubeMap;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "fragmentDensityMapOffset")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint FragmentDensityMapOffset;

		public unsafe VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(VkStructureType sType = default, void* pNext = default, uint fragmentDensityMapOffset = default)
		{
			SType = sType;
			PNext = pNext;
			FragmentDensityMapOffset = fragmentDensityMapOffset;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "fragmentDensityOffsetGranularity")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D FragmentDensityOffsetGranularity;

		public unsafe VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(VkStructureType sType = default, void* pNext = default, VkExtent2D fragmentDensityOffsetGranularity = default)
		{
			SType = sType;
			PNext = pNext;
			FragmentDensityOffsetGranularity = fragmentDensityOffsetGranularity;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSubpassFragmentDensityMapOffsetEndInfoQCOM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSubpassFragmentDensityMapOffsetEndInfoQCOM
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "fragmentDensityOffsetCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FragmentDensityOffsetCount;
		[NativeName(NativeNameType.Field, "pFragmentDensityOffsets")]
		[NativeName(NativeNameType.Type, "const VkOffset2D*")]
		public unsafe VkOffset2D* PFragmentDensityOffsets;

		public unsafe VkSubpassFragmentDensityMapOffsetEndInfoQCOM(VkStructureType sType = default, void* pNext = default, uint fragmentDensityOffsetCount = default, VkOffset2D* pFragmentDensityOffsets = default)
		{
			SType = sType;
			PNext = pNext;
			FragmentDensityOffsetCount = fragmentDensityOffsetCount;
			PFragmentDensityOffsets = pFragmentDensityOffsets;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkCopyMemoryIndirectCommandNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkCopyMemoryIndirectCommandNV
	{
		[NativeName(NativeNameType.Field, "srcAddress")]
		[NativeName(NativeNameType.Type, "VkDeviceAddress")]
		public ulong SrcAddress;
		[NativeName(NativeNameType.Field, "dstAddress")]
		[NativeName(NativeNameType.Type, "VkDeviceAddress")]
		public ulong DstAddress;
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Size;

		public unsafe VkCopyMemoryIndirectCommandNV(ulong srcAddress = default, ulong dstAddress = default, ulong size = default)
		{
			SrcAddress = srcAddress;
			DstAddress = dstAddress;
			Size = size;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkCopyMemoryToImageIndirectCommandNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkCopyMemoryToImageIndirectCommandNV
	{
		[NativeName(NativeNameType.Field, "srcAddress")]
		[NativeName(NativeNameType.Type, "VkDeviceAddress")]
		public ulong SrcAddress;
		[NativeName(NativeNameType.Field, "bufferRowLength")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BufferRowLength;
		[NativeName(NativeNameType.Field, "bufferImageHeight")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BufferImageHeight;
		[NativeName(NativeNameType.Field, "imageSubresource")]
		[NativeName(NativeNameType.Type, "VkImageSubresourceLayers")]
		public VkImageSubresourceLayers ImageSubresource;
		[NativeName(NativeNameType.Field, "imageOffset")]
		[NativeName(NativeNameType.Type, "VkOffset3D")]
		public VkOffset3D ImageOffset;
		[NativeName(NativeNameType.Field, "imageExtent")]
		[NativeName(NativeNameType.Type, "VkExtent3D")]
		public VkExtent3D ImageExtent;

		public unsafe VkCopyMemoryToImageIndirectCommandNV(ulong srcAddress = default, uint bufferRowLength = default, uint bufferImageHeight = default, VkImageSubresourceLayers imageSubresource = default, VkOffset3D imageOffset = default, VkExtent3D imageExtent = default)
		{
			SrcAddress = srcAddress;
			BufferRowLength = bufferRowLength;
			BufferImageHeight = bufferImageHeight;
			ImageSubresource = imageSubresource;
			ImageOffset = imageOffset;
			ImageExtent = imageExtent;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceCopyMemoryIndirectFeaturesNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceCopyMemoryIndirectFeaturesNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "indirectCopy")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IndirectCopy;

		public unsafe VkPhysicalDeviceCopyMemoryIndirectFeaturesNV(VkStructureType sType = default, void* pNext = default, uint indirectCopy = default)
		{
			SType = sType;
			PNext = pNext;
			IndirectCopy = indirectCopy;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceCopyMemoryIndirectPropertiesNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceCopyMemoryIndirectPropertiesNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "supportedQueues")]
		[NativeName(NativeNameType.Type, "VkQueueFlags")]
		public uint SupportedQueues;

		public unsafe VkPhysicalDeviceCopyMemoryIndirectPropertiesNV(VkStructureType sType = default, void* pNext = default, uint supportedQueues = default)
		{
			SType = sType;
			PNext = pNext;
			SupportedQueues = supportedQueues;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDecompressMemoryRegionNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDecompressMemoryRegionNV
	{
		[NativeName(NativeNameType.Field, "srcAddress")]
		[NativeName(NativeNameType.Type, "VkDeviceAddress")]
		public ulong SrcAddress;
		[NativeName(NativeNameType.Field, "dstAddress")]
		[NativeName(NativeNameType.Type, "VkDeviceAddress")]
		public ulong DstAddress;
		[NativeName(NativeNameType.Field, "compressedSize")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong CompressedSize;
		[NativeName(NativeNameType.Field, "decompressedSize")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong DecompressedSize;
		[NativeName(NativeNameType.Field, "decompressionMethod")]
		[NativeName(NativeNameType.Type, "VkMemoryDecompressionMethodFlagsNV")]
		public uint DecompressionMethod;

		public unsafe VkDecompressMemoryRegionNV(ulong srcAddress = default, ulong dstAddress = default, ulong compressedSize = default, ulong decompressedSize = default, uint decompressionMethod = default)
		{
			SrcAddress = srcAddress;
			DstAddress = dstAddress;
			CompressedSize = compressedSize;
			DecompressedSize = decompressedSize;
			DecompressionMethod = decompressionMethod;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceMemoryDecompressionFeaturesNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceMemoryDecompressionFeaturesNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "memoryDecompression")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint MemoryDecompression;

		public unsafe VkPhysicalDeviceMemoryDecompressionFeaturesNV(VkStructureType sType = default, void* pNext = default, uint memoryDecompression = default)
		{
			SType = sType;
			PNext = pNext;
			MemoryDecompression = memoryDecompression;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceMemoryDecompressionPropertiesNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceMemoryDecompressionPropertiesNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "decompressionMethods")]
		[NativeName(NativeNameType.Type, "VkMemoryDecompressionMethodFlagsNV")]
		public uint DecompressionMethods;
		[NativeName(NativeNameType.Field, "maxDecompressionIndirectCount")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong MaxDecompressionIndirectCount;

		public unsafe VkPhysicalDeviceMemoryDecompressionPropertiesNV(VkStructureType sType = default, void* pNext = default, uint decompressionMethods = default, ulong maxDecompressionIndirectCount = default)
		{
			SType = sType;
			PNext = pNext;
			DecompressionMethods = decompressionMethods;
			MaxDecompressionIndirectCount = maxDecompressionIndirectCount;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceLinearColorAttachmentFeaturesNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "linearColorAttachment")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint LinearColorAttachment;

		public unsafe VkPhysicalDeviceLinearColorAttachmentFeaturesNV(VkStructureType sType = default, void* pNext = default, uint linearColorAttachment = default)
		{
			SType = sType;
			PNext = pNext;
			LinearColorAttachment = linearColorAttachment;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "imageCompressionControlSwapchain")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ImageCompressionControlSwapchain;

		public unsafe VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint imageCompressionControlSwapchain = default)
		{
			SType = sType;
			PNext = pNext;
			ImageCompressionControlSwapchain = imageCompressionControlSwapchain;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImageViewSampleWeightCreateInfoQCOM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageViewSampleWeightCreateInfoQCOM
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "filterCenter")]
		[NativeName(NativeNameType.Type, "VkOffset2D")]
		public VkOffset2D FilterCenter;
		[NativeName(NativeNameType.Field, "filterSize")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D FilterSize;
		[NativeName(NativeNameType.Field, "numPhases")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NumPhases;

		public unsafe VkImageViewSampleWeightCreateInfoQCOM(VkStructureType sType = default, void* pNext = default, VkOffset2D filterCenter = default, VkExtent2D filterSize = default, uint numPhases = default)
		{
			SType = sType;
			PNext = pNext;
			FilterCenter = filterCenter;
			FilterSize = filterSize;
			NumPhases = numPhases;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceImageProcessingFeaturesQCOM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceImageProcessingFeaturesQCOM
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "textureSampleWeighted")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint TextureSampleWeighted;
		[NativeName(NativeNameType.Field, "textureBoxFilter")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint TextureBoxFilter;
		[NativeName(NativeNameType.Field, "textureBlockMatch")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint TextureBlockMatch;

		public unsafe VkPhysicalDeviceImageProcessingFeaturesQCOM(VkStructureType sType = default, void* pNext = default, uint textureSampleWeighted = default, uint textureBoxFilter = default, uint textureBlockMatch = default)
		{
			SType = sType;
			PNext = pNext;
			TextureSampleWeighted = textureSampleWeighted;
			TextureBoxFilter = textureBoxFilter;
			TextureBlockMatch = textureBlockMatch;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceImageProcessingPropertiesQCOM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceImageProcessingPropertiesQCOM
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "maxWeightFilterPhases")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxWeightFilterPhases;
		[NativeName(NativeNameType.Field, "maxWeightFilterDimension")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D MaxWeightFilterDimension;
		[NativeName(NativeNameType.Field, "maxBlockMatchRegion")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D MaxBlockMatchRegion;
		[NativeName(NativeNameType.Field, "maxBoxFilterBlockSize")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D MaxBoxFilterBlockSize;

		public unsafe VkPhysicalDeviceImageProcessingPropertiesQCOM(VkStructureType sType = default, void* pNext = default, uint maxWeightFilterPhases = default, VkExtent2D maxWeightFilterDimension = default, VkExtent2D maxBlockMatchRegion = default, VkExtent2D maxBoxFilterBlockSize = default)
		{
			SType = sType;
			PNext = pNext;
			MaxWeightFilterPhases = maxWeightFilterPhases;
			MaxWeightFilterDimension = maxWeightFilterDimension;
			MaxBlockMatchRegion = maxBlockMatchRegion;
			MaxBoxFilterBlockSize = maxBoxFilterBlockSize;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceExtendedDynamicState3FeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "extendedDynamicState3TessellationDomainOrigin")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3TessellationDomainOrigin;
		[NativeName(NativeNameType.Field, "extendedDynamicState3DepthClampEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3DepthClampEnable;
		[NativeName(NativeNameType.Field, "extendedDynamicState3PolygonMode")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3PolygonMode;
		[NativeName(NativeNameType.Field, "extendedDynamicState3RasterizationSamples")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3RasterizationSamples;
		[NativeName(NativeNameType.Field, "extendedDynamicState3SampleMask")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3SampleMask;
		[NativeName(NativeNameType.Field, "extendedDynamicState3AlphaToCoverageEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3AlphaToCoverageEnable;
		[NativeName(NativeNameType.Field, "extendedDynamicState3AlphaToOneEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3AlphaToOneEnable;
		[NativeName(NativeNameType.Field, "extendedDynamicState3LogicOpEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3LogicOpEnable;
		[NativeName(NativeNameType.Field, "extendedDynamicState3ColorBlendEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3ColorBlendEnable;
		[NativeName(NativeNameType.Field, "extendedDynamicState3ColorBlendEquation")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3ColorBlendEquation;
		[NativeName(NativeNameType.Field, "extendedDynamicState3ColorWriteMask")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3ColorWriteMask;
		[NativeName(NativeNameType.Field, "extendedDynamicState3RasterizationStream")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3RasterizationStream;
		[NativeName(NativeNameType.Field, "extendedDynamicState3ConservativeRasterizationMode")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3ConservativeRasterizationMode;
		[NativeName(NativeNameType.Field, "extendedDynamicState3ExtraPrimitiveOverestimationSize")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3ExtraPrimitiveOverestimationSize;
		[NativeName(NativeNameType.Field, "extendedDynamicState3DepthClipEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3DepthClipEnable;
		[NativeName(NativeNameType.Field, "extendedDynamicState3SampleLocationsEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3SampleLocationsEnable;
		[NativeName(NativeNameType.Field, "extendedDynamicState3ColorBlendAdvanced")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3ColorBlendAdvanced;
		[NativeName(NativeNameType.Field, "extendedDynamicState3ProvokingVertexMode")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3ProvokingVertexMode;
		[NativeName(NativeNameType.Field, "extendedDynamicState3LineRasterizationMode")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3LineRasterizationMode;
		[NativeName(NativeNameType.Field, "extendedDynamicState3LineStippleEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3LineStippleEnable;
		[NativeName(NativeNameType.Field, "extendedDynamicState3DepthClipNegativeOneToOne")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3DepthClipNegativeOneToOne;
		[NativeName(NativeNameType.Field, "extendedDynamicState3ViewportWScalingEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3ViewportWScalingEnable;
		[NativeName(NativeNameType.Field, "extendedDynamicState3ViewportSwizzle")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3ViewportSwizzle;
		[NativeName(NativeNameType.Field, "extendedDynamicState3CoverageToColorEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3CoverageToColorEnable;
		[NativeName(NativeNameType.Field, "extendedDynamicState3CoverageToColorLocation")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3CoverageToColorLocation;
		[NativeName(NativeNameType.Field, "extendedDynamicState3CoverageModulationMode")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3CoverageModulationMode;
		[NativeName(NativeNameType.Field, "extendedDynamicState3CoverageModulationTableEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3CoverageModulationTableEnable;
		[NativeName(NativeNameType.Field, "extendedDynamicState3CoverageModulationTable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3CoverageModulationTable;
		[NativeName(NativeNameType.Field, "extendedDynamicState3CoverageReductionMode")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3CoverageReductionMode;
		[NativeName(NativeNameType.Field, "extendedDynamicState3RepresentativeFragmentTestEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3RepresentativeFragmentTestEnable;
		[NativeName(NativeNameType.Field, "extendedDynamicState3ShadingRateImageEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ExtendedDynamicState3ShadingRateImageEnable;

		public unsafe VkPhysicalDeviceExtendedDynamicState3FeaturesEXT(VkStructureType sType = default, void* pNext = default, uint extendedDynamicState3TessellationDomainOrigin = default, uint extendedDynamicState3DepthClampEnable = default, uint extendedDynamicState3PolygonMode = default, uint extendedDynamicState3RasterizationSamples = default, uint extendedDynamicState3SampleMask = default, uint extendedDynamicState3AlphaToCoverageEnable = default, uint extendedDynamicState3AlphaToOneEnable = default, uint extendedDynamicState3LogicOpEnable = default, uint extendedDynamicState3ColorBlendEnable = default, uint extendedDynamicState3ColorBlendEquation = default, uint extendedDynamicState3ColorWriteMask = default, uint extendedDynamicState3RasterizationStream = default, uint extendedDynamicState3ConservativeRasterizationMode = default, uint extendedDynamicState3ExtraPrimitiveOverestimationSize = default, uint extendedDynamicState3DepthClipEnable = default, uint extendedDynamicState3SampleLocationsEnable = default, uint extendedDynamicState3ColorBlendAdvanced = default, uint extendedDynamicState3ProvokingVertexMode = default, uint extendedDynamicState3LineRasterizationMode = default, uint extendedDynamicState3LineStippleEnable = default, uint extendedDynamicState3DepthClipNegativeOneToOne = default, uint extendedDynamicState3ViewportWScalingEnable = default, uint extendedDynamicState3ViewportSwizzle = default, uint extendedDynamicState3CoverageToColorEnable = default, uint extendedDynamicState3CoverageToColorLocation = default, uint extendedDynamicState3CoverageModulationMode = default, uint extendedDynamicState3CoverageModulationTableEnable = default, uint extendedDynamicState3CoverageModulationTable = default, uint extendedDynamicState3CoverageReductionMode = default, uint extendedDynamicState3RepresentativeFragmentTestEnable = default, uint extendedDynamicState3ShadingRateImageEnable = default)
		{
			SType = sType;
			PNext = pNext;
			ExtendedDynamicState3TessellationDomainOrigin = extendedDynamicState3TessellationDomainOrigin;
			ExtendedDynamicState3DepthClampEnable = extendedDynamicState3DepthClampEnable;
			ExtendedDynamicState3PolygonMode = extendedDynamicState3PolygonMode;
			ExtendedDynamicState3RasterizationSamples = extendedDynamicState3RasterizationSamples;
			ExtendedDynamicState3SampleMask = extendedDynamicState3SampleMask;
			ExtendedDynamicState3AlphaToCoverageEnable = extendedDynamicState3AlphaToCoverageEnable;
			ExtendedDynamicState3AlphaToOneEnable = extendedDynamicState3AlphaToOneEnable;
			ExtendedDynamicState3LogicOpEnable = extendedDynamicState3LogicOpEnable;
			ExtendedDynamicState3ColorBlendEnable = extendedDynamicState3ColorBlendEnable;
			ExtendedDynamicState3ColorBlendEquation = extendedDynamicState3ColorBlendEquation;
			ExtendedDynamicState3ColorWriteMask = extendedDynamicState3ColorWriteMask;
			ExtendedDynamicState3RasterizationStream = extendedDynamicState3RasterizationStream;
			ExtendedDynamicState3ConservativeRasterizationMode = extendedDynamicState3ConservativeRasterizationMode;
			ExtendedDynamicState3ExtraPrimitiveOverestimationSize = extendedDynamicState3ExtraPrimitiveOverestimationSize;
			ExtendedDynamicState3DepthClipEnable = extendedDynamicState3DepthClipEnable;
			ExtendedDynamicState3SampleLocationsEnable = extendedDynamicState3SampleLocationsEnable;
			ExtendedDynamicState3ColorBlendAdvanced = extendedDynamicState3ColorBlendAdvanced;
			ExtendedDynamicState3ProvokingVertexMode = extendedDynamicState3ProvokingVertexMode;
			ExtendedDynamicState3LineRasterizationMode = extendedDynamicState3LineRasterizationMode;
			ExtendedDynamicState3LineStippleEnable = extendedDynamicState3LineStippleEnable;
			ExtendedDynamicState3DepthClipNegativeOneToOne = extendedDynamicState3DepthClipNegativeOneToOne;
			ExtendedDynamicState3ViewportWScalingEnable = extendedDynamicState3ViewportWScalingEnable;
			ExtendedDynamicState3ViewportSwizzle = extendedDynamicState3ViewportSwizzle;
			ExtendedDynamicState3CoverageToColorEnable = extendedDynamicState3CoverageToColorEnable;
			ExtendedDynamicState3CoverageToColorLocation = extendedDynamicState3CoverageToColorLocation;
			ExtendedDynamicState3CoverageModulationMode = extendedDynamicState3CoverageModulationMode;
			ExtendedDynamicState3CoverageModulationTableEnable = extendedDynamicState3CoverageModulationTableEnable;
			ExtendedDynamicState3CoverageModulationTable = extendedDynamicState3CoverageModulationTable;
			ExtendedDynamicState3CoverageReductionMode = extendedDynamicState3CoverageReductionMode;
			ExtendedDynamicState3RepresentativeFragmentTestEnable = extendedDynamicState3RepresentativeFragmentTestEnable;
			ExtendedDynamicState3ShadingRateImageEnable = extendedDynamicState3ShadingRateImageEnable;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceExtendedDynamicState3PropertiesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceExtendedDynamicState3PropertiesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "dynamicPrimitiveTopologyUnrestricted")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DynamicPrimitiveTopologyUnrestricted;

		public unsafe VkPhysicalDeviceExtendedDynamicState3PropertiesEXT(VkStructureType sType = default, void* pNext = default, uint dynamicPrimitiveTopologyUnrestricted = default)
		{
			SType = sType;
			PNext = pNext;
			DynamicPrimitiveTopologyUnrestricted = dynamicPrimitiveTopologyUnrestricted;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkColorBlendEquationEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkColorBlendEquationEXT
	{
		[NativeName(NativeNameType.Field, "srcColorBlendFactor")]
		[NativeName(NativeNameType.Type, "VkBlendFactor")]
		public VkBlendFactor SrcColorBlendFactor;
		[NativeName(NativeNameType.Field, "dstColorBlendFactor")]
		[NativeName(NativeNameType.Type, "VkBlendFactor")]
		public VkBlendFactor DstColorBlendFactor;
		[NativeName(NativeNameType.Field, "colorBlendOp")]
		[NativeName(NativeNameType.Type, "VkBlendOp")]
		public VkBlendOp ColorBlendOp;
		[NativeName(NativeNameType.Field, "srcAlphaBlendFactor")]
		[NativeName(NativeNameType.Type, "VkBlendFactor")]
		public VkBlendFactor SrcAlphaBlendFactor;
		[NativeName(NativeNameType.Field, "dstAlphaBlendFactor")]
		[NativeName(NativeNameType.Type, "VkBlendFactor")]
		public VkBlendFactor DstAlphaBlendFactor;
		[NativeName(NativeNameType.Field, "alphaBlendOp")]
		[NativeName(NativeNameType.Type, "VkBlendOp")]
		public VkBlendOp AlphaBlendOp;

		public unsafe VkColorBlendEquationEXT(VkBlendFactor srcColorBlendFactor = default, VkBlendFactor dstColorBlendFactor = default, VkBlendOp colorBlendOp = default, VkBlendFactor srcAlphaBlendFactor = default, VkBlendFactor dstAlphaBlendFactor = default, VkBlendOp alphaBlendOp = default)
		{
			SrcColorBlendFactor = srcColorBlendFactor;
			DstColorBlendFactor = dstColorBlendFactor;
			ColorBlendOp = colorBlendOp;
			SrcAlphaBlendFactor = srcAlphaBlendFactor;
			DstAlphaBlendFactor = dstAlphaBlendFactor;
			AlphaBlendOp = alphaBlendOp;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkColorBlendAdvancedEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkColorBlendAdvancedEXT
	{
		[NativeName(NativeNameType.Field, "advancedBlendOp")]
		[NativeName(NativeNameType.Type, "VkBlendOp")]
		public VkBlendOp AdvancedBlendOp;
		[NativeName(NativeNameType.Field, "srcPremultiplied")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint SrcPremultiplied;
		[NativeName(NativeNameType.Field, "dstPremultiplied")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DstPremultiplied;
		[NativeName(NativeNameType.Field, "blendOverlap")]
		[NativeName(NativeNameType.Type, "VkBlendOverlapEXT")]
		public VkBlendOverlapEXT BlendOverlap;
		[NativeName(NativeNameType.Field, "clampResults")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ClampResults;

		public unsafe VkColorBlendAdvancedEXT(VkBlendOp advancedBlendOp = default, uint srcPremultiplied = default, uint dstPremultiplied = default, VkBlendOverlapEXT blendOverlap = default, uint clampResults = default)
		{
			AdvancedBlendOp = advancedBlendOp;
			SrcPremultiplied = srcPremultiplied;
			DstPremultiplied = dstPremultiplied;
			BlendOverlap = blendOverlap;
			ClampResults = clampResults;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "subpassMergeFeedback")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint SubpassMergeFeedback;

		public unsafe VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint subpassMergeFeedback = default)
		{
			SType = sType;
			PNext = pNext;
			SubpassMergeFeedback = subpassMergeFeedback;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkRenderPassCreationControlEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkRenderPassCreationControlEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "disallowMerging")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DisallowMerging;

		public unsafe VkRenderPassCreationControlEXT(VkStructureType sType = default, void* pNext = default, uint disallowMerging = default)
		{
			SType = sType;
			PNext = pNext;
			DisallowMerging = disallowMerging;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkRenderPassCreationFeedbackInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkRenderPassCreationFeedbackInfoEXT
	{
		[NativeName(NativeNameType.Field, "postMergeSubpassCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PostMergeSubpassCount;

		public unsafe VkRenderPassCreationFeedbackInfoEXT(uint postMergeSubpassCount = default)
		{
			PostMergeSubpassCount = postMergeSubpassCount;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkRenderPassCreationFeedbackCreateInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkRenderPassCreationFeedbackCreateInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pRenderPassFeedback")]
		[NativeName(NativeNameType.Type, "VkRenderPassCreationFeedbackInfoEXT*")]
		public unsafe VkRenderPassCreationFeedbackInfoEXT* PRenderPassFeedback;

		public unsafe VkRenderPassCreationFeedbackCreateInfoEXT(VkStructureType sType = default, void* pNext = default, VkRenderPassCreationFeedbackInfoEXT* pRenderPassFeedback = default)
		{
			SType = sType;
			PNext = pNext;
			PRenderPassFeedback = pRenderPassFeedback;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkRenderPassSubpassFeedbackInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkRenderPassSubpassFeedbackInfoEXT
	{
		[NativeName(NativeNameType.Field, "subpassMergeStatus")]
		[NativeName(NativeNameType.Type, "VkSubpassMergeStatusEXT")]
		public VkSubpassMergeStatusEXT SubpassMergeStatus;
		[NativeName(NativeNameType.Field, "description")]
		[NativeName(NativeNameType.Type, "char[256]")]
		public byte Description_0;
		public byte Description_1;
		public byte Description_2;
		public byte Description_3;
		public byte Description_4;
		public byte Description_5;
		public byte Description_6;
		public byte Description_7;
		public byte Description_8;
		public byte Description_9;
		public byte Description_10;
		public byte Description_11;
		public byte Description_12;
		public byte Description_13;
		public byte Description_14;
		public byte Description_15;
		public byte Description_16;
		public byte Description_17;
		public byte Description_18;
		public byte Description_19;
		public byte Description_20;
		public byte Description_21;
		public byte Description_22;
		public byte Description_23;
		public byte Description_24;
		public byte Description_25;
		public byte Description_26;
		public byte Description_27;
		public byte Description_28;
		public byte Description_29;
		public byte Description_30;
		public byte Description_31;
		public byte Description_32;
		public byte Description_33;
		public byte Description_34;
		public byte Description_35;
		public byte Description_36;
		public byte Description_37;
		public byte Description_38;
		public byte Description_39;
		public byte Description_40;
		public byte Description_41;
		public byte Description_42;
		public byte Description_43;
		public byte Description_44;
		public byte Description_45;
		public byte Description_46;
		public byte Description_47;
		public byte Description_48;
		public byte Description_49;
		public byte Description_50;
		public byte Description_51;
		public byte Description_52;
		public byte Description_53;
		public byte Description_54;
		public byte Description_55;
		public byte Description_56;
		public byte Description_57;
		public byte Description_58;
		public byte Description_59;
		public byte Description_60;
		public byte Description_61;
		public byte Description_62;
		public byte Description_63;
		public byte Description_64;
		public byte Description_65;
		public byte Description_66;
		public byte Description_67;
		public byte Description_68;
		public byte Description_69;
		public byte Description_70;
		public byte Description_71;
		public byte Description_72;
		public byte Description_73;
		public byte Description_74;
		public byte Description_75;
		public byte Description_76;
		public byte Description_77;
		public byte Description_78;
		public byte Description_79;
		public byte Description_80;
		public byte Description_81;
		public byte Description_82;
		public byte Description_83;
		public byte Description_84;
		public byte Description_85;
		public byte Description_86;
		public byte Description_87;
		public byte Description_88;
		public byte Description_89;
		public byte Description_90;
		public byte Description_91;
		public byte Description_92;
		public byte Description_93;
		public byte Description_94;
		public byte Description_95;
		public byte Description_96;
		public byte Description_97;
		public byte Description_98;
		public byte Description_99;
		public byte Description_100;
		public byte Description_101;
		public byte Description_102;
		public byte Description_103;
		public byte Description_104;
		public byte Description_105;
		public byte Description_106;
		public byte Description_107;
		public byte Description_108;
		public byte Description_109;
		public byte Description_110;
		public byte Description_111;
		public byte Description_112;
		public byte Description_113;
		public byte Description_114;
		public byte Description_115;
		public byte Description_116;
		public byte Description_117;
		public byte Description_118;
		public byte Description_119;
		public byte Description_120;
		public byte Description_121;
		public byte Description_122;
		public byte Description_123;
		public byte Description_124;
		public byte Description_125;
		public byte Description_126;
		public byte Description_127;
		public byte Description_128;
		public byte Description_129;
		public byte Description_130;
		public byte Description_131;
		public byte Description_132;
		public byte Description_133;
		public byte Description_134;
		public byte Description_135;
		public byte Description_136;
		public byte Description_137;
		public byte Description_138;
		public byte Description_139;
		public byte Description_140;
		public byte Description_141;
		public byte Description_142;
		public byte Description_143;
		public byte Description_144;
		public byte Description_145;
		public byte Description_146;
		public byte Description_147;
		public byte Description_148;
		public byte Description_149;
		public byte Description_150;
		public byte Description_151;
		public byte Description_152;
		public byte Description_153;
		public byte Description_154;
		public byte Description_155;
		public byte Description_156;
		public byte Description_157;
		public byte Description_158;
		public byte Description_159;
		public byte Description_160;
		public byte Description_161;
		public byte Description_162;
		public byte Description_163;
		public byte Description_164;
		public byte Description_165;
		public byte Description_166;
		public byte Description_167;
		public byte Description_168;
		public byte Description_169;
		public byte Description_170;
		public byte Description_171;
		public byte Description_172;
		public byte Description_173;
		public byte Description_174;
		public byte Description_175;
		public byte Description_176;
		public byte Description_177;
		public byte Description_178;
		public byte Description_179;
		public byte Description_180;
		public byte Description_181;
		public byte Description_182;
		public byte Description_183;
		public byte Description_184;
		public byte Description_185;
		public byte Description_186;
		public byte Description_187;
		public byte Description_188;
		public byte Description_189;
		public byte Description_190;
		public byte Description_191;
		public byte Description_192;
		public byte Description_193;
		public byte Description_194;
		public byte Description_195;
		public byte Description_196;
		public byte Description_197;
		public byte Description_198;
		public byte Description_199;
		public byte Description_200;
		public byte Description_201;
		public byte Description_202;
		public byte Description_203;
		public byte Description_204;
		public byte Description_205;
		public byte Description_206;
		public byte Description_207;
		public byte Description_208;
		public byte Description_209;
		public byte Description_210;
		public byte Description_211;
		public byte Description_212;
		public byte Description_213;
		public byte Description_214;
		public byte Description_215;
		public byte Description_216;
		public byte Description_217;
		public byte Description_218;
		public byte Description_219;
		public byte Description_220;
		public byte Description_221;
		public byte Description_222;
		public byte Description_223;
		public byte Description_224;
		public byte Description_225;
		public byte Description_226;
		public byte Description_227;
		public byte Description_228;
		public byte Description_229;
		public byte Description_230;
		public byte Description_231;
		public byte Description_232;
		public byte Description_233;
		public byte Description_234;
		public byte Description_235;
		public byte Description_236;
		public byte Description_237;
		public byte Description_238;
		public byte Description_239;
		public byte Description_240;
		public byte Description_241;
		public byte Description_242;
		public byte Description_243;
		public byte Description_244;
		public byte Description_245;
		public byte Description_246;
		public byte Description_247;
		public byte Description_248;
		public byte Description_249;
		public byte Description_250;
		public byte Description_251;
		public byte Description_252;
		public byte Description_253;
		public byte Description_254;
		public byte Description_255;
		[NativeName(NativeNameType.Field, "postMergeIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PostMergeIndex;

		public unsafe VkRenderPassSubpassFeedbackInfoEXT(VkSubpassMergeStatusEXT subpassMergeStatus = default, byte* description = default, uint postMergeIndex = default)
		{
			SubpassMergeStatus = subpassMergeStatus;
			if (description != default)
			{
				Description_0 = description[0];
				Description_1 = description[1];
				Description_2 = description[2];
				Description_3 = description[3];
				Description_4 = description[4];
				Description_5 = description[5];
				Description_6 = description[6];
				Description_7 = description[7];
				Description_8 = description[8];
				Description_9 = description[9];
				Description_10 = description[10];
				Description_11 = description[11];
				Description_12 = description[12];
				Description_13 = description[13];
				Description_14 = description[14];
				Description_15 = description[15];
				Description_16 = description[16];
				Description_17 = description[17];
				Description_18 = description[18];
				Description_19 = description[19];
				Description_20 = description[20];
				Description_21 = description[21];
				Description_22 = description[22];
				Description_23 = description[23];
				Description_24 = description[24];
				Description_25 = description[25];
				Description_26 = description[26];
				Description_27 = description[27];
				Description_28 = description[28];
				Description_29 = description[29];
				Description_30 = description[30];
				Description_31 = description[31];
				Description_32 = description[32];
				Description_33 = description[33];
				Description_34 = description[34];
				Description_35 = description[35];
				Description_36 = description[36];
				Description_37 = description[37];
				Description_38 = description[38];
				Description_39 = description[39];
				Description_40 = description[40];
				Description_41 = description[41];
				Description_42 = description[42];
				Description_43 = description[43];
				Description_44 = description[44];
				Description_45 = description[45];
				Description_46 = description[46];
				Description_47 = description[47];
				Description_48 = description[48];
				Description_49 = description[49];
				Description_50 = description[50];
				Description_51 = description[51];
				Description_52 = description[52];
				Description_53 = description[53];
				Description_54 = description[54];
				Description_55 = description[55];
				Description_56 = description[56];
				Description_57 = description[57];
				Description_58 = description[58];
				Description_59 = description[59];
				Description_60 = description[60];
				Description_61 = description[61];
				Description_62 = description[62];
				Description_63 = description[63];
				Description_64 = description[64];
				Description_65 = description[65];
				Description_66 = description[66];
				Description_67 = description[67];
				Description_68 = description[68];
				Description_69 = description[69];
				Description_70 = description[70];
				Description_71 = description[71];
				Description_72 = description[72];
				Description_73 = description[73];
				Description_74 = description[74];
				Description_75 = description[75];
				Description_76 = description[76];
				Description_77 = description[77];
				Description_78 = description[78];
				Description_79 = description[79];
				Description_80 = description[80];
				Description_81 = description[81];
				Description_82 = description[82];
				Description_83 = description[83];
				Description_84 = description[84];
				Description_85 = description[85];
				Description_86 = description[86];
				Description_87 = description[87];
				Description_88 = description[88];
				Description_89 = description[89];
				Description_90 = description[90];
				Description_91 = description[91];
				Description_92 = description[92];
				Description_93 = description[93];
				Description_94 = description[94];
				Description_95 = description[95];
				Description_96 = description[96];
				Description_97 = description[97];
				Description_98 = description[98];
				Description_99 = description[99];
				Description_100 = description[100];
				Description_101 = description[101];
				Description_102 = description[102];
				Description_103 = description[103];
				Description_104 = description[104];
				Description_105 = description[105];
				Description_106 = description[106];
				Description_107 = description[107];
				Description_108 = description[108];
				Description_109 = description[109];
				Description_110 = description[110];
				Description_111 = description[111];
				Description_112 = description[112];
				Description_113 = description[113];
				Description_114 = description[114];
				Description_115 = description[115];
				Description_116 = description[116];
				Description_117 = description[117];
				Description_118 = description[118];
				Description_119 = description[119];
				Description_120 = description[120];
				Description_121 = description[121];
				Description_122 = description[122];
				Description_123 = description[123];
				Description_124 = description[124];
				Description_125 = description[125];
				Description_126 = description[126];
				Description_127 = description[127];
				Description_128 = description[128];
				Description_129 = description[129];
				Description_130 = description[130];
				Description_131 = description[131];
				Description_132 = description[132];
				Description_133 = description[133];
				Description_134 = description[134];
				Description_135 = description[135];
				Description_136 = description[136];
				Description_137 = description[137];
				Description_138 = description[138];
				Description_139 = description[139];
				Description_140 = description[140];
				Description_141 = description[141];
				Description_142 = description[142];
				Description_143 = description[143];
				Description_144 = description[144];
				Description_145 = description[145];
				Description_146 = description[146];
				Description_147 = description[147];
				Description_148 = description[148];
				Description_149 = description[149];
				Description_150 = description[150];
				Description_151 = description[151];
				Description_152 = description[152];
				Description_153 = description[153];
				Description_154 = description[154];
				Description_155 = description[155];
				Description_156 = description[156];
				Description_157 = description[157];
				Description_158 = description[158];
				Description_159 = description[159];
				Description_160 = description[160];
				Description_161 = description[161];
				Description_162 = description[162];
				Description_163 = description[163];
				Description_164 = description[164];
				Description_165 = description[165];
				Description_166 = description[166];
				Description_167 = description[167];
				Description_168 = description[168];
				Description_169 = description[169];
				Description_170 = description[170];
				Description_171 = description[171];
				Description_172 = description[172];
				Description_173 = description[173];
				Description_174 = description[174];
				Description_175 = description[175];
				Description_176 = description[176];
				Description_177 = description[177];
				Description_178 = description[178];
				Description_179 = description[179];
				Description_180 = description[180];
				Description_181 = description[181];
				Description_182 = description[182];
				Description_183 = description[183];
				Description_184 = description[184];
				Description_185 = description[185];
				Description_186 = description[186];
				Description_187 = description[187];
				Description_188 = description[188];
				Description_189 = description[189];
				Description_190 = description[190];
				Description_191 = description[191];
				Description_192 = description[192];
				Description_193 = description[193];
				Description_194 = description[194];
				Description_195 = description[195];
				Description_196 = description[196];
				Description_197 = description[197];
				Description_198 = description[198];
				Description_199 = description[199];
				Description_200 = description[200];
				Description_201 = description[201];
				Description_202 = description[202];
				Description_203 = description[203];
				Description_204 = description[204];
				Description_205 = description[205];
				Description_206 = description[206];
				Description_207 = description[207];
				Description_208 = description[208];
				Description_209 = description[209];
				Description_210 = description[210];
				Description_211 = description[211];
				Description_212 = description[212];
				Description_213 = description[213];
				Description_214 = description[214];
				Description_215 = description[215];
				Description_216 = description[216];
				Description_217 = description[217];
				Description_218 = description[218];
				Description_219 = description[219];
				Description_220 = description[220];
				Description_221 = description[221];
				Description_222 = description[222];
				Description_223 = description[223];
				Description_224 = description[224];
				Description_225 = description[225];
				Description_226 = description[226];
				Description_227 = description[227];
				Description_228 = description[228];
				Description_229 = description[229];
				Description_230 = description[230];
				Description_231 = description[231];
				Description_232 = description[232];
				Description_233 = description[233];
				Description_234 = description[234];
				Description_235 = description[235];
				Description_236 = description[236];
				Description_237 = description[237];
				Description_238 = description[238];
				Description_239 = description[239];
				Description_240 = description[240];
				Description_241 = description[241];
				Description_242 = description[242];
				Description_243 = description[243];
				Description_244 = description[244];
				Description_245 = description[245];
				Description_246 = description[246];
				Description_247 = description[247];
				Description_248 = description[248];
				Description_249 = description[249];
				Description_250 = description[250];
				Description_251 = description[251];
				Description_252 = description[252];
				Description_253 = description[253];
				Description_254 = description[254];
				Description_255 = description[255];
			}
			PostMergeIndex = postMergeIndex;
		}

		public unsafe VkRenderPassSubpassFeedbackInfoEXT(VkSubpassMergeStatusEXT subpassMergeStatus = default, Span<byte> description = default, uint postMergeIndex = default)
		{
			SubpassMergeStatus = subpassMergeStatus;
			if (description != default)
			{
				Description_0 = description[0];
				Description_1 = description[1];
				Description_2 = description[2];
				Description_3 = description[3];
				Description_4 = description[4];
				Description_5 = description[5];
				Description_6 = description[6];
				Description_7 = description[7];
				Description_8 = description[8];
				Description_9 = description[9];
				Description_10 = description[10];
				Description_11 = description[11];
				Description_12 = description[12];
				Description_13 = description[13];
				Description_14 = description[14];
				Description_15 = description[15];
				Description_16 = description[16];
				Description_17 = description[17];
				Description_18 = description[18];
				Description_19 = description[19];
				Description_20 = description[20];
				Description_21 = description[21];
				Description_22 = description[22];
				Description_23 = description[23];
				Description_24 = description[24];
				Description_25 = description[25];
				Description_26 = description[26];
				Description_27 = description[27];
				Description_28 = description[28];
				Description_29 = description[29];
				Description_30 = description[30];
				Description_31 = description[31];
				Description_32 = description[32];
				Description_33 = description[33];
				Description_34 = description[34];
				Description_35 = description[35];
				Description_36 = description[36];
				Description_37 = description[37];
				Description_38 = description[38];
				Description_39 = description[39];
				Description_40 = description[40];
				Description_41 = description[41];
				Description_42 = description[42];
				Description_43 = description[43];
				Description_44 = description[44];
				Description_45 = description[45];
				Description_46 = description[46];
				Description_47 = description[47];
				Description_48 = description[48];
				Description_49 = description[49];
				Description_50 = description[50];
				Description_51 = description[51];
				Description_52 = description[52];
				Description_53 = description[53];
				Description_54 = description[54];
				Description_55 = description[55];
				Description_56 = description[56];
				Description_57 = description[57];
				Description_58 = description[58];
				Description_59 = description[59];
				Description_60 = description[60];
				Description_61 = description[61];
				Description_62 = description[62];
				Description_63 = description[63];
				Description_64 = description[64];
				Description_65 = description[65];
				Description_66 = description[66];
				Description_67 = description[67];
				Description_68 = description[68];
				Description_69 = description[69];
				Description_70 = description[70];
				Description_71 = description[71];
				Description_72 = description[72];
				Description_73 = description[73];
				Description_74 = description[74];
				Description_75 = description[75];
				Description_76 = description[76];
				Description_77 = description[77];
				Description_78 = description[78];
				Description_79 = description[79];
				Description_80 = description[80];
				Description_81 = description[81];
				Description_82 = description[82];
				Description_83 = description[83];
				Description_84 = description[84];
				Description_85 = description[85];
				Description_86 = description[86];
				Description_87 = description[87];
				Description_88 = description[88];
				Description_89 = description[89];
				Description_90 = description[90];
				Description_91 = description[91];
				Description_92 = description[92];
				Description_93 = description[93];
				Description_94 = description[94];
				Description_95 = description[95];
				Description_96 = description[96];
				Description_97 = description[97];
				Description_98 = description[98];
				Description_99 = description[99];
				Description_100 = description[100];
				Description_101 = description[101];
				Description_102 = description[102];
				Description_103 = description[103];
				Description_104 = description[104];
				Description_105 = description[105];
				Description_106 = description[106];
				Description_107 = description[107];
				Description_108 = description[108];
				Description_109 = description[109];
				Description_110 = description[110];
				Description_111 = description[111];
				Description_112 = description[112];
				Description_113 = description[113];
				Description_114 = description[114];
				Description_115 = description[115];
				Description_116 = description[116];
				Description_117 = description[117];
				Description_118 = description[118];
				Description_119 = description[119];
				Description_120 = description[120];
				Description_121 = description[121];
				Description_122 = description[122];
				Description_123 = description[123];
				Description_124 = description[124];
				Description_125 = description[125];
				Description_126 = description[126];
				Description_127 = description[127];
				Description_128 = description[128];
				Description_129 = description[129];
				Description_130 = description[130];
				Description_131 = description[131];
				Description_132 = description[132];
				Description_133 = description[133];
				Description_134 = description[134];
				Description_135 = description[135];
				Description_136 = description[136];
				Description_137 = description[137];
				Description_138 = description[138];
				Description_139 = description[139];
				Description_140 = description[140];
				Description_141 = description[141];
				Description_142 = description[142];
				Description_143 = description[143];
				Description_144 = description[144];
				Description_145 = description[145];
				Description_146 = description[146];
				Description_147 = description[147];
				Description_148 = description[148];
				Description_149 = description[149];
				Description_150 = description[150];
				Description_151 = description[151];
				Description_152 = description[152];
				Description_153 = description[153];
				Description_154 = description[154];
				Description_155 = description[155];
				Description_156 = description[156];
				Description_157 = description[157];
				Description_158 = description[158];
				Description_159 = description[159];
				Description_160 = description[160];
				Description_161 = description[161];
				Description_162 = description[162];
				Description_163 = description[163];
				Description_164 = description[164];
				Description_165 = description[165];
				Description_166 = description[166];
				Description_167 = description[167];
				Description_168 = description[168];
				Description_169 = description[169];
				Description_170 = description[170];
				Description_171 = description[171];
				Description_172 = description[172];
				Description_173 = description[173];
				Description_174 = description[174];
				Description_175 = description[175];
				Description_176 = description[176];
				Description_177 = description[177];
				Description_178 = description[178];
				Description_179 = description[179];
				Description_180 = description[180];
				Description_181 = description[181];
				Description_182 = description[182];
				Description_183 = description[183];
				Description_184 = description[184];
				Description_185 = description[185];
				Description_186 = description[186];
				Description_187 = description[187];
				Description_188 = description[188];
				Description_189 = description[189];
				Description_190 = description[190];
				Description_191 = description[191];
				Description_192 = description[192];
				Description_193 = description[193];
				Description_194 = description[194];
				Description_195 = description[195];
				Description_196 = description[196];
				Description_197 = description[197];
				Description_198 = description[198];
				Description_199 = description[199];
				Description_200 = description[200];
				Description_201 = description[201];
				Description_202 = description[202];
				Description_203 = description[203];
				Description_204 = description[204];
				Description_205 = description[205];
				Description_206 = description[206];
				Description_207 = description[207];
				Description_208 = description[208];
				Description_209 = description[209];
				Description_210 = description[210];
				Description_211 = description[211];
				Description_212 = description[212];
				Description_213 = description[213];
				Description_214 = description[214];
				Description_215 = description[215];
				Description_216 = description[216];
				Description_217 = description[217];
				Description_218 = description[218];
				Description_219 = description[219];
				Description_220 = description[220];
				Description_221 = description[221];
				Description_222 = description[222];
				Description_223 = description[223];
				Description_224 = description[224];
				Description_225 = description[225];
				Description_226 = description[226];
				Description_227 = description[227];
				Description_228 = description[228];
				Description_229 = description[229];
				Description_230 = description[230];
				Description_231 = description[231];
				Description_232 = description[232];
				Description_233 = description[233];
				Description_234 = description[234];
				Description_235 = description[235];
				Description_236 = description[236];
				Description_237 = description[237];
				Description_238 = description[238];
				Description_239 = description[239];
				Description_240 = description[240];
				Description_241 = description[241];
				Description_242 = description[242];
				Description_243 = description[243];
				Description_244 = description[244];
				Description_245 = description[245];
				Description_246 = description[246];
				Description_247 = description[247];
				Description_248 = description[248];
				Description_249 = description[249];
				Description_250 = description[250];
				Description_251 = description[251];
				Description_252 = description[252];
				Description_253 = description[253];
				Description_254 = description[254];
				Description_255 = description[255];
			}
			PostMergeIndex = postMergeIndex;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkRenderPassSubpassFeedbackCreateInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkRenderPassSubpassFeedbackCreateInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pSubpassFeedback")]
		[NativeName(NativeNameType.Type, "VkRenderPassSubpassFeedbackInfoEXT*")]
		public unsafe VkRenderPassSubpassFeedbackInfoEXT* PSubpassFeedback;

		public unsafe VkRenderPassSubpassFeedbackCreateInfoEXT(VkStructureType sType = default, void* pNext = default, VkRenderPassSubpassFeedbackInfoEXT* pSubpassFeedback = default)
		{
			SType = sType;
			PNext = pNext;
			PSubpassFeedback = pSubpassFeedback;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDirectDriverLoadingInfoLUNARG")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDirectDriverLoadingInfoLUNARG
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkDirectDriverLoadingFlagsLUNARG")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "pfnGetInstanceProcAddr")]
		[NativeName(NativeNameType.Type, "PFN_vkGetInstanceProcAddrLUNARG")]
		public unsafe void* PfnGetInstanceProcAddr;

		public unsafe VkDirectDriverLoadingInfoLUNARG(VkStructureType sType = default, void* pNext = default, uint flags = default, PFNVkGetInstanceProcAddrLUNARG pfnGetInstanceProcAddr = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			PfnGetInstanceProcAddr = (void*)Marshal.GetFunctionPointerForDelegate(pfnGetInstanceProcAddr);
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDirectDriverLoadingListLUNARG")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDirectDriverLoadingListLUNARG
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "mode")]
		[NativeName(NativeNameType.Type, "VkDirectDriverLoadingModeLUNARG")]
		public VkDirectDriverLoadingModeLUNARG Mode;
		[NativeName(NativeNameType.Field, "driverCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DriverCount;
		[NativeName(NativeNameType.Field, "pDrivers")]
		[NativeName(NativeNameType.Type, "const VkDirectDriverLoadingInfoLUNARG*")]
		public unsafe VkDirectDriverLoadingInfoLUNARG* PDrivers;

		public unsafe VkDirectDriverLoadingListLUNARG(VkStructureType sType = default, void* pNext = default, VkDirectDriverLoadingModeLUNARG mode = default, uint driverCount = default, VkDirectDriverLoadingInfoLUNARG* pDrivers = default)
		{
			SType = sType;
			PNext = pNext;
			Mode = mode;
			DriverCount = driverCount;
			PDrivers = pDrivers;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "shaderModuleIdentifier")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderModuleIdentifier;

		public unsafe VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint shaderModuleIdentifier = default)
		{
			SType = sType;
			PNext = pNext;
			ShaderModuleIdentifier = shaderModuleIdentifier;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "shaderModuleIdentifierAlgorithmUUID")]
		[NativeName(NativeNameType.Type, "uint8_t[16]")]
		public byte ShaderModuleIdentifierAlgorithmUUID_0;
		public byte ShaderModuleIdentifierAlgorithmUUID_1;
		public byte ShaderModuleIdentifierAlgorithmUUID_2;
		public byte ShaderModuleIdentifierAlgorithmUUID_3;
		public byte ShaderModuleIdentifierAlgorithmUUID_4;
		public byte ShaderModuleIdentifierAlgorithmUUID_5;
		public byte ShaderModuleIdentifierAlgorithmUUID_6;
		public byte ShaderModuleIdentifierAlgorithmUUID_7;
		public byte ShaderModuleIdentifierAlgorithmUUID_8;
		public byte ShaderModuleIdentifierAlgorithmUUID_9;
		public byte ShaderModuleIdentifierAlgorithmUUID_10;
		public byte ShaderModuleIdentifierAlgorithmUUID_11;
		public byte ShaderModuleIdentifierAlgorithmUUID_12;
		public byte ShaderModuleIdentifierAlgorithmUUID_13;
		public byte ShaderModuleIdentifierAlgorithmUUID_14;
		public byte ShaderModuleIdentifierAlgorithmUUID_15;

		public unsafe VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT(VkStructureType sType = default, void* pNext = default, byte* shaderModuleIdentifierAlgorithmUUID = default)
		{
			SType = sType;
			PNext = pNext;
			if (shaderModuleIdentifierAlgorithmUUID != default)
			{
				ShaderModuleIdentifierAlgorithmUUID_0 = shaderModuleIdentifierAlgorithmUUID[0];
				ShaderModuleIdentifierAlgorithmUUID_1 = shaderModuleIdentifierAlgorithmUUID[1];
				ShaderModuleIdentifierAlgorithmUUID_2 = shaderModuleIdentifierAlgorithmUUID[2];
				ShaderModuleIdentifierAlgorithmUUID_3 = shaderModuleIdentifierAlgorithmUUID[3];
				ShaderModuleIdentifierAlgorithmUUID_4 = shaderModuleIdentifierAlgorithmUUID[4];
				ShaderModuleIdentifierAlgorithmUUID_5 = shaderModuleIdentifierAlgorithmUUID[5];
				ShaderModuleIdentifierAlgorithmUUID_6 = shaderModuleIdentifierAlgorithmUUID[6];
				ShaderModuleIdentifierAlgorithmUUID_7 = shaderModuleIdentifierAlgorithmUUID[7];
				ShaderModuleIdentifierAlgorithmUUID_8 = shaderModuleIdentifierAlgorithmUUID[8];
				ShaderModuleIdentifierAlgorithmUUID_9 = shaderModuleIdentifierAlgorithmUUID[9];
				ShaderModuleIdentifierAlgorithmUUID_10 = shaderModuleIdentifierAlgorithmUUID[10];
				ShaderModuleIdentifierAlgorithmUUID_11 = shaderModuleIdentifierAlgorithmUUID[11];
				ShaderModuleIdentifierAlgorithmUUID_12 = shaderModuleIdentifierAlgorithmUUID[12];
				ShaderModuleIdentifierAlgorithmUUID_13 = shaderModuleIdentifierAlgorithmUUID[13];
				ShaderModuleIdentifierAlgorithmUUID_14 = shaderModuleIdentifierAlgorithmUUID[14];
				ShaderModuleIdentifierAlgorithmUUID_15 = shaderModuleIdentifierAlgorithmUUID[15];
			}
		}

		public unsafe VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT(VkStructureType sType = default, void* pNext = default, Span<byte> shaderModuleIdentifierAlgorithmUUID = default)
		{
			SType = sType;
			PNext = pNext;
			if (shaderModuleIdentifierAlgorithmUUID != default)
			{
				ShaderModuleIdentifierAlgorithmUUID_0 = shaderModuleIdentifierAlgorithmUUID[0];
				ShaderModuleIdentifierAlgorithmUUID_1 = shaderModuleIdentifierAlgorithmUUID[1];
				ShaderModuleIdentifierAlgorithmUUID_2 = shaderModuleIdentifierAlgorithmUUID[2];
				ShaderModuleIdentifierAlgorithmUUID_3 = shaderModuleIdentifierAlgorithmUUID[3];
				ShaderModuleIdentifierAlgorithmUUID_4 = shaderModuleIdentifierAlgorithmUUID[4];
				ShaderModuleIdentifierAlgorithmUUID_5 = shaderModuleIdentifierAlgorithmUUID[5];
				ShaderModuleIdentifierAlgorithmUUID_6 = shaderModuleIdentifierAlgorithmUUID[6];
				ShaderModuleIdentifierAlgorithmUUID_7 = shaderModuleIdentifierAlgorithmUUID[7];
				ShaderModuleIdentifierAlgorithmUUID_8 = shaderModuleIdentifierAlgorithmUUID[8];
				ShaderModuleIdentifierAlgorithmUUID_9 = shaderModuleIdentifierAlgorithmUUID[9];
				ShaderModuleIdentifierAlgorithmUUID_10 = shaderModuleIdentifierAlgorithmUUID[10];
				ShaderModuleIdentifierAlgorithmUUID_11 = shaderModuleIdentifierAlgorithmUUID[11];
				ShaderModuleIdentifierAlgorithmUUID_12 = shaderModuleIdentifierAlgorithmUUID[12];
				ShaderModuleIdentifierAlgorithmUUID_13 = shaderModuleIdentifierAlgorithmUUID[13];
				ShaderModuleIdentifierAlgorithmUUID_14 = shaderModuleIdentifierAlgorithmUUID[14];
				ShaderModuleIdentifierAlgorithmUUID_15 = shaderModuleIdentifierAlgorithmUUID[15];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineShaderStageModuleIdentifierCreateInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineShaderStageModuleIdentifierCreateInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "identifierSize")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IdentifierSize;
		[NativeName(NativeNameType.Field, "pIdentifier")]
		[NativeName(NativeNameType.Type, "const uint8_t*")]
		public unsafe byte* PIdentifier;

		public unsafe VkPipelineShaderStageModuleIdentifierCreateInfoEXT(VkStructureType sType = default, void* pNext = default, uint identifierSize = default, byte* pIdentifier = default)
		{
			SType = sType;
			PNext = pNext;
			IdentifierSize = identifierSize;
			PIdentifier = pIdentifier;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkShaderModuleIdentifierEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkShaderModuleIdentifierEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "identifierSize")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IdentifierSize;
		[NativeName(NativeNameType.Field, "identifier")]
		[NativeName(NativeNameType.Type, "uint8_t[32]")]
		public byte Identifier_0;
		public byte Identifier_1;
		public byte Identifier_2;
		public byte Identifier_3;
		public byte Identifier_4;
		public byte Identifier_5;
		public byte Identifier_6;
		public byte Identifier_7;
		public byte Identifier_8;
		public byte Identifier_9;
		public byte Identifier_10;
		public byte Identifier_11;
		public byte Identifier_12;
		public byte Identifier_13;
		public byte Identifier_14;
		public byte Identifier_15;
		public byte Identifier_16;
		public byte Identifier_17;
		public byte Identifier_18;
		public byte Identifier_19;
		public byte Identifier_20;
		public byte Identifier_21;
		public byte Identifier_22;
		public byte Identifier_23;
		public byte Identifier_24;
		public byte Identifier_25;
		public byte Identifier_26;
		public byte Identifier_27;
		public byte Identifier_28;
		public byte Identifier_29;
		public byte Identifier_30;
		public byte Identifier_31;

		public unsafe VkShaderModuleIdentifierEXT(VkStructureType sType = default, void* pNext = default, uint identifierSize = default, byte* identifier = default)
		{
			SType = sType;
			PNext = pNext;
			IdentifierSize = identifierSize;
			if (identifier != default)
			{
				Identifier_0 = identifier[0];
				Identifier_1 = identifier[1];
				Identifier_2 = identifier[2];
				Identifier_3 = identifier[3];
				Identifier_4 = identifier[4];
				Identifier_5 = identifier[5];
				Identifier_6 = identifier[6];
				Identifier_7 = identifier[7];
				Identifier_8 = identifier[8];
				Identifier_9 = identifier[9];
				Identifier_10 = identifier[10];
				Identifier_11 = identifier[11];
				Identifier_12 = identifier[12];
				Identifier_13 = identifier[13];
				Identifier_14 = identifier[14];
				Identifier_15 = identifier[15];
				Identifier_16 = identifier[16];
				Identifier_17 = identifier[17];
				Identifier_18 = identifier[18];
				Identifier_19 = identifier[19];
				Identifier_20 = identifier[20];
				Identifier_21 = identifier[21];
				Identifier_22 = identifier[22];
				Identifier_23 = identifier[23];
				Identifier_24 = identifier[24];
				Identifier_25 = identifier[25];
				Identifier_26 = identifier[26];
				Identifier_27 = identifier[27];
				Identifier_28 = identifier[28];
				Identifier_29 = identifier[29];
				Identifier_30 = identifier[30];
				Identifier_31 = identifier[31];
			}
		}

		public unsafe VkShaderModuleIdentifierEXT(VkStructureType sType = default, void* pNext = default, uint identifierSize = default, Span<byte> identifier = default)
		{
			SType = sType;
			PNext = pNext;
			IdentifierSize = identifierSize;
			if (identifier != default)
			{
				Identifier_0 = identifier[0];
				Identifier_1 = identifier[1];
				Identifier_2 = identifier[2];
				Identifier_3 = identifier[3];
				Identifier_4 = identifier[4];
				Identifier_5 = identifier[5];
				Identifier_6 = identifier[6];
				Identifier_7 = identifier[7];
				Identifier_8 = identifier[8];
				Identifier_9 = identifier[9];
				Identifier_10 = identifier[10];
				Identifier_11 = identifier[11];
				Identifier_12 = identifier[12];
				Identifier_13 = identifier[13];
				Identifier_14 = identifier[14];
				Identifier_15 = identifier[15];
				Identifier_16 = identifier[16];
				Identifier_17 = identifier[17];
				Identifier_18 = identifier[18];
				Identifier_19 = identifier[19];
				Identifier_20 = identifier[20];
				Identifier_21 = identifier[21];
				Identifier_22 = identifier[22];
				Identifier_23 = identifier[23];
				Identifier_24 = identifier[24];
				Identifier_25 = identifier[25];
				Identifier_26 = identifier[26];
				Identifier_27 = identifier[27];
				Identifier_28 = identifier[28];
				Identifier_29 = identifier[29];
				Identifier_30 = identifier[30];
				Identifier_31 = identifier[31];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceOpticalFlowFeaturesNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceOpticalFlowFeaturesNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "opticalFlow")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint OpticalFlow;

		public unsafe VkPhysicalDeviceOpticalFlowFeaturesNV(VkStructureType sType = default, void* pNext = default, uint opticalFlow = default)
		{
			SType = sType;
			PNext = pNext;
			OpticalFlow = opticalFlow;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceOpticalFlowPropertiesNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceOpticalFlowPropertiesNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "supportedOutputGridSizes")]
		[NativeName(NativeNameType.Type, "VkOpticalFlowGridSizeFlagsNV")]
		public uint SupportedOutputGridSizes;
		[NativeName(NativeNameType.Field, "supportedHintGridSizes")]
		[NativeName(NativeNameType.Type, "VkOpticalFlowGridSizeFlagsNV")]
		public uint SupportedHintGridSizes;
		[NativeName(NativeNameType.Field, "hintSupported")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint HintSupported;
		[NativeName(NativeNameType.Field, "costSupported")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint CostSupported;
		[NativeName(NativeNameType.Field, "bidirectionalFlowSupported")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint BidirectionalFlowSupported;
		[NativeName(NativeNameType.Field, "globalFlowSupported")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint GlobalFlowSupported;
		[NativeName(NativeNameType.Field, "minWidth")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MinWidth;
		[NativeName(NativeNameType.Field, "minHeight")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MinHeight;
		[NativeName(NativeNameType.Field, "maxWidth")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxWidth;
		[NativeName(NativeNameType.Field, "maxHeight")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxHeight;
		[NativeName(NativeNameType.Field, "maxNumRegionsOfInterest")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxNumRegionsOfInterest;

		public unsafe VkPhysicalDeviceOpticalFlowPropertiesNV(VkStructureType sType = default, void* pNext = default, uint supportedOutputGridSizes = default, uint supportedHintGridSizes = default, uint hintSupported = default, uint costSupported = default, uint bidirectionalFlowSupported = default, uint globalFlowSupported = default, uint minWidth = default, uint minHeight = default, uint maxWidth = default, uint maxHeight = default, uint maxNumRegionsOfInterest = default)
		{
			SType = sType;
			PNext = pNext;
			SupportedOutputGridSizes = supportedOutputGridSizes;
			SupportedHintGridSizes = supportedHintGridSizes;
			HintSupported = hintSupported;
			CostSupported = costSupported;
			BidirectionalFlowSupported = bidirectionalFlowSupported;
			GlobalFlowSupported = globalFlowSupported;
			MinWidth = minWidth;
			MinHeight = minHeight;
			MaxWidth = maxWidth;
			MaxHeight = maxHeight;
			MaxNumRegionsOfInterest = maxNumRegionsOfInterest;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkOpticalFlowImageFormatInfoNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkOpticalFlowImageFormatInfoNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "usage")]
		[NativeName(NativeNameType.Type, "VkOpticalFlowUsageFlagsNV")]
		public uint Usage;

		public unsafe VkOpticalFlowImageFormatInfoNV(VkStructureType sType = default, void* pNext = default, uint usage = default)
		{
			SType = sType;
			PNext = pNext;
			Usage = usage;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkOpticalFlowImageFormatPropertiesNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkOpticalFlowImageFormatPropertiesNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat Format;

		public unsafe VkOpticalFlowImageFormatPropertiesNV(VkStructureType sType = default, void* pNext = default, VkFormat format = default)
		{
			SType = sType;
			PNext = pNext;
			Format = format;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkOpticalFlowSessionCreateInfoNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkOpticalFlowSessionCreateInfoNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "width")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Width;
		[NativeName(NativeNameType.Field, "height")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Height;
		[NativeName(NativeNameType.Field, "imageFormat")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat ImageFormat;
		[NativeName(NativeNameType.Field, "flowVectorFormat")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat FlowVectorFormat;
		[NativeName(NativeNameType.Field, "costFormat")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat CostFormat;
		[NativeName(NativeNameType.Field, "outputGridSize")]
		[NativeName(NativeNameType.Type, "VkOpticalFlowGridSizeFlagsNV")]
		public uint OutputGridSize;
		[NativeName(NativeNameType.Field, "hintGridSize")]
		[NativeName(NativeNameType.Type, "VkOpticalFlowGridSizeFlagsNV")]
		public uint HintGridSize;
		[NativeName(NativeNameType.Field, "performanceLevel")]
		[NativeName(NativeNameType.Type, "VkOpticalFlowPerformanceLevelNV")]
		public VkOpticalFlowPerformanceLevelNV PerformanceLevel;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkOpticalFlowSessionCreateFlagsNV")]
		public uint Flags;

		public unsafe VkOpticalFlowSessionCreateInfoNV(VkStructureType sType = default, void* pNext = default, uint width = default, uint height = default, VkFormat imageFormat = default, VkFormat flowVectorFormat = default, VkFormat costFormat = default, uint outputGridSize = default, uint hintGridSize = default, VkOpticalFlowPerformanceLevelNV performanceLevel = default, uint flags = default)
		{
			SType = sType;
			PNext = pNext;
			Width = width;
			Height = height;
			ImageFormat = imageFormat;
			FlowVectorFormat = flowVectorFormat;
			CostFormat = costFormat;
			OutputGridSize = outputGridSize;
			HintGridSize = hintGridSize;
			PerformanceLevel = performanceLevel;
			Flags = flags;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkOpticalFlowSessionCreatePrivateDataInfoNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkOpticalFlowSessionCreatePrivateDataInfoNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "id")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Id;
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Size;
		[NativeName(NativeNameType.Field, "pPrivateData")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PPrivateData;

		public unsafe VkOpticalFlowSessionCreatePrivateDataInfoNV(VkStructureType sType = default, void* pNext = default, uint id = default, uint size = default, void* pPrivateData = default)
		{
			SType = sType;
			PNext = pNext;
			Id = id;
			Size = size;
			PPrivateData = pPrivateData;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkOpticalFlowExecuteInfoNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkOpticalFlowExecuteInfoNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkOpticalFlowExecuteFlagsNV")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "regionCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint RegionCount;
		[NativeName(NativeNameType.Field, "pRegions")]
		[NativeName(NativeNameType.Type, "const VkRect2D*")]
		public unsafe VkRect2D* PRegions;

		public unsafe VkOpticalFlowExecuteInfoNV(VkStructureType sType = default, void* pNext = default, uint flags = default, uint regionCount = default, VkRect2D* pRegions = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			RegionCount = regionCount;
			PRegions = pRegions;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceLegacyDitheringFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceLegacyDitheringFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "legacyDithering")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint LegacyDithering;

		public unsafe VkPhysicalDeviceLegacyDitheringFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint legacyDithering = default)
		{
			SType = sType;
			PNext = pNext;
			LegacyDithering = legacyDithering;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDevicePipelineProtectedAccessFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDevicePipelineProtectedAccessFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pipelineProtectedAccess")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PipelineProtectedAccess;

		public unsafe VkPhysicalDevicePipelineProtectedAccessFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint pipelineProtectedAccess = default)
		{
			SType = sType;
			PNext = pNext;
			PipelineProtectedAccess = pipelineProtectedAccess;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceShaderObjectFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceShaderObjectFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "shaderObject")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderObject;

		public unsafe VkPhysicalDeviceShaderObjectFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint shaderObject = default)
		{
			SType = sType;
			PNext = pNext;
			ShaderObject = shaderObject;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceShaderObjectPropertiesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceShaderObjectPropertiesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "shaderBinaryUUID")]
		[NativeName(NativeNameType.Type, "uint8_t[16]")]
		public byte ShaderBinaryUUID_0;
		public byte ShaderBinaryUUID_1;
		public byte ShaderBinaryUUID_2;
		public byte ShaderBinaryUUID_3;
		public byte ShaderBinaryUUID_4;
		public byte ShaderBinaryUUID_5;
		public byte ShaderBinaryUUID_6;
		public byte ShaderBinaryUUID_7;
		public byte ShaderBinaryUUID_8;
		public byte ShaderBinaryUUID_9;
		public byte ShaderBinaryUUID_10;
		public byte ShaderBinaryUUID_11;
		public byte ShaderBinaryUUID_12;
		public byte ShaderBinaryUUID_13;
		public byte ShaderBinaryUUID_14;
		public byte ShaderBinaryUUID_15;
		[NativeName(NativeNameType.Field, "shaderBinaryVersion")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ShaderBinaryVersion;

		public unsafe VkPhysicalDeviceShaderObjectPropertiesEXT(VkStructureType sType = default, void* pNext = default, byte* shaderBinaryUUID = default, uint shaderBinaryVersion = default)
		{
			SType = sType;
			PNext = pNext;
			if (shaderBinaryUUID != default)
			{
				ShaderBinaryUUID_0 = shaderBinaryUUID[0];
				ShaderBinaryUUID_1 = shaderBinaryUUID[1];
				ShaderBinaryUUID_2 = shaderBinaryUUID[2];
				ShaderBinaryUUID_3 = shaderBinaryUUID[3];
				ShaderBinaryUUID_4 = shaderBinaryUUID[4];
				ShaderBinaryUUID_5 = shaderBinaryUUID[5];
				ShaderBinaryUUID_6 = shaderBinaryUUID[6];
				ShaderBinaryUUID_7 = shaderBinaryUUID[7];
				ShaderBinaryUUID_8 = shaderBinaryUUID[8];
				ShaderBinaryUUID_9 = shaderBinaryUUID[9];
				ShaderBinaryUUID_10 = shaderBinaryUUID[10];
				ShaderBinaryUUID_11 = shaderBinaryUUID[11];
				ShaderBinaryUUID_12 = shaderBinaryUUID[12];
				ShaderBinaryUUID_13 = shaderBinaryUUID[13];
				ShaderBinaryUUID_14 = shaderBinaryUUID[14];
				ShaderBinaryUUID_15 = shaderBinaryUUID[15];
			}
			ShaderBinaryVersion = shaderBinaryVersion;
		}

		public unsafe VkPhysicalDeviceShaderObjectPropertiesEXT(VkStructureType sType = default, void* pNext = default, Span<byte> shaderBinaryUUID = default, uint shaderBinaryVersion = default)
		{
			SType = sType;
			PNext = pNext;
			if (shaderBinaryUUID != default)
			{
				ShaderBinaryUUID_0 = shaderBinaryUUID[0];
				ShaderBinaryUUID_1 = shaderBinaryUUID[1];
				ShaderBinaryUUID_2 = shaderBinaryUUID[2];
				ShaderBinaryUUID_3 = shaderBinaryUUID[3];
				ShaderBinaryUUID_4 = shaderBinaryUUID[4];
				ShaderBinaryUUID_5 = shaderBinaryUUID[5];
				ShaderBinaryUUID_6 = shaderBinaryUUID[6];
				ShaderBinaryUUID_7 = shaderBinaryUUID[7];
				ShaderBinaryUUID_8 = shaderBinaryUUID[8];
				ShaderBinaryUUID_9 = shaderBinaryUUID[9];
				ShaderBinaryUUID_10 = shaderBinaryUUID[10];
				ShaderBinaryUUID_11 = shaderBinaryUUID[11];
				ShaderBinaryUUID_12 = shaderBinaryUUID[12];
				ShaderBinaryUUID_13 = shaderBinaryUUID[13];
				ShaderBinaryUUID_14 = shaderBinaryUUID[14];
				ShaderBinaryUUID_15 = shaderBinaryUUID[15];
			}
			ShaderBinaryVersion = shaderBinaryVersion;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkShaderCreateInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkShaderCreateInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkShaderCreateFlagsEXT")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "stage")]
		[NativeName(NativeNameType.Type, "VkShaderStageFlagBits")]
		public VkShaderStageFlagBits Stage;
		[NativeName(NativeNameType.Field, "nextStage")]
		[NativeName(NativeNameType.Type, "VkShaderStageFlags")]
		public uint NextStage;
		[NativeName(NativeNameType.Field, "codeType")]
		[NativeName(NativeNameType.Type, "VkShaderCodeTypeEXT")]
		public VkShaderCodeTypeEXT CodeType;
		[NativeName(NativeNameType.Field, "codeSize")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong CodeSize;
		[NativeName(NativeNameType.Field, "pCode")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PCode;
		[NativeName(NativeNameType.Field, "pName")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* PName;
		[NativeName(NativeNameType.Field, "setLayoutCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SetLayoutCount;
		[NativeName(NativeNameType.Field, "pSetLayouts")]
		[NativeName(NativeNameType.Type, "const VkDescriptorSetLayout*")]
		public unsafe VkDescriptorSetLayout* PSetLayouts;
		[NativeName(NativeNameType.Field, "pushConstantRangeCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PushConstantRangeCount;
		[NativeName(NativeNameType.Field, "pPushConstantRanges")]
		[NativeName(NativeNameType.Type, "const VkPushConstantRange*")]
		public unsafe VkPushConstantRange* PPushConstantRanges;
		[NativeName(NativeNameType.Field, "pSpecializationInfo")]
		[NativeName(NativeNameType.Type, "const VkSpecializationInfo*")]
		public unsafe VkSpecializationInfo* PSpecializationInfo;

		public unsafe VkShaderCreateInfoEXT(VkStructureType sType = default, void* pNext = default, uint flags = default, VkShaderStageFlagBits stage = default, uint nextStage = default, VkShaderCodeTypeEXT codeType = default, ulong codeSize = default, void* pCode = default, byte* pName = default, uint setLayoutCount = default, VkDescriptorSetLayout* pSetLayouts = default, uint pushConstantRangeCount = default, VkPushConstantRange* pPushConstantRanges = default, VkSpecializationInfo* pSpecializationInfo = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			Stage = stage;
			NextStage = nextStage;
			CodeType = codeType;
			CodeSize = codeSize;
			PCode = pCode;
			PName = pName;
			SetLayoutCount = setLayoutCount;
			PSetLayouts = pSetLayouts;
			PushConstantRangeCount = pushConstantRangeCount;
			PPushConstantRanges = pPushConstantRanges;
			PSpecializationInfo = pSpecializationInfo;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceTilePropertiesFeaturesQCOM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceTilePropertiesFeaturesQCOM
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "tileProperties")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint TileProperties;

		public unsafe VkPhysicalDeviceTilePropertiesFeaturesQCOM(VkStructureType sType = default, void* pNext = default, uint tileProperties = default)
		{
			SType = sType;
			PNext = pNext;
			TileProperties = tileProperties;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkTilePropertiesQCOM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkTilePropertiesQCOM
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "tileSize")]
		[NativeName(NativeNameType.Type, "VkExtent3D")]
		public VkExtent3D TileSize;
		[NativeName(NativeNameType.Field, "apronSize")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D ApronSize;
		[NativeName(NativeNameType.Field, "origin")]
		[NativeName(NativeNameType.Type, "VkOffset2D")]
		public VkOffset2D Origin;

		public unsafe VkTilePropertiesQCOM(VkStructureType sType = default, void* pNext = default, VkExtent3D tileSize = default, VkExtent2D apronSize = default, VkOffset2D origin = default)
		{
			SType = sType;
			PNext = pNext;
			TileSize = tileSize;
			ApronSize = apronSize;
			Origin = origin;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceAmigoProfilingFeaturesSEC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceAmigoProfilingFeaturesSEC
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "amigoProfiling")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint AmigoProfiling;

		public unsafe VkPhysicalDeviceAmigoProfilingFeaturesSEC(VkStructureType sType = default, void* pNext = default, uint amigoProfiling = default)
		{
			SType = sType;
			PNext = pNext;
			AmigoProfiling = amigoProfiling;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkAmigoProfilingSubmitInfoSEC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkAmigoProfilingSubmitInfoSEC
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "firstDrawTimestamp")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong FirstDrawTimestamp;
		[NativeName(NativeNameType.Field, "swapBufferTimestamp")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong SwapBufferTimestamp;

		public unsafe VkAmigoProfilingSubmitInfoSEC(VkStructureType sType = default, void* pNext = default, ulong firstDrawTimestamp = default, ulong swapBufferTimestamp = default)
		{
			SType = sType;
			PNext = pNext;
			FirstDrawTimestamp = firstDrawTimestamp;
			SwapBufferTimestamp = swapBufferTimestamp;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "multiviewPerViewViewports")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint MultiviewPerViewViewports;

		public unsafe VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM(VkStructureType sType = default, void* pNext = default, uint multiviewPerViewViewports = default)
		{
			SType = sType;
			PNext = pNext;
			MultiviewPerViewViewports = multiviewPerViewViewports;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "rayTracingInvocationReorderReorderingHint")]
		[NativeName(NativeNameType.Type, "VkRayTracingInvocationReorderModeNV")]
		public VkRayTracingInvocationReorderModeNV RayTracingInvocationReorderReorderingHint;

		public unsafe VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV(VkStructureType sType = default, void* pNext = default, VkRayTracingInvocationReorderModeNV rayTracingInvocationReorderReorderingHint = default)
		{
			SType = sType;
			PNext = pNext;
			RayTracingInvocationReorderReorderingHint = rayTracingInvocationReorderReorderingHint;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "rayTracingInvocationReorder")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint RayTracingInvocationReorder;

		public unsafe VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV(VkStructureType sType = default, void* pNext = default, uint rayTracingInvocationReorder = default)
		{
			SType = sType;
			PNext = pNext;
			RayTracingInvocationReorder = rayTracingInvocationReorder;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "shaderCoreBuiltins")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderCoreBuiltins;

		public unsafe VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM(VkStructureType sType = default, void* pNext = default, uint shaderCoreBuiltins = default)
		{
			SType = sType;
			PNext = pNext;
			ShaderCoreBuiltins = shaderCoreBuiltins;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "shaderCoreMask")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong ShaderCoreMask;
		[NativeName(NativeNameType.Field, "shaderCoreCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ShaderCoreCount;
		[NativeName(NativeNameType.Field, "shaderWarpsPerCore")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ShaderWarpsPerCore;

		public unsafe VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM(VkStructureType sType = default, void* pNext = default, ulong shaderCoreMask = default, uint shaderCoreCount = default, uint shaderWarpsPerCore = default)
		{
			SType = sType;
			PNext = pNext;
			ShaderCoreMask = shaderCoreMask;
			ShaderCoreCount = shaderCoreCount;
			ShaderWarpsPerCore = shaderWarpsPerCore;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pipelineLibraryGroupHandles")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PipelineLibraryGroupHandles;

		public unsafe VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint pipelineLibraryGroupHandles = default)
		{
			SType = sType;
			PNext = pNext;
			PipelineLibraryGroupHandles = pipelineLibraryGroupHandles;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "multiviewPerViewRenderAreas")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint MultiviewPerViewRenderAreas;

		public unsafe VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM(VkStructureType sType = default, void* pNext = default, uint multiviewPerViewRenderAreas = default)
		{
			SType = sType;
			PNext = pNext;
			MultiviewPerViewRenderAreas = multiviewPerViewRenderAreas;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "perViewRenderAreaCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PerViewRenderAreaCount;
		[NativeName(NativeNameType.Field, "pPerViewRenderAreas")]
		[NativeName(NativeNameType.Type, "const VkRect2D*")]
		public unsafe VkRect2D* PPerViewRenderAreas;

		public unsafe VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM(VkStructureType sType = default, void* pNext = default, uint perViewRenderAreaCount = default, VkRect2D* pPerViewRenderAreas = default)
		{
			SType = sType;
			PNext = pNext;
			PerViewRenderAreaCount = perViewRenderAreaCount;
			PPerViewRenderAreas = pPerViewRenderAreas;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "attachmentFeedbackLoopDynamicState")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint AttachmentFeedbackLoopDynamicState;

		public unsafe VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint attachmentFeedbackLoopDynamicState = default)
		{
			SType = sType;
			PNext = pNext;
			AttachmentFeedbackLoopDynamicState = attachmentFeedbackLoopDynamicState;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkAccelerationStructureBuildRangeInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkAccelerationStructureBuildRangeInfoKHR
	{
		[NativeName(NativeNameType.Field, "primitiveCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PrimitiveCount;
		[NativeName(NativeNameType.Field, "primitiveOffset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PrimitiveOffset;
		[NativeName(NativeNameType.Field, "firstVertex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FirstVertex;
		[NativeName(NativeNameType.Field, "transformOffset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint TransformOffset;

		public unsafe VkAccelerationStructureBuildRangeInfoKHR(uint primitiveCount = default, uint primitiveOffset = default, uint firstVertex = default, uint transformOffset = default)
		{
			PrimitiveCount = primitiveCount;
			PrimitiveOffset = primitiveOffset;
			FirstVertex = firstVertex;
			TransformOffset = transformOffset;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkAccelerationStructureGeometryTrianglesDataKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkAccelerationStructureGeometryTrianglesDataKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "vertexFormat")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat VertexFormat;
		[NativeName(NativeNameType.Field, "vertexData")]
		[NativeName(NativeNameType.Type, "VkDeviceOrHostAddressConstKHR")]
		public VkDeviceOrHostAddressConstKHR VertexData;
		[NativeName(NativeNameType.Field, "vertexStride")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong VertexStride;
		[NativeName(NativeNameType.Field, "maxVertex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxVertex;
		[NativeName(NativeNameType.Field, "indexType")]
		[NativeName(NativeNameType.Type, "VkIndexType")]
		public VkIndexType IndexType;
		[NativeName(NativeNameType.Field, "indexData")]
		[NativeName(NativeNameType.Type, "VkDeviceOrHostAddressConstKHR")]
		public VkDeviceOrHostAddressConstKHR IndexData;
		[NativeName(NativeNameType.Field, "transformData")]
		[NativeName(NativeNameType.Type, "VkDeviceOrHostAddressConstKHR")]
		public VkDeviceOrHostAddressConstKHR TransformData;

		public unsafe VkAccelerationStructureGeometryTrianglesDataKHR(VkStructureType sType = default, void* pNext = default, VkFormat vertexFormat = default, VkDeviceOrHostAddressConstKHR vertexdata = default, ulong vertexStride = default, uint maxVertex = default, VkIndexType indexType = default, VkDeviceOrHostAddressConstKHR indexdata = default, VkDeviceOrHostAddressConstKHR transformdata = default)
		{
			SType = sType;
			PNext = pNext;
			VertexFormat = vertexFormat;
			VertexData = vertexdata;
			VertexStride = vertexStride;
			MaxVertex = maxVertex;
			IndexType = indexType;
			IndexData = indexdata;
			TransformData = transformdata;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkAccelerationStructureGeometryAabbsDataKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkAccelerationStructureGeometryAabbsDataKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "data")]
		[NativeName(NativeNameType.Type, "VkDeviceOrHostAddressConstKHR")]
		public VkDeviceOrHostAddressConstKHR Data;
		[NativeName(NativeNameType.Field, "stride")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Stride;

		public unsafe VkAccelerationStructureGeometryAabbsDataKHR(VkStructureType sType = default, void* pNext = default, VkDeviceOrHostAddressConstKHR data = default, ulong stride = default)
		{
			SType = sType;
			PNext = pNext;
			Data = data;
			Stride = stride;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkAccelerationStructureGeometryInstancesDataKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkAccelerationStructureGeometryInstancesDataKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "arrayOfPointers")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ArrayOfPointers;
		[NativeName(NativeNameType.Field, "data")]
		[NativeName(NativeNameType.Type, "VkDeviceOrHostAddressConstKHR")]
		public VkDeviceOrHostAddressConstKHR Data;

		public unsafe VkAccelerationStructureGeometryInstancesDataKHR(VkStructureType sType = default, void* pNext = default, uint arrayOfPointers = default, VkDeviceOrHostAddressConstKHR data = default)
		{
			SType = sType;
			PNext = pNext;
			ArrayOfPointers = arrayOfPointers;
			Data = data;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkAccelerationStructureGeometryDataKHR")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct VkAccelerationStructureGeometryDataKHR
	{
		[NativeName(NativeNameType.Field, "triangles")]
		[NativeName(NativeNameType.Type, "VkAccelerationStructureGeometryTrianglesDataKHR")]
		[FieldOffset(0)]
		public VkAccelerationStructureGeometryTrianglesDataKHR Triangles;
		[NativeName(NativeNameType.Field, "aabbs")]
		[NativeName(NativeNameType.Type, "VkAccelerationStructureGeometryAabbsDataKHR")]
		[FieldOffset(0)]
		public VkAccelerationStructureGeometryAabbsDataKHR Aabbs;
		[NativeName(NativeNameType.Field, "instances")]
		[NativeName(NativeNameType.Type, "VkAccelerationStructureGeometryInstancesDataKHR")]
		[FieldOffset(0)]
		public VkAccelerationStructureGeometryInstancesDataKHR Instances;

		public unsafe VkAccelerationStructureGeometryDataKHR(VkAccelerationStructureGeometryTrianglesDataKHR triangles = default, VkAccelerationStructureGeometryAabbsDataKHR aabbs = default, VkAccelerationStructureGeometryInstancesDataKHR instances = default)
		{
			Triangles = triangles;
			Aabbs = aabbs;
			Instances = instances;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkAccelerationStructureGeometryKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkAccelerationStructureGeometryKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "geometryType")]
		[NativeName(NativeNameType.Type, "VkGeometryTypeKHR")]
		public VkGeometryTypeKHR GeometryType;
		[NativeName(NativeNameType.Field, "geometry")]
		[NativeName(NativeNameType.Type, "VkAccelerationStructureGeometryDataKHR")]
		public VkAccelerationStructureGeometryDataKHR Geometry;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkGeometryFlagsKHR")]
		public uint Flags;

		public unsafe VkAccelerationStructureGeometryKHR(VkStructureType sType = default, void* pNext = default, VkGeometryTypeKHR geometryType = default, VkAccelerationStructureGeometryDataKHR geometry = default, uint flags = default)
		{
			SType = sType;
			PNext = pNext;
			GeometryType = geometryType;
			Geometry = geometry;
			Flags = flags;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkAccelerationStructureBuildGeometryInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkAccelerationStructureBuildGeometryInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "VkAccelerationStructureTypeKHR")]
		public VkAccelerationStructureTypeKHR Type;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkBuildAccelerationStructureFlagsKHR")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "mode")]
		[NativeName(NativeNameType.Type, "VkBuildAccelerationStructureModeKHR")]
		public VkBuildAccelerationStructureModeKHR Mode;
		[NativeName(NativeNameType.Field, "srcAccelerationStructure")]
		[NativeName(NativeNameType.Type, "VkAccelerationStructureKHR")]
		public VkAccelerationStructureKHR SrcAccelerationStructure;
		[NativeName(NativeNameType.Field, "dstAccelerationStructure")]
		[NativeName(NativeNameType.Type, "VkAccelerationStructureKHR")]
		public VkAccelerationStructureKHR DstAccelerationStructure;
		[NativeName(NativeNameType.Field, "geometryCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint GeometryCount;
		[NativeName(NativeNameType.Field, "pGeometries")]
		[NativeName(NativeNameType.Type, "const VkAccelerationStructureGeometryKHR*")]
		public unsafe VkAccelerationStructureGeometryKHR* PGeometries;
		[NativeName(NativeNameType.Field, "ppGeometries")]
		[NativeName(NativeNameType.Type, "const const VkAccelerationStructureGeometryKHR**")]
		public unsafe VkAccelerationStructureGeometryKHR** PpGeometries;
		[NativeName(NativeNameType.Field, "scratchData")]
		[NativeName(NativeNameType.Type, "VkDeviceOrHostAddressKHR")]
		public VkDeviceOrHostAddressKHR ScratchData;

		public unsafe VkAccelerationStructureBuildGeometryInfoKHR(VkStructureType sType = default, void* pNext = default, VkAccelerationStructureTypeKHR type = default, uint flags = default, VkBuildAccelerationStructureModeKHR mode = default, VkAccelerationStructureKHR srcAccelerationStructure = default, VkAccelerationStructureKHR dstAccelerationStructure = default, uint geometryCount = default, VkAccelerationStructureGeometryKHR* pGeometries = default, VkAccelerationStructureGeometryKHR** ppGeometries = default, VkDeviceOrHostAddressKHR scratchdata = default)
		{
			SType = sType;
			PNext = pNext;
			Type = type;
			Flags = flags;
			Mode = mode;
			SrcAccelerationStructure = srcAccelerationStructure;
			DstAccelerationStructure = dstAccelerationStructure;
			GeometryCount = geometryCount;
			PGeometries = pGeometries;
			PpGeometries = ppGeometries;
			ScratchData = scratchdata;
		}


	}
}
