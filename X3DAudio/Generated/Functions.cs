// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;
using System.Numerics;

namespace HexaEngine.X3DAudio
{
	public unsafe partial class X3DAudio
	{
		internal const string LibName = "x3daudio1_7.dll";

		/// <summary>
		/// --------------<br/>
		/// <F<br/>
		/// -U-N-C-T-I-O-N-S>-----------------------------------------//<br/>
		/// initializes instance handle<br/>
		/// </summary>
		[NativeName("X3DAudioInitialize")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "X3DAudioInitialize")]
		internal static extern HResult X3DAudioInitializeNative(uint speakerChannelMask, float speedOfSound, X3DAudioHandle instance);

		/// <summary>		/// --------------<br/>		/// <F<br/>		/// -U-N-C-T-I-O-N-S>-----------------------------------------//<br/>		/// initializes instance handle<br/>		/// </summary>		public static HResult X3DAudioInitialize(uint speakerChannelMask, float speedOfSound, X3DAudioHandle instance)
		{
			HResult ret = X3DAudioInitializeNative(speakerChannelMask, speedOfSound, instance);
			return ret;
		}

		/// <summary>
		/// calculates DSP settings with respect to 3D parameters<br/>
		/// </summary>
		[NativeName("X3DAudioCalculate")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "X3DAudioCalculate")]
		internal static extern void X3DAudioCalculateNative(X3DAudioHandle instance, X3DaudioListener* pListener, X3DaudioEmitter* pEmitter, uint flags, X3DaudioDspSettings* pDSPSettings);

		/// <summary>		/// calculates DSP settings with respect to 3D parameters<br/>		/// </summary>		public static void X3DAudioCalculate(X3DAudioHandle instance, X3DaudioListener* pListener, X3DaudioEmitter* pEmitter, uint flags, X3DaudioDspSettings* pDSPSettings)
		{
			X3DAudioCalculateNative(instance, pListener, pEmitter, flags, pDSPSettings);
		}

		/// <summary>		/// calculates DSP settings with respect to 3D parameters<br/>		/// </summary>		public static void X3DAudioCalculate(X3DAudioHandle instance, ref X3DaudioListener pListener, X3DaudioEmitter* pEmitter, uint flags, X3DaudioDspSettings* pDSPSettings)
		{
			fixed (X3DaudioListener* ppListener = &pListener)
			{
				X3DAudioCalculateNative(instance, (X3DaudioListener*)ppListener, pEmitter, flags, pDSPSettings);
			}
		}

		/// <summary>		/// calculates DSP settings with respect to 3D parameters<br/>		/// </summary>		public static void X3DAudioCalculate(X3DAudioHandle instance, X3DaudioListener* pListener, ref X3DaudioEmitter pEmitter, uint flags, X3DaudioDspSettings* pDSPSettings)
		{
			fixed (X3DaudioEmitter* ppEmitter = &pEmitter)
			{
				X3DAudioCalculateNative(instance, pListener, (X3DaudioEmitter*)ppEmitter, flags, pDSPSettings);
			}
		}

		/// <summary>		/// calculates DSP settings with respect to 3D parameters<br/>		/// </summary>		public static void X3DAudioCalculate(X3DAudioHandle instance, ref X3DaudioListener pListener, ref X3DaudioEmitter pEmitter, uint flags, X3DaudioDspSettings* pDSPSettings)
		{
			fixed (X3DaudioListener* ppListener = &pListener)
			{
				fixed (X3DaudioEmitter* ppEmitter = &pEmitter)
				{
					X3DAudioCalculateNative(instance, (X3DaudioListener*)ppListener, (X3DaudioEmitter*)ppEmitter, flags, pDSPSettings);
				}
			}
		}

		/// <summary>		/// calculates DSP settings with respect to 3D parameters<br/>		/// </summary>		public static void X3DAudioCalculate(X3DAudioHandle instance, X3DaudioListener* pListener, X3DaudioEmitter* pEmitter, uint flags, ref X3DaudioDspSettings pDSPSettings)
		{
			fixed (X3DaudioDspSettings* ppDSPSettings = &pDSPSettings)
			{
				X3DAudioCalculateNative(instance, pListener, pEmitter, flags, (X3DaudioDspSettings*)ppDSPSettings);
			}
		}

		/// <summary>		/// calculates DSP settings with respect to 3D parameters<br/>		/// </summary>		public static void X3DAudioCalculate(X3DAudioHandle instance, ref X3DaudioListener pListener, X3DaudioEmitter* pEmitter, uint flags, ref X3DaudioDspSettings pDSPSettings)
		{
			fixed (X3DaudioListener* ppListener = &pListener)
			{
				fixed (X3DaudioDspSettings* ppDSPSettings = &pDSPSettings)
				{
					X3DAudioCalculateNative(instance, (X3DaudioListener*)ppListener, pEmitter, flags, (X3DaudioDspSettings*)ppDSPSettings);
				}
			}
		}

		/// <summary>		/// calculates DSP settings with respect to 3D parameters<br/>		/// </summary>		public static void X3DAudioCalculate(X3DAudioHandle instance, X3DaudioListener* pListener, ref X3DaudioEmitter pEmitter, uint flags, ref X3DaudioDspSettings pDSPSettings)
		{
			fixed (X3DaudioEmitter* ppEmitter = &pEmitter)
			{
				fixed (X3DaudioDspSettings* ppDSPSettings = &pDSPSettings)
				{
					X3DAudioCalculateNative(instance, pListener, (X3DaudioEmitter*)ppEmitter, flags, (X3DaudioDspSettings*)ppDSPSettings);
				}
			}
		}

		/// <summary>		/// calculates DSP settings with respect to 3D parameters<br/>		/// </summary>		public static void X3DAudioCalculate(X3DAudioHandle instance, ref X3DaudioListener pListener, ref X3DaudioEmitter pEmitter, uint flags, ref X3DaudioDspSettings pDSPSettings)
		{
			fixed (X3DaudioListener* ppListener = &pListener)
			{
				fixed (X3DaudioEmitter* ppEmitter = &pEmitter)
				{
					fixed (X3DaudioDspSettings* ppDSPSettings = &pDSPSettings)
					{
						X3DAudioCalculateNative(instance, (X3DaudioListener*)ppListener, (X3DaudioEmitter*)ppEmitter, flags, (X3DaudioDspSettings*)ppDSPSettings);
					}
				}
			}
		}

	}
}
