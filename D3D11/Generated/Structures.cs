// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;
using HexaEngine.DXGI;
using HexaEngine.D3DCommon;

namespace HexaEngine.D3D11
{
	[Guid("1841e5c8-16b0-489b-bcc8-44cfb0d5deae")]
	[NativeName("ID3D11DeviceChild")]
	public partial struct ID3D11DeviceChild : IComObject, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("1841e5c8-16b0-489b-bcc8-44cfb0d5deae");

		public unsafe ID3D11DeviceChild (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDevice(ID3D11Device** ppDevice)
		{
			ID3D11DeviceChild* ptr = (ID3D11DeviceChild*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceChild*, ID3D11Device**, void>)(*LpVtbl))(ptr, ppDevice);
		}

		public readonly unsafe void GetDevice(ref ID3D11Device* ppDevice)
		{
			ID3D11DeviceChild* ptr = (ID3D11DeviceChild*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Device** pppDevice = &ppDevice)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceChild*, ID3D11Device**, void>)(*LpVtbl))(ptr, (ID3D11Device**)pppDevice);
			}
		}

		public readonly unsafe HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
		{
			ID3D11DeviceChild* ptr = (ID3D11DeviceChild*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceChild*, Guid*, uint*, void*, HResult>)(LpVtbl[1]))(ptr, guid, pDataSize, pData);
			return ret;
		}

		public readonly unsafe HResult GetPrivateData(ref Guid guid, uint* pDataSize, void* pData)
		{
			ID3D11DeviceChild* ptr = (ID3D11DeviceChild*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceChild*, Guid*, uint*, void*, HResult>)(LpVtbl[1]))(ptr, (Guid*)pguid, pDataSize, pData);
				return ret;
			}
		}

		public readonly unsafe HResult GetPrivateData(Guid* guid, ref uint pDataSize, void* pData)
		{
			ID3D11DeviceChild* ptr = (ID3D11DeviceChild*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceChild*, Guid*, uint*, void*, HResult>)(LpVtbl[1]))(ptr, guid, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		public readonly unsafe HResult GetPrivateData(ref Guid guid, ref uint pDataSize, void* pData)
		{
			ID3D11DeviceChild* ptr = (ID3D11DeviceChild*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceChild*, Guid*, uint*, void*, HResult>)(LpVtbl[1]))(ptr, (Guid*)pguid, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		public readonly unsafe HResult SetPrivateData(Guid* guid, uint dataSize, void* pData)
		{
			ID3D11DeviceChild* ptr = (ID3D11DeviceChild*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceChild*, Guid*, uint, void*, HResult>)(LpVtbl[2]))(ptr, guid, dataSize, pData);
			return ret;
		}

		public readonly unsafe HResult SetPrivateData(ref Guid guid, uint dataSize, void* pData)
		{
			ID3D11DeviceChild* ptr = (ID3D11DeviceChild*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceChild*, Guid*, uint, void*, HResult>)(LpVtbl[2]))(ptr, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		public readonly unsafe HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
		{
			ID3D11DeviceChild* ptr = (ID3D11DeviceChild*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceChild*, Guid*, IUnknown*, HResult>)(LpVtbl[3]))(ptr, guid, pData);
			return ret;
		}

		public readonly unsafe HResult SetPrivateDataInterface(ref Guid guid, IUnknown* pData)
		{
			ID3D11DeviceChild* ptr = (ID3D11DeviceChild*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceChild*, Guid*, IUnknown*, HResult>)(LpVtbl[3]))(ptr, (Guid*)pguid, pData);
				return ret;
			}
		}

		public readonly unsafe HResult SetPrivateDataInterface(Guid* guid, ref IUnknown pData)
		{
			ID3D11DeviceChild* ptr = (ID3D11DeviceChild*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceChild*, Guid*, IUnknown*, HResult>)(LpVtbl[3]))(ptr, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		public readonly unsafe HResult SetPrivateDataInterface(ref Guid guid, ref IUnknown pData)
		{
			ID3D11DeviceChild* ptr = (ID3D11DeviceChild*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceChild*, Guid*, IUnknown*, HResult>)(LpVtbl[3]))(ptr, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11DeviceChild value)
		{
			return Unsafe.As<ID3D11DeviceChild, IUnknown>(ref value);
		}

	}

	[Guid("db6f6ddb-ac77-4e88-8253-819df9bbf140")]
	[NativeName("ID3D11Device")]
	public partial struct ID3D11Device : IComObject, IComObject<ID3D11Device>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("db6f6ddb-ac77-4e88-8253-819df9bbf140");

		public unsafe ID3D11Device (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult CreateBuffer(D3D11BufferDesc* pDesc, D3D11SubresourceData* pInitialData, ID3D11Buffer** ppBuffer)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11BufferDesc*, D3D11SubresourceData*, ID3D11Buffer**, HResult>)(*LpVtbl))(ptr, pDesc, pInitialData, ppBuffer);
			return ret;
		}

		public readonly unsafe HResult CreateBuffer(ref D3D11BufferDesc pDesc, D3D11SubresourceData* pInitialData, ID3D11Buffer** ppBuffer)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11BufferDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11BufferDesc*, D3D11SubresourceData*, ID3D11Buffer**, HResult>)(*LpVtbl))(ptr, (D3D11BufferDesc*)ppDesc, pInitialData, ppBuffer);
				return ret;
			}
		}

		public readonly unsafe HResult CreateBuffer(D3D11BufferDesc* pDesc, ref D3D11SubresourceData pInitialData, ID3D11Buffer** ppBuffer)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11BufferDesc*, D3D11SubresourceData*, ID3D11Buffer**, HResult>)(*LpVtbl))(ptr, pDesc, (D3D11SubresourceData*)ppInitialData, ppBuffer);
				return ret;
			}
		}

		public readonly unsafe HResult CreateBuffer(ref D3D11BufferDesc pDesc, ref D3D11SubresourceData pInitialData, ID3D11Buffer** ppBuffer)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11BufferDesc* ppDesc = &pDesc)
			{
				fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11BufferDesc*, D3D11SubresourceData*, ID3D11Buffer**, HResult>)(*LpVtbl))(ptr, (D3D11BufferDesc*)ppDesc, (D3D11SubresourceData*)ppInitialData, ppBuffer);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateBuffer(D3D11BufferDesc* pDesc, D3D11SubresourceData* pInitialData, ref ID3D11Buffer* ppBuffer)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppBuffer = &ppBuffer)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11BufferDesc*, D3D11SubresourceData*, ID3D11Buffer**, HResult>)(*LpVtbl))(ptr, pDesc, pInitialData, (ID3D11Buffer**)pppBuffer);
				return ret;
			}
		}

		public readonly unsafe HResult CreateBuffer(ref D3D11BufferDesc pDesc, D3D11SubresourceData* pInitialData, ref ID3D11Buffer* ppBuffer)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11BufferDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11Buffer** pppBuffer = &ppBuffer)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11BufferDesc*, D3D11SubresourceData*, ID3D11Buffer**, HResult>)(*LpVtbl))(ptr, (D3D11BufferDesc*)ppDesc, pInitialData, (ID3D11Buffer**)pppBuffer);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateBuffer(D3D11BufferDesc* pDesc, ref D3D11SubresourceData pInitialData, ref ID3D11Buffer* ppBuffer)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
			{
				fixed (ID3D11Buffer** pppBuffer = &ppBuffer)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11BufferDesc*, D3D11SubresourceData*, ID3D11Buffer**, HResult>)(*LpVtbl))(ptr, pDesc, (D3D11SubresourceData*)ppInitialData, (ID3D11Buffer**)pppBuffer);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateBuffer(ref D3D11BufferDesc pDesc, ref D3D11SubresourceData pInitialData, ref ID3D11Buffer* ppBuffer)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11BufferDesc* ppDesc = &pDesc)
			{
				fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
				{
					fixed (ID3D11Buffer** pppBuffer = &ppBuffer)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11BufferDesc*, D3D11SubresourceData*, ID3D11Buffer**, HResult>)(*LpVtbl))(ptr, (D3D11BufferDesc*)ppDesc, (D3D11SubresourceData*)ppInitialData, (ID3D11Buffer**)pppBuffer);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateTexture1D(D3D11Texture1DDesc* pDesc, D3D11SubresourceData* pInitialData, ID3D11Texture1D** ppTexture1D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture1DDesc*, D3D11SubresourceData*, ID3D11Texture1D**, HResult>)(LpVtbl[1]))(ptr, pDesc, pInitialData, ppTexture1D);
			return ret;
		}

		public readonly unsafe HResult CreateTexture1D(ref D3D11Texture1DDesc pDesc, D3D11SubresourceData* pInitialData, ID3D11Texture1D** ppTexture1D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture1DDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture1DDesc*, D3D11SubresourceData*, ID3D11Texture1D**, HResult>)(LpVtbl[1]))(ptr, (D3D11Texture1DDesc*)ppDesc, pInitialData, ppTexture1D);
				return ret;
			}
		}

		public readonly unsafe HResult CreateTexture1D(D3D11Texture1DDesc* pDesc, ref D3D11SubresourceData pInitialData, ID3D11Texture1D** ppTexture1D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture1DDesc*, D3D11SubresourceData*, ID3D11Texture1D**, HResult>)(LpVtbl[1]))(ptr, pDesc, (D3D11SubresourceData*)ppInitialData, ppTexture1D);
				return ret;
			}
		}

		public readonly unsafe HResult CreateTexture1D(ref D3D11Texture1DDesc pDesc, ref D3D11SubresourceData pInitialData, ID3D11Texture1D** ppTexture1D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture1DDesc* ppDesc = &pDesc)
			{
				fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture1DDesc*, D3D11SubresourceData*, ID3D11Texture1D**, HResult>)(LpVtbl[1]))(ptr, (D3D11Texture1DDesc*)ppDesc, (D3D11SubresourceData*)ppInitialData, ppTexture1D);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateTexture1D(D3D11Texture1DDesc* pDesc, D3D11SubresourceData* pInitialData, ref ID3D11Texture1D* ppTexture1D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Texture1D** pppTexture1D = &ppTexture1D)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture1DDesc*, D3D11SubresourceData*, ID3D11Texture1D**, HResult>)(LpVtbl[1]))(ptr, pDesc, pInitialData, (ID3D11Texture1D**)pppTexture1D);
				return ret;
			}
		}

		public readonly unsafe HResult CreateTexture1D(ref D3D11Texture1DDesc pDesc, D3D11SubresourceData* pInitialData, ref ID3D11Texture1D* ppTexture1D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture1DDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11Texture1D** pppTexture1D = &ppTexture1D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture1DDesc*, D3D11SubresourceData*, ID3D11Texture1D**, HResult>)(LpVtbl[1]))(ptr, (D3D11Texture1DDesc*)ppDesc, pInitialData, (ID3D11Texture1D**)pppTexture1D);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateTexture1D(D3D11Texture1DDesc* pDesc, ref D3D11SubresourceData pInitialData, ref ID3D11Texture1D* ppTexture1D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
			{
				fixed (ID3D11Texture1D** pppTexture1D = &ppTexture1D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture1DDesc*, D3D11SubresourceData*, ID3D11Texture1D**, HResult>)(LpVtbl[1]))(ptr, pDesc, (D3D11SubresourceData*)ppInitialData, (ID3D11Texture1D**)pppTexture1D);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateTexture1D(ref D3D11Texture1DDesc pDesc, ref D3D11SubresourceData pInitialData, ref ID3D11Texture1D* ppTexture1D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture1DDesc* ppDesc = &pDesc)
			{
				fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
				{
					fixed (ID3D11Texture1D** pppTexture1D = &ppTexture1D)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture1DDesc*, D3D11SubresourceData*, ID3D11Texture1D**, HResult>)(LpVtbl[1]))(ptr, (D3D11Texture1DDesc*)ppDesc, (D3D11SubresourceData*)ppInitialData, (ID3D11Texture1D**)pppTexture1D);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateTexture2D(D3D11Texture2DDesc* pDesc, D3D11SubresourceData* pInitialData, ID3D11Texture2D** ppTexture2D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture2DDesc*, D3D11SubresourceData*, ID3D11Texture2D**, HResult>)(LpVtbl[2]))(ptr, pDesc, pInitialData, ppTexture2D);
			return ret;
		}

		public readonly unsafe HResult CreateTexture2D(ref D3D11Texture2DDesc pDesc, D3D11SubresourceData* pInitialData, ID3D11Texture2D** ppTexture2D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture2DDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture2DDesc*, D3D11SubresourceData*, ID3D11Texture2D**, HResult>)(LpVtbl[2]))(ptr, (D3D11Texture2DDesc*)ppDesc, pInitialData, ppTexture2D);
				return ret;
			}
		}

		public readonly unsafe HResult CreateTexture2D(D3D11Texture2DDesc* pDesc, ref D3D11SubresourceData pInitialData, ID3D11Texture2D** ppTexture2D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture2DDesc*, D3D11SubresourceData*, ID3D11Texture2D**, HResult>)(LpVtbl[2]))(ptr, pDesc, (D3D11SubresourceData*)ppInitialData, ppTexture2D);
				return ret;
			}
		}

		public readonly unsafe HResult CreateTexture2D(ref D3D11Texture2DDesc pDesc, ref D3D11SubresourceData pInitialData, ID3D11Texture2D** ppTexture2D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture2DDesc* ppDesc = &pDesc)
			{
				fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture2DDesc*, D3D11SubresourceData*, ID3D11Texture2D**, HResult>)(LpVtbl[2]))(ptr, (D3D11Texture2DDesc*)ppDesc, (D3D11SubresourceData*)ppInitialData, ppTexture2D);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateTexture2D(D3D11Texture2DDesc* pDesc, D3D11SubresourceData* pInitialData, ref ID3D11Texture2D* ppTexture2D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Texture2D** pppTexture2D = &ppTexture2D)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture2DDesc*, D3D11SubresourceData*, ID3D11Texture2D**, HResult>)(LpVtbl[2]))(ptr, pDesc, pInitialData, (ID3D11Texture2D**)pppTexture2D);
				return ret;
			}
		}

		public readonly unsafe HResult CreateTexture2D(ref D3D11Texture2DDesc pDesc, D3D11SubresourceData* pInitialData, ref ID3D11Texture2D* ppTexture2D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture2DDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11Texture2D** pppTexture2D = &ppTexture2D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture2DDesc*, D3D11SubresourceData*, ID3D11Texture2D**, HResult>)(LpVtbl[2]))(ptr, (D3D11Texture2DDesc*)ppDesc, pInitialData, (ID3D11Texture2D**)pppTexture2D);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateTexture2D(D3D11Texture2DDesc* pDesc, ref D3D11SubresourceData pInitialData, ref ID3D11Texture2D* ppTexture2D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
			{
				fixed (ID3D11Texture2D** pppTexture2D = &ppTexture2D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture2DDesc*, D3D11SubresourceData*, ID3D11Texture2D**, HResult>)(LpVtbl[2]))(ptr, pDesc, (D3D11SubresourceData*)ppInitialData, (ID3D11Texture2D**)pppTexture2D);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateTexture2D(ref D3D11Texture2DDesc pDesc, ref D3D11SubresourceData pInitialData, ref ID3D11Texture2D* ppTexture2D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture2DDesc* ppDesc = &pDesc)
			{
				fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
				{
					fixed (ID3D11Texture2D** pppTexture2D = &ppTexture2D)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture2DDesc*, D3D11SubresourceData*, ID3D11Texture2D**, HResult>)(LpVtbl[2]))(ptr, (D3D11Texture2DDesc*)ppDesc, (D3D11SubresourceData*)ppInitialData, (ID3D11Texture2D**)pppTexture2D);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateTexture3D(D3D11Texture3DDesc* pDesc, D3D11SubresourceData* pInitialData, ID3D11Texture3D** ppTexture3D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture3DDesc*, D3D11SubresourceData*, ID3D11Texture3D**, HResult>)(LpVtbl[3]))(ptr, pDesc, pInitialData, ppTexture3D);
			return ret;
		}

		public readonly unsafe HResult CreateTexture3D(ref D3D11Texture3DDesc pDesc, D3D11SubresourceData* pInitialData, ID3D11Texture3D** ppTexture3D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture3DDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture3DDesc*, D3D11SubresourceData*, ID3D11Texture3D**, HResult>)(LpVtbl[3]))(ptr, (D3D11Texture3DDesc*)ppDesc, pInitialData, ppTexture3D);
				return ret;
			}
		}

		public readonly unsafe HResult CreateTexture3D(D3D11Texture3DDesc* pDesc, ref D3D11SubresourceData pInitialData, ID3D11Texture3D** ppTexture3D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture3DDesc*, D3D11SubresourceData*, ID3D11Texture3D**, HResult>)(LpVtbl[3]))(ptr, pDesc, (D3D11SubresourceData*)ppInitialData, ppTexture3D);
				return ret;
			}
		}

		public readonly unsafe HResult CreateTexture3D(ref D3D11Texture3DDesc pDesc, ref D3D11SubresourceData pInitialData, ID3D11Texture3D** ppTexture3D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture3DDesc* ppDesc = &pDesc)
			{
				fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture3DDesc*, D3D11SubresourceData*, ID3D11Texture3D**, HResult>)(LpVtbl[3]))(ptr, (D3D11Texture3DDesc*)ppDesc, (D3D11SubresourceData*)ppInitialData, ppTexture3D);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateTexture3D(D3D11Texture3DDesc* pDesc, D3D11SubresourceData* pInitialData, ref ID3D11Texture3D* ppTexture3D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Texture3D** pppTexture3D = &ppTexture3D)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture3DDesc*, D3D11SubresourceData*, ID3D11Texture3D**, HResult>)(LpVtbl[3]))(ptr, pDesc, pInitialData, (ID3D11Texture3D**)pppTexture3D);
				return ret;
			}
		}

		public readonly unsafe HResult CreateTexture3D(ref D3D11Texture3DDesc pDesc, D3D11SubresourceData* pInitialData, ref ID3D11Texture3D* ppTexture3D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture3DDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11Texture3D** pppTexture3D = &ppTexture3D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture3DDesc*, D3D11SubresourceData*, ID3D11Texture3D**, HResult>)(LpVtbl[3]))(ptr, (D3D11Texture3DDesc*)ppDesc, pInitialData, (ID3D11Texture3D**)pppTexture3D);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateTexture3D(D3D11Texture3DDesc* pDesc, ref D3D11SubresourceData pInitialData, ref ID3D11Texture3D* ppTexture3D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
			{
				fixed (ID3D11Texture3D** pppTexture3D = &ppTexture3D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture3DDesc*, D3D11SubresourceData*, ID3D11Texture3D**, HResult>)(LpVtbl[3]))(ptr, pDesc, (D3D11SubresourceData*)ppInitialData, (ID3D11Texture3D**)pppTexture3D);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateTexture3D(ref D3D11Texture3DDesc pDesc, ref D3D11SubresourceData pInitialData, ref ID3D11Texture3D* ppTexture3D)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture3DDesc* ppDesc = &pDesc)
			{
				fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
				{
					fixed (ID3D11Texture3D** pppTexture3D = &ppTexture3D)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Texture3DDesc*, D3D11SubresourceData*, ID3D11Texture3D**, HResult>)(LpVtbl[3]))(ptr, (D3D11Texture3DDesc*)ppDesc, (D3D11SubresourceData*)ppInitialData, (ID3D11Texture3D**)pppTexture3D);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateShaderResourceView(ID3D11Resource* pResource, D3D11ShaderResourceViewDesc* pDesc, ID3D11ShaderResourceView** ppSRView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[4]))(ptr, pResource, pDesc, ppSRView);
			return ret;
		}

		public readonly unsafe HResult CreateShaderResourceView(ref ID3D11Resource pResource, D3D11ShaderResourceViewDesc* pDesc, ID3D11ShaderResourceView** ppSRView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[4]))(ptr, (ID3D11Resource*)ppResource, pDesc, ppSRView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateShaderResourceView(ID3D11Resource* pResource, ref D3D11ShaderResourceViewDesc pDesc, ID3D11ShaderResourceView** ppSRView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ShaderResourceViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[4]))(ptr, pResource, (D3D11ShaderResourceViewDesc*)ppDesc, ppSRView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateShaderResourceView(ref ID3D11Resource pResource, ref D3D11ShaderResourceViewDesc pDesc, ID3D11ShaderResourceView** ppSRView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11ShaderResourceViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[4]))(ptr, (ID3D11Resource*)ppResource, (D3D11ShaderResourceViewDesc*)ppDesc, ppSRView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateShaderResourceView(ID3D11Resource* pResource, D3D11ShaderResourceViewDesc* pDesc, ref ID3D11ShaderResourceView* ppSRView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderResourceView** pppSRView = &ppSRView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[4]))(ptr, pResource, pDesc, (ID3D11ShaderResourceView**)pppSRView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateShaderResourceView(ref ID3D11Resource pResource, D3D11ShaderResourceViewDesc* pDesc, ref ID3D11ShaderResourceView* ppSRView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11ShaderResourceView** pppSRView = &ppSRView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[4]))(ptr, (ID3D11Resource*)ppResource, pDesc, (ID3D11ShaderResourceView**)pppSRView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateShaderResourceView(ID3D11Resource* pResource, ref D3D11ShaderResourceViewDesc pDesc, ref ID3D11ShaderResourceView* ppSRView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ShaderResourceViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11ShaderResourceView** pppSRView = &ppSRView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[4]))(ptr, pResource, (D3D11ShaderResourceViewDesc*)ppDesc, (ID3D11ShaderResourceView**)pppSRView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateShaderResourceView(ref ID3D11Resource pResource, ref D3D11ShaderResourceViewDesc pDesc, ref ID3D11ShaderResourceView* ppSRView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11ShaderResourceViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11ShaderResourceView** pppSRView = &ppSRView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11ShaderResourceViewDesc*, ID3D11ShaderResourceView**, HResult>)(LpVtbl[4]))(ptr, (ID3D11Resource*)ppResource, (D3D11ShaderResourceViewDesc*)ppDesc, (ID3D11ShaderResourceView**)pppSRView);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateUnorderedAccessView(ID3D11Resource* pResource, D3D11UnorderedAccessViewDesc* pDesc, ID3D11UnorderedAccessView** ppUAView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[5]))(ptr, pResource, pDesc, ppUAView);
			return ret;
		}

		public readonly unsafe HResult CreateUnorderedAccessView(ref ID3D11Resource pResource, D3D11UnorderedAccessViewDesc* pDesc, ID3D11UnorderedAccessView** ppUAView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[5]))(ptr, (ID3D11Resource*)ppResource, pDesc, ppUAView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateUnorderedAccessView(ID3D11Resource* pResource, ref D3D11UnorderedAccessViewDesc pDesc, ID3D11UnorderedAccessView** ppUAView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11UnorderedAccessViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[5]))(ptr, pResource, (D3D11UnorderedAccessViewDesc*)ppDesc, ppUAView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateUnorderedAccessView(ref ID3D11Resource pResource, ref D3D11UnorderedAccessViewDesc pDesc, ID3D11UnorderedAccessView** ppUAView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11UnorderedAccessViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[5]))(ptr, (ID3D11Resource*)ppResource, (D3D11UnorderedAccessViewDesc*)ppDesc, ppUAView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateUnorderedAccessView(ID3D11Resource* pResource, D3D11UnorderedAccessViewDesc* pDesc, ref ID3D11UnorderedAccessView* ppUAView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11UnorderedAccessView** pppUAView = &ppUAView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[5]))(ptr, pResource, pDesc, (ID3D11UnorderedAccessView**)pppUAView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateUnorderedAccessView(ref ID3D11Resource pResource, D3D11UnorderedAccessViewDesc* pDesc, ref ID3D11UnorderedAccessView* ppUAView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11UnorderedAccessView** pppUAView = &ppUAView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[5]))(ptr, (ID3D11Resource*)ppResource, pDesc, (ID3D11UnorderedAccessView**)pppUAView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateUnorderedAccessView(ID3D11Resource* pResource, ref D3D11UnorderedAccessViewDesc pDesc, ref ID3D11UnorderedAccessView* ppUAView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11UnorderedAccessViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11UnorderedAccessView** pppUAView = &ppUAView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[5]))(ptr, pResource, (D3D11UnorderedAccessViewDesc*)ppDesc, (ID3D11UnorderedAccessView**)pppUAView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateUnorderedAccessView(ref ID3D11Resource pResource, ref D3D11UnorderedAccessViewDesc pDesc, ref ID3D11UnorderedAccessView* ppUAView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11UnorderedAccessViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11UnorderedAccessView** pppUAView = &ppUAView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, HResult>)(LpVtbl[5]))(ptr, (ID3D11Resource*)ppResource, (D3D11UnorderedAccessViewDesc*)ppDesc, (ID3D11UnorderedAccessView**)pppUAView);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateRenderTargetView(ID3D11Resource* pResource, D3D11RenderTargetViewDesc* pDesc, ID3D11RenderTargetView** ppRTView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[6]))(ptr, pResource, pDesc, ppRTView);
			return ret;
		}

		public readonly unsafe HResult CreateRenderTargetView(ref ID3D11Resource pResource, D3D11RenderTargetViewDesc* pDesc, ID3D11RenderTargetView** ppRTView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[6]))(ptr, (ID3D11Resource*)ppResource, pDesc, ppRTView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateRenderTargetView(ID3D11Resource* pResource, ref D3D11RenderTargetViewDesc pDesc, ID3D11RenderTargetView** ppRTView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11RenderTargetViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[6]))(ptr, pResource, (D3D11RenderTargetViewDesc*)ppDesc, ppRTView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateRenderTargetView(ref ID3D11Resource pResource, ref D3D11RenderTargetViewDesc pDesc, ID3D11RenderTargetView** ppRTView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11RenderTargetViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[6]))(ptr, (ID3D11Resource*)ppResource, (D3D11RenderTargetViewDesc*)ppDesc, ppRTView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateRenderTargetView(ID3D11Resource* pResource, D3D11RenderTargetViewDesc* pDesc, ref ID3D11RenderTargetView* ppRTView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView** pppRTView = &ppRTView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[6]))(ptr, pResource, pDesc, (ID3D11RenderTargetView**)pppRTView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateRenderTargetView(ref ID3D11Resource pResource, D3D11RenderTargetViewDesc* pDesc, ref ID3D11RenderTargetView* ppRTView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11RenderTargetView** pppRTView = &ppRTView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[6]))(ptr, (ID3D11Resource*)ppResource, pDesc, (ID3D11RenderTargetView**)pppRTView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateRenderTargetView(ID3D11Resource* pResource, ref D3D11RenderTargetViewDesc pDesc, ref ID3D11RenderTargetView* ppRTView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11RenderTargetViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11RenderTargetView** pppRTView = &ppRTView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[6]))(ptr, pResource, (D3D11RenderTargetViewDesc*)ppDesc, (ID3D11RenderTargetView**)pppRTView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateRenderTargetView(ref ID3D11Resource pResource, ref D3D11RenderTargetViewDesc pDesc, ref ID3D11RenderTargetView* ppRTView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11RenderTargetViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11RenderTargetView** pppRTView = &ppRTView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11RenderTargetViewDesc*, ID3D11RenderTargetView**, HResult>)(LpVtbl[6]))(ptr, (ID3D11Resource*)ppResource, (D3D11RenderTargetViewDesc*)ppDesc, (ID3D11RenderTargetView**)pppRTView);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateDepthStencilView(ID3D11Resource* pResource, D3D11DepthStencilViewDesc* pDesc, ID3D11DepthStencilView** ppDepthStencilView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[7]))(ptr, pResource, pDesc, ppDepthStencilView);
			return ret;
		}

		public readonly unsafe HResult CreateDepthStencilView(ref ID3D11Resource pResource, D3D11DepthStencilViewDesc* pDesc, ID3D11DepthStencilView** ppDepthStencilView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[7]))(ptr, (ID3D11Resource*)ppResource, pDesc, ppDepthStencilView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateDepthStencilView(ID3D11Resource* pResource, ref D3D11DepthStencilViewDesc pDesc, ID3D11DepthStencilView** ppDepthStencilView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11DepthStencilViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[7]))(ptr, pResource, (D3D11DepthStencilViewDesc*)ppDesc, ppDepthStencilView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateDepthStencilView(ref ID3D11Resource pResource, ref D3D11DepthStencilViewDesc pDesc, ID3D11DepthStencilView** ppDepthStencilView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11DepthStencilViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[7]))(ptr, (ID3D11Resource*)ppResource, (D3D11DepthStencilViewDesc*)ppDesc, ppDepthStencilView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDepthStencilView(ID3D11Resource* pResource, D3D11DepthStencilViewDesc* pDesc, ref ID3D11DepthStencilView* ppDepthStencilView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DepthStencilView** pppDepthStencilView = &ppDepthStencilView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[7]))(ptr, pResource, pDesc, (ID3D11DepthStencilView**)pppDepthStencilView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateDepthStencilView(ref ID3D11Resource pResource, D3D11DepthStencilViewDesc* pDesc, ref ID3D11DepthStencilView* ppDepthStencilView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11DepthStencilView** pppDepthStencilView = &ppDepthStencilView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[7]))(ptr, (ID3D11Resource*)ppResource, pDesc, (ID3D11DepthStencilView**)pppDepthStencilView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDepthStencilView(ID3D11Resource* pResource, ref D3D11DepthStencilViewDesc pDesc, ref ID3D11DepthStencilView* ppDepthStencilView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11DepthStencilViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11DepthStencilView** pppDepthStencilView = &ppDepthStencilView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[7]))(ptr, pResource, (D3D11DepthStencilViewDesc*)ppDesc, (ID3D11DepthStencilView**)pppDepthStencilView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDepthStencilView(ref ID3D11Resource pResource, ref D3D11DepthStencilViewDesc pDesc, ref ID3D11DepthStencilView* ppDepthStencilView)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11DepthStencilViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11DepthStencilView** pppDepthStencilView = &ppDepthStencilView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11Resource*, D3D11DepthStencilViewDesc*, ID3D11DepthStencilView**, HResult>)(LpVtbl[7]))(ptr, (ID3D11Resource*)ppResource, (D3D11DepthStencilViewDesc*)ppDesc, (ID3D11DepthStencilView**)pppDepthStencilView);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateInputLayout(D3D11InputElementDesc* pInputElementDescs, uint numElements, void* pShaderBytecodeWithInputSignature, nuint bytecodeLength, ID3D11InputLayout** ppInputLayout)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, HResult>)(LpVtbl[8]))(ptr, pInputElementDescs, numElements, pShaderBytecodeWithInputSignature, bytecodeLength, ppInputLayout);
			return ret;
		}

		public readonly unsafe HResult CreateInputLayout(ref D3D11InputElementDesc pInputElementDescs, uint numElements, void* pShaderBytecodeWithInputSignature, nuint bytecodeLength, ID3D11InputLayout** ppInputLayout)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11InputElementDesc* ppInputElementDescs = &pInputElementDescs)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, HResult>)(LpVtbl[8]))(ptr, (D3D11InputElementDesc*)ppInputElementDescs, numElements, pShaderBytecodeWithInputSignature, bytecodeLength, ppInputLayout);
				return ret;
			}
		}

		public readonly unsafe HResult CreateInputLayout(D3D11InputElementDesc* pInputElementDescs, uint numElements, void* pShaderBytecodeWithInputSignature, nuint bytecodeLength, ref ID3D11InputLayout* ppInputLayout)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11InputLayout** pppInputLayout = &ppInputLayout)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, HResult>)(LpVtbl[8]))(ptr, pInputElementDescs, numElements, pShaderBytecodeWithInputSignature, bytecodeLength, (ID3D11InputLayout**)pppInputLayout);
				return ret;
			}
		}

		public readonly unsafe HResult CreateInputLayout(ref D3D11InputElementDesc pInputElementDescs, uint numElements, void* pShaderBytecodeWithInputSignature, nuint bytecodeLength, ref ID3D11InputLayout* ppInputLayout)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11InputElementDesc* ppInputElementDescs = &pInputElementDescs)
			{
				fixed (ID3D11InputLayout** pppInputLayout = &ppInputLayout)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, HResult>)(LpVtbl[8]))(ptr, (D3D11InputElementDesc*)ppInputElementDescs, numElements, pShaderBytecodeWithInputSignature, bytecodeLength, (ID3D11InputLayout**)pppInputLayout);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateVertexShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11VertexShader** ppVertexShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, HResult>)(LpVtbl[9]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, ppVertexShader);
			return ret;
		}

		public readonly unsafe HResult CreateVertexShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11VertexShader** ppVertexShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, HResult>)(LpVtbl[9]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, ppVertexShader);
				return ret;
			}
		}

		public readonly unsafe HResult CreateVertexShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11VertexShader* ppVertexShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VertexShader** pppVertexShader = &ppVertexShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, HResult>)(LpVtbl[9]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, (ID3D11VertexShader**)pppVertexShader);
				return ret;
			}
		}

		public readonly unsafe HResult CreateVertexShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11VertexShader* ppVertexShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11VertexShader** pppVertexShader = &ppVertexShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, HResult>)(LpVtbl[9]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11VertexShader**)pppVertexShader);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateGeometryShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[10]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, ppGeometryShader);
			return ret;
		}

		public readonly unsafe HResult CreateGeometryShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[10]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, ppGeometryShader);
				return ret;
			}
		}

		public readonly unsafe HResult CreateGeometryShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[10]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
				return ret;
			}
		}

		public readonly unsafe HResult CreateGeometryShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[10]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, D3D11SoDeclarationEntry* pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, D3D11SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[11]))(ptr, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, pClassLinkage, ppGeometryShader);
			return ret;
		}

		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, ref D3D11SoDeclarationEntry pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, D3D11SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[11]))(ptr, pShaderBytecode, bytecodeLength, (D3D11SoDeclarationEntry*)ppSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, pClassLinkage, ppGeometryShader);
				return ret;
			}
		}

		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, D3D11SoDeclarationEntry* pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppBufferStrides = &pBufferStrides)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, D3D11SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[11]))(ptr, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, pClassLinkage, ppGeometryShader);
				return ret;
			}
		}

		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, ref D3D11SoDeclarationEntry pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (uint* ppBufferStrides = &pBufferStrides)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, D3D11SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[11]))(ptr, pShaderBytecode, bytecodeLength, (D3D11SoDeclarationEntry*)ppSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, pClassLinkage, ppGeometryShader);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, D3D11SoDeclarationEntry* pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, D3D11SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[11]))(ptr, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, ppGeometryShader);
				return ret;
			}
		}

		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, ref D3D11SoDeclarationEntry pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, D3D11SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[11]))(ptr, pShaderBytecode, bytecodeLength, (D3D11SoDeclarationEntry*)ppSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, ppGeometryShader);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, D3D11SoDeclarationEntry* pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppBufferStrides = &pBufferStrides)
			{
				fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, D3D11SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[11]))(ptr, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, ppGeometryShader);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, ref D3D11SoDeclarationEntry pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (uint* ppBufferStrides = &pBufferStrides)
				{
					fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, D3D11SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[11]))(ptr, pShaderBytecode, bytecodeLength, (D3D11SoDeclarationEntry*)ppSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, ppGeometryShader);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, D3D11SoDeclarationEntry* pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, D3D11SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[11]))(ptr, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, pClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
				return ret;
			}
		}

		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, ref D3D11SoDeclarationEntry pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, D3D11SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[11]))(ptr, pShaderBytecode, bytecodeLength, (D3D11SoDeclarationEntry*)ppSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, pClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, D3D11SoDeclarationEntry* pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppBufferStrides = &pBufferStrides)
			{
				fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, D3D11SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[11]))(ptr, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, pClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, ref D3D11SoDeclarationEntry pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (uint* ppBufferStrides = &pBufferStrides)
				{
					fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, D3D11SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[11]))(ptr, pShaderBytecode, bytecodeLength, (D3D11SoDeclarationEntry*)ppSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, pClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, D3D11SoDeclarationEntry* pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, D3D11SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[11]))(ptr, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, ref D3D11SoDeclarationEntry pSODeclaration, uint numEntries, uint* pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
				{
					fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, D3D11SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[11]))(ptr, pShaderBytecode, bytecodeLength, (D3D11SoDeclarationEntry*)ppSODeclaration, numEntries, pBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, D3D11SoDeclarationEntry* pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppBufferStrides = &pBufferStrides)
			{
				fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
				{
					fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, D3D11SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[11]))(ptr, pShaderBytecode, bytecodeLength, pSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateGeometryShaderWithStreamOutput(void* pShaderBytecode, nuint bytecodeLength, ref D3D11SoDeclarationEntry pSODeclaration, uint numEntries, ref uint pBufferStrides, uint numStrides, uint rasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SoDeclarationEntry* ppSODeclaration = &pSODeclaration)
			{
				fixed (uint* ppBufferStrides = &pBufferStrides)
				{
					fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
					{
						fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, D3D11SoDeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, HResult>)(LpVtbl[11]))(ptr, pShaderBytecode, bytecodeLength, (D3D11SoDeclarationEntry*)ppSODeclaration, numEntries, (uint*)ppBufferStrides, numStrides, rasterizedStream, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11GeometryShader**)pppGeometryShader);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreatePixelShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11PixelShader** ppPixelShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, HResult>)(LpVtbl[12]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, ppPixelShader);
			return ret;
		}

		public readonly unsafe HResult CreatePixelShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11PixelShader** ppPixelShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, HResult>)(LpVtbl[12]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, ppPixelShader);
				return ret;
			}
		}

		public readonly unsafe HResult CreatePixelShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11PixelShader* ppPixelShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11PixelShader** pppPixelShader = &ppPixelShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, HResult>)(LpVtbl[12]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, (ID3D11PixelShader**)pppPixelShader);
				return ret;
			}
		}

		public readonly unsafe HResult CreatePixelShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11PixelShader* ppPixelShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11PixelShader** pppPixelShader = &ppPixelShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, HResult>)(LpVtbl[12]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11PixelShader**)pppPixelShader);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateHullShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11HullShader** ppHullShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, HResult>)(LpVtbl[13]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, ppHullShader);
			return ret;
		}

		public readonly unsafe HResult CreateHullShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11HullShader** ppHullShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, HResult>)(LpVtbl[13]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, ppHullShader);
				return ret;
			}
		}

		public readonly unsafe HResult CreateHullShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11HullShader* ppHullShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11HullShader** pppHullShader = &ppHullShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, HResult>)(LpVtbl[13]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, (ID3D11HullShader**)pppHullShader);
				return ret;
			}
		}

		public readonly unsafe HResult CreateHullShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11HullShader* ppHullShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11HullShader** pppHullShader = &ppHullShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, HResult>)(LpVtbl[13]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11HullShader**)pppHullShader);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDomainShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11DomainShader** ppDomainShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, ppDomainShader);
			return ret;
		}

		public readonly unsafe HResult CreateDomainShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11DomainShader** ppDomainShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, ppDomainShader);
				return ret;
			}
		}

		public readonly unsafe HResult CreateDomainShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11DomainShader* ppDomainShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DomainShader** pppDomainShader = &ppDomainShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, (ID3D11DomainShader**)pppDomainShader);
				return ret;
			}
		}

		public readonly unsafe HResult CreateDomainShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11DomainShader* ppDomainShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11DomainShader** pppDomainShader = &ppDomainShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, HResult>)(LpVtbl[14]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11DomainShader**)pppDomainShader);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateComputeShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11ComputeShader** ppComputeShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, HResult>)(LpVtbl[15]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, ppComputeShader);
			return ret;
		}

		public readonly unsafe HResult CreateComputeShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11ComputeShader** ppComputeShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, HResult>)(LpVtbl[15]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, ppComputeShader);
				return ret;
			}
		}

		public readonly unsafe HResult CreateComputeShader(void* pShaderBytecode, nuint bytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11ComputeShader* ppComputeShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ComputeShader** pppComputeShader = &ppComputeShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, HResult>)(LpVtbl[15]))(ptr, pShaderBytecode, bytecodeLength, pClassLinkage, (ID3D11ComputeShader**)pppComputeShader);
				return ret;
			}
		}

		public readonly unsafe HResult CreateComputeShader(void* pShaderBytecode, nuint bytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11ComputeShader* ppComputeShader)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage* ppClassLinkage = &pClassLinkage)
			{
				fixed (ID3D11ComputeShader** pppComputeShader = &ppComputeShader)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, HResult>)(LpVtbl[15]))(ptr, pShaderBytecode, bytecodeLength, (ID3D11ClassLinkage*)ppClassLinkage, (ID3D11ComputeShader**)pppComputeShader);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateClassLinkage(ID3D11ClassLinkage** ppLinkage)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11ClassLinkage**, HResult>)(LpVtbl[16]))(ptr, ppLinkage);
			return ret;
		}

		public readonly unsafe HResult CreateClassLinkage(ref ID3D11ClassLinkage* ppLinkage)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage** pppLinkage = &ppLinkage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11ClassLinkage**, HResult>)(LpVtbl[16]))(ptr, (ID3D11ClassLinkage**)pppLinkage);
				return ret;
			}
		}

		public readonly unsafe HResult CreateBlendState(D3D11BlendDesc* pBlendStateDesc, ID3D11BlendState** ppBlendState)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11BlendDesc*, ID3D11BlendState**, HResult>)(LpVtbl[17]))(ptr, pBlendStateDesc, ppBlendState);
			return ret;
		}

		public readonly unsafe HResult CreateBlendState(ref D3D11BlendDesc pBlendStateDesc, ID3D11BlendState** ppBlendState)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11BlendDesc* ppBlendStateDesc = &pBlendStateDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11BlendDesc*, ID3D11BlendState**, HResult>)(LpVtbl[17]))(ptr, (D3D11BlendDesc*)ppBlendStateDesc, ppBlendState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateBlendState(D3D11BlendDesc* pBlendStateDesc, ref ID3D11BlendState* ppBlendState)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11BlendState** pppBlendState = &ppBlendState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11BlendDesc*, ID3D11BlendState**, HResult>)(LpVtbl[17]))(ptr, pBlendStateDesc, (ID3D11BlendState**)pppBlendState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateBlendState(ref D3D11BlendDesc pBlendStateDesc, ref ID3D11BlendState* ppBlendState)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11BlendDesc* ppBlendStateDesc = &pBlendStateDesc)
			{
				fixed (ID3D11BlendState** pppBlendState = &ppBlendState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11BlendDesc*, ID3D11BlendState**, HResult>)(LpVtbl[17]))(ptr, (D3D11BlendDesc*)ppBlendStateDesc, (ID3D11BlendState**)pppBlendState);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDepthStencilState(D3D11DepthStencilDesc* pDepthStencilDesc, ID3D11DepthStencilState** ppDepthStencilState)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11DepthStencilDesc*, ID3D11DepthStencilState**, HResult>)(LpVtbl[18]))(ptr, pDepthStencilDesc, ppDepthStencilState);
			return ret;
		}

		public readonly unsafe HResult CreateDepthStencilState(ref D3D11DepthStencilDesc pDepthStencilDesc, ID3D11DepthStencilState** ppDepthStencilState)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11DepthStencilDesc* ppDepthStencilDesc = &pDepthStencilDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11DepthStencilDesc*, ID3D11DepthStencilState**, HResult>)(LpVtbl[18]))(ptr, (D3D11DepthStencilDesc*)ppDepthStencilDesc, ppDepthStencilState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateDepthStencilState(D3D11DepthStencilDesc* pDepthStencilDesc, ref ID3D11DepthStencilState* ppDepthStencilState)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DepthStencilState** pppDepthStencilState = &ppDepthStencilState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11DepthStencilDesc*, ID3D11DepthStencilState**, HResult>)(LpVtbl[18]))(ptr, pDepthStencilDesc, (ID3D11DepthStencilState**)pppDepthStencilState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateDepthStencilState(ref D3D11DepthStencilDesc pDepthStencilDesc, ref ID3D11DepthStencilState* ppDepthStencilState)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11DepthStencilDesc* ppDepthStencilDesc = &pDepthStencilDesc)
			{
				fixed (ID3D11DepthStencilState** pppDepthStencilState = &ppDepthStencilState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11DepthStencilDesc*, ID3D11DepthStencilState**, HResult>)(LpVtbl[18]))(ptr, (D3D11DepthStencilDesc*)ppDepthStencilDesc, (ID3D11DepthStencilState**)pppDepthStencilState);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateRasterizerState(D3D11RasterizerDesc* pRasterizerDesc, ID3D11RasterizerState** ppRasterizerState)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11RasterizerDesc*, ID3D11RasterizerState**, HResult>)(LpVtbl[19]))(ptr, pRasterizerDesc, ppRasterizerState);
			return ret;
		}

		public readonly unsafe HResult CreateRasterizerState(ref D3D11RasterizerDesc pRasterizerDesc, ID3D11RasterizerState** ppRasterizerState)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11RasterizerDesc* ppRasterizerDesc = &pRasterizerDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11RasterizerDesc*, ID3D11RasterizerState**, HResult>)(LpVtbl[19]))(ptr, (D3D11RasterizerDesc*)ppRasterizerDesc, ppRasterizerState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateRasterizerState(D3D11RasterizerDesc* pRasterizerDesc, ref ID3D11RasterizerState* ppRasterizerState)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RasterizerState** pppRasterizerState = &ppRasterizerState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11RasterizerDesc*, ID3D11RasterizerState**, HResult>)(LpVtbl[19]))(ptr, pRasterizerDesc, (ID3D11RasterizerState**)pppRasterizerState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateRasterizerState(ref D3D11RasterizerDesc pRasterizerDesc, ref ID3D11RasterizerState* ppRasterizerState)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11RasterizerDesc* ppRasterizerDesc = &pRasterizerDesc)
			{
				fixed (ID3D11RasterizerState** pppRasterizerState = &ppRasterizerState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11RasterizerDesc*, ID3D11RasterizerState**, HResult>)(LpVtbl[19]))(ptr, (D3D11RasterizerDesc*)ppRasterizerDesc, (ID3D11RasterizerState**)pppRasterizerState);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSamplerState(D3D11SamplerDesc* pSamplerDesc, ID3D11SamplerState** ppSamplerState)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11SamplerDesc*, ID3D11SamplerState**, HResult>)(LpVtbl[20]))(ptr, pSamplerDesc, ppSamplerState);
			return ret;
		}

		public readonly unsafe HResult CreateSamplerState(ref D3D11SamplerDesc pSamplerDesc, ID3D11SamplerState** ppSamplerState)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SamplerDesc* ppSamplerDesc = &pSamplerDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11SamplerDesc*, ID3D11SamplerState**, HResult>)(LpVtbl[20]))(ptr, (D3D11SamplerDesc*)ppSamplerDesc, ppSamplerState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSamplerState(D3D11SamplerDesc* pSamplerDesc, ref ID3D11SamplerState* ppSamplerState)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11SamplerState** pppSamplerState = &ppSamplerState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11SamplerDesc*, ID3D11SamplerState**, HResult>)(LpVtbl[20]))(ptr, pSamplerDesc, (ID3D11SamplerState**)pppSamplerState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSamplerState(ref D3D11SamplerDesc pSamplerDesc, ref ID3D11SamplerState* ppSamplerState)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SamplerDesc* ppSamplerDesc = &pSamplerDesc)
			{
				fixed (ID3D11SamplerState** pppSamplerState = &ppSamplerState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11SamplerDesc*, ID3D11SamplerState**, HResult>)(LpVtbl[20]))(ptr, (D3D11SamplerDesc*)ppSamplerDesc, (ID3D11SamplerState**)pppSamplerState);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateQuery(D3D11QueryDesc* pQueryDesc, ID3D11Query** ppQuery)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11QueryDesc*, ID3D11Query**, HResult>)(LpVtbl[21]))(ptr, pQueryDesc, ppQuery);
			return ret;
		}

		public readonly unsafe HResult CreateQuery(ref D3D11QueryDesc pQueryDesc, ID3D11Query** ppQuery)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11QueryDesc* ppQueryDesc = &pQueryDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11QueryDesc*, ID3D11Query**, HResult>)(LpVtbl[21]))(ptr, (D3D11QueryDesc*)ppQueryDesc, ppQuery);
				return ret;
			}
		}

		public readonly unsafe HResult CreateQuery(D3D11QueryDesc* pQueryDesc, ref ID3D11Query* ppQuery)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Query** pppQuery = &ppQuery)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11QueryDesc*, ID3D11Query**, HResult>)(LpVtbl[21]))(ptr, pQueryDesc, (ID3D11Query**)pppQuery);
				return ret;
			}
		}

		public readonly unsafe HResult CreateQuery(ref D3D11QueryDesc pQueryDesc, ref ID3D11Query* ppQuery)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11QueryDesc* ppQueryDesc = &pQueryDesc)
			{
				fixed (ID3D11Query** pppQuery = &ppQuery)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11QueryDesc*, ID3D11Query**, HResult>)(LpVtbl[21]))(ptr, (D3D11QueryDesc*)ppQueryDesc, (ID3D11Query**)pppQuery);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreatePredicate(D3D11QueryDesc* pPredicateDesc, ID3D11Predicate** ppPredicate)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11QueryDesc*, ID3D11Predicate**, HResult>)(LpVtbl[22]))(ptr, pPredicateDesc, ppPredicate);
			return ret;
		}

		public readonly unsafe HResult CreatePredicate(ref D3D11QueryDesc pPredicateDesc, ID3D11Predicate** ppPredicate)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11QueryDesc* ppPredicateDesc = &pPredicateDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11QueryDesc*, ID3D11Predicate**, HResult>)(LpVtbl[22]))(ptr, (D3D11QueryDesc*)ppPredicateDesc, ppPredicate);
				return ret;
			}
		}

		public readonly unsafe HResult CreatePredicate(D3D11QueryDesc* pPredicateDesc, ref ID3D11Predicate* ppPredicate)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Predicate** pppPredicate = &ppPredicate)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11QueryDesc*, ID3D11Predicate**, HResult>)(LpVtbl[22]))(ptr, pPredicateDesc, (ID3D11Predicate**)pppPredicate);
				return ret;
			}
		}

		public readonly unsafe HResult CreatePredicate(ref D3D11QueryDesc pPredicateDesc, ref ID3D11Predicate* ppPredicate)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11QueryDesc* ppPredicateDesc = &pPredicateDesc)
			{
				fixed (ID3D11Predicate** pppPredicate = &ppPredicate)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11QueryDesc*, ID3D11Predicate**, HResult>)(LpVtbl[22]))(ptr, (D3D11QueryDesc*)ppPredicateDesc, (ID3D11Predicate**)pppPredicate);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCounter(D3D11CounterDesc* pCounterDesc, ID3D11Counter** ppCounter)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, ID3D11Counter**, HResult>)(LpVtbl[23]))(ptr, pCounterDesc, ppCounter);
			return ret;
		}

		public readonly unsafe HResult CreateCounter(ref D3D11CounterDesc pCounterDesc, ID3D11Counter** ppCounter)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppCounterDesc = &pCounterDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, ID3D11Counter**, HResult>)(LpVtbl[23]))(ptr, (D3D11CounterDesc*)ppCounterDesc, ppCounter);
				return ret;
			}
		}

		public readonly unsafe HResult CreateCounter(D3D11CounterDesc* pCounterDesc, ref ID3D11Counter* ppCounter)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Counter** pppCounter = &ppCounter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, ID3D11Counter**, HResult>)(LpVtbl[23]))(ptr, pCounterDesc, (ID3D11Counter**)pppCounter);
				return ret;
			}
		}

		public readonly unsafe HResult CreateCounter(ref D3D11CounterDesc pCounterDesc, ref ID3D11Counter* ppCounter)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppCounterDesc = &pCounterDesc)
			{
				fixed (ID3D11Counter** pppCounter = &ppCounter)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, ID3D11Counter**, HResult>)(LpVtbl[23]))(ptr, (D3D11CounterDesc*)ppCounterDesc, (ID3D11Counter**)pppCounter);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDeferredContext(uint contextFlags, ID3D11DeviceContext** ppDeferredContext)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, uint, ID3D11DeviceContext**, HResult>)(LpVtbl[24]))(ptr, contextFlags, ppDeferredContext);
			return ret;
		}

		public readonly unsafe HResult CreateDeferredContext(uint contextFlags, ref ID3D11DeviceContext* ppDeferredContext)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceContext** pppDeferredContext = &ppDeferredContext)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, uint, ID3D11DeviceContext**, HResult>)(LpVtbl[24]))(ptr, contextFlags, (ID3D11DeviceContext**)pppDeferredContext);
				return ret;
			}
		}

		public readonly unsafe HResult OpenSharedResource(nint hResource, Guid* returnedInterface, void** ppResource)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, nint, Guid*, void**, HResult>)(LpVtbl[25]))(ptr, hResource, returnedInterface, ppResource);
			return ret;
		}

		public readonly unsafe HResult OpenSharedResource(nint hResource, ref Guid returnedInterface, void** ppResource)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* preturnedInterface = &returnedInterface)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, nint, Guid*, void**, HResult>)(LpVtbl[25]))(ptr, hResource, (Guid*)preturnedInterface, ppResource);
				return ret;
			}
		}

		public readonly unsafe HResult CheckFormatSupport(DxgiFormat format, uint* pFormatSupport)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, DxgiFormat, uint*, HResult>)(LpVtbl[26]))(ptr, format, pFormatSupport);
			return ret;
		}

		public readonly unsafe HResult CheckFormatSupport(DxgiFormat format, ref uint pFormatSupport)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFormatSupport = &pFormatSupport)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, DxgiFormat, uint*, HResult>)(LpVtbl[26]))(ptr, format, (uint*)ppFormatSupport);
				return ret;
			}
		}

		public readonly unsafe HResult CheckMultisampleQualityLevels(DxgiFormat format, uint sampleCount, uint* pNumQualityLevels)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, DxgiFormat, uint, uint*, HResult>)(LpVtbl[27]))(ptr, format, sampleCount, pNumQualityLevels);
			return ret;
		}

		public readonly unsafe HResult CheckMultisampleQualityLevels(DxgiFormat format, uint sampleCount, ref uint pNumQualityLevels)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumQualityLevels = &pNumQualityLevels)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, DxgiFormat, uint, uint*, HResult>)(LpVtbl[27]))(ptr, format, sampleCount, (uint*)ppNumQualityLevels);
				return ret;
			}
		}

		public readonly unsafe void CheckCounterInfo(D3D11CounterInfo* pCounterInfo)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterInfo*, void>)(LpVtbl[28]))(ptr, pCounterInfo);
		}

		public readonly unsafe void CheckCounterInfo(ref D3D11CounterInfo pCounterInfo)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterInfo* ppCounterInfo = &pCounterInfo)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterInfo*, void>)(LpVtbl[28]))(ptr, (D3D11CounterInfo*)ppCounterInfo);
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, D3D11CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
			return ret;
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, D3D11CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				return ret;
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, ref D3D11CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterType* ppType = &pType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, (D3D11CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				return ret;
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, ref D3D11CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (D3D11CounterType* ppType = &pType)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, (D3D11CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, D3D11CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				return ret;
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, D3D11CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, ref D3D11CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, (D3D11CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, ref D3D11CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (D3D11CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, (D3D11CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, D3D11CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
				return ret;
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, D3D11CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, ref D3D11CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, (D3D11CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, ref D3D11CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (D3D11CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, (D3D11CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, D3D11CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, D3D11CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, ref D3D11CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, (D3D11CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, ref D3D11CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (D3D11CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, (D3D11CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, D3D11CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
				return ret;
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, D3D11CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, ref D3D11CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterType* ppType = &pType)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, (D3D11CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, ref D3D11CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (D3D11CounterType* ppType = &pType)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, (D3D11CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, D3D11CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, D3D11CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, ref D3D11CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, (D3D11CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, ref D3D11CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (D3D11CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, (D3D11CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, D3D11CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, D3D11CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, ref D3D11CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, (D3D11CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, ref D3D11CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (D3D11CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, (D3D11CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, D3D11CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, D3D11CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, ref D3D11CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, (D3D11CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, ref D3D11CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (D3D11CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, (D3D11CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, pDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, D3D11CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDescriptionLength = &pDescriptionLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
				return ret;
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, D3D11CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, ref D3D11CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterType* ppType = &pType)
			{
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, (D3D11CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, ref D3D11CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (D3D11CounterType* ppType = &pType)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, (D3D11CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, D3D11CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, D3D11CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, ref D3D11CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, (D3D11CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, ref D3D11CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (D3D11CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, (D3D11CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, D3D11CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, D3D11CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, ref D3D11CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, (D3D11CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, ref D3D11CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (D3D11CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, (D3D11CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, D3D11CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, D3D11CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, ref D3D11CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, (D3D11CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, ref D3D11CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (D3D11CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, (D3D11CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, pUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, D3D11CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppUnitsLength = &pUnitsLength)
			{
				fixed (uint* ppDescriptionLength = &pDescriptionLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, D3D11CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, pType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, ref D3D11CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterType* ppType = &pType)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, (D3D11CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, ref D3D11CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (D3D11CounterType* ppType = &pType)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, (D3D11CounterType*)ppType, pActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, D3D11CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, D3D11CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, ref D3D11CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, (D3D11CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, ref D3D11CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (D3D11CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, (D3D11CounterType*)ppType, (uint*)ppActiveCounters, szName, pNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, D3D11CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNameLength = &pNameLength)
			{
				fixed (uint* ppUnitsLength = &pUnitsLength)
				{
					fixed (uint* ppDescriptionLength = &pDescriptionLength)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, D3D11CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, pType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, ref D3D11CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterType* ppType = &pType)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, (D3D11CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, ref D3D11CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (D3D11CounterType* ppType = &pType)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, (D3D11CounterType*)ppType, pActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, D3D11CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppActiveCounters = &pActiveCounters)
			{
				fixed (uint* ppNameLength = &pNameLength)
				{
					fixed (uint* ppUnitsLength = &pUnitsLength)
					{
						fixed (uint* ppDescriptionLength = &pDescriptionLength)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, D3D11CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, pType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(D3D11CounterDesc* pDesc, ref D3D11CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterType* ppType = &pType)
			{
				fixed (uint* ppActiveCounters = &pActiveCounters)
				{
					fixed (uint* ppNameLength = &pNameLength)
					{
						fixed (uint* ppUnitsLength = &pUnitsLength)
						{
							fixed (uint* ppDescriptionLength = &pDescriptionLength)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, pDesc, (D3D11CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckCounter(ref D3D11CounterDesc pDesc, ref D3D11CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				fixed (D3D11CounterType* ppType = &pType)
				{
					fixed (uint* ppActiveCounters = &pActiveCounters)
					{
						fixed (uint* ppNameLength = &pNameLength)
						{
							fixed (uint* ppUnitsLength = &pUnitsLength)
							{
								fixed (uint* ppDescriptionLength = &pDescriptionLength)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11CounterDesc*, D3D11CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, HResult>)(LpVtbl[29]))(ptr, (D3D11CounterDesc*)ppDesc, (D3D11CounterType*)ppType, (uint*)ppActiveCounters, szName, (uint*)ppNameLength, szUnits, (uint*)ppUnitsLength, szDescription, (uint*)ppDescriptionLength);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckFeatureSupport(D3D11Feature feature, void* pFeatureSupportData, uint featureSupportDataSize)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3D11Feature, void*, uint, HResult>)(LpVtbl[30]))(ptr, feature, pFeatureSupportData, featureSupportDataSize);
			return ret;
		}

		public readonly unsafe D3DFeatureLevel GetFeatureLevel()
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3DFeatureLevel ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, D3DFeatureLevel>)(LpVtbl[34]))(ptr);
			return ret;
		}

		public readonly unsafe uint GetCreationFlags()
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, uint>)(LpVtbl[35]))(ptr);
			return ret;
		}

		public readonly unsafe HResult GetDeviceRemovedReason()
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, HResult>)(LpVtbl[36]))(ptr);
			return ret;
		}

		public readonly unsafe void GetImmediateContext(ID3D11DeviceContext** ppImmediateContext)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11DeviceContext**, void>)(LpVtbl[37]))(ptr, ppImmediateContext);
		}

		public readonly unsafe void GetImmediateContext(ref ID3D11DeviceContext* ppImmediateContext)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device*, ID3D11DeviceContext**, void>)(LpVtbl[37]))(ptr, (ID3D11DeviceContext**)pppImmediateContext);
			}
		}

		public readonly unsafe HResult SetExceptionMode(uint raiseFlags)
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, uint, HResult>)(LpVtbl[38]))(ptr, raiseFlags);
			return ret;
		}

		public readonly unsafe uint GetExceptionMode()
		{
			ID3D11Device* ptr = (ID3D11Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Device*, uint>)(LpVtbl[39]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11Device value)
		{
			return Unsafe.As<ID3D11Device, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0005 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D11_BUFFER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11BufferDesc
	{
		[NativeName("ByteWidth")]
		public uint ByteWidth;
		[NativeName("Usage")]
		public D3D11Usage Usage;
		[NativeName("BindFlags")]
		public uint BindFlags;
		[NativeName("CPUAccessFlags")]
		public uint CPUAccessFlags;
		[NativeName("MiscFlags")]
		public uint MiscFlags;
		[NativeName("StructureByteStride")]
		public uint StructureByteStride;


	}

	[NativeName("D3D11_SUBRESOURCE_DATA")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11SubresourceData
	{
		[NativeName("pSysMem")]
		public unsafe void* PSysMem;
		[NativeName("SysMemPitch")]
		public uint SysMemPitch;
		[NativeName("SysMemSlicePitch")]
		public uint SysMemSlicePitch;


	}

	[Guid("48570b85-d1ee-4fcd-a250-eb350722b037")]
	[NativeName("ID3D11Buffer")]
	public partial struct ID3D11Buffer : IComObject, IComObject<ID3D11Buffer>, IComObject<ID3D11Resource>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("48570b85-d1ee-4fcd-a250-eb350722b037");

		public unsafe ID3D11Buffer (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetType(D3D11ResourceDimension* pResourceDimension)
		{
			ID3D11Buffer* ptr = (ID3D11Buffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Buffer*, D3D11ResourceDimension*, void>)(*LpVtbl))(ptr, pResourceDimension);
		}

		public readonly unsafe void GetType(ref D3D11ResourceDimension pResourceDimension)
		{
			ID3D11Buffer* ptr = (ID3D11Buffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ResourceDimension* ppResourceDimension = &pResourceDimension)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Buffer*, D3D11ResourceDimension*, void>)(*LpVtbl))(ptr, (D3D11ResourceDimension*)ppResourceDimension);
			}
		}

		public readonly unsafe void SetEvictionPriority(uint evictionPriority)
		{
			ID3D11Buffer* ptr = (ID3D11Buffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Buffer*, uint, void>)(LpVtbl[1]))(ptr, evictionPriority);
		}

		public readonly unsafe uint GetEvictionPriority()
		{
			ID3D11Buffer* ptr = (ID3D11Buffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Buffer*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		public readonly unsafe void GetDesc(D3D11BufferDesc* pDesc)
		{
			ID3D11Buffer* ptr = (ID3D11Buffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Buffer*, D3D11BufferDesc*, void>)(LpVtbl[3]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc(ref D3D11BufferDesc pDesc)
		{
			ID3D11Buffer* ptr = (ID3D11Buffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11BufferDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Buffer*, D3D11BufferDesc*, void>)(LpVtbl[3]))(ptr, (D3D11BufferDesc*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11Resource (ID3D11Buffer value)
		{
			return Unsafe.As<ID3D11Buffer, ID3D11Resource>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11Buffer value)
		{
			return Unsafe.As<ID3D11Buffer, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11Buffer value)
		{
			return Unsafe.As<ID3D11Buffer, IUnknown>(ref value);
		}

	}

	[Guid("dc8e63f3-d12b-4952-b47b-5e45026a862d")]
	[NativeName("ID3D11Resource")]
	public partial struct ID3D11Resource : IComObject, IComObject<ID3D11Resource>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("dc8e63f3-d12b-4952-b47b-5e45026a862d");

		public unsafe ID3D11Resource (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11Resource value)
		{
			return Unsafe.As<ID3D11Resource, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11Resource value)
		{
			return Unsafe.As<ID3D11Resource, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0006 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D11_TEXTURE1D_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Texture1DDesc
	{
		[NativeName("Width")]
		public uint Width;
		[NativeName("MipLevels")]
		public uint MipLevels;
		[NativeName("ArraySize")]
		public uint ArraySize;
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("Usage")]
		public D3D11Usage Usage;
		[NativeName("BindFlags")]
		public uint BindFlags;
		[NativeName("CPUAccessFlags")]
		public uint CPUAccessFlags;
		[NativeName("MiscFlags")]
		public uint MiscFlags;


	}

	[Guid("f8fb5c27-c6b3-4f75-a4c8-439af2ef564c")]
	[NativeName("ID3D11Texture1D")]
	public partial struct ID3D11Texture1D : IComObject, IComObject<ID3D11Texture1D>, IComObject<ID3D11Resource>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("f8fb5c27-c6b3-4f75-a4c8-439af2ef564c");

		public unsafe ID3D11Texture1D (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc(D3D11Texture1DDesc* pDesc)
		{
			ID3D11Texture1D* ptr = (ID3D11Texture1D*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Texture1D*, D3D11Texture1DDesc*, void>)(LpVtbl[3]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc(ref D3D11Texture1DDesc pDesc)
		{
			ID3D11Texture1D* ptr = (ID3D11Texture1D*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture1DDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Texture1D*, D3D11Texture1DDesc*, void>)(LpVtbl[3]))(ptr, (D3D11Texture1DDesc*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11Resource (ID3D11Texture1D value)
		{
			return Unsafe.As<ID3D11Texture1D, ID3D11Resource>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11Texture1D value)
		{
			return Unsafe.As<ID3D11Texture1D, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11Texture1D value)
		{
			return Unsafe.As<ID3D11Texture1D, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0007 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D11_TEXTURE2D_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Texture2DDesc
	{
		[NativeName("Width")]
		public uint Width;
		[NativeName("Height")]
		public uint Height;
		[NativeName("MipLevels")]
		public uint MipLevels;
		[NativeName("ArraySize")]
		public uint ArraySize;
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("SampleDesc")]
		public DxgiSampleDesc SampleDesc;
		[NativeName("Usage")]
		public D3D11Usage Usage;
		[NativeName("BindFlags")]
		public uint BindFlags;
		[NativeName("CPUAccessFlags")]
		public uint CPUAccessFlags;
		[NativeName("MiscFlags")]
		public uint MiscFlags;


	}

	[Guid("6f15aaf2-d208-4e89-9ab4-489535d34f9c")]
	[NativeName("ID3D11Texture2D")]
	public partial struct ID3D11Texture2D : IComObject, IComObject<ID3D11Texture2D>, IComObject<ID3D11Resource>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("6f15aaf2-d208-4e89-9ab4-489535d34f9c");

		public unsafe ID3D11Texture2D (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc(D3D11Texture2DDesc* pDesc)
		{
			ID3D11Texture2D* ptr = (ID3D11Texture2D*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Texture2D*, D3D11Texture2DDesc*, void>)(LpVtbl[3]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc(ref D3D11Texture2DDesc pDesc)
		{
			ID3D11Texture2D* ptr = (ID3D11Texture2D*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture2DDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Texture2D*, D3D11Texture2DDesc*, void>)(LpVtbl[3]))(ptr, (D3D11Texture2DDesc*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11Resource (ID3D11Texture2D value)
		{
			return Unsafe.As<ID3D11Texture2D, ID3D11Resource>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11Texture2D value)
		{
			return Unsafe.As<ID3D11Texture2D, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11Texture2D value)
		{
			return Unsafe.As<ID3D11Texture2D, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0008 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D11_TEXTURE3D_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Texture3DDesc
	{
		[NativeName("Width")]
		public uint Width;
		[NativeName("Height")]
		public uint Height;
		[NativeName("Depth")]
		public uint Depth;
		[NativeName("MipLevels")]
		public uint MipLevels;
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("Usage")]
		public D3D11Usage Usage;
		[NativeName("BindFlags")]
		public uint BindFlags;
		[NativeName("CPUAccessFlags")]
		public uint CPUAccessFlags;
		[NativeName("MiscFlags")]
		public uint MiscFlags;


	}

	[Guid("037e866e-f56d-4357-a8af-9dabbe6e250e")]
	[NativeName("ID3D11Texture3D")]
	public partial struct ID3D11Texture3D : IComObject, IComObject<ID3D11Texture3D>, IComObject<ID3D11Resource>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("037e866e-f56d-4357-a8af-9dabbe6e250e");

		public unsafe ID3D11Texture3D (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc(D3D11Texture3DDesc* pDesc)
		{
			ID3D11Texture3D* ptr = (ID3D11Texture3D*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Texture3D*, D3D11Texture3DDesc*, void>)(LpVtbl[3]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc(ref D3D11Texture3DDesc pDesc)
		{
			ID3D11Texture3D* ptr = (ID3D11Texture3D*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture3DDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Texture3D*, D3D11Texture3DDesc*, void>)(LpVtbl[3]))(ptr, (D3D11Texture3DDesc*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11Resource (ID3D11Texture3D value)
		{
			return Unsafe.As<ID3D11Texture3D, ID3D11Resource>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11Texture3D value)
		{
			return Unsafe.As<ID3D11Texture3D, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11Texture3D value)
		{
			return Unsafe.As<ID3D11Texture3D, IUnknown>(ref value);
		}

	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D11ShaderResourceViewDescUnion
	{
		[NativeName("Buffer")]
		[FieldOffset(0)]
		public D3D11BufferSrv Buffer;
		[NativeName("Texture1D")]
		[FieldOffset(0)]
		public D3D11Tex1DSrv Texture1D;
		[NativeName("Texture1DArray")]
		[FieldOffset(0)]
		public D3D11Tex1DArraySrv Texture1DArray;
		[NativeName("Texture2D")]
		[FieldOffset(0)]
		public D3D11Tex2DSrv Texture2D;
		[NativeName("Texture2DArray")]
		[FieldOffset(0)]
		public D3D11Tex2DArraySrv Texture2DArray;
		[NativeName("Texture2DMS")]
		[FieldOffset(0)]
		public D3D11Tex2DmsSrv Texture2DMS;
		[NativeName("Texture2DMSArray")]
		[FieldOffset(0)]
		public D3D11Tex2DmsArraySrv Texture2DMSArray;
		[NativeName("Texture3D")]
		[FieldOffset(0)]
		public D3D11Tex3DSrv Texture3D;
		[NativeName("TextureCube")]
		[FieldOffset(0)]
		public D3D11TexcubeSrv TextureCube;
		[NativeName("TextureCubeArray")]
		[FieldOffset(0)]
		public D3D11TexcubeArraySrv TextureCubeArray;
		[NativeName("BufferEx")]
		[FieldOffset(0)]
		public D3D11BufferexSrv BufferEx;


	}

	[NativeName("D3D11_SHADER_RESOURCE_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11ShaderResourceViewDesc
	{
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("ViewDimension")]
		public D3D11SrvDimension ViewDimension;
		[NativeName("")]
		public D3D11ShaderResourceViewDescUnion D3D11ShaderResourceViewDescUnion;


	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D11BufferSrvUnion0
	{
		[NativeName("FirstElement")]
		[FieldOffset(0)]
		public uint FirstElement;
		[NativeName("ElementOffset")]
		[FieldOffset(0)]
		public uint ElementOffset;


	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D11BufferSrvUnion1
	{
		[NativeName("NumElements")]
		[FieldOffset(0)]
		public uint NumElements;
		[NativeName("ElementWidth")]
		[FieldOffset(0)]
		public uint ElementWidth;


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0010 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D11_BUFFER_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11BufferSrv
	{
		[NativeName("")]
		public D3D11BufferSrvUnion0 D3D11BufferSrvUnion0;
		[NativeName("")]
		public D3D11BufferSrvUnion1 D3D11BufferSrvUnion1;


	}

	[NativeName("D3D11_TEX1D_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex1DSrv
	{
		[NativeName("MostDetailedMip")]
		public uint MostDetailedMip;
		[NativeName("MipLevels")]
		public uint MipLevels;


	}

	[NativeName("D3D11_TEX1D_ARRAY_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex1DArraySrv
	{
		[NativeName("MostDetailedMip")]
		public uint MostDetailedMip;
		[NativeName("MipLevels")]
		public uint MipLevels;
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;


	}

	[NativeName("D3D11_TEX2D_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DSrv
	{
		[NativeName("MostDetailedMip")]
		public uint MostDetailedMip;
		[NativeName("MipLevels")]
		public uint MipLevels;


	}

	[NativeName("D3D11_TEX2D_ARRAY_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DArraySrv
	{
		[NativeName("MostDetailedMip")]
		public uint MostDetailedMip;
		[NativeName("MipLevels")]
		public uint MipLevels;
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;


	}

	[NativeName("D3D11_TEX2DMS_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DmsSrv
	{
		[NativeName("UnusedField_NothingToDefine")]
		public uint UnusedFieldNothingToDefine;


	}

	[NativeName("D3D11_TEX2DMS_ARRAY_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DmsArraySrv
	{
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;


	}

	[NativeName("D3D11_TEX3D_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex3DSrv
	{
		[NativeName("MostDetailedMip")]
		public uint MostDetailedMip;
		[NativeName("MipLevels")]
		public uint MipLevels;


	}

	[NativeName("D3D11_TEXCUBE_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11TexcubeSrv
	{
		[NativeName("MostDetailedMip")]
		public uint MostDetailedMip;
		[NativeName("MipLevels")]
		public uint MipLevels;


	}

	[NativeName("D3D11_TEXCUBE_ARRAY_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11TexcubeArraySrv
	{
		[NativeName("MostDetailedMip")]
		public uint MostDetailedMip;
		[NativeName("MipLevels")]
		public uint MipLevels;
		[NativeName("First2DArrayFace")]
		public uint First2DArrayFace;
		[NativeName("NumCubes")]
		public uint NumCubes;


	}

	[NativeName("D3D11_BUFFEREX_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11BufferexSrv
	{
		[NativeName("FirstElement")]
		public uint FirstElement;
		[NativeName("NumElements")]
		public uint NumElements;
		[NativeName("Flags")]
		public uint Flags;


	}

	[Guid("b0e06fe0-8192-4e1a-b1ca-36d7414710b2")]
	[NativeName("ID3D11ShaderResourceView")]
	public partial struct ID3D11ShaderResourceView : IComObject, IComObject<ID3D11ShaderResourceView>, IComObject<ID3D11View>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("b0e06fe0-8192-4e1a-b1ca-36d7414710b2");

		public unsafe ID3D11ShaderResourceView (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetResource(ID3D11Resource** ppResource)
		{
			ID3D11ShaderResourceView* ptr = (ID3D11ShaderResourceView*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11ShaderResourceView*, ID3D11Resource**, void>)(*LpVtbl))(ptr, ppResource);
		}

		public readonly unsafe void GetResource(ref ID3D11Resource* ppResource)
		{
			ID3D11ShaderResourceView* ptr = (ID3D11ShaderResourceView*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource** pppResource = &ppResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11ShaderResourceView*, ID3D11Resource**, void>)(*LpVtbl))(ptr, (ID3D11Resource**)pppResource);
			}
		}

		public readonly unsafe void GetDesc(D3D11ShaderResourceViewDesc* pDesc)
		{
			ID3D11ShaderResourceView* ptr = (ID3D11ShaderResourceView*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11ShaderResourceView*, D3D11ShaderResourceViewDesc*, void>)(LpVtbl[1]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc(ref D3D11ShaderResourceViewDesc pDesc)
		{
			ID3D11ShaderResourceView* ptr = (ID3D11ShaderResourceView*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ShaderResourceViewDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11ShaderResourceView*, D3D11ShaderResourceViewDesc*, void>)(LpVtbl[1]))(ptr, (D3D11ShaderResourceViewDesc*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11View (ID3D11ShaderResourceView value)
		{
			return Unsafe.As<ID3D11ShaderResourceView, ID3D11View>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11ShaderResourceView value)
		{
			return Unsafe.As<ID3D11ShaderResourceView, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11ShaderResourceView value)
		{
			return Unsafe.As<ID3D11ShaderResourceView, IUnknown>(ref value);
		}

	}

	[Guid("839d1216-bb2e-412b-b7f4-a9dbebe08ed1")]
	[NativeName("ID3D11View")]
	public partial struct ID3D11View : IComObject, IComObject<ID3D11View>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("839d1216-bb2e-412b-b7f4-a9dbebe08ed1");

		public unsafe ID3D11View (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11View value)
		{
			return Unsafe.As<ID3D11View, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11View value)
		{
			return Unsafe.As<ID3D11View, IUnknown>(ref value);
		}

	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D11UnorderedAccessViewDescUnion
	{
		[NativeName("Buffer")]
		[FieldOffset(0)]
		public D3D11BufferUav Buffer;
		[NativeName("Texture1D")]
		[FieldOffset(0)]
		public D3D11Tex1DUav Texture1D;
		[NativeName("Texture1DArray")]
		[FieldOffset(0)]
		public D3D11Tex1DArrayUav Texture1DArray;
		[NativeName("Texture2D")]
		[FieldOffset(0)]
		public D3D11Tex2DUav Texture2D;
		[NativeName("Texture2DArray")]
		[FieldOffset(0)]
		public D3D11Tex2DArrayUav Texture2DArray;
		[NativeName("Texture3D")]
		[FieldOffset(0)]
		public D3D11Tex3DUav Texture3D;


	}

	[NativeName("D3D11_UNORDERED_ACCESS_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11UnorderedAccessViewDesc
	{
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("ViewDimension")]
		public D3D11UavDimension ViewDimension;
		[NativeName("")]
		public D3D11UnorderedAccessViewDescUnion D3D11UnorderedAccessViewDescUnion;


	}

	[NativeName("D3D11_BUFFER_UAV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11BufferUav
	{
		[NativeName("FirstElement")]
		public uint FirstElement;
		[NativeName("NumElements")]
		public uint NumElements;
		[NativeName("Flags")]
		public uint Flags;


	}

	[NativeName("D3D11_TEX1D_UAV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex1DUav
	{
		[NativeName("MipSlice")]
		public uint MipSlice;


	}

	[NativeName("D3D11_TEX1D_ARRAY_UAV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex1DArrayUav
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;


	}

	[NativeName("D3D11_TEX2D_UAV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DUav
	{
		[NativeName("MipSlice")]
		public uint MipSlice;


	}

	[NativeName("D3D11_TEX2D_ARRAY_UAV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DArrayUav
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;


	}

	[NativeName("D3D11_TEX3D_UAV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex3DUav
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("FirstWSlice")]
		public uint FirstWSlice;
		[NativeName("WSize")]
		public uint WSize;


	}

	[Guid("28acf509-7f5c-48f6-8611-f316010a6380")]
	[NativeName("ID3D11UnorderedAccessView")]
	public partial struct ID3D11UnorderedAccessView : IComObject, IComObject<ID3D11UnorderedAccessView>, IComObject<ID3D11View>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("28acf509-7f5c-48f6-8611-f316010a6380");

		public unsafe ID3D11UnorderedAccessView (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc(D3D11UnorderedAccessViewDesc* pDesc)
		{
			ID3D11UnorderedAccessView* ptr = (ID3D11UnorderedAccessView*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11UnorderedAccessView*, D3D11UnorderedAccessViewDesc*, void>)(LpVtbl[1]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc(ref D3D11UnorderedAccessViewDesc pDesc)
		{
			ID3D11UnorderedAccessView* ptr = (ID3D11UnorderedAccessView*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11UnorderedAccessViewDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11UnorderedAccessView*, D3D11UnorderedAccessViewDesc*, void>)(LpVtbl[1]))(ptr, (D3D11UnorderedAccessViewDesc*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11View (ID3D11UnorderedAccessView value)
		{
			return Unsafe.As<ID3D11UnorderedAccessView, ID3D11View>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11UnorderedAccessView value)
		{
			return Unsafe.As<ID3D11UnorderedAccessView, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11UnorderedAccessView value)
		{
			return Unsafe.As<ID3D11UnorderedAccessView, IUnknown>(ref value);
		}

	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D11RenderTargetViewDescUnion
	{
		[NativeName("Buffer")]
		[FieldOffset(0)]
		public D3D11BufferRtv Buffer;
		[NativeName("Texture1D")]
		[FieldOffset(0)]
		public D3D11Tex1DRtv Texture1D;
		[NativeName("Texture1DArray")]
		[FieldOffset(0)]
		public D3D11Tex1DArrayRtv Texture1DArray;
		[NativeName("Texture2D")]
		[FieldOffset(0)]
		public D3D11Tex2DRtv Texture2D;
		[NativeName("Texture2DArray")]
		[FieldOffset(0)]
		public D3D11Tex2DArrayRtv Texture2DArray;
		[NativeName("Texture2DMS")]
		[FieldOffset(0)]
		public D3D11Tex2DmsRtv Texture2DMS;
		[NativeName("Texture2DMSArray")]
		[FieldOffset(0)]
		public D3D11Tex2DmsArrayRtv Texture2DMSArray;
		[NativeName("Texture3D")]
		[FieldOffset(0)]
		public D3D11Tex3DRtv Texture3D;


	}

	[NativeName("D3D11_RENDER_TARGET_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11RenderTargetViewDesc
	{
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("ViewDimension")]
		public D3D11RtvDimension ViewDimension;
		[NativeName("")]
		public D3D11RenderTargetViewDescUnion D3D11RenderTargetViewDescUnion;


	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D11BufferRtvUnion0
	{
		[NativeName("FirstElement")]
		[FieldOffset(0)]
		public uint FirstElement;
		[NativeName("ElementOffset")]
		[FieldOffset(0)]
		public uint ElementOffset;


	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D11BufferRtvUnion1
	{
		[NativeName("NumElements")]
		[FieldOffset(0)]
		public uint NumElements;
		[NativeName("ElementWidth")]
		[FieldOffset(0)]
		public uint ElementWidth;


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0011 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D11_BUFFER_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11BufferRtv
	{
		[NativeName("")]
		public D3D11BufferRtvUnion0 D3D11BufferRtvUnion0;
		[NativeName("")]
		public D3D11BufferRtvUnion1 D3D11BufferRtvUnion1;


	}

	[NativeName("D3D11_TEX1D_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex1DRtv
	{
		[NativeName("MipSlice")]
		public uint MipSlice;


	}

	[NativeName("D3D11_TEX1D_ARRAY_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex1DArrayRtv
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;


	}

	[NativeName("D3D11_TEX2D_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DRtv
	{
		[NativeName("MipSlice")]
		public uint MipSlice;


	}

	[NativeName("D3D11_TEX2D_ARRAY_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DArrayRtv
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;


	}

	[NativeName("D3D11_TEX2DMS_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DmsRtv
	{
		[NativeName("UnusedField_NothingToDefine")]
		public uint UnusedFieldNothingToDefine;


	}

	[NativeName("D3D11_TEX2DMS_ARRAY_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DmsArrayRtv
	{
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;


	}

	[NativeName("D3D11_TEX3D_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex3DRtv
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("FirstWSlice")]
		public uint FirstWSlice;
		[NativeName("WSize")]
		public uint WSize;


	}

	[Guid("dfdba067-0b8d-4865-875b-d7b4516cc164")]
	[NativeName("ID3D11RenderTargetView")]
	public partial struct ID3D11RenderTargetView : IComObject, IComObject<ID3D11RenderTargetView>, IComObject<ID3D11View>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("dfdba067-0b8d-4865-875b-d7b4516cc164");

		public unsafe ID3D11RenderTargetView (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc(D3D11RenderTargetViewDesc* pDesc)
		{
			ID3D11RenderTargetView* ptr = (ID3D11RenderTargetView*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11RenderTargetView*, D3D11RenderTargetViewDesc*, void>)(LpVtbl[1]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc(ref D3D11RenderTargetViewDesc pDesc)
		{
			ID3D11RenderTargetView* ptr = (ID3D11RenderTargetView*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11RenderTargetViewDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11RenderTargetView*, D3D11RenderTargetViewDesc*, void>)(LpVtbl[1]))(ptr, (D3D11RenderTargetViewDesc*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11View (ID3D11RenderTargetView value)
		{
			return Unsafe.As<ID3D11RenderTargetView, ID3D11View>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11RenderTargetView value)
		{
			return Unsafe.As<ID3D11RenderTargetView, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11RenderTargetView value)
		{
			return Unsafe.As<ID3D11RenderTargetView, IUnknown>(ref value);
		}

	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D11DepthStencilViewDescUnion
	{
		[NativeName("Texture1D")]
		[FieldOffset(0)]
		public D3D11Tex1DDsv Texture1D;
		[NativeName("Texture1DArray")]
		[FieldOffset(0)]
		public D3D11Tex1DArrayDsv Texture1DArray;
		[NativeName("Texture2D")]
		[FieldOffset(0)]
		public D3D11Tex2DDsv Texture2D;
		[NativeName("Texture2DArray")]
		[FieldOffset(0)]
		public D3D11Tex2DArrayDsv Texture2DArray;
		[NativeName("Texture2DMS")]
		[FieldOffset(0)]
		public D3D11Tex2DmsDsv Texture2DMS;
		[NativeName("Texture2DMSArray")]
		[FieldOffset(0)]
		public D3D11Tex2DmsArrayDsv Texture2DMSArray;


	}

	[NativeName("D3D11_DEPTH_STENCIL_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11DepthStencilViewDesc
	{
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("ViewDimension")]
		public D3D11DsvDimension ViewDimension;
		[NativeName("Flags")]
		public uint Flags;
		[NativeName("")]
		public D3D11DepthStencilViewDescUnion D3D11DepthStencilViewDescUnion;


	}

	[NativeName("D3D11_TEX1D_DSV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex1DDsv
	{
		[NativeName("MipSlice")]
		public uint MipSlice;


	}

	[NativeName("D3D11_TEX1D_ARRAY_DSV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex1DArrayDsv
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;


	}

	[NativeName("D3D11_TEX2D_DSV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DDsv
	{
		[NativeName("MipSlice")]
		public uint MipSlice;


	}

	[NativeName("D3D11_TEX2D_ARRAY_DSV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DArrayDsv
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;


	}

	[NativeName("D3D11_TEX2DMS_DSV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DmsDsv
	{
		[NativeName("UnusedField_NothingToDefine")]
		public uint UnusedFieldNothingToDefine;


	}

	[NativeName("D3D11_TEX2DMS_ARRAY_DSV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DmsArrayDsv
	{
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;


	}

	[Guid("9fdac92a-1876-48c3-afad-25b94f84a9b6")]
	[NativeName("ID3D11DepthStencilView")]
	public partial struct ID3D11DepthStencilView : IComObject, IComObject<ID3D11DepthStencilView>, IComObject<ID3D11View>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("9fdac92a-1876-48c3-afad-25b94f84a9b6");

		public unsafe ID3D11DepthStencilView (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc(D3D11DepthStencilViewDesc* pDesc)
		{
			ID3D11DepthStencilView* ptr = (ID3D11DepthStencilView*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DepthStencilView*, D3D11DepthStencilViewDesc*, void>)(LpVtbl[1]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc(ref D3D11DepthStencilViewDesc pDesc)
		{
			ID3D11DepthStencilView* ptr = (ID3D11DepthStencilView*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11DepthStencilViewDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DepthStencilView*, D3D11DepthStencilViewDesc*, void>)(LpVtbl[1]))(ptr, (D3D11DepthStencilViewDesc*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11View (ID3D11DepthStencilView value)
		{
			return Unsafe.As<ID3D11DepthStencilView, ID3D11View>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11DepthStencilView value)
		{
			return Unsafe.As<ID3D11DepthStencilView, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11DepthStencilView value)
		{
			return Unsafe.As<ID3D11DepthStencilView, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_INPUT_ELEMENT_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11InputElementDesc
	{
		[NativeName("SemanticName")]
		public unsafe byte* SemanticName;
		[NativeName("SemanticIndex")]
		public uint SemanticIndex;
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("InputSlot")]
		public uint InputSlot;
		[NativeName("AlignedByteOffset")]
		public uint AlignedByteOffset;
		[NativeName("InputSlotClass")]
		public D3D11InputClassification InputSlotClass;
		[NativeName("InstanceDataStepRate")]
		public uint InstanceDataStepRate;


	}

	[Guid("e4819ddc-4cf0-4025-bd26-5de82a3e07b7")]
	[NativeName("ID3D11InputLayout")]
	public partial struct ID3D11InputLayout : IComObject, IComObject<ID3D11InputLayout>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("e4819ddc-4cf0-4025-bd26-5de82a3e07b7");

		public unsafe ID3D11InputLayout (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11InputLayout value)
		{
			return Unsafe.As<ID3D11InputLayout, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11InputLayout value)
		{
			return Unsafe.As<ID3D11InputLayout, IUnknown>(ref value);
		}

	}

	[Guid("ddf57cba-9543-46e4-a12b-f207a0fe7fed")]
	[NativeName("ID3D11ClassLinkage")]
	public partial struct ID3D11ClassLinkage : IComObject, IComObject<ID3D11ClassLinkage>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("ddf57cba-9543-46e4-a12b-f207a0fe7fed");

		public unsafe ID3D11ClassLinkage (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetClassInstance(byte* pClassInstanceName, uint instanceIndex, ID3D11ClassInstance** ppInstance)
		{
			ID3D11ClassLinkage* ptr = (ID3D11ClassLinkage*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ClassLinkage*, byte*, uint, ID3D11ClassInstance**, HResult>)(LpVtbl[4]))(ptr, pClassInstanceName, instanceIndex, ppInstance);
			return ret;
		}

		public readonly unsafe HResult GetClassInstance(byte* pClassInstanceName, uint instanceIndex, ref ID3D11ClassInstance* ppInstance)
		{
			ID3D11ClassLinkage* ptr = (ID3D11ClassLinkage*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassInstance** pppInstance = &ppInstance)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ClassLinkage*, byte*, uint, ID3D11ClassInstance**, HResult>)(LpVtbl[4]))(ptr, pClassInstanceName, instanceIndex, (ID3D11ClassInstance**)pppInstance);
				return ret;
			}
		}

		public readonly unsafe HResult CreateClassInstance(byte* pClassTypeName, uint constantBufferOffset, uint constantVectorOffset, uint textureOffset, uint samplerOffset, ID3D11ClassInstance** ppInstance)
		{
			ID3D11ClassLinkage* ptr = (ID3D11ClassLinkage*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ClassLinkage*, byte*, uint, uint, uint, uint, ID3D11ClassInstance**, HResult>)(LpVtbl[5]))(ptr, pClassTypeName, constantBufferOffset, constantVectorOffset, textureOffset, samplerOffset, ppInstance);
			return ret;
		}

		public readonly unsafe HResult CreateClassInstance(byte* pClassTypeName, uint constantBufferOffset, uint constantVectorOffset, uint textureOffset, uint samplerOffset, ref ID3D11ClassInstance* ppInstance)
		{
			ID3D11ClassLinkage* ptr = (ID3D11ClassLinkage*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassInstance** pppInstance = &ppInstance)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ClassLinkage*, byte*, uint, uint, uint, uint, ID3D11ClassInstance**, HResult>)(LpVtbl[5]))(ptr, pClassTypeName, constantBufferOffset, constantVectorOffset, textureOffset, samplerOffset, (ID3D11ClassInstance**)pppInstance);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11ClassLinkage value)
		{
			return Unsafe.As<ID3D11ClassLinkage, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11ClassLinkage value)
		{
			return Unsafe.As<ID3D11ClassLinkage, IUnknown>(ref value);
		}

	}

	[Guid("a6cd7faa-b0b7-4a2f-9436-8662a65797cb")]
	[NativeName("ID3D11ClassInstance")]
	public partial struct ID3D11ClassInstance : IComObject, IComObject<ID3D11ClassInstance>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("a6cd7faa-b0b7-4a2f-9436-8662a65797cb");

		public unsafe ID3D11ClassInstance (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetClassLinkage(ID3D11ClassLinkage** ppLinkage)
		{
			ID3D11ClassInstance* ptr = (ID3D11ClassInstance*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11ClassInstance*, ID3D11ClassLinkage**, void>)(LpVtbl[4]))(ptr, ppLinkage);
		}

		public readonly unsafe void GetClassLinkage(ref ID3D11ClassLinkage* ppLinkage)
		{
			ID3D11ClassInstance* ptr = (ID3D11ClassInstance*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassLinkage** pppLinkage = &ppLinkage)
			{
				((delegate* unmanaged[Stdcall]<ID3D11ClassInstance*, ID3D11ClassLinkage**, void>)(LpVtbl[4]))(ptr, (ID3D11ClassLinkage**)pppLinkage);
			}
		}

		public readonly unsafe void GetDesc(D3D11ClassInstanceDesc* pDesc)
		{
			ID3D11ClassInstance* ptr = (ID3D11ClassInstance*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11ClassInstance*, D3D11ClassInstanceDesc*, void>)(LpVtbl[5]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc(ref D3D11ClassInstanceDesc pDesc)
		{
			ID3D11ClassInstance* ptr = (ID3D11ClassInstance*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ClassInstanceDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11ClassInstance*, D3D11ClassInstanceDesc*, void>)(LpVtbl[5]))(ptr, (D3D11ClassInstanceDesc*)ppDesc);
			}
		}

		public readonly unsafe void GetInstanceName(byte* pInstanceName, nuint* pBufferLength)
		{
			ID3D11ClassInstance* ptr = (ID3D11ClassInstance*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11ClassInstance*, byte*, nuint*, void>)(LpVtbl[6]))(ptr, pInstanceName, pBufferLength);
		}

		public readonly unsafe void GetInstanceName(byte* pInstanceName, ref nuint pBufferLength)
		{
			ID3D11ClassInstance* ptr = (ID3D11ClassInstance*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nuint* ppBufferLength = &pBufferLength)
			{
				((delegate* unmanaged[Stdcall]<ID3D11ClassInstance*, byte*, nuint*, void>)(LpVtbl[6]))(ptr, pInstanceName, (nuint*)ppBufferLength);
			}
		}

		public readonly unsafe void GetTypeName(byte* pTypeName, nuint* pBufferLength)
		{
			ID3D11ClassInstance* ptr = (ID3D11ClassInstance*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11ClassInstance*, byte*, nuint*, void>)(LpVtbl[7]))(ptr, pTypeName, pBufferLength);
		}

		public readonly unsafe void GetTypeName(byte* pTypeName, ref nuint pBufferLength)
		{
			ID3D11ClassInstance* ptr = (ID3D11ClassInstance*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nuint* ppBufferLength = &pBufferLength)
			{
				((delegate* unmanaged[Stdcall]<ID3D11ClassInstance*, byte*, nuint*, void>)(LpVtbl[7]))(ptr, pTypeName, (nuint*)ppBufferLength);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11ClassInstance value)
		{
			return Unsafe.As<ID3D11ClassInstance, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11ClassInstance value)
		{
			return Unsafe.As<ID3D11ClassInstance, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_CLASS_INSTANCE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11ClassInstanceDesc
	{
		[NativeName("InstanceId")]
		public uint InstanceId;
		[NativeName("InstanceIndex")]
		public uint InstanceIndex;
		[NativeName("TypeId")]
		public uint TypeId;
		[NativeName("ConstantBuffer")]
		public uint ConstantBuffer;
		[NativeName("BaseConstantBufferOffset")]
		public uint BaseConstantBufferOffset;
		[NativeName("BaseTexture")]
		public uint BaseTexture;
		[NativeName("BaseSampler")]
		public uint BaseSampler;
		[NativeName("Created")]
		public int Created;


	}

	[Guid("3b301d64-d678-4289-8897-22f8928b72f3")]
	[NativeName("ID3D11VertexShader")]
	public partial struct ID3D11VertexShader : IComObject, IComObject<ID3D11VertexShader>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("3b301d64-d678-4289-8897-22f8928b72f3");

		public unsafe ID3D11VertexShader (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11VertexShader value)
		{
			return Unsafe.As<ID3D11VertexShader, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11VertexShader value)
		{
			return Unsafe.As<ID3D11VertexShader, IUnknown>(ref value);
		}

	}

	[Guid("38325b96-effb-4022-ba02-2e795b70275c")]
	[NativeName("ID3D11GeometryShader")]
	public partial struct ID3D11GeometryShader : IComObject, IComObject<ID3D11GeometryShader>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("38325b96-effb-4022-ba02-2e795b70275c");

		public unsafe ID3D11GeometryShader (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11GeometryShader value)
		{
			return Unsafe.As<ID3D11GeometryShader, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11GeometryShader value)
		{
			return Unsafe.As<ID3D11GeometryShader, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_SO_DECLARATION_ENTRY")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11SoDeclarationEntry
	{
		[NativeName("Stream")]
		public uint Stream;
		[NativeName("SemanticName")]
		public unsafe byte* SemanticName;
		[NativeName("SemanticIndex")]
		public uint SemanticIndex;
		[NativeName("StartComponent")]
		public byte StartComponent;
		[NativeName("ComponentCount")]
		public byte ComponentCount;
		[NativeName("OutputSlot")]
		public byte OutputSlot;


	}

	[Guid("ea82e40d-51dc-4f33-93d4-db7c9125ae8c")]
	[NativeName("ID3D11PixelShader")]
	public partial struct ID3D11PixelShader : IComObject, IComObject<ID3D11PixelShader>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("ea82e40d-51dc-4f33-93d4-db7c9125ae8c");

		public unsafe ID3D11PixelShader (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11PixelShader value)
		{
			return Unsafe.As<ID3D11PixelShader, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11PixelShader value)
		{
			return Unsafe.As<ID3D11PixelShader, IUnknown>(ref value);
		}

	}

	[Guid("8e5c6061-628a-4c8e-8264-bbe45cb3d5dd")]
	[NativeName("ID3D11HullShader")]
	public partial struct ID3D11HullShader : IComObject, IComObject<ID3D11HullShader>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("8e5c6061-628a-4c8e-8264-bbe45cb3d5dd");

		public unsafe ID3D11HullShader (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11HullShader value)
		{
			return Unsafe.As<ID3D11HullShader, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11HullShader value)
		{
			return Unsafe.As<ID3D11HullShader, IUnknown>(ref value);
		}

	}

	[Guid("f582c508-0f36-490c-9977-31eece268cfa")]
	[NativeName("ID3D11DomainShader")]
	public partial struct ID3D11DomainShader : IComObject, IComObject<ID3D11DomainShader>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("f582c508-0f36-490c-9977-31eece268cfa");

		public unsafe ID3D11DomainShader (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11DomainShader value)
		{
			return Unsafe.As<ID3D11DomainShader, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11DomainShader value)
		{
			return Unsafe.As<ID3D11DomainShader, IUnknown>(ref value);
		}

	}

	[Guid("4f5b196e-c2bd-495e-bd01-1fded38e4969")]
	[NativeName("ID3D11ComputeShader")]
	public partial struct ID3D11ComputeShader : IComObject, IComObject<ID3D11ComputeShader>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("4f5b196e-c2bd-495e-bd01-1fded38e4969");

		public unsafe ID3D11ComputeShader (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11ComputeShader value)
		{
			return Unsafe.As<ID3D11ComputeShader, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11ComputeShader value)
		{
			return Unsafe.As<ID3D11ComputeShader, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_BLEND_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11BlendDesc
	{
		[NativeName("AlphaToCoverageEnable")]
		public int AlphaToCoverageEnable;
		[NativeName("IndependentBlendEnable")]
		public int IndependentBlendEnable;
		[NativeName("RenderTarget")]
		public D3D11RenderTargetBlendDesc RenderTarget_0;
		public D3D11RenderTargetBlendDesc RenderTarget_1;
		public D3D11RenderTargetBlendDesc RenderTarget_2;
		public D3D11RenderTargetBlendDesc RenderTarget_3;
		public D3D11RenderTargetBlendDesc RenderTarget_4;
		public D3D11RenderTargetBlendDesc RenderTarget_5;
		public D3D11RenderTargetBlendDesc RenderTarget_6;
		public D3D11RenderTargetBlendDesc RenderTarget_7;


		public unsafe Span<D3D11RenderTargetBlendDesc> RenderTarget
		
		{
			get
			{
				fixed (D3D11RenderTargetBlendDesc* p = &this.RenderTarget_0)
				{
					return new Span<D3D11RenderTargetBlendDesc>(p, 8);
				}
			}
		}
	}

	[NativeName("D3D11_RENDER_TARGET_BLEND_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11RenderTargetBlendDesc
	{
		[NativeName("BlendEnable")]
		public int BlendEnable;
		[NativeName("SrcBlend")]
		public D3D11Blend SrcBlend;
		[NativeName("DestBlend")]
		public D3D11Blend DestBlend;
		[NativeName("BlendOp")]
		public D3D11BlendOp BlendOp;
		[NativeName("SrcBlendAlpha")]
		public D3D11Blend SrcBlendAlpha;
		[NativeName("DestBlendAlpha")]
		public D3D11Blend DestBlendAlpha;
		[NativeName("BlendOpAlpha")]
		public D3D11BlendOp BlendOpAlpha;
		[NativeName("RenderTargetWriteMask")]
		public byte RenderTargetWriteMask;


	}

	[Guid("75b68faa-347d-4159-8f45-a0640f01cd9a")]
	[NativeName("ID3D11BlendState")]
	public partial struct ID3D11BlendState : IComObject, IComObject<ID3D11BlendState>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("75b68faa-347d-4159-8f45-a0640f01cd9a");

		public unsafe ID3D11BlendState (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc(D3D11BlendDesc* pDesc)
		{
			ID3D11BlendState* ptr = (ID3D11BlendState*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11BlendState*, D3D11BlendDesc*, void>)(LpVtbl[4]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc(ref D3D11BlendDesc pDesc)
		{
			ID3D11BlendState* ptr = (ID3D11BlendState*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11BlendDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11BlendState*, D3D11BlendDesc*, void>)(LpVtbl[4]))(ptr, (D3D11BlendDesc*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11BlendState value)
		{
			return Unsafe.As<ID3D11BlendState, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11BlendState value)
		{
			return Unsafe.As<ID3D11BlendState, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_DEPTH_STENCIL_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11DepthStencilDesc
	{
		[NativeName("DepthEnable")]
		public int DepthEnable;
		[NativeName("DepthWriteMask")]
		public D3D11DepthWriteMask DepthWriteMask;
		[NativeName("DepthFunc")]
		public D3D11ComparisonFunc DepthFunc;
		[NativeName("StencilEnable")]
		public int StencilEnable;
		[NativeName("StencilReadMask")]
		public byte StencilReadMask;
		[NativeName("StencilWriteMask")]
		public byte StencilWriteMask;
		[NativeName("FrontFace")]
		public D3D11DepthStencilopDesc FrontFace;
		[NativeName("BackFace")]
		public D3D11DepthStencilopDesc BackFace;


	}

	[NativeName("D3D11_DEPTH_STENCILOP_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11DepthStencilopDesc
	{
		[NativeName("StencilFailOp")]
		public D3D11StencilOp StencilFailOp;
		[NativeName("StencilDepthFailOp")]
		public D3D11StencilOp StencilDepthFailOp;
		[NativeName("StencilPassOp")]
		public D3D11StencilOp StencilPassOp;
		[NativeName("StencilFunc")]
		public D3D11ComparisonFunc StencilFunc;


	}

	[Guid("03823efb-8d8f-4e1c-9aa2-f64bb2cbfdf1")]
	[NativeName("ID3D11DepthStencilState")]
	public partial struct ID3D11DepthStencilState : IComObject, IComObject<ID3D11DepthStencilState>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("03823efb-8d8f-4e1c-9aa2-f64bb2cbfdf1");

		public unsafe ID3D11DepthStencilState (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc(D3D11DepthStencilDesc* pDesc)
		{
			ID3D11DepthStencilState* ptr = (ID3D11DepthStencilState*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DepthStencilState*, D3D11DepthStencilDesc*, void>)(LpVtbl[4]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc(ref D3D11DepthStencilDesc pDesc)
		{
			ID3D11DepthStencilState* ptr = (ID3D11DepthStencilState*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11DepthStencilDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DepthStencilState*, D3D11DepthStencilDesc*, void>)(LpVtbl[4]))(ptr, (D3D11DepthStencilDesc*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11DepthStencilState value)
		{
			return Unsafe.As<ID3D11DepthStencilState, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11DepthStencilState value)
		{
			return Unsafe.As<ID3D11DepthStencilState, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0003 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D11_RASTERIZER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11RasterizerDesc
	{
		[NativeName("FillMode")]
		public D3D11FillMode FillMode;
		[NativeName("CullMode")]
		public D3D11CullMode CullMode;
		[NativeName("FrontCounterClockwise")]
		public int FrontCounterClockwise;
		[NativeName("DepthBias")]
		public int DepthBias;
		[NativeName("DepthBiasClamp")]
		public float DepthBiasClamp;
		[NativeName("SlopeScaledDepthBias")]
		public float SlopeScaledDepthBias;
		[NativeName("DepthClipEnable")]
		public int DepthClipEnable;
		[NativeName("ScissorEnable")]
		public int ScissorEnable;
		[NativeName("MultisampleEnable")]
		public int MultisampleEnable;
		[NativeName("AntialiasedLineEnable")]
		public int AntialiasedLineEnable;


	}

	[Guid("9bb4ab81-ab1a-4d8f-b506-fc04200b6ee7")]
	[NativeName("ID3D11RasterizerState")]
	public partial struct ID3D11RasterizerState : IComObject, IComObject<ID3D11RasterizerState>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("9bb4ab81-ab1a-4d8f-b506-fc04200b6ee7");

		public unsafe ID3D11RasterizerState (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc(D3D11RasterizerDesc* pDesc)
		{
			ID3D11RasterizerState* ptr = (ID3D11RasterizerState*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11RasterizerState*, D3D11RasterizerDesc*, void>)(LpVtbl[4]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc(ref D3D11RasterizerDesc pDesc)
		{
			ID3D11RasterizerState* ptr = (ID3D11RasterizerState*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11RasterizerDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11RasterizerState*, D3D11RasterizerDesc*, void>)(LpVtbl[4]))(ptr, (D3D11RasterizerDesc*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11RasterizerState value)
		{
			return Unsafe.As<ID3D11RasterizerState, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11RasterizerState value)
		{
			return Unsafe.As<ID3D11RasterizerState, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_SAMPLER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11SamplerDesc
	{
		[NativeName("Filter")]
		public D3D11Filter Filter;
		[NativeName("AddressU")]
		public D3D11TextureAddressMode AddressU;
		[NativeName("AddressV")]
		public D3D11TextureAddressMode AddressV;
		[NativeName("AddressW")]
		public D3D11TextureAddressMode AddressW;
		[NativeName("MipLODBias")]
		public float MipLODBias;
		[NativeName("MaxAnisotropy")]
		public uint MaxAnisotropy;
		[NativeName("ComparisonFunc")]
		public D3D11ComparisonFunc ComparisonFunc;
		[NativeName("BorderColor")]
		public float BorderColor_0;
		public float BorderColor_1;
		public float BorderColor_2;
		public float BorderColor_3;
		[NativeName("MinLOD")]
		public float MinLOD;
		[NativeName("MaxLOD")]
		public float MaxLOD;


	}

	[Guid("da6fea51-564c-4487-9810-f0d0f9b4e3a5")]
	[NativeName("ID3D11SamplerState")]
	public partial struct ID3D11SamplerState : IComObject, IComObject<ID3D11SamplerState>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("da6fea51-564c-4487-9810-f0d0f9b4e3a5");

		public unsafe ID3D11SamplerState (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc(D3D11SamplerDesc* pDesc)
		{
			ID3D11SamplerState* ptr = (ID3D11SamplerState*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11SamplerState*, D3D11SamplerDesc*, void>)(LpVtbl[4]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc(ref D3D11SamplerDesc pDesc)
		{
			ID3D11SamplerState* ptr = (ID3D11SamplerState*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SamplerDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11SamplerState*, D3D11SamplerDesc*, void>)(LpVtbl[4]))(ptr, (D3D11SamplerDesc*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11SamplerState value)
		{
			return Unsafe.As<ID3D11SamplerState, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11SamplerState value)
		{
			return Unsafe.As<ID3D11SamplerState, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_QUERY_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11QueryDesc
	{
		[NativeName("Query")]
		public D3D11Query Query;
		[NativeName("MiscFlags")]
		public uint MiscFlags;


	}

	[Guid("d6c00747-87b7-425e-b84d-44d108560afd")]
	[NativeName("ID3D11Query")]
	public partial struct ID3D11Query : IComObject, IComObject<ID3D11Query>, IComObject<ID3D11Asynchronous>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("d6c00747-87b7-425e-b84d-44d108560afd");

		public unsafe ID3D11Query (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe uint GetDataSize()
		{
			ID3D11Query* ptr = (ID3D11Query*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Query*, uint>)(*LpVtbl))(ptr);
			return ret;
		}

		public readonly unsafe void GetDesc(D3D11QueryDesc* pDesc)
		{
			ID3D11Query* ptr = (ID3D11Query*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Query*, D3D11QueryDesc*, void>)(LpVtbl[1]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc(ref D3D11QueryDesc pDesc)
		{
			ID3D11Query* ptr = (ID3D11Query*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11QueryDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Query*, D3D11QueryDesc*, void>)(LpVtbl[1]))(ptr, (D3D11QueryDesc*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11Asynchronous (ID3D11Query value)
		{
			return Unsafe.As<ID3D11Query, ID3D11Asynchronous>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11Query value)
		{
			return Unsafe.As<ID3D11Query, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11Query value)
		{
			return Unsafe.As<ID3D11Query, IUnknown>(ref value);
		}

	}

	[Guid("4b35d0cd-1e15-4258-9c98-1b1333f6dd3b")]
	[NativeName("ID3D11Asynchronous")]
	public partial struct ID3D11Asynchronous : IComObject, IComObject<ID3D11Asynchronous>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("4b35d0cd-1e15-4258-9c98-1b1333f6dd3b");

		public unsafe ID3D11Asynchronous (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11Asynchronous value)
		{
			return Unsafe.As<ID3D11Asynchronous, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11Asynchronous value)
		{
			return Unsafe.As<ID3D11Asynchronous, IUnknown>(ref value);
		}

	}

	[Guid("9eb576dd-9f77-4d86-81aa-8bab5fe490e2")]
	[NativeName("ID3D11Predicate")]
	public partial struct ID3D11Predicate : IComObject, IComObject<ID3D11Predicate>, IComObject<ID3D11Query>, IComObject<ID3D11Asynchronous>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("9eb576dd-9f77-4d86-81aa-8bab5fe490e2");

		public unsafe ID3D11Predicate (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11Query (ID3D11Predicate value)
		{
			return Unsafe.As<ID3D11Predicate, ID3D11Query>(ref value);
		}

		public unsafe static implicit operator ID3D11Asynchronous (ID3D11Predicate value)
		{
			return Unsafe.As<ID3D11Predicate, ID3D11Asynchronous>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11Predicate value)
		{
			return Unsafe.As<ID3D11Predicate, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11Predicate value)
		{
			return Unsafe.As<ID3D11Predicate, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_COUNTER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11CounterDesc
	{
		[NativeName("Counter")]
		public D3D11Counter Counter;
		[NativeName("MiscFlags")]
		public uint MiscFlags;


	}

	[Guid("6e8c49fb-a371-4770-b440-29086022b741")]
	[NativeName("ID3D11Counter")]
	public partial struct ID3D11Counter : IComObject, IComObject<ID3D11Counter>, IComObject<ID3D11Asynchronous>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("6e8c49fb-a371-4770-b440-29086022b741");

		public unsafe ID3D11Counter (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc(D3D11CounterDesc* pDesc)
		{
			ID3D11Counter* ptr = (ID3D11Counter*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Counter*, D3D11CounterDesc*, void>)(LpVtbl[1]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc(ref D3D11CounterDesc pDesc)
		{
			ID3D11Counter* ptr = (ID3D11Counter*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CounterDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Counter*, D3D11CounterDesc*, void>)(LpVtbl[1]))(ptr, (D3D11CounterDesc*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11Asynchronous (ID3D11Counter value)
		{
			return Unsafe.As<ID3D11Counter, ID3D11Asynchronous>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11Counter value)
		{
			return Unsafe.As<ID3D11Counter, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11Counter value)
		{
			return Unsafe.As<ID3D11Counter, IUnknown>(ref value);
		}

	}

	[Guid("c0bfa96c-e089-44fb-8eaf-26f8796190da")]
	[NativeName("ID3D11DeviceContext")]
	public partial struct ID3D11DeviceContext : IComObject, IComObject<ID3D11DeviceContext>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("c0bfa96c-e089-44fb-8eaf-26f8796190da");

		public unsafe ID3D11DeviceContext (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void VSSetConstantBuffers(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer***, void>)(LpVtbl[4]))(ptr, startSlot, numBuffers, ppConstantBuffers);
		}

		public readonly unsafe void VSSetConstantBuffers(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer***, void>)(LpVtbl[4]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers);
			}
		}

		public readonly unsafe void PSSetShaderResources(uint startSlot, uint numViews, ID3D11ShaderResourceView*** ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView***, void>)(LpVtbl[5]))(ptr, startSlot, numViews, ppShaderResourceViews);
		}

		public readonly unsafe void PSSetShaderResources(uint startSlot, uint numViews, ref ID3D11ShaderResourceView* ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderResourceView** pppShaderResourceViews = &ppShaderResourceViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView***, void>)(LpVtbl[5]))(ptr, startSlot, numViews, (ID3D11ShaderResourceView***)pppShaderResourceViews);
			}
		}

		public readonly unsafe void PSSetShader(ID3D11PixelShader* pPixelShader, ID3D11ClassInstance*** ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11PixelShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[6]))(ptr, pPixelShader, ppClassInstances, numClassInstances);
		}

		public readonly unsafe void PSSetShader(ref ID3D11PixelShader pPixelShader, ID3D11ClassInstance*** ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11PixelShader* ppPixelShader = &pPixelShader)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11PixelShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[6]))(ptr, (ID3D11PixelShader*)ppPixelShader, ppClassInstances, numClassInstances);
			}
		}

		public readonly unsafe void PSSetShader(ID3D11PixelShader* pPixelShader, ref ID3D11ClassInstance* ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11PixelShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[6]))(ptr, pPixelShader, (ID3D11ClassInstance***)pppClassInstances, numClassInstances);
			}
		}

		public readonly unsafe void PSSetShader(ref ID3D11PixelShader pPixelShader, ref ID3D11ClassInstance* ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11PixelShader* ppPixelShader = &pPixelShader)
			{
				fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11PixelShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[6]))(ptr, (ID3D11PixelShader*)ppPixelShader, (ID3D11ClassInstance***)pppClassInstances, numClassInstances);
				}
			}
		}

		public readonly unsafe void PSSetSamplers(uint startSlot, uint numSamplers, ID3D11SamplerState*** ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState***, void>)(LpVtbl[7]))(ptr, startSlot, numSamplers, ppSamplers);
		}

		public readonly unsafe void PSSetSamplers(uint startSlot, uint numSamplers, ref ID3D11SamplerState* ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11SamplerState** pppSamplers = &ppSamplers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState***, void>)(LpVtbl[7]))(ptr, startSlot, numSamplers, (ID3D11SamplerState***)pppSamplers);
			}
		}

		public readonly unsafe void VSSetShader(ID3D11VertexShader* pVertexShader, ID3D11ClassInstance*** ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11VertexShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[8]))(ptr, pVertexShader, ppClassInstances, numClassInstances);
		}

		public readonly unsafe void VSSetShader(ref ID3D11VertexShader pVertexShader, ID3D11ClassInstance*** ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VertexShader* ppVertexShader = &pVertexShader)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11VertexShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[8]))(ptr, (ID3D11VertexShader*)ppVertexShader, ppClassInstances, numClassInstances);
			}
		}

		public readonly unsafe void VSSetShader(ID3D11VertexShader* pVertexShader, ref ID3D11ClassInstance* ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11VertexShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[8]))(ptr, pVertexShader, (ID3D11ClassInstance***)pppClassInstances, numClassInstances);
			}
		}

		public readonly unsafe void VSSetShader(ref ID3D11VertexShader pVertexShader, ref ID3D11ClassInstance* ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VertexShader* ppVertexShader = &pVertexShader)
			{
				fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11VertexShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[8]))(ptr, (ID3D11VertexShader*)ppVertexShader, (ID3D11ClassInstance***)pppClassInstances, numClassInstances);
				}
			}
		}

		public readonly unsafe void DrawIndexed(uint indexCount, uint startIndexLocation, int baseVertexLocation)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, int, void>)(LpVtbl[9]))(ptr, indexCount, startIndexLocation, baseVertexLocation);
		}

		public readonly unsafe void Draw(uint vertexCount, uint startVertexLocation)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, void>)(LpVtbl[10]))(ptr, vertexCount, startVertexLocation);
		}

		public readonly unsafe HResult Map(ID3D11Resource* pResource, uint subresource, D3D11Map mapType, uint mapFlags, D3D11MappedSubresource* pMappedResource)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, D3D11Map, uint, D3D11MappedSubresource*, HResult>)(LpVtbl[11]))(ptr, pResource, subresource, mapType, mapFlags, pMappedResource);
			return ret;
		}

		public readonly unsafe HResult Map(ref ID3D11Resource pResource, uint subresource, D3D11Map mapType, uint mapFlags, D3D11MappedSubresource* pMappedResource)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, D3D11Map, uint, D3D11MappedSubresource*, HResult>)(LpVtbl[11]))(ptr, (ID3D11Resource*)ppResource, subresource, mapType, mapFlags, pMappedResource);
				return ret;
			}
		}

		public readonly unsafe HResult Map(ID3D11Resource* pResource, uint subresource, D3D11Map mapType, uint mapFlags, ref D3D11MappedSubresource pMappedResource)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11MappedSubresource* ppMappedResource = &pMappedResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, D3D11Map, uint, D3D11MappedSubresource*, HResult>)(LpVtbl[11]))(ptr, pResource, subresource, mapType, mapFlags, (D3D11MappedSubresource*)ppMappedResource);
				return ret;
			}
		}

		public readonly unsafe HResult Map(ref ID3D11Resource pResource, uint subresource, D3D11Map mapType, uint mapFlags, ref D3D11MappedSubresource pMappedResource)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11MappedSubresource* ppMappedResource = &pMappedResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, D3D11Map, uint, D3D11MappedSubresource*, HResult>)(LpVtbl[11]))(ptr, (ID3D11Resource*)ppResource, subresource, mapType, mapFlags, (D3D11MappedSubresource*)ppMappedResource);
					return ret;
				}
			}
		}

		public readonly unsafe void Unmap(ID3D11Resource* pResource, uint subresource)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, void>)(LpVtbl[12]))(ptr, pResource, subresource);
		}

		public readonly unsafe void Unmap(ref ID3D11Resource pResource, uint subresource)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, void>)(LpVtbl[12]))(ptr, (ID3D11Resource*)ppResource, subresource);
			}
		}

		public readonly unsafe void PSSetConstantBuffers(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer***, void>)(LpVtbl[13]))(ptr, startSlot, numBuffers, ppConstantBuffers);
		}

		public readonly unsafe void PSSetConstantBuffers(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer***, void>)(LpVtbl[13]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers);
			}
		}

		public readonly unsafe void IASetInputLayout(ID3D11InputLayout* pInputLayout)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11InputLayout*, void>)(LpVtbl[14]))(ptr, pInputLayout);
		}

		public readonly unsafe void IASetInputLayout(ref ID3D11InputLayout pInputLayout)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11InputLayout* ppInputLayout = &pInputLayout)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11InputLayout*, void>)(LpVtbl[14]))(ptr, (ID3D11InputLayout*)ppInputLayout);
			}
		}

		public readonly unsafe void IASetVertexBuffers(uint startSlot, uint numBuffers, ID3D11Buffer*** ppVertexBuffers, uint* pStrides, uint* pOffsets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[15]))(ptr, startSlot, numBuffers, ppVertexBuffers, pStrides, pOffsets);
		}

		public readonly unsafe void IASetVertexBuffers(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppVertexBuffers, uint* pStrides, uint* pOffsets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppVertexBuffers = &ppVertexBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[15]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppVertexBuffers, pStrides, pOffsets);
			}
		}

		public readonly unsafe void IASetVertexBuffers(uint startSlot, uint numBuffers, ID3D11Buffer*** ppVertexBuffers, ref uint pStrides, uint* pOffsets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppStrides = &pStrides)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[15]))(ptr, startSlot, numBuffers, ppVertexBuffers, (uint*)ppStrides, pOffsets);
			}
		}

		public readonly unsafe void IASetVertexBuffers(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppVertexBuffers, ref uint pStrides, uint* pOffsets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppVertexBuffers = &ppVertexBuffers)
			{
				fixed (uint* ppStrides = &pStrides)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[15]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppVertexBuffers, (uint*)ppStrides, pOffsets);
				}
			}
		}

		public readonly unsafe void IASetVertexBuffers(uint startSlot, uint numBuffers, ID3D11Buffer*** ppVertexBuffers, uint* pStrides, ref uint pOffsets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppOffsets = &pOffsets)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[15]))(ptr, startSlot, numBuffers, ppVertexBuffers, pStrides, (uint*)ppOffsets);
			}
		}

		public readonly unsafe void IASetVertexBuffers(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppVertexBuffers, uint* pStrides, ref uint pOffsets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppVertexBuffers = &ppVertexBuffers)
			{
				fixed (uint* ppOffsets = &pOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[15]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppVertexBuffers, pStrides, (uint*)ppOffsets);
				}
			}
		}

		public readonly unsafe void IASetVertexBuffers(uint startSlot, uint numBuffers, ID3D11Buffer*** ppVertexBuffers, ref uint pStrides, ref uint pOffsets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppStrides = &pStrides)
			{
				fixed (uint* ppOffsets = &pOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[15]))(ptr, startSlot, numBuffers, ppVertexBuffers, (uint*)ppStrides, (uint*)ppOffsets);
				}
			}
		}

		public readonly unsafe void IASetVertexBuffers(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppVertexBuffers, ref uint pStrides, ref uint pOffsets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppVertexBuffers = &ppVertexBuffers)
			{
				fixed (uint* ppStrides = &pStrides)
				{
					fixed (uint* ppOffsets = &pOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[15]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppVertexBuffers, (uint*)ppStrides, (uint*)ppOffsets);
					}
				}
			}
		}

		public readonly unsafe void IASetIndexBuffer(ID3D11Buffer* pIndexBuffer, DxgiFormat format, uint offset)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Buffer*, DxgiFormat, uint, void>)(LpVtbl[16]))(ptr, pIndexBuffer, format, offset);
		}

		public readonly unsafe void IASetIndexBuffer(ref ID3D11Buffer pIndexBuffer, DxgiFormat format, uint offset)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer* ppIndexBuffer = &pIndexBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Buffer*, DxgiFormat, uint, void>)(LpVtbl[16]))(ptr, (ID3D11Buffer*)ppIndexBuffer, format, offset);
			}
		}

		public readonly unsafe void DrawIndexedInstanced(uint indexCountPerInstance, uint instanceCount, uint startIndexLocation, int baseVertexLocation, uint startInstanceLocation)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, uint, int, uint, void>)(LpVtbl[17]))(ptr, indexCountPerInstance, instanceCount, startIndexLocation, baseVertexLocation, startInstanceLocation);
		}

		public readonly unsafe void DrawInstanced(uint vertexCountPerInstance, uint instanceCount, uint startVertexLocation, uint startInstanceLocation)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, uint, uint, void>)(LpVtbl[18]))(ptr, vertexCountPerInstance, instanceCount, startVertexLocation, startInstanceLocation);
		}

		public readonly unsafe void GSSetConstantBuffers(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer***, void>)(LpVtbl[19]))(ptr, startSlot, numBuffers, ppConstantBuffers);
		}

		public readonly unsafe void GSSetConstantBuffers(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer***, void>)(LpVtbl[19]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers);
			}
		}

		public readonly unsafe void GSSetShader(ID3D11GeometryShader* pShader, ID3D11ClassInstance*** ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11GeometryShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[20]))(ptr, pShader, ppClassInstances, numClassInstances);
		}

		public readonly unsafe void GSSetShader(ref ID3D11GeometryShader pShader, ID3D11ClassInstance*** ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11GeometryShader* ppShader = &pShader)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11GeometryShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[20]))(ptr, (ID3D11GeometryShader*)ppShader, ppClassInstances, numClassInstances);
			}
		}

		public readonly unsafe void GSSetShader(ID3D11GeometryShader* pShader, ref ID3D11ClassInstance* ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11GeometryShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[20]))(ptr, pShader, (ID3D11ClassInstance***)pppClassInstances, numClassInstances);
			}
		}

		public readonly unsafe void GSSetShader(ref ID3D11GeometryShader pShader, ref ID3D11ClassInstance* ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11GeometryShader* ppShader = &pShader)
			{
				fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11GeometryShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[20]))(ptr, (ID3D11GeometryShader*)ppShader, (ID3D11ClassInstance***)pppClassInstances, numClassInstances);
				}
			}
		}

		public readonly unsafe void IASetPrimitiveTopology(D3D11PrimitiveTopology topology)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, D3D11PrimitiveTopology, void>)(LpVtbl[21]))(ptr, topology);
		}

		public readonly unsafe void VSSetShaderResources(uint startSlot, uint numViews, ID3D11ShaderResourceView*** ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView***, void>)(LpVtbl[22]))(ptr, startSlot, numViews, ppShaderResourceViews);
		}

		public readonly unsafe void VSSetShaderResources(uint startSlot, uint numViews, ref ID3D11ShaderResourceView* ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderResourceView** pppShaderResourceViews = &ppShaderResourceViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView***, void>)(LpVtbl[22]))(ptr, startSlot, numViews, (ID3D11ShaderResourceView***)pppShaderResourceViews);
			}
		}

		public readonly unsafe void VSSetSamplers(uint startSlot, uint numSamplers, ID3D11SamplerState*** ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState***, void>)(LpVtbl[23]))(ptr, startSlot, numSamplers, ppSamplers);
		}

		public readonly unsafe void VSSetSamplers(uint startSlot, uint numSamplers, ref ID3D11SamplerState* ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11SamplerState** pppSamplers = &ppSamplers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState***, void>)(LpVtbl[23]))(ptr, startSlot, numSamplers, (ID3D11SamplerState***)pppSamplers);
			}
		}

		public readonly unsafe void Begin(ID3D11Asynchronous* pAsync)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Asynchronous*, void>)(LpVtbl[24]))(ptr, pAsync);
		}

		public readonly unsafe void Begin(ref ID3D11Asynchronous pAsync)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Asynchronous* ppAsync = &pAsync)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Asynchronous*, void>)(LpVtbl[24]))(ptr, (ID3D11Asynchronous*)ppAsync);
			}
		}

		public readonly unsafe void End(ID3D11Asynchronous* pAsync)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Asynchronous*, void>)(LpVtbl[25]))(ptr, pAsync);
		}

		public readonly unsafe void End(ref ID3D11Asynchronous pAsync)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Asynchronous* ppAsync = &pAsync)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Asynchronous*, void>)(LpVtbl[25]))(ptr, (ID3D11Asynchronous*)ppAsync);
			}
		}

		public readonly unsafe HResult GetData(ID3D11Asynchronous* pAsync, void* pData, uint dataSize, uint getDataFlags)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Asynchronous*, void*, uint, uint, HResult>)(LpVtbl[26]))(ptr, pAsync, pData, dataSize, getDataFlags);
			return ret;
		}

		public readonly unsafe HResult GetData(ref ID3D11Asynchronous pAsync, void* pData, uint dataSize, uint getDataFlags)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Asynchronous* ppAsync = &pAsync)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Asynchronous*, void*, uint, uint, HResult>)(LpVtbl[26]))(ptr, (ID3D11Asynchronous*)ppAsync, pData, dataSize, getDataFlags);
				return ret;
			}
		}

		public readonly unsafe void SetPredication(ID3D11Predicate* pPredicate, int predicateValue)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Predicate*, int, void>)(LpVtbl[27]))(ptr, pPredicate, predicateValue);
		}

		public readonly unsafe void SetPredication(ref ID3D11Predicate pPredicate, int predicateValue)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Predicate* ppPredicate = &pPredicate)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Predicate*, int, void>)(LpVtbl[27]))(ptr, (ID3D11Predicate*)ppPredicate, predicateValue);
			}
		}

		public readonly unsafe void GSSetShaderResources(uint startSlot, uint numViews, ID3D11ShaderResourceView*** ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView***, void>)(LpVtbl[28]))(ptr, startSlot, numViews, ppShaderResourceViews);
		}

		public readonly unsafe void GSSetShaderResources(uint startSlot, uint numViews, ref ID3D11ShaderResourceView* ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderResourceView** pppShaderResourceViews = &ppShaderResourceViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView***, void>)(LpVtbl[28]))(ptr, startSlot, numViews, (ID3D11ShaderResourceView***)pppShaderResourceViews);
			}
		}

		public readonly unsafe void GSSetSamplers(uint startSlot, uint numSamplers, ID3D11SamplerState*** ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState***, void>)(LpVtbl[29]))(ptr, startSlot, numSamplers, ppSamplers);
		}

		public readonly unsafe void GSSetSamplers(uint startSlot, uint numSamplers, ref ID3D11SamplerState* ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11SamplerState** pppSamplers = &ppSamplers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState***, void>)(LpVtbl[29]))(ptr, startSlot, numSamplers, (ID3D11SamplerState***)pppSamplers);
			}
		}

		public readonly unsafe void OMSetRenderTargets(uint numViews, ID3D11RenderTargetView*** ppRenderTargetViews, ID3D11DepthStencilView* pDepthStencilView)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView***, ID3D11DepthStencilView*, void>)(LpVtbl[30]))(ptr, numViews, ppRenderTargetViews, pDepthStencilView);
		}

		public readonly unsafe void OMSetRenderTargets(uint numViews, ref ID3D11RenderTargetView* ppRenderTargetViews, ID3D11DepthStencilView* pDepthStencilView)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView** pppRenderTargetViews = &ppRenderTargetViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView***, ID3D11DepthStencilView*, void>)(LpVtbl[30]))(ptr, numViews, (ID3D11RenderTargetView***)pppRenderTargetViews, pDepthStencilView);
			}
		}

		public readonly unsafe void OMSetRenderTargets(uint numViews, ID3D11RenderTargetView*** ppRenderTargetViews, ref ID3D11DepthStencilView pDepthStencilView)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DepthStencilView* ppDepthStencilView = &pDepthStencilView)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView***, ID3D11DepthStencilView*, void>)(LpVtbl[30]))(ptr, numViews, ppRenderTargetViews, (ID3D11DepthStencilView*)ppDepthStencilView);
			}
		}

		public readonly unsafe void OMSetRenderTargets(uint numViews, ref ID3D11RenderTargetView* ppRenderTargetViews, ref ID3D11DepthStencilView pDepthStencilView)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView** pppRenderTargetViews = &ppRenderTargetViews)
			{
				fixed (ID3D11DepthStencilView* ppDepthStencilView = &pDepthStencilView)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView***, ID3D11DepthStencilView*, void>)(LpVtbl[30]))(ptr, numViews, (ID3D11RenderTargetView***)pppRenderTargetViews, (ID3D11DepthStencilView*)ppDepthStencilView);
				}
			}
		}

		public readonly unsafe void OMSetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ID3D11RenderTargetView*** ppRenderTargetViews, ID3D11DepthStencilView* pDepthStencilView, uint uAVStartSlot, uint numUAVs, ID3D11UnorderedAccessView*** ppUnorderedAccessViews, uint* pUAVInitialCounts)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView***, ID3D11DepthStencilView*, uint, uint, ID3D11UnorderedAccessView***, uint*, void>)(LpVtbl[31]))(ptr, numRTVs, ppRenderTargetViews, pDepthStencilView, uAVStartSlot, numUAVs, ppUnorderedAccessViews, pUAVInitialCounts);
		}

		public readonly unsafe void OMSetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ref ID3D11RenderTargetView* ppRenderTargetViews, ID3D11DepthStencilView* pDepthStencilView, uint uAVStartSlot, uint numUAVs, ID3D11UnorderedAccessView*** ppUnorderedAccessViews, uint* pUAVInitialCounts)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView** pppRenderTargetViews = &ppRenderTargetViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView***, ID3D11DepthStencilView*, uint, uint, ID3D11UnorderedAccessView***, uint*, void>)(LpVtbl[31]))(ptr, numRTVs, (ID3D11RenderTargetView***)pppRenderTargetViews, pDepthStencilView, uAVStartSlot, numUAVs, ppUnorderedAccessViews, pUAVInitialCounts);
			}
		}

		public readonly unsafe void OMSetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ID3D11RenderTargetView*** ppRenderTargetViews, ref ID3D11DepthStencilView pDepthStencilView, uint uAVStartSlot, uint numUAVs, ID3D11UnorderedAccessView*** ppUnorderedAccessViews, uint* pUAVInitialCounts)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DepthStencilView* ppDepthStencilView = &pDepthStencilView)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView***, ID3D11DepthStencilView*, uint, uint, ID3D11UnorderedAccessView***, uint*, void>)(LpVtbl[31]))(ptr, numRTVs, ppRenderTargetViews, (ID3D11DepthStencilView*)ppDepthStencilView, uAVStartSlot, numUAVs, ppUnorderedAccessViews, pUAVInitialCounts);
			}
		}

		public readonly unsafe void OMSetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ref ID3D11RenderTargetView* ppRenderTargetViews, ref ID3D11DepthStencilView pDepthStencilView, uint uAVStartSlot, uint numUAVs, ID3D11UnorderedAccessView*** ppUnorderedAccessViews, uint* pUAVInitialCounts)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView** pppRenderTargetViews = &ppRenderTargetViews)
			{
				fixed (ID3D11DepthStencilView* ppDepthStencilView = &pDepthStencilView)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView***, ID3D11DepthStencilView*, uint, uint, ID3D11UnorderedAccessView***, uint*, void>)(LpVtbl[31]))(ptr, numRTVs, (ID3D11RenderTargetView***)pppRenderTargetViews, (ID3D11DepthStencilView*)ppDepthStencilView, uAVStartSlot, numUAVs, ppUnorderedAccessViews, pUAVInitialCounts);
				}
			}
		}

		public readonly unsafe void OMSetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ID3D11RenderTargetView*** ppRenderTargetViews, ID3D11DepthStencilView* pDepthStencilView, uint uAVStartSlot, uint numUAVs, ref ID3D11UnorderedAccessView* ppUnorderedAccessViews, uint* pUAVInitialCounts)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11UnorderedAccessView** pppUnorderedAccessViews = &ppUnorderedAccessViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView***, ID3D11DepthStencilView*, uint, uint, ID3D11UnorderedAccessView***, uint*, void>)(LpVtbl[31]))(ptr, numRTVs, ppRenderTargetViews, pDepthStencilView, uAVStartSlot, numUAVs, (ID3D11UnorderedAccessView***)pppUnorderedAccessViews, pUAVInitialCounts);
			}
		}

		public readonly unsafe void OMSetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ref ID3D11RenderTargetView* ppRenderTargetViews, ID3D11DepthStencilView* pDepthStencilView, uint uAVStartSlot, uint numUAVs, ref ID3D11UnorderedAccessView* ppUnorderedAccessViews, uint* pUAVInitialCounts)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView** pppRenderTargetViews = &ppRenderTargetViews)
			{
				fixed (ID3D11UnorderedAccessView** pppUnorderedAccessViews = &ppUnorderedAccessViews)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView***, ID3D11DepthStencilView*, uint, uint, ID3D11UnorderedAccessView***, uint*, void>)(LpVtbl[31]))(ptr, numRTVs, (ID3D11RenderTargetView***)pppRenderTargetViews, pDepthStencilView, uAVStartSlot, numUAVs, (ID3D11UnorderedAccessView***)pppUnorderedAccessViews, pUAVInitialCounts);
				}
			}
		}

		public readonly unsafe void OMSetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ID3D11RenderTargetView*** ppRenderTargetViews, ref ID3D11DepthStencilView pDepthStencilView, uint uAVStartSlot, uint numUAVs, ref ID3D11UnorderedAccessView* ppUnorderedAccessViews, uint* pUAVInitialCounts)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DepthStencilView* ppDepthStencilView = &pDepthStencilView)
			{
				fixed (ID3D11UnorderedAccessView** pppUnorderedAccessViews = &ppUnorderedAccessViews)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView***, ID3D11DepthStencilView*, uint, uint, ID3D11UnorderedAccessView***, uint*, void>)(LpVtbl[31]))(ptr, numRTVs, ppRenderTargetViews, (ID3D11DepthStencilView*)ppDepthStencilView, uAVStartSlot, numUAVs, (ID3D11UnorderedAccessView***)pppUnorderedAccessViews, pUAVInitialCounts);
				}
			}
		}

		public readonly unsafe void OMSetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ref ID3D11RenderTargetView* ppRenderTargetViews, ref ID3D11DepthStencilView pDepthStencilView, uint uAVStartSlot, uint numUAVs, ref ID3D11UnorderedAccessView* ppUnorderedAccessViews, uint* pUAVInitialCounts)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView** pppRenderTargetViews = &ppRenderTargetViews)
			{
				fixed (ID3D11DepthStencilView* ppDepthStencilView = &pDepthStencilView)
				{
					fixed (ID3D11UnorderedAccessView** pppUnorderedAccessViews = &ppUnorderedAccessViews)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView***, ID3D11DepthStencilView*, uint, uint, ID3D11UnorderedAccessView***, uint*, void>)(LpVtbl[31]))(ptr, numRTVs, (ID3D11RenderTargetView***)pppRenderTargetViews, (ID3D11DepthStencilView*)ppDepthStencilView, uAVStartSlot, numUAVs, (ID3D11UnorderedAccessView***)pppUnorderedAccessViews, pUAVInitialCounts);
					}
				}
			}
		}

		public readonly unsafe void OMSetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ID3D11RenderTargetView*** ppRenderTargetViews, ID3D11DepthStencilView* pDepthStencilView, uint uAVStartSlot, uint numUAVs, ID3D11UnorderedAccessView*** ppUnorderedAccessViews, ref uint pUAVInitialCounts)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppUAVInitialCounts = &pUAVInitialCounts)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView***, ID3D11DepthStencilView*, uint, uint, ID3D11UnorderedAccessView***, uint*, void>)(LpVtbl[31]))(ptr, numRTVs, ppRenderTargetViews, pDepthStencilView, uAVStartSlot, numUAVs, ppUnorderedAccessViews, (uint*)ppUAVInitialCounts);
			}
		}

		public readonly unsafe void OMSetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ref ID3D11RenderTargetView* ppRenderTargetViews, ID3D11DepthStencilView* pDepthStencilView, uint uAVStartSlot, uint numUAVs, ID3D11UnorderedAccessView*** ppUnorderedAccessViews, ref uint pUAVInitialCounts)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView** pppRenderTargetViews = &ppRenderTargetViews)
			{
				fixed (uint* ppUAVInitialCounts = &pUAVInitialCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView***, ID3D11DepthStencilView*, uint, uint, ID3D11UnorderedAccessView***, uint*, void>)(LpVtbl[31]))(ptr, numRTVs, (ID3D11RenderTargetView***)pppRenderTargetViews, pDepthStencilView, uAVStartSlot, numUAVs, ppUnorderedAccessViews, (uint*)ppUAVInitialCounts);
				}
			}
		}

		public readonly unsafe void OMSetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ID3D11RenderTargetView*** ppRenderTargetViews, ref ID3D11DepthStencilView pDepthStencilView, uint uAVStartSlot, uint numUAVs, ID3D11UnorderedAccessView*** ppUnorderedAccessViews, ref uint pUAVInitialCounts)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DepthStencilView* ppDepthStencilView = &pDepthStencilView)
			{
				fixed (uint* ppUAVInitialCounts = &pUAVInitialCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView***, ID3D11DepthStencilView*, uint, uint, ID3D11UnorderedAccessView***, uint*, void>)(LpVtbl[31]))(ptr, numRTVs, ppRenderTargetViews, (ID3D11DepthStencilView*)ppDepthStencilView, uAVStartSlot, numUAVs, ppUnorderedAccessViews, (uint*)ppUAVInitialCounts);
				}
			}
		}

		public readonly unsafe void OMSetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ref ID3D11RenderTargetView* ppRenderTargetViews, ref ID3D11DepthStencilView pDepthStencilView, uint uAVStartSlot, uint numUAVs, ID3D11UnorderedAccessView*** ppUnorderedAccessViews, ref uint pUAVInitialCounts)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView** pppRenderTargetViews = &ppRenderTargetViews)
			{
				fixed (ID3D11DepthStencilView* ppDepthStencilView = &pDepthStencilView)
				{
					fixed (uint* ppUAVInitialCounts = &pUAVInitialCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView***, ID3D11DepthStencilView*, uint, uint, ID3D11UnorderedAccessView***, uint*, void>)(LpVtbl[31]))(ptr, numRTVs, (ID3D11RenderTargetView***)pppRenderTargetViews, (ID3D11DepthStencilView*)ppDepthStencilView, uAVStartSlot, numUAVs, ppUnorderedAccessViews, (uint*)ppUAVInitialCounts);
					}
				}
			}
		}

		public readonly unsafe void OMSetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ID3D11RenderTargetView*** ppRenderTargetViews, ID3D11DepthStencilView* pDepthStencilView, uint uAVStartSlot, uint numUAVs, ref ID3D11UnorderedAccessView* ppUnorderedAccessViews, ref uint pUAVInitialCounts)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11UnorderedAccessView** pppUnorderedAccessViews = &ppUnorderedAccessViews)
			{
				fixed (uint* ppUAVInitialCounts = &pUAVInitialCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView***, ID3D11DepthStencilView*, uint, uint, ID3D11UnorderedAccessView***, uint*, void>)(LpVtbl[31]))(ptr, numRTVs, ppRenderTargetViews, pDepthStencilView, uAVStartSlot, numUAVs, (ID3D11UnorderedAccessView***)pppUnorderedAccessViews, (uint*)ppUAVInitialCounts);
				}
			}
		}

		public readonly unsafe void OMSetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ref ID3D11RenderTargetView* ppRenderTargetViews, ID3D11DepthStencilView* pDepthStencilView, uint uAVStartSlot, uint numUAVs, ref ID3D11UnorderedAccessView* ppUnorderedAccessViews, ref uint pUAVInitialCounts)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView** pppRenderTargetViews = &ppRenderTargetViews)
			{
				fixed (ID3D11UnorderedAccessView** pppUnorderedAccessViews = &ppUnorderedAccessViews)
				{
					fixed (uint* ppUAVInitialCounts = &pUAVInitialCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView***, ID3D11DepthStencilView*, uint, uint, ID3D11UnorderedAccessView***, uint*, void>)(LpVtbl[31]))(ptr, numRTVs, (ID3D11RenderTargetView***)pppRenderTargetViews, pDepthStencilView, uAVStartSlot, numUAVs, (ID3D11UnorderedAccessView***)pppUnorderedAccessViews, (uint*)ppUAVInitialCounts);
					}
				}
			}
		}

		public readonly unsafe void OMSetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ID3D11RenderTargetView*** ppRenderTargetViews, ref ID3D11DepthStencilView pDepthStencilView, uint uAVStartSlot, uint numUAVs, ref ID3D11UnorderedAccessView* ppUnorderedAccessViews, ref uint pUAVInitialCounts)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DepthStencilView* ppDepthStencilView = &pDepthStencilView)
			{
				fixed (ID3D11UnorderedAccessView** pppUnorderedAccessViews = &ppUnorderedAccessViews)
				{
					fixed (uint* ppUAVInitialCounts = &pUAVInitialCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView***, ID3D11DepthStencilView*, uint, uint, ID3D11UnorderedAccessView***, uint*, void>)(LpVtbl[31]))(ptr, numRTVs, ppRenderTargetViews, (ID3D11DepthStencilView*)ppDepthStencilView, uAVStartSlot, numUAVs, (ID3D11UnorderedAccessView***)pppUnorderedAccessViews, (uint*)ppUAVInitialCounts);
					}
				}
			}
		}

		public readonly unsafe void OMSetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ref ID3D11RenderTargetView* ppRenderTargetViews, ref ID3D11DepthStencilView pDepthStencilView, uint uAVStartSlot, uint numUAVs, ref ID3D11UnorderedAccessView* ppUnorderedAccessViews, ref uint pUAVInitialCounts)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView** pppRenderTargetViews = &ppRenderTargetViews)
			{
				fixed (ID3D11DepthStencilView* ppDepthStencilView = &pDepthStencilView)
				{
					fixed (ID3D11UnorderedAccessView** pppUnorderedAccessViews = &ppUnorderedAccessViews)
					{
						fixed (uint* ppUAVInitialCounts = &pUAVInitialCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView***, ID3D11DepthStencilView*, uint, uint, ID3D11UnorderedAccessView***, uint*, void>)(LpVtbl[31]))(ptr, numRTVs, (ID3D11RenderTargetView***)pppRenderTargetViews, (ID3D11DepthStencilView*)ppDepthStencilView, uAVStartSlot, numUAVs, (ID3D11UnorderedAccessView***)pppUnorderedAccessViews, (uint*)ppUAVInitialCounts);
						}
					}
				}
			}
		}

		public readonly unsafe void OMSetBlendState(ID3D11BlendState* pBlendState, float* blendFactor, uint sampleMask)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11BlendState*, float*, uint, void>)(LpVtbl[32]))(ptr, pBlendState, blendFactor, sampleMask);
		}

		public readonly unsafe void OMSetBlendState(ref ID3D11BlendState pBlendState, float* blendFactor, uint sampleMask)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11BlendState* ppBlendState = &pBlendState)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11BlendState*, float*, uint, void>)(LpVtbl[32]))(ptr, (ID3D11BlendState*)ppBlendState, blendFactor, sampleMask);
			}
		}

		public readonly unsafe void OMSetBlendState(ID3D11BlendState* pBlendState, ref float blendFactor, uint sampleMask)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* pblendFactor = &blendFactor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11BlendState*, float*, uint, void>)(LpVtbl[32]))(ptr, pBlendState, (float*)pblendFactor, sampleMask);
			}
		}

		public readonly unsafe void OMSetBlendState(ref ID3D11BlendState pBlendState, ref float blendFactor, uint sampleMask)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11BlendState* ppBlendState = &pBlendState)
			{
				fixed (float* pblendFactor = &blendFactor)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11BlendState*, float*, uint, void>)(LpVtbl[32]))(ptr, (ID3D11BlendState*)ppBlendState, (float*)pblendFactor, sampleMask);
				}
			}
		}

		public readonly unsafe void OMSetDepthStencilState(ID3D11DepthStencilState* pDepthStencilState, uint stencilRef)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11DepthStencilState*, uint, void>)(LpVtbl[33]))(ptr, pDepthStencilState, stencilRef);
		}

		public readonly unsafe void OMSetDepthStencilState(ref ID3D11DepthStencilState pDepthStencilState, uint stencilRef)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DepthStencilState* ppDepthStencilState = &pDepthStencilState)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11DepthStencilState*, uint, void>)(LpVtbl[33]))(ptr, (ID3D11DepthStencilState*)ppDepthStencilState, stencilRef);
			}
		}

		public readonly unsafe void SOSetTargets(uint numBuffers, ID3D11Buffer*** ppSOTargets, uint* pOffsets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11Buffer***, uint*, void>)(LpVtbl[34]))(ptr, numBuffers, ppSOTargets, pOffsets);
		}

		public readonly unsafe void SOSetTargets(uint numBuffers, ref ID3D11Buffer* ppSOTargets, uint* pOffsets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppSOTargets = &ppSOTargets)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11Buffer***, uint*, void>)(LpVtbl[34]))(ptr, numBuffers, (ID3D11Buffer***)pppSOTargets, pOffsets);
			}
		}

		public readonly unsafe void SOSetTargets(uint numBuffers, ID3D11Buffer*** ppSOTargets, ref uint pOffsets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppOffsets = &pOffsets)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11Buffer***, uint*, void>)(LpVtbl[34]))(ptr, numBuffers, ppSOTargets, (uint*)ppOffsets);
			}
		}

		public readonly unsafe void SOSetTargets(uint numBuffers, ref ID3D11Buffer* ppSOTargets, ref uint pOffsets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppSOTargets = &ppSOTargets)
			{
				fixed (uint* ppOffsets = &pOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11Buffer***, uint*, void>)(LpVtbl[34]))(ptr, numBuffers, (ID3D11Buffer***)pppSOTargets, (uint*)ppOffsets);
				}
			}
		}

		public readonly unsafe void DrawAuto()
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, void>)(LpVtbl[35]))(ptr);
		}

		public readonly unsafe void DrawIndexedInstancedIndirect(ID3D11Buffer* pBufferForArgs, uint alignedByteOffsetForArgs)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Buffer*, uint, void>)(LpVtbl[36]))(ptr, pBufferForArgs, alignedByteOffsetForArgs);
		}

		public readonly unsafe void DrawIndexedInstancedIndirect(ref ID3D11Buffer pBufferForArgs, uint alignedByteOffsetForArgs)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer* ppBufferForArgs = &pBufferForArgs)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Buffer*, uint, void>)(LpVtbl[36]))(ptr, (ID3D11Buffer*)ppBufferForArgs, alignedByteOffsetForArgs);
			}
		}

		public readonly unsafe void DrawInstancedIndirect(ID3D11Buffer* pBufferForArgs, uint alignedByteOffsetForArgs)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Buffer*, uint, void>)(LpVtbl[37]))(ptr, pBufferForArgs, alignedByteOffsetForArgs);
		}

		public readonly unsafe void DrawInstancedIndirect(ref ID3D11Buffer pBufferForArgs, uint alignedByteOffsetForArgs)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer* ppBufferForArgs = &pBufferForArgs)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Buffer*, uint, void>)(LpVtbl[37]))(ptr, (ID3D11Buffer*)ppBufferForArgs, alignedByteOffsetForArgs);
			}
		}

		public readonly unsafe void Dispatch(uint threadGroupCountX, uint threadGroupCountY, uint threadGroupCountZ)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, uint, void>)(LpVtbl[38]))(ptr, threadGroupCountX, threadGroupCountY, threadGroupCountZ);
		}

		public readonly unsafe void DispatchIndirect(ID3D11Buffer* pBufferForArgs, uint alignedByteOffsetForArgs)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Buffer*, uint, void>)(LpVtbl[39]))(ptr, pBufferForArgs, alignedByteOffsetForArgs);
		}

		public readonly unsafe void DispatchIndirect(ref ID3D11Buffer pBufferForArgs, uint alignedByteOffsetForArgs)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer* ppBufferForArgs = &pBufferForArgs)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Buffer*, uint, void>)(LpVtbl[39]))(ptr, (ID3D11Buffer*)ppBufferForArgs, alignedByteOffsetForArgs);
			}
		}

		public readonly unsafe void RSSetState(ID3D11RasterizerState* pRasterizerState)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11RasterizerState*, void>)(LpVtbl[40]))(ptr, pRasterizerState);
		}

		public readonly unsafe void RSSetState(ref ID3D11RasterizerState pRasterizerState)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RasterizerState* ppRasterizerState = &pRasterizerState)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11RasterizerState*, void>)(LpVtbl[40]))(ptr, (ID3D11RasterizerState*)ppRasterizerState);
			}
		}

		public readonly unsafe void RSSetViewports(uint numViewports, D3D11Viewport* pViewports)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, D3D11Viewport*, void>)(LpVtbl[41]))(ptr, numViewports, pViewports);
		}

		public readonly unsafe void RSSetViewports(uint numViewports, ref D3D11Viewport pViewports)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Viewport* ppViewports = &pViewports)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, D3D11Viewport*, void>)(LpVtbl[41]))(ptr, numViewports, (D3D11Viewport*)ppViewports);
			}
		}

		public readonly unsafe void RSSetScissorRects(uint numRects, Rect32* pRects)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, Rect32*, void>)(LpVtbl[42]))(ptr, numRects, pRects);
		}

		public readonly unsafe void RSSetScissorRects(uint numRects, ref Rect32 pRects)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppRects = &pRects)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, Rect32*, void>)(LpVtbl[42]))(ptr, numRects, (Rect32*)ppRects);
			}
		}

		public readonly unsafe void CopySubresourceRegion(ID3D11Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, uint dstZ, ID3D11Resource* pSrcResource, uint srcSubresource, D3D11Box* pSrcBox)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, uint, uint, uint, ID3D11Resource*, uint, D3D11Box*, void>)(LpVtbl[43]))(ptr, pDstResource, dstSubresource, dstX, dstY, dstZ, pSrcResource, srcSubresource, pSrcBox);
		}

		public readonly unsafe void CopySubresourceRegion(ref ID3D11Resource pDstResource, uint dstSubresource, uint dstX, uint dstY, uint dstZ, ID3D11Resource* pSrcResource, uint srcSubresource, D3D11Box* pSrcBox)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDstResource = &pDstResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, uint, uint, uint, ID3D11Resource*, uint, D3D11Box*, void>)(LpVtbl[43]))(ptr, (ID3D11Resource*)ppDstResource, dstSubresource, dstX, dstY, dstZ, pSrcResource, srcSubresource, pSrcBox);
			}
		}

		public readonly unsafe void CopySubresourceRegion(ID3D11Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, uint dstZ, ref ID3D11Resource pSrcResource, uint srcSubresource, D3D11Box* pSrcBox)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppSrcResource = &pSrcResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, uint, uint, uint, ID3D11Resource*, uint, D3D11Box*, void>)(LpVtbl[43]))(ptr, pDstResource, dstSubresource, dstX, dstY, dstZ, (ID3D11Resource*)ppSrcResource, srcSubresource, pSrcBox);
			}
		}

		public readonly unsafe void CopySubresourceRegion(ref ID3D11Resource pDstResource, uint dstSubresource, uint dstX, uint dstY, uint dstZ, ref ID3D11Resource pSrcResource, uint srcSubresource, D3D11Box* pSrcBox)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D11Resource* ppSrcResource = &pSrcResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, uint, uint, uint, ID3D11Resource*, uint, D3D11Box*, void>)(LpVtbl[43]))(ptr, (ID3D11Resource*)ppDstResource, dstSubresource, dstX, dstY, dstZ, (ID3D11Resource*)ppSrcResource, srcSubresource, pSrcBox);
				}
			}
		}

		public readonly unsafe void CopySubresourceRegion(ID3D11Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, uint dstZ, ID3D11Resource* pSrcResource, uint srcSubresource, ref D3D11Box pSrcBox)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Box* ppSrcBox = &pSrcBox)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, uint, uint, uint, ID3D11Resource*, uint, D3D11Box*, void>)(LpVtbl[43]))(ptr, pDstResource, dstSubresource, dstX, dstY, dstZ, pSrcResource, srcSubresource, (D3D11Box*)ppSrcBox);
			}
		}

		public readonly unsafe void CopySubresourceRegion(ref ID3D11Resource pDstResource, uint dstSubresource, uint dstX, uint dstY, uint dstZ, ID3D11Resource* pSrcResource, uint srcSubresource, ref D3D11Box pSrcBox)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D11Box* ppSrcBox = &pSrcBox)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, uint, uint, uint, ID3D11Resource*, uint, D3D11Box*, void>)(LpVtbl[43]))(ptr, (ID3D11Resource*)ppDstResource, dstSubresource, dstX, dstY, dstZ, pSrcResource, srcSubresource, (D3D11Box*)ppSrcBox);
				}
			}
		}

		public readonly unsafe void CopySubresourceRegion(ID3D11Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, uint dstZ, ref ID3D11Resource pSrcResource, uint srcSubresource, ref D3D11Box pSrcBox)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppSrcResource = &pSrcResource)
			{
				fixed (D3D11Box* ppSrcBox = &pSrcBox)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, uint, uint, uint, ID3D11Resource*, uint, D3D11Box*, void>)(LpVtbl[43]))(ptr, pDstResource, dstSubresource, dstX, dstY, dstZ, (ID3D11Resource*)ppSrcResource, srcSubresource, (D3D11Box*)ppSrcBox);
				}
			}
		}

		public readonly unsafe void CopySubresourceRegion(ref ID3D11Resource pDstResource, uint dstSubresource, uint dstX, uint dstY, uint dstZ, ref ID3D11Resource pSrcResource, uint srcSubresource, ref D3D11Box pSrcBox)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D11Resource* ppSrcResource = &pSrcResource)
				{
					fixed (D3D11Box* ppSrcBox = &pSrcBox)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, uint, uint, uint, ID3D11Resource*, uint, D3D11Box*, void>)(LpVtbl[43]))(ptr, (ID3D11Resource*)ppDstResource, dstSubresource, dstX, dstY, dstZ, (ID3D11Resource*)ppSrcResource, srcSubresource, (D3D11Box*)ppSrcBox);
					}
				}
			}
		}

		public readonly unsafe void CopyResource(ID3D11Resource* pDstResource, ID3D11Resource* pSrcResource)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, ID3D11Resource*, void>)(LpVtbl[44]))(ptr, pDstResource, pSrcResource);
		}

		public readonly unsafe void CopyResource(ref ID3D11Resource pDstResource, ID3D11Resource* pSrcResource)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDstResource = &pDstResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, ID3D11Resource*, void>)(LpVtbl[44]))(ptr, (ID3D11Resource*)ppDstResource, pSrcResource);
			}
		}

		public readonly unsafe void CopyResource(ID3D11Resource* pDstResource, ref ID3D11Resource pSrcResource)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppSrcResource = &pSrcResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, ID3D11Resource*, void>)(LpVtbl[44]))(ptr, pDstResource, (ID3D11Resource*)ppSrcResource);
			}
		}

		public readonly unsafe void CopyResource(ref ID3D11Resource pDstResource, ref ID3D11Resource pSrcResource)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D11Resource* ppSrcResource = &pSrcResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, ID3D11Resource*, void>)(LpVtbl[44]))(ptr, (ID3D11Resource*)ppDstResource, (ID3D11Resource*)ppSrcResource);
				}
			}
		}

		public readonly unsafe void UpdateSubresource(ID3D11Resource* pDstResource, uint dstSubresource, D3D11Box* pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, D3D11Box*, void*, uint, uint, void>)(LpVtbl[45]))(ptr, pDstResource, dstSubresource, pDstBox, pSrcData, srcRowPitch, srcDepthPitch);
		}

		public readonly unsafe void UpdateSubresource(ref ID3D11Resource pDstResource, uint dstSubresource, D3D11Box* pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDstResource = &pDstResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, D3D11Box*, void*, uint, uint, void>)(LpVtbl[45]))(ptr, (ID3D11Resource*)ppDstResource, dstSubresource, pDstBox, pSrcData, srcRowPitch, srcDepthPitch);
			}
		}

		public readonly unsafe void UpdateSubresource(ID3D11Resource* pDstResource, uint dstSubresource, ref D3D11Box pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Box* ppDstBox = &pDstBox)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, D3D11Box*, void*, uint, uint, void>)(LpVtbl[45]))(ptr, pDstResource, dstSubresource, (D3D11Box*)ppDstBox, pSrcData, srcRowPitch, srcDepthPitch);
			}
		}

		public readonly unsafe void UpdateSubresource(ref ID3D11Resource pDstResource, uint dstSubresource, ref D3D11Box pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D11Box* ppDstBox = &pDstBox)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, D3D11Box*, void*, uint, uint, void>)(LpVtbl[45]))(ptr, (ID3D11Resource*)ppDstResource, dstSubresource, (D3D11Box*)ppDstBox, pSrcData, srcRowPitch, srcDepthPitch);
				}
			}
		}

		public readonly unsafe void CopyStructureCount(ID3D11Buffer* pDstBuffer, uint dstAlignedByteOffset, ID3D11UnorderedAccessView* pSrcView)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Buffer*, uint, ID3D11UnorderedAccessView*, void>)(LpVtbl[46]))(ptr, pDstBuffer, dstAlignedByteOffset, pSrcView);
		}

		public readonly unsafe void CopyStructureCount(ref ID3D11Buffer pDstBuffer, uint dstAlignedByteOffset, ID3D11UnorderedAccessView* pSrcView)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer* ppDstBuffer = &pDstBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Buffer*, uint, ID3D11UnorderedAccessView*, void>)(LpVtbl[46]))(ptr, (ID3D11Buffer*)ppDstBuffer, dstAlignedByteOffset, pSrcView);
			}
		}

		public readonly unsafe void CopyStructureCount(ID3D11Buffer* pDstBuffer, uint dstAlignedByteOffset, ref ID3D11UnorderedAccessView pSrcView)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11UnorderedAccessView* ppSrcView = &pSrcView)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Buffer*, uint, ID3D11UnorderedAccessView*, void>)(LpVtbl[46]))(ptr, pDstBuffer, dstAlignedByteOffset, (ID3D11UnorderedAccessView*)ppSrcView);
			}
		}

		public readonly unsafe void CopyStructureCount(ref ID3D11Buffer pDstBuffer, uint dstAlignedByteOffset, ref ID3D11UnorderedAccessView pSrcView)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D11UnorderedAccessView* ppSrcView = &pSrcView)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Buffer*, uint, ID3D11UnorderedAccessView*, void>)(LpVtbl[46]))(ptr, (ID3D11Buffer*)ppDstBuffer, dstAlignedByteOffset, (ID3D11UnorderedAccessView*)ppSrcView);
				}
			}
		}

		public readonly unsafe void ClearRenderTargetView(ID3D11RenderTargetView* pRenderTargetView, float* colorRGBA)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11RenderTargetView*, float*, void>)(LpVtbl[47]))(ptr, pRenderTargetView, colorRGBA);
		}

		public readonly unsafe void ClearRenderTargetView(ref ID3D11RenderTargetView pRenderTargetView, float* colorRGBA)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView* ppRenderTargetView = &pRenderTargetView)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11RenderTargetView*, float*, void>)(LpVtbl[47]))(ptr, (ID3D11RenderTargetView*)ppRenderTargetView, colorRGBA);
			}
		}

		public readonly unsafe void ClearRenderTargetView(ID3D11RenderTargetView* pRenderTargetView, ref float colorRGBA)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* pcolorRGBA = &colorRGBA)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11RenderTargetView*, float*, void>)(LpVtbl[47]))(ptr, pRenderTargetView, (float*)pcolorRGBA);
			}
		}

		public readonly unsafe void ClearRenderTargetView(ref ID3D11RenderTargetView pRenderTargetView, ref float colorRGBA)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView* ppRenderTargetView = &pRenderTargetView)
			{
				fixed (float* pcolorRGBA = &colorRGBA)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11RenderTargetView*, float*, void>)(LpVtbl[47]))(ptr, (ID3D11RenderTargetView*)ppRenderTargetView, (float*)pcolorRGBA);
				}
			}
		}

		public readonly unsafe void ClearUnorderedAccessViewUint(ID3D11UnorderedAccessView* pUnorderedAccessView, uint* values)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11UnorderedAccessView*, uint*, void>)(LpVtbl[48]))(ptr, pUnorderedAccessView, values);
		}

		public readonly unsafe void ClearUnorderedAccessViewUint(ref ID3D11UnorderedAccessView pUnorderedAccessView, uint* values)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11UnorderedAccessView* ppUnorderedAccessView = &pUnorderedAccessView)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11UnorderedAccessView*, uint*, void>)(LpVtbl[48]))(ptr, (ID3D11UnorderedAccessView*)ppUnorderedAccessView, values);
			}
		}

		public readonly unsafe void ClearUnorderedAccessViewUint(ID3D11UnorderedAccessView* pUnorderedAccessView, ref uint values)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* pvalues = &values)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11UnorderedAccessView*, uint*, void>)(LpVtbl[48]))(ptr, pUnorderedAccessView, (uint*)pvalues);
			}
		}

		public readonly unsafe void ClearUnorderedAccessViewUint(ref ID3D11UnorderedAccessView pUnorderedAccessView, ref uint values)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11UnorderedAccessView* ppUnorderedAccessView = &pUnorderedAccessView)
			{
				fixed (uint* pvalues = &values)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11UnorderedAccessView*, uint*, void>)(LpVtbl[48]))(ptr, (ID3D11UnorderedAccessView*)ppUnorderedAccessView, (uint*)pvalues);
				}
			}
		}

		public readonly unsafe void ClearUnorderedAccessViewFloat(ID3D11UnorderedAccessView* pUnorderedAccessView, float* values)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11UnorderedAccessView*, float*, void>)(LpVtbl[49]))(ptr, pUnorderedAccessView, values);
		}

		public readonly unsafe void ClearUnorderedAccessViewFloat(ref ID3D11UnorderedAccessView pUnorderedAccessView, float* values)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11UnorderedAccessView* ppUnorderedAccessView = &pUnorderedAccessView)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11UnorderedAccessView*, float*, void>)(LpVtbl[49]))(ptr, (ID3D11UnorderedAccessView*)ppUnorderedAccessView, values);
			}
		}

		public readonly unsafe void ClearUnorderedAccessViewFloat(ID3D11UnorderedAccessView* pUnorderedAccessView, ref float values)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* pvalues = &values)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11UnorderedAccessView*, float*, void>)(LpVtbl[49]))(ptr, pUnorderedAccessView, (float*)pvalues);
			}
		}

		public readonly unsafe void ClearUnorderedAccessViewFloat(ref ID3D11UnorderedAccessView pUnorderedAccessView, ref float values)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11UnorderedAccessView* ppUnorderedAccessView = &pUnorderedAccessView)
			{
				fixed (float* pvalues = &values)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11UnorderedAccessView*, float*, void>)(LpVtbl[49]))(ptr, (ID3D11UnorderedAccessView*)ppUnorderedAccessView, (float*)pvalues);
				}
			}
		}

		public readonly unsafe void ClearDepthStencilView(ID3D11DepthStencilView* pDepthStencilView, uint clearFlags, float depth, byte stencil)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11DepthStencilView*, uint, float, byte, void>)(LpVtbl[50]))(ptr, pDepthStencilView, clearFlags, depth, stencil);
		}

		public readonly unsafe void ClearDepthStencilView(ref ID3D11DepthStencilView pDepthStencilView, uint clearFlags, float depth, byte stencil)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DepthStencilView* ppDepthStencilView = &pDepthStencilView)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11DepthStencilView*, uint, float, byte, void>)(LpVtbl[50]))(ptr, (ID3D11DepthStencilView*)ppDepthStencilView, clearFlags, depth, stencil);
			}
		}

		public readonly unsafe void GenerateMips(ID3D11ShaderResourceView* pShaderResourceView)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11ShaderResourceView*, void>)(LpVtbl[51]))(ptr, pShaderResourceView);
		}

		public readonly unsafe void GenerateMips(ref ID3D11ShaderResourceView pShaderResourceView)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderResourceView* ppShaderResourceView = &pShaderResourceView)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11ShaderResourceView*, void>)(LpVtbl[51]))(ptr, (ID3D11ShaderResourceView*)ppShaderResourceView);
			}
		}

		public readonly unsafe void SetResourceMinLOD(ID3D11Resource* pResource, float minLOD)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, float, void>)(LpVtbl[52]))(ptr, pResource, minLOD);
		}

		public readonly unsafe void SetResourceMinLOD(ref ID3D11Resource pResource, float minLOD)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, float, void>)(LpVtbl[52]))(ptr, (ID3D11Resource*)ppResource, minLOD);
			}
		}

		public readonly unsafe float GetResourceMinLOD(ID3D11Resource* pResource)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			float ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, float>)(LpVtbl[53]))(ptr, pResource);
			return ret;
		}

		public readonly unsafe float GetResourceMinLOD(ref ID3D11Resource pResource)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				float ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, float>)(LpVtbl[53]))(ptr, (ID3D11Resource*)ppResource);
				return ret;
			}
		}

		public readonly unsafe void ResolveSubresource(ID3D11Resource* pDstResource, uint dstSubresource, ID3D11Resource* pSrcResource, uint srcSubresource, DxgiFormat format)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, ID3D11Resource*, uint, DxgiFormat, void>)(LpVtbl[54]))(ptr, pDstResource, dstSubresource, pSrcResource, srcSubresource, format);
		}

		public readonly unsafe void ResolveSubresource(ref ID3D11Resource pDstResource, uint dstSubresource, ID3D11Resource* pSrcResource, uint srcSubresource, DxgiFormat format)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDstResource = &pDstResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, ID3D11Resource*, uint, DxgiFormat, void>)(LpVtbl[54]))(ptr, (ID3D11Resource*)ppDstResource, dstSubresource, pSrcResource, srcSubresource, format);
			}
		}

		public readonly unsafe void ResolveSubresource(ID3D11Resource* pDstResource, uint dstSubresource, ref ID3D11Resource pSrcResource, uint srcSubresource, DxgiFormat format)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppSrcResource = &pSrcResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, ID3D11Resource*, uint, DxgiFormat, void>)(LpVtbl[54]))(ptr, pDstResource, dstSubresource, (ID3D11Resource*)ppSrcResource, srcSubresource, format);
			}
		}

		public readonly unsafe void ResolveSubresource(ref ID3D11Resource pDstResource, uint dstSubresource, ref ID3D11Resource pSrcResource, uint srcSubresource, DxgiFormat format)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D11Resource* ppSrcResource = &pSrcResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Resource*, uint, ID3D11Resource*, uint, DxgiFormat, void>)(LpVtbl[54]))(ptr, (ID3D11Resource*)ppDstResource, dstSubresource, (ID3D11Resource*)ppSrcResource, srcSubresource, format);
				}
			}
		}

		public readonly unsafe void ExecuteCommandList(ID3D11CommandList* pCommandList, int restoreContextState)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11CommandList*, int, void>)(LpVtbl[55]))(ptr, pCommandList, restoreContextState);
		}

		public readonly unsafe void ExecuteCommandList(ref ID3D11CommandList pCommandList, int restoreContextState)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CommandList* ppCommandList = &pCommandList)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11CommandList*, int, void>)(LpVtbl[55]))(ptr, (ID3D11CommandList*)ppCommandList, restoreContextState);
			}
		}

		public readonly unsafe void HSSetShaderResources(uint startSlot, uint numViews, ID3D11ShaderResourceView*** ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView***, void>)(LpVtbl[56]))(ptr, startSlot, numViews, ppShaderResourceViews);
		}

		public readonly unsafe void HSSetShaderResources(uint startSlot, uint numViews, ref ID3D11ShaderResourceView* ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderResourceView** pppShaderResourceViews = &ppShaderResourceViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView***, void>)(LpVtbl[56]))(ptr, startSlot, numViews, (ID3D11ShaderResourceView***)pppShaderResourceViews);
			}
		}

		public readonly unsafe void HSSetShader(ID3D11HullShader* pHullShader, ID3D11ClassInstance*** ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11HullShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[57]))(ptr, pHullShader, ppClassInstances, numClassInstances);
		}

		public readonly unsafe void HSSetShader(ref ID3D11HullShader pHullShader, ID3D11ClassInstance*** ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11HullShader* ppHullShader = &pHullShader)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11HullShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[57]))(ptr, (ID3D11HullShader*)ppHullShader, ppClassInstances, numClassInstances);
			}
		}

		public readonly unsafe void HSSetShader(ID3D11HullShader* pHullShader, ref ID3D11ClassInstance* ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11HullShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[57]))(ptr, pHullShader, (ID3D11ClassInstance***)pppClassInstances, numClassInstances);
			}
		}

		public readonly unsafe void HSSetShader(ref ID3D11HullShader pHullShader, ref ID3D11ClassInstance* ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11HullShader* ppHullShader = &pHullShader)
			{
				fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11HullShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[57]))(ptr, (ID3D11HullShader*)ppHullShader, (ID3D11ClassInstance***)pppClassInstances, numClassInstances);
				}
			}
		}

		public readonly unsafe void HSSetSamplers(uint startSlot, uint numSamplers, ID3D11SamplerState*** ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState***, void>)(LpVtbl[58]))(ptr, startSlot, numSamplers, ppSamplers);
		}

		public readonly unsafe void HSSetSamplers(uint startSlot, uint numSamplers, ref ID3D11SamplerState* ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11SamplerState** pppSamplers = &ppSamplers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState***, void>)(LpVtbl[58]))(ptr, startSlot, numSamplers, (ID3D11SamplerState***)pppSamplers);
			}
		}

		public readonly unsafe void HSSetConstantBuffers(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer***, void>)(LpVtbl[59]))(ptr, startSlot, numBuffers, ppConstantBuffers);
		}

		public readonly unsafe void HSSetConstantBuffers(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer***, void>)(LpVtbl[59]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers);
			}
		}

		public readonly unsafe void DSSetShaderResources(uint startSlot, uint numViews, ID3D11ShaderResourceView*** ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView***, void>)(LpVtbl[60]))(ptr, startSlot, numViews, ppShaderResourceViews);
		}

		public readonly unsafe void DSSetShaderResources(uint startSlot, uint numViews, ref ID3D11ShaderResourceView* ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderResourceView** pppShaderResourceViews = &ppShaderResourceViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView***, void>)(LpVtbl[60]))(ptr, startSlot, numViews, (ID3D11ShaderResourceView***)pppShaderResourceViews);
			}
		}

		public readonly unsafe void DSSetShader(ID3D11DomainShader* pDomainShader, ID3D11ClassInstance*** ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11DomainShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[61]))(ptr, pDomainShader, ppClassInstances, numClassInstances);
		}

		public readonly unsafe void DSSetShader(ref ID3D11DomainShader pDomainShader, ID3D11ClassInstance*** ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DomainShader* ppDomainShader = &pDomainShader)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11DomainShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[61]))(ptr, (ID3D11DomainShader*)ppDomainShader, ppClassInstances, numClassInstances);
			}
		}

		public readonly unsafe void DSSetShader(ID3D11DomainShader* pDomainShader, ref ID3D11ClassInstance* ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11DomainShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[61]))(ptr, pDomainShader, (ID3D11ClassInstance***)pppClassInstances, numClassInstances);
			}
		}

		public readonly unsafe void DSSetShader(ref ID3D11DomainShader pDomainShader, ref ID3D11ClassInstance* ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DomainShader* ppDomainShader = &pDomainShader)
			{
				fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11DomainShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[61]))(ptr, (ID3D11DomainShader*)ppDomainShader, (ID3D11ClassInstance***)pppClassInstances, numClassInstances);
				}
			}
		}

		public readonly unsafe void DSSetSamplers(uint startSlot, uint numSamplers, ID3D11SamplerState*** ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState***, void>)(LpVtbl[62]))(ptr, startSlot, numSamplers, ppSamplers);
		}

		public readonly unsafe void DSSetSamplers(uint startSlot, uint numSamplers, ref ID3D11SamplerState* ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11SamplerState** pppSamplers = &ppSamplers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState***, void>)(LpVtbl[62]))(ptr, startSlot, numSamplers, (ID3D11SamplerState***)pppSamplers);
			}
		}

		public readonly unsafe void DSSetConstantBuffers(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer***, void>)(LpVtbl[63]))(ptr, startSlot, numBuffers, ppConstantBuffers);
		}

		public readonly unsafe void DSSetConstantBuffers(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer***, void>)(LpVtbl[63]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers);
			}
		}

		public readonly unsafe void CSSetShaderResources(uint startSlot, uint numViews, ID3D11ShaderResourceView*** ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView***, void>)(LpVtbl[64]))(ptr, startSlot, numViews, ppShaderResourceViews);
		}

		public readonly unsafe void CSSetShaderResources(uint startSlot, uint numViews, ref ID3D11ShaderResourceView* ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderResourceView** pppShaderResourceViews = &ppShaderResourceViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView***, void>)(LpVtbl[64]))(ptr, startSlot, numViews, (ID3D11ShaderResourceView***)pppShaderResourceViews);
			}
		}

		public readonly unsafe void CSSetUnorderedAccessViews(uint startSlot, uint numUAVs, ID3D11UnorderedAccessView*** ppUnorderedAccessViews, uint* pUAVInitialCounts)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11UnorderedAccessView***, uint*, void>)(LpVtbl[65]))(ptr, startSlot, numUAVs, ppUnorderedAccessViews, pUAVInitialCounts);
		}

		public readonly unsafe void CSSetUnorderedAccessViews(uint startSlot, uint numUAVs, ref ID3D11UnorderedAccessView* ppUnorderedAccessViews, uint* pUAVInitialCounts)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11UnorderedAccessView** pppUnorderedAccessViews = &ppUnorderedAccessViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11UnorderedAccessView***, uint*, void>)(LpVtbl[65]))(ptr, startSlot, numUAVs, (ID3D11UnorderedAccessView***)pppUnorderedAccessViews, pUAVInitialCounts);
			}
		}

		public readonly unsafe void CSSetUnorderedAccessViews(uint startSlot, uint numUAVs, ID3D11UnorderedAccessView*** ppUnorderedAccessViews, ref uint pUAVInitialCounts)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppUAVInitialCounts = &pUAVInitialCounts)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11UnorderedAccessView***, uint*, void>)(LpVtbl[65]))(ptr, startSlot, numUAVs, ppUnorderedAccessViews, (uint*)ppUAVInitialCounts);
			}
		}

		public readonly unsafe void CSSetUnorderedAccessViews(uint startSlot, uint numUAVs, ref ID3D11UnorderedAccessView* ppUnorderedAccessViews, ref uint pUAVInitialCounts)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11UnorderedAccessView** pppUnorderedAccessViews = &ppUnorderedAccessViews)
			{
				fixed (uint* ppUAVInitialCounts = &pUAVInitialCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11UnorderedAccessView***, uint*, void>)(LpVtbl[65]))(ptr, startSlot, numUAVs, (ID3D11UnorderedAccessView***)pppUnorderedAccessViews, (uint*)ppUAVInitialCounts);
				}
			}
		}

		public readonly unsafe void CSSetShader(ID3D11ComputeShader* pComputeShader, ID3D11ClassInstance*** ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11ComputeShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[66]))(ptr, pComputeShader, ppClassInstances, numClassInstances);
		}

		public readonly unsafe void CSSetShader(ref ID3D11ComputeShader pComputeShader, ID3D11ClassInstance*** ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ComputeShader* ppComputeShader = &pComputeShader)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11ComputeShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[66]))(ptr, (ID3D11ComputeShader*)ppComputeShader, ppClassInstances, numClassInstances);
			}
		}

		public readonly unsafe void CSSetShader(ID3D11ComputeShader* pComputeShader, ref ID3D11ClassInstance* ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11ComputeShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[66]))(ptr, pComputeShader, (ID3D11ClassInstance***)pppClassInstances, numClassInstances);
			}
		}

		public readonly unsafe void CSSetShader(ref ID3D11ComputeShader pComputeShader, ref ID3D11ClassInstance* ppClassInstances, uint numClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ComputeShader* ppComputeShader = &pComputeShader)
			{
				fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11ComputeShader*, ID3D11ClassInstance***, uint, void>)(LpVtbl[66]))(ptr, (ID3D11ComputeShader*)ppComputeShader, (ID3D11ClassInstance***)pppClassInstances, numClassInstances);
				}
			}
		}

		public readonly unsafe void CSSetSamplers(uint startSlot, uint numSamplers, ID3D11SamplerState*** ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState***, void>)(LpVtbl[67]))(ptr, startSlot, numSamplers, ppSamplers);
		}

		public readonly unsafe void CSSetSamplers(uint startSlot, uint numSamplers, ref ID3D11SamplerState* ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11SamplerState** pppSamplers = &ppSamplers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState***, void>)(LpVtbl[67]))(ptr, startSlot, numSamplers, (ID3D11SamplerState***)pppSamplers);
			}
		}

		public readonly unsafe void CSSetConstantBuffers(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer***, void>)(LpVtbl[68]))(ptr, startSlot, numBuffers, ppConstantBuffers);
		}

		public readonly unsafe void CSSetConstantBuffers(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer***, void>)(LpVtbl[68]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers);
			}
		}

		public readonly unsafe void VSGetConstantBuffers(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer**, void>)(LpVtbl[69]))(ptr, startSlot, numBuffers, ppConstantBuffers);
		}

		public readonly unsafe void VSGetConstantBuffers(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer**, void>)(LpVtbl[69]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers);
			}
		}

		public readonly unsafe void PSGetShaderResources(uint startSlot, uint numViews, ID3D11ShaderResourceView** ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView**, void>)(LpVtbl[70]))(ptr, startSlot, numViews, ppShaderResourceViews);
		}

		public readonly unsafe void PSGetShaderResources(uint startSlot, uint numViews, ref ID3D11ShaderResourceView* ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderResourceView** pppShaderResourceViews = &ppShaderResourceViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView**, void>)(LpVtbl[70]))(ptr, startSlot, numViews, (ID3D11ShaderResourceView**)pppShaderResourceViews);
			}
		}

		public readonly unsafe void PSGetShader(ID3D11PixelShader** ppPixelShader, ID3D11ClassInstance** ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11PixelShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[71]))(ptr, ppPixelShader, ppClassInstances, pNumClassInstances);
		}

		public readonly unsafe void PSGetShader(ref ID3D11PixelShader* ppPixelShader, ID3D11ClassInstance** ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11PixelShader** pppPixelShader = &ppPixelShader)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11PixelShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[71]))(ptr, (ID3D11PixelShader**)pppPixelShader, ppClassInstances, pNumClassInstances);
			}
		}

		public readonly unsafe void PSGetShader(ID3D11PixelShader** ppPixelShader, ref ID3D11ClassInstance* ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11PixelShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[71]))(ptr, ppPixelShader, (ID3D11ClassInstance**)pppClassInstances, pNumClassInstances);
			}
		}

		public readonly unsafe void PSGetShader(ref ID3D11PixelShader* ppPixelShader, ref ID3D11ClassInstance* ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11PixelShader** pppPixelShader = &ppPixelShader)
			{
				fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11PixelShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[71]))(ptr, (ID3D11PixelShader**)pppPixelShader, (ID3D11ClassInstance**)pppClassInstances, pNumClassInstances);
				}
			}
		}

		public readonly unsafe void PSGetShader(ID3D11PixelShader** ppPixelShader, ID3D11ClassInstance** ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumClassInstances = &pNumClassInstances)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11PixelShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[71]))(ptr, ppPixelShader, ppClassInstances, (uint*)ppNumClassInstances);
			}
		}

		public readonly unsafe void PSGetShader(ref ID3D11PixelShader* ppPixelShader, ID3D11ClassInstance** ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11PixelShader** pppPixelShader = &ppPixelShader)
			{
				fixed (uint* ppNumClassInstances = &pNumClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11PixelShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[71]))(ptr, (ID3D11PixelShader**)pppPixelShader, ppClassInstances, (uint*)ppNumClassInstances);
				}
			}
		}

		public readonly unsafe void PSGetShader(ID3D11PixelShader** ppPixelShader, ref ID3D11ClassInstance* ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
			{
				fixed (uint* ppNumClassInstances = &pNumClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11PixelShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[71]))(ptr, ppPixelShader, (ID3D11ClassInstance**)pppClassInstances, (uint*)ppNumClassInstances);
				}
			}
		}

		public readonly unsafe void PSGetShader(ref ID3D11PixelShader* ppPixelShader, ref ID3D11ClassInstance* ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11PixelShader** pppPixelShader = &ppPixelShader)
			{
				fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
				{
					fixed (uint* ppNumClassInstances = &pNumClassInstances)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11PixelShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[71]))(ptr, (ID3D11PixelShader**)pppPixelShader, (ID3D11ClassInstance**)pppClassInstances, (uint*)ppNumClassInstances);
					}
				}
			}
		}

		public readonly unsafe void PSGetSamplers(uint startSlot, uint numSamplers, ID3D11SamplerState** ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState**, void>)(LpVtbl[72]))(ptr, startSlot, numSamplers, ppSamplers);
		}

		public readonly unsafe void PSGetSamplers(uint startSlot, uint numSamplers, ref ID3D11SamplerState* ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11SamplerState** pppSamplers = &ppSamplers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState**, void>)(LpVtbl[72]))(ptr, startSlot, numSamplers, (ID3D11SamplerState**)pppSamplers);
			}
		}

		public readonly unsafe void VSGetShader(ID3D11VertexShader** ppVertexShader, ID3D11ClassInstance** ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11VertexShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[73]))(ptr, ppVertexShader, ppClassInstances, pNumClassInstances);
		}

		public readonly unsafe void VSGetShader(ref ID3D11VertexShader* ppVertexShader, ID3D11ClassInstance** ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VertexShader** pppVertexShader = &ppVertexShader)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11VertexShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[73]))(ptr, (ID3D11VertexShader**)pppVertexShader, ppClassInstances, pNumClassInstances);
			}
		}

		public readonly unsafe void VSGetShader(ID3D11VertexShader** ppVertexShader, ref ID3D11ClassInstance* ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11VertexShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[73]))(ptr, ppVertexShader, (ID3D11ClassInstance**)pppClassInstances, pNumClassInstances);
			}
		}

		public readonly unsafe void VSGetShader(ref ID3D11VertexShader* ppVertexShader, ref ID3D11ClassInstance* ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VertexShader** pppVertexShader = &ppVertexShader)
			{
				fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11VertexShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[73]))(ptr, (ID3D11VertexShader**)pppVertexShader, (ID3D11ClassInstance**)pppClassInstances, pNumClassInstances);
				}
			}
		}

		public readonly unsafe void VSGetShader(ID3D11VertexShader** ppVertexShader, ID3D11ClassInstance** ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumClassInstances = &pNumClassInstances)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11VertexShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[73]))(ptr, ppVertexShader, ppClassInstances, (uint*)ppNumClassInstances);
			}
		}

		public readonly unsafe void VSGetShader(ref ID3D11VertexShader* ppVertexShader, ID3D11ClassInstance** ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VertexShader** pppVertexShader = &ppVertexShader)
			{
				fixed (uint* ppNumClassInstances = &pNumClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11VertexShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[73]))(ptr, (ID3D11VertexShader**)pppVertexShader, ppClassInstances, (uint*)ppNumClassInstances);
				}
			}
		}

		public readonly unsafe void VSGetShader(ID3D11VertexShader** ppVertexShader, ref ID3D11ClassInstance* ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
			{
				fixed (uint* ppNumClassInstances = &pNumClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11VertexShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[73]))(ptr, ppVertexShader, (ID3D11ClassInstance**)pppClassInstances, (uint*)ppNumClassInstances);
				}
			}
		}

		public readonly unsafe void VSGetShader(ref ID3D11VertexShader* ppVertexShader, ref ID3D11ClassInstance* ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VertexShader** pppVertexShader = &ppVertexShader)
			{
				fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
				{
					fixed (uint* ppNumClassInstances = &pNumClassInstances)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11VertexShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[73]))(ptr, (ID3D11VertexShader**)pppVertexShader, (ID3D11ClassInstance**)pppClassInstances, (uint*)ppNumClassInstances);
					}
				}
			}
		}

		public readonly unsafe void PSGetConstantBuffers(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer**, void>)(LpVtbl[74]))(ptr, startSlot, numBuffers, ppConstantBuffers);
		}

		public readonly unsafe void PSGetConstantBuffers(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer**, void>)(LpVtbl[74]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers);
			}
		}

		public readonly unsafe void IAGetInputLayout(ID3D11InputLayout** ppInputLayout)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11InputLayout**, void>)(LpVtbl[75]))(ptr, ppInputLayout);
		}

		public readonly unsafe void IAGetInputLayout(ref ID3D11InputLayout* ppInputLayout)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11InputLayout** pppInputLayout = &ppInputLayout)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11InputLayout**, void>)(LpVtbl[75]))(ptr, (ID3D11InputLayout**)pppInputLayout);
			}
		}

		public readonly unsafe void IAGetVertexBuffers(uint startSlot, uint numBuffers, ID3D11Buffer** ppVertexBuffers, uint* pStrides, uint* pOffsets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[76]))(ptr, startSlot, numBuffers, ppVertexBuffers, pStrides, pOffsets);
		}

		public readonly unsafe void IAGetVertexBuffers(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppVertexBuffers, uint* pStrides, uint* pOffsets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppVertexBuffers = &ppVertexBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[76]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppVertexBuffers, pStrides, pOffsets);
			}
		}

		public readonly unsafe void IAGetVertexBuffers(uint startSlot, uint numBuffers, ID3D11Buffer** ppVertexBuffers, ref uint pStrides, uint* pOffsets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppStrides = &pStrides)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[76]))(ptr, startSlot, numBuffers, ppVertexBuffers, (uint*)ppStrides, pOffsets);
			}
		}

		public readonly unsafe void IAGetVertexBuffers(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppVertexBuffers, ref uint pStrides, uint* pOffsets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppVertexBuffers = &ppVertexBuffers)
			{
				fixed (uint* ppStrides = &pStrides)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[76]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppVertexBuffers, (uint*)ppStrides, pOffsets);
				}
			}
		}

		public readonly unsafe void IAGetVertexBuffers(uint startSlot, uint numBuffers, ID3D11Buffer** ppVertexBuffers, uint* pStrides, ref uint pOffsets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppOffsets = &pOffsets)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[76]))(ptr, startSlot, numBuffers, ppVertexBuffers, pStrides, (uint*)ppOffsets);
			}
		}

		public readonly unsafe void IAGetVertexBuffers(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppVertexBuffers, uint* pStrides, ref uint pOffsets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppVertexBuffers = &ppVertexBuffers)
			{
				fixed (uint* ppOffsets = &pOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[76]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppVertexBuffers, pStrides, (uint*)ppOffsets);
				}
			}
		}

		public readonly unsafe void IAGetVertexBuffers(uint startSlot, uint numBuffers, ID3D11Buffer** ppVertexBuffers, ref uint pStrides, ref uint pOffsets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppStrides = &pStrides)
			{
				fixed (uint* ppOffsets = &pOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[76]))(ptr, startSlot, numBuffers, ppVertexBuffers, (uint*)ppStrides, (uint*)ppOffsets);
				}
			}
		}

		public readonly unsafe void IAGetVertexBuffers(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppVertexBuffers, ref uint pStrides, ref uint pOffsets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppVertexBuffers = &ppVertexBuffers)
			{
				fixed (uint* ppStrides = &pStrides)
				{
					fixed (uint* ppOffsets = &pOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[76]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppVertexBuffers, (uint*)ppStrides, (uint*)ppOffsets);
					}
				}
			}
		}

		public readonly unsafe void IAGetIndexBuffer(ID3D11Buffer** pIndexBuffer, DxgiFormat* format, uint* offset)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Buffer**, DxgiFormat*, uint*, void>)(LpVtbl[77]))(ptr, pIndexBuffer, format, offset);
		}

		public readonly unsafe void IAGetIndexBuffer(ref ID3D11Buffer* pIndexBuffer, DxgiFormat* format, uint* offset)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** ppIndexBuffer = &pIndexBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Buffer**, DxgiFormat*, uint*, void>)(LpVtbl[77]))(ptr, (ID3D11Buffer**)ppIndexBuffer, format, offset);
			}
		}

		public readonly unsafe void IAGetIndexBuffer(ID3D11Buffer** pIndexBuffer, ref DxgiFormat format, uint* offset)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiFormat* pformat = &format)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Buffer**, DxgiFormat*, uint*, void>)(LpVtbl[77]))(ptr, pIndexBuffer, (DxgiFormat*)pformat, offset);
			}
		}

		public readonly unsafe void IAGetIndexBuffer(ref ID3D11Buffer* pIndexBuffer, ref DxgiFormat format, uint* offset)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** ppIndexBuffer = &pIndexBuffer)
			{
				fixed (DxgiFormat* pformat = &format)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Buffer**, DxgiFormat*, uint*, void>)(LpVtbl[77]))(ptr, (ID3D11Buffer**)ppIndexBuffer, (DxgiFormat*)pformat, offset);
				}
			}
		}

		public readonly unsafe void IAGetIndexBuffer(ID3D11Buffer** pIndexBuffer, DxgiFormat* format, ref uint offset)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* poffset = &offset)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Buffer**, DxgiFormat*, uint*, void>)(LpVtbl[77]))(ptr, pIndexBuffer, format, (uint*)poffset);
			}
		}

		public readonly unsafe void IAGetIndexBuffer(ref ID3D11Buffer* pIndexBuffer, DxgiFormat* format, ref uint offset)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** ppIndexBuffer = &pIndexBuffer)
			{
				fixed (uint* poffset = &offset)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Buffer**, DxgiFormat*, uint*, void>)(LpVtbl[77]))(ptr, (ID3D11Buffer**)ppIndexBuffer, format, (uint*)poffset);
				}
			}
		}

		public readonly unsafe void IAGetIndexBuffer(ID3D11Buffer** pIndexBuffer, ref DxgiFormat format, ref uint offset)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiFormat* pformat = &format)
			{
				fixed (uint* poffset = &offset)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Buffer**, DxgiFormat*, uint*, void>)(LpVtbl[77]))(ptr, pIndexBuffer, (DxgiFormat*)pformat, (uint*)poffset);
				}
			}
		}

		public readonly unsafe void IAGetIndexBuffer(ref ID3D11Buffer* pIndexBuffer, ref DxgiFormat format, ref uint offset)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** ppIndexBuffer = &pIndexBuffer)
			{
				fixed (DxgiFormat* pformat = &format)
				{
					fixed (uint* poffset = &offset)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Buffer**, DxgiFormat*, uint*, void>)(LpVtbl[77]))(ptr, (ID3D11Buffer**)ppIndexBuffer, (DxgiFormat*)pformat, (uint*)poffset);
					}
				}
			}
		}

		public readonly unsafe void GSGetConstantBuffers(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer**, void>)(LpVtbl[78]))(ptr, startSlot, numBuffers, ppConstantBuffers);
		}

		public readonly unsafe void GSGetConstantBuffers(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer**, void>)(LpVtbl[78]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers);
			}
		}

		public readonly unsafe void GSGetShader(ID3D11GeometryShader** ppGeometryShader, ID3D11ClassInstance** ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11GeometryShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[79]))(ptr, ppGeometryShader, ppClassInstances, pNumClassInstances);
		}

		public readonly unsafe void GSGetShader(ref ID3D11GeometryShader* ppGeometryShader, ID3D11ClassInstance** ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11GeometryShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[79]))(ptr, (ID3D11GeometryShader**)pppGeometryShader, ppClassInstances, pNumClassInstances);
			}
		}

		public readonly unsafe void GSGetShader(ID3D11GeometryShader** ppGeometryShader, ref ID3D11ClassInstance* ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11GeometryShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[79]))(ptr, ppGeometryShader, (ID3D11ClassInstance**)pppClassInstances, pNumClassInstances);
			}
		}

		public readonly unsafe void GSGetShader(ref ID3D11GeometryShader* ppGeometryShader, ref ID3D11ClassInstance* ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
			{
				fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11GeometryShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[79]))(ptr, (ID3D11GeometryShader**)pppGeometryShader, (ID3D11ClassInstance**)pppClassInstances, pNumClassInstances);
				}
			}
		}

		public readonly unsafe void GSGetShader(ID3D11GeometryShader** ppGeometryShader, ID3D11ClassInstance** ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumClassInstances = &pNumClassInstances)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11GeometryShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[79]))(ptr, ppGeometryShader, ppClassInstances, (uint*)ppNumClassInstances);
			}
		}

		public readonly unsafe void GSGetShader(ref ID3D11GeometryShader* ppGeometryShader, ID3D11ClassInstance** ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
			{
				fixed (uint* ppNumClassInstances = &pNumClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11GeometryShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[79]))(ptr, (ID3D11GeometryShader**)pppGeometryShader, ppClassInstances, (uint*)ppNumClassInstances);
				}
			}
		}

		public readonly unsafe void GSGetShader(ID3D11GeometryShader** ppGeometryShader, ref ID3D11ClassInstance* ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
			{
				fixed (uint* ppNumClassInstances = &pNumClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11GeometryShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[79]))(ptr, ppGeometryShader, (ID3D11ClassInstance**)pppClassInstances, (uint*)ppNumClassInstances);
				}
			}
		}

		public readonly unsafe void GSGetShader(ref ID3D11GeometryShader* ppGeometryShader, ref ID3D11ClassInstance* ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11GeometryShader** pppGeometryShader = &ppGeometryShader)
			{
				fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
				{
					fixed (uint* ppNumClassInstances = &pNumClassInstances)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11GeometryShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[79]))(ptr, (ID3D11GeometryShader**)pppGeometryShader, (ID3D11ClassInstance**)pppClassInstances, (uint*)ppNumClassInstances);
					}
				}
			}
		}

		public readonly unsafe void IAGetPrimitiveTopology(D3D11PrimitiveTopology* pTopology)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, D3D11PrimitiveTopology*, void>)(LpVtbl[80]))(ptr, pTopology);
		}

		public readonly unsafe void IAGetPrimitiveTopology(ref D3D11PrimitiveTopology pTopology)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11PrimitiveTopology* ppTopology = &pTopology)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, D3D11PrimitiveTopology*, void>)(LpVtbl[80]))(ptr, (D3D11PrimitiveTopology*)ppTopology);
			}
		}

		public readonly unsafe void VSGetShaderResources(uint startSlot, uint numViews, ID3D11ShaderResourceView** ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView**, void>)(LpVtbl[81]))(ptr, startSlot, numViews, ppShaderResourceViews);
		}

		public readonly unsafe void VSGetShaderResources(uint startSlot, uint numViews, ref ID3D11ShaderResourceView* ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderResourceView** pppShaderResourceViews = &ppShaderResourceViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView**, void>)(LpVtbl[81]))(ptr, startSlot, numViews, (ID3D11ShaderResourceView**)pppShaderResourceViews);
			}
		}

		public readonly unsafe void VSGetSamplers(uint startSlot, uint numSamplers, ID3D11SamplerState** ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState**, void>)(LpVtbl[82]))(ptr, startSlot, numSamplers, ppSamplers);
		}

		public readonly unsafe void VSGetSamplers(uint startSlot, uint numSamplers, ref ID3D11SamplerState* ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11SamplerState** pppSamplers = &ppSamplers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState**, void>)(LpVtbl[82]))(ptr, startSlot, numSamplers, (ID3D11SamplerState**)pppSamplers);
			}
		}

		public readonly unsafe void GetPredication(ID3D11Predicate** ppPredicate, int* pPredicateValue)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Predicate**, int*, void>)(LpVtbl[83]))(ptr, ppPredicate, pPredicateValue);
		}

		public readonly unsafe void GetPredication(ref ID3D11Predicate* ppPredicate, int* pPredicateValue)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Predicate** pppPredicate = &ppPredicate)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Predicate**, int*, void>)(LpVtbl[83]))(ptr, (ID3D11Predicate**)pppPredicate, pPredicateValue);
			}
		}

		public readonly unsafe void GetPredication(ID3D11Predicate** ppPredicate, ref int pPredicateValue)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppPredicateValue = &pPredicateValue)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Predicate**, int*, void>)(LpVtbl[83]))(ptr, ppPredicate, (int*)ppPredicateValue);
			}
		}

		public readonly unsafe void GetPredication(ref ID3D11Predicate* ppPredicate, ref int pPredicateValue)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Predicate** pppPredicate = &ppPredicate)
			{
				fixed (int* ppPredicateValue = &pPredicateValue)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11Predicate**, int*, void>)(LpVtbl[83]))(ptr, (ID3D11Predicate**)pppPredicate, (int*)ppPredicateValue);
				}
			}
		}

		public readonly unsafe void GSGetShaderResources(uint startSlot, uint numViews, ID3D11ShaderResourceView** ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView**, void>)(LpVtbl[84]))(ptr, startSlot, numViews, ppShaderResourceViews);
		}

		public readonly unsafe void GSGetShaderResources(uint startSlot, uint numViews, ref ID3D11ShaderResourceView* ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderResourceView** pppShaderResourceViews = &ppShaderResourceViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView**, void>)(LpVtbl[84]))(ptr, startSlot, numViews, (ID3D11ShaderResourceView**)pppShaderResourceViews);
			}
		}

		public readonly unsafe void GSGetSamplers(uint startSlot, uint numSamplers, ID3D11SamplerState** ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState**, void>)(LpVtbl[85]))(ptr, startSlot, numSamplers, ppSamplers);
		}

		public readonly unsafe void GSGetSamplers(uint startSlot, uint numSamplers, ref ID3D11SamplerState* ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11SamplerState** pppSamplers = &ppSamplers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState**, void>)(LpVtbl[85]))(ptr, startSlot, numSamplers, (ID3D11SamplerState**)pppSamplers);
			}
		}

		public readonly unsafe void OMGetRenderTargets(uint numViews, ID3D11RenderTargetView** ppRenderTargetViews, ID3D11DepthStencilView** ppDepthStencilView)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView**, ID3D11DepthStencilView**, void>)(LpVtbl[86]))(ptr, numViews, ppRenderTargetViews, ppDepthStencilView);
		}

		public readonly unsafe void OMGetRenderTargets(uint numViews, ref ID3D11RenderTargetView* ppRenderTargetViews, ID3D11DepthStencilView** ppDepthStencilView)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView** pppRenderTargetViews = &ppRenderTargetViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView**, ID3D11DepthStencilView**, void>)(LpVtbl[86]))(ptr, numViews, (ID3D11RenderTargetView**)pppRenderTargetViews, ppDepthStencilView);
			}
		}

		public readonly unsafe void OMGetRenderTargets(uint numViews, ID3D11RenderTargetView** ppRenderTargetViews, ref ID3D11DepthStencilView* ppDepthStencilView)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DepthStencilView** pppDepthStencilView = &ppDepthStencilView)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView**, ID3D11DepthStencilView**, void>)(LpVtbl[86]))(ptr, numViews, ppRenderTargetViews, (ID3D11DepthStencilView**)pppDepthStencilView);
			}
		}

		public readonly unsafe void OMGetRenderTargets(uint numViews, ref ID3D11RenderTargetView* ppRenderTargetViews, ref ID3D11DepthStencilView* ppDepthStencilView)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView** pppRenderTargetViews = &ppRenderTargetViews)
			{
				fixed (ID3D11DepthStencilView** pppDepthStencilView = &ppDepthStencilView)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView**, ID3D11DepthStencilView**, void>)(LpVtbl[86]))(ptr, numViews, (ID3D11RenderTargetView**)pppRenderTargetViews, (ID3D11DepthStencilView**)pppDepthStencilView);
				}
			}
		}

		public readonly unsafe void OMGetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ID3D11RenderTargetView** ppRenderTargetViews, ID3D11DepthStencilView** ppDepthStencilView, uint uAVStartSlot, uint numUAVs, ID3D11UnorderedAccessView** ppUnorderedAccessViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView**, ID3D11DepthStencilView**, uint, uint, ID3D11UnorderedAccessView**, void>)(LpVtbl[87]))(ptr, numRTVs, ppRenderTargetViews, ppDepthStencilView, uAVStartSlot, numUAVs, ppUnorderedAccessViews);
		}

		public readonly unsafe void OMGetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ref ID3D11RenderTargetView* ppRenderTargetViews, ID3D11DepthStencilView** ppDepthStencilView, uint uAVStartSlot, uint numUAVs, ID3D11UnorderedAccessView** ppUnorderedAccessViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView** pppRenderTargetViews = &ppRenderTargetViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView**, ID3D11DepthStencilView**, uint, uint, ID3D11UnorderedAccessView**, void>)(LpVtbl[87]))(ptr, numRTVs, (ID3D11RenderTargetView**)pppRenderTargetViews, ppDepthStencilView, uAVStartSlot, numUAVs, ppUnorderedAccessViews);
			}
		}

		public readonly unsafe void OMGetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ID3D11RenderTargetView** ppRenderTargetViews, ref ID3D11DepthStencilView* ppDepthStencilView, uint uAVStartSlot, uint numUAVs, ID3D11UnorderedAccessView** ppUnorderedAccessViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DepthStencilView** pppDepthStencilView = &ppDepthStencilView)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView**, ID3D11DepthStencilView**, uint, uint, ID3D11UnorderedAccessView**, void>)(LpVtbl[87]))(ptr, numRTVs, ppRenderTargetViews, (ID3D11DepthStencilView**)pppDepthStencilView, uAVStartSlot, numUAVs, ppUnorderedAccessViews);
			}
		}

		public readonly unsafe void OMGetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ref ID3D11RenderTargetView* ppRenderTargetViews, ref ID3D11DepthStencilView* ppDepthStencilView, uint uAVStartSlot, uint numUAVs, ID3D11UnorderedAccessView** ppUnorderedAccessViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView** pppRenderTargetViews = &ppRenderTargetViews)
			{
				fixed (ID3D11DepthStencilView** pppDepthStencilView = &ppDepthStencilView)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView**, ID3D11DepthStencilView**, uint, uint, ID3D11UnorderedAccessView**, void>)(LpVtbl[87]))(ptr, numRTVs, (ID3D11RenderTargetView**)pppRenderTargetViews, (ID3D11DepthStencilView**)pppDepthStencilView, uAVStartSlot, numUAVs, ppUnorderedAccessViews);
				}
			}
		}

		public readonly unsafe void OMGetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ID3D11RenderTargetView** ppRenderTargetViews, ID3D11DepthStencilView** ppDepthStencilView, uint uAVStartSlot, uint numUAVs, ref ID3D11UnorderedAccessView* ppUnorderedAccessViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11UnorderedAccessView** pppUnorderedAccessViews = &ppUnorderedAccessViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView**, ID3D11DepthStencilView**, uint, uint, ID3D11UnorderedAccessView**, void>)(LpVtbl[87]))(ptr, numRTVs, ppRenderTargetViews, ppDepthStencilView, uAVStartSlot, numUAVs, (ID3D11UnorderedAccessView**)pppUnorderedAccessViews);
			}
		}

		public readonly unsafe void OMGetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ref ID3D11RenderTargetView* ppRenderTargetViews, ID3D11DepthStencilView** ppDepthStencilView, uint uAVStartSlot, uint numUAVs, ref ID3D11UnorderedAccessView* ppUnorderedAccessViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView** pppRenderTargetViews = &ppRenderTargetViews)
			{
				fixed (ID3D11UnorderedAccessView** pppUnorderedAccessViews = &ppUnorderedAccessViews)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView**, ID3D11DepthStencilView**, uint, uint, ID3D11UnorderedAccessView**, void>)(LpVtbl[87]))(ptr, numRTVs, (ID3D11RenderTargetView**)pppRenderTargetViews, ppDepthStencilView, uAVStartSlot, numUAVs, (ID3D11UnorderedAccessView**)pppUnorderedAccessViews);
				}
			}
		}

		public readonly unsafe void OMGetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ID3D11RenderTargetView** ppRenderTargetViews, ref ID3D11DepthStencilView* ppDepthStencilView, uint uAVStartSlot, uint numUAVs, ref ID3D11UnorderedAccessView* ppUnorderedAccessViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DepthStencilView** pppDepthStencilView = &ppDepthStencilView)
			{
				fixed (ID3D11UnorderedAccessView** pppUnorderedAccessViews = &ppUnorderedAccessViews)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView**, ID3D11DepthStencilView**, uint, uint, ID3D11UnorderedAccessView**, void>)(LpVtbl[87]))(ptr, numRTVs, ppRenderTargetViews, (ID3D11DepthStencilView**)pppDepthStencilView, uAVStartSlot, numUAVs, (ID3D11UnorderedAccessView**)pppUnorderedAccessViews);
				}
			}
		}

		public readonly unsafe void OMGetRenderTargetsAndUnorderedAccessViews(uint numRTVs, ref ID3D11RenderTargetView* ppRenderTargetViews, ref ID3D11DepthStencilView* ppDepthStencilView, uint uAVStartSlot, uint numUAVs, ref ID3D11UnorderedAccessView* ppUnorderedAccessViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView** pppRenderTargetViews = &ppRenderTargetViews)
			{
				fixed (ID3D11DepthStencilView** pppDepthStencilView = &ppDepthStencilView)
				{
					fixed (ID3D11UnorderedAccessView** pppUnorderedAccessViews = &ppUnorderedAccessViews)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11RenderTargetView**, ID3D11DepthStencilView**, uint, uint, ID3D11UnorderedAccessView**, void>)(LpVtbl[87]))(ptr, numRTVs, (ID3D11RenderTargetView**)pppRenderTargetViews, (ID3D11DepthStencilView**)pppDepthStencilView, uAVStartSlot, numUAVs, (ID3D11UnorderedAccessView**)pppUnorderedAccessViews);
					}
				}
			}
		}

		public readonly unsafe void OMGetBlendState(ID3D11BlendState** ppBlendState, float* blendFactor, uint* pSampleMask)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11BlendState**, float*, uint*, void>)(LpVtbl[88]))(ptr, ppBlendState, blendFactor, pSampleMask);
		}

		public readonly unsafe void OMGetBlendState(ref ID3D11BlendState* ppBlendState, float* blendFactor, uint* pSampleMask)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11BlendState** pppBlendState = &ppBlendState)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11BlendState**, float*, uint*, void>)(LpVtbl[88]))(ptr, (ID3D11BlendState**)pppBlendState, blendFactor, pSampleMask);
			}
		}

		public readonly unsafe void OMGetBlendState(ID3D11BlendState** ppBlendState, ref float blendFactor, uint* pSampleMask)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* pblendFactor = &blendFactor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11BlendState**, float*, uint*, void>)(LpVtbl[88]))(ptr, ppBlendState, (float*)pblendFactor, pSampleMask);
			}
		}

		public readonly unsafe void OMGetBlendState(ref ID3D11BlendState* ppBlendState, ref float blendFactor, uint* pSampleMask)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11BlendState** pppBlendState = &ppBlendState)
			{
				fixed (float* pblendFactor = &blendFactor)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11BlendState**, float*, uint*, void>)(LpVtbl[88]))(ptr, (ID3D11BlendState**)pppBlendState, (float*)pblendFactor, pSampleMask);
				}
			}
		}

		public readonly unsafe void OMGetBlendState(ID3D11BlendState** ppBlendState, float* blendFactor, ref uint pSampleMask)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSampleMask = &pSampleMask)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11BlendState**, float*, uint*, void>)(LpVtbl[88]))(ptr, ppBlendState, blendFactor, (uint*)ppSampleMask);
			}
		}

		public readonly unsafe void OMGetBlendState(ref ID3D11BlendState* ppBlendState, float* blendFactor, ref uint pSampleMask)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11BlendState** pppBlendState = &ppBlendState)
			{
				fixed (uint* ppSampleMask = &pSampleMask)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11BlendState**, float*, uint*, void>)(LpVtbl[88]))(ptr, (ID3D11BlendState**)pppBlendState, blendFactor, (uint*)ppSampleMask);
				}
			}
		}

		public readonly unsafe void OMGetBlendState(ID3D11BlendState** ppBlendState, ref float blendFactor, ref uint pSampleMask)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* pblendFactor = &blendFactor)
			{
				fixed (uint* ppSampleMask = &pSampleMask)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11BlendState**, float*, uint*, void>)(LpVtbl[88]))(ptr, ppBlendState, (float*)pblendFactor, (uint*)ppSampleMask);
				}
			}
		}

		public readonly unsafe void OMGetBlendState(ref ID3D11BlendState* ppBlendState, ref float blendFactor, ref uint pSampleMask)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11BlendState** pppBlendState = &ppBlendState)
			{
				fixed (float* pblendFactor = &blendFactor)
				{
					fixed (uint* ppSampleMask = &pSampleMask)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11BlendState**, float*, uint*, void>)(LpVtbl[88]))(ptr, (ID3D11BlendState**)pppBlendState, (float*)pblendFactor, (uint*)ppSampleMask);
					}
				}
			}
		}

		public readonly unsafe void OMGetDepthStencilState(ID3D11DepthStencilState** ppDepthStencilState, uint* pStencilRef)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11DepthStencilState**, uint*, void>)(LpVtbl[89]))(ptr, ppDepthStencilState, pStencilRef);
		}

		public readonly unsafe void OMGetDepthStencilState(ref ID3D11DepthStencilState* ppDepthStencilState, uint* pStencilRef)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DepthStencilState** pppDepthStencilState = &ppDepthStencilState)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11DepthStencilState**, uint*, void>)(LpVtbl[89]))(ptr, (ID3D11DepthStencilState**)pppDepthStencilState, pStencilRef);
			}
		}

		public readonly unsafe void OMGetDepthStencilState(ID3D11DepthStencilState** ppDepthStencilState, ref uint pStencilRef)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppStencilRef = &pStencilRef)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11DepthStencilState**, uint*, void>)(LpVtbl[89]))(ptr, ppDepthStencilState, (uint*)ppStencilRef);
			}
		}

		public readonly unsafe void OMGetDepthStencilState(ref ID3D11DepthStencilState* ppDepthStencilState, ref uint pStencilRef)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DepthStencilState** pppDepthStencilState = &ppDepthStencilState)
			{
				fixed (uint* ppStencilRef = &pStencilRef)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11DepthStencilState**, uint*, void>)(LpVtbl[89]))(ptr, (ID3D11DepthStencilState**)pppDepthStencilState, (uint*)ppStencilRef);
				}
			}
		}

		public readonly unsafe void SOGetTargets(uint numBuffers, ID3D11Buffer** ppSOTargets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11Buffer**, void>)(LpVtbl[90]))(ptr, numBuffers, ppSOTargets);
		}

		public readonly unsafe void SOGetTargets(uint numBuffers, ref ID3D11Buffer* ppSOTargets)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppSOTargets = &ppSOTargets)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, ID3D11Buffer**, void>)(LpVtbl[90]))(ptr, numBuffers, (ID3D11Buffer**)pppSOTargets);
			}
		}

		public readonly unsafe void RSGetState(ID3D11RasterizerState** ppRasterizerState)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11RasterizerState**, void>)(LpVtbl[91]))(ptr, ppRasterizerState);
		}

		public readonly unsafe void RSGetState(ref ID3D11RasterizerState* ppRasterizerState)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RasterizerState** pppRasterizerState = &ppRasterizerState)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11RasterizerState**, void>)(LpVtbl[91]))(ptr, (ID3D11RasterizerState**)pppRasterizerState);
			}
		}

		public readonly unsafe void RSGetViewports(uint* pNumViewports, D3D11Viewport* pViewports)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint*, D3D11Viewport*, void>)(LpVtbl[92]))(ptr, pNumViewports, pViewports);
		}

		public readonly unsafe void RSGetViewports(ref uint pNumViewports, D3D11Viewport* pViewports)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumViewports = &pNumViewports)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint*, D3D11Viewport*, void>)(LpVtbl[92]))(ptr, (uint*)ppNumViewports, pViewports);
			}
		}

		public readonly unsafe void RSGetViewports(uint* pNumViewports, ref D3D11Viewport pViewports)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Viewport* ppViewports = &pViewports)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint*, D3D11Viewport*, void>)(LpVtbl[92]))(ptr, pNumViewports, (D3D11Viewport*)ppViewports);
			}
		}

		public readonly unsafe void RSGetViewports(ref uint pNumViewports, ref D3D11Viewport pViewports)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumViewports = &pNumViewports)
			{
				fixed (D3D11Viewport* ppViewports = &pViewports)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint*, D3D11Viewport*, void>)(LpVtbl[92]))(ptr, (uint*)ppNumViewports, (D3D11Viewport*)ppViewports);
				}
			}
		}

		public readonly unsafe void RSGetScissorRects(uint* pNumRects, Rect32* pRects)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint*, Rect32*, void>)(LpVtbl[93]))(ptr, pNumRects, pRects);
		}

		public readonly unsafe void RSGetScissorRects(ref uint pNumRects, Rect32* pRects)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumRects = &pNumRects)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint*, Rect32*, void>)(LpVtbl[93]))(ptr, (uint*)ppNumRects, pRects);
			}
		}

		public readonly unsafe void RSGetScissorRects(uint* pNumRects, ref Rect32 pRects)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppRects = &pRects)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint*, Rect32*, void>)(LpVtbl[93]))(ptr, pNumRects, (Rect32*)ppRects);
			}
		}

		public readonly unsafe void RSGetScissorRects(ref uint pNumRects, ref Rect32 pRects)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumRects = &pNumRects)
			{
				fixed (Rect32* ppRects = &pRects)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint*, Rect32*, void>)(LpVtbl[93]))(ptr, (uint*)ppNumRects, (Rect32*)ppRects);
				}
			}
		}

		public readonly unsafe void HSGetShaderResources(uint startSlot, uint numViews, ID3D11ShaderResourceView** ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView**, void>)(LpVtbl[94]))(ptr, startSlot, numViews, ppShaderResourceViews);
		}

		public readonly unsafe void HSGetShaderResources(uint startSlot, uint numViews, ref ID3D11ShaderResourceView* ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderResourceView** pppShaderResourceViews = &ppShaderResourceViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView**, void>)(LpVtbl[94]))(ptr, startSlot, numViews, (ID3D11ShaderResourceView**)pppShaderResourceViews);
			}
		}

		public readonly unsafe void HSGetShader(ID3D11HullShader** ppHullShader, ID3D11ClassInstance** ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11HullShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[95]))(ptr, ppHullShader, ppClassInstances, pNumClassInstances);
		}

		public readonly unsafe void HSGetShader(ref ID3D11HullShader* ppHullShader, ID3D11ClassInstance** ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11HullShader** pppHullShader = &ppHullShader)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11HullShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[95]))(ptr, (ID3D11HullShader**)pppHullShader, ppClassInstances, pNumClassInstances);
			}
		}

		public readonly unsafe void HSGetShader(ID3D11HullShader** ppHullShader, ref ID3D11ClassInstance* ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11HullShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[95]))(ptr, ppHullShader, (ID3D11ClassInstance**)pppClassInstances, pNumClassInstances);
			}
		}

		public readonly unsafe void HSGetShader(ref ID3D11HullShader* ppHullShader, ref ID3D11ClassInstance* ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11HullShader** pppHullShader = &ppHullShader)
			{
				fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11HullShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[95]))(ptr, (ID3D11HullShader**)pppHullShader, (ID3D11ClassInstance**)pppClassInstances, pNumClassInstances);
				}
			}
		}

		public readonly unsafe void HSGetShader(ID3D11HullShader** ppHullShader, ID3D11ClassInstance** ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumClassInstances = &pNumClassInstances)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11HullShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[95]))(ptr, ppHullShader, ppClassInstances, (uint*)ppNumClassInstances);
			}
		}

		public readonly unsafe void HSGetShader(ref ID3D11HullShader* ppHullShader, ID3D11ClassInstance** ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11HullShader** pppHullShader = &ppHullShader)
			{
				fixed (uint* ppNumClassInstances = &pNumClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11HullShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[95]))(ptr, (ID3D11HullShader**)pppHullShader, ppClassInstances, (uint*)ppNumClassInstances);
				}
			}
		}

		public readonly unsafe void HSGetShader(ID3D11HullShader** ppHullShader, ref ID3D11ClassInstance* ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
			{
				fixed (uint* ppNumClassInstances = &pNumClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11HullShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[95]))(ptr, ppHullShader, (ID3D11ClassInstance**)pppClassInstances, (uint*)ppNumClassInstances);
				}
			}
		}

		public readonly unsafe void HSGetShader(ref ID3D11HullShader* ppHullShader, ref ID3D11ClassInstance* ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11HullShader** pppHullShader = &ppHullShader)
			{
				fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
				{
					fixed (uint* ppNumClassInstances = &pNumClassInstances)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11HullShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[95]))(ptr, (ID3D11HullShader**)pppHullShader, (ID3D11ClassInstance**)pppClassInstances, (uint*)ppNumClassInstances);
					}
				}
			}
		}

		public readonly unsafe void HSGetSamplers(uint startSlot, uint numSamplers, ID3D11SamplerState** ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState**, void>)(LpVtbl[96]))(ptr, startSlot, numSamplers, ppSamplers);
		}

		public readonly unsafe void HSGetSamplers(uint startSlot, uint numSamplers, ref ID3D11SamplerState* ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11SamplerState** pppSamplers = &ppSamplers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState**, void>)(LpVtbl[96]))(ptr, startSlot, numSamplers, (ID3D11SamplerState**)pppSamplers);
			}
		}

		public readonly unsafe void HSGetConstantBuffers(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer**, void>)(LpVtbl[97]))(ptr, startSlot, numBuffers, ppConstantBuffers);
		}

		public readonly unsafe void HSGetConstantBuffers(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer**, void>)(LpVtbl[97]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers);
			}
		}

		public readonly unsafe void DSGetShaderResources(uint startSlot, uint numViews, ID3D11ShaderResourceView** ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView**, void>)(LpVtbl[98]))(ptr, startSlot, numViews, ppShaderResourceViews);
		}

		public readonly unsafe void DSGetShaderResources(uint startSlot, uint numViews, ref ID3D11ShaderResourceView* ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderResourceView** pppShaderResourceViews = &ppShaderResourceViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView**, void>)(LpVtbl[98]))(ptr, startSlot, numViews, (ID3D11ShaderResourceView**)pppShaderResourceViews);
			}
		}

		public readonly unsafe void DSGetShader(ID3D11DomainShader** ppDomainShader, ID3D11ClassInstance** ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11DomainShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[99]))(ptr, ppDomainShader, ppClassInstances, pNumClassInstances);
		}

		public readonly unsafe void DSGetShader(ref ID3D11DomainShader* ppDomainShader, ID3D11ClassInstance** ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DomainShader** pppDomainShader = &ppDomainShader)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11DomainShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[99]))(ptr, (ID3D11DomainShader**)pppDomainShader, ppClassInstances, pNumClassInstances);
			}
		}

		public readonly unsafe void DSGetShader(ID3D11DomainShader** ppDomainShader, ref ID3D11ClassInstance* ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11DomainShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[99]))(ptr, ppDomainShader, (ID3D11ClassInstance**)pppClassInstances, pNumClassInstances);
			}
		}

		public readonly unsafe void DSGetShader(ref ID3D11DomainShader* ppDomainShader, ref ID3D11ClassInstance* ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DomainShader** pppDomainShader = &ppDomainShader)
			{
				fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11DomainShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[99]))(ptr, (ID3D11DomainShader**)pppDomainShader, (ID3D11ClassInstance**)pppClassInstances, pNumClassInstances);
				}
			}
		}

		public readonly unsafe void DSGetShader(ID3D11DomainShader** ppDomainShader, ID3D11ClassInstance** ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumClassInstances = &pNumClassInstances)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11DomainShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[99]))(ptr, ppDomainShader, ppClassInstances, (uint*)ppNumClassInstances);
			}
		}

		public readonly unsafe void DSGetShader(ref ID3D11DomainShader* ppDomainShader, ID3D11ClassInstance** ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DomainShader** pppDomainShader = &ppDomainShader)
			{
				fixed (uint* ppNumClassInstances = &pNumClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11DomainShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[99]))(ptr, (ID3D11DomainShader**)pppDomainShader, ppClassInstances, (uint*)ppNumClassInstances);
				}
			}
		}

		public readonly unsafe void DSGetShader(ID3D11DomainShader** ppDomainShader, ref ID3D11ClassInstance* ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
			{
				fixed (uint* ppNumClassInstances = &pNumClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11DomainShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[99]))(ptr, ppDomainShader, (ID3D11ClassInstance**)pppClassInstances, (uint*)ppNumClassInstances);
				}
			}
		}

		public readonly unsafe void DSGetShader(ref ID3D11DomainShader* ppDomainShader, ref ID3D11ClassInstance* ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DomainShader** pppDomainShader = &ppDomainShader)
			{
				fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
				{
					fixed (uint* ppNumClassInstances = &pNumClassInstances)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11DomainShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[99]))(ptr, (ID3D11DomainShader**)pppDomainShader, (ID3D11ClassInstance**)pppClassInstances, (uint*)ppNumClassInstances);
					}
				}
			}
		}

		public readonly unsafe void DSGetSamplers(uint startSlot, uint numSamplers, ID3D11SamplerState** ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState**, void>)(LpVtbl[100]))(ptr, startSlot, numSamplers, ppSamplers);
		}

		public readonly unsafe void DSGetSamplers(uint startSlot, uint numSamplers, ref ID3D11SamplerState* ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11SamplerState** pppSamplers = &ppSamplers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState**, void>)(LpVtbl[100]))(ptr, startSlot, numSamplers, (ID3D11SamplerState**)pppSamplers);
			}
		}

		public readonly unsafe void DSGetConstantBuffers(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer**, void>)(LpVtbl[101]))(ptr, startSlot, numBuffers, ppConstantBuffers);
		}

		public readonly unsafe void DSGetConstantBuffers(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer**, void>)(LpVtbl[101]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers);
			}
		}

		public readonly unsafe void CSGetShaderResources(uint startSlot, uint numViews, ID3D11ShaderResourceView** ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView**, void>)(LpVtbl[102]))(ptr, startSlot, numViews, ppShaderResourceViews);
		}

		public readonly unsafe void CSGetShaderResources(uint startSlot, uint numViews, ref ID3D11ShaderResourceView* ppShaderResourceViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderResourceView** pppShaderResourceViews = &ppShaderResourceViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11ShaderResourceView**, void>)(LpVtbl[102]))(ptr, startSlot, numViews, (ID3D11ShaderResourceView**)pppShaderResourceViews);
			}
		}

		public readonly unsafe void CSGetUnorderedAccessViews(uint startSlot, uint numUAVs, ID3D11UnorderedAccessView** ppUnorderedAccessViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11UnorderedAccessView**, void>)(LpVtbl[103]))(ptr, startSlot, numUAVs, ppUnorderedAccessViews);
		}

		public readonly unsafe void CSGetUnorderedAccessViews(uint startSlot, uint numUAVs, ref ID3D11UnorderedAccessView* ppUnorderedAccessViews)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11UnorderedAccessView** pppUnorderedAccessViews = &ppUnorderedAccessViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11UnorderedAccessView**, void>)(LpVtbl[103]))(ptr, startSlot, numUAVs, (ID3D11UnorderedAccessView**)pppUnorderedAccessViews);
			}
		}

		public readonly unsafe void CSGetShader(ID3D11ComputeShader** ppComputeShader, ID3D11ClassInstance** ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11ComputeShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[104]))(ptr, ppComputeShader, ppClassInstances, pNumClassInstances);
		}

		public readonly unsafe void CSGetShader(ref ID3D11ComputeShader* ppComputeShader, ID3D11ClassInstance** ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ComputeShader** pppComputeShader = &ppComputeShader)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11ComputeShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[104]))(ptr, (ID3D11ComputeShader**)pppComputeShader, ppClassInstances, pNumClassInstances);
			}
		}

		public readonly unsafe void CSGetShader(ID3D11ComputeShader** ppComputeShader, ref ID3D11ClassInstance* ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11ComputeShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[104]))(ptr, ppComputeShader, (ID3D11ClassInstance**)pppClassInstances, pNumClassInstances);
			}
		}

		public readonly unsafe void CSGetShader(ref ID3D11ComputeShader* ppComputeShader, ref ID3D11ClassInstance* ppClassInstances, uint* pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ComputeShader** pppComputeShader = &ppComputeShader)
			{
				fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11ComputeShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[104]))(ptr, (ID3D11ComputeShader**)pppComputeShader, (ID3D11ClassInstance**)pppClassInstances, pNumClassInstances);
				}
			}
		}

		public readonly unsafe void CSGetShader(ID3D11ComputeShader** ppComputeShader, ID3D11ClassInstance** ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumClassInstances = &pNumClassInstances)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11ComputeShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[104]))(ptr, ppComputeShader, ppClassInstances, (uint*)ppNumClassInstances);
			}
		}

		public readonly unsafe void CSGetShader(ref ID3D11ComputeShader* ppComputeShader, ID3D11ClassInstance** ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ComputeShader** pppComputeShader = &ppComputeShader)
			{
				fixed (uint* ppNumClassInstances = &pNumClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11ComputeShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[104]))(ptr, (ID3D11ComputeShader**)pppComputeShader, ppClassInstances, (uint*)ppNumClassInstances);
				}
			}
		}

		public readonly unsafe void CSGetShader(ID3D11ComputeShader** ppComputeShader, ref ID3D11ClassInstance* ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
			{
				fixed (uint* ppNumClassInstances = &pNumClassInstances)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11ComputeShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[104]))(ptr, ppComputeShader, (ID3D11ClassInstance**)pppClassInstances, (uint*)ppNumClassInstances);
				}
			}
		}

		public readonly unsafe void CSGetShader(ref ID3D11ComputeShader* ppComputeShader, ref ID3D11ClassInstance* ppClassInstances, ref uint pNumClassInstances)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ComputeShader** pppComputeShader = &ppComputeShader)
			{
				fixed (ID3D11ClassInstance** pppClassInstances = &ppClassInstances)
				{
					fixed (uint* ppNumClassInstances = &pNumClassInstances)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, ID3D11ComputeShader**, ID3D11ClassInstance**, uint*, void>)(LpVtbl[104]))(ptr, (ID3D11ComputeShader**)pppComputeShader, (ID3D11ClassInstance**)pppClassInstances, (uint*)ppNumClassInstances);
					}
				}
			}
		}

		public readonly unsafe void CSGetSamplers(uint startSlot, uint numSamplers, ID3D11SamplerState** ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState**, void>)(LpVtbl[105]))(ptr, startSlot, numSamplers, ppSamplers);
		}

		public readonly unsafe void CSGetSamplers(uint startSlot, uint numSamplers, ref ID3D11SamplerState* ppSamplers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11SamplerState** pppSamplers = &ppSamplers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11SamplerState**, void>)(LpVtbl[105]))(ptr, startSlot, numSamplers, (ID3D11SamplerState**)pppSamplers);
			}
		}

		public readonly unsafe void CSGetConstantBuffers(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer**, void>)(LpVtbl[106]))(ptr, startSlot, numBuffers, ppConstantBuffers);
		}

		public readonly unsafe void CSGetConstantBuffers(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, ID3D11Buffer**, void>)(LpVtbl[106]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers);
			}
		}

		public readonly unsafe void ClearState()
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, void>)(LpVtbl[107]))(ptr);
		}

		public readonly unsafe void Flush()
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, void>)(LpVtbl[108]))(ptr);
		}

		public readonly unsafe D3D11DeviceContextType GetType()
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D11DeviceContextType ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, D3D11DeviceContextType>)(LpVtbl[109]))(ptr);
			return ret;
		}

		public readonly unsafe uint GetContextFlags()
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, uint>)(LpVtbl[110]))(ptr);
			return ret;
		}

		public readonly unsafe HResult FinishCommandList(int restoreDeferredContextState, ID3D11CommandList** ppCommandList)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, int, ID3D11CommandList**, HResult>)(LpVtbl[111]))(ptr, restoreDeferredContextState, ppCommandList);
			return ret;
		}

		public readonly unsafe HResult FinishCommandList(int restoreDeferredContextState, ref ID3D11CommandList* ppCommandList)
		{
			ID3D11DeviceContext* ptr = (ID3D11DeviceContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CommandList** pppCommandList = &ppCommandList)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext*, int, ID3D11CommandList**, HResult>)(LpVtbl[111]))(ptr, restoreDeferredContextState, (ID3D11CommandList**)pppCommandList);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11DeviceContext value)
		{
			return Unsafe.As<ID3D11DeviceContext, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11DeviceContext value)
		{
			return Unsafe.As<ID3D11DeviceContext, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_MAPPED_SUBRESOURCE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11MappedSubresource
	{
		[NativeName("pData")]
		public unsafe void* PData;
		[NativeName("RowPitch")]
		public uint RowPitch;
		[NativeName("DepthPitch")]
		public uint DepthPitch;


	}

	[NativeName("D3D11_VIEWPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Viewport
	{
		[NativeName("TopLeftX")]
		public float TopLeftX;
		[NativeName("TopLeftY")]
		public float TopLeftY;
		[NativeName("Width")]
		public float Width;
		[NativeName("Height")]
		public float Height;
		[NativeName("MinDepth")]
		public float MinDepth;
		[NativeName("MaxDepth")]
		public float MaxDepth;


	}

	[NativeName("D3D11_BOX")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Box
	{
		[NativeName("left")]
		public uint Left;
		[NativeName("top")]
		public uint Top;
		[NativeName("front")]
		public uint Front;
		[NativeName("right")]
		public uint Right;
		[NativeName("bottom")]
		public uint Bottom;
		[NativeName("back")]
		public uint Back;


	}

	[Guid("a24bc4d1-769e-43f7-8013-98ff566c18e2")]
	[NativeName("ID3D11CommandList")]
	public partial struct ID3D11CommandList : IComObject, IComObject<ID3D11CommandList>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("a24bc4d1-769e-43f7-8013-98ff566c18e2");

		public unsafe ID3D11CommandList (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11CommandList value)
		{
			return Unsafe.As<ID3D11CommandList, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11CommandList value)
		{
			return Unsafe.As<ID3D11CommandList, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_COUNTER_INFO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11CounterInfo
	{
		[NativeName("LastDeviceDependentCounter")]
		public D3D11Counter LastDeviceDependentCounter;
		[NativeName("NumSimultaneousCounters")]
		public uint NumSimultaneousCounters;
		[NativeName("NumDetectableParallelUnits")]
		public byte NumDetectableParallelUnits;


	}

	[Guid("3c9c5b51-995d-48d1-9b8d-fa5caeded65c")]
	[NativeName("ID3D11VideoDecoder")]
	public partial struct ID3D11VideoDecoder : IComObject, IComObject<ID3D11VideoDecoder>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("3c9c5b51-995d-48d1-9b8d-fa5caeded65c");

		public unsafe ID3D11VideoDecoder (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetCreationParameters(D3D11VideoDecoderDesc* pVideoDesc, D3D11VideoDecoderConfig* pConfig)
		{
			ID3D11VideoDecoder* ptr = (ID3D11VideoDecoder*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDecoder*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, HResult>)(LpVtbl[4]))(ptr, pVideoDesc, pConfig);
			return ret;
		}

		public readonly unsafe HResult GetCreationParameters(ref D3D11VideoDecoderDesc pVideoDesc, D3D11VideoDecoderConfig* pConfig)
		{
			ID3D11VideoDecoder* ptr = (ID3D11VideoDecoder*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppVideoDesc = &pVideoDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDecoder*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, HResult>)(LpVtbl[4]))(ptr, (D3D11VideoDecoderDesc*)ppVideoDesc, pConfig);
				return ret;
			}
		}

		public readonly unsafe HResult GetCreationParameters(D3D11VideoDecoderDesc* pVideoDesc, ref D3D11VideoDecoderConfig pConfig)
		{
			ID3D11VideoDecoder* ptr = (ID3D11VideoDecoder*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppConfig = &pConfig)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDecoder*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, HResult>)(LpVtbl[4]))(ptr, pVideoDesc, (D3D11VideoDecoderConfig*)ppConfig);
				return ret;
			}
		}

		public readonly unsafe HResult GetCreationParameters(ref D3D11VideoDecoderDesc pVideoDesc, ref D3D11VideoDecoderConfig pConfig)
		{
			ID3D11VideoDecoder* ptr = (ID3D11VideoDecoder*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppVideoDesc = &pVideoDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppConfig = &pConfig)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDecoder*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, HResult>)(LpVtbl[4]))(ptr, (D3D11VideoDecoderDesc*)ppVideoDesc, (D3D11VideoDecoderConfig*)ppConfig);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetDriverHandle(nint* pDriverHandle)
		{
			ID3D11VideoDecoder* ptr = (ID3D11VideoDecoder*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDecoder*, nint*, HResult>)(LpVtbl[5]))(ptr, pDriverHandle);
			return ret;
		}

		public readonly unsafe HResult GetDriverHandle(ref nint pDriverHandle)
		{
			ID3D11VideoDecoder* ptr = (ID3D11VideoDecoder*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nint* ppDriverHandle = &pDriverHandle)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDecoder*, nint*, HResult>)(LpVtbl[5]))(ptr, (nint*)ppDriverHandle);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11VideoDecoder value)
		{
			return Unsafe.As<ID3D11VideoDecoder, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11VideoDecoder value)
		{
			return Unsafe.As<ID3D11VideoDecoder, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_VIDEO_DECODER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoDecoderDesc
	{
		[NativeName("Guid")]
		public Guid Guid;
		[NativeName("SampleWidth")]
		public uint SampleWidth;
		[NativeName("SampleHeight")]
		public uint SampleHeight;
		[NativeName("OutputFormat")]
		public DxgiFormat OutputFormat;


	}

	[NativeName("D3D11_VIDEO_DECODER_CONFIG")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoDecoderConfig
	{
		[NativeName("guidConfigBitstreamEncryption")]
		public Guid GuidConfigBitstreamEncryption;
		[NativeName("guidConfigMBcontrolEncryption")]
		public Guid GuidConfigMBcontrolEncryption;
		[NativeName("guidConfigResidDiffEncryption")]
		public Guid GuidConfigResidDiffEncryption;
		[NativeName("ConfigBitstreamRaw")]
		public uint ConfigBitstreamRaw;
		[NativeName("ConfigMBcontrolRasterOrder")]
		public uint ConfigMBcontrolRasterOrder;
		[NativeName("ConfigResidDiffHost")]
		public uint ConfigResidDiffHost;
		[NativeName("ConfigSpatialResid8")]
		public uint ConfigSpatialResid8;
		[NativeName("ConfigResid8Subtraction")]
		public uint ConfigResid8Subtraction;
		[NativeName("ConfigSpatialHost8or9Clipping")]
		public uint ConfigSpatialHost8or9Clipping;
		[NativeName("ConfigSpatialResidInterleaved")]
		public uint ConfigSpatialResidInterleaved;
		[NativeName("ConfigIntraResidUnsigned")]
		public uint ConfigIntraResidUnsigned;
		[NativeName("ConfigResidDiffAccelerator")]
		public uint ConfigResidDiffAccelerator;
		[NativeName("ConfigHostInverseScan")]
		public uint ConfigHostInverseScan;
		[NativeName("ConfigSpecificIDCT")]
		public uint ConfigSpecificIDCT;
		[NativeName("Config4GroupedCoefs")]
		public uint Config4GroupedCoefs;
		[NativeName("ConfigMinRenderTargetBuffCount")]
		public ushort ConfigMinRenderTargetBuffCount;
		[NativeName("ConfigDecoderSpecific")]
		public ushort ConfigDecoderSpecific;


	}

	[Guid("31627037-53ab-4200-9061-05faa9ab45f9")]
	[NativeName("ID3D11VideoProcessorEnumerator")]
	public partial struct ID3D11VideoProcessorEnumerator : IComObject, IComObject<ID3D11VideoProcessorEnumerator>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("31627037-53ab-4200-9061-05faa9ab45f9");

		public unsafe ID3D11VideoProcessorEnumerator (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetVideoProcessorContentDesc(D3D11VideoProcessorContentDesc* pContentDesc)
		{
			ID3D11VideoProcessorEnumerator* ptr = (ID3D11VideoProcessorEnumerator*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorContentDesc*, HResult>)(LpVtbl[4]))(ptr, pContentDesc);
			return ret;
		}

		public readonly unsafe HResult GetVideoProcessorContentDesc(ref D3D11VideoProcessorContentDesc pContentDesc)
		{
			ID3D11VideoProcessorEnumerator* ptr = (ID3D11VideoProcessorEnumerator*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorContentDesc* ppContentDesc = &pContentDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorContentDesc*, HResult>)(LpVtbl[4]))(ptr, (D3D11VideoProcessorContentDesc*)ppContentDesc);
				return ret;
			}
		}

		public readonly unsafe HResult CheckVideoProcessorFormat(DxgiFormat format, uint* pFlags)
		{
			ID3D11VideoProcessorEnumerator* ptr = (ID3D11VideoProcessorEnumerator*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, DxgiFormat, uint*, HResult>)(LpVtbl[5]))(ptr, format, pFlags);
			return ret;
		}

		public readonly unsafe HResult CheckVideoProcessorFormat(DxgiFormat format, ref uint pFlags)
		{
			ID3D11VideoProcessorEnumerator* ptr = (ID3D11VideoProcessorEnumerator*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFlags = &pFlags)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, DxgiFormat, uint*, HResult>)(LpVtbl[5]))(ptr, format, (uint*)ppFlags);
				return ret;
			}
		}

		public readonly unsafe HResult GetVideoProcessorCaps(D3D11VideoProcessorCaps* pCaps)
		{
			ID3D11VideoProcessorEnumerator* ptr = (ID3D11VideoProcessorEnumerator*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorCaps*, HResult>)(LpVtbl[6]))(ptr, pCaps);
			return ret;
		}

		public readonly unsafe HResult GetVideoProcessorCaps(ref D3D11VideoProcessorCaps pCaps)
		{
			ID3D11VideoProcessorEnumerator* ptr = (ID3D11VideoProcessorEnumerator*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorCaps* ppCaps = &pCaps)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorCaps*, HResult>)(LpVtbl[6]))(ptr, (D3D11VideoProcessorCaps*)ppCaps);
				return ret;
			}
		}

		public readonly unsafe HResult GetVideoProcessorRateConversionCaps(uint typeIndex, D3D11VideoProcessorRateConversionCaps* pCaps)
		{
			ID3D11VideoProcessorEnumerator* ptr = (ID3D11VideoProcessorEnumerator*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, uint, D3D11VideoProcessorRateConversionCaps*, HResult>)(LpVtbl[7]))(ptr, typeIndex, pCaps);
			return ret;
		}

		public readonly unsafe HResult GetVideoProcessorRateConversionCaps(uint typeIndex, ref D3D11VideoProcessorRateConversionCaps pCaps)
		{
			ID3D11VideoProcessorEnumerator* ptr = (ID3D11VideoProcessorEnumerator*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorRateConversionCaps* ppCaps = &pCaps)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, uint, D3D11VideoProcessorRateConversionCaps*, HResult>)(LpVtbl[7]))(ptr, typeIndex, (D3D11VideoProcessorRateConversionCaps*)ppCaps);
				return ret;
			}
		}

		public readonly unsafe HResult GetVideoProcessorCustomRate(uint typeIndex, uint customRateIndex, D3D11VideoProcessorCustomRate* pRate)
		{
			ID3D11VideoProcessorEnumerator* ptr = (ID3D11VideoProcessorEnumerator*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, uint, uint, D3D11VideoProcessorCustomRate*, HResult>)(LpVtbl[8]))(ptr, typeIndex, customRateIndex, pRate);
			return ret;
		}

		public readonly unsafe HResult GetVideoProcessorCustomRate(uint typeIndex, uint customRateIndex, ref D3D11VideoProcessorCustomRate pRate)
		{
			ID3D11VideoProcessorEnumerator* ptr = (ID3D11VideoProcessorEnumerator*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorCustomRate* ppRate = &pRate)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, uint, uint, D3D11VideoProcessorCustomRate*, HResult>)(LpVtbl[8]))(ptr, typeIndex, customRateIndex, (D3D11VideoProcessorCustomRate*)ppRate);
				return ret;
			}
		}

		public readonly unsafe HResult GetVideoProcessorFilterRange(D3D11VideoProcessorFilter filter, D3D11VideoProcessorFilterRange* pRange)
		{
			ID3D11VideoProcessorEnumerator* ptr = (ID3D11VideoProcessorEnumerator*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorFilter, D3D11VideoProcessorFilterRange*, HResult>)(LpVtbl[9]))(ptr, filter, pRange);
			return ret;
		}

		public readonly unsafe HResult GetVideoProcessorFilterRange(D3D11VideoProcessorFilter filter, ref D3D11VideoProcessorFilterRange pRange)
		{
			ID3D11VideoProcessorEnumerator* ptr = (ID3D11VideoProcessorEnumerator*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorFilterRange* ppRange = &pRange)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorFilter, D3D11VideoProcessorFilterRange*, HResult>)(LpVtbl[9]))(ptr, filter, (D3D11VideoProcessorFilterRange*)ppRange);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11VideoProcessorEnumerator value)
		{
			return Unsafe.As<ID3D11VideoProcessorEnumerator, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11VideoProcessorEnumerator value)
		{
			return Unsafe.As<ID3D11VideoProcessorEnumerator, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_VIDEO_PROCESSOR_CONTENT_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoProcessorContentDesc
	{
		[NativeName("InputFrameFormat")]
		public D3D11VideoFrameFormat InputFrameFormat;
		[NativeName("InputFrameRate")]
		public DxgiRational InputFrameRate;
		[NativeName("InputWidth")]
		public uint InputWidth;
		[NativeName("InputHeight")]
		public uint InputHeight;
		[NativeName("OutputFrameRate")]
		public DxgiRational OutputFrameRate;
		[NativeName("OutputWidth")]
		public uint OutputWidth;
		[NativeName("OutputHeight")]
		public uint OutputHeight;
		[NativeName("Usage")]
		public D3D11VideoUsage Usage;


	}

	[NativeName("D3D11_VIDEO_PROCESSOR_CAPS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoProcessorCaps
	{
		[NativeName("DeviceCaps")]
		public uint DeviceCaps;
		[NativeName("FeatureCaps")]
		public uint FeatureCaps;
		[NativeName("FilterCaps")]
		public uint FilterCaps;
		[NativeName("InputFormatCaps")]
		public uint InputFormatCaps;
		[NativeName("AutoStreamCaps")]
		public uint AutoStreamCaps;
		[NativeName("StereoCaps")]
		public uint StereoCaps;
		[NativeName("RateConversionCapsCount")]
		public uint RateConversionCapsCount;
		[NativeName("MaxInputStreams")]
		public uint MaxInputStreams;
		[NativeName("MaxStreamStates")]
		public uint MaxStreamStates;


	}

	[NativeName("D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoProcessorRateConversionCaps
	{
		[NativeName("PastFrames")]
		public uint PastFrames;
		[NativeName("FutureFrames")]
		public uint FutureFrames;
		[NativeName("ProcessorCaps")]
		public uint ProcessorCaps;
		[NativeName("ITelecineCaps")]
		public uint ITelecineCaps;
		[NativeName("CustomRateCount")]
		public uint CustomRateCount;


	}

	[NativeName("D3D11_VIDEO_PROCESSOR_CUSTOM_RATE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoProcessorCustomRate
	{
		[NativeName("CustomRate")]
		public DxgiRational CustomRate;
		[NativeName("OutputFrames")]
		public uint OutputFrames;
		[NativeName("InputInterlaced")]
		public int InputInterlaced;
		[NativeName("InputFramesOrFields")]
		public uint InputFramesOrFields;


	}

	[NativeName("D3D11_VIDEO_PROCESSOR_FILTER_RANGE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoProcessorFilterRange
	{
		[NativeName("Minimum")]
		public int Minimum;
		[NativeName("Maximum")]
		public int Maximum;
		[NativeName("Default")]
		public int Default;
		[NativeName("Multiplier")]
		public float Multiplier;


	}

	[Guid("1d7b0652-185f-41c6-85ce-0c5be3d4ae6c")]
	[NativeName("ID3D11VideoProcessor")]
	public partial struct ID3D11VideoProcessor : IComObject, IComObject<ID3D11VideoProcessor>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("1d7b0652-185f-41c6-85ce-0c5be3d4ae6c");

		public unsafe ID3D11VideoProcessor (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetContentDesc(D3D11VideoProcessorContentDesc* pDesc)
		{
			ID3D11VideoProcessor* ptr = (ID3D11VideoProcessor*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoProcessor*, D3D11VideoProcessorContentDesc*, void>)(LpVtbl[4]))(ptr, pDesc);
		}

		public readonly unsafe void GetContentDesc(ref D3D11VideoProcessorContentDesc pDesc)
		{
			ID3D11VideoProcessor* ptr = (ID3D11VideoProcessor*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorContentDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoProcessor*, D3D11VideoProcessorContentDesc*, void>)(LpVtbl[4]))(ptr, (D3D11VideoProcessorContentDesc*)ppDesc);
			}
		}

		public readonly unsafe void GetRateConversionCaps(D3D11VideoProcessorRateConversionCaps* pCaps)
		{
			ID3D11VideoProcessor* ptr = (ID3D11VideoProcessor*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoProcessor*, D3D11VideoProcessorRateConversionCaps*, void>)(LpVtbl[5]))(ptr, pCaps);
		}

		public readonly unsafe void GetRateConversionCaps(ref D3D11VideoProcessorRateConversionCaps pCaps)
		{
			ID3D11VideoProcessor* ptr = (ID3D11VideoProcessor*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorRateConversionCaps* ppCaps = &pCaps)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoProcessor*, D3D11VideoProcessorRateConversionCaps*, void>)(LpVtbl[5]))(ptr, (D3D11VideoProcessorRateConversionCaps*)ppCaps);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11VideoProcessor value)
		{
			return Unsafe.As<ID3D11VideoProcessor, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11VideoProcessor value)
		{
			return Unsafe.As<ID3D11VideoProcessor, IUnknown>(ref value);
		}

	}

	[Guid("3015a308-dcbd-47aa-a747-192486d14d4a")]
	[NativeName("ID3D11AuthenticatedChannel")]
	public partial struct ID3D11AuthenticatedChannel : IComObject, IComObject<ID3D11AuthenticatedChannel>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("3015a308-dcbd-47aa-a747-192486d14d4a");

		public unsafe ID3D11AuthenticatedChannel (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetCertificateSize(uint* pCertificateSize)
		{
			ID3D11AuthenticatedChannel* ptr = (ID3D11AuthenticatedChannel*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11AuthenticatedChannel*, uint*, HResult>)(LpVtbl[4]))(ptr, pCertificateSize);
			return ret;
		}

		public readonly unsafe HResult GetCertificateSize(ref uint pCertificateSize)
		{
			ID3D11AuthenticatedChannel* ptr = (ID3D11AuthenticatedChannel*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppCertificateSize = &pCertificateSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11AuthenticatedChannel*, uint*, HResult>)(LpVtbl[4]))(ptr, (uint*)ppCertificateSize);
				return ret;
			}
		}

		public readonly unsafe HResult GetCertificate(uint certificateSize, byte* pCertificate)
		{
			ID3D11AuthenticatedChannel* ptr = (ID3D11AuthenticatedChannel*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11AuthenticatedChannel*, uint, byte*, HResult>)(LpVtbl[5]))(ptr, certificateSize, pCertificate);
			return ret;
		}

		public readonly unsafe HResult GetCertificate(uint certificateSize, ref byte pCertificate)
		{
			ID3D11AuthenticatedChannel* ptr = (ID3D11AuthenticatedChannel*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte* ppCertificate = &pCertificate)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11AuthenticatedChannel*, uint, byte*, HResult>)(LpVtbl[5]))(ptr, certificateSize, (byte*)ppCertificate);
				return ret;
			}
		}

		public readonly unsafe void GetChannelHandle(nint* pChannelHandle)
		{
			ID3D11AuthenticatedChannel* ptr = (ID3D11AuthenticatedChannel*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11AuthenticatedChannel*, nint*, void>)(LpVtbl[6]))(ptr, pChannelHandle);
		}

		public readonly unsafe void GetChannelHandle(ref nint pChannelHandle)
		{
			ID3D11AuthenticatedChannel* ptr = (ID3D11AuthenticatedChannel*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nint* ppChannelHandle = &pChannelHandle)
			{
				((delegate* unmanaged[Stdcall]<ID3D11AuthenticatedChannel*, nint*, void>)(LpVtbl[6]))(ptr, (nint*)ppChannelHandle);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11AuthenticatedChannel value)
		{
			return Unsafe.As<ID3D11AuthenticatedChannel, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11AuthenticatedChannel value)
		{
			return Unsafe.As<ID3D11AuthenticatedChannel, IUnknown>(ref value);
		}

	}

	[Guid("9b32f9ad-bdcc-40a6-a39d-d5c865845720")]
	[NativeName("ID3D11CryptoSession")]
	public partial struct ID3D11CryptoSession : IComObject, IComObject<ID3D11CryptoSession>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("9b32f9ad-bdcc-40a6-a39d-d5c865845720");

		public unsafe ID3D11CryptoSession (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetCryptoType(Guid* pCryptoType)
		{
			ID3D11CryptoSession* ptr = (ID3D11CryptoSession*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11CryptoSession*, Guid*, void>)(LpVtbl[4]))(ptr, pCryptoType);
		}

		public readonly unsafe void GetCryptoType(ref Guid pCryptoType)
		{
			ID3D11CryptoSession* ptr = (ID3D11CryptoSession*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				((delegate* unmanaged[Stdcall]<ID3D11CryptoSession*, Guid*, void>)(LpVtbl[4]))(ptr, (Guid*)ppCryptoType);
			}
		}

		public readonly unsafe void GetDecoderProfile(Guid* pDecoderProfile)
		{
			ID3D11CryptoSession* ptr = (ID3D11CryptoSession*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11CryptoSession*, Guid*, void>)(LpVtbl[5]))(ptr, pDecoderProfile);
		}

		public readonly unsafe void GetDecoderProfile(ref Guid pDecoderProfile)
		{
			ID3D11CryptoSession* ptr = (ID3D11CryptoSession*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				((delegate* unmanaged[Stdcall]<ID3D11CryptoSession*, Guid*, void>)(LpVtbl[5]))(ptr, (Guid*)ppDecoderProfile);
			}
		}

		public readonly unsafe void GetCryptoSessionHandle(nint* pCryptoSessionHandle)
		{
			ID3D11CryptoSession* ptr = (ID3D11CryptoSession*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11CryptoSession*, nint*, void>)(LpVtbl[8]))(ptr, pCryptoSessionHandle);
		}

		public readonly unsafe void GetCryptoSessionHandle(ref nint pCryptoSessionHandle)
		{
			ID3D11CryptoSession* ptr = (ID3D11CryptoSession*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nint* ppCryptoSessionHandle = &pCryptoSessionHandle)
			{
				((delegate* unmanaged[Stdcall]<ID3D11CryptoSession*, nint*, void>)(LpVtbl[8]))(ptr, (nint*)ppCryptoSessionHandle);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11CryptoSession value)
		{
			return Unsafe.As<ID3D11CryptoSession, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11CryptoSession value)
		{
			return Unsafe.As<ID3D11CryptoSession, IUnknown>(ref value);
		}

	}

	[Guid("c2931aea-2a85-4f20-860f-fba1fd256e18")]
	[NativeName("ID3D11VideoDecoderOutputView")]
	public partial struct ID3D11VideoDecoderOutputView : IComObject, IComObject<ID3D11VideoDecoderOutputView>, IComObject<ID3D11View>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("c2931aea-2a85-4f20-860f-fba1fd256e18");

		public unsafe ID3D11VideoDecoderOutputView (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc(D3D11VideoDecoderOutputViewDesc* pDesc)
		{
			ID3D11VideoDecoderOutputView* ptr = (ID3D11VideoDecoderOutputView*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoDecoderOutputView*, D3D11VideoDecoderOutputViewDesc*, void>)(LpVtbl[1]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc(ref D3D11VideoDecoderOutputViewDesc pDesc)
		{
			ID3D11VideoDecoderOutputView* ptr = (ID3D11VideoDecoderOutputView*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderOutputViewDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoDecoderOutputView*, D3D11VideoDecoderOutputViewDesc*, void>)(LpVtbl[1]))(ptr, (D3D11VideoDecoderOutputViewDesc*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11View (ID3D11VideoDecoderOutputView value)
		{
			return Unsafe.As<ID3D11VideoDecoderOutputView, ID3D11View>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11VideoDecoderOutputView value)
		{
			return Unsafe.As<ID3D11VideoDecoderOutputView, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11VideoDecoderOutputView value)
		{
			return Unsafe.As<ID3D11VideoDecoderOutputView, IUnknown>(ref value);
		}

	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D11VideoDecoderOutputViewDescUnion
	{
		[NativeName("Texture2D")]
		[FieldOffset(0)]
		public D3D11Tex2DVdov Texture2D;


	}

	[NativeName("D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoDecoderOutputViewDesc
	{
		[NativeName("DecodeProfile")]
		public Guid DecodeProfile;
		[NativeName("ViewDimension")]
		public D3D11VdovDimension ViewDimension;
		[NativeName("")]
		public D3D11VideoDecoderOutputViewDescUnion D3D11VideoDecoderOutputViewDescUnion;


	}

	[NativeName("D3D11_TEX2D_VDOV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DVdov
	{
		[NativeName("ArraySlice")]
		public uint ArraySlice;


	}

	[Guid("11ec5a5f-51dc-4945-ab34-6e8c21300ea5")]
	[NativeName("ID3D11VideoProcessorInputView")]
	public partial struct ID3D11VideoProcessorInputView : IComObject, IComObject<ID3D11VideoProcessorInputView>, IComObject<ID3D11View>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("11ec5a5f-51dc-4945-ab34-6e8c21300ea5");

		public unsafe ID3D11VideoProcessorInputView (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc(D3D11VideoProcessorInputViewDesc* pDesc)
		{
			ID3D11VideoProcessorInputView* ptr = (ID3D11VideoProcessorInputView*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoProcessorInputView*, D3D11VideoProcessorInputViewDesc*, void>)(LpVtbl[1]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc(ref D3D11VideoProcessorInputViewDesc pDesc)
		{
			ID3D11VideoProcessorInputView* ptr = (ID3D11VideoProcessorInputView*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoProcessorInputView*, D3D11VideoProcessorInputViewDesc*, void>)(LpVtbl[1]))(ptr, (D3D11VideoProcessorInputViewDesc*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11View (ID3D11VideoProcessorInputView value)
		{
			return Unsafe.As<ID3D11VideoProcessorInputView, ID3D11View>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11VideoProcessorInputView value)
		{
			return Unsafe.As<ID3D11VideoProcessorInputView, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11VideoProcessorInputView value)
		{
			return Unsafe.As<ID3D11VideoProcessorInputView, IUnknown>(ref value);
		}

	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D11VideoProcessorInputViewDescUnion
	{
		[NativeName("Texture2D")]
		[FieldOffset(0)]
		public D3D11Tex2DVpiv Texture2D;


	}

	[NativeName("D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoProcessorInputViewDesc
	{
		[NativeName("FourCC")]
		public uint FourCC;
		[NativeName("ViewDimension")]
		public D3D11VpivDimension ViewDimension;
		[NativeName("")]
		public D3D11VideoProcessorInputViewDescUnion D3D11VideoProcessorInputViewDescUnion;


	}

	[NativeName("D3D11_TEX2D_VPIV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DVpiv
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("ArraySlice")]
		public uint ArraySlice;


	}

	[Guid("a048285e-25a9-4527-bd93-d68b68c44254")]
	[NativeName("ID3D11VideoProcessorOutputView")]
	public partial struct ID3D11VideoProcessorOutputView : IComObject, IComObject<ID3D11VideoProcessorOutputView>, IComObject<ID3D11View>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("a048285e-25a9-4527-bd93-d68b68c44254");

		public unsafe ID3D11VideoProcessorOutputView (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc(D3D11VideoProcessorOutputViewDesc* pDesc)
		{
			ID3D11VideoProcessorOutputView* ptr = (ID3D11VideoProcessorOutputView*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoProcessorOutputView*, D3D11VideoProcessorOutputViewDesc*, void>)(LpVtbl[1]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc(ref D3D11VideoProcessorOutputViewDesc pDesc)
		{
			ID3D11VideoProcessorOutputView* ptr = (ID3D11VideoProcessorOutputView*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoProcessorOutputView*, D3D11VideoProcessorOutputViewDesc*, void>)(LpVtbl[1]))(ptr, (D3D11VideoProcessorOutputViewDesc*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11View (ID3D11VideoProcessorOutputView value)
		{
			return Unsafe.As<ID3D11VideoProcessorOutputView, ID3D11View>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11VideoProcessorOutputView value)
		{
			return Unsafe.As<ID3D11VideoProcessorOutputView, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11VideoProcessorOutputView value)
		{
			return Unsafe.As<ID3D11VideoProcessorOutputView, IUnknown>(ref value);
		}

	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D11VideoProcessorOutputViewDescUnion
	{
		[NativeName("Texture2D")]
		[FieldOffset(0)]
		public D3D11Tex2DVpov Texture2D;
		[NativeName("Texture2DArray")]
		[FieldOffset(0)]
		public D3D11Tex2DArrayVpov Texture2DArray;


	}

	[NativeName("D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoProcessorOutputViewDesc
	{
		[NativeName("ViewDimension")]
		public D3D11VpovDimension ViewDimension;
		[NativeName("")]
		public D3D11VideoProcessorOutputViewDescUnion D3D11VideoProcessorOutputViewDescUnion;


	}

	[NativeName("D3D11_TEX2D_VPOV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DVpov
	{
		[NativeName("MipSlice")]
		public uint MipSlice;


	}

	[NativeName("D3D11_TEX2D_ARRAY_VPOV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DArrayVpov
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;


	}

	[Guid("61f21c45-3c0e-4a74-9cea-67100d9ad5e4")]
	[NativeName("ID3D11VideoContext")]
	public partial struct ID3D11VideoContext : IComObject, IComObject<ID3D11VideoContext>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("61f21c45-3c0e-4a74-9cea-67100d9ad5e4");

		public unsafe ID3D11VideoContext (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetDecoderBuffer(ID3D11VideoDecoder* pDecoder, D3D11VideoDecoderBufferType type, uint* pBufferSize, void** ppBuffer)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoDecoder*, D3D11VideoDecoderBufferType, uint*, void**, HResult>)(LpVtbl[4]))(ptr, pDecoder, type, pBufferSize, ppBuffer);
			return ret;
		}

		public readonly unsafe HResult GetDecoderBuffer(ref ID3D11VideoDecoder pDecoder, D3D11VideoDecoderBufferType type, uint* pBufferSize, void** ppBuffer)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoDecoder*, D3D11VideoDecoderBufferType, uint*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D11VideoDecoder*)ppDecoder, type, pBufferSize, ppBuffer);
				return ret;
			}
		}

		public readonly unsafe HResult GetDecoderBuffer(ID3D11VideoDecoder* pDecoder, D3D11VideoDecoderBufferType type, ref uint pBufferSize, void** ppBuffer)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppBufferSize = &pBufferSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoDecoder*, D3D11VideoDecoderBufferType, uint*, void**, HResult>)(LpVtbl[4]))(ptr, pDecoder, type, (uint*)ppBufferSize, ppBuffer);
				return ret;
			}
		}

		public readonly unsafe HResult GetDecoderBuffer(ref ID3D11VideoDecoder pDecoder, D3D11VideoDecoderBufferType type, ref uint pBufferSize, void** ppBuffer)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (uint* ppBufferSize = &pBufferSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoDecoder*, D3D11VideoDecoderBufferType, uint*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D11VideoDecoder*)ppDecoder, type, (uint*)ppBufferSize, ppBuffer);
					return ret;
				}
			}
		}

		public readonly unsafe HResult ReleaseDecoderBuffer(ID3D11VideoDecoder* pDecoder, D3D11VideoDecoderBufferType type)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoDecoder*, D3D11VideoDecoderBufferType, HResult>)(LpVtbl[5]))(ptr, pDecoder, type);
			return ret;
		}

		public readonly unsafe HResult ReleaseDecoderBuffer(ref ID3D11VideoDecoder pDecoder, D3D11VideoDecoderBufferType type)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoDecoder*, D3D11VideoDecoderBufferType, HResult>)(LpVtbl[5]))(ptr, (ID3D11VideoDecoder*)ppDecoder, type);
				return ret;
			}
		}

		public readonly unsafe HResult DecoderBeginFrame(ID3D11VideoDecoder* pDecoder, ID3D11VideoDecoderOutputView* pView, uint contentKeySize, void* pContentKey)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoDecoder*, ID3D11VideoDecoderOutputView*, uint, void*, HResult>)(LpVtbl[6]))(ptr, pDecoder, pView, contentKeySize, pContentKey);
			return ret;
		}

		public readonly unsafe HResult DecoderBeginFrame(ref ID3D11VideoDecoder pDecoder, ID3D11VideoDecoderOutputView* pView, uint contentKeySize, void* pContentKey)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoDecoder*, ID3D11VideoDecoderOutputView*, uint, void*, HResult>)(LpVtbl[6]))(ptr, (ID3D11VideoDecoder*)ppDecoder, pView, contentKeySize, pContentKey);
				return ret;
			}
		}

		public readonly unsafe HResult DecoderBeginFrame(ID3D11VideoDecoder* pDecoder, ref ID3D11VideoDecoderOutputView pView, uint contentKeySize, void* pContentKey)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoderOutputView* ppView = &pView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoDecoder*, ID3D11VideoDecoderOutputView*, uint, void*, HResult>)(LpVtbl[6]))(ptr, pDecoder, (ID3D11VideoDecoderOutputView*)ppView, contentKeySize, pContentKey);
				return ret;
			}
		}

		public readonly unsafe HResult DecoderBeginFrame(ref ID3D11VideoDecoder pDecoder, ref ID3D11VideoDecoderOutputView pView, uint contentKeySize, void* pContentKey)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (ID3D11VideoDecoderOutputView* ppView = &pView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoDecoder*, ID3D11VideoDecoderOutputView*, uint, void*, HResult>)(LpVtbl[6]))(ptr, (ID3D11VideoDecoder*)ppDecoder, (ID3D11VideoDecoderOutputView*)ppView, contentKeySize, pContentKey);
					return ret;
				}
			}
		}

		public readonly unsafe HResult DecoderEndFrame(ID3D11VideoDecoder* pDecoder)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoDecoder*, HResult>)(LpVtbl[7]))(ptr, pDecoder);
			return ret;
		}

		public readonly unsafe HResult DecoderEndFrame(ref ID3D11VideoDecoder pDecoder)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoDecoder*, HResult>)(LpVtbl[7]))(ptr, (ID3D11VideoDecoder*)ppDecoder);
				return ret;
			}
		}

		public readonly unsafe HResult SubmitDecoderBuffers(ID3D11VideoDecoder* pDecoder, uint numBuffers, D3D11VideoDecoderBufferDesc* pBufferDesc)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoDecoder*, uint, D3D11VideoDecoderBufferDesc*, HResult>)(LpVtbl[8]))(ptr, pDecoder, numBuffers, pBufferDesc);
			return ret;
		}

		public readonly unsafe HResult SubmitDecoderBuffers(ref ID3D11VideoDecoder pDecoder, uint numBuffers, D3D11VideoDecoderBufferDesc* pBufferDesc)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoDecoder*, uint, D3D11VideoDecoderBufferDesc*, HResult>)(LpVtbl[8]))(ptr, (ID3D11VideoDecoder*)ppDecoder, numBuffers, pBufferDesc);
				return ret;
			}
		}

		public readonly unsafe HResult SubmitDecoderBuffers(ID3D11VideoDecoder* pDecoder, uint numBuffers, ref D3D11VideoDecoderBufferDesc pBufferDesc)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderBufferDesc* ppBufferDesc = &pBufferDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoDecoder*, uint, D3D11VideoDecoderBufferDesc*, HResult>)(LpVtbl[8]))(ptr, pDecoder, numBuffers, (D3D11VideoDecoderBufferDesc*)ppBufferDesc);
				return ret;
			}
		}

		public readonly unsafe HResult SubmitDecoderBuffers(ref ID3D11VideoDecoder pDecoder, uint numBuffers, ref D3D11VideoDecoderBufferDesc pBufferDesc)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (D3D11VideoDecoderBufferDesc* ppBufferDesc = &pBufferDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoDecoder*, uint, D3D11VideoDecoderBufferDesc*, HResult>)(LpVtbl[8]))(ptr, (ID3D11VideoDecoder*)ppDecoder, numBuffers, (D3D11VideoDecoderBufferDesc*)ppBufferDesc);
					return ret;
				}
			}
		}

		public readonly unsafe HResult DecoderExtension(ID3D11VideoDecoder* pDecoder, D3D11VideoDecoderExtension* pExtensionData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoDecoder*, D3D11VideoDecoderExtension*, HResult>)(LpVtbl[9]))(ptr, pDecoder, pExtensionData);
			return ret;
		}

		public readonly unsafe HResult DecoderExtension(ref ID3D11VideoDecoder pDecoder, D3D11VideoDecoderExtension* pExtensionData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoDecoder*, D3D11VideoDecoderExtension*, HResult>)(LpVtbl[9]))(ptr, (ID3D11VideoDecoder*)ppDecoder, pExtensionData);
				return ret;
			}
		}

		public readonly unsafe HResult DecoderExtension(ID3D11VideoDecoder* pDecoder, ref D3D11VideoDecoderExtension pExtensionData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderExtension* ppExtensionData = &pExtensionData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoDecoder*, D3D11VideoDecoderExtension*, HResult>)(LpVtbl[9]))(ptr, pDecoder, (D3D11VideoDecoderExtension*)ppExtensionData);
				return ret;
			}
		}

		public readonly unsafe HResult DecoderExtension(ref ID3D11VideoDecoder pDecoder, ref D3D11VideoDecoderExtension pExtensionData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (D3D11VideoDecoderExtension* ppExtensionData = &pExtensionData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoDecoder*, D3D11VideoDecoderExtension*, HResult>)(LpVtbl[9]))(ptr, (ID3D11VideoDecoder*)ppDecoder, (D3D11VideoDecoderExtension*)ppExtensionData);
					return ret;
				}
			}
		}

		public readonly unsafe void VideoProcessorSetOutputTargetRect(ID3D11VideoProcessor* pVideoProcessor, int enable, Rect32* pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int, Rect32*, void>)(LpVtbl[10]))(ptr, pVideoProcessor, enable, pRect);
		}

		public readonly unsafe void VideoProcessorSetOutputTargetRect(ref ID3D11VideoProcessor pVideoProcessor, int enable, Rect32* pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int, Rect32*, void>)(LpVtbl[10]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, enable, pRect);
			}
		}

		public readonly unsafe void VideoProcessorSetOutputTargetRect(ID3D11VideoProcessor* pVideoProcessor, int enable, ref Rect32 pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppRect = &pRect)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int, Rect32*, void>)(LpVtbl[10]))(ptr, pVideoProcessor, enable, (Rect32*)ppRect);
			}
		}

		public readonly unsafe void VideoProcessorSetOutputTargetRect(ref ID3D11VideoProcessor pVideoProcessor, int enable, ref Rect32 pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (Rect32* ppRect = &pRect)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int, Rect32*, void>)(LpVtbl[10]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, enable, (Rect32*)ppRect);
				}
			}
		}

		public readonly unsafe void VideoProcessorSetOutputBackgroundColor(ID3D11VideoProcessor* pVideoProcessor, int yCbCr, D3D11VideoColor* pColor)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int, D3D11VideoColor*, void>)(LpVtbl[11]))(ptr, pVideoProcessor, yCbCr, pColor);
		}

		public readonly unsafe void VideoProcessorSetOutputBackgroundColor(ref ID3D11VideoProcessor pVideoProcessor, int yCbCr, D3D11VideoColor* pColor)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int, D3D11VideoColor*, void>)(LpVtbl[11]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, yCbCr, pColor);
			}
		}

		public readonly unsafe void VideoProcessorSetOutputBackgroundColor(ID3D11VideoProcessor* pVideoProcessor, int yCbCr, ref D3D11VideoColor pColor)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoColor* ppColor = &pColor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int, D3D11VideoColor*, void>)(LpVtbl[11]))(ptr, pVideoProcessor, yCbCr, (D3D11VideoColor*)ppColor);
			}
		}

		public readonly unsafe void VideoProcessorSetOutputBackgroundColor(ref ID3D11VideoProcessor pVideoProcessor, int yCbCr, ref D3D11VideoColor pColor)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoColor* ppColor = &pColor)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int, D3D11VideoColor*, void>)(LpVtbl[11]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, yCbCr, (D3D11VideoColor*)ppColor);
				}
			}
		}

		public readonly unsafe void VideoProcessorSetOutputColorSpace(ID3D11VideoProcessor* pVideoProcessor, D3D11VideoProcessorColorSpace* pColorSpace)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, D3D11VideoProcessorColorSpace*, void>)(LpVtbl[12]))(ptr, pVideoProcessor, pColorSpace);
		}

		public readonly unsafe void VideoProcessorSetOutputColorSpace(ref ID3D11VideoProcessor pVideoProcessor, D3D11VideoProcessorColorSpace* pColorSpace)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, D3D11VideoProcessorColorSpace*, void>)(LpVtbl[12]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, pColorSpace);
			}
		}

		public readonly unsafe void VideoProcessorSetOutputColorSpace(ID3D11VideoProcessor* pVideoProcessor, ref D3D11VideoProcessorColorSpace pColorSpace)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorColorSpace* ppColorSpace = &pColorSpace)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, D3D11VideoProcessorColorSpace*, void>)(LpVtbl[12]))(ptr, pVideoProcessor, (D3D11VideoProcessorColorSpace*)ppColorSpace);
			}
		}

		public readonly unsafe void VideoProcessorSetOutputColorSpace(ref ID3D11VideoProcessor pVideoProcessor, ref D3D11VideoProcessorColorSpace pColorSpace)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorColorSpace* ppColorSpace = &pColorSpace)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, D3D11VideoProcessorColorSpace*, void>)(LpVtbl[12]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, (D3D11VideoProcessorColorSpace*)ppColorSpace);
				}
			}
		}

		public readonly unsafe void VideoProcessorSetOutputAlphaFillMode(ID3D11VideoProcessor* pVideoProcessor, D3D11VideoProcessorAlphaFillMode alphaFillMode, uint streamIndex)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, D3D11VideoProcessorAlphaFillMode, uint, void>)(LpVtbl[13]))(ptr, pVideoProcessor, alphaFillMode, streamIndex);
		}

		public readonly unsafe void VideoProcessorSetOutputAlphaFillMode(ref ID3D11VideoProcessor pVideoProcessor, D3D11VideoProcessorAlphaFillMode alphaFillMode, uint streamIndex)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, D3D11VideoProcessorAlphaFillMode, uint, void>)(LpVtbl[13]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, alphaFillMode, streamIndex);
			}
		}

		public readonly unsafe void VideoProcessorSetOutputConstriction(ID3D11VideoProcessor* pVideoProcessor, int enable, nint size)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int, nint, void>)(LpVtbl[14]))(ptr, pVideoProcessor, enable, size);
		}

		public readonly unsafe void VideoProcessorSetOutputConstriction(ref ID3D11VideoProcessor pVideoProcessor, int enable, nint size)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int, nint, void>)(LpVtbl[14]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, enable, size);
			}
		}

		public readonly unsafe void VideoProcessorSetOutputStereoMode(ID3D11VideoProcessor* pVideoProcessor, int enable)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int, void>)(LpVtbl[15]))(ptr, pVideoProcessor, enable);
		}

		public readonly unsafe void VideoProcessorSetOutputStereoMode(ref ID3D11VideoProcessor pVideoProcessor, int enable)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int, void>)(LpVtbl[15]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, enable);
			}
		}

		public readonly unsafe HResult VideoProcessorSetOutputExtension(ID3D11VideoProcessor* pVideoProcessor, Guid* pExtensionGuid, uint dataSize, void* pData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, Guid*, uint, void*, HResult>)(LpVtbl[16]))(ptr, pVideoProcessor, pExtensionGuid, dataSize, pData);
			return ret;
		}

		public readonly unsafe HResult VideoProcessorSetOutputExtension(ref ID3D11VideoProcessor pVideoProcessor, Guid* pExtensionGuid, uint dataSize, void* pData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, Guid*, uint, void*, HResult>)(LpVtbl[16]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, pExtensionGuid, dataSize, pData);
				return ret;
			}
		}

		public readonly unsafe HResult VideoProcessorSetOutputExtension(ID3D11VideoProcessor* pVideoProcessor, ref Guid pExtensionGuid, uint dataSize, void* pData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppExtensionGuid = &pExtensionGuid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, Guid*, uint, void*, HResult>)(LpVtbl[16]))(ptr, pVideoProcessor, (Guid*)ppExtensionGuid, dataSize, pData);
				return ret;
			}
		}

		public readonly unsafe HResult VideoProcessorSetOutputExtension(ref ID3D11VideoProcessor pVideoProcessor, ref Guid pExtensionGuid, uint dataSize, void* pData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (Guid* ppExtensionGuid = &pExtensionGuid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, Guid*, uint, void*, HResult>)(LpVtbl[16]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, (Guid*)ppExtensionGuid, dataSize, pData);
					return ret;
				}
			}
		}

		public readonly unsafe void VideoProcessorGetOutputTargetRect(ID3D11VideoProcessor* pVideoProcessor, int* enabled, Rect32* pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, Rect32*, void>)(LpVtbl[17]))(ptr, pVideoProcessor, enabled, pRect);
		}

		public readonly unsafe void VideoProcessorGetOutputTargetRect(ref ID3D11VideoProcessor pVideoProcessor, int* enabled, Rect32* pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, Rect32*, void>)(LpVtbl[17]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, enabled, pRect);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputTargetRect(ID3D11VideoProcessor* pVideoProcessor, ref int enabled, Rect32* pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* penabled = &enabled)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, Rect32*, void>)(LpVtbl[17]))(ptr, pVideoProcessor, (int*)penabled, pRect);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputTargetRect(ref ID3D11VideoProcessor pVideoProcessor, ref int enabled, Rect32* pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* penabled = &enabled)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, Rect32*, void>)(LpVtbl[17]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, (int*)penabled, pRect);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetOutputTargetRect(ID3D11VideoProcessor* pVideoProcessor, int* enabled, ref Rect32 pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppRect = &pRect)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, Rect32*, void>)(LpVtbl[17]))(ptr, pVideoProcessor, enabled, (Rect32*)ppRect);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputTargetRect(ref ID3D11VideoProcessor pVideoProcessor, int* enabled, ref Rect32 pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (Rect32* ppRect = &pRect)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, Rect32*, void>)(LpVtbl[17]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, enabled, (Rect32*)ppRect);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetOutputTargetRect(ID3D11VideoProcessor* pVideoProcessor, ref int enabled, ref Rect32 pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* penabled = &enabled)
			{
				fixed (Rect32* ppRect = &pRect)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, Rect32*, void>)(LpVtbl[17]))(ptr, pVideoProcessor, (int*)penabled, (Rect32*)ppRect);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetOutputTargetRect(ref ID3D11VideoProcessor pVideoProcessor, ref int enabled, ref Rect32 pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* penabled = &enabled)
				{
					fixed (Rect32* ppRect = &pRect)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, Rect32*, void>)(LpVtbl[17]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, (int*)penabled, (Rect32*)ppRect);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetOutputBackgroundColor(ID3D11VideoProcessor* pVideoProcessor, int* pYCbCr, D3D11VideoColor* pColor)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, D3D11VideoColor*, void>)(LpVtbl[18]))(ptr, pVideoProcessor, pYCbCr, pColor);
		}

		public readonly unsafe void VideoProcessorGetOutputBackgroundColor(ref ID3D11VideoProcessor pVideoProcessor, int* pYCbCr, D3D11VideoColor* pColor)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, D3D11VideoColor*, void>)(LpVtbl[18]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, pYCbCr, pColor);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputBackgroundColor(ID3D11VideoProcessor* pVideoProcessor, ref int pYCbCr, D3D11VideoColor* pColor)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppYCbCr = &pYCbCr)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, D3D11VideoColor*, void>)(LpVtbl[18]))(ptr, pVideoProcessor, (int*)ppYCbCr, pColor);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputBackgroundColor(ref ID3D11VideoProcessor pVideoProcessor, ref int pYCbCr, D3D11VideoColor* pColor)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppYCbCr = &pYCbCr)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, D3D11VideoColor*, void>)(LpVtbl[18]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, (int*)ppYCbCr, pColor);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetOutputBackgroundColor(ID3D11VideoProcessor* pVideoProcessor, int* pYCbCr, ref D3D11VideoColor pColor)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoColor* ppColor = &pColor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, D3D11VideoColor*, void>)(LpVtbl[18]))(ptr, pVideoProcessor, pYCbCr, (D3D11VideoColor*)ppColor);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputBackgroundColor(ref ID3D11VideoProcessor pVideoProcessor, int* pYCbCr, ref D3D11VideoColor pColor)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoColor* ppColor = &pColor)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, D3D11VideoColor*, void>)(LpVtbl[18]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, pYCbCr, (D3D11VideoColor*)ppColor);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetOutputBackgroundColor(ID3D11VideoProcessor* pVideoProcessor, ref int pYCbCr, ref D3D11VideoColor pColor)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppYCbCr = &pYCbCr)
			{
				fixed (D3D11VideoColor* ppColor = &pColor)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, D3D11VideoColor*, void>)(LpVtbl[18]))(ptr, pVideoProcessor, (int*)ppYCbCr, (D3D11VideoColor*)ppColor);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetOutputBackgroundColor(ref ID3D11VideoProcessor pVideoProcessor, ref int pYCbCr, ref D3D11VideoColor pColor)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppYCbCr = &pYCbCr)
				{
					fixed (D3D11VideoColor* ppColor = &pColor)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, D3D11VideoColor*, void>)(LpVtbl[18]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, (int*)ppYCbCr, (D3D11VideoColor*)ppColor);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetOutputColorSpace(ID3D11VideoProcessor* pVideoProcessor, D3D11VideoProcessorColorSpace* pColorSpace)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, D3D11VideoProcessorColorSpace*, void>)(LpVtbl[19]))(ptr, pVideoProcessor, pColorSpace);
		}

		public readonly unsafe void VideoProcessorGetOutputColorSpace(ref ID3D11VideoProcessor pVideoProcessor, D3D11VideoProcessorColorSpace* pColorSpace)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, D3D11VideoProcessorColorSpace*, void>)(LpVtbl[19]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, pColorSpace);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputColorSpace(ID3D11VideoProcessor* pVideoProcessor, ref D3D11VideoProcessorColorSpace pColorSpace)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorColorSpace* ppColorSpace = &pColorSpace)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, D3D11VideoProcessorColorSpace*, void>)(LpVtbl[19]))(ptr, pVideoProcessor, (D3D11VideoProcessorColorSpace*)ppColorSpace);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputColorSpace(ref ID3D11VideoProcessor pVideoProcessor, ref D3D11VideoProcessorColorSpace pColorSpace)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorColorSpace* ppColorSpace = &pColorSpace)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, D3D11VideoProcessorColorSpace*, void>)(LpVtbl[19]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, (D3D11VideoProcessorColorSpace*)ppColorSpace);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetOutputAlphaFillMode(ID3D11VideoProcessor* pVideoProcessor, D3D11VideoProcessorAlphaFillMode* pAlphaFillMode, uint* pStreamIndex)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, D3D11VideoProcessorAlphaFillMode*, uint*, void>)(LpVtbl[20]))(ptr, pVideoProcessor, pAlphaFillMode, pStreamIndex);
		}

		public readonly unsafe void VideoProcessorGetOutputAlphaFillMode(ref ID3D11VideoProcessor pVideoProcessor, D3D11VideoProcessorAlphaFillMode* pAlphaFillMode, uint* pStreamIndex)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, D3D11VideoProcessorAlphaFillMode*, uint*, void>)(LpVtbl[20]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, pAlphaFillMode, pStreamIndex);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputAlphaFillMode(ID3D11VideoProcessor* pVideoProcessor, ref D3D11VideoProcessorAlphaFillMode pAlphaFillMode, uint* pStreamIndex)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorAlphaFillMode* ppAlphaFillMode = &pAlphaFillMode)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, D3D11VideoProcessorAlphaFillMode*, uint*, void>)(LpVtbl[20]))(ptr, pVideoProcessor, (D3D11VideoProcessorAlphaFillMode*)ppAlphaFillMode, pStreamIndex);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputAlphaFillMode(ref ID3D11VideoProcessor pVideoProcessor, ref D3D11VideoProcessorAlphaFillMode pAlphaFillMode, uint* pStreamIndex)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorAlphaFillMode* ppAlphaFillMode = &pAlphaFillMode)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, D3D11VideoProcessorAlphaFillMode*, uint*, void>)(LpVtbl[20]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, (D3D11VideoProcessorAlphaFillMode*)ppAlphaFillMode, pStreamIndex);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetOutputAlphaFillMode(ID3D11VideoProcessor* pVideoProcessor, D3D11VideoProcessorAlphaFillMode* pAlphaFillMode, ref uint pStreamIndex)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppStreamIndex = &pStreamIndex)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, D3D11VideoProcessorAlphaFillMode*, uint*, void>)(LpVtbl[20]))(ptr, pVideoProcessor, pAlphaFillMode, (uint*)ppStreamIndex);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputAlphaFillMode(ref ID3D11VideoProcessor pVideoProcessor, D3D11VideoProcessorAlphaFillMode* pAlphaFillMode, ref uint pStreamIndex)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (uint* ppStreamIndex = &pStreamIndex)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, D3D11VideoProcessorAlphaFillMode*, uint*, void>)(LpVtbl[20]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, pAlphaFillMode, (uint*)ppStreamIndex);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetOutputAlphaFillMode(ID3D11VideoProcessor* pVideoProcessor, ref D3D11VideoProcessorAlphaFillMode pAlphaFillMode, ref uint pStreamIndex)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorAlphaFillMode* ppAlphaFillMode = &pAlphaFillMode)
			{
				fixed (uint* ppStreamIndex = &pStreamIndex)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, D3D11VideoProcessorAlphaFillMode*, uint*, void>)(LpVtbl[20]))(ptr, pVideoProcessor, (D3D11VideoProcessorAlphaFillMode*)ppAlphaFillMode, (uint*)ppStreamIndex);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetOutputAlphaFillMode(ref ID3D11VideoProcessor pVideoProcessor, ref D3D11VideoProcessorAlphaFillMode pAlphaFillMode, ref uint pStreamIndex)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorAlphaFillMode* ppAlphaFillMode = &pAlphaFillMode)
				{
					fixed (uint* ppStreamIndex = &pStreamIndex)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, D3D11VideoProcessorAlphaFillMode*, uint*, void>)(LpVtbl[20]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, (D3D11VideoProcessorAlphaFillMode*)ppAlphaFillMode, (uint*)ppStreamIndex);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetOutputConstriction(ID3D11VideoProcessor* pVideoProcessor, int* pEnabled, nint* pSize)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, nint*, void>)(LpVtbl[21]))(ptr, pVideoProcessor, pEnabled, pSize);
		}

		public readonly unsafe void VideoProcessorGetOutputConstriction(ref ID3D11VideoProcessor pVideoProcessor, int* pEnabled, nint* pSize)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, nint*, void>)(LpVtbl[21]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, pEnabled, pSize);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputConstriction(ID3D11VideoProcessor* pVideoProcessor, ref int pEnabled, nint* pSize)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnabled = &pEnabled)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, nint*, void>)(LpVtbl[21]))(ptr, pVideoProcessor, (int*)ppEnabled, pSize);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputConstriction(ref ID3D11VideoProcessor pVideoProcessor, ref int pEnabled, nint* pSize)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnabled = &pEnabled)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, nint*, void>)(LpVtbl[21]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, (int*)ppEnabled, pSize);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetOutputConstriction(ID3D11VideoProcessor* pVideoProcessor, int* pEnabled, ref nint pSize)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nint* ppSize = &pSize)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, nint*, void>)(LpVtbl[21]))(ptr, pVideoProcessor, pEnabled, (nint*)ppSize);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputConstriction(ref ID3D11VideoProcessor pVideoProcessor, int* pEnabled, ref nint pSize)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (nint* ppSize = &pSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, nint*, void>)(LpVtbl[21]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, pEnabled, (nint*)ppSize);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetOutputConstriction(ID3D11VideoProcessor* pVideoProcessor, ref int pEnabled, ref nint pSize)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnabled = &pEnabled)
			{
				fixed (nint* ppSize = &pSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, nint*, void>)(LpVtbl[21]))(ptr, pVideoProcessor, (int*)ppEnabled, (nint*)ppSize);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetOutputConstriction(ref ID3D11VideoProcessor pVideoProcessor, ref int pEnabled, ref nint pSize)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnabled = &pEnabled)
				{
					fixed (nint* ppSize = &pSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, nint*, void>)(LpVtbl[21]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, (int*)ppEnabled, (nint*)ppSize);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetOutputStereoMode(ID3D11VideoProcessor* pVideoProcessor, int* pEnabled)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, void>)(LpVtbl[22]))(ptr, pVideoProcessor, pEnabled);
		}

		public readonly unsafe void VideoProcessorGetOutputStereoMode(ref ID3D11VideoProcessor pVideoProcessor, int* pEnabled)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, void>)(LpVtbl[22]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, pEnabled);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputStereoMode(ID3D11VideoProcessor* pVideoProcessor, ref int pEnabled)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnabled = &pEnabled)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, void>)(LpVtbl[22]))(ptr, pVideoProcessor, (int*)ppEnabled);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputStereoMode(ref ID3D11VideoProcessor pVideoProcessor, ref int pEnabled)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnabled = &pEnabled)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, int*, void>)(LpVtbl[22]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, (int*)ppEnabled);
				}
			}
		}

		public readonly unsafe HResult VideoProcessorGetOutputExtension(ID3D11VideoProcessor* pVideoProcessor, Guid* pExtensionGuid, uint dataSize, void* pData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, Guid*, uint, void*, HResult>)(LpVtbl[23]))(ptr, pVideoProcessor, pExtensionGuid, dataSize, pData);
			return ret;
		}

		public readonly unsafe HResult VideoProcessorGetOutputExtension(ref ID3D11VideoProcessor pVideoProcessor, Guid* pExtensionGuid, uint dataSize, void* pData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, Guid*, uint, void*, HResult>)(LpVtbl[23]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, pExtensionGuid, dataSize, pData);
				return ret;
			}
		}

		public readonly unsafe HResult VideoProcessorGetOutputExtension(ID3D11VideoProcessor* pVideoProcessor, ref Guid pExtensionGuid, uint dataSize, void* pData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppExtensionGuid = &pExtensionGuid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, Guid*, uint, void*, HResult>)(LpVtbl[23]))(ptr, pVideoProcessor, (Guid*)ppExtensionGuid, dataSize, pData);
				return ret;
			}
		}

		public readonly unsafe HResult VideoProcessorGetOutputExtension(ref ID3D11VideoProcessor pVideoProcessor, ref Guid pExtensionGuid, uint dataSize, void* pData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (Guid* ppExtensionGuid = &pExtensionGuid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, Guid*, uint, void*, HResult>)(LpVtbl[23]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, (Guid*)ppExtensionGuid, dataSize, pData);
					return ret;
				}
			}
		}

		public readonly unsafe void VideoProcessorSetStreamFrameFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, D3D11VideoFrameFormat frameFormat)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoFrameFormat, void>)(LpVtbl[24]))(ptr, pVideoProcessor, streamIndex, frameFormat);
		}

		public readonly unsafe void VideoProcessorSetStreamFrameFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, D3D11VideoFrameFormat frameFormat)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoFrameFormat, void>)(LpVtbl[24]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, frameFormat);
			}
		}

		public readonly unsafe void VideoProcessorSetStreamColorSpace(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, D3D11VideoProcessorColorSpace* pColorSpace)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorColorSpace*, void>)(LpVtbl[25]))(ptr, pVideoProcessor, streamIndex, pColorSpace);
		}

		public readonly unsafe void VideoProcessorSetStreamColorSpace(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, D3D11VideoProcessorColorSpace* pColorSpace)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorColorSpace*, void>)(LpVtbl[25]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pColorSpace);
			}
		}

		public readonly unsafe void VideoProcessorSetStreamColorSpace(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref D3D11VideoProcessorColorSpace pColorSpace)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorColorSpace* ppColorSpace = &pColorSpace)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorColorSpace*, void>)(LpVtbl[25]))(ptr, pVideoProcessor, streamIndex, (D3D11VideoProcessorColorSpace*)ppColorSpace);
			}
		}

		public readonly unsafe void VideoProcessorSetStreamColorSpace(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref D3D11VideoProcessorColorSpace pColorSpace)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorColorSpace* ppColorSpace = &pColorSpace)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorColorSpace*, void>)(LpVtbl[25]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (D3D11VideoProcessorColorSpace*)ppColorSpace);
				}
			}
		}

		public readonly unsafe void VideoProcessorSetStreamOutputRate(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, D3D11VideoProcessorOutputRate outputRate, int repeatFrame, DxgiRational* pCustomRate)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorOutputRate, int, DxgiRational*, void>)(LpVtbl[26]))(ptr, pVideoProcessor, streamIndex, outputRate, repeatFrame, pCustomRate);
		}

		public readonly unsafe void VideoProcessorSetStreamOutputRate(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, D3D11VideoProcessorOutputRate outputRate, int repeatFrame, DxgiRational* pCustomRate)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorOutputRate, int, DxgiRational*, void>)(LpVtbl[26]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, outputRate, repeatFrame, pCustomRate);
			}
		}

		public readonly unsafe void VideoProcessorSetStreamOutputRate(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, D3D11VideoProcessorOutputRate outputRate, int repeatFrame, ref DxgiRational pCustomRate)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppCustomRate = &pCustomRate)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorOutputRate, int, DxgiRational*, void>)(LpVtbl[26]))(ptr, pVideoProcessor, streamIndex, outputRate, repeatFrame, (DxgiRational*)ppCustomRate);
			}
		}

		public readonly unsafe void VideoProcessorSetStreamOutputRate(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, D3D11VideoProcessorOutputRate outputRate, int repeatFrame, ref DxgiRational pCustomRate)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (DxgiRational* ppCustomRate = &pCustomRate)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorOutputRate, int, DxgiRational*, void>)(LpVtbl[26]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, outputRate, repeatFrame, (DxgiRational*)ppCustomRate);
				}
			}
		}

		public readonly unsafe void VideoProcessorSetStreamSourceRect(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int enable, Rect32* pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, Rect32*, void>)(LpVtbl[27]))(ptr, pVideoProcessor, streamIndex, enable, pRect);
		}

		public readonly unsafe void VideoProcessorSetStreamSourceRect(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int enable, Rect32* pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, Rect32*, void>)(LpVtbl[27]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, enable, pRect);
			}
		}

		public readonly unsafe void VideoProcessorSetStreamSourceRect(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int enable, ref Rect32 pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppRect = &pRect)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, Rect32*, void>)(LpVtbl[27]))(ptr, pVideoProcessor, streamIndex, enable, (Rect32*)ppRect);
			}
		}

		public readonly unsafe void VideoProcessorSetStreamSourceRect(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int enable, ref Rect32 pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (Rect32* ppRect = &pRect)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, Rect32*, void>)(LpVtbl[27]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, enable, (Rect32*)ppRect);
				}
			}
		}

		public readonly unsafe void VideoProcessorSetStreamDestRect(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int enable, Rect32* pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, Rect32*, void>)(LpVtbl[28]))(ptr, pVideoProcessor, streamIndex, enable, pRect);
		}

		public readonly unsafe void VideoProcessorSetStreamDestRect(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int enable, Rect32* pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, Rect32*, void>)(LpVtbl[28]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, enable, pRect);
			}
		}

		public readonly unsafe void VideoProcessorSetStreamDestRect(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int enable, ref Rect32 pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppRect = &pRect)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, Rect32*, void>)(LpVtbl[28]))(ptr, pVideoProcessor, streamIndex, enable, (Rect32*)ppRect);
			}
		}

		public readonly unsafe void VideoProcessorSetStreamDestRect(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int enable, ref Rect32 pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (Rect32* ppRect = &pRect)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, Rect32*, void>)(LpVtbl[28]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, enable, (Rect32*)ppRect);
				}
			}
		}

		public readonly unsafe void VideoProcessorSetStreamAlpha(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int enable, float alpha)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, float, void>)(LpVtbl[29]))(ptr, pVideoProcessor, streamIndex, enable, alpha);
		}

		public readonly unsafe void VideoProcessorSetStreamAlpha(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int enable, float alpha)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, float, void>)(LpVtbl[29]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, enable, alpha);
			}
		}

		public readonly unsafe void VideoProcessorSetStreamPalette(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, uint count, uint* pEntries)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, uint, uint*, void>)(LpVtbl[30]))(ptr, pVideoProcessor, streamIndex, count, pEntries);
		}

		public readonly unsafe void VideoProcessorSetStreamPalette(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, uint count, uint* pEntries)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, uint, uint*, void>)(LpVtbl[30]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, count, pEntries);
			}
		}

		public readonly unsafe void VideoProcessorSetStreamPalette(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, uint count, ref uint pEntries)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppEntries = &pEntries)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, uint, uint*, void>)(LpVtbl[30]))(ptr, pVideoProcessor, streamIndex, count, (uint*)ppEntries);
			}
		}

		public readonly unsafe void VideoProcessorSetStreamPalette(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, uint count, ref uint pEntries)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (uint* ppEntries = &pEntries)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, uint, uint*, void>)(LpVtbl[30]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, count, (uint*)ppEntries);
				}
			}
		}

		public readonly unsafe void VideoProcessorSetStreamPixelAspectRatio(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int enable, DxgiRational* pSourceAspectRatio, DxgiRational* pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, DxgiRational*, DxgiRational*, void>)(LpVtbl[31]))(ptr, pVideoProcessor, streamIndex, enable, pSourceAspectRatio, pDestinationAspectRatio);
		}

		public readonly unsafe void VideoProcessorSetStreamPixelAspectRatio(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int enable, DxgiRational* pSourceAspectRatio, DxgiRational* pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, DxgiRational*, DxgiRational*, void>)(LpVtbl[31]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, enable, pSourceAspectRatio, pDestinationAspectRatio);
			}
		}

		public readonly unsafe void VideoProcessorSetStreamPixelAspectRatio(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int enable, ref DxgiRational pSourceAspectRatio, DxgiRational* pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppSourceAspectRatio = &pSourceAspectRatio)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, DxgiRational*, DxgiRational*, void>)(LpVtbl[31]))(ptr, pVideoProcessor, streamIndex, enable, (DxgiRational*)ppSourceAspectRatio, pDestinationAspectRatio);
			}
		}

		public readonly unsafe void VideoProcessorSetStreamPixelAspectRatio(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int enable, ref DxgiRational pSourceAspectRatio, DxgiRational* pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (DxgiRational* ppSourceAspectRatio = &pSourceAspectRatio)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, DxgiRational*, DxgiRational*, void>)(LpVtbl[31]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, enable, (DxgiRational*)ppSourceAspectRatio, pDestinationAspectRatio);
				}
			}
		}

		public readonly unsafe void VideoProcessorSetStreamPixelAspectRatio(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int enable, DxgiRational* pSourceAspectRatio, ref DxgiRational pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppDestinationAspectRatio = &pDestinationAspectRatio)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, DxgiRational*, DxgiRational*, void>)(LpVtbl[31]))(ptr, pVideoProcessor, streamIndex, enable, pSourceAspectRatio, (DxgiRational*)ppDestinationAspectRatio);
			}
		}

		public readonly unsafe void VideoProcessorSetStreamPixelAspectRatio(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int enable, DxgiRational* pSourceAspectRatio, ref DxgiRational pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (DxgiRational* ppDestinationAspectRatio = &pDestinationAspectRatio)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, DxgiRational*, DxgiRational*, void>)(LpVtbl[31]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, enable, pSourceAspectRatio, (DxgiRational*)ppDestinationAspectRatio);
				}
			}
		}

		public readonly unsafe void VideoProcessorSetStreamPixelAspectRatio(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int enable, ref DxgiRational pSourceAspectRatio, ref DxgiRational pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppSourceAspectRatio = &pSourceAspectRatio)
			{
				fixed (DxgiRational* ppDestinationAspectRatio = &pDestinationAspectRatio)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, DxgiRational*, DxgiRational*, void>)(LpVtbl[31]))(ptr, pVideoProcessor, streamIndex, enable, (DxgiRational*)ppSourceAspectRatio, (DxgiRational*)ppDestinationAspectRatio);
				}
			}
		}

		public readonly unsafe void VideoProcessorSetStreamPixelAspectRatio(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int enable, ref DxgiRational pSourceAspectRatio, ref DxgiRational pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (DxgiRational* ppSourceAspectRatio = &pSourceAspectRatio)
				{
					fixed (DxgiRational* ppDestinationAspectRatio = &pDestinationAspectRatio)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, DxgiRational*, DxgiRational*, void>)(LpVtbl[31]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, enable, (DxgiRational*)ppSourceAspectRatio, (DxgiRational*)ppDestinationAspectRatio);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorSetStreamLumaKey(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int enable, float lower, float upper)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, float, float, void>)(LpVtbl[32]))(ptr, pVideoProcessor, streamIndex, enable, lower, upper);
		}

		public readonly unsafe void VideoProcessorSetStreamLumaKey(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int enable, float lower, float upper)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, float, float, void>)(LpVtbl[32]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, enable, lower, upper);
			}
		}

		public readonly unsafe void VideoProcessorSetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int enable, D3D11VideoProcessorStereoFormat format, int leftViewFrame0, int baseViewFrame0, D3D11VideoProcessorStereoFlipMode flipMode, int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, D3D11VideoProcessorStereoFormat, int, int, D3D11VideoProcessorStereoFlipMode, int, void>)(LpVtbl[33]))(ptr, pVideoProcessor, streamIndex, enable, format, leftViewFrame0, baseViewFrame0, flipMode, monoOffset);
		}

		public readonly unsafe void VideoProcessorSetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int enable, D3D11VideoProcessorStereoFormat format, int leftViewFrame0, int baseViewFrame0, D3D11VideoProcessorStereoFlipMode flipMode, int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, D3D11VideoProcessorStereoFormat, int, int, D3D11VideoProcessorStereoFlipMode, int, void>)(LpVtbl[33]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, enable, format, leftViewFrame0, baseViewFrame0, flipMode, monoOffset);
			}
		}

		public readonly unsafe void VideoProcessorSetStreamAutoProcessingMode(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int enable)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, void>)(LpVtbl[34]))(ptr, pVideoProcessor, streamIndex, enable);
		}

		public readonly unsafe void VideoProcessorSetStreamAutoProcessingMode(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int enable)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, void>)(LpVtbl[34]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, enable);
			}
		}

		public readonly unsafe void VideoProcessorSetStreamFilter(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, D3D11VideoProcessorFilter filter, int enable, int level)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorFilter, int, int, void>)(LpVtbl[35]))(ptr, pVideoProcessor, streamIndex, filter, enable, level);
		}

		public readonly unsafe void VideoProcessorSetStreamFilter(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, D3D11VideoProcessorFilter filter, int enable, int level)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorFilter, int, int, void>)(LpVtbl[35]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, filter, enable, level);
			}
		}

		public readonly unsafe HResult VideoProcessorSetStreamExtension(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, Guid* pExtensionGuid, uint dataSize, void* pData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, Guid*, uint, void*, HResult>)(LpVtbl[36]))(ptr, pVideoProcessor, streamIndex, pExtensionGuid, dataSize, pData);
			return ret;
		}

		public readonly unsafe HResult VideoProcessorSetStreamExtension(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, Guid* pExtensionGuid, uint dataSize, void* pData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, Guid*, uint, void*, HResult>)(LpVtbl[36]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pExtensionGuid, dataSize, pData);
				return ret;
			}
		}

		public readonly unsafe HResult VideoProcessorSetStreamExtension(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref Guid pExtensionGuid, uint dataSize, void* pData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppExtensionGuid = &pExtensionGuid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, Guid*, uint, void*, HResult>)(LpVtbl[36]))(ptr, pVideoProcessor, streamIndex, (Guid*)ppExtensionGuid, dataSize, pData);
				return ret;
			}
		}

		public readonly unsafe HResult VideoProcessorSetStreamExtension(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref Guid pExtensionGuid, uint dataSize, void* pData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (Guid* ppExtensionGuid = &pExtensionGuid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, Guid*, uint, void*, HResult>)(LpVtbl[36]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (Guid*)ppExtensionGuid, dataSize, pData);
					return ret;
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamFrameFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, D3D11VideoFrameFormat* pFrameFormat)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoFrameFormat*, void>)(LpVtbl[37]))(ptr, pVideoProcessor, streamIndex, pFrameFormat);
		}

		public readonly unsafe void VideoProcessorGetStreamFrameFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, D3D11VideoFrameFormat* pFrameFormat)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoFrameFormat*, void>)(LpVtbl[37]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pFrameFormat);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamFrameFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref D3D11VideoFrameFormat pFrameFormat)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoFrameFormat* ppFrameFormat = &pFrameFormat)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoFrameFormat*, void>)(LpVtbl[37]))(ptr, pVideoProcessor, streamIndex, (D3D11VideoFrameFormat*)ppFrameFormat);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamFrameFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref D3D11VideoFrameFormat pFrameFormat)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoFrameFormat* ppFrameFormat = &pFrameFormat)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoFrameFormat*, void>)(LpVtbl[37]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (D3D11VideoFrameFormat*)ppFrameFormat);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamColorSpace(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, D3D11VideoProcessorColorSpace* pColorSpace)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorColorSpace*, void>)(LpVtbl[38]))(ptr, pVideoProcessor, streamIndex, pColorSpace);
		}

		public readonly unsafe void VideoProcessorGetStreamColorSpace(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, D3D11VideoProcessorColorSpace* pColorSpace)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorColorSpace*, void>)(LpVtbl[38]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pColorSpace);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamColorSpace(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref D3D11VideoProcessorColorSpace pColorSpace)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorColorSpace* ppColorSpace = &pColorSpace)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorColorSpace*, void>)(LpVtbl[38]))(ptr, pVideoProcessor, streamIndex, (D3D11VideoProcessorColorSpace*)ppColorSpace);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamColorSpace(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref D3D11VideoProcessorColorSpace pColorSpace)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorColorSpace* ppColorSpace = &pColorSpace)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorColorSpace*, void>)(LpVtbl[38]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (D3D11VideoProcessorColorSpace*)ppColorSpace);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamOutputRate(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, D3D11VideoProcessorOutputRate* pOutputRate, int* pRepeatFrame, DxgiRational* pCustomRate)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorOutputRate*, int*, DxgiRational*, void>)(LpVtbl[39]))(ptr, pVideoProcessor, streamIndex, pOutputRate, pRepeatFrame, pCustomRate);
		}

		public readonly unsafe void VideoProcessorGetStreamOutputRate(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, D3D11VideoProcessorOutputRate* pOutputRate, int* pRepeatFrame, DxgiRational* pCustomRate)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorOutputRate*, int*, DxgiRational*, void>)(LpVtbl[39]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pOutputRate, pRepeatFrame, pCustomRate);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamOutputRate(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref D3D11VideoProcessorOutputRate pOutputRate, int* pRepeatFrame, DxgiRational* pCustomRate)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorOutputRate* ppOutputRate = &pOutputRate)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorOutputRate*, int*, DxgiRational*, void>)(LpVtbl[39]))(ptr, pVideoProcessor, streamIndex, (D3D11VideoProcessorOutputRate*)ppOutputRate, pRepeatFrame, pCustomRate);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamOutputRate(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref D3D11VideoProcessorOutputRate pOutputRate, int* pRepeatFrame, DxgiRational* pCustomRate)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorOutputRate* ppOutputRate = &pOutputRate)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorOutputRate*, int*, DxgiRational*, void>)(LpVtbl[39]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (D3D11VideoProcessorOutputRate*)ppOutputRate, pRepeatFrame, pCustomRate);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamOutputRate(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, D3D11VideoProcessorOutputRate* pOutputRate, ref int pRepeatFrame, DxgiRational* pCustomRate)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppRepeatFrame = &pRepeatFrame)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorOutputRate*, int*, DxgiRational*, void>)(LpVtbl[39]))(ptr, pVideoProcessor, streamIndex, pOutputRate, (int*)ppRepeatFrame, pCustomRate);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamOutputRate(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, D3D11VideoProcessorOutputRate* pOutputRate, ref int pRepeatFrame, DxgiRational* pCustomRate)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppRepeatFrame = &pRepeatFrame)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorOutputRate*, int*, DxgiRational*, void>)(LpVtbl[39]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pOutputRate, (int*)ppRepeatFrame, pCustomRate);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamOutputRate(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref D3D11VideoProcessorOutputRate pOutputRate, ref int pRepeatFrame, DxgiRational* pCustomRate)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorOutputRate* ppOutputRate = &pOutputRate)
			{
				fixed (int* ppRepeatFrame = &pRepeatFrame)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorOutputRate*, int*, DxgiRational*, void>)(LpVtbl[39]))(ptr, pVideoProcessor, streamIndex, (D3D11VideoProcessorOutputRate*)ppOutputRate, (int*)ppRepeatFrame, pCustomRate);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamOutputRate(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref D3D11VideoProcessorOutputRate pOutputRate, ref int pRepeatFrame, DxgiRational* pCustomRate)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorOutputRate* ppOutputRate = &pOutputRate)
				{
					fixed (int* ppRepeatFrame = &pRepeatFrame)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorOutputRate*, int*, DxgiRational*, void>)(LpVtbl[39]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (D3D11VideoProcessorOutputRate*)ppOutputRate, (int*)ppRepeatFrame, pCustomRate);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamOutputRate(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, D3D11VideoProcessorOutputRate* pOutputRate, int* pRepeatFrame, ref DxgiRational pCustomRate)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppCustomRate = &pCustomRate)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorOutputRate*, int*, DxgiRational*, void>)(LpVtbl[39]))(ptr, pVideoProcessor, streamIndex, pOutputRate, pRepeatFrame, (DxgiRational*)ppCustomRate);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamOutputRate(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, D3D11VideoProcessorOutputRate* pOutputRate, int* pRepeatFrame, ref DxgiRational pCustomRate)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (DxgiRational* ppCustomRate = &pCustomRate)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorOutputRate*, int*, DxgiRational*, void>)(LpVtbl[39]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pOutputRate, pRepeatFrame, (DxgiRational*)ppCustomRate);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamOutputRate(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref D3D11VideoProcessorOutputRate pOutputRate, int* pRepeatFrame, ref DxgiRational pCustomRate)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorOutputRate* ppOutputRate = &pOutputRate)
			{
				fixed (DxgiRational* ppCustomRate = &pCustomRate)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorOutputRate*, int*, DxgiRational*, void>)(LpVtbl[39]))(ptr, pVideoProcessor, streamIndex, (D3D11VideoProcessorOutputRate*)ppOutputRate, pRepeatFrame, (DxgiRational*)ppCustomRate);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamOutputRate(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref D3D11VideoProcessorOutputRate pOutputRate, int* pRepeatFrame, ref DxgiRational pCustomRate)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorOutputRate* ppOutputRate = &pOutputRate)
				{
					fixed (DxgiRational* ppCustomRate = &pCustomRate)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorOutputRate*, int*, DxgiRational*, void>)(LpVtbl[39]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (D3D11VideoProcessorOutputRate*)ppOutputRate, pRepeatFrame, (DxgiRational*)ppCustomRate);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamOutputRate(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, D3D11VideoProcessorOutputRate* pOutputRate, ref int pRepeatFrame, ref DxgiRational pCustomRate)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppRepeatFrame = &pRepeatFrame)
			{
				fixed (DxgiRational* ppCustomRate = &pCustomRate)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorOutputRate*, int*, DxgiRational*, void>)(LpVtbl[39]))(ptr, pVideoProcessor, streamIndex, pOutputRate, (int*)ppRepeatFrame, (DxgiRational*)ppCustomRate);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamOutputRate(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, D3D11VideoProcessorOutputRate* pOutputRate, ref int pRepeatFrame, ref DxgiRational pCustomRate)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppRepeatFrame = &pRepeatFrame)
				{
					fixed (DxgiRational* ppCustomRate = &pCustomRate)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorOutputRate*, int*, DxgiRational*, void>)(LpVtbl[39]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pOutputRate, (int*)ppRepeatFrame, (DxgiRational*)ppCustomRate);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamOutputRate(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref D3D11VideoProcessorOutputRate pOutputRate, ref int pRepeatFrame, ref DxgiRational pCustomRate)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorOutputRate* ppOutputRate = &pOutputRate)
			{
				fixed (int* ppRepeatFrame = &pRepeatFrame)
				{
					fixed (DxgiRational* ppCustomRate = &pCustomRate)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorOutputRate*, int*, DxgiRational*, void>)(LpVtbl[39]))(ptr, pVideoProcessor, streamIndex, (D3D11VideoProcessorOutputRate*)ppOutputRate, (int*)ppRepeatFrame, (DxgiRational*)ppCustomRate);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamOutputRate(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref D3D11VideoProcessorOutputRate pOutputRate, ref int pRepeatFrame, ref DxgiRational pCustomRate)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorOutputRate* ppOutputRate = &pOutputRate)
				{
					fixed (int* ppRepeatFrame = &pRepeatFrame)
					{
						fixed (DxgiRational* ppCustomRate = &pCustomRate)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorOutputRate*, int*, DxgiRational*, void>)(LpVtbl[39]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (D3D11VideoProcessorOutputRate*)ppOutputRate, (int*)ppRepeatFrame, (DxgiRational*)ppCustomRate);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamSourceRect(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnabled, Rect32* pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, Rect32*, void>)(LpVtbl[40]))(ptr, pVideoProcessor, streamIndex, pEnabled, pRect);
		}

		public readonly unsafe void VideoProcessorGetStreamSourceRect(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnabled, Rect32* pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, Rect32*, void>)(LpVtbl[40]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnabled, pRect);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamSourceRect(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnabled, Rect32* pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnabled = &pEnabled)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, Rect32*, void>)(LpVtbl[40]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnabled, pRect);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamSourceRect(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnabled, Rect32* pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnabled = &pEnabled)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, Rect32*, void>)(LpVtbl[40]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnabled, pRect);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamSourceRect(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnabled, ref Rect32 pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppRect = &pRect)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, Rect32*, void>)(LpVtbl[40]))(ptr, pVideoProcessor, streamIndex, pEnabled, (Rect32*)ppRect);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamSourceRect(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnabled, ref Rect32 pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (Rect32* ppRect = &pRect)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, Rect32*, void>)(LpVtbl[40]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnabled, (Rect32*)ppRect);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamSourceRect(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnabled, ref Rect32 pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnabled = &pEnabled)
			{
				fixed (Rect32* ppRect = &pRect)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, Rect32*, void>)(LpVtbl[40]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnabled, (Rect32*)ppRect);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamSourceRect(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnabled, ref Rect32 pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnabled = &pEnabled)
				{
					fixed (Rect32* ppRect = &pRect)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, Rect32*, void>)(LpVtbl[40]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnabled, (Rect32*)ppRect);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamDestRect(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnabled, Rect32* pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, Rect32*, void>)(LpVtbl[41]))(ptr, pVideoProcessor, streamIndex, pEnabled, pRect);
		}

		public readonly unsafe void VideoProcessorGetStreamDestRect(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnabled, Rect32* pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, Rect32*, void>)(LpVtbl[41]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnabled, pRect);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamDestRect(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnabled, Rect32* pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnabled = &pEnabled)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, Rect32*, void>)(LpVtbl[41]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnabled, pRect);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamDestRect(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnabled, Rect32* pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnabled = &pEnabled)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, Rect32*, void>)(LpVtbl[41]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnabled, pRect);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamDestRect(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnabled, ref Rect32 pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppRect = &pRect)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, Rect32*, void>)(LpVtbl[41]))(ptr, pVideoProcessor, streamIndex, pEnabled, (Rect32*)ppRect);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamDestRect(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnabled, ref Rect32 pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (Rect32* ppRect = &pRect)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, Rect32*, void>)(LpVtbl[41]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnabled, (Rect32*)ppRect);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamDestRect(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnabled, ref Rect32 pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnabled = &pEnabled)
			{
				fixed (Rect32* ppRect = &pRect)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, Rect32*, void>)(LpVtbl[41]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnabled, (Rect32*)ppRect);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamDestRect(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnabled, ref Rect32 pRect)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnabled = &pEnabled)
				{
					fixed (Rect32* ppRect = &pRect)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, Rect32*, void>)(LpVtbl[41]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnabled, (Rect32*)ppRect);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamAlpha(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnabled, float* pAlpha)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, void>)(LpVtbl[42]))(ptr, pVideoProcessor, streamIndex, pEnabled, pAlpha);
		}

		public readonly unsafe void VideoProcessorGetStreamAlpha(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnabled, float* pAlpha)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, void>)(LpVtbl[42]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnabled, pAlpha);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamAlpha(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnabled, float* pAlpha)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnabled = &pEnabled)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, void>)(LpVtbl[42]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnabled, pAlpha);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamAlpha(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnabled, float* pAlpha)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnabled = &pEnabled)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, void>)(LpVtbl[42]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnabled, pAlpha);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamAlpha(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnabled, ref float pAlpha)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* ppAlpha = &pAlpha)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, void>)(LpVtbl[42]))(ptr, pVideoProcessor, streamIndex, pEnabled, (float*)ppAlpha);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamAlpha(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnabled, ref float pAlpha)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (float* ppAlpha = &pAlpha)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, void>)(LpVtbl[42]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnabled, (float*)ppAlpha);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamAlpha(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnabled, ref float pAlpha)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnabled = &pEnabled)
			{
				fixed (float* ppAlpha = &pAlpha)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, void>)(LpVtbl[42]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnabled, (float*)ppAlpha);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamAlpha(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnabled, ref float pAlpha)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnabled = &pEnabled)
				{
					fixed (float* ppAlpha = &pAlpha)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, void>)(LpVtbl[42]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnabled, (float*)ppAlpha);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamPalette(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, uint count, uint* pEntries)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, uint, uint*, void>)(LpVtbl[43]))(ptr, pVideoProcessor, streamIndex, count, pEntries);
		}

		public readonly unsafe void VideoProcessorGetStreamPalette(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, uint count, uint* pEntries)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, uint, uint*, void>)(LpVtbl[43]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, count, pEntries);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamPalette(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, uint count, ref uint pEntries)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppEntries = &pEntries)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, uint, uint*, void>)(LpVtbl[43]))(ptr, pVideoProcessor, streamIndex, count, (uint*)ppEntries);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamPalette(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, uint count, ref uint pEntries)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (uint* ppEntries = &pEntries)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, uint, uint*, void>)(LpVtbl[43]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, count, (uint*)ppEntries);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamPixelAspectRatio(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnabled, DxgiRational* pSourceAspectRatio, DxgiRational* pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, DxgiRational*, DxgiRational*, void>)(LpVtbl[44]))(ptr, pVideoProcessor, streamIndex, pEnabled, pSourceAspectRatio, pDestinationAspectRatio);
		}

		public readonly unsafe void VideoProcessorGetStreamPixelAspectRatio(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnabled, DxgiRational* pSourceAspectRatio, DxgiRational* pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, DxgiRational*, DxgiRational*, void>)(LpVtbl[44]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnabled, pSourceAspectRatio, pDestinationAspectRatio);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamPixelAspectRatio(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnabled, DxgiRational* pSourceAspectRatio, DxgiRational* pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnabled = &pEnabled)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, DxgiRational*, DxgiRational*, void>)(LpVtbl[44]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnabled, pSourceAspectRatio, pDestinationAspectRatio);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamPixelAspectRatio(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnabled, DxgiRational* pSourceAspectRatio, DxgiRational* pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnabled = &pEnabled)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, DxgiRational*, DxgiRational*, void>)(LpVtbl[44]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnabled, pSourceAspectRatio, pDestinationAspectRatio);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamPixelAspectRatio(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnabled, ref DxgiRational pSourceAspectRatio, DxgiRational* pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppSourceAspectRatio = &pSourceAspectRatio)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, DxgiRational*, DxgiRational*, void>)(LpVtbl[44]))(ptr, pVideoProcessor, streamIndex, pEnabled, (DxgiRational*)ppSourceAspectRatio, pDestinationAspectRatio);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamPixelAspectRatio(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnabled, ref DxgiRational pSourceAspectRatio, DxgiRational* pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (DxgiRational* ppSourceAspectRatio = &pSourceAspectRatio)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, DxgiRational*, DxgiRational*, void>)(LpVtbl[44]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnabled, (DxgiRational*)ppSourceAspectRatio, pDestinationAspectRatio);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamPixelAspectRatio(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnabled, ref DxgiRational pSourceAspectRatio, DxgiRational* pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnabled = &pEnabled)
			{
				fixed (DxgiRational* ppSourceAspectRatio = &pSourceAspectRatio)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, DxgiRational*, DxgiRational*, void>)(LpVtbl[44]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnabled, (DxgiRational*)ppSourceAspectRatio, pDestinationAspectRatio);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamPixelAspectRatio(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnabled, ref DxgiRational pSourceAspectRatio, DxgiRational* pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnabled = &pEnabled)
				{
					fixed (DxgiRational* ppSourceAspectRatio = &pSourceAspectRatio)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, DxgiRational*, DxgiRational*, void>)(LpVtbl[44]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnabled, (DxgiRational*)ppSourceAspectRatio, pDestinationAspectRatio);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamPixelAspectRatio(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnabled, DxgiRational* pSourceAspectRatio, ref DxgiRational pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppDestinationAspectRatio = &pDestinationAspectRatio)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, DxgiRational*, DxgiRational*, void>)(LpVtbl[44]))(ptr, pVideoProcessor, streamIndex, pEnabled, pSourceAspectRatio, (DxgiRational*)ppDestinationAspectRatio);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamPixelAspectRatio(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnabled, DxgiRational* pSourceAspectRatio, ref DxgiRational pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (DxgiRational* ppDestinationAspectRatio = &pDestinationAspectRatio)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, DxgiRational*, DxgiRational*, void>)(LpVtbl[44]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnabled, pSourceAspectRatio, (DxgiRational*)ppDestinationAspectRatio);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamPixelAspectRatio(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnabled, DxgiRational* pSourceAspectRatio, ref DxgiRational pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnabled = &pEnabled)
			{
				fixed (DxgiRational* ppDestinationAspectRatio = &pDestinationAspectRatio)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, DxgiRational*, DxgiRational*, void>)(LpVtbl[44]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnabled, pSourceAspectRatio, (DxgiRational*)ppDestinationAspectRatio);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamPixelAspectRatio(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnabled, DxgiRational* pSourceAspectRatio, ref DxgiRational pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnabled = &pEnabled)
				{
					fixed (DxgiRational* ppDestinationAspectRatio = &pDestinationAspectRatio)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, DxgiRational*, DxgiRational*, void>)(LpVtbl[44]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnabled, pSourceAspectRatio, (DxgiRational*)ppDestinationAspectRatio);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamPixelAspectRatio(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnabled, ref DxgiRational pSourceAspectRatio, ref DxgiRational pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppSourceAspectRatio = &pSourceAspectRatio)
			{
				fixed (DxgiRational* ppDestinationAspectRatio = &pDestinationAspectRatio)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, DxgiRational*, DxgiRational*, void>)(LpVtbl[44]))(ptr, pVideoProcessor, streamIndex, pEnabled, (DxgiRational*)ppSourceAspectRatio, (DxgiRational*)ppDestinationAspectRatio);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamPixelAspectRatio(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnabled, ref DxgiRational pSourceAspectRatio, ref DxgiRational pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (DxgiRational* ppSourceAspectRatio = &pSourceAspectRatio)
				{
					fixed (DxgiRational* ppDestinationAspectRatio = &pDestinationAspectRatio)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, DxgiRational*, DxgiRational*, void>)(LpVtbl[44]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnabled, (DxgiRational*)ppSourceAspectRatio, (DxgiRational*)ppDestinationAspectRatio);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamPixelAspectRatio(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnabled, ref DxgiRational pSourceAspectRatio, ref DxgiRational pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnabled = &pEnabled)
			{
				fixed (DxgiRational* ppSourceAspectRatio = &pSourceAspectRatio)
				{
					fixed (DxgiRational* ppDestinationAspectRatio = &pDestinationAspectRatio)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, DxgiRational*, DxgiRational*, void>)(LpVtbl[44]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnabled, (DxgiRational*)ppSourceAspectRatio, (DxgiRational*)ppDestinationAspectRatio);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamPixelAspectRatio(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnabled, ref DxgiRational pSourceAspectRatio, ref DxgiRational pDestinationAspectRatio)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnabled = &pEnabled)
				{
					fixed (DxgiRational* ppSourceAspectRatio = &pSourceAspectRatio)
					{
						fixed (DxgiRational* ppDestinationAspectRatio = &pDestinationAspectRatio)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, DxgiRational*, DxgiRational*, void>)(LpVtbl[44]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnabled, (DxgiRational*)ppSourceAspectRatio, (DxgiRational*)ppDestinationAspectRatio);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamLumaKey(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnabled, float* pLower, float* pUpper)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, float*, void>)(LpVtbl[45]))(ptr, pVideoProcessor, streamIndex, pEnabled, pLower, pUpper);
		}

		public readonly unsafe void VideoProcessorGetStreamLumaKey(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnabled, float* pLower, float* pUpper)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, float*, void>)(LpVtbl[45]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnabled, pLower, pUpper);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamLumaKey(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnabled, float* pLower, float* pUpper)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnabled = &pEnabled)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, float*, void>)(LpVtbl[45]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnabled, pLower, pUpper);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamLumaKey(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnabled, float* pLower, float* pUpper)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnabled = &pEnabled)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, float*, void>)(LpVtbl[45]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnabled, pLower, pUpper);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamLumaKey(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnabled, ref float pLower, float* pUpper)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* ppLower = &pLower)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, float*, void>)(LpVtbl[45]))(ptr, pVideoProcessor, streamIndex, pEnabled, (float*)ppLower, pUpper);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamLumaKey(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnabled, ref float pLower, float* pUpper)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (float* ppLower = &pLower)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, float*, void>)(LpVtbl[45]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnabled, (float*)ppLower, pUpper);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamLumaKey(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnabled, ref float pLower, float* pUpper)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnabled = &pEnabled)
			{
				fixed (float* ppLower = &pLower)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, float*, void>)(LpVtbl[45]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnabled, (float*)ppLower, pUpper);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamLumaKey(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnabled, ref float pLower, float* pUpper)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnabled = &pEnabled)
				{
					fixed (float* ppLower = &pLower)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, float*, void>)(LpVtbl[45]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnabled, (float*)ppLower, pUpper);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamLumaKey(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnabled, float* pLower, ref float pUpper)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* ppUpper = &pUpper)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, float*, void>)(LpVtbl[45]))(ptr, pVideoProcessor, streamIndex, pEnabled, pLower, (float*)ppUpper);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamLumaKey(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnabled, float* pLower, ref float pUpper)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (float* ppUpper = &pUpper)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, float*, void>)(LpVtbl[45]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnabled, pLower, (float*)ppUpper);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamLumaKey(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnabled, float* pLower, ref float pUpper)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnabled = &pEnabled)
			{
				fixed (float* ppUpper = &pUpper)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, float*, void>)(LpVtbl[45]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnabled, pLower, (float*)ppUpper);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamLumaKey(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnabled, float* pLower, ref float pUpper)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnabled = &pEnabled)
				{
					fixed (float* ppUpper = &pUpper)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, float*, void>)(LpVtbl[45]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnabled, pLower, (float*)ppUpper);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamLumaKey(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnabled, ref float pLower, ref float pUpper)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* ppLower = &pLower)
			{
				fixed (float* ppUpper = &pUpper)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, float*, void>)(LpVtbl[45]))(ptr, pVideoProcessor, streamIndex, pEnabled, (float*)ppLower, (float*)ppUpper);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamLumaKey(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnabled, ref float pLower, ref float pUpper)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (float* ppLower = &pLower)
				{
					fixed (float* ppUpper = &pUpper)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, float*, void>)(LpVtbl[45]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnabled, (float*)ppLower, (float*)ppUpper);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamLumaKey(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnabled, ref float pLower, ref float pUpper)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnabled = &pEnabled)
			{
				fixed (float* ppLower = &pLower)
				{
					fixed (float* ppUpper = &pUpper)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, float*, void>)(LpVtbl[45]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnabled, (float*)ppLower, (float*)ppUpper);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamLumaKey(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnabled, ref float pLower, ref float pUpper)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnabled = &pEnabled)
				{
					fixed (float* ppLower = &pLower)
					{
						fixed (float* ppUpper = &pUpper)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, float*, float*, void>)(LpVtbl[45]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnabled, (float*)ppLower, (float*)ppUpper);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, pFormat, pLeftViewFrame0, pBaseViewFrame0, pFlipMode, monoOffset);
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, pFormat, pLeftViewFrame0, pBaseViewFrame0, pFlipMode, monoOffset);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, pFormat, pLeftViewFrame0, pBaseViewFrame0, pFlipMode, monoOffset);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, pFormat, pLeftViewFrame0, pBaseViewFrame0, pFlipMode, monoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, pBaseViewFrame0, pFlipMode, monoOffset);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, pBaseViewFrame0, pFlipMode, monoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, pBaseViewFrame0, pFlipMode, monoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, pBaseViewFrame0, pFlipMode, monoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, pFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, pFlipMode, monoOffset);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, pFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, pFlipMode, monoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, pFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, pFlipMode, monoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, pFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, pFlipMode, monoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, pFlipMode, monoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, pFlipMode, monoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, pFlipMode, monoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
					{
						fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, pFlipMode, monoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, pFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, monoOffset);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, pFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, monoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, pFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, monoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, pFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, monoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
			{
				fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, monoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, monoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, monoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
					{
						fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, monoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
			{
				fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, pFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, monoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, pFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, monoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, pFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, monoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, pFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, monoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, monoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, monoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, monoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
					{
						fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
						{
							fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, monoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, pFormat, pLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, pFormat, pLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, pFormat, pLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, pFormat, pLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
			{
				fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
					{
						fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
			{
				fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, pFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, pFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, pFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, pFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
					{
						fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
						{
							fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
			{
				fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, pFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
				{
					fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, pFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
				{
					fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, pFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, pFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
			{
				fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
				{
					fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
					{
						fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
						{
							fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
			{
				fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
				{
					fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, pFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, pFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, pFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
						{
							fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, pFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
						{
							fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
						{
							fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, int* monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
					{
						fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
						{
							fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
							{
								fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
								{
									((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, monoOffset);
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* pmonoOffset = &monoOffset)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, pFormat, pLeftViewFrame0, pBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* pmonoOffset = &monoOffset)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, pFormat, pLeftViewFrame0, pBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (int* pmonoOffset = &monoOffset)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, pFormat, pLeftViewFrame0, pBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (int* pmonoOffset = &monoOffset)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, pFormat, pLeftViewFrame0, pBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
			{
				fixed (int* pmonoOffset = &monoOffset)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, pBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* pmonoOffset = &monoOffset)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, pBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* pmonoOffset = &monoOffset)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, pBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
					{
						fixed (int* pmonoOffset = &monoOffset)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, pBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
			{
				fixed (int* pmonoOffset = &monoOffset)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, pFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (int* pmonoOffset = &monoOffset)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, pFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (int* pmonoOffset = &monoOffset)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, pFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (int* pmonoOffset = &monoOffset)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, pFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (int* pmonoOffset = &monoOffset)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (int* pmonoOffset = &monoOffset)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (int* pmonoOffset = &monoOffset)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
					{
						fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
						{
							fixed (int* pmonoOffset = &monoOffset)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
			{
				fixed (int* pmonoOffset = &monoOffset)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, pFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
				{
					fixed (int* pmonoOffset = &monoOffset)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, pFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
				{
					fixed (int* pmonoOffset = &monoOffset)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, pFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						fixed (int* pmonoOffset = &monoOffset)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, pFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
			{
				fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
				{
					fixed (int* pmonoOffset = &monoOffset)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						fixed (int* pmonoOffset = &monoOffset)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						fixed (int* pmonoOffset = &monoOffset)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
					{
						fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
						{
							fixed (int* pmonoOffset = &monoOffset)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
			{
				fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
				{
					fixed (int* pmonoOffset = &monoOffset)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, pFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						fixed (int* pmonoOffset = &monoOffset)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, pFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						fixed (int* pmonoOffset = &monoOffset)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, pFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
						{
							fixed (int* pmonoOffset = &monoOffset)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, pFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						fixed (int* pmonoOffset = &monoOffset)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
						{
							fixed (int* pmonoOffset = &monoOffset)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
						{
							fixed (int* pmonoOffset = &monoOffset)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, D3D11VideoProcessorStereoFlipMode* pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
					{
						fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
						{
							fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
							{
								fixed (int* pmonoOffset = &monoOffset)
								{
									((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, pFlipMode, (int*)pmonoOffset);
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
			{
				fixed (int* pmonoOffset = &monoOffset)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, pFormat, pLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
				{
					fixed (int* pmonoOffset = &monoOffset)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, pFormat, pLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
				{
					fixed (int* pmonoOffset = &monoOffset)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, pFormat, pLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
					{
						fixed (int* pmonoOffset = &monoOffset)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, pFormat, pLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
			{
				fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
				{
					fixed (int* pmonoOffset = &monoOffset)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
					{
						fixed (int* pmonoOffset = &monoOffset)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
					{
						fixed (int* pmonoOffset = &monoOffset)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
					{
						fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
						{
							fixed (int* pmonoOffset = &monoOffset)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
			{
				fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
				{
					fixed (int* pmonoOffset = &monoOffset)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, pFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
					{
						fixed (int* pmonoOffset = &monoOffset)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, pFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
					{
						fixed (int* pmonoOffset = &monoOffset)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, pFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
						{
							fixed (int* pmonoOffset = &monoOffset)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, pFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
					{
						fixed (int* pmonoOffset = &monoOffset)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
						{
							fixed (int* pmonoOffset = &monoOffset)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
						{
							fixed (int* pmonoOffset = &monoOffset)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, int* pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
					{
						fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
						{
							fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
							{
								fixed (int* pmonoOffset = &monoOffset)
								{
									((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, pBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
			{
				fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
				{
					fixed (int* pmonoOffset = &monoOffset)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, pFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
				{
					fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
					{
						fixed (int* pmonoOffset = &monoOffset)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, pFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
				{
					fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
					{
						fixed (int* pmonoOffset = &monoOffset)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, pFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
						{
							fixed (int* pmonoOffset = &monoOffset)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, pFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
			{
				fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
				{
					fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
					{
						fixed (int* pmonoOffset = &monoOffset)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
						{
							fixed (int* pmonoOffset = &monoOffset)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
						{
							fixed (int* pmonoOffset = &monoOffset)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, int* pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
					{
						fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
						{
							fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
							{
								fixed (int* pmonoOffset = &monoOffset)
								{
									((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, pLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
			{
				fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
				{
					fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
					{
						fixed (int* pmonoOffset = &monoOffset)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, pFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
						{
							fixed (int* pmonoOffset = &monoOffset)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, pFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
						{
							fixed (int* pmonoOffset = &monoOffset)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, pFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorStereoFormat* pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
						{
							fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
							{
								fixed (int* pmonoOffset = &monoOffset)
								{
									((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, pFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
			{
				fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
				{
					fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
					{
						fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
						{
							fixed (int* pmonoOffset = &monoOffset)
							{
								((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
						{
							fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
							{
								fixed (int* pmonoOffset = &monoOffset)
								{
									((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
				{
					fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
					{
						fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
						{
							fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
							{
								fixed (int* pmonoOffset = &monoOffset)
								{
									((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamStereoFormat(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorStereoFormat pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11VideoProcessorStereoFlipMode pFlipMode, ref int monoOffset)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (D3D11VideoProcessorStereoFormat* ppFormat = &pFormat)
					{
						fixed (int* ppLeftViewFrame0 = &pLeftViewFrame0)
						{
							fixed (int* ppBaseViewFrame0 = &pBaseViewFrame0)
							{
								fixed (D3D11VideoProcessorStereoFlipMode* ppFlipMode = &pFlipMode)
								{
									fixed (int* pmonoOffset = &monoOffset)
									{
										((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorStereoFormat*, int*, int*, D3D11VideoProcessorStereoFlipMode*, int*, void>)(LpVtbl[46]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorStereoFormat*)ppFormat, (int*)ppLeftViewFrame0, (int*)ppBaseViewFrame0, (D3D11VideoProcessorStereoFlipMode*)ppFlipMode, (int*)pmonoOffset);
									}
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamAutoProcessingMode(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnabled)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, void>)(LpVtbl[47]))(ptr, pVideoProcessor, streamIndex, pEnabled);
		}

		public readonly unsafe void VideoProcessorGetStreamAutoProcessingMode(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnabled)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, void>)(LpVtbl[47]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnabled);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamAutoProcessingMode(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnabled)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnabled = &pEnabled)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, void>)(LpVtbl[47]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnabled);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamAutoProcessingMode(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnabled)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnabled = &pEnabled)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, void>)(LpVtbl[47]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnabled);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamFilter(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, D3D11VideoProcessorFilter filter, int* pEnabled, int* pLevel)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorFilter, int*, int*, void>)(LpVtbl[48]))(ptr, pVideoProcessor, streamIndex, filter, pEnabled, pLevel);
		}

		public readonly unsafe void VideoProcessorGetStreamFilter(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, D3D11VideoProcessorFilter filter, int* pEnabled, int* pLevel)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorFilter, int*, int*, void>)(LpVtbl[48]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, filter, pEnabled, pLevel);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamFilter(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, D3D11VideoProcessorFilter filter, ref int pEnabled, int* pLevel)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnabled = &pEnabled)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorFilter, int*, int*, void>)(LpVtbl[48]))(ptr, pVideoProcessor, streamIndex, filter, (int*)ppEnabled, pLevel);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamFilter(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, D3D11VideoProcessorFilter filter, ref int pEnabled, int* pLevel)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnabled = &pEnabled)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorFilter, int*, int*, void>)(LpVtbl[48]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, filter, (int*)ppEnabled, pLevel);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamFilter(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, D3D11VideoProcessorFilter filter, int* pEnabled, ref int pLevel)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppLevel = &pLevel)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorFilter, int*, int*, void>)(LpVtbl[48]))(ptr, pVideoProcessor, streamIndex, filter, pEnabled, (int*)ppLevel);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamFilter(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, D3D11VideoProcessorFilter filter, int* pEnabled, ref int pLevel)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppLevel = &pLevel)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorFilter, int*, int*, void>)(LpVtbl[48]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, filter, pEnabled, (int*)ppLevel);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamFilter(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, D3D11VideoProcessorFilter filter, ref int pEnabled, ref int pLevel)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnabled = &pEnabled)
			{
				fixed (int* ppLevel = &pLevel)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorFilter, int*, int*, void>)(LpVtbl[48]))(ptr, pVideoProcessor, streamIndex, filter, (int*)ppEnabled, (int*)ppLevel);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamFilter(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, D3D11VideoProcessorFilter filter, ref int pEnabled, ref int pLevel)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnabled = &pEnabled)
				{
					fixed (int* ppLevel = &pLevel)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, D3D11VideoProcessorFilter, int*, int*, void>)(LpVtbl[48]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, filter, (int*)ppEnabled, (int*)ppLevel);
					}
				}
			}
		}

		public readonly unsafe HResult VideoProcessorGetStreamExtension(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, Guid* pExtensionGuid, uint dataSize, void* pData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, Guid*, uint, void*, HResult>)(LpVtbl[49]))(ptr, pVideoProcessor, streamIndex, pExtensionGuid, dataSize, pData);
			return ret;
		}

		public readonly unsafe HResult VideoProcessorGetStreamExtension(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, Guid* pExtensionGuid, uint dataSize, void* pData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, Guid*, uint, void*, HResult>)(LpVtbl[49]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pExtensionGuid, dataSize, pData);
				return ret;
			}
		}

		public readonly unsafe HResult VideoProcessorGetStreamExtension(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref Guid pExtensionGuid, uint dataSize, void* pData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppExtensionGuid = &pExtensionGuid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, Guid*, uint, void*, HResult>)(LpVtbl[49]))(ptr, pVideoProcessor, streamIndex, (Guid*)ppExtensionGuid, dataSize, pData);
				return ret;
			}
		}

		public readonly unsafe HResult VideoProcessorGetStreamExtension(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref Guid pExtensionGuid, uint dataSize, void* pData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (Guid* ppExtensionGuid = &pExtensionGuid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, Guid*, uint, void*, HResult>)(LpVtbl[49]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (Guid*)ppExtensionGuid, dataSize, pData);
					return ret;
				}
			}
		}

		public readonly unsafe HResult VideoProcessorBlt(ID3D11VideoProcessor* pVideoProcessor, ID3D11VideoProcessorOutputView* pView, uint outputFrame, uint streamCount, D3D11VideoProcessorStream* pStreams)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, ID3D11VideoProcessorOutputView*, uint, uint, D3D11VideoProcessorStream*, HResult>)(LpVtbl[50]))(ptr, pVideoProcessor, pView, outputFrame, streamCount, pStreams);
			return ret;
		}

		public readonly unsafe HResult VideoProcessorBlt(ref ID3D11VideoProcessor pVideoProcessor, ID3D11VideoProcessorOutputView* pView, uint outputFrame, uint streamCount, D3D11VideoProcessorStream* pStreams)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, ID3D11VideoProcessorOutputView*, uint, uint, D3D11VideoProcessorStream*, HResult>)(LpVtbl[50]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, pView, outputFrame, streamCount, pStreams);
				return ret;
			}
		}

		public readonly unsafe HResult VideoProcessorBlt(ID3D11VideoProcessor* pVideoProcessor, ref ID3D11VideoProcessorOutputView pView, uint outputFrame, uint streamCount, D3D11VideoProcessorStream* pStreams)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorOutputView* ppView = &pView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, ID3D11VideoProcessorOutputView*, uint, uint, D3D11VideoProcessorStream*, HResult>)(LpVtbl[50]))(ptr, pVideoProcessor, (ID3D11VideoProcessorOutputView*)ppView, outputFrame, streamCount, pStreams);
				return ret;
			}
		}

		public readonly unsafe HResult VideoProcessorBlt(ref ID3D11VideoProcessor pVideoProcessor, ref ID3D11VideoProcessorOutputView pView, uint outputFrame, uint streamCount, D3D11VideoProcessorStream* pStreams)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (ID3D11VideoProcessorOutputView* ppView = &pView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, ID3D11VideoProcessorOutputView*, uint, uint, D3D11VideoProcessorStream*, HResult>)(LpVtbl[50]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, (ID3D11VideoProcessorOutputView*)ppView, outputFrame, streamCount, pStreams);
					return ret;
				}
			}
		}

		public readonly unsafe HResult VideoProcessorBlt(ID3D11VideoProcessor* pVideoProcessor, ID3D11VideoProcessorOutputView* pView, uint outputFrame, uint streamCount, ref D3D11VideoProcessorStream pStreams)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStream* ppStreams = &pStreams)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, ID3D11VideoProcessorOutputView*, uint, uint, D3D11VideoProcessorStream*, HResult>)(LpVtbl[50]))(ptr, pVideoProcessor, pView, outputFrame, streamCount, (D3D11VideoProcessorStream*)ppStreams);
				return ret;
			}
		}

		public readonly unsafe HResult VideoProcessorBlt(ref ID3D11VideoProcessor pVideoProcessor, ID3D11VideoProcessorOutputView* pView, uint outputFrame, uint streamCount, ref D3D11VideoProcessorStream pStreams)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStream* ppStreams = &pStreams)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, ID3D11VideoProcessorOutputView*, uint, uint, D3D11VideoProcessorStream*, HResult>)(LpVtbl[50]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, pView, outputFrame, streamCount, (D3D11VideoProcessorStream*)ppStreams);
					return ret;
				}
			}
		}

		public readonly unsafe HResult VideoProcessorBlt(ID3D11VideoProcessor* pVideoProcessor, ref ID3D11VideoProcessorOutputView pView, uint outputFrame, uint streamCount, ref D3D11VideoProcessorStream pStreams)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorOutputView* ppView = &pView)
			{
				fixed (D3D11VideoProcessorStream* ppStreams = &pStreams)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, ID3D11VideoProcessorOutputView*, uint, uint, D3D11VideoProcessorStream*, HResult>)(LpVtbl[50]))(ptr, pVideoProcessor, (ID3D11VideoProcessorOutputView*)ppView, outputFrame, streamCount, (D3D11VideoProcessorStream*)ppStreams);
					return ret;
				}
			}
		}

		public readonly unsafe HResult VideoProcessorBlt(ref ID3D11VideoProcessor pVideoProcessor, ref ID3D11VideoProcessorOutputView pView, uint outputFrame, uint streamCount, ref D3D11VideoProcessorStream pStreams)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (ID3D11VideoProcessorOutputView* ppView = &pView)
				{
					fixed (D3D11VideoProcessorStream* ppStreams = &pStreams)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, ID3D11VideoProcessorOutputView*, uint, uint, D3D11VideoProcessorStream*, HResult>)(LpVtbl[50]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, (ID3D11VideoProcessorOutputView*)ppView, outputFrame, streamCount, (D3D11VideoProcessorStream*)ppStreams);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult NegotiateCryptoSessionKeyExchange(ID3D11CryptoSession* pCryptoSession, uint dataSize, void* pData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, uint, void*, HResult>)(LpVtbl[51]))(ptr, pCryptoSession, dataSize, pData);
			return ret;
		}

		public readonly unsafe HResult NegotiateCryptoSessionKeyExchange(ref ID3D11CryptoSession pCryptoSession, uint dataSize, void* pData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, uint, void*, HResult>)(LpVtbl[51]))(ptr, (ID3D11CryptoSession*)ppCryptoSession, dataSize, pData);
				return ret;
			}
		}

		public readonly unsafe void EncryptionBlt(ID3D11CryptoSession* pCryptoSession, ID3D11Texture2D* pSrcSurface, ID3D11Texture2D* pDstSurface, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, uint, void*, void>)(LpVtbl[52]))(ptr, pCryptoSession, pSrcSurface, pDstSurface, iVSize, pIV);
		}

		public readonly unsafe void EncryptionBlt(ref ID3D11CryptoSession pCryptoSession, ID3D11Texture2D* pSrcSurface, ID3D11Texture2D* pDstSurface, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, uint, void*, void>)(LpVtbl[52]))(ptr, (ID3D11CryptoSession*)ppCryptoSession, pSrcSurface, pDstSurface, iVSize, pIV);
			}
		}

		public readonly unsafe void EncryptionBlt(ID3D11CryptoSession* pCryptoSession, ref ID3D11Texture2D pSrcSurface, ID3D11Texture2D* pDstSurface, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Texture2D* ppSrcSurface = &pSrcSurface)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, uint, void*, void>)(LpVtbl[52]))(ptr, pCryptoSession, (ID3D11Texture2D*)ppSrcSurface, pDstSurface, iVSize, pIV);
			}
		}

		public readonly unsafe void EncryptionBlt(ref ID3D11CryptoSession pCryptoSession, ref ID3D11Texture2D pSrcSurface, ID3D11Texture2D* pDstSurface, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				fixed (ID3D11Texture2D* ppSrcSurface = &pSrcSurface)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, uint, void*, void>)(LpVtbl[52]))(ptr, (ID3D11CryptoSession*)ppCryptoSession, (ID3D11Texture2D*)ppSrcSurface, pDstSurface, iVSize, pIV);
				}
			}
		}

		public readonly unsafe void EncryptionBlt(ID3D11CryptoSession* pCryptoSession, ID3D11Texture2D* pSrcSurface, ref ID3D11Texture2D pDstSurface, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Texture2D* ppDstSurface = &pDstSurface)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, uint, void*, void>)(LpVtbl[52]))(ptr, pCryptoSession, pSrcSurface, (ID3D11Texture2D*)ppDstSurface, iVSize, pIV);
			}
		}

		public readonly unsafe void EncryptionBlt(ref ID3D11CryptoSession pCryptoSession, ID3D11Texture2D* pSrcSurface, ref ID3D11Texture2D pDstSurface, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				fixed (ID3D11Texture2D* ppDstSurface = &pDstSurface)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, uint, void*, void>)(LpVtbl[52]))(ptr, (ID3D11CryptoSession*)ppCryptoSession, pSrcSurface, (ID3D11Texture2D*)ppDstSurface, iVSize, pIV);
				}
			}
		}

		public readonly unsafe void EncryptionBlt(ID3D11CryptoSession* pCryptoSession, ref ID3D11Texture2D pSrcSurface, ref ID3D11Texture2D pDstSurface, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Texture2D* ppSrcSurface = &pSrcSurface)
			{
				fixed (ID3D11Texture2D* ppDstSurface = &pDstSurface)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, uint, void*, void>)(LpVtbl[52]))(ptr, pCryptoSession, (ID3D11Texture2D*)ppSrcSurface, (ID3D11Texture2D*)ppDstSurface, iVSize, pIV);
				}
			}
		}

		public readonly unsafe void EncryptionBlt(ref ID3D11CryptoSession pCryptoSession, ref ID3D11Texture2D pSrcSurface, ref ID3D11Texture2D pDstSurface, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				fixed (ID3D11Texture2D* ppSrcSurface = &pSrcSurface)
				{
					fixed (ID3D11Texture2D* ppDstSurface = &pDstSurface)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, uint, void*, void>)(LpVtbl[52]))(ptr, (ID3D11CryptoSession*)ppCryptoSession, (ID3D11Texture2D*)ppSrcSurface, (ID3D11Texture2D*)ppDstSurface, iVSize, pIV);
					}
				}
			}
		}

		public readonly unsafe void DecryptionBlt(ID3D11CryptoSession* pCryptoSession, ID3D11Texture2D* pSrcSurface, ID3D11Texture2D* pDstSurface, D3D11EncryptedBlockInfo* pEncryptedBlockInfo, uint contentKeySize, void* pContentKey, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, D3D11EncryptedBlockInfo*, uint, void*, uint, void*, void>)(LpVtbl[53]))(ptr, pCryptoSession, pSrcSurface, pDstSurface, pEncryptedBlockInfo, contentKeySize, pContentKey, iVSize, pIV);
		}

		public readonly unsafe void DecryptionBlt(ref ID3D11CryptoSession pCryptoSession, ID3D11Texture2D* pSrcSurface, ID3D11Texture2D* pDstSurface, D3D11EncryptedBlockInfo* pEncryptedBlockInfo, uint contentKeySize, void* pContentKey, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, D3D11EncryptedBlockInfo*, uint, void*, uint, void*, void>)(LpVtbl[53]))(ptr, (ID3D11CryptoSession*)ppCryptoSession, pSrcSurface, pDstSurface, pEncryptedBlockInfo, contentKeySize, pContentKey, iVSize, pIV);
			}
		}

		public readonly unsafe void DecryptionBlt(ID3D11CryptoSession* pCryptoSession, ref ID3D11Texture2D pSrcSurface, ID3D11Texture2D* pDstSurface, D3D11EncryptedBlockInfo* pEncryptedBlockInfo, uint contentKeySize, void* pContentKey, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Texture2D* ppSrcSurface = &pSrcSurface)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, D3D11EncryptedBlockInfo*, uint, void*, uint, void*, void>)(LpVtbl[53]))(ptr, pCryptoSession, (ID3D11Texture2D*)ppSrcSurface, pDstSurface, pEncryptedBlockInfo, contentKeySize, pContentKey, iVSize, pIV);
			}
		}

		public readonly unsafe void DecryptionBlt(ref ID3D11CryptoSession pCryptoSession, ref ID3D11Texture2D pSrcSurface, ID3D11Texture2D* pDstSurface, D3D11EncryptedBlockInfo* pEncryptedBlockInfo, uint contentKeySize, void* pContentKey, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				fixed (ID3D11Texture2D* ppSrcSurface = &pSrcSurface)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, D3D11EncryptedBlockInfo*, uint, void*, uint, void*, void>)(LpVtbl[53]))(ptr, (ID3D11CryptoSession*)ppCryptoSession, (ID3D11Texture2D*)ppSrcSurface, pDstSurface, pEncryptedBlockInfo, contentKeySize, pContentKey, iVSize, pIV);
				}
			}
		}

		public readonly unsafe void DecryptionBlt(ID3D11CryptoSession* pCryptoSession, ID3D11Texture2D* pSrcSurface, ref ID3D11Texture2D pDstSurface, D3D11EncryptedBlockInfo* pEncryptedBlockInfo, uint contentKeySize, void* pContentKey, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Texture2D* ppDstSurface = &pDstSurface)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, D3D11EncryptedBlockInfo*, uint, void*, uint, void*, void>)(LpVtbl[53]))(ptr, pCryptoSession, pSrcSurface, (ID3D11Texture2D*)ppDstSurface, pEncryptedBlockInfo, contentKeySize, pContentKey, iVSize, pIV);
			}
		}

		public readonly unsafe void DecryptionBlt(ref ID3D11CryptoSession pCryptoSession, ID3D11Texture2D* pSrcSurface, ref ID3D11Texture2D pDstSurface, D3D11EncryptedBlockInfo* pEncryptedBlockInfo, uint contentKeySize, void* pContentKey, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				fixed (ID3D11Texture2D* ppDstSurface = &pDstSurface)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, D3D11EncryptedBlockInfo*, uint, void*, uint, void*, void>)(LpVtbl[53]))(ptr, (ID3D11CryptoSession*)ppCryptoSession, pSrcSurface, (ID3D11Texture2D*)ppDstSurface, pEncryptedBlockInfo, contentKeySize, pContentKey, iVSize, pIV);
				}
			}
		}

		public readonly unsafe void DecryptionBlt(ID3D11CryptoSession* pCryptoSession, ref ID3D11Texture2D pSrcSurface, ref ID3D11Texture2D pDstSurface, D3D11EncryptedBlockInfo* pEncryptedBlockInfo, uint contentKeySize, void* pContentKey, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Texture2D* ppSrcSurface = &pSrcSurface)
			{
				fixed (ID3D11Texture2D* ppDstSurface = &pDstSurface)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, D3D11EncryptedBlockInfo*, uint, void*, uint, void*, void>)(LpVtbl[53]))(ptr, pCryptoSession, (ID3D11Texture2D*)ppSrcSurface, (ID3D11Texture2D*)ppDstSurface, pEncryptedBlockInfo, contentKeySize, pContentKey, iVSize, pIV);
				}
			}
		}

		public readonly unsafe void DecryptionBlt(ref ID3D11CryptoSession pCryptoSession, ref ID3D11Texture2D pSrcSurface, ref ID3D11Texture2D pDstSurface, D3D11EncryptedBlockInfo* pEncryptedBlockInfo, uint contentKeySize, void* pContentKey, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				fixed (ID3D11Texture2D* ppSrcSurface = &pSrcSurface)
				{
					fixed (ID3D11Texture2D* ppDstSurface = &pDstSurface)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, D3D11EncryptedBlockInfo*, uint, void*, uint, void*, void>)(LpVtbl[53]))(ptr, (ID3D11CryptoSession*)ppCryptoSession, (ID3D11Texture2D*)ppSrcSurface, (ID3D11Texture2D*)ppDstSurface, pEncryptedBlockInfo, contentKeySize, pContentKey, iVSize, pIV);
					}
				}
			}
		}

		public readonly unsafe void DecryptionBlt(ID3D11CryptoSession* pCryptoSession, ID3D11Texture2D* pSrcSurface, ID3D11Texture2D* pDstSurface, ref D3D11EncryptedBlockInfo pEncryptedBlockInfo, uint contentKeySize, void* pContentKey, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11EncryptedBlockInfo* ppEncryptedBlockInfo = &pEncryptedBlockInfo)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, D3D11EncryptedBlockInfo*, uint, void*, uint, void*, void>)(LpVtbl[53]))(ptr, pCryptoSession, pSrcSurface, pDstSurface, (D3D11EncryptedBlockInfo*)ppEncryptedBlockInfo, contentKeySize, pContentKey, iVSize, pIV);
			}
		}

		public readonly unsafe void DecryptionBlt(ref ID3D11CryptoSession pCryptoSession, ID3D11Texture2D* pSrcSurface, ID3D11Texture2D* pDstSurface, ref D3D11EncryptedBlockInfo pEncryptedBlockInfo, uint contentKeySize, void* pContentKey, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				fixed (D3D11EncryptedBlockInfo* ppEncryptedBlockInfo = &pEncryptedBlockInfo)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, D3D11EncryptedBlockInfo*, uint, void*, uint, void*, void>)(LpVtbl[53]))(ptr, (ID3D11CryptoSession*)ppCryptoSession, pSrcSurface, pDstSurface, (D3D11EncryptedBlockInfo*)ppEncryptedBlockInfo, contentKeySize, pContentKey, iVSize, pIV);
				}
			}
		}

		public readonly unsafe void DecryptionBlt(ID3D11CryptoSession* pCryptoSession, ref ID3D11Texture2D pSrcSurface, ID3D11Texture2D* pDstSurface, ref D3D11EncryptedBlockInfo pEncryptedBlockInfo, uint contentKeySize, void* pContentKey, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Texture2D* ppSrcSurface = &pSrcSurface)
			{
				fixed (D3D11EncryptedBlockInfo* ppEncryptedBlockInfo = &pEncryptedBlockInfo)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, D3D11EncryptedBlockInfo*, uint, void*, uint, void*, void>)(LpVtbl[53]))(ptr, pCryptoSession, (ID3D11Texture2D*)ppSrcSurface, pDstSurface, (D3D11EncryptedBlockInfo*)ppEncryptedBlockInfo, contentKeySize, pContentKey, iVSize, pIV);
				}
			}
		}

		public readonly unsafe void DecryptionBlt(ref ID3D11CryptoSession pCryptoSession, ref ID3D11Texture2D pSrcSurface, ID3D11Texture2D* pDstSurface, ref D3D11EncryptedBlockInfo pEncryptedBlockInfo, uint contentKeySize, void* pContentKey, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				fixed (ID3D11Texture2D* ppSrcSurface = &pSrcSurface)
				{
					fixed (D3D11EncryptedBlockInfo* ppEncryptedBlockInfo = &pEncryptedBlockInfo)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, D3D11EncryptedBlockInfo*, uint, void*, uint, void*, void>)(LpVtbl[53]))(ptr, (ID3D11CryptoSession*)ppCryptoSession, (ID3D11Texture2D*)ppSrcSurface, pDstSurface, (D3D11EncryptedBlockInfo*)ppEncryptedBlockInfo, contentKeySize, pContentKey, iVSize, pIV);
					}
				}
			}
		}

		public readonly unsafe void DecryptionBlt(ID3D11CryptoSession* pCryptoSession, ID3D11Texture2D* pSrcSurface, ref ID3D11Texture2D pDstSurface, ref D3D11EncryptedBlockInfo pEncryptedBlockInfo, uint contentKeySize, void* pContentKey, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Texture2D* ppDstSurface = &pDstSurface)
			{
				fixed (D3D11EncryptedBlockInfo* ppEncryptedBlockInfo = &pEncryptedBlockInfo)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, D3D11EncryptedBlockInfo*, uint, void*, uint, void*, void>)(LpVtbl[53]))(ptr, pCryptoSession, pSrcSurface, (ID3D11Texture2D*)ppDstSurface, (D3D11EncryptedBlockInfo*)ppEncryptedBlockInfo, contentKeySize, pContentKey, iVSize, pIV);
				}
			}
		}

		public readonly unsafe void DecryptionBlt(ref ID3D11CryptoSession pCryptoSession, ID3D11Texture2D* pSrcSurface, ref ID3D11Texture2D pDstSurface, ref D3D11EncryptedBlockInfo pEncryptedBlockInfo, uint contentKeySize, void* pContentKey, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				fixed (ID3D11Texture2D* ppDstSurface = &pDstSurface)
				{
					fixed (D3D11EncryptedBlockInfo* ppEncryptedBlockInfo = &pEncryptedBlockInfo)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, D3D11EncryptedBlockInfo*, uint, void*, uint, void*, void>)(LpVtbl[53]))(ptr, (ID3D11CryptoSession*)ppCryptoSession, pSrcSurface, (ID3D11Texture2D*)ppDstSurface, (D3D11EncryptedBlockInfo*)ppEncryptedBlockInfo, contentKeySize, pContentKey, iVSize, pIV);
					}
				}
			}
		}

		public readonly unsafe void DecryptionBlt(ID3D11CryptoSession* pCryptoSession, ref ID3D11Texture2D pSrcSurface, ref ID3D11Texture2D pDstSurface, ref D3D11EncryptedBlockInfo pEncryptedBlockInfo, uint contentKeySize, void* pContentKey, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Texture2D* ppSrcSurface = &pSrcSurface)
			{
				fixed (ID3D11Texture2D* ppDstSurface = &pDstSurface)
				{
					fixed (D3D11EncryptedBlockInfo* ppEncryptedBlockInfo = &pEncryptedBlockInfo)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, D3D11EncryptedBlockInfo*, uint, void*, uint, void*, void>)(LpVtbl[53]))(ptr, pCryptoSession, (ID3D11Texture2D*)ppSrcSurface, (ID3D11Texture2D*)ppDstSurface, (D3D11EncryptedBlockInfo*)ppEncryptedBlockInfo, contentKeySize, pContentKey, iVSize, pIV);
					}
				}
			}
		}

		public readonly unsafe void DecryptionBlt(ref ID3D11CryptoSession pCryptoSession, ref ID3D11Texture2D pSrcSurface, ref ID3D11Texture2D pDstSurface, ref D3D11EncryptedBlockInfo pEncryptedBlockInfo, uint contentKeySize, void* pContentKey, uint iVSize, void* pIV)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				fixed (ID3D11Texture2D* ppSrcSurface = &pSrcSurface)
				{
					fixed (ID3D11Texture2D* ppDstSurface = &pDstSurface)
					{
						fixed (D3D11EncryptedBlockInfo* ppEncryptedBlockInfo = &pEncryptedBlockInfo)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, ID3D11Texture2D*, ID3D11Texture2D*, D3D11EncryptedBlockInfo*, uint, void*, uint, void*, void>)(LpVtbl[53]))(ptr, (ID3D11CryptoSession*)ppCryptoSession, (ID3D11Texture2D*)ppSrcSurface, (ID3D11Texture2D*)ppDstSurface, (D3D11EncryptedBlockInfo*)ppEncryptedBlockInfo, contentKeySize, pContentKey, iVSize, pIV);
						}
					}
				}
			}
		}

		public readonly unsafe void StartSessionKeyRefresh(ID3D11CryptoSession* pCryptoSession, uint randomNumberSize, void* pRandomNumber)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, uint, void*, void>)(LpVtbl[54]))(ptr, pCryptoSession, randomNumberSize, pRandomNumber);
		}

		public readonly unsafe void StartSessionKeyRefresh(ref ID3D11CryptoSession pCryptoSession, uint randomNumberSize, void* pRandomNumber)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, uint, void*, void>)(LpVtbl[54]))(ptr, (ID3D11CryptoSession*)ppCryptoSession, randomNumberSize, pRandomNumber);
			}
		}

		public readonly unsafe void FinishSessionKeyRefresh(ID3D11CryptoSession* pCryptoSession)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, void>)(LpVtbl[55]))(ptr, pCryptoSession);
		}

		public readonly unsafe void FinishSessionKeyRefresh(ref ID3D11CryptoSession pCryptoSession)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, void>)(LpVtbl[55]))(ptr, (ID3D11CryptoSession*)ppCryptoSession);
			}
		}

		public readonly unsafe HResult GetEncryptionBltKey(ID3D11CryptoSession* pCryptoSession, uint keySize, void* pReadbackKey)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, uint, void*, HResult>)(LpVtbl[56]))(ptr, pCryptoSession, keySize, pReadbackKey);
			return ret;
		}

		public readonly unsafe HResult GetEncryptionBltKey(ref ID3D11CryptoSession pCryptoSession, uint keySize, void* pReadbackKey)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11CryptoSession*, uint, void*, HResult>)(LpVtbl[56]))(ptr, (ID3D11CryptoSession*)ppCryptoSession, keySize, pReadbackKey);
				return ret;
			}
		}

		public readonly unsafe HResult NegotiateAuthenticatedChannelKeyExchange(ID3D11AuthenticatedChannel* pChannel, uint dataSize, void* pData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11AuthenticatedChannel*, uint, void*, HResult>)(LpVtbl[57]))(ptr, pChannel, dataSize, pData);
			return ret;
		}

		public readonly unsafe HResult NegotiateAuthenticatedChannelKeyExchange(ref ID3D11AuthenticatedChannel pChannel, uint dataSize, void* pData)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11AuthenticatedChannel* ppChannel = &pChannel)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11AuthenticatedChannel*, uint, void*, HResult>)(LpVtbl[57]))(ptr, (ID3D11AuthenticatedChannel*)ppChannel, dataSize, pData);
				return ret;
			}
		}

		public readonly unsafe HResult QueryAuthenticatedChannel(ID3D11AuthenticatedChannel* pChannel, uint inputSize, void* pInput, uint outputSize, void* pOutput)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11AuthenticatedChannel*, uint, void*, uint, void*, HResult>)(LpVtbl[58]))(ptr, pChannel, inputSize, pInput, outputSize, pOutput);
			return ret;
		}

		public readonly unsafe HResult QueryAuthenticatedChannel(ref ID3D11AuthenticatedChannel pChannel, uint inputSize, void* pInput, uint outputSize, void* pOutput)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11AuthenticatedChannel* ppChannel = &pChannel)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11AuthenticatedChannel*, uint, void*, uint, void*, HResult>)(LpVtbl[58]))(ptr, (ID3D11AuthenticatedChannel*)ppChannel, inputSize, pInput, outputSize, pOutput);
				return ret;
			}
		}

		public readonly unsafe HResult ConfigureAuthenticatedChannel(ID3D11AuthenticatedChannel* pChannel, uint inputSize, void* pInput, D3D11AuthenticatedConfigureOutput* pOutput)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11AuthenticatedChannel*, uint, void*, D3D11AuthenticatedConfigureOutput*, HResult>)(LpVtbl[59]))(ptr, pChannel, inputSize, pInput, pOutput);
			return ret;
		}

		public readonly unsafe HResult ConfigureAuthenticatedChannel(ref ID3D11AuthenticatedChannel pChannel, uint inputSize, void* pInput, D3D11AuthenticatedConfigureOutput* pOutput)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11AuthenticatedChannel* ppChannel = &pChannel)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11AuthenticatedChannel*, uint, void*, D3D11AuthenticatedConfigureOutput*, HResult>)(LpVtbl[59]))(ptr, (ID3D11AuthenticatedChannel*)ppChannel, inputSize, pInput, pOutput);
				return ret;
			}
		}

		public readonly unsafe HResult ConfigureAuthenticatedChannel(ID3D11AuthenticatedChannel* pChannel, uint inputSize, void* pInput, ref D3D11AuthenticatedConfigureOutput pOutput)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11AuthenticatedConfigureOutput* ppOutput = &pOutput)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11AuthenticatedChannel*, uint, void*, D3D11AuthenticatedConfigureOutput*, HResult>)(LpVtbl[59]))(ptr, pChannel, inputSize, pInput, (D3D11AuthenticatedConfigureOutput*)ppOutput);
				return ret;
			}
		}

		public readonly unsafe HResult ConfigureAuthenticatedChannel(ref ID3D11AuthenticatedChannel pChannel, uint inputSize, void* pInput, ref D3D11AuthenticatedConfigureOutput pOutput)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11AuthenticatedChannel* ppChannel = &pChannel)
			{
				fixed (D3D11AuthenticatedConfigureOutput* ppOutput = &pOutput)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11AuthenticatedChannel*, uint, void*, D3D11AuthenticatedConfigureOutput*, HResult>)(LpVtbl[59]))(ptr, (ID3D11AuthenticatedChannel*)ppChannel, inputSize, pInput, (D3D11AuthenticatedConfigureOutput*)ppOutput);
					return ret;
				}
			}
		}

		public readonly unsafe void VideoProcessorSetStreamRotation(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int enable, D3D11VideoProcessorRotation rotation)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, D3D11VideoProcessorRotation, void>)(LpVtbl[60]))(ptr, pVideoProcessor, streamIndex, enable, rotation);
		}

		public readonly unsafe void VideoProcessorSetStreamRotation(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int enable, D3D11VideoProcessorRotation rotation)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int, D3D11VideoProcessorRotation, void>)(LpVtbl[60]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, enable, rotation);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamRotation(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorRotation* pRotation)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorRotation*, void>)(LpVtbl[61]))(ptr, pVideoProcessor, streamIndex, pEnable, pRotation);
		}

		public readonly unsafe void VideoProcessorGetStreamRotation(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, D3D11VideoProcessorRotation* pRotation)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorRotation*, void>)(LpVtbl[61]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, pRotation);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamRotation(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorRotation* pRotation)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorRotation*, void>)(LpVtbl[61]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, pRotation);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamRotation(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, D3D11VideoProcessorRotation* pRotation)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorRotation*, void>)(LpVtbl[61]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, pRotation);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamRotation(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorRotation pRotation)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorRotation* ppRotation = &pRotation)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorRotation*, void>)(LpVtbl[61]))(ptr, pVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorRotation*)ppRotation);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamRotation(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, ref D3D11VideoProcessorRotation pRotation)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorRotation* ppRotation = &pRotation)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorRotation*, void>)(LpVtbl[61]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, (D3D11VideoProcessorRotation*)ppRotation);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamRotation(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorRotation pRotation)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (D3D11VideoProcessorRotation* ppRotation = &pRotation)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorRotation*, void>)(LpVtbl[61]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorRotation*)ppRotation);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamRotation(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, ref D3D11VideoProcessorRotation pRotation)
		{
			ID3D11VideoContext* ptr = (ID3D11VideoContext*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (D3D11VideoProcessorRotation* ppRotation = &pRotation)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext*, ID3D11VideoProcessor*, uint, int*, D3D11VideoProcessorRotation*, void>)(LpVtbl[61]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, (D3D11VideoProcessorRotation*)ppRotation);
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11VideoContext value)
		{
			return Unsafe.As<ID3D11VideoContext, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11VideoContext value)
		{
			return Unsafe.As<ID3D11VideoContext, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_VIDEO_DECODER_BUFFER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoDecoderBufferDesc
	{
		[NativeName("BufferType")]
		public D3D11VideoDecoderBufferType BufferType;
		[NativeName("BufferIndex")]
		public uint BufferIndex;
		[NativeName("DataOffset")]
		public uint DataOffset;
		[NativeName("DataSize")]
		public uint DataSize;
		[NativeName("FirstMBaddress")]
		public uint FirstMBaddress;
		[NativeName("NumMBsInBuffer")]
		public uint NumMBsInBuffer;
		[NativeName("Width")]
		public uint Width;
		[NativeName("Height")]
		public uint Height;
		[NativeName("Stride")]
		public uint Stride;
		[NativeName("ReservedBits")]
		public uint ReservedBits;
		[NativeName("pIV")]
		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		public unsafe void* PIV;

		[NativeName("IVSize")]
		public uint IVSize;
		[NativeName("PartialEncryption")]
		public int PartialEncryption;
		[NativeName("EncryptedBlockInfo")]
		public D3D11EncryptedBlockInfo EncryptedBlockInfo;


	}

	[NativeName("D3D11_ENCRYPTED_BLOCK_INFO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11EncryptedBlockInfo
	{
		[NativeName("NumEncryptedBytesAtBeginning")]
		public uint NumEncryptedBytesAtBeginning;
		[NativeName("NumBytesInSkipPattern")]
		public uint NumBytesInSkipPattern;
		[NativeName("NumBytesInEncryptPattern")]
		public uint NumBytesInEncryptPattern;


	}

	[NativeName("D3D11_VIDEO_DECODER_EXTENSION")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoDecoderExtension
	{
		[NativeName("Function")]
		public uint Function;
		[NativeName("pPrivateInputData")]
		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		public unsafe void* PPrivateInputData;

		[NativeName("PrivateInputDataSize")]
		public uint PrivateInputDataSize;
		[NativeName("pPrivateOutputData")]
		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		public unsafe void* PPrivateOutputData;

		[NativeName("PrivateOutputDataSize")]
		public uint PrivateOutputDataSize;
		[NativeName("ResourceCount")]
		public uint ResourceCount;
		[NativeName("ppResourceList")]
		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		public unsafe ID3D11Resource** PpResourceList;



	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D11VideoColorUnion
	{
		[NativeName("YCbCr")]
		[FieldOffset(0)]
		public D3D11VIDEOCOLORYCbCrA YCbCr;
		[NativeName("RGBA")]
		[FieldOffset(0)]
		public D3D11VideoColorRgba RGBA;


	}

	[NativeName("D3D11_VIDEO_COLOR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoColor
	{
		[NativeName("")]
		public D3D11VideoColorUnion D3D11VideoColorUnion;


	}

	[NativeName("D3D11_VIDEO_COLOR_YCbCrA")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VIDEOCOLORYCbCrA
	{
		[NativeName("Y")]
		public float Y;
		[NativeName("Cb")]
		public float Cb;
		[NativeName("Cr")]
		public float Cr;
		[NativeName("A")]
		public float A;


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0032 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D11_VIDEO_COLOR_RGBA")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoColorRgba
	{
		[NativeName("R")]
		public float R;
		[NativeName("G")]
		public float G;
		[NativeName("B")]
		public float B;
		[NativeName("A")]
		public float A;


	}

	[NativeName("D3D11_VIDEO_PROCESSOR_COLOR_SPACE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoProcessorColorSpace
	{
		[NativeName("Usage")]
		public uint Usage;
		[NativeName("RGB_Range")]
		public uint RGBRange;
		[NativeName("YCbCr_Matrix")]
		public uint YCbCrMatrix;
		[NativeName("YCbCr_xvYCC")]
		public uint YCbCrXvYCC;
		[NativeName("Nominal_Range")]
		public uint NominalRange;
		[NativeName("Reserved")]
		public uint Reserved;


	}

	[NativeName("D3D11_VIDEO_PROCESSOR_STREAM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoProcessorStream
	{
		[NativeName("Enable")]
		public int Enable;
		[NativeName("OutputIndex")]
		public uint OutputIndex;
		[NativeName("InputFrameOrField")]
		public uint InputFrameOrField;
		[NativeName("PastFrames")]
		public uint PastFrames;
		[NativeName("FutureFrames")]
		public uint FutureFrames;
		[NativeName("ppPastSurfaces")]
		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		public unsafe ID3D11VideoProcessorInputView** PpPastSurfaces;

		[NativeName("pInputSurface")]
		public unsafe ID3D11VideoProcessorInputView* PInputSurface;
		[NativeName("ppFutureSurfaces")]
		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		public unsafe ID3D11VideoProcessorInputView** PpFutureSurfaces;

		[NativeName("ppPastSurfacesRight")]
		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		public unsafe ID3D11VideoProcessorInputView** PpPastSurfacesRight;

		[NativeName("pInputSurfaceRight")]
		public unsafe ID3D11VideoProcessorInputView* PInputSurfaceRight;
		[NativeName("ppFutureSurfacesRight")]
		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		public unsafe ID3D11VideoProcessorInputView** PpFutureSurfacesRight;



	}

	[NativeName("D3D11_AUTHENTICATED_CONFIGURE_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedConfigureOutput
	{
		[NativeName("omac")]
		public D3D11Omac Omac;
		[NativeName("ConfigureType")]
		public Guid ConfigureType;
		[NativeName("hChannel")]
		public nint HChannel;
		[NativeName("SequenceNumber")]
		public uint SequenceNumber;
		[NativeName("ReturnCode")]
		public HResult ReturnCode;


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0033 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D11_OMAC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Omac
	{
		[NativeName("Omac")]
		public byte Omac_0;
		public byte Omac_1;
		public byte Omac_2;
		public byte Omac_3;
		public byte Omac_4;
		public byte Omac_5;
		public byte Omac_6;
		public byte Omac_7;
		public byte Omac_8;
		public byte Omac_9;
		public byte Omac_10;
		public byte Omac_11;
		public byte Omac_12;
		public byte Omac_13;
		public byte Omac_14;
		public byte Omac_15;


	}

	[Guid("10ec4d5b-975a-4689-b9e4-d0aac30fe333")]
	[NativeName("ID3D11VideoDevice")]
	public partial struct ID3D11VideoDevice : IComObject, IComObject<ID3D11VideoDevice>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("10ec4d5b-975a-4689-b9e4-d0aac30fe333");

		public unsafe ID3D11VideoDevice (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult CreateVideoDecoder(D3D11VideoDecoderDesc* pVideoDesc, D3D11VideoDecoderConfig* pConfig, ID3D11VideoDecoder** ppDecoder)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, ID3D11VideoDecoder**, HResult>)(*LpVtbl))(ptr, pVideoDesc, pConfig, ppDecoder);
			return ret;
		}

		public readonly unsafe HResult CreateVideoDecoder(ref D3D11VideoDecoderDesc pVideoDesc, D3D11VideoDecoderConfig* pConfig, ID3D11VideoDecoder** ppDecoder)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppVideoDesc = &pVideoDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, ID3D11VideoDecoder**, HResult>)(*LpVtbl))(ptr, (D3D11VideoDecoderDesc*)ppVideoDesc, pConfig, ppDecoder);
				return ret;
			}
		}

		public readonly unsafe HResult CreateVideoDecoder(D3D11VideoDecoderDesc* pVideoDesc, ref D3D11VideoDecoderConfig pConfig, ID3D11VideoDecoder** ppDecoder)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppConfig = &pConfig)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, ID3D11VideoDecoder**, HResult>)(*LpVtbl))(ptr, pVideoDesc, (D3D11VideoDecoderConfig*)ppConfig, ppDecoder);
				return ret;
			}
		}

		public readonly unsafe HResult CreateVideoDecoder(ref D3D11VideoDecoderDesc pVideoDesc, ref D3D11VideoDecoderConfig pConfig, ID3D11VideoDecoder** ppDecoder)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppVideoDesc = &pVideoDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppConfig = &pConfig)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, ID3D11VideoDecoder**, HResult>)(*LpVtbl))(ptr, (D3D11VideoDecoderDesc*)ppVideoDesc, (D3D11VideoDecoderConfig*)ppConfig, ppDecoder);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateVideoDecoder(D3D11VideoDecoderDesc* pVideoDesc, D3D11VideoDecoderConfig* pConfig, ref ID3D11VideoDecoder* ppDecoder)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder** pppDecoder = &ppDecoder)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, ID3D11VideoDecoder**, HResult>)(*LpVtbl))(ptr, pVideoDesc, pConfig, (ID3D11VideoDecoder**)pppDecoder);
				return ret;
			}
		}

		public readonly unsafe HResult CreateVideoDecoder(ref D3D11VideoDecoderDesc pVideoDesc, D3D11VideoDecoderConfig* pConfig, ref ID3D11VideoDecoder* ppDecoder)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppVideoDesc = &pVideoDesc)
			{
				fixed (ID3D11VideoDecoder** pppDecoder = &ppDecoder)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, ID3D11VideoDecoder**, HResult>)(*LpVtbl))(ptr, (D3D11VideoDecoderDesc*)ppVideoDesc, pConfig, (ID3D11VideoDecoder**)pppDecoder);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateVideoDecoder(D3D11VideoDecoderDesc* pVideoDesc, ref D3D11VideoDecoderConfig pConfig, ref ID3D11VideoDecoder* ppDecoder)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppConfig = &pConfig)
			{
				fixed (ID3D11VideoDecoder** pppDecoder = &ppDecoder)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, ID3D11VideoDecoder**, HResult>)(*LpVtbl))(ptr, pVideoDesc, (D3D11VideoDecoderConfig*)ppConfig, (ID3D11VideoDecoder**)pppDecoder);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateVideoDecoder(ref D3D11VideoDecoderDesc pVideoDesc, ref D3D11VideoDecoderConfig pConfig, ref ID3D11VideoDecoder* ppDecoder)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppVideoDesc = &pVideoDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppConfig = &pConfig)
				{
					fixed (ID3D11VideoDecoder** pppDecoder = &ppDecoder)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, ID3D11VideoDecoder**, HResult>)(*LpVtbl))(ptr, (D3D11VideoDecoderDesc*)ppVideoDesc, (D3D11VideoDecoderConfig*)ppConfig, (ID3D11VideoDecoder**)pppDecoder);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessor(ID3D11VideoProcessorEnumerator* pEnum, uint rateConversionIndex, ID3D11VideoProcessor** ppVideoProcessor)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11VideoProcessorEnumerator*, uint, ID3D11VideoProcessor**, HResult>)(LpVtbl[1]))(ptr, pEnum, rateConversionIndex, ppVideoProcessor);
			return ret;
		}

		public readonly unsafe HResult CreateVideoProcessor(ref ID3D11VideoProcessorEnumerator pEnum, uint rateConversionIndex, ID3D11VideoProcessor** ppVideoProcessor)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11VideoProcessorEnumerator*, uint, ID3D11VideoProcessor**, HResult>)(LpVtbl[1]))(ptr, (ID3D11VideoProcessorEnumerator*)ppEnum, rateConversionIndex, ppVideoProcessor);
				return ret;
			}
		}

		public readonly unsafe HResult CreateVideoProcessor(ID3D11VideoProcessorEnumerator* pEnum, uint rateConversionIndex, ref ID3D11VideoProcessor* ppVideoProcessor)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor** pppVideoProcessor = &ppVideoProcessor)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11VideoProcessorEnumerator*, uint, ID3D11VideoProcessor**, HResult>)(LpVtbl[1]))(ptr, pEnum, rateConversionIndex, (ID3D11VideoProcessor**)pppVideoProcessor);
				return ret;
			}
		}

		public readonly unsafe HResult CreateVideoProcessor(ref ID3D11VideoProcessorEnumerator pEnum, uint rateConversionIndex, ref ID3D11VideoProcessor* ppVideoProcessor)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				fixed (ID3D11VideoProcessor** pppVideoProcessor = &ppVideoProcessor)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11VideoProcessorEnumerator*, uint, ID3D11VideoProcessor**, HResult>)(LpVtbl[1]))(ptr, (ID3D11VideoProcessorEnumerator*)ppEnum, rateConversionIndex, (ID3D11VideoProcessor**)pppVideoProcessor);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateAuthenticatedChannel(D3D11AuthenticatedChannelType channelType, ID3D11AuthenticatedChannel** ppAuthenticatedChannel)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11AuthenticatedChannelType, ID3D11AuthenticatedChannel**, HResult>)(LpVtbl[2]))(ptr, channelType, ppAuthenticatedChannel);
			return ret;
		}

		public readonly unsafe HResult CreateAuthenticatedChannel(D3D11AuthenticatedChannelType channelType, ref ID3D11AuthenticatedChannel* ppAuthenticatedChannel)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11AuthenticatedChannel** pppAuthenticatedChannel = &ppAuthenticatedChannel)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11AuthenticatedChannelType, ID3D11AuthenticatedChannel**, HResult>)(LpVtbl[2]))(ptr, channelType, (ID3D11AuthenticatedChannel**)pppAuthenticatedChannel);
				return ret;
			}
		}

		public readonly unsafe HResult CreateCryptoSession(Guid* pCryptoType, Guid* pDecoderProfile, Guid* pKeyExchangeType, ID3D11CryptoSession** ppCryptoSession)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, HResult>)(LpVtbl[3]))(ptr, pCryptoType, pDecoderProfile, pKeyExchangeType, ppCryptoSession);
			return ret;
		}

		public readonly unsafe HResult CreateCryptoSession(ref Guid pCryptoType, Guid* pDecoderProfile, Guid* pKeyExchangeType, ID3D11CryptoSession** ppCryptoSession)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, HResult>)(LpVtbl[3]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, pKeyExchangeType, ppCryptoSession);
				return ret;
			}
		}

		public readonly unsafe HResult CreateCryptoSession(Guid* pCryptoType, ref Guid pDecoderProfile, Guid* pKeyExchangeType, ID3D11CryptoSession** ppCryptoSession)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, HResult>)(LpVtbl[3]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, pKeyExchangeType, ppCryptoSession);
				return ret;
			}
		}

		public readonly unsafe HResult CreateCryptoSession(ref Guid pCryptoType, ref Guid pDecoderProfile, Guid* pKeyExchangeType, ID3D11CryptoSession** ppCryptoSession)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, HResult>)(LpVtbl[3]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, pKeyExchangeType, ppCryptoSession);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCryptoSession(Guid* pCryptoType, Guid* pDecoderProfile, ref Guid pKeyExchangeType, ID3D11CryptoSession** ppCryptoSession)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, HResult>)(LpVtbl[3]))(ptr, pCryptoType, pDecoderProfile, (Guid*)ppKeyExchangeType, ppCryptoSession);
				return ret;
			}
		}

		public readonly unsafe HResult CreateCryptoSession(ref Guid pCryptoType, Guid* pDecoderProfile, ref Guid pKeyExchangeType, ID3D11CryptoSession** ppCryptoSession)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, HResult>)(LpVtbl[3]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, (Guid*)ppKeyExchangeType, ppCryptoSession);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCryptoSession(Guid* pCryptoType, ref Guid pDecoderProfile, ref Guid pKeyExchangeType, ID3D11CryptoSession** ppCryptoSession)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, HResult>)(LpVtbl[3]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, ppCryptoSession);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCryptoSession(ref Guid pCryptoType, ref Guid pDecoderProfile, ref Guid pKeyExchangeType, ID3D11CryptoSession** ppCryptoSession)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, HResult>)(LpVtbl[3]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, ppCryptoSession);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateCryptoSession(Guid* pCryptoType, Guid* pDecoderProfile, Guid* pKeyExchangeType, ref ID3D11CryptoSession* ppCryptoSession)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession** pppCryptoSession = &ppCryptoSession)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, HResult>)(LpVtbl[3]))(ptr, pCryptoType, pDecoderProfile, pKeyExchangeType, (ID3D11CryptoSession**)pppCryptoSession);
				return ret;
			}
		}

		public readonly unsafe HResult CreateCryptoSession(ref Guid pCryptoType, Guid* pDecoderProfile, Guid* pKeyExchangeType, ref ID3D11CryptoSession* ppCryptoSession)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (ID3D11CryptoSession** pppCryptoSession = &ppCryptoSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, HResult>)(LpVtbl[3]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, pKeyExchangeType, (ID3D11CryptoSession**)pppCryptoSession);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCryptoSession(Guid* pCryptoType, ref Guid pDecoderProfile, Guid* pKeyExchangeType, ref ID3D11CryptoSession* ppCryptoSession)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (ID3D11CryptoSession** pppCryptoSession = &ppCryptoSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, HResult>)(LpVtbl[3]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, pKeyExchangeType, (ID3D11CryptoSession**)pppCryptoSession);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCryptoSession(ref Guid pCryptoType, ref Guid pDecoderProfile, Guid* pKeyExchangeType, ref ID3D11CryptoSession* ppCryptoSession)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (ID3D11CryptoSession** pppCryptoSession = &ppCryptoSession)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, HResult>)(LpVtbl[3]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, pKeyExchangeType, (ID3D11CryptoSession**)pppCryptoSession);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateCryptoSession(Guid* pCryptoType, Guid* pDecoderProfile, ref Guid pKeyExchangeType, ref ID3D11CryptoSession* ppCryptoSession)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
			{
				fixed (ID3D11CryptoSession** pppCryptoSession = &ppCryptoSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, HResult>)(LpVtbl[3]))(ptr, pCryptoType, pDecoderProfile, (Guid*)ppKeyExchangeType, (ID3D11CryptoSession**)pppCryptoSession);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCryptoSession(ref Guid pCryptoType, Guid* pDecoderProfile, ref Guid pKeyExchangeType, ref ID3D11CryptoSession* ppCryptoSession)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					fixed (ID3D11CryptoSession** pppCryptoSession = &ppCryptoSession)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, HResult>)(LpVtbl[3]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, (Guid*)ppKeyExchangeType, (ID3D11CryptoSession**)pppCryptoSession);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateCryptoSession(Guid* pCryptoType, ref Guid pDecoderProfile, ref Guid pKeyExchangeType, ref ID3D11CryptoSession* ppCryptoSession)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					fixed (ID3D11CryptoSession** pppCryptoSession = &ppCryptoSession)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, HResult>)(LpVtbl[3]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, (ID3D11CryptoSession**)pppCryptoSession);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateCryptoSession(ref Guid pCryptoType, ref Guid pDecoderProfile, ref Guid pKeyExchangeType, ref ID3D11CryptoSession* ppCryptoSession)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
					{
						fixed (ID3D11CryptoSession** pppCryptoSession = &ppCryptoSession)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, HResult>)(LpVtbl[3]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, (ID3D11CryptoSession**)pppCryptoSession);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateVideoDecoderOutputView(ID3D11Resource* pResource, D3D11VideoDecoderOutputViewDesc* pDesc, ID3D11VideoDecoderOutputView** ppVDOVView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(LpVtbl[4]))(ptr, pResource, pDesc, ppVDOVView);
			return ret;
		}

		public readonly unsafe HResult CreateVideoDecoderOutputView(ref ID3D11Resource pResource, D3D11VideoDecoderOutputViewDesc* pDesc, ID3D11VideoDecoderOutputView** ppVDOVView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(LpVtbl[4]))(ptr, (ID3D11Resource*)ppResource, pDesc, ppVDOVView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateVideoDecoderOutputView(ID3D11Resource* pResource, ref D3D11VideoDecoderOutputViewDesc pDesc, ID3D11VideoDecoderOutputView** ppVDOVView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderOutputViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(LpVtbl[4]))(ptr, pResource, (D3D11VideoDecoderOutputViewDesc*)ppDesc, ppVDOVView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateVideoDecoderOutputView(ref ID3D11Resource pResource, ref D3D11VideoDecoderOutputViewDesc pDesc, ID3D11VideoDecoderOutputView** ppVDOVView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11VideoDecoderOutputViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(LpVtbl[4]))(ptr, (ID3D11Resource*)ppResource, (D3D11VideoDecoderOutputViewDesc*)ppDesc, ppVDOVView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateVideoDecoderOutputView(ID3D11Resource* pResource, D3D11VideoDecoderOutputViewDesc* pDesc, ref ID3D11VideoDecoderOutputView* ppVDOVView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoderOutputView** pppVDOVView = &ppVDOVView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(LpVtbl[4]))(ptr, pResource, pDesc, (ID3D11VideoDecoderOutputView**)pppVDOVView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateVideoDecoderOutputView(ref ID3D11Resource pResource, D3D11VideoDecoderOutputViewDesc* pDesc, ref ID3D11VideoDecoderOutputView* ppVDOVView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoDecoderOutputView** pppVDOVView = &ppVDOVView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(LpVtbl[4]))(ptr, (ID3D11Resource*)ppResource, pDesc, (ID3D11VideoDecoderOutputView**)pppVDOVView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateVideoDecoderOutputView(ID3D11Resource* pResource, ref D3D11VideoDecoderOutputViewDesc pDesc, ref ID3D11VideoDecoderOutputView* ppVDOVView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderOutputViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11VideoDecoderOutputView** pppVDOVView = &ppVDOVView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(LpVtbl[4]))(ptr, pResource, (D3D11VideoDecoderOutputViewDesc*)ppDesc, (ID3D11VideoDecoderOutputView**)pppVDOVView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateVideoDecoderOutputView(ref ID3D11Resource pResource, ref D3D11VideoDecoderOutputViewDesc pDesc, ref ID3D11VideoDecoderOutputView* ppVDOVView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11VideoDecoderOutputViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11VideoDecoderOutputView** pppVDOVView = &ppVDOVView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, HResult>)(LpVtbl[4]))(ptr, (ID3D11Resource*)ppResource, (D3D11VideoDecoderOutputViewDesc*)ppDesc, (ID3D11VideoDecoderOutputView**)pppVDOVView);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorInputView(ID3D11Resource* pResource, ID3D11VideoProcessorEnumerator* pEnum, D3D11VideoProcessorInputViewDesc* pDesc, ID3D11VideoProcessorInputView** ppVPIView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(LpVtbl[5]))(ptr, pResource, pEnum, pDesc, ppVPIView);
			return ret;
		}

		public readonly unsafe HResult CreateVideoProcessorInputView(ref ID3D11Resource pResource, ID3D11VideoProcessorEnumerator* pEnum, D3D11VideoProcessorInputViewDesc* pDesc, ID3D11VideoProcessorInputView** ppVPIView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(LpVtbl[5]))(ptr, (ID3D11Resource*)ppResource, pEnum, pDesc, ppVPIView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateVideoProcessorInputView(ID3D11Resource* pResource, ref ID3D11VideoProcessorEnumerator pEnum, D3D11VideoProcessorInputViewDesc* pDesc, ID3D11VideoProcessorInputView** ppVPIView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(LpVtbl[5]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, ppVPIView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateVideoProcessorInputView(ref ID3D11Resource pResource, ref ID3D11VideoProcessorEnumerator pEnum, D3D11VideoProcessorInputViewDesc* pDesc, ID3D11VideoProcessorInputView** ppVPIView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(LpVtbl[5]))(ptr, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, ppVPIView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorInputView(ID3D11Resource* pResource, ID3D11VideoProcessorEnumerator* pEnum, ref D3D11VideoProcessorInputViewDesc pDesc, ID3D11VideoProcessorInputView** ppVPIView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(LpVtbl[5]))(ptr, pResource, pEnum, (D3D11VideoProcessorInputViewDesc*)ppDesc, ppVPIView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateVideoProcessorInputView(ref ID3D11Resource pResource, ID3D11VideoProcessorEnumerator* pEnum, ref D3D11VideoProcessorInputViewDesc pDesc, ID3D11VideoProcessorInputView** ppVPIView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(LpVtbl[5]))(ptr, (ID3D11Resource*)ppResource, pEnum, (D3D11VideoProcessorInputViewDesc*)ppDesc, ppVPIView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorInputView(ID3D11Resource* pResource, ref ID3D11VideoProcessorEnumerator pEnum, ref D3D11VideoProcessorInputViewDesc pDesc, ID3D11VideoProcessorInputView** ppVPIView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(LpVtbl[5]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (D3D11VideoProcessorInputViewDesc*)ppDesc, ppVPIView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorInputView(ref ID3D11Resource pResource, ref ID3D11VideoProcessorEnumerator pEnum, ref D3D11VideoProcessorInputViewDesc pDesc, ID3D11VideoProcessorInputView** ppVPIView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(LpVtbl[5]))(ptr, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (D3D11VideoProcessorInputViewDesc*)ppDesc, ppVPIView);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorInputView(ID3D11Resource* pResource, ID3D11VideoProcessorEnumerator* pEnum, D3D11VideoProcessorInputViewDesc* pDesc, ref ID3D11VideoProcessorInputView* ppVPIView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(LpVtbl[5]))(ptr, pResource, pEnum, pDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateVideoProcessorInputView(ref ID3D11Resource pResource, ID3D11VideoProcessorEnumerator* pEnum, D3D11VideoProcessorInputViewDesc* pDesc, ref ID3D11VideoProcessorInputView* ppVPIView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(LpVtbl[5]))(ptr, (ID3D11Resource*)ppResource, pEnum, pDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorInputView(ID3D11Resource* pResource, ref ID3D11VideoProcessorEnumerator pEnum, D3D11VideoProcessorInputViewDesc* pDesc, ref ID3D11VideoProcessorInputView* ppVPIView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(LpVtbl[5]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorInputView(ref ID3D11Resource pResource, ref ID3D11VideoProcessorEnumerator pEnum, D3D11VideoProcessorInputViewDesc* pDesc, ref ID3D11VideoProcessorInputView* ppVPIView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(LpVtbl[5]))(ptr, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorInputView(ID3D11Resource* pResource, ID3D11VideoProcessorEnumerator* pEnum, ref D3D11VideoProcessorInputViewDesc pDesc, ref ID3D11VideoProcessorInputView* ppVPIView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(LpVtbl[5]))(ptr, pResource, pEnum, (D3D11VideoProcessorInputViewDesc*)ppDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorInputView(ref ID3D11Resource pResource, ID3D11VideoProcessorEnumerator* pEnum, ref D3D11VideoProcessorInputViewDesc pDesc, ref ID3D11VideoProcessorInputView* ppVPIView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(LpVtbl[5]))(ptr, (ID3D11Resource*)ppResource, pEnum, (D3D11VideoProcessorInputViewDesc*)ppDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorInputView(ID3D11Resource* pResource, ref ID3D11VideoProcessorEnumerator pEnum, ref D3D11VideoProcessorInputViewDesc pDesc, ref ID3D11VideoProcessorInputView* ppVPIView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(LpVtbl[5]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (D3D11VideoProcessorInputViewDesc*)ppDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorInputView(ref ID3D11Resource pResource, ref ID3D11VideoProcessorEnumerator pEnum, ref D3D11VideoProcessorInputViewDesc pDesc, ref ID3D11VideoProcessorInputView* ppVPIView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
					{
						fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, HResult>)(LpVtbl[5]))(ptr, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (D3D11VideoProcessorInputViewDesc*)ppDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorOutputView(ID3D11Resource* pResource, ID3D11VideoProcessorEnumerator* pEnum, D3D11VideoProcessorOutputViewDesc* pDesc, ID3D11VideoProcessorOutputView** ppVPOView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(LpVtbl[6]))(ptr, pResource, pEnum, pDesc, ppVPOView);
			return ret;
		}

		public readonly unsafe HResult CreateVideoProcessorOutputView(ref ID3D11Resource pResource, ID3D11VideoProcessorEnumerator* pEnum, D3D11VideoProcessorOutputViewDesc* pDesc, ID3D11VideoProcessorOutputView** ppVPOView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(LpVtbl[6]))(ptr, (ID3D11Resource*)ppResource, pEnum, pDesc, ppVPOView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateVideoProcessorOutputView(ID3D11Resource* pResource, ref ID3D11VideoProcessorEnumerator pEnum, D3D11VideoProcessorOutputViewDesc* pDesc, ID3D11VideoProcessorOutputView** ppVPOView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(LpVtbl[6]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, ppVPOView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateVideoProcessorOutputView(ref ID3D11Resource pResource, ref ID3D11VideoProcessorEnumerator pEnum, D3D11VideoProcessorOutputViewDesc* pDesc, ID3D11VideoProcessorOutputView** ppVPOView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(LpVtbl[6]))(ptr, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, ppVPOView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorOutputView(ID3D11Resource* pResource, ID3D11VideoProcessorEnumerator* pEnum, ref D3D11VideoProcessorOutputViewDesc pDesc, ID3D11VideoProcessorOutputView** ppVPOView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(LpVtbl[6]))(ptr, pResource, pEnum, (D3D11VideoProcessorOutputViewDesc*)ppDesc, ppVPOView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateVideoProcessorOutputView(ref ID3D11Resource pResource, ID3D11VideoProcessorEnumerator* pEnum, ref D3D11VideoProcessorOutputViewDesc pDesc, ID3D11VideoProcessorOutputView** ppVPOView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(LpVtbl[6]))(ptr, (ID3D11Resource*)ppResource, pEnum, (D3D11VideoProcessorOutputViewDesc*)ppDesc, ppVPOView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorOutputView(ID3D11Resource* pResource, ref ID3D11VideoProcessorEnumerator pEnum, ref D3D11VideoProcessorOutputViewDesc pDesc, ID3D11VideoProcessorOutputView** ppVPOView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(LpVtbl[6]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (D3D11VideoProcessorOutputViewDesc*)ppDesc, ppVPOView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorOutputView(ref ID3D11Resource pResource, ref ID3D11VideoProcessorEnumerator pEnum, ref D3D11VideoProcessorOutputViewDesc pDesc, ID3D11VideoProcessorOutputView** ppVPOView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(LpVtbl[6]))(ptr, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (D3D11VideoProcessorOutputViewDesc*)ppDesc, ppVPOView);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorOutputView(ID3D11Resource* pResource, ID3D11VideoProcessorEnumerator* pEnum, D3D11VideoProcessorOutputViewDesc* pDesc, ref ID3D11VideoProcessorOutputView* ppVPOView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(LpVtbl[6]))(ptr, pResource, pEnum, pDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
				return ret;
			}
		}

		public readonly unsafe HResult CreateVideoProcessorOutputView(ref ID3D11Resource pResource, ID3D11VideoProcessorEnumerator* pEnum, D3D11VideoProcessorOutputViewDesc* pDesc, ref ID3D11VideoProcessorOutputView* ppVPOView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(LpVtbl[6]))(ptr, (ID3D11Resource*)ppResource, pEnum, pDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorOutputView(ID3D11Resource* pResource, ref ID3D11VideoProcessorEnumerator pEnum, D3D11VideoProcessorOutputViewDesc* pDesc, ref ID3D11VideoProcessorOutputView* ppVPOView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(LpVtbl[6]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorOutputView(ref ID3D11Resource pResource, ref ID3D11VideoProcessorEnumerator pEnum, D3D11VideoProcessorOutputViewDesc* pDesc, ref ID3D11VideoProcessorOutputView* ppVPOView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(LpVtbl[6]))(ptr, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorOutputView(ID3D11Resource* pResource, ID3D11VideoProcessorEnumerator* pEnum, ref D3D11VideoProcessorOutputViewDesc pDesc, ref ID3D11VideoProcessorOutputView* ppVPOView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(LpVtbl[6]))(ptr, pResource, pEnum, (D3D11VideoProcessorOutputViewDesc*)ppDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorOutputView(ref ID3D11Resource pResource, ID3D11VideoProcessorEnumerator* pEnum, ref D3D11VideoProcessorOutputViewDesc pDesc, ref ID3D11VideoProcessorOutputView* ppVPOView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(LpVtbl[6]))(ptr, (ID3D11Resource*)ppResource, pEnum, (D3D11VideoProcessorOutputViewDesc*)ppDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorOutputView(ID3D11Resource* pResource, ref ID3D11VideoProcessorEnumerator pEnum, ref D3D11VideoProcessorOutputViewDesc pDesc, ref ID3D11VideoProcessorOutputView* ppVPOView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(LpVtbl[6]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (D3D11VideoProcessorOutputViewDesc*)ppDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorOutputView(ref ID3D11Resource pResource, ref ID3D11VideoProcessorEnumerator pEnum, ref D3D11VideoProcessorOutputViewDesc pDesc, ref ID3D11VideoProcessorOutputView* ppVPOView)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
					{
						fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, HResult>)(LpVtbl[6]))(ptr, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (D3D11VideoProcessorOutputViewDesc*)ppDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateVideoProcessorEnumerator(D3D11VideoProcessorContentDesc* pDesc, ID3D11VideoProcessorEnumerator** ppEnum)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoProcessorContentDesc*, ID3D11VideoProcessorEnumerator**, HResult>)(LpVtbl[7]))(ptr, pDesc, ppEnum);
			return ret;
		}

		public readonly unsafe HResult CreateVideoProcessorEnumerator(ref D3D11VideoProcessorContentDesc pDesc, ID3D11VideoProcessorEnumerator** ppEnum)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorContentDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoProcessorContentDesc*, ID3D11VideoProcessorEnumerator**, HResult>)(LpVtbl[7]))(ptr, (D3D11VideoProcessorContentDesc*)ppDesc, ppEnum);
				return ret;
			}
		}

		public readonly unsafe HResult CreateVideoProcessorEnumerator(D3D11VideoProcessorContentDesc* pDesc, ref ID3D11VideoProcessorEnumerator* ppEnum)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator** pppEnum = &ppEnum)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoProcessorContentDesc*, ID3D11VideoProcessorEnumerator**, HResult>)(LpVtbl[7]))(ptr, pDesc, (ID3D11VideoProcessorEnumerator**)pppEnum);
				return ret;
			}
		}

		public readonly unsafe HResult CreateVideoProcessorEnumerator(ref D3D11VideoProcessorContentDesc pDesc, ref ID3D11VideoProcessorEnumerator* ppEnum)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorContentDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11VideoProcessorEnumerator** pppEnum = &ppEnum)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoProcessorContentDesc*, ID3D11VideoProcessorEnumerator**, HResult>)(LpVtbl[7]))(ptr, (D3D11VideoProcessorContentDesc*)ppDesc, (ID3D11VideoProcessorEnumerator**)pppEnum);
					return ret;
				}
			}
		}

		public readonly unsafe uint GetVideoDecoderProfileCount()
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, uint>)(LpVtbl[8]))(ptr);
			return ret;
		}

		public readonly unsafe HResult GetVideoDecoderProfile(uint index, Guid* pDecoderProfile)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, uint, Guid*, HResult>)(LpVtbl[9]))(ptr, index, pDecoderProfile);
			return ret;
		}

		public readonly unsafe HResult GetVideoDecoderProfile(uint index, ref Guid pDecoderProfile)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, uint, Guid*, HResult>)(LpVtbl[9]))(ptr, index, (Guid*)ppDecoderProfile);
				return ret;
			}
		}

		public readonly unsafe HResult CheckVideoDecoderFormat(Guid* pDecoderProfile, DxgiFormat format, int* pSupported)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, DxgiFormat, int*, HResult>)(LpVtbl[10]))(ptr, pDecoderProfile, format, pSupported);
			return ret;
		}

		public readonly unsafe HResult CheckVideoDecoderFormat(ref Guid pDecoderProfile, DxgiFormat format, int* pSupported)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, DxgiFormat, int*, HResult>)(LpVtbl[10]))(ptr, (Guid*)ppDecoderProfile, format, pSupported);
				return ret;
			}
		}

		public readonly unsafe HResult CheckVideoDecoderFormat(Guid* pDecoderProfile, DxgiFormat format, ref int pSupported)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppSupported = &pSupported)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, DxgiFormat, int*, HResult>)(LpVtbl[10]))(ptr, pDecoderProfile, format, (int*)ppSupported);
				return ret;
			}
		}

		public readonly unsafe HResult CheckVideoDecoderFormat(ref Guid pDecoderProfile, DxgiFormat format, ref int pSupported)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (int* ppSupported = &pSupported)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, DxgiFormat, int*, HResult>)(LpVtbl[10]))(ptr, (Guid*)ppDecoderProfile, format, (int*)ppSupported);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetVideoDecoderConfigCount(D3D11VideoDecoderDesc* pDesc, uint* pCount)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, uint*, HResult>)(LpVtbl[11]))(ptr, pDesc, pCount);
			return ret;
		}

		public readonly unsafe HResult GetVideoDecoderConfigCount(ref D3D11VideoDecoderDesc pDesc, uint* pCount)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, uint*, HResult>)(LpVtbl[11]))(ptr, (D3D11VideoDecoderDesc*)ppDesc, pCount);
				return ret;
			}
		}

		public readonly unsafe HResult GetVideoDecoderConfigCount(D3D11VideoDecoderDesc* pDesc, ref uint pCount)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, uint*, HResult>)(LpVtbl[11]))(ptr, pDesc, (uint*)ppCount);
				return ret;
			}
		}

		public readonly unsafe HResult GetVideoDecoderConfigCount(ref D3D11VideoDecoderDesc pDesc, ref uint pCount)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppCount = &pCount)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, uint*, HResult>)(LpVtbl[11]))(ptr, (D3D11VideoDecoderDesc*)ppDesc, (uint*)ppCount);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetVideoDecoderConfig(D3D11VideoDecoderDesc* pDesc, uint index, D3D11VideoDecoderConfig* pConfig)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, uint, D3D11VideoDecoderConfig*, HResult>)(LpVtbl[12]))(ptr, pDesc, index, pConfig);
			return ret;
		}

		public readonly unsafe HResult GetVideoDecoderConfig(ref D3D11VideoDecoderDesc pDesc, uint index, D3D11VideoDecoderConfig* pConfig)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, uint, D3D11VideoDecoderConfig*, HResult>)(LpVtbl[12]))(ptr, (D3D11VideoDecoderDesc*)ppDesc, index, pConfig);
				return ret;
			}
		}

		public readonly unsafe HResult GetVideoDecoderConfig(D3D11VideoDecoderDesc* pDesc, uint index, ref D3D11VideoDecoderConfig pConfig)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppConfig = &pConfig)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, uint, D3D11VideoDecoderConfig*, HResult>)(LpVtbl[12]))(ptr, pDesc, index, (D3D11VideoDecoderConfig*)ppConfig);
				return ret;
			}
		}

		public readonly unsafe HResult GetVideoDecoderConfig(ref D3D11VideoDecoderDesc pDesc, uint index, ref D3D11VideoDecoderConfig pConfig)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppDesc = &pDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppConfig = &pConfig)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, uint, D3D11VideoDecoderConfig*, HResult>)(LpVtbl[12]))(ptr, (D3D11VideoDecoderDesc*)ppDesc, index, (D3D11VideoDecoderConfig*)ppConfig);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetContentProtectionCaps(Guid* pCryptoType, Guid* pDecoderProfile, D3D11VideoContentProtectionCaps* pCaps)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, D3D11VideoContentProtectionCaps*, HResult>)(LpVtbl[13]))(ptr, pCryptoType, pDecoderProfile, pCaps);
			return ret;
		}

		public readonly unsafe HResult GetContentProtectionCaps(ref Guid pCryptoType, Guid* pDecoderProfile, D3D11VideoContentProtectionCaps* pCaps)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, D3D11VideoContentProtectionCaps*, HResult>)(LpVtbl[13]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, pCaps);
				return ret;
			}
		}

		public readonly unsafe HResult GetContentProtectionCaps(Guid* pCryptoType, ref Guid pDecoderProfile, D3D11VideoContentProtectionCaps* pCaps)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, D3D11VideoContentProtectionCaps*, HResult>)(LpVtbl[13]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, pCaps);
				return ret;
			}
		}

		public readonly unsafe HResult GetContentProtectionCaps(ref Guid pCryptoType, ref Guid pDecoderProfile, D3D11VideoContentProtectionCaps* pCaps)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, D3D11VideoContentProtectionCaps*, HResult>)(LpVtbl[13]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, pCaps);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetContentProtectionCaps(Guid* pCryptoType, Guid* pDecoderProfile, ref D3D11VideoContentProtectionCaps pCaps)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoContentProtectionCaps* ppCaps = &pCaps)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, D3D11VideoContentProtectionCaps*, HResult>)(LpVtbl[13]))(ptr, pCryptoType, pDecoderProfile, (D3D11VideoContentProtectionCaps*)ppCaps);
				return ret;
			}
		}

		public readonly unsafe HResult GetContentProtectionCaps(ref Guid pCryptoType, Guid* pDecoderProfile, ref D3D11VideoContentProtectionCaps pCaps)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (D3D11VideoContentProtectionCaps* ppCaps = &pCaps)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, D3D11VideoContentProtectionCaps*, HResult>)(LpVtbl[13]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, (D3D11VideoContentProtectionCaps*)ppCaps);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetContentProtectionCaps(Guid* pCryptoType, ref Guid pDecoderProfile, ref D3D11VideoContentProtectionCaps pCaps)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (D3D11VideoContentProtectionCaps* ppCaps = &pCaps)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, D3D11VideoContentProtectionCaps*, HResult>)(LpVtbl[13]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, (D3D11VideoContentProtectionCaps*)ppCaps);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetContentProtectionCaps(ref Guid pCryptoType, ref Guid pDecoderProfile, ref D3D11VideoContentProtectionCaps pCaps)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (D3D11VideoContentProtectionCaps* ppCaps = &pCaps)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, D3D11VideoContentProtectionCaps*, HResult>)(LpVtbl[13]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, (D3D11VideoContentProtectionCaps*)ppCaps);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckCryptoKeyExchange(Guid* pCryptoType, Guid* pDecoderProfile, uint index, Guid* pKeyExchangeType)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, HResult>)(LpVtbl[14]))(ptr, pCryptoType, pDecoderProfile, index, pKeyExchangeType);
			return ret;
		}

		public readonly unsafe HResult CheckCryptoKeyExchange(ref Guid pCryptoType, Guid* pDecoderProfile, uint index, Guid* pKeyExchangeType)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, HResult>)(LpVtbl[14]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, index, pKeyExchangeType);
				return ret;
			}
		}

		public readonly unsafe HResult CheckCryptoKeyExchange(Guid* pCryptoType, ref Guid pDecoderProfile, uint index, Guid* pKeyExchangeType)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, HResult>)(LpVtbl[14]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, index, pKeyExchangeType);
				return ret;
			}
		}

		public readonly unsafe HResult CheckCryptoKeyExchange(ref Guid pCryptoType, ref Guid pDecoderProfile, uint index, Guid* pKeyExchangeType)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, HResult>)(LpVtbl[14]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, index, pKeyExchangeType);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckCryptoKeyExchange(Guid* pCryptoType, Guid* pDecoderProfile, uint index, ref Guid pKeyExchangeType)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, HResult>)(LpVtbl[14]))(ptr, pCryptoType, pDecoderProfile, index, (Guid*)ppKeyExchangeType);
				return ret;
			}
		}

		public readonly unsafe HResult CheckCryptoKeyExchange(ref Guid pCryptoType, Guid* pDecoderProfile, uint index, ref Guid pKeyExchangeType)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, HResult>)(LpVtbl[14]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, index, (Guid*)ppKeyExchangeType);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckCryptoKeyExchange(Guid* pCryptoType, ref Guid pDecoderProfile, uint index, ref Guid pKeyExchangeType)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, HResult>)(LpVtbl[14]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, index, (Guid*)ppKeyExchangeType);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckCryptoKeyExchange(ref Guid pCryptoType, ref Guid pDecoderProfile, uint index, ref Guid pKeyExchangeType)
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, HResult>)(LpVtbl[14]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, index, (Guid*)ppKeyExchangeType);
						return ret;
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11VideoDevice value)
		{
			return Unsafe.As<ID3D11VideoDevice, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_VIDEO_CONTENT_PROTECTION_CAPS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoContentProtectionCaps
	{
		[NativeName("Caps")]
		public uint Caps;
		[NativeName("KeyExchangeTypeCount")]
		public uint KeyExchangeTypeCount;
		[NativeName("BlockAlignmentSize")]
		public uint BlockAlignmentSize;
		[NativeName("ProtectedMemorySize")]
		public ulong ProtectedMemorySize;


	}

	[NativeName("CD3D11_DEFAULT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11Default
	{


	}

	[NativeName("D3D11_DRAW_INSTANCED_INDIRECT_ARGS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11DrawInstancedIndirectArgs
	{
		[NativeName("VertexCountPerInstance")]
		public uint VertexCountPerInstance;
		[NativeName("InstanceCount")]
		public uint InstanceCount;
		[NativeName("StartVertexLocation")]
		public uint StartVertexLocation;
		[NativeName("StartInstanceLocation")]
		public uint StartInstanceLocation;


	}

	[NativeName("D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11DrawIndexedInstancedIndirectArgs
	{
		[NativeName("IndexCountPerInstance")]
		public uint IndexCountPerInstance;
		[NativeName("InstanceCount")]
		public uint InstanceCount;
		[NativeName("StartIndexLocation")]
		public uint StartIndexLocation;
		[NativeName("BaseVertexLocation")]
		public int BaseVertexLocation;
		[NativeName("StartInstanceLocation")]
		public uint StartInstanceLocation;


	}

	[NativeName("CD3D11_RECT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11Rect
	{


	}

	[NativeName("CD3D11_BOX")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11Box
	{


	}

	[NativeName("CD3D11_DEPTH_STENCIL_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11DepthStencilDesc
	{


	}

	[NativeName("CD3D11_BLEND_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11BlendDesc
	{


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0003 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("CD3D11_RASTERIZER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11RasterizerDesc
	{


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0005 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("CD3D11_BUFFER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11BufferDesc
	{


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0006 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("CD3D11_TEXTURE1D_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11Texture1DDesc
	{


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0007 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("CD3D11_TEXTURE2D_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11Texture2DDesc
	{


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0008 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("CD3D11_TEXTURE3D_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11Texture3DDesc
	{


	}

	[NativeName("CD3D11_SHADER_RESOURCE_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11ShaderResourceViewDesc
	{


	}

	[NativeName("CD3D11_RENDER_TARGET_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11RenderTargetViewDesc
	{


	}

	[NativeName("CD3D11_VIEWPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11Viewport
	{


	}

	[NativeName("CD3D11_DEPTH_STENCIL_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11DepthStencilViewDesc
	{


	}

	[NativeName("CD3D11_UNORDERED_ACCESS_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11UnorderedAccessViewDesc
	{


	}

	[NativeName("CD3D11_SAMPLER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11SamplerDesc
	{


	}

	[NativeName("CD3D11_QUERY_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11QueryDesc
	{


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0025 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D11_QUERY_DATA_TIMESTAMP_DISJOINT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11QueryDataTimestampDisjoint
	{
		[NativeName("Frequency")]
		public ulong Frequency;
		[NativeName("Disjoint")]
		public int Disjoint;


	}

	[NativeName("D3D11_QUERY_DATA_PIPELINE_STATISTICS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11QueryDataPipelineStatistics
	{
		[NativeName("IAVertices")]
		public ulong IAVertices;
		[NativeName("IAPrimitives")]
		public ulong IAPrimitives;
		[NativeName("VSInvocations")]
		public ulong VSInvocations;
		[NativeName("GSInvocations")]
		public ulong GSInvocations;
		[NativeName("GSPrimitives")]
		public ulong GSPrimitives;
		[NativeName("CInvocations")]
		public ulong CInvocations;
		[NativeName("CPrimitives")]
		public ulong CPrimitives;
		[NativeName("PSInvocations")]
		public ulong PSInvocations;
		[NativeName("HSInvocations")]
		public ulong HSInvocations;
		[NativeName("DSInvocations")]
		public ulong DSInvocations;
		[NativeName("CSInvocations")]
		public ulong CSInvocations;


	}

	[NativeName("D3D11_QUERY_DATA_SO_STATISTICS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11QueryDataSoStatistics
	{
		[NativeName("NumPrimitivesWritten")]
		public ulong NumPrimitivesWritten;
		[NativeName("PrimitivesStorageNeeded")]
		public ulong PrimitivesStorageNeeded;


	}

	[NativeName("CD3D11_COUNTER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11CounterDesc
	{


	}

	[NativeName("D3D11_FEATURE_DATA_THREADING")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataThreading
	{
		[NativeName("DriverConcurrentCreates")]
		public int DriverConcurrentCreates;
		[NativeName("DriverCommandLists")]
		public int DriverCommandLists;


	}

	[NativeName("D3D11_FEATURE_DATA_DOUBLES")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataDoubles
	{
		[NativeName("DoublePrecisionFloatShaderOps")]
		public int DoublePrecisionFloatShaderOps;


	}

	[NativeName("D3D11_FEATURE_DATA_FORMAT_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataFormatSupport
	{
		[NativeName("InFormat")]
		public DxgiFormat InFormat;
		[NativeName("OutFormatSupport")]
		public uint OutFormatSupport;


	}

	[NativeName("D3D11_FEATURE_DATA_FORMAT_SUPPORT2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataFormatSupport2
	{
		[NativeName("InFormat")]
		public DxgiFormat InFormat;
		[NativeName("OutFormatSupport2")]
		public uint OutFormatSupport2;


	}

	[NativeName("D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D10XHardwareOptions
	{
		[NativeName("ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x")]
		public int ComputeShadersPlusRawAndStructuredBuffersViaShader4X;


	}

	/// <summary>
	/// =============================================================================<br/>
	/// In the D3D11_FEATURE_DATA_D3D11_OPTIONS struct below, <br/>
	/// the following groupings of capabilities will always be set identically. <br/>
	/// That is, all the BOOLs in a grouping will be TRUE or FALSE together. <br/>
	/// Group: DiscardAPIsSeenByDriver, FlagsForUpdateAndCopySeenByDriver <br/>
	/// Group: ClearView, CopyWithOverlap, ConstantBufferPartialUpdate <br/>
	/// ConstantBufferOffsetting, MapNoOverwriteOnDynamicConstantBuffer <br/>
	/// Group: MapNoOverwriteOnDynamicBufferSRV, <br/>
	/// MultisampleRTVWithForcedSampleCountOne <br/>
	/// </summary>
	[NativeName("D3D11_FEATURE_DATA_D3D11_OPTIONS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D11Options
	{
		[NativeName("OutputMergerLogicOp")]
		public int OutputMergerLogicOp;
		[NativeName("UAVOnlyRenderingForcedSampleCount")]
		public int UAVOnlyRenderingForcedSampleCount;
		[NativeName("DiscardAPIsSeenByDriver")]
		public int DiscardAPIsSeenByDriver;
		[NativeName("FlagsForUpdateAndCopySeenByDriver")]
		public int FlagsForUpdateAndCopySeenByDriver;
		[NativeName("ClearView")]
		public int ClearView;
		[NativeName("CopyWithOverlap")]
		public int CopyWithOverlap;
		[NativeName("ConstantBufferPartialUpdate")]
		public int ConstantBufferPartialUpdate;
		[NativeName("ConstantBufferOffsetting")]
		public int ConstantBufferOffsetting;
		[NativeName("MapNoOverwriteOnDynamicConstantBuffer")]
		public int MapNoOverwriteOnDynamicConstantBuffer;
		[NativeName("MapNoOverwriteOnDynamicBufferSRV")]
		public int MapNoOverwriteOnDynamicBufferSRV;
		[NativeName("MultisampleRTVWithForcedSampleCountOne")]
		public int MultisampleRTVWithForcedSampleCountOne;
		[NativeName("SAD4ShaderInstructions")]
		public int SAD4ShaderInstructions;
		[NativeName("ExtendedDoublesShaderInstructions")]
		public int ExtendedDoublesShaderInstructions;
		[NativeName("ExtendedResourceSharing")]
		public int ExtendedResourceSharing;


	}

	[NativeName("D3D11_FEATURE_DATA_ARCHITECTURE_INFO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataArchitectureInfo
	{
		[NativeName("TileBasedDeferredRenderer")]
		public int TileBasedDeferredRenderer;


	}

	[NativeName("D3D11_FEATURE_DATA_D3D9_OPTIONS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D9Options
	{
		[NativeName("FullNonPow2TextureSupport")]
		public int FullNonPow2TextureSupport;


	}

	[NativeName("D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D9ShadowSupport
	{
		[NativeName("SupportsDepthAsTextureWithLessEqualComparisonFilter")]
		public int SupportsDepthAsTextureWithLessEqualComparisonFilter;


	}

	[NativeName("D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataShaderMinPrecisionSupport
	{
		[NativeName("PixelShaderMinPrecision")]
		public uint PixelShaderMinPrecision;
		[NativeName("AllOtherShaderStagesMinPrecision")]
		public uint AllOtherShaderStagesMinPrecision;


	}

	[NativeName("D3D11_FEATURE_DATA_D3D11_OPTIONS1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D11Options1
	{
		[NativeName("TiledResourcesTier")]
		public D3D11TiledResourcesTier TiledResourcesTier;
		[NativeName("MinMaxFiltering")]
		public int MinMaxFiltering;
		[NativeName("ClearViewAlsoSupportsDepthOnlyFormats")]
		public int ClearViewAlsoSupportsDepthOnlyFormats;
		[NativeName("MapOnDefaultBuffers")]
		public int MapOnDefaultBuffers;


	}

	[NativeName("D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D9SimpleInstancingSupport
	{
		[NativeName("SimpleInstancingSupported")]
		public int SimpleInstancingSupported;


	}

	[NativeName("D3D11_FEATURE_DATA_MARKER_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataMarkerSupport
	{
		[NativeName("Profile")]
		public int Profile;


	}

	[NativeName("D3D11_FEATURE_DATA_D3D9_OPTIONS1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D9Options1
	{
		[NativeName("FullNonPow2TextureSupported")]
		public int FullNonPow2TextureSupported;
		[NativeName("DepthAsTextureWithLessEqualComparisonFilterSupported")]
		public int DepthAsTextureWithLessEqualComparisonFilterSupported;
		[NativeName("SimpleInstancingSupported")]
		public int SimpleInstancingSupported;
		[NativeName("TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported")]
		public int TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported;


	}

	[NativeName("D3D11_FEATURE_DATA_D3D11_OPTIONS2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D11Options2
	{
		[NativeName("PSSpecifiedStencilRefSupported")]
		public int PSSpecifiedStencilRefSupported;
		[NativeName("TypedUAVLoadAdditionalFormats")]
		public int TypedUAVLoadAdditionalFormats;
		[NativeName("ROVsSupported")]
		public int ROVsSupported;
		[NativeName("ConservativeRasterizationTier")]
		public D3D11ConservativeRasterizationTier ConservativeRasterizationTier;
		[NativeName("TiledResourcesTier")]
		public D3D11TiledResourcesTier TiledResourcesTier;
		[NativeName("MapOnDefaultTextures")]
		public int MapOnDefaultTextures;
		[NativeName("StandardSwizzle")]
		public int StandardSwizzle;
		[NativeName("UnifiedMemoryArchitecture")]
		public int UnifiedMemoryArchitecture;


	}

	[NativeName("D3D11_FEATURE_DATA_D3D11_OPTIONS3")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D11Options3
	{
		[NativeName("VPAndRTArrayIndexFromAnyShaderFeedingRasterizer")]
		public int VPAndRTArrayIndexFromAnyShaderFeedingRasterizer;


	}

	[NativeName("D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataGpuVirtualAddressSupport
	{
		[NativeName("MaxGPUVirtualAddressBitsPerResource")]
		public uint MaxGPUVirtualAddressBitsPerResource;
		[NativeName("MaxGPUVirtualAddressBitsPerProcess")]
		public uint MaxGPUVirtualAddressBitsPerProcess;


	}

	[NativeName("D3D11_FEATURE_DATA_SHADER_CACHE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataShaderCache
	{
		[NativeName("SupportFlags")]
		public uint SupportFlags;


	}

	[NativeName("D3D11_FEATURE_DATA_DISPLAYABLE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataDisplayable
	{
		[NativeName("DisplayableTexture")]
		public int DisplayableTexture;
		[NativeName("SharedResourceTier")]
		public D3D11SharedResourceTier SharedResourceTier;


	}

	[NativeName("D3D11_FEATURE_DATA_D3D11_OPTIONS5")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D11Options5
	{
		[NativeName("SharedResourceTier")]
		public D3D11SharedResourceTier SharedResourceTier;


	}

	[NativeName("CD3D11_VIDEO_DEFAULT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11VideoDefault
	{


	}

	[NativeName("_D3D11_AES_CTR_IV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AesCtrIv
	{
		[NativeName("IV")]
		public ulong IV;
		[NativeName("Count")]
		public ulong Count;


	}

	[NativeName("D3D11_AUTHENTICATED_QUERY_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryInput
	{
		[NativeName("QueryType")]
		public Guid QueryType;
		[NativeName("hChannel")]
		public nint HChannel;
		[NativeName("SequenceNumber")]
		public uint SequenceNumber;


	}

	[NativeName("D3D11_AUTHENTICATED_QUERY_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryOutput
	{
		[NativeName("omac")]
		public D3D11Omac Omac;
		[NativeName("QueryType")]
		public Guid QueryType;
		[NativeName("hChannel")]
		public nint HChannel;
		[NativeName("SequenceNumber")]
		public uint SequenceNumber;
		[NativeName("ReturnCode")]
		public HResult ReturnCode;


	}

	[NativeName("__MIDL___MIDL_itf_d3d11_0000_0034_0001")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct MIDLMIDLItfD3D11000000340001
	{
		[NativeName("ProtectionEnabled")]
		public uint ProtectionEnabled;
		[NativeName("OverlayOrFullscreenRequired")]
		public uint OverlayOrFullscreenRequired;
		[NativeName("Reserved")]
		public uint Reserved;


	}

	[NativeName("D3D11_AUTHENTICATED_PROTECTION_FLAGS")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D11AuthenticatedProtectionFlags
	{
		[NativeName("Flags")]
		[FieldOffset(0)]
		public MIDLMIDLItfD3D11000000340001 Flags;
		[NativeName("Value")]
		[FieldOffset(0)]
		public uint Value;


	}

	[NativeName("D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryProtectionOutput
	{
		[NativeName("Output")]
		public D3D11AuthenticatedQueryOutput Output;
		[NativeName("ProtectionFlags")]
		public D3D11AuthenticatedProtectionFlags ProtectionFlags;


	}

	[NativeName("D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryChannelTypeOutput
	{
		[NativeName("Output")]
		public D3D11AuthenticatedQueryOutput Output;
		[NativeName("ChannelType")]
		public D3D11AuthenticatedChannelType ChannelType;


	}

	[NativeName("D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryDeviceHandleOutput
	{
		[NativeName("Output")]
		public D3D11AuthenticatedQueryOutput Output;
		[NativeName("DeviceHandle")]
		public nint DeviceHandle;


	}

	[NativeName("D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryCryptoSessionInput
	{
		[NativeName("Input")]
		public D3D11AuthenticatedQueryInput Input;
		[NativeName("DecoderHandle")]
		public nint DecoderHandle;


	}

	[NativeName("D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryCryptoSessionOutput
	{
		[NativeName("Output")]
		public D3D11AuthenticatedQueryOutput Output;
		[NativeName("DecoderHandle")]
		public nint DecoderHandle;
		[NativeName("CryptoSessionHandle")]
		public nint CryptoSessionHandle;
		[NativeName("DeviceHandle")]
		public nint DeviceHandle;


	}

	[NativeName("D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryRestrictedSharedResourceProcessCountOutput
	{
		[NativeName("Output")]
		public D3D11AuthenticatedQueryOutput Output;
		[NativeName("RestrictedSharedResourceProcessCount")]
		public uint RestrictedSharedResourceProcessCount;


	}

	[NativeName("D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryRestrictedSharedResourceProcessInput
	{
		[NativeName("Input")]
		public D3D11AuthenticatedQueryInput Input;
		[NativeName("ProcessIndex")]
		public uint ProcessIndex;


	}

	[NativeName("D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryRestrictedSharedResourceProcessOutput
	{
		[NativeName("Output")]
		public D3D11AuthenticatedQueryOutput Output;
		[NativeName("ProcessIndex")]
		public uint ProcessIndex;
		[NativeName("ProcessIdentifier")]
		public D3D11AuthenticatedProcessIdentifierType ProcessIdentifier;
		[NativeName("ProcessHandle")]
		public nint ProcessHandle;


	}

	[NativeName("D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryUnrestrictedProtectedSharedResourceCountOutput
	{
		[NativeName("Output")]
		public D3D11AuthenticatedQueryOutput Output;
		[NativeName("UnrestrictedProtectedSharedResourceCount")]
		public uint UnrestrictedProtectedSharedResourceCount;


	}

	[NativeName("D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryOutputIdCountInput
	{
		[NativeName("Input")]
		public D3D11AuthenticatedQueryInput Input;
		[NativeName("DeviceHandle")]
		public nint DeviceHandle;
		[NativeName("CryptoSessionHandle")]
		public nint CryptoSessionHandle;


	}

	[NativeName("D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryOutputIdCountOutput
	{
		[NativeName("Output")]
		public D3D11AuthenticatedQueryOutput Output;
		[NativeName("DeviceHandle")]
		public nint DeviceHandle;
		[NativeName("CryptoSessionHandle")]
		public nint CryptoSessionHandle;
		[NativeName("OutputIDCount")]
		public uint OutputIDCount;


	}

	[NativeName("D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryOutputIdInput
	{
		[NativeName("Input")]
		public D3D11AuthenticatedQueryInput Input;
		[NativeName("DeviceHandle")]
		public nint DeviceHandle;
		[NativeName("CryptoSessionHandle")]
		public nint CryptoSessionHandle;
		[NativeName("OutputIDIndex")]
		public uint OutputIDIndex;


	}

	[NativeName("D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryOutputIdOutput
	{
		[NativeName("Output")]
		public D3D11AuthenticatedQueryOutput Output;
		[NativeName("DeviceHandle")]
		public nint DeviceHandle;
		[NativeName("CryptoSessionHandle")]
		public nint CryptoSessionHandle;
		[NativeName("OutputIDIndex")]
		public uint OutputIDIndex;
		[NativeName("OutputID")]
		public ulong OutputID;


	}

	[NativeName("D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryAcessibilityOutput
	{
		[NativeName("Output")]
		public D3D11AuthenticatedQueryOutput Output;
		[NativeName("BusType")]
		public D3D11BusType BusType;
		[NativeName("AccessibleInContiguousBlocks")]
		public int AccessibleInContiguousBlocks;
		[NativeName("AccessibleInNonContiguousBlocks")]
		public int AccessibleInNonContiguousBlocks;


	}

	[NativeName("D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryAccessibilityEncryptionGuidCountOutput
	{
		[NativeName("Output")]
		public D3D11AuthenticatedQueryOutput Output;
		[NativeName("EncryptionGuidCount")]
		public uint EncryptionGuidCount;


	}

	[NativeName("D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryAccessibilityEncryptionGuidInput
	{
		[NativeName("Input")]
		public D3D11AuthenticatedQueryInput Input;
		[NativeName("EncryptionGuidIndex")]
		public uint EncryptionGuidIndex;


	}

	[NativeName("D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryAccessibilityEncryptionGuidOutput
	{
		[NativeName("Output")]
		public D3D11AuthenticatedQueryOutput Output;
		[NativeName("EncryptionGuidIndex")]
		public uint EncryptionGuidIndex;
		[NativeName("EncryptionGuid")]
		public Guid EncryptionGuid;


	}

	[NativeName("D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryCurrentAccessibilityEncryptionOutput
	{
		[NativeName("Output")]
		public D3D11AuthenticatedQueryOutput Output;
		[NativeName("EncryptionGuid")]
		public Guid EncryptionGuid;


	}

	[NativeName("D3D11_AUTHENTICATED_CONFIGURE_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedConfigureInput
	{
		[NativeName("omac")]
		public D3D11Omac Omac;
		[NativeName("ConfigureType")]
		public Guid ConfigureType;
		[NativeName("hChannel")]
		public nint HChannel;
		[NativeName("SequenceNumber")]
		public uint SequenceNumber;


	}

	[NativeName("D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedConfigureInitializeInput
	{
		[NativeName("Parameters")]
		public D3D11AuthenticatedConfigureInput Parameters;
		[NativeName("StartSequenceQuery")]
		public uint StartSequenceQuery;
		[NativeName("StartSequenceConfigure")]
		public uint StartSequenceConfigure;


	}

	[NativeName("D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedConfigureProtectionInput
	{
		[NativeName("Parameters")]
		public D3D11AuthenticatedConfigureInput Parameters;
		[NativeName("Protections")]
		public D3D11AuthenticatedProtectionFlags Protections;


	}

	[NativeName("D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedConfigureCryptoSessionInput
	{
		[NativeName("Parameters")]
		public D3D11AuthenticatedConfigureInput Parameters;
		[NativeName("DecoderHandle")]
		public nint DecoderHandle;
		[NativeName("CryptoSessionHandle")]
		public nint CryptoSessionHandle;
		[NativeName("DeviceHandle")]
		public nint DeviceHandle;


	}

	[NativeName("D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedConfigureSharedResourceInput
	{
		[NativeName("Parameters")]
		public D3D11AuthenticatedConfigureInput Parameters;
		[NativeName("ProcessType")]
		public D3D11AuthenticatedProcessIdentifierType ProcessType;
		[NativeName("ProcessHandle")]
		public nint ProcessHandle;
		[NativeName("AllowAccess")]
		public int AllowAccess;


	}

	[NativeName("D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedConfigureAccessibleEncryptionInput
	{
		[NativeName("Parameters")]
		public D3D11AuthenticatedConfigureInput Parameters;
		[NativeName("EncryptionGuid")]
		public Guid EncryptionGuid;


	}

	[Guid("79cf2233-7536-4948-9d36-1e4692dc5760")]
	[NativeName("ID3D11Debug")]
	public partial struct ID3D11Debug : IComObject, IComObject<ID3D11Debug>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("79cf2233-7536-4948-9d36-1e4692dc5760");

		public unsafe ID3D11Debug (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult SetFeatureMask(uint mask)
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, uint, HResult>)(*LpVtbl))(ptr, mask);
			return ret;
		}

		public readonly unsafe uint GetFeatureMask()
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		public readonly unsafe HResult SetPresentPerRenderOpDelay(uint milliseconds)
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, uint, HResult>)(LpVtbl[2]))(ptr, milliseconds);
			return ret;
		}

		public readonly unsafe uint GetPresentPerRenderOpDelay()
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, uint>)(LpVtbl[3]))(ptr);
			return ret;
		}

		public readonly unsafe HResult SetSwapChain(IDXGISwapChain* pSwapChain)
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, IDXGISwapChain*, HResult>)(LpVtbl[4]))(ptr, pSwapChain);
			return ret;
		}

		public readonly unsafe HResult SetSwapChain(ref IDXGISwapChain pSwapChain)
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGISwapChain* ppSwapChain = &pSwapChain)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, IDXGISwapChain*, HResult>)(LpVtbl[4]))(ptr, (IDXGISwapChain*)ppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult GetSwapChain(IDXGISwapChain** ppSwapChain)
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, IDXGISwapChain**, HResult>)(LpVtbl[5]))(ptr, ppSwapChain);
			return ret;
		}

		public readonly unsafe HResult GetSwapChain(ref IDXGISwapChain* ppSwapChain)
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, IDXGISwapChain**, HResult>)(LpVtbl[5]))(ptr, (IDXGISwapChain**)pppSwapChain);
				return ret;
			}
		}

		public readonly unsafe HResult ValidateContext(ID3D11DeviceContext* pContext)
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, ID3D11DeviceContext*, HResult>)(LpVtbl[6]))(ptr, pContext);
			return ret;
		}

		public readonly unsafe HResult ValidateContext(ref ID3D11DeviceContext pContext)
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceContext* ppContext = &pContext)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, ID3D11DeviceContext*, HResult>)(LpVtbl[6]))(ptr, (ID3D11DeviceContext*)ppContext);
				return ret;
			}
		}

		public readonly unsafe HResult ReportLiveDeviceObjects(D3D11RldoFlags flags)
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, D3D11RldoFlags, HResult>)(LpVtbl[7]))(ptr, flags);
			return ret;
		}

		public readonly unsafe HResult ValidateContextForDispatch(ID3D11DeviceContext* pContext)
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, ID3D11DeviceContext*, HResult>)(LpVtbl[8]))(ptr, pContext);
			return ret;
		}

		public readonly unsafe HResult ValidateContextForDispatch(ref ID3D11DeviceContext pContext)
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceContext* ppContext = &pContext)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, ID3D11DeviceContext*, HResult>)(LpVtbl[8]))(ptr, (ID3D11DeviceContext*)ppContext);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11Debug value)
		{
			return Unsafe.As<ID3D11Debug, IUnknown>(ref value);
		}

	}

	[Guid("1ef337e3-58e7-4f83-a692-db221f5ed47e")]
	[NativeName("ID3D11SwitchToRef")]
	public partial struct ID3D11SwitchToRef : IComObject, IComObject<ID3D11SwitchToRef>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("1ef337e3-58e7-4f83-a692-db221f5ed47e");

		public unsafe ID3D11SwitchToRef (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe int SetUseRef(int useRef)
		{
			ID3D11SwitchToRef* ptr = (ID3D11SwitchToRef*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11SwitchToRef*, int, int>)(*LpVtbl))(ptr, useRef);
			return ret;
		}

		public readonly unsafe int GetUseRef()
		{
			ID3D11SwitchToRef* ptr = (ID3D11SwitchToRef*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11SwitchToRef*, int>)(LpVtbl[1]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11SwitchToRef value)
		{
			return Unsafe.As<ID3D11SwitchToRef, IUnknown>(ref value);
		}

	}

	[Guid("1911c771-1587-413e-a7e0-fb26c3de0268")]
	[NativeName("ID3D11TracingDevice")]
	public partial struct ID3D11TracingDevice : IComObject, IComObject<ID3D11TracingDevice>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("1911c771-1587-413e-a7e0-fb26c3de0268");

		public unsafe ID3D11TracingDevice (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult SetShaderTrackingOptionsByType(uint resourceTypeFlags, uint options)
		{
			ID3D11TracingDevice* ptr = (ID3D11TracingDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, uint, uint, HResult>)(*LpVtbl))(ptr, resourceTypeFlags, options);
			return ret;
		}

		public readonly unsafe HResult SetShaderTrackingOptions(IUnknown* pShader, uint options)
		{
			ID3D11TracingDevice* ptr = (ID3D11TracingDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, IUnknown*, uint, HResult>)(LpVtbl[1]))(ptr, pShader, options);
			return ret;
		}

		public readonly unsafe HResult SetShaderTrackingOptions(ref IUnknown pShader, uint options)
		{
			ID3D11TracingDevice* ptr = (ID3D11TracingDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppShader = &pShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, IUnknown*, uint, HResult>)(LpVtbl[1]))(ptr, (IUnknown*)ppShader, options);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11TracingDevice value)
		{
			return Unsafe.As<ID3D11TracingDevice, IUnknown>(ref value);
		}

	}

	[Guid("193dacdf-0db2-4c05-a55c-ef06cac56fd9")]
	[NativeName("ID3D11RefTrackingOptions")]
	public partial struct ID3D11RefTrackingOptions : IComObject, IComObject<ID3D11RefTrackingOptions>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("193dacdf-0db2-4c05-a55c-ef06cac56fd9");

		public unsafe ID3D11RefTrackingOptions (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult SetTrackingOptions(uint uOptions)
		{
			ID3D11RefTrackingOptions* ptr = (ID3D11RefTrackingOptions*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11RefTrackingOptions*, uint, HResult>)(*LpVtbl))(ptr, uOptions);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11RefTrackingOptions value)
		{
			return Unsafe.As<ID3D11RefTrackingOptions, IUnknown>(ref value);
		}

	}

	[Guid("03916615-c644-418c-9bf4-75db5be63ca0")]
	[NativeName("ID3D11RefDefaultTrackingOptions")]
	public partial struct ID3D11RefDefaultTrackingOptions : IComObject, IComObject<ID3D11RefDefaultTrackingOptions>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("03916615-c644-418c-9bf4-75db5be63ca0");

		public unsafe ID3D11RefDefaultTrackingOptions (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult SetTrackingOptions(uint resourceTypeFlags, uint options)
		{
			ID3D11RefDefaultTrackingOptions* ptr = (ID3D11RefDefaultTrackingOptions*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11RefDefaultTrackingOptions*, uint, uint, HResult>)(*LpVtbl))(ptr, resourceTypeFlags, options);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11RefDefaultTrackingOptions value)
		{
			return Unsafe.As<ID3D11RefDefaultTrackingOptions, IUnknown>(ref value);
		}

	}

	[Guid("6543dbb6-1b48-42f5-ab82-e97ec74326f6")]
	[NativeName("ID3D11InfoQueue")]
	public partial struct ID3D11InfoQueue : IComObject, IComObject<ID3D11InfoQueue>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("6543dbb6-1b48-42f5-ab82-e97ec74326f6");

		public unsafe ID3D11InfoQueue (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult SetMessageCountLimit(ulong messageCountLimit)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong, HResult>)(*LpVtbl))(ptr, messageCountLimit);
			return ret;
		}

		public readonly unsafe void ClearStoredMessages()
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, void>)(LpVtbl[1]))(ptr);
		}

		public readonly unsafe HResult GetMessageA(ulong messageIndex, D3D11Message* pMessage, nuint* pMessageByteLength)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong, D3D11Message*, nuint*, HResult>)(LpVtbl[2]))(ptr, messageIndex, pMessage, pMessageByteLength);
			return ret;
		}

		public readonly unsafe HResult GetMessageA(ulong messageIndex, ref D3D11Message pMessage, nuint* pMessageByteLength)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Message* ppMessage = &pMessage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong, D3D11Message*, nuint*, HResult>)(LpVtbl[2]))(ptr, messageIndex, (D3D11Message*)ppMessage, pMessageByteLength);
				return ret;
			}
		}

		public readonly unsafe HResult GetMessageA(ulong messageIndex, D3D11Message* pMessage, ref nuint pMessageByteLength)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nuint* ppMessageByteLength = &pMessageByteLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong, D3D11Message*, nuint*, HResult>)(LpVtbl[2]))(ptr, messageIndex, pMessage, (nuint*)ppMessageByteLength);
				return ret;
			}
		}

		public readonly unsafe HResult GetMessageA(ulong messageIndex, ref D3D11Message pMessage, ref nuint pMessageByteLength)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Message* ppMessage = &pMessage)
			{
				fixed (nuint* ppMessageByteLength = &pMessageByteLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong, D3D11Message*, nuint*, HResult>)(LpVtbl[2]))(ptr, messageIndex, (D3D11Message*)ppMessage, (nuint*)ppMessageByteLength);
					return ret;
				}
			}
		}

		public readonly unsafe ulong GetNumMessagesAllowedByStorageFilter()
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong>)(LpVtbl[3]))(ptr);
			return ret;
		}

		public readonly unsafe ulong GetNumMessagesDeniedByStorageFilter()
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong>)(LpVtbl[4]))(ptr);
			return ret;
		}

		public readonly unsafe ulong GetNumStoredMessages()
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong>)(LpVtbl[5]))(ptr);
			return ret;
		}

		public readonly unsafe ulong GetNumStoredMessagesAllowedByRetrievalFilter()
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong>)(LpVtbl[6]))(ptr);
			return ret;
		}

		public readonly unsafe ulong GetNumMessagesDiscardedByMessageCountLimit()
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong>)(LpVtbl[7]))(ptr);
			return ret;
		}

		public readonly unsafe ulong GetMessageCountLimit()
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong>)(LpVtbl[8]))(ptr);
			return ret;
		}

		public readonly unsafe HResult AddStorageFilterEntries(D3D11InfoQueueFilter* pFilter)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, HResult>)(LpVtbl[9]))(ptr, pFilter);
			return ret;
		}

		public readonly unsafe HResult AddStorageFilterEntries(ref D3D11InfoQueueFilter pFilter)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, HResult>)(LpVtbl[9]))(ptr, (D3D11InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		public readonly unsafe HResult GetStorageFilter(D3D11InfoQueueFilter* pFilter, nuint* pFilterByteLength)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, HResult>)(LpVtbl[10]))(ptr, pFilter, pFilterByteLength);
			return ret;
		}

		public readonly unsafe HResult GetStorageFilter(ref D3D11InfoQueueFilter pFilter, nuint* pFilterByteLength)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, HResult>)(LpVtbl[10]))(ptr, (D3D11InfoQueueFilter*)ppFilter, pFilterByteLength);
				return ret;
			}
		}

		public readonly unsafe HResult GetStorageFilter(D3D11InfoQueueFilter* pFilter, ref nuint pFilterByteLength)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nuint* ppFilterByteLength = &pFilterByteLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, HResult>)(LpVtbl[10]))(ptr, pFilter, (nuint*)ppFilterByteLength);
				return ret;
			}
		}

		public readonly unsafe HResult GetStorageFilter(ref D3D11InfoQueueFilter pFilter, ref nuint pFilterByteLength)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				fixed (nuint* ppFilterByteLength = &pFilterByteLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, HResult>)(LpVtbl[10]))(ptr, (D3D11InfoQueueFilter*)ppFilter, (nuint*)ppFilterByteLength);
					return ret;
				}
			}
		}

		public readonly unsafe void ClearStorageFilter()
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, void>)(LpVtbl[11]))(ptr);
		}

		public readonly unsafe HResult PushEmptyStorageFilter()
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, HResult>)(LpVtbl[12]))(ptr);
			return ret;
		}

		public readonly unsafe HResult PushCopyOfStorageFilter()
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, HResult>)(LpVtbl[13]))(ptr);
			return ret;
		}

		public readonly unsafe HResult PushStorageFilter(D3D11InfoQueueFilter* pFilter)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, HResult>)(LpVtbl[14]))(ptr, pFilter);
			return ret;
		}

		public readonly unsafe HResult PushStorageFilter(ref D3D11InfoQueueFilter pFilter)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, HResult>)(LpVtbl[14]))(ptr, (D3D11InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		public readonly unsafe void PopStorageFilter()
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, void>)(LpVtbl[15]))(ptr);
		}

		public readonly unsafe uint GetStorageFilterStackSize()
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, uint>)(LpVtbl[16]))(ptr);
			return ret;
		}

		public readonly unsafe HResult AddRetrievalFilterEntries(D3D11InfoQueueFilter* pFilter)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, HResult>)(LpVtbl[17]))(ptr, pFilter);
			return ret;
		}

		public readonly unsafe HResult AddRetrievalFilterEntries(ref D3D11InfoQueueFilter pFilter)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, HResult>)(LpVtbl[17]))(ptr, (D3D11InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		public readonly unsafe HResult GetRetrievalFilter(D3D11InfoQueueFilter* pFilter, nuint* pFilterByteLength)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, HResult>)(LpVtbl[18]))(ptr, pFilter, pFilterByteLength);
			return ret;
		}

		public readonly unsafe HResult GetRetrievalFilter(ref D3D11InfoQueueFilter pFilter, nuint* pFilterByteLength)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, HResult>)(LpVtbl[18]))(ptr, (D3D11InfoQueueFilter*)ppFilter, pFilterByteLength);
				return ret;
			}
		}

		public readonly unsafe HResult GetRetrievalFilter(D3D11InfoQueueFilter* pFilter, ref nuint pFilterByteLength)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nuint* ppFilterByteLength = &pFilterByteLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, HResult>)(LpVtbl[18]))(ptr, pFilter, (nuint*)ppFilterByteLength);
				return ret;
			}
		}

		public readonly unsafe HResult GetRetrievalFilter(ref D3D11InfoQueueFilter pFilter, ref nuint pFilterByteLength)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				fixed (nuint* ppFilterByteLength = &pFilterByteLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, HResult>)(LpVtbl[18]))(ptr, (D3D11InfoQueueFilter*)ppFilter, (nuint*)ppFilterByteLength);
					return ret;
				}
			}
		}

		public readonly unsafe void ClearRetrievalFilter()
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, void>)(LpVtbl[19]))(ptr);
		}

		public readonly unsafe HResult PushEmptyRetrievalFilter()
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, HResult>)(LpVtbl[20]))(ptr);
			return ret;
		}

		public readonly unsafe HResult PushCopyOfRetrievalFilter()
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, HResult>)(LpVtbl[21]))(ptr);
			return ret;
		}

		public readonly unsafe HResult PushRetrievalFilter(D3D11InfoQueueFilter* pFilter)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, HResult>)(LpVtbl[22]))(ptr, pFilter);
			return ret;
		}

		public readonly unsafe HResult PushRetrievalFilter(ref D3D11InfoQueueFilter pFilter)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, HResult>)(LpVtbl[22]))(ptr, (D3D11InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		public readonly unsafe void PopRetrievalFilter()
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, void>)(LpVtbl[23]))(ptr);
		}

		public readonly unsafe uint GetRetrievalFilterStackSize()
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, uint>)(LpVtbl[24]))(ptr);
			return ret;
		}

		public readonly unsafe HResult AddMessage(D3D11MessageCategory category, D3D11MessageSeverity severity, D3D11MessageId iD, byte* pDescription)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageCategory, D3D11MessageSeverity, D3D11MessageId, byte*, HResult>)(LpVtbl[25]))(ptr, category, severity, iD, pDescription);
			return ret;
		}

		public readonly unsafe HResult AddApplicationMessage(D3D11MessageSeverity severity, byte* pDescription)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageSeverity, byte*, HResult>)(LpVtbl[26]))(ptr, severity, pDescription);
			return ret;
		}

		public readonly unsafe HResult SetBreakOnCategory(D3D11MessageCategory category, int bEnable)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageCategory, int, HResult>)(LpVtbl[27]))(ptr, category, bEnable);
			return ret;
		}

		public readonly unsafe HResult SetBreakOnSeverity(D3D11MessageSeverity severity, int bEnable)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageSeverity, int, HResult>)(LpVtbl[28]))(ptr, severity, bEnable);
			return ret;
		}

		public readonly unsafe HResult SetBreakOnID(D3D11MessageId iD, int bEnable)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageId, int, HResult>)(LpVtbl[29]))(ptr, iD, bEnable);
			return ret;
		}

		public readonly unsafe int GetBreakOnCategory(D3D11MessageCategory category)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageCategory, int>)(LpVtbl[30]))(ptr, category);
			return ret;
		}

		public readonly unsafe int GetBreakOnSeverity(D3D11MessageSeverity severity)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageSeverity, int>)(LpVtbl[31]))(ptr, severity);
			return ret;
		}

		public readonly unsafe int GetBreakOnID(D3D11MessageId iD)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageId, int>)(LpVtbl[32]))(ptr, iD);
			return ret;
		}

		public readonly unsafe void SetMuteDebugOutput(int bMute)
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, int, void>)(LpVtbl[33]))(ptr, bMute);
		}

		public readonly unsafe int GetMuteDebugOutput()
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, int>)(LpVtbl[34]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11InfoQueue value)
		{
			return Unsafe.As<ID3D11InfoQueue, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_MESSAGE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Message
	{
		[NativeName("Category")]
		public D3D11MessageCategory Category;
		[NativeName("Severity")]
		public D3D11MessageSeverity Severity;
		[NativeName("ID")]
		public D3D11MessageId ID;
		[NativeName("pDescription")]
		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		public unsafe byte* PDescription;

		[NativeName("DescriptionByteLength")]
		public nuint DescriptionByteLength;


	}

	[NativeName("D3D11_INFO_QUEUE_FILTER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11InfoQueueFilter
	{
		[NativeName("AllowList")]
		public D3D11InfoQueueFilterDesc AllowList;
		[NativeName("DenyList")]
		public D3D11InfoQueueFilterDesc DenyList;


	}

	[NativeName("D3D11_INFO_QUEUE_FILTER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11InfoQueueFilterDesc
	{
		[NativeName("NumCategories")]
		public uint NumCategories;
		[NativeName("pCategoryList")]
		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		public unsafe D3D11MessageCategory* PCategoryList;

		[NativeName("NumSeverities")]
		public uint NumSeverities;
		[NativeName("pSeverityList")]
		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		public unsafe D3D11MessageSeverity* PSeverityList;

		[NativeName("NumIDs")]
		public uint NumIDs;
		[NativeName("pIDList")]
		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		public unsafe D3D11MessageId* PIDList;



	}

	[NativeName("_D3D11_SIGNATURE_PARAMETER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11SignatureParameterDesc
	{
		[NativeName("SemanticName")]
		/// <summary>
		/// Name of the semantic<br/>
		/// </summary>
		public unsafe byte* SemanticName;

		[NativeName("SemanticIndex")]
		/// <summary>
		/// Index of the semantic<br/>
		/// </summary>
		public uint SemanticIndex;

		[NativeName("Register")]
		/// <summary>
		/// Number of member variables<br/>
		/// </summary>
		public uint Register;

		[NativeName("SystemValueType")]
		/// <summary>
		/// A predefined system value, or D3D_NAME_UNDEFINED if not applicable<br/>
		/// </summary>
		public D3DName SystemValueType;

		[NativeName("ComponentType")]
		/// <summary>
		/// Scalar type (e.g. uint, float, etc.)<br/>
		/// </summary>
		public D3DRegisterComponentType ComponentType;

		[NativeName("Mask")]
		/// <summary>
		/// Mask to indicate which components of the register<br/>
		/// are used (combination of D3D10_COMPONENT_MASK values)<br/>
		/// </summary>
		public byte Mask;

		[NativeName("ReadWriteMask")]
		/// <summary>
		/// Mask to indicate whether a given component is <br/>
		/// never written (if this is an output signature) or<br/>
		/// always read (if this is an input signature).<br/>
		/// (combination of D3D_MASK_* values)<br/>
		/// </summary>
		public byte ReadWriteMask;

		[NativeName("Stream")]
		/// <summary>
		/// Stream index<br/>
		/// </summary>
		public uint Stream;

		[NativeName("MinPrecision")]
		/// <summary>
		/// Minimum desired interpolation precision<br/>
		/// </summary>
		public D3DMinPrecision MinPrecision;



	}

	[NativeName("_D3D11_SHADER_BUFFER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11ShaderBufferDesc
	{
		[NativeName("Name")]
		/// <summary>
		/// Name of the constant buffer<br/>
		/// </summary>
		public unsafe byte* Name;

		[NativeName("Type")]
		/// <summary>
		/// Indicates type of buffer content<br/>
		/// </summary>
		public D3DCbufferType Type;

		[NativeName("Variables")]
		/// <summary>
		/// Number of member variables<br/>
		/// </summary>
		public uint Variables;

		[NativeName("Size")]
		/// <summary>
		/// Size of CB (in bytes)<br/>
		/// </summary>
		public uint Size;

		[NativeName("uFlags")]
		/// <summary>
		/// Buffer description flags<br/>
		/// </summary>
		public uint UFlags;



	}

	[NativeName("_D3D11_SHADER_VARIABLE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11ShaderVariableDesc
	{
		[NativeName("Name")]
		/// <summary>
		/// Name of the variable<br/>
		/// </summary>
		public unsafe byte* Name;

		[NativeName("StartOffset")]
		/// <summary>
		/// Offset in constant buffer's backing store<br/>
		/// </summary>
		public uint StartOffset;

		[NativeName("Size")]
		/// <summary>
		/// Size of variable (in bytes)<br/>
		/// </summary>
		public uint Size;

		[NativeName("uFlags")]
		/// <summary>
		/// Variable flags<br/>
		/// </summary>
		public uint UFlags;

		[NativeName("DefaultValue")]
		/// <summary>
		/// Raw pointer to default value<br/>
		/// </summary>
		public unsafe void* DefaultValue;

		[NativeName("StartTexture")]
		/// <summary>
		/// First texture index (or -1 if no textures used)<br/>
		/// </summary>
		public uint StartTexture;

		[NativeName("TextureSize")]
		/// <summary>
		/// Number of texture slots possibly used.<br/>
		/// </summary>
		public uint TextureSize;

		[NativeName("StartSampler")]
		/// <summary>
		/// First sampler index (or -1 if no textures used)<br/>
		/// </summary>
		public uint StartSampler;

		[NativeName("SamplerSize")]
		/// <summary>
		/// Number of sampler slots possibly used.<br/>
		/// </summary>
		public uint SamplerSize;



	}

	[NativeName("_D3D11_SHADER_TYPE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11ShaderTypeDesc
	{
		[NativeName("Class")]
		/// <summary>
		/// Variable class (e.g. object, matrix, etc.)<br/>
		/// </summary>
		public D3DShaderVariableClass Class;

		[NativeName("Type")]
		/// <summary>
		/// Variable type (e.g. float, sampler, etc.)<br/>
		/// </summary>
		public D3DShaderVariableType Type;

		[NativeName("Rows")]
		/// <summary>
		/// Number of rows (for matrices, 1 for other numeric, 0 if not applicable)<br/>
		/// </summary>
		public uint Rows;

		[NativeName("Columns")]
		/// <summary>
		/// Number of columns (for vectors <br/>
		/// &<br/>
		/// matrices, 1 for other numeric, 0 if not applicable)<br/>
		/// </summary>
		public uint Columns;

		[NativeName("Elements")]
		/// <summary>
		/// Number of elements (0 if not an array)<br/>
		/// </summary>
		public uint Elements;

		[NativeName("Members")]
		/// <summary>
		/// Number of members (0 if not a structure)<br/>
		/// </summary>
		public uint Members;

		[NativeName("Offset")]
		/// <summary>
		/// Offset from the start of structure (0 if not a structure member)<br/>
		/// </summary>
		public uint Offset;

		[NativeName("Name")]
		/// <summary>
		/// Name of type, can be NULL<br/>
		/// </summary>
		public unsafe byte* Name;



	}

	[NativeName("_D3D11_SHADER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11ShaderDesc
	{
		[NativeName("Version")]
		/// <summary>
		/// Shader version<br/>
		/// </summary>
		public uint Version;

		[NativeName("Creator")]
		/// <summary>
		/// Creator string<br/>
		/// </summary>
		public unsafe byte* Creator;

		[NativeName("Flags")]
		/// <summary>
		/// Shader compilation/parse flags<br/>
		/// </summary>
		public uint Flags;

		[NativeName("ConstantBuffers")]
		/// <summary>
		/// Number of constant buffers<br/>
		/// </summary>
		public uint ConstantBuffers;

		[NativeName("BoundResources")]
		/// <summary>
		/// Number of bound resources<br/>
		/// </summary>
		public uint BoundResources;

		[NativeName("InputParameters")]
		/// <summary>
		/// Number of parameters in the input signature<br/>
		/// </summary>
		public uint InputParameters;

		[NativeName("OutputParameters")]
		/// <summary>
		/// Number of parameters in the output signature<br/>
		/// </summary>
		public uint OutputParameters;

		[NativeName("InstructionCount")]
		/// <summary>
		/// Number of emitted instructions<br/>
		/// </summary>
		public uint InstructionCount;

		[NativeName("TempRegisterCount")]
		/// <summary>
		/// Number of temporary registers used <br/>
		/// </summary>
		public uint TempRegisterCount;

		[NativeName("TempArrayCount")]
		/// <summary>
		/// Number of temporary arrays used<br/>
		/// </summary>
		public uint TempArrayCount;

		[NativeName("DefCount")]
		/// <summary>
		/// Number of constant defines <br/>
		/// </summary>
		public uint DefCount;

		[NativeName("DclCount")]
		/// <summary>
		/// Number of declarations (input + output)<br/>
		/// </summary>
		public uint DclCount;

		[NativeName("TextureNormalInstructions")]
		/// <summary>
		/// Number of non-categorized texture instructions<br/>
		/// </summary>
		public uint TextureNormalInstructions;

		[NativeName("TextureLoadInstructions")]
		/// <summary>
		/// Number of texture load instructions<br/>
		/// </summary>
		public uint TextureLoadInstructions;

		[NativeName("TextureCompInstructions")]
		/// <summary>
		/// Number of texture comparison instructions<br/>
		/// </summary>
		public uint TextureCompInstructions;

		[NativeName("TextureBiasInstructions")]
		/// <summary>
		/// Number of texture bias instructions<br/>
		/// </summary>
		public uint TextureBiasInstructions;

		[NativeName("TextureGradientInstructions")]
		/// <summary>
		/// Number of texture gradient instructions<br/>
		/// </summary>
		public uint TextureGradientInstructions;

		[NativeName("FloatInstructionCount")]
		/// <summary>
		/// Number of floating point arithmetic instructions used<br/>
		/// </summary>
		public uint FloatInstructionCount;

		[NativeName("IntInstructionCount")]
		/// <summary>
		/// Number of signed integer arithmetic instructions used<br/>
		/// </summary>
		public uint IntInstructionCount;

		[NativeName("UintInstructionCount")]
		/// <summary>
		/// Number of unsigned integer arithmetic instructions used<br/>
		/// </summary>
		public uint UintInstructionCount;

		[NativeName("StaticFlowControlCount")]
		/// <summary>
		/// Number of static flow control instructions used<br/>
		/// </summary>
		public uint StaticFlowControlCount;

		[NativeName("DynamicFlowControlCount")]
		/// <summary>
		/// Number of dynamic flow control instructions used<br/>
		/// </summary>
		public uint DynamicFlowControlCount;

		[NativeName("MacroInstructionCount")]
		/// <summary>
		/// Number of macro instructions used<br/>
		/// </summary>
		public uint MacroInstructionCount;

		[NativeName("ArrayInstructionCount")]
		/// <summary>
		/// Number of array instructions used<br/>
		/// </summary>
		public uint ArrayInstructionCount;

		[NativeName("CutInstructionCount")]
		/// <summary>
		/// Number of cut instructions used<br/>
		/// </summary>
		public uint CutInstructionCount;

		[NativeName("EmitInstructionCount")]
		/// <summary>
		/// Number of emit instructions used<br/>
		/// </summary>
		public uint EmitInstructionCount;

		[NativeName("GSOutputTopology")]
		/// <summary>
		/// Geometry shader output topology<br/>
		/// </summary>
		public D3DPrimitiveTopology GSOutputTopology;

		[NativeName("GSMaxOutputVertexCount")]
		/// <summary>
		/// Geometry shader maximum output vertex count<br/>
		/// </summary>
		public uint GSMaxOutputVertexCount;

		[NativeName("InputPrimitive")]
		/// <summary>
		/// GS/HS input primitive<br/>
		/// </summary>
		public D3DPrimitive InputPrimitive;

		[NativeName("PatchConstantParameters")]
		/// <summary>
		/// Number of parameters in the patch constant signature<br/>
		/// </summary>
		public uint PatchConstantParameters;

		[NativeName("cGSInstanceCount")]
		/// <summary>
		/// Number of Geometry shader instances<br/>
		/// </summary>
		public uint CGSInstanceCount;

		[NativeName("cControlPoints")]
		/// <summary>
		/// Number of control points in the HS->DS stage<br/>
		/// </summary>
		public uint CControlPoints;

		[NativeName("HSOutputPrimitive")]
		/// <summary>
		/// Primitive output by the tessellator<br/>
		/// </summary>
		public D3DTessellatorOutputPrimitive HSOutputPrimitive;

		[NativeName("HSPartitioning")]
		/// <summary>
		/// Partitioning mode of the tessellator<br/>
		/// </summary>
		public D3DTessellatorPartitioning HSPartitioning;

		[NativeName("TessellatorDomain")]
		/// <summary>
		/// Domain of the tessellator (quad, tri, isoline)<br/>
		/// </summary>
		public D3DTessellatorDomain TessellatorDomain;

		[NativeName("cBarrierInstructions")]
		/// <summary>
		/// Number of barrier instructions in a compute shader<br/>
		/// </summary>
		public uint CBarrierInstructions;

		[NativeName("cInterlockedInstructions")]
		/// <summary>
		/// Number of interlocked instructions<br/>
		/// </summary>
		public uint CInterlockedInstructions;

		[NativeName("cTextureStoreInstructions")]
		/// <summary>
		/// Number of texture writes<br/>
		/// </summary>
		public uint CTextureStoreInstructions;



	}

	[NativeName("_D3D11_SHADER_INPUT_BIND_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11ShaderInputBindDesc
	{
		[NativeName("Name")]
		/// <summary>
		/// Name of the resource<br/>
		/// </summary>
		public unsafe byte* Name;

		[NativeName("Type")]
		/// <summary>
		/// Type of resource (e.g. texture, cbuffer, etc.)<br/>
		/// </summary>
		public D3DShaderInputType Type;

		[NativeName("BindPoint")]
		/// <summary>
		/// Starting bind point<br/>
		/// </summary>
		public uint BindPoint;

		[NativeName("BindCount")]
		/// <summary>
		/// Number of contiguous bind points (for arrays)<br/>
		/// </summary>
		public uint BindCount;

		[NativeName("uFlags")]
		/// <summary>
		/// Input binding flags<br/>
		/// </summary>
		public uint UFlags;

		[NativeName("ReturnType")]
		/// <summary>
		/// Return type (if texture)<br/>
		/// </summary>
		public D3DResourceReturnType ReturnType;

		[NativeName("Dimension")]
		/// <summary>
		/// Dimension (if texture)<br/>
		/// </summary>
		public D3DSrvDimension Dimension;

		[NativeName("NumSamples")]
		/// <summary>
		/// Number of samples (0 if not MS texture)<br/>
		/// </summary>
		public uint NumSamples;



	}

	[NativeName("_D3D11_LIBRARY_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11LibraryDesc
	{
		[NativeName("Creator")]
		/// <summary>
		/// The name of the originator of the library.<br/>
		/// </summary>
		public unsafe byte* Creator;

		[NativeName("Flags")]
		/// <summary>
		/// Compilation flags.<br/>
		/// </summary>
		public uint Flags;

		[NativeName("FunctionCount")]
		/// <summary>
		/// Number of functions exported from the library.<br/>
		/// </summary>
		public uint FunctionCount;



	}

	[NativeName("_D3D11_FUNCTION_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FunctionDesc
	{
		[NativeName("Version")]
		/// <summary>
		/// Shader version<br/>
		/// </summary>
		public uint Version;

		[NativeName("Creator")]
		/// <summary>
		/// Creator string<br/>
		/// </summary>
		public unsafe byte* Creator;

		[NativeName("Flags")]
		/// <summary>
		/// Shader compilation/parse flags<br/>
		/// </summary>
		public uint Flags;

		[NativeName("ConstantBuffers")]
		/// <summary>
		/// Number of constant buffers<br/>
		/// </summary>
		public uint ConstantBuffers;

		[NativeName("BoundResources")]
		/// <summary>
		/// Number of bound resources<br/>
		/// </summary>
		public uint BoundResources;

		[NativeName("InstructionCount")]
		/// <summary>
		/// Number of emitted instructions<br/>
		/// </summary>
		public uint InstructionCount;

		[NativeName("TempRegisterCount")]
		/// <summary>
		/// Number of temporary registers used <br/>
		/// </summary>
		public uint TempRegisterCount;

		[NativeName("TempArrayCount")]
		/// <summary>
		/// Number of temporary arrays used<br/>
		/// </summary>
		public uint TempArrayCount;

		[NativeName("DefCount")]
		/// <summary>
		/// Number of constant defines <br/>
		/// </summary>
		public uint DefCount;

		[NativeName("DclCount")]
		/// <summary>
		/// Number of declarations (input + output)<br/>
		/// </summary>
		public uint DclCount;

		[NativeName("TextureNormalInstructions")]
		/// <summary>
		/// Number of non-categorized texture instructions<br/>
		/// </summary>
		public uint TextureNormalInstructions;

		[NativeName("TextureLoadInstructions")]
		/// <summary>
		/// Number of texture load instructions<br/>
		/// </summary>
		public uint TextureLoadInstructions;

		[NativeName("TextureCompInstructions")]
		/// <summary>
		/// Number of texture comparison instructions<br/>
		/// </summary>
		public uint TextureCompInstructions;

		[NativeName("TextureBiasInstructions")]
		/// <summary>
		/// Number of texture bias instructions<br/>
		/// </summary>
		public uint TextureBiasInstructions;

		[NativeName("TextureGradientInstructions")]
		/// <summary>
		/// Number of texture gradient instructions<br/>
		/// </summary>
		public uint TextureGradientInstructions;

		[NativeName("FloatInstructionCount")]
		/// <summary>
		/// Number of floating point arithmetic instructions used<br/>
		/// </summary>
		public uint FloatInstructionCount;

		[NativeName("IntInstructionCount")]
		/// <summary>
		/// Number of signed integer arithmetic instructions used<br/>
		/// </summary>
		public uint IntInstructionCount;

		[NativeName("UintInstructionCount")]
		/// <summary>
		/// Number of unsigned integer arithmetic instructions used<br/>
		/// </summary>
		public uint UintInstructionCount;

		[NativeName("StaticFlowControlCount")]
		/// <summary>
		/// Number of static flow control instructions used<br/>
		/// </summary>
		public uint StaticFlowControlCount;

		[NativeName("DynamicFlowControlCount")]
		/// <summary>
		/// Number of dynamic flow control instructions used<br/>
		/// </summary>
		public uint DynamicFlowControlCount;

		[NativeName("MacroInstructionCount")]
		/// <summary>
		/// Number of macro instructions used<br/>
		/// </summary>
		public uint MacroInstructionCount;

		[NativeName("ArrayInstructionCount")]
		/// <summary>
		/// Number of array instructions used<br/>
		/// </summary>
		public uint ArrayInstructionCount;

		[NativeName("MovInstructionCount")]
		/// <summary>
		/// Number of mov instructions used<br/>
		/// </summary>
		public uint MovInstructionCount;

		[NativeName("MovcInstructionCount")]
		/// <summary>
		/// Number of movc instructions used<br/>
		/// </summary>
		public uint MovcInstructionCount;

		[NativeName("ConversionInstructionCount")]
		/// <summary>
		/// Number of type conversion instructions used<br/>
		/// </summary>
		public uint ConversionInstructionCount;

		[NativeName("BitwiseInstructionCount")]
		/// <summary>
		/// Number of bitwise arithmetic instructions used<br/>
		/// </summary>
		public uint BitwiseInstructionCount;

		[NativeName("MinFeatureLevel")]
		/// <summary>
		/// Min target of the function byte code<br/>
		/// </summary>
		public D3DFeatureLevel MinFeatureLevel;

		[NativeName("RequiredFeatureFlags")]
		/// <summary>
		/// Required feature flags<br/>
		/// </summary>
		public ulong RequiredFeatureFlags;

		[NativeName("Name")]
		/// <summary>
		/// Function name<br/>
		/// </summary>
		public unsafe byte* Name;

		[NativeName("FunctionParameterCount")]
		/// <summary>
		/// Number of logical parameters in the function signature (not including return)<br/>
		/// </summary>
		public int FunctionParameterCount;

		[NativeName("HasReturn")]
		/// <summary>
		/// TRUE, if function returns a value, false - it is a subroutine<br/>
		/// </summary>
		public int HasReturn;

		[NativeName("Has10Level9VertexShader")]
		/// <summary>
		/// TRUE, if there is a 10L9 VS blob<br/>
		/// </summary>
		public int Has10Level9VertexShader;

		[NativeName("Has10Level9PixelShader")]
		/// <summary>
		/// TRUE, if there is a 10L9 PS blob<br/>
		/// </summary>
		public int Has10Level9PixelShader;



	}

	[NativeName("_D3D11_PARAMETER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11ParameterDesc
	{
		[NativeName("Name")]
		/// <summary>
		/// Parameter name.<br/>
		/// </summary>
		public unsafe byte* Name;

		[NativeName("SemanticName")]
		/// <summary>
		/// Parameter semantic name (+index).<br/>
		/// </summary>
		public unsafe byte* SemanticName;

		[NativeName("Type")]
		/// <summary>
		/// Element type.<br/>
		/// </summary>
		public D3DShaderVariableType Type;

		[NativeName("Class")]
		/// <summary>
		/// Scalar/Vector/Matrix.<br/>
		/// </summary>
		public D3DShaderVariableClass Class;

		[NativeName("Rows")]
		/// <summary>
		/// Rows are for matrix parameters.<br/>
		/// </summary>
		public uint Rows;

		[NativeName("Columns")]
		/// <summary>
		/// Components or Columns in matrix.<br/>
		/// </summary>
		public uint Columns;

		[NativeName("InterpolationMode")]
		/// <summary>
		/// Interpolation mode.<br/>
		/// </summary>
		public D3DInterpolationMode InterpolationMode;

		[NativeName("Flags")]
		/// <summary>
		/// Parameter modifiers.<br/>
		/// </summary>
		public D3DParameterFlags Flags;

		[NativeName("FirstInRegister")]
		/// <summary>
		/// The first input register for this parameter.<br/>
		/// </summary>
		public uint FirstInRegister;

		[NativeName("FirstInComponent")]
		/// <summary>
		/// The first input register component for this parameter.<br/>
		/// </summary>
		public uint FirstInComponent;

		[NativeName("FirstOutRegister")]
		/// <summary>
		/// The first output register for this parameter.<br/>
		/// </summary>
		public uint FirstOutRegister;

		[NativeName("FirstOutComponent")]
		/// <summary>
		/// The first output register component for this parameter.<br/>
		/// </summary>
		public uint FirstOutComponent;



	}

	/// <summary>
	/// {6E6FFA6A-9BAE-4613-A51E-91652D508C21}<br/>
	/// </summary>
	[Guid("6e6ffa6a-9bae-4613-a51e-91652d508c21")]
	[NativeName("ID3D11ShaderReflectionType")]
	public partial struct ID3D11ShaderReflectionType : IComObject, IComObject<ID3D11ShaderReflectionType>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("6e6ffa6a-9bae-4613-a51e-91652d508c21");

		public unsafe ID3D11ShaderReflectionType (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetDesc(D3D11ShaderTypeDesc* pDesc)
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, D3D11ShaderTypeDesc*, HResult>)(*LpVtbl))(ptr, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetDesc(ref D3D11ShaderTypeDesc pDesc)
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ShaderTypeDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, D3D11ShaderTypeDesc*, HResult>)(*LpVtbl))(ptr, (D3D11ShaderTypeDesc*)ppDesc);
				return ret;
			}
		}

		public readonly unsafe ID3D11ShaderReflectionType* GetMemberTypeByIndex(uint index)
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, uint, ID3D11ShaderReflectionType*>)(LpVtbl[1]))(ptr, index);
			return ret;
		}

		public readonly unsafe ID3D11ShaderReflectionType* GetMemberTypeByName(byte* name)
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, byte*, ID3D11ShaderReflectionType*>)(LpVtbl[2]))(ptr, name);
			return ret;
		}

		public readonly unsafe byte* GetMemberTypeName(uint index)
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, uint, byte*>)(LpVtbl[3]))(ptr, index);
			return ret;
		}

		public readonly unsafe HResult IsEqual(ID3D11ShaderReflectionType* pType)
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, HResult>)(LpVtbl[4]))(ptr, pType);
			return ret;
		}

		public readonly unsafe HResult IsEqual(ref ID3D11ShaderReflectionType pType)
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderReflectionType* ppType = &pType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, HResult>)(LpVtbl[4]))(ptr, (ID3D11ShaderReflectionType*)ppType);
				return ret;
			}
		}

		public readonly unsafe ID3D11ShaderReflectionType* GetSubType()
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*>)(LpVtbl[5]))(ptr);
			return ret;
		}

		public readonly unsafe ID3D11ShaderReflectionType* GetBaseClass()
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*>)(LpVtbl[6]))(ptr);
			return ret;
		}

		public readonly unsafe uint GetNumInterfaces()
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, uint>)(LpVtbl[7]))(ptr);
			return ret;
		}

		public readonly unsafe ID3D11ShaderReflectionType* GetInterfaceByIndex(uint uIndex)
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, uint, ID3D11ShaderReflectionType*>)(LpVtbl[8]))(ptr, uIndex);
			return ret;
		}

		public readonly unsafe HResult IsOfType(ID3D11ShaderReflectionType* pType)
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, HResult>)(LpVtbl[9]))(ptr, pType);
			return ret;
		}

		public readonly unsafe HResult IsOfType(ref ID3D11ShaderReflectionType pType)
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderReflectionType* ppType = &pType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, HResult>)(LpVtbl[9]))(ptr, (ID3D11ShaderReflectionType*)ppType);
				return ret;
			}
		}

		public readonly unsafe HResult ImplementsInterface(ID3D11ShaderReflectionType* pBase)
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, HResult>)(LpVtbl[10]))(ptr, pBase);
			return ret;
		}

		public readonly unsafe HResult ImplementsInterface(ref ID3D11ShaderReflectionType pBase)
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderReflectionType* ppBase = &pBase)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, HResult>)(LpVtbl[10]))(ptr, (ID3D11ShaderReflectionType*)ppBase);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

	}

	/// <summary>
	/// {51F23923-F3E5-4BD1-91CB-606177D8DB4C}<br/>
	/// </summary>
	[Guid("51f23923-f3e5-4bd1-91cb-606177d8db4c")]
	[NativeName("ID3D11ShaderReflectionVariable")]
	public partial struct ID3D11ShaderReflectionVariable : IComObject, IComObject<ID3D11ShaderReflectionVariable>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("51f23923-f3e5-4bd1-91cb-606177d8db4c");

		public unsafe ID3D11ShaderReflectionVariable (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetDesc(D3D11ShaderVariableDesc* pDesc)
		{
			ID3D11ShaderReflectionVariable* ptr = (ID3D11ShaderReflectionVariable*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionVariable*, D3D11ShaderVariableDesc*, HResult>)(*LpVtbl))(ptr, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetDesc(ref D3D11ShaderVariableDesc pDesc)
		{
			ID3D11ShaderReflectionVariable* ptr = (ID3D11ShaderReflectionVariable*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ShaderVariableDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionVariable*, D3D11ShaderVariableDesc*, HResult>)(*LpVtbl))(ptr, (D3D11ShaderVariableDesc*)ppDesc);
				return ret;
			}
		}

		public readonly unsafe ID3D11ShaderReflectionType* GetType()
		{
			ID3D11ShaderReflectionVariable* ptr = (ID3D11ShaderReflectionVariable*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionVariable*, ID3D11ShaderReflectionType*>)(LpVtbl[1]))(ptr);
			return ret;
		}

		public readonly unsafe ID3D11ShaderReflectionConstantBuffer* GetBuffer()
		{
			ID3D11ShaderReflectionVariable* ptr = (ID3D11ShaderReflectionVariable*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionVariable*, ID3D11ShaderReflectionConstantBuffer*>)(LpVtbl[2]))(ptr);
			return ret;
		}

		public readonly unsafe uint GetInterfaceSlot(uint uArrayIndex)
		{
			ID3D11ShaderReflectionVariable* ptr = (ID3D11ShaderReflectionVariable*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionVariable*, uint, uint>)(LpVtbl[3]))(ptr, uArrayIndex);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

	}

	/// <summary>
	/// {EB62D63D-93DD-4318-8AE8-C6F83AD371B8}<br/>
	/// </summary>
	[Guid("eb62d63d-93dd-4318-8ae8-c6f83ad371b8")]
	[NativeName("ID3D11ShaderReflectionConstantBuffer")]
	public partial struct ID3D11ShaderReflectionConstantBuffer : IComObject, IComObject<ID3D11ShaderReflectionConstantBuffer>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("eb62d63d-93dd-4318-8ae8-c6f83ad371b8");

		public unsafe ID3D11ShaderReflectionConstantBuffer (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetDesc(D3D11ShaderBufferDesc* pDesc)
		{
			ID3D11ShaderReflectionConstantBuffer* ptr = (ID3D11ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionConstantBuffer*, D3D11ShaderBufferDesc*, HResult>)(*LpVtbl))(ptr, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetDesc(ref D3D11ShaderBufferDesc pDesc)
		{
			ID3D11ShaderReflectionConstantBuffer* ptr = (ID3D11ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ShaderBufferDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionConstantBuffer*, D3D11ShaderBufferDesc*, HResult>)(*LpVtbl))(ptr, (D3D11ShaderBufferDesc*)ppDesc);
				return ret;
			}
		}

		public readonly unsafe ID3D11ShaderReflectionVariable* GetVariableByIndex(uint index)
		{
			ID3D11ShaderReflectionConstantBuffer* ptr = (ID3D11ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionConstantBuffer*, uint, ID3D11ShaderReflectionVariable*>)(LpVtbl[1]))(ptr, index);
			return ret;
		}

		public readonly unsafe ID3D11ShaderReflectionVariable* GetVariableByName(byte* name)
		{
			ID3D11ShaderReflectionConstantBuffer* ptr = (ID3D11ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionConstantBuffer*, byte*, ID3D11ShaderReflectionVariable*>)(LpVtbl[2]))(ptr, name);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

	}

	/// <summary>
	/// 8d536ca1-0cca-4956-a837-786963755584<br/>
	/// </summary>
	[Guid("8d536ca1-0cca-4956-a837-786963755584")]
	[NativeName("ID3D11ShaderReflection")]
	public partial struct ID3D11ShaderReflection : IComObject, IComObject<ID3D11ShaderReflection>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("8d536ca1-0cca-4956-a837-786963755584");

		public unsafe ID3D11ShaderReflection (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult QueryInterface(Guid* iid, void** ppv)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, HResult>)(*LpVtbl))(ptr, iid, ppv);
			return ret;
		}

		public readonly unsafe HResult QueryInterface(ref Guid iid, void** ppv)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* piid = &iid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)piid, ppv);
				return ret;
			}
		}

		public readonly unsafe HResult QueryInterface(Guid* iid, ref void* ppv)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (void** pppv = &ppv)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, HResult>)(*LpVtbl))(ptr, iid, (void**)pppv);
				return ret;
			}
		}

		public readonly unsafe HResult QueryInterface(ref Guid iid, ref void* ppv)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* piid = &iid)
			{
				fixed (void** pppv = &ppv)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)piid, (void**)pppv);
					return ret;
				}
			}
		}

		public readonly unsafe uint AddRef()
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		public readonly unsafe uint Release()
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		public readonly unsafe HResult GetDesc(D3D11ShaderDesc* pDesc)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, D3D11ShaderDesc*, HResult>)(LpVtbl[3]))(ptr, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetDesc(ref D3D11ShaderDesc pDesc)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ShaderDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, D3D11ShaderDesc*, HResult>)(LpVtbl[3]))(ptr, (D3D11ShaderDesc*)ppDesc);
				return ret;
			}
		}

		public readonly unsafe ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByIndex(uint index)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, ID3D11ShaderReflectionConstantBuffer*>)(LpVtbl[4]))(ptr, index);
			return ret;
		}

		public readonly unsafe ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByName(byte* name)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionConstantBuffer*>)(LpVtbl[5]))(ptr, name);
			return ret;
		}

		public readonly unsafe HResult GetResourceBindingDesc(uint resourceIndex, D3D11ShaderInputBindDesc* pDesc)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11ShaderInputBindDesc*, HResult>)(LpVtbl[6]))(ptr, resourceIndex, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetResourceBindingDesc(uint resourceIndex, ref D3D11ShaderInputBindDesc pDesc)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ShaderInputBindDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11ShaderInputBindDesc*, HResult>)(LpVtbl[6]))(ptr, resourceIndex, (D3D11ShaderInputBindDesc*)ppDesc);
				return ret;
			}
		}

		public readonly unsafe HResult GetInputParameterDesc(uint parameterIndex, D3D11SignatureParameterDesc* pDesc)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11SignatureParameterDesc*, HResult>)(LpVtbl[7]))(ptr, parameterIndex, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetInputParameterDesc(uint parameterIndex, ref D3D11SignatureParameterDesc pDesc)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SignatureParameterDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11SignatureParameterDesc*, HResult>)(LpVtbl[7]))(ptr, parameterIndex, (D3D11SignatureParameterDesc*)ppDesc);
				return ret;
			}
		}

		public readonly unsafe HResult GetOutputParameterDesc(uint parameterIndex, D3D11SignatureParameterDesc* pDesc)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11SignatureParameterDesc*, HResult>)(LpVtbl[8]))(ptr, parameterIndex, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetOutputParameterDesc(uint parameterIndex, ref D3D11SignatureParameterDesc pDesc)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SignatureParameterDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11SignatureParameterDesc*, HResult>)(LpVtbl[8]))(ptr, parameterIndex, (D3D11SignatureParameterDesc*)ppDesc);
				return ret;
			}
		}

		public readonly unsafe HResult GetPatchConstantParameterDesc(uint parameterIndex, D3D11SignatureParameterDesc* pDesc)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11SignatureParameterDesc*, HResult>)(LpVtbl[9]))(ptr, parameterIndex, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetPatchConstantParameterDesc(uint parameterIndex, ref D3D11SignatureParameterDesc pDesc)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SignatureParameterDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11SignatureParameterDesc*, HResult>)(LpVtbl[9]))(ptr, parameterIndex, (D3D11SignatureParameterDesc*)ppDesc);
				return ret;
			}
		}

		public readonly unsafe HResult GetResourceBindingDescByName(byte* name, D3D11ShaderInputBindDesc* pDesc)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, D3D11ShaderInputBindDesc*, HResult>)(LpVtbl[11]))(ptr, name, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetResourceBindingDescByName(byte* name, ref D3D11ShaderInputBindDesc pDesc)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ShaderInputBindDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, D3D11ShaderInputBindDesc*, HResult>)(LpVtbl[11]))(ptr, name, (D3D11ShaderInputBindDesc*)ppDesc);
				return ret;
			}
		}

		public readonly unsafe uint GetMovInstructionCount()
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[12]))(ptr);
			return ret;
		}

		public readonly unsafe uint GetMovcInstructionCount()
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[13]))(ptr);
			return ret;
		}

		public readonly unsafe uint GetConversionInstructionCount()
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[14]))(ptr);
			return ret;
		}

		public readonly unsafe uint GetBitwiseInstructionCount()
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[15]))(ptr);
			return ret;
		}

		public readonly unsafe D3DPrimitive GetGSInputPrimitive()
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3DPrimitive ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, D3DPrimitive>)(LpVtbl[16]))(ptr);
			return ret;
		}

		public readonly unsafe int IsSampleFrequencyShader()
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, int>)(LpVtbl[17]))(ptr);
			return ret;
		}

		public readonly unsafe uint GetNumInterfaceSlots()
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[18]))(ptr);
			return ret;
		}

		public readonly unsafe HResult GetMinFeatureLevel(D3DFeatureLevel* pLevel)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, D3DFeatureLevel*, HResult>)(LpVtbl[19]))(ptr, pLevel);
			return ret;
		}

		public readonly unsafe HResult GetMinFeatureLevel(ref D3DFeatureLevel pLevel)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3DFeatureLevel* ppLevel = &pLevel)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, D3DFeatureLevel*, HResult>)(LpVtbl[19]))(ptr, (D3DFeatureLevel*)ppLevel);
				return ret;
			}
		}

		public readonly unsafe uint GetThreadGroupSize(uint* pSizeX, uint* pSizeY, uint* pSizeZ)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[20]))(ptr, pSizeX, pSizeY, pSizeZ);
			return ret;
		}

		public readonly unsafe uint GetThreadGroupSize(ref uint pSizeX, uint* pSizeY, uint* pSizeZ)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeX = &pSizeX)
			{
				uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[20]))(ptr, (uint*)ppSizeX, pSizeY, pSizeZ);
				return ret;
			}
		}

		public readonly unsafe uint GetThreadGroupSize(uint* pSizeX, ref uint pSizeY, uint* pSizeZ)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeY = &pSizeY)
			{
				uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[20]))(ptr, pSizeX, (uint*)ppSizeY, pSizeZ);
				return ret;
			}
		}

		public readonly unsafe uint GetThreadGroupSize(ref uint pSizeX, ref uint pSizeY, uint* pSizeZ)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeX = &pSizeX)
			{
				fixed (uint* ppSizeY = &pSizeY)
				{
					uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[20]))(ptr, (uint*)ppSizeX, (uint*)ppSizeY, pSizeZ);
					return ret;
				}
			}
		}

		public readonly unsafe uint GetThreadGroupSize(uint* pSizeX, uint* pSizeY, ref uint pSizeZ)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeZ = &pSizeZ)
			{
				uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[20]))(ptr, pSizeX, pSizeY, (uint*)ppSizeZ);
				return ret;
			}
		}

		public readonly unsafe uint GetThreadGroupSize(ref uint pSizeX, uint* pSizeY, ref uint pSizeZ)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeX = &pSizeX)
			{
				fixed (uint* ppSizeZ = &pSizeZ)
				{
					uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[20]))(ptr, (uint*)ppSizeX, pSizeY, (uint*)ppSizeZ);
					return ret;
				}
			}
		}

		public readonly unsafe uint GetThreadGroupSize(uint* pSizeX, ref uint pSizeY, ref uint pSizeZ)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeY = &pSizeY)
			{
				fixed (uint* ppSizeZ = &pSizeZ)
				{
					uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[20]))(ptr, pSizeX, (uint*)ppSizeY, (uint*)ppSizeZ);
					return ret;
				}
			}
		}

		public readonly unsafe uint GetThreadGroupSize(ref uint pSizeX, ref uint pSizeY, ref uint pSizeZ)
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeX = &pSizeX)
			{
				fixed (uint* ppSizeY = &pSizeY)
				{
					fixed (uint* ppSizeZ = &pSizeZ)
					{
						uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[20]))(ptr, (uint*)ppSizeX, (uint*)ppSizeY, (uint*)ppSizeZ);
						return ret;
					}
				}
			}
		}

		public readonly unsafe ulong GetRequiresFlags()
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, ulong>)(LpVtbl[21]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11ShaderReflection value)
		{
			return Unsafe.As<ID3D11ShaderReflection, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// {54384F1B-5B3E-4BB7-AE01-60BA3097CBB6}<br/>
	/// </summary>
	[Guid("54384f1b-5b3e-4bb7-ae01-60ba3097cbb6")]
	[NativeName("ID3D11LibraryReflection")]
	public partial struct ID3D11LibraryReflection : IComObject, IComObject<ID3D11LibraryReflection>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("54384f1b-5b3e-4bb7-ae01-60ba3097cbb6");

		public unsafe ID3D11LibraryReflection (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetDesc(D3D11LibraryDesc* pDesc)
		{
			ID3D11LibraryReflection* ptr = (ID3D11LibraryReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, D3D11LibraryDesc*, HResult>)(LpVtbl[3]))(ptr, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetDesc(ref D3D11LibraryDesc pDesc)
		{
			ID3D11LibraryReflection* ptr = (ID3D11LibraryReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11LibraryDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, D3D11LibraryDesc*, HResult>)(LpVtbl[3]))(ptr, (D3D11LibraryDesc*)ppDesc);
				return ret;
			}
		}

		public readonly unsafe ID3D11FunctionReflection* GetFunctionByIndex(int functionIndex)
		{
			ID3D11LibraryReflection* ptr = (ID3D11LibraryReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11FunctionReflection* ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, int, ID3D11FunctionReflection*>)(LpVtbl[4]))(ptr, functionIndex);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11LibraryReflection value)
		{
			return Unsafe.As<ID3D11LibraryReflection, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// {207BCECB-D683-4A06-A8A3-9B149B9F73A4}<br/>
	/// </summary>
	[Guid("207bcecb-d683-4a06-a8a3-9b149b9f73a4")]
	[NativeName("ID3D11FunctionReflection")]
	public partial struct ID3D11FunctionReflection : IComObject, IComObject<ID3D11FunctionReflection>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("207bcecb-d683-4a06-a8a3-9b149b9f73a4");

		public unsafe ID3D11FunctionReflection (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetDesc(D3D11FunctionDesc* pDesc)
		{
			ID3D11FunctionReflection* ptr = (ID3D11FunctionReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, D3D11FunctionDesc*, HResult>)(*LpVtbl))(ptr, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetDesc(ref D3D11FunctionDesc pDesc)
		{
			ID3D11FunctionReflection* ptr = (ID3D11FunctionReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11FunctionDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, D3D11FunctionDesc*, HResult>)(*LpVtbl))(ptr, (D3D11FunctionDesc*)ppDesc);
				return ret;
			}
		}

		public readonly unsafe ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByIndex(uint bufferIndex)
		{
			ID3D11FunctionReflection* ptr = (ID3D11FunctionReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, uint, ID3D11ShaderReflectionConstantBuffer*>)(LpVtbl[1]))(ptr, bufferIndex);
			return ret;
		}

		public readonly unsafe ID3D11FunctionParameterReflection* GetFunctionParameter(int parameterIndex)
		{
			ID3D11FunctionReflection* ptr = (ID3D11FunctionReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11FunctionParameterReflection* ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionReflection*, int, ID3D11FunctionParameterReflection*>)(LpVtbl[6]))(ptr, parameterIndex);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

	}

	/// <summary>
	/// {42757488-334F-47FE-982E-1A65D08CC462}<br/>
	/// </summary>
	[Guid("42757488-334f-47fe-982e-1a65d08cc462")]
	[NativeName("ID3D11FunctionParameterReflection")]
	public partial struct ID3D11FunctionParameterReflection : IComObject, IComObject<ID3D11FunctionParameterReflection>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("42757488-334f-47fe-982e-1a65d08cc462");

		public unsafe ID3D11FunctionParameterReflection (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetDesc(D3D11ParameterDesc* pDesc)
		{
			ID3D11FunctionParameterReflection* ptr = (ID3D11FunctionParameterReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionParameterReflection*, D3D11ParameterDesc*, HResult>)(*LpVtbl))(ptr, pDesc);
			return ret;
		}

		public readonly unsafe HResult GetDesc(ref D3D11ParameterDesc pDesc)
		{
			ID3D11FunctionParameterReflection* ptr = (ID3D11FunctionParameterReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ParameterDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionParameterReflection*, D3D11ParameterDesc*, HResult>)(*LpVtbl))(ptr, (D3D11ParameterDesc*)ppDesc);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

	}

	/// <summary>
	/// {469E07F7-045A-48D5-AA12-68A478CDF75D}<br/>
	/// </summary>
	[Guid("469e07f7-045a-48d5-aa12-68a478cdf75d")]
	[NativeName("ID3D11ModuleInstance")]
	public partial struct ID3D11ModuleInstance : IComObject, IComObject<ID3D11ModuleInstance>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("469e07f7-045a-48d5-aa12-68a478cdf75d");

		public unsafe ID3D11ModuleInstance (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult BindConstantBuffer(uint uSrcSlot, uint uDstSlot, uint cbDstOffset)
		{
			ID3D11ModuleInstance* ptr = (ID3D11ModuleInstance*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, uint, uint, uint, HResult>)(LpVtbl[3]))(ptr, uSrcSlot, uDstSlot, cbDstOffset);
			return ret;
		}

		public readonly unsafe HResult BindConstantBufferByName(byte* pName, uint uDstSlot, uint cbDstOffset)
		{
			ID3D11ModuleInstance* ptr = (ID3D11ModuleInstance*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, HResult>)(LpVtbl[4]))(ptr, pName, uDstSlot, cbDstOffset);
			return ret;
		}

		public readonly unsafe HResult BindResource(uint uSrcSlot, uint uDstSlot, uint uCount)
		{
			ID3D11ModuleInstance* ptr = (ID3D11ModuleInstance*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, uint, uint, uint, HResult>)(LpVtbl[5]))(ptr, uSrcSlot, uDstSlot, uCount);
			return ret;
		}

		public readonly unsafe HResult BindResourceByName(byte* pName, uint uDstSlot, uint uCount)
		{
			ID3D11ModuleInstance* ptr = (ID3D11ModuleInstance*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, HResult>)(LpVtbl[6]))(ptr, pName, uDstSlot, uCount);
			return ret;
		}

		public readonly unsafe HResult BindSampler(uint uSrcSlot, uint uDstSlot, uint uCount)
		{
			ID3D11ModuleInstance* ptr = (ID3D11ModuleInstance*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, uint, uint, uint, HResult>)(LpVtbl[7]))(ptr, uSrcSlot, uDstSlot, uCount);
			return ret;
		}

		public readonly unsafe HResult BindSamplerByName(byte* pName, uint uDstSlot, uint uCount)
		{
			ID3D11ModuleInstance* ptr = (ID3D11ModuleInstance*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, HResult>)(LpVtbl[8]))(ptr, pName, uDstSlot, uCount);
			return ret;
		}

		public readonly unsafe HResult BindUnorderedAccessView(uint uSrcSlot, uint uDstSlot, uint uCount)
		{
			ID3D11ModuleInstance* ptr = (ID3D11ModuleInstance*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, uint, uint, uint, HResult>)(LpVtbl[9]))(ptr, uSrcSlot, uDstSlot, uCount);
			return ret;
		}

		public readonly unsafe HResult BindUnorderedAccessViewByName(byte* pName, uint uDstSlot, uint uCount)
		{
			ID3D11ModuleInstance* ptr = (ID3D11ModuleInstance*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, HResult>)(LpVtbl[10]))(ptr, pName, uDstSlot, uCount);
			return ret;
		}

		public readonly unsafe HResult BindResourceAsUnorderedAccessView(uint uSrcSrvSlot, uint uDstUavSlot, uint uCount)
		{
			ID3D11ModuleInstance* ptr = (ID3D11ModuleInstance*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, uint, uint, uint, HResult>)(LpVtbl[11]))(ptr, uSrcSrvSlot, uDstUavSlot, uCount);
			return ret;
		}

		public readonly unsafe HResult BindResourceAsUnorderedAccessViewByName(byte* pSrvName, uint uDstUavSlot, uint uCount)
		{
			ID3D11ModuleInstance* ptr = (ID3D11ModuleInstance*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ModuleInstance*, byte*, uint, uint, HResult>)(LpVtbl[12]))(ptr, pSrvName, uDstUavSlot, uCount);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11ModuleInstance value)
		{
			return Unsafe.As<ID3D11ModuleInstance, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// {CAC701EE-80FC-4122-8242-10B39C8CEC34}<br/>
	/// </summary>
	[Guid("cac701ee-80fc-4122-8242-10b39c8cec34")]
	[NativeName("ID3D11Module")]
	public partial struct ID3D11Module : IComObject, IComObject<ID3D11Module>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("cac701ee-80fc-4122-8242-10b39c8cec34");

		public unsafe ID3D11Module (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult CreateInstance(byte* pNamespace, ID3D11ModuleInstance** ppModuleInstance)
		{
			ID3D11Module* ptr = (ID3D11Module*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, byte*, ID3D11ModuleInstance**, HResult>)(LpVtbl[3]))(ptr, pNamespace, ppModuleInstance);
			return ret;
		}

		public readonly unsafe HResult CreateInstance(byte* pNamespace, ref ID3D11ModuleInstance* ppModuleInstance)
		{
			ID3D11Module* ptr = (ID3D11Module*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance** pppModuleInstance = &ppModuleInstance)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Module*, byte*, ID3D11ModuleInstance**, HResult>)(LpVtbl[3]))(ptr, pNamespace, (ID3D11ModuleInstance**)pppModuleInstance);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11Module value)
		{
			return Unsafe.As<ID3D11Module, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// {59A6CD0E-E10D-4C1F-88C0-63ABA1DAF30E}<br/>
	/// </summary>
	[Guid("59a6cd0e-e10d-4c1f-88c0-63aba1daf30e")]
	[NativeName("ID3D11Linker")]
	public partial struct ID3D11Linker : IComObject, IComObject<ID3D11Linker>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("59a6cd0e-e10d-4c1f-88c0-63aba1daf30e");

		public unsafe ID3D11Linker (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult Link(ID3D11ModuleInstance* pEntry, byte* pEntryName, byte* pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ID3D10Blob** ppErrorBuffer)
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, HResult>)(LpVtbl[3]))(ptr, pEntry, pEntryName, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
			return ret;
		}

		public readonly unsafe HResult Link(ref ID3D11ModuleInstance pEntry, byte* pEntryName, byte* pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ID3D10Blob** ppErrorBuffer)
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, HResult>)(LpVtbl[3]))(ptr, (ID3D11ModuleInstance*)ppEntry, pEntryName, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
				return ret;
			}
		}

		public readonly unsafe HResult Link(ID3D11ModuleInstance* pEntry, byte* pEntryName, byte* pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ID3D10Blob** ppErrorBuffer)
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, HResult>)(LpVtbl[3]))(ptr, pEntry, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
				return ret;
			}
		}

		public readonly unsafe HResult Link(ref ID3D11ModuleInstance pEntry, byte* pEntryName, byte* pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ID3D10Blob** ppErrorBuffer)
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, HResult>)(LpVtbl[3]))(ptr, (ID3D11ModuleInstance*)ppEntry, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, ppErrorBuffer);
					return ret;
				}
			}
		}

		public readonly unsafe HResult Link(ID3D11ModuleInstance* pEntry, byte* pEntryName, byte* pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ref ID3D10Blob* ppErrorBuffer)
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, HResult>)(LpVtbl[3]))(ptr, pEntry, pEntryName, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
				return ret;
			}
		}

		public readonly unsafe HResult Link(ref ID3D11ModuleInstance pEntry, byte* pEntryName, byte* pTargetName, uint uFlags, ID3D10Blob** ppShaderBlob, ref ID3D10Blob* ppErrorBuffer)
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, HResult>)(LpVtbl[3]))(ptr, (ID3D11ModuleInstance*)ppEntry, pEntryName, pTargetName, uFlags, ppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		public readonly unsafe HResult Link(ID3D11ModuleInstance* pEntry, byte* pEntryName, byte* pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ref ID3D10Blob* ppErrorBuffer)
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, HResult>)(LpVtbl[3]))(ptr, pEntry, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		public readonly unsafe HResult Link(ref ID3D11ModuleInstance pEntry, byte* pEntryName, byte* pTargetName, uint uFlags, ref ID3D10Blob* ppShaderBlob, ref ID3D10Blob* ppErrorBuffer)
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppEntry = &pEntry)
			{
				fixed (ID3D10Blob** pppShaderBlob = &ppShaderBlob)
				{
					fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, byte*, byte*, uint, ID3D10Blob**, ID3D10Blob**, HResult>)(LpVtbl[3]))(ptr, (ID3D11ModuleInstance*)ppEntry, pEntryName, pTargetName, uFlags, (ID3D10Blob**)pppShaderBlob, (ID3D10Blob**)pppErrorBuffer);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UseLibrary(ID3D11ModuleInstance* pLibraryMI)
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, HResult>)(LpVtbl[4]))(ptr, pLibraryMI);
			return ret;
		}

		public readonly unsafe HResult UseLibrary(ref ID3D11ModuleInstance pLibraryMI)
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance* ppLibraryMI = &pLibraryMI)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, ID3D11ModuleInstance*, HResult>)(LpVtbl[4]))(ptr, (ID3D11ModuleInstance*)ppLibraryMI);
				return ret;
			}
		}

		public readonly unsafe HResult AddClipPlaneFromCBuffer(uint uCBufferSlot, uint uCBufferEntry)
		{
			ID3D11Linker* ptr = (ID3D11Linker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Linker*, uint, uint, HResult>)(LpVtbl[5]))(ptr, uCBufferSlot, uCBufferEntry);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11Linker value)
		{
			return Unsafe.As<ID3D11Linker, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// {D80DD70C-8D2F-4751-94A1-03C79B3556DB}<br/>
	/// </summary>
	[Guid("d80dd70c-8d2f-4751-94a1-03c79b3556db")]
	[NativeName("ID3D11LinkingNode")]
	public partial struct ID3D11LinkingNode : IComObject, IComObject<ID3D11LinkingNode>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("d80dd70c-8d2f-4751-94a1-03c79b3556db");

		public unsafe ID3D11LinkingNode (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11LinkingNode value)
		{
			return Unsafe.As<ID3D11LinkingNode, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// {54133220-1CE8-43D3-8236-9855C5CEECFF}<br/>
	/// </summary>
	[Guid("54133220-1ce8-43d3-8236-9855c5ceecff")]
	[NativeName("ID3D11FunctionLinkingGraph")]
	public partial struct ID3D11FunctionLinkingGraph : IComObject, IComObject<ID3D11FunctionLinkingGraph>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("54133220-1ce8-43d3-8236-9855c5ceecff");

		public unsafe ID3D11FunctionLinkingGraph (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult CreateModuleInstance(ID3D11ModuleInstance** ppModuleInstance, ID3D10Blob** ppErrorBuffer)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11ModuleInstance**, ID3D10Blob**, HResult>)(LpVtbl[3]))(ptr, ppModuleInstance, ppErrorBuffer);
			return ret;
		}

		public readonly unsafe HResult CreateModuleInstance(ref ID3D11ModuleInstance* ppModuleInstance, ID3D10Blob** ppErrorBuffer)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance** pppModuleInstance = &ppModuleInstance)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11ModuleInstance**, ID3D10Blob**, HResult>)(LpVtbl[3]))(ptr, (ID3D11ModuleInstance**)pppModuleInstance, ppErrorBuffer);
				return ret;
			}
		}

		public readonly unsafe HResult CreateModuleInstance(ID3D11ModuleInstance** ppModuleInstance, ref ID3D10Blob* ppErrorBuffer)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11ModuleInstance**, ID3D10Blob**, HResult>)(LpVtbl[3]))(ptr, ppModuleInstance, (ID3D10Blob**)pppErrorBuffer);
				return ret;
			}
		}

		public readonly unsafe HResult CreateModuleInstance(ref ID3D11ModuleInstance* ppModuleInstance, ref ID3D10Blob* ppErrorBuffer)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ModuleInstance** pppModuleInstance = &ppModuleInstance)
			{
				fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11ModuleInstance**, ID3D10Blob**, HResult>)(LpVtbl[3]))(ptr, (ID3D11ModuleInstance**)pppModuleInstance, (ID3D10Blob**)pppErrorBuffer);
					return ret;
				}
			}
		}

		public readonly unsafe HResult SetInputSignature(D3D11ParameterDesc* pInputParameters, uint cInputParameters, ID3D11LinkingNode** ppInputNode)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, D3D11ParameterDesc*, uint, ID3D11LinkingNode**, HResult>)(LpVtbl[4]))(ptr, pInputParameters, cInputParameters, ppInputNode);
			return ret;
		}

		public readonly unsafe HResult SetInputSignature(ref D3D11ParameterDesc pInputParameters, uint cInputParameters, ID3D11LinkingNode** ppInputNode)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ParameterDesc* ppInputParameters = &pInputParameters)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, D3D11ParameterDesc*, uint, ID3D11LinkingNode**, HResult>)(LpVtbl[4]))(ptr, (D3D11ParameterDesc*)ppInputParameters, cInputParameters, ppInputNode);
				return ret;
			}
		}

		public readonly unsafe HResult SetInputSignature(D3D11ParameterDesc* pInputParameters, uint cInputParameters, ref ID3D11LinkingNode* ppInputNode)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode** pppInputNode = &ppInputNode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, D3D11ParameterDesc*, uint, ID3D11LinkingNode**, HResult>)(LpVtbl[4]))(ptr, pInputParameters, cInputParameters, (ID3D11LinkingNode**)pppInputNode);
				return ret;
			}
		}

		public readonly unsafe HResult SetInputSignature(ref D3D11ParameterDesc pInputParameters, uint cInputParameters, ref ID3D11LinkingNode* ppInputNode)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ParameterDesc* ppInputParameters = &pInputParameters)
			{
				fixed (ID3D11LinkingNode** pppInputNode = &ppInputNode)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, D3D11ParameterDesc*, uint, ID3D11LinkingNode**, HResult>)(LpVtbl[4]))(ptr, (D3D11ParameterDesc*)ppInputParameters, cInputParameters, (ID3D11LinkingNode**)pppInputNode);
					return ret;
				}
			}
		}

		public readonly unsafe HResult SetOutputSignature(D3D11ParameterDesc* pOutputParameters, uint cOutputParameters, ID3D11LinkingNode** ppOutputNode)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, D3D11ParameterDesc*, uint, ID3D11LinkingNode**, HResult>)(LpVtbl[5]))(ptr, pOutputParameters, cOutputParameters, ppOutputNode);
			return ret;
		}

		public readonly unsafe HResult SetOutputSignature(ref D3D11ParameterDesc pOutputParameters, uint cOutputParameters, ID3D11LinkingNode** ppOutputNode)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ParameterDesc* ppOutputParameters = &pOutputParameters)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, D3D11ParameterDesc*, uint, ID3D11LinkingNode**, HResult>)(LpVtbl[5]))(ptr, (D3D11ParameterDesc*)ppOutputParameters, cOutputParameters, ppOutputNode);
				return ret;
			}
		}

		public readonly unsafe HResult SetOutputSignature(D3D11ParameterDesc* pOutputParameters, uint cOutputParameters, ref ID3D11LinkingNode* ppOutputNode)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode** pppOutputNode = &ppOutputNode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, D3D11ParameterDesc*, uint, ID3D11LinkingNode**, HResult>)(LpVtbl[5]))(ptr, pOutputParameters, cOutputParameters, (ID3D11LinkingNode**)pppOutputNode);
				return ret;
			}
		}

		public readonly unsafe HResult SetOutputSignature(ref D3D11ParameterDesc pOutputParameters, uint cOutputParameters, ref ID3D11LinkingNode* ppOutputNode)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ParameterDesc* ppOutputParameters = &pOutputParameters)
			{
				fixed (ID3D11LinkingNode** pppOutputNode = &ppOutputNode)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, D3D11ParameterDesc*, uint, ID3D11LinkingNode**, HResult>)(LpVtbl[5]))(ptr, (D3D11ParameterDesc*)ppOutputParameters, cOutputParameters, (ID3D11LinkingNode**)pppOutputNode);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CallFunction(byte* pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, byte* pFunctionName, ID3D11LinkingNode** ppCallNode)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[6]))(ptr, pModuleInstanceNamespace, pModuleWithFunctionPrototype, pFunctionName, ppCallNode);
			return ret;
		}

		public readonly unsafe HResult CallFunction(byte* pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, byte* pFunctionName, ID3D11LinkingNode** ppCallNode)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[6]))(ptr, pModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, pFunctionName, ppCallNode);
				return ret;
			}
		}

		public readonly unsafe HResult CallFunction(byte* pModuleInstanceNamespace, ID3D11Module* pModuleWithFunctionPrototype, byte* pFunctionName, ref ID3D11LinkingNode* ppCallNode)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[6]))(ptr, pModuleInstanceNamespace, pModuleWithFunctionPrototype, pFunctionName, (ID3D11LinkingNode**)pppCallNode);
				return ret;
			}
		}

		public readonly unsafe HResult CallFunction(byte* pModuleInstanceNamespace, ref ID3D11Module pModuleWithFunctionPrototype, byte* pFunctionName, ref ID3D11LinkingNode* ppCallNode)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Module* ppModuleWithFunctionPrototype = &pModuleWithFunctionPrototype)
			{
				fixed (ID3D11LinkingNode** pppCallNode = &ppCallNode)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, byte*, ID3D11Module*, byte*, ID3D11LinkingNode**, HResult>)(LpVtbl[6]))(ptr, pModuleInstanceNamespace, (ID3D11Module*)ppModuleWithFunctionPrototype, pFunctionName, (ID3D11LinkingNode**)pppCallNode);
					return ret;
				}
			}
		}

		public readonly unsafe HResult PassValue(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, ID3D11LinkingNode* pDstNode, int dstParameterIndex)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, ID3D11LinkingNode*, int, HResult>)(LpVtbl[7]))(ptr, pSrcNode, srcParameterIndex, pDstNode, dstParameterIndex);
			return ret;
		}

		public readonly unsafe HResult PassValue(ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, ID3D11LinkingNode* pDstNode, int dstParameterIndex)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, ID3D11LinkingNode*, int, HResult>)(LpVtbl[7]))(ptr, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pDstNode, dstParameterIndex);
				return ret;
			}
		}

		public readonly unsafe HResult PassValue(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, ref ID3D11LinkingNode pDstNode, int dstParameterIndex)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, ID3D11LinkingNode*, int, HResult>)(LpVtbl[7]))(ptr, pSrcNode, srcParameterIndex, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex);
				return ret;
			}
		}

		public readonly unsafe HResult PassValue(ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, ref ID3D11LinkingNode pDstNode, int dstParameterIndex)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, ID3D11LinkingNode*, int, HResult>)(LpVtbl[7]))(ptr, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex);
					return ret;
				}
			}
		}

		public readonly unsafe HResult PassValueWithSwizzle(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, byte* pDstSwizzle)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[8]))(ptr, pSrcNode, srcParameterIndex, pSrcSwizzle, pDstNode, dstParameterIndex, pDstSwizzle);
			return ret;
		}

		public readonly unsafe HResult PassValueWithSwizzle(ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ID3D11LinkingNode* pDstNode, int dstParameterIndex, byte* pDstSwizzle)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[8]))(ptr, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pSrcSwizzle, pDstNode, dstParameterIndex, pDstSwizzle);
				return ret;
			}
		}

		public readonly unsafe HResult PassValueWithSwizzle(ID3D11LinkingNode* pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, byte* pDstSwizzle)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[8]))(ptr, pSrcNode, srcParameterIndex, pSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pDstSwizzle);
				return ret;
			}
		}

		public readonly unsafe HResult PassValueWithSwizzle(ref ID3D11LinkingNode pSrcNode, int srcParameterIndex, byte* pSrcSwizzle, ref ID3D11LinkingNode pDstNode, int dstParameterIndex, byte* pDstSwizzle)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11LinkingNode* ppSrcNode = &pSrcNode)
			{
				fixed (ID3D11LinkingNode* ppDstNode = &pDstNode)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D11LinkingNode*, int, byte*, ID3D11LinkingNode*, int, byte*, HResult>)(LpVtbl[8]))(ptr, (ID3D11LinkingNode*)ppSrcNode, srcParameterIndex, pSrcSwizzle, (ID3D11LinkingNode*)ppDstNode, dstParameterIndex, pDstSwizzle);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetLastError(ID3D10Blob** ppErrorBuffer)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D10Blob**, HResult>)(LpVtbl[9]))(ptr, ppErrorBuffer);
			return ret;
		}

		public readonly unsafe HResult GetLastError(ref ID3D10Blob* ppErrorBuffer)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D10Blob** pppErrorBuffer = &ppErrorBuffer)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, ID3D10Blob**, HResult>)(LpVtbl[9]))(ptr, (ID3D10Blob**)pppErrorBuffer);
				return ret;
			}
		}

		public readonly unsafe HResult GenerateHlsl(uint uFlags, ID3D10Blob** ppBuffer)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, uint, ID3D10Blob**, HResult>)(LpVtbl[10]))(ptr, uFlags, ppBuffer);
			return ret;
		}

		public readonly unsafe HResult GenerateHlsl(uint uFlags, ref ID3D10Blob* ppBuffer)
		{
			ID3D11FunctionLinkingGraph* ptr = (ID3D11FunctionLinkingGraph*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D10Blob** pppBuffer = &ppBuffer)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11FunctionLinkingGraph*, uint, ID3D10Blob**, HResult>)(LpVtbl[10]))(ptr, uFlags, (ID3D10Blob**)pppBuffer);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11FunctionLinkingGraph value)
		{
			return Unsafe.As<ID3D11FunctionLinkingGraph, IUnknown>(ref value);
		}

	}

	[NativeName("ID3D11ShaderTrace")]
	public partial struct ID3D11ShaderTrace : IComObject, IComObject<ID3D11ShaderTrace>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe ID3D11ShaderTrace (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult TraceReady(ulong* pTestCount)
		{
			ID3D11ShaderTrace* ptr = (ID3D11ShaderTrace*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, ulong*, HResult>)(*LpVtbl))(ptr, pTestCount);
			return ret;
		}

		public readonly unsafe HResult TraceReady(ref ulong pTestCount)
		{
			ID3D11ShaderTrace* ptr = (ID3D11ShaderTrace*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppTestCount = &pTestCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, ulong*, HResult>)(*LpVtbl))(ptr, (ulong*)ppTestCount);
				return ret;
			}
		}

		public readonly unsafe void ResetTrace()
		{
			ID3D11ShaderTrace* ptr = (ID3D11ShaderTrace*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, void>)(LpVtbl[1]))(ptr);
		}

		public readonly unsafe HResult GetTraceStats(D3D11TraceStats* pTraceStats)
		{
			ID3D11ShaderTrace* ptr = (ID3D11ShaderTrace*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, D3D11TraceStats*, HResult>)(LpVtbl[2]))(ptr, pTraceStats);
			return ret;
		}

		public readonly unsafe HResult GetTraceStats(ref D3D11TraceStats pTraceStats)
		{
			ID3D11ShaderTrace* ptr = (ID3D11ShaderTrace*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TraceStats* ppTraceStats = &pTraceStats)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, D3D11TraceStats*, HResult>)(LpVtbl[2]))(ptr, (D3D11TraceStats*)ppTraceStats);
				return ret;
			}
		}

		public readonly unsafe HResult PSSelectStamp(uint stampIndex)
		{
			ID3D11ShaderTrace* ptr = (ID3D11ShaderTrace*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, HResult>)(LpVtbl[3]))(ptr, stampIndex);
			return ret;
		}

		public readonly unsafe HResult GetInitialRegisterContents(D3D11TraceRegister* pRegister, D3D11TraceValue* pValue)
		{
			ID3D11ShaderTrace* ptr = (ID3D11ShaderTrace*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, D3D11TraceRegister*, D3D11TraceValue*, HResult>)(LpVtbl[4]))(ptr, pRegister, pValue);
			return ret;
		}

		public readonly unsafe HResult GetInitialRegisterContents(ref D3D11TraceRegister pRegister, D3D11TraceValue* pValue)
		{
			ID3D11ShaderTrace* ptr = (ID3D11ShaderTrace*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TraceRegister* ppRegister = &pRegister)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, D3D11TraceRegister*, D3D11TraceValue*, HResult>)(LpVtbl[4]))(ptr, (D3D11TraceRegister*)ppRegister, pValue);
				return ret;
			}
		}

		public readonly unsafe HResult GetInitialRegisterContents(D3D11TraceRegister* pRegister, ref D3D11TraceValue pValue)
		{
			ID3D11ShaderTrace* ptr = (ID3D11ShaderTrace*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TraceValue* ppValue = &pValue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, D3D11TraceRegister*, D3D11TraceValue*, HResult>)(LpVtbl[4]))(ptr, pRegister, (D3D11TraceValue*)ppValue);
				return ret;
			}
		}

		public readonly unsafe HResult GetInitialRegisterContents(ref D3D11TraceRegister pRegister, ref D3D11TraceValue pValue)
		{
			ID3D11ShaderTrace* ptr = (ID3D11ShaderTrace*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TraceRegister* ppRegister = &pRegister)
			{
				fixed (D3D11TraceValue* ppValue = &pValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, D3D11TraceRegister*, D3D11TraceValue*, HResult>)(LpVtbl[4]))(ptr, (D3D11TraceRegister*)ppRegister, (D3D11TraceValue*)ppValue);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetStep(uint stepIndex, D3D11TraceStep* pTraceStep)
		{
			ID3D11ShaderTrace* ptr = (ID3D11ShaderTrace*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, D3D11TraceStep*, HResult>)(LpVtbl[5]))(ptr, stepIndex, pTraceStep);
			return ret;
		}

		public readonly unsafe HResult GetStep(uint stepIndex, ref D3D11TraceStep pTraceStep)
		{
			ID3D11ShaderTrace* ptr = (ID3D11ShaderTrace*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TraceStep* ppTraceStep = &pTraceStep)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, D3D11TraceStep*, HResult>)(LpVtbl[5]))(ptr, stepIndex, (D3D11TraceStep*)ppTraceStep);
				return ret;
			}
		}

		public readonly unsafe HResult GetWrittenRegister(uint stepIndex, uint writtenRegisterIndex, D3D11TraceRegister* pRegister, D3D11TraceValue* pValue)
		{
			ID3D11ShaderTrace* ptr = (ID3D11ShaderTrace*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, uint, D3D11TraceRegister*, D3D11TraceValue*, HResult>)(LpVtbl[6]))(ptr, stepIndex, writtenRegisterIndex, pRegister, pValue);
			return ret;
		}

		public readonly unsafe HResult GetWrittenRegister(uint stepIndex, uint writtenRegisterIndex, ref D3D11TraceRegister pRegister, D3D11TraceValue* pValue)
		{
			ID3D11ShaderTrace* ptr = (ID3D11ShaderTrace*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TraceRegister* ppRegister = &pRegister)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, uint, D3D11TraceRegister*, D3D11TraceValue*, HResult>)(LpVtbl[6]))(ptr, stepIndex, writtenRegisterIndex, (D3D11TraceRegister*)ppRegister, pValue);
				return ret;
			}
		}

		public readonly unsafe HResult GetWrittenRegister(uint stepIndex, uint writtenRegisterIndex, D3D11TraceRegister* pRegister, ref D3D11TraceValue pValue)
		{
			ID3D11ShaderTrace* ptr = (ID3D11ShaderTrace*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TraceValue* ppValue = &pValue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, uint, D3D11TraceRegister*, D3D11TraceValue*, HResult>)(LpVtbl[6]))(ptr, stepIndex, writtenRegisterIndex, pRegister, (D3D11TraceValue*)ppValue);
				return ret;
			}
		}

		public readonly unsafe HResult GetWrittenRegister(uint stepIndex, uint writtenRegisterIndex, ref D3D11TraceRegister pRegister, ref D3D11TraceValue pValue)
		{
			ID3D11ShaderTrace* ptr = (ID3D11ShaderTrace*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TraceRegister* ppRegister = &pRegister)
			{
				fixed (D3D11TraceValue* ppValue = &pValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, uint, D3D11TraceRegister*, D3D11TraceValue*, HResult>)(LpVtbl[6]))(ptr, stepIndex, writtenRegisterIndex, (D3D11TraceRegister*)ppRegister, (D3D11TraceValue*)ppValue);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetReadRegister(uint stepIndex, uint readRegisterIndex, D3D11TraceRegister* pRegister, D3D11TraceValue* pValue)
		{
			ID3D11ShaderTrace* ptr = (ID3D11ShaderTrace*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, uint, D3D11TraceRegister*, D3D11TraceValue*, HResult>)(LpVtbl[7]))(ptr, stepIndex, readRegisterIndex, pRegister, pValue);
			return ret;
		}

		public readonly unsafe HResult GetReadRegister(uint stepIndex, uint readRegisterIndex, ref D3D11TraceRegister pRegister, D3D11TraceValue* pValue)
		{
			ID3D11ShaderTrace* ptr = (ID3D11ShaderTrace*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TraceRegister* ppRegister = &pRegister)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, uint, D3D11TraceRegister*, D3D11TraceValue*, HResult>)(LpVtbl[7]))(ptr, stepIndex, readRegisterIndex, (D3D11TraceRegister*)ppRegister, pValue);
				return ret;
			}
		}

		public readonly unsafe HResult GetReadRegister(uint stepIndex, uint readRegisterIndex, D3D11TraceRegister* pRegister, ref D3D11TraceValue pValue)
		{
			ID3D11ShaderTrace* ptr = (ID3D11ShaderTrace*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TraceValue* ppValue = &pValue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, uint, D3D11TraceRegister*, D3D11TraceValue*, HResult>)(LpVtbl[7]))(ptr, stepIndex, readRegisterIndex, pRegister, (D3D11TraceValue*)ppValue);
				return ret;
			}
		}

		public readonly unsafe HResult GetReadRegister(uint stepIndex, uint readRegisterIndex, ref D3D11TraceRegister pRegister, ref D3D11TraceValue pValue)
		{
			ID3D11ShaderTrace* ptr = (ID3D11ShaderTrace*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TraceRegister* ppRegister = &pRegister)
			{
				fixed (D3D11TraceValue* ppValue = &pValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, uint, D3D11TraceRegister*, D3D11TraceValue*, HResult>)(LpVtbl[7]))(ptr, stepIndex, readRegisterIndex, (D3D11TraceRegister*)ppRegister, (D3D11TraceValue*)ppValue);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11ShaderTrace value)
		{
			return Unsafe.As<ID3D11ShaderTrace, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_TRACE_STATS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11TraceStats
	{
		[NativeName("TraceDesc")]
		public D3D11ShaderTraceDesc TraceDesc;
		[NativeName("NumInvocationsInStamp")]
		public byte NumInvocationsInStamp;
		[NativeName("TargetStampIndex")]
		public byte TargetStampIndex;
		[NativeName("NumTraceSteps")]
		public uint NumTraceSteps;
		[NativeName("InputMask")]
		public byte InputMask_0;
		public byte InputMask_1;
		public byte InputMask_2;
		public byte InputMask_3;
		public byte InputMask_4;
		public byte InputMask_5;
		public byte InputMask_6;
		public byte InputMask_7;
		public byte InputMask_8;
		public byte InputMask_9;
		public byte InputMask_10;
		public byte InputMask_11;
		public byte InputMask_12;
		public byte InputMask_13;
		public byte InputMask_14;
		public byte InputMask_15;
		public byte InputMask_16;
		public byte InputMask_17;
		public byte InputMask_18;
		public byte InputMask_19;
		public byte InputMask_20;
		public byte InputMask_21;
		public byte InputMask_22;
		public byte InputMask_23;
		public byte InputMask_24;
		public byte InputMask_25;
		public byte InputMask_26;
		public byte InputMask_27;
		public byte InputMask_28;
		public byte InputMask_29;
		public byte InputMask_30;
		public byte InputMask_31;
		[NativeName("OutputMask")]
		public byte OutputMask_0;
		public byte OutputMask_1;
		public byte OutputMask_2;
		public byte OutputMask_3;
		public byte OutputMask_4;
		public byte OutputMask_5;
		public byte OutputMask_6;
		public byte OutputMask_7;
		public byte OutputMask_8;
		public byte OutputMask_9;
		public byte OutputMask_10;
		public byte OutputMask_11;
		public byte OutputMask_12;
		public byte OutputMask_13;
		public byte OutputMask_14;
		public byte OutputMask_15;
		public byte OutputMask_16;
		public byte OutputMask_17;
		public byte OutputMask_18;
		public byte OutputMask_19;
		public byte OutputMask_20;
		public byte OutputMask_21;
		public byte OutputMask_22;
		public byte OutputMask_23;
		public byte OutputMask_24;
		public byte OutputMask_25;
		public byte OutputMask_26;
		public byte OutputMask_27;
		public byte OutputMask_28;
		public byte OutputMask_29;
		public byte OutputMask_30;
		public byte OutputMask_31;
		[NativeName("NumTemps")]
		public ushort NumTemps;
		[NativeName("MaxIndexableTempIndex")]
		public ushort MaxIndexableTempIndex;
		[NativeName("IndexableTempSize")]
		public ushort IndexableTempSize_0;
		public ushort IndexableTempSize_1;
		public ushort IndexableTempSize_2;
		public ushort IndexableTempSize_3;
		public ushort IndexableTempSize_4;
		public ushort IndexableTempSize_5;
		public ushort IndexableTempSize_6;
		public ushort IndexableTempSize_7;
		public ushort IndexableTempSize_8;
		public ushort IndexableTempSize_9;
		public ushort IndexableTempSize_10;
		public ushort IndexableTempSize_11;
		public ushort IndexableTempSize_12;
		public ushort IndexableTempSize_13;
		public ushort IndexableTempSize_14;
		public ushort IndexableTempSize_15;
		public ushort IndexableTempSize_16;
		public ushort IndexableTempSize_17;
		public ushort IndexableTempSize_18;
		public ushort IndexableTempSize_19;
		public ushort IndexableTempSize_20;
		public ushort IndexableTempSize_21;
		public ushort IndexableTempSize_22;
		public ushort IndexableTempSize_23;
		public ushort IndexableTempSize_24;
		public ushort IndexableTempSize_25;
		public ushort IndexableTempSize_26;
		public ushort IndexableTempSize_27;
		public ushort IndexableTempSize_28;
		public ushort IndexableTempSize_29;
		public ushort IndexableTempSize_30;
		public ushort IndexableTempSize_31;
		public ushort IndexableTempSize_32;
		public ushort IndexableTempSize_33;
		public ushort IndexableTempSize_34;
		public ushort IndexableTempSize_35;
		public ushort IndexableTempSize_36;
		public ushort IndexableTempSize_37;
		public ushort IndexableTempSize_38;
		public ushort IndexableTempSize_39;
		public ushort IndexableTempSize_40;
		public ushort IndexableTempSize_41;
		public ushort IndexableTempSize_42;
		public ushort IndexableTempSize_43;
		public ushort IndexableTempSize_44;
		public ushort IndexableTempSize_45;
		public ushort IndexableTempSize_46;
		public ushort IndexableTempSize_47;
		public ushort IndexableTempSize_48;
		public ushort IndexableTempSize_49;
		public ushort IndexableTempSize_50;
		public ushort IndexableTempSize_51;
		public ushort IndexableTempSize_52;
		public ushort IndexableTempSize_53;
		public ushort IndexableTempSize_54;
		public ushort IndexableTempSize_55;
		public ushort IndexableTempSize_56;
		public ushort IndexableTempSize_57;
		public ushort IndexableTempSize_58;
		public ushort IndexableTempSize_59;
		public ushort IndexableTempSize_60;
		public ushort IndexableTempSize_61;
		public ushort IndexableTempSize_62;
		public ushort IndexableTempSize_63;
		public ushort IndexableTempSize_64;
		public ushort IndexableTempSize_65;
		public ushort IndexableTempSize_66;
		public ushort IndexableTempSize_67;
		public ushort IndexableTempSize_68;
		public ushort IndexableTempSize_69;
		public ushort IndexableTempSize_70;
		public ushort IndexableTempSize_71;
		public ushort IndexableTempSize_72;
		public ushort IndexableTempSize_73;
		public ushort IndexableTempSize_74;
		public ushort IndexableTempSize_75;
		public ushort IndexableTempSize_76;
		public ushort IndexableTempSize_77;
		public ushort IndexableTempSize_78;
		public ushort IndexableTempSize_79;
		public ushort IndexableTempSize_80;
		public ushort IndexableTempSize_81;
		public ushort IndexableTempSize_82;
		public ushort IndexableTempSize_83;
		public ushort IndexableTempSize_84;
		public ushort IndexableTempSize_85;
		public ushort IndexableTempSize_86;
		public ushort IndexableTempSize_87;
		public ushort IndexableTempSize_88;
		public ushort IndexableTempSize_89;
		public ushort IndexableTempSize_90;
		public ushort IndexableTempSize_91;
		public ushort IndexableTempSize_92;
		public ushort IndexableTempSize_93;
		public ushort IndexableTempSize_94;
		public ushort IndexableTempSize_95;
		public ushort IndexableTempSize_96;
		public ushort IndexableTempSize_97;
		public ushort IndexableTempSize_98;
		public ushort IndexableTempSize_99;
		public ushort IndexableTempSize_100;
		public ushort IndexableTempSize_101;
		public ushort IndexableTempSize_102;
		public ushort IndexableTempSize_103;
		public ushort IndexableTempSize_104;
		public ushort IndexableTempSize_105;
		public ushort IndexableTempSize_106;
		public ushort IndexableTempSize_107;
		public ushort IndexableTempSize_108;
		public ushort IndexableTempSize_109;
		public ushort IndexableTempSize_110;
		public ushort IndexableTempSize_111;
		public ushort IndexableTempSize_112;
		public ushort IndexableTempSize_113;
		public ushort IndexableTempSize_114;
		public ushort IndexableTempSize_115;
		public ushort IndexableTempSize_116;
		public ushort IndexableTempSize_117;
		public ushort IndexableTempSize_118;
		public ushort IndexableTempSize_119;
		public ushort IndexableTempSize_120;
		public ushort IndexableTempSize_121;
		public ushort IndexableTempSize_122;
		public ushort IndexableTempSize_123;
		public ushort IndexableTempSize_124;
		public ushort IndexableTempSize_125;
		public ushort IndexableTempSize_126;
		public ushort IndexableTempSize_127;
		public ushort IndexableTempSize_128;
		public ushort IndexableTempSize_129;
		public ushort IndexableTempSize_130;
		public ushort IndexableTempSize_131;
		public ushort IndexableTempSize_132;
		public ushort IndexableTempSize_133;
		public ushort IndexableTempSize_134;
		public ushort IndexableTempSize_135;
		public ushort IndexableTempSize_136;
		public ushort IndexableTempSize_137;
		public ushort IndexableTempSize_138;
		public ushort IndexableTempSize_139;
		public ushort IndexableTempSize_140;
		public ushort IndexableTempSize_141;
		public ushort IndexableTempSize_142;
		public ushort IndexableTempSize_143;
		public ushort IndexableTempSize_144;
		public ushort IndexableTempSize_145;
		public ushort IndexableTempSize_146;
		public ushort IndexableTempSize_147;
		public ushort IndexableTempSize_148;
		public ushort IndexableTempSize_149;
		public ushort IndexableTempSize_150;
		public ushort IndexableTempSize_151;
		public ushort IndexableTempSize_152;
		public ushort IndexableTempSize_153;
		public ushort IndexableTempSize_154;
		public ushort IndexableTempSize_155;
		public ushort IndexableTempSize_156;
		public ushort IndexableTempSize_157;
		public ushort IndexableTempSize_158;
		public ushort IndexableTempSize_159;
		public ushort IndexableTempSize_160;
		public ushort IndexableTempSize_161;
		public ushort IndexableTempSize_162;
		public ushort IndexableTempSize_163;
		public ushort IndexableTempSize_164;
		public ushort IndexableTempSize_165;
		public ushort IndexableTempSize_166;
		public ushort IndexableTempSize_167;
		public ushort IndexableTempSize_168;
		public ushort IndexableTempSize_169;
		public ushort IndexableTempSize_170;
		public ushort IndexableTempSize_171;
		public ushort IndexableTempSize_172;
		public ushort IndexableTempSize_173;
		public ushort IndexableTempSize_174;
		public ushort IndexableTempSize_175;
		public ushort IndexableTempSize_176;
		public ushort IndexableTempSize_177;
		public ushort IndexableTempSize_178;
		public ushort IndexableTempSize_179;
		public ushort IndexableTempSize_180;
		public ushort IndexableTempSize_181;
		public ushort IndexableTempSize_182;
		public ushort IndexableTempSize_183;
		public ushort IndexableTempSize_184;
		public ushort IndexableTempSize_185;
		public ushort IndexableTempSize_186;
		public ushort IndexableTempSize_187;
		public ushort IndexableTempSize_188;
		public ushort IndexableTempSize_189;
		public ushort IndexableTempSize_190;
		public ushort IndexableTempSize_191;
		public ushort IndexableTempSize_192;
		public ushort IndexableTempSize_193;
		public ushort IndexableTempSize_194;
		public ushort IndexableTempSize_195;
		public ushort IndexableTempSize_196;
		public ushort IndexableTempSize_197;
		public ushort IndexableTempSize_198;
		public ushort IndexableTempSize_199;
		public ushort IndexableTempSize_200;
		public ushort IndexableTempSize_201;
		public ushort IndexableTempSize_202;
		public ushort IndexableTempSize_203;
		public ushort IndexableTempSize_204;
		public ushort IndexableTempSize_205;
		public ushort IndexableTempSize_206;
		public ushort IndexableTempSize_207;
		public ushort IndexableTempSize_208;
		public ushort IndexableTempSize_209;
		public ushort IndexableTempSize_210;
		public ushort IndexableTempSize_211;
		public ushort IndexableTempSize_212;
		public ushort IndexableTempSize_213;
		public ushort IndexableTempSize_214;
		public ushort IndexableTempSize_215;
		public ushort IndexableTempSize_216;
		public ushort IndexableTempSize_217;
		public ushort IndexableTempSize_218;
		public ushort IndexableTempSize_219;
		public ushort IndexableTempSize_220;
		public ushort IndexableTempSize_221;
		public ushort IndexableTempSize_222;
		public ushort IndexableTempSize_223;
		public ushort IndexableTempSize_224;
		public ushort IndexableTempSize_225;
		public ushort IndexableTempSize_226;
		public ushort IndexableTempSize_227;
		public ushort IndexableTempSize_228;
		public ushort IndexableTempSize_229;
		public ushort IndexableTempSize_230;
		public ushort IndexableTempSize_231;
		public ushort IndexableTempSize_232;
		public ushort IndexableTempSize_233;
		public ushort IndexableTempSize_234;
		public ushort IndexableTempSize_235;
		public ushort IndexableTempSize_236;
		public ushort IndexableTempSize_237;
		public ushort IndexableTempSize_238;
		public ushort IndexableTempSize_239;
		public ushort IndexableTempSize_240;
		public ushort IndexableTempSize_241;
		public ushort IndexableTempSize_242;
		public ushort IndexableTempSize_243;
		public ushort IndexableTempSize_244;
		public ushort IndexableTempSize_245;
		public ushort IndexableTempSize_246;
		public ushort IndexableTempSize_247;
		public ushort IndexableTempSize_248;
		public ushort IndexableTempSize_249;
		public ushort IndexableTempSize_250;
		public ushort IndexableTempSize_251;
		public ushort IndexableTempSize_252;
		public ushort IndexableTempSize_253;
		public ushort IndexableTempSize_254;
		public ushort IndexableTempSize_255;
		public ushort IndexableTempSize_256;
		public ushort IndexableTempSize_257;
		public ushort IndexableTempSize_258;
		public ushort IndexableTempSize_259;
		public ushort IndexableTempSize_260;
		public ushort IndexableTempSize_261;
		public ushort IndexableTempSize_262;
		public ushort IndexableTempSize_263;
		public ushort IndexableTempSize_264;
		public ushort IndexableTempSize_265;
		public ushort IndexableTempSize_266;
		public ushort IndexableTempSize_267;
		public ushort IndexableTempSize_268;
		public ushort IndexableTempSize_269;
		public ushort IndexableTempSize_270;
		public ushort IndexableTempSize_271;
		public ushort IndexableTempSize_272;
		public ushort IndexableTempSize_273;
		public ushort IndexableTempSize_274;
		public ushort IndexableTempSize_275;
		public ushort IndexableTempSize_276;
		public ushort IndexableTempSize_277;
		public ushort IndexableTempSize_278;
		public ushort IndexableTempSize_279;
		public ushort IndexableTempSize_280;
		public ushort IndexableTempSize_281;
		public ushort IndexableTempSize_282;
		public ushort IndexableTempSize_283;
		public ushort IndexableTempSize_284;
		public ushort IndexableTempSize_285;
		public ushort IndexableTempSize_286;
		public ushort IndexableTempSize_287;
		public ushort IndexableTempSize_288;
		public ushort IndexableTempSize_289;
		public ushort IndexableTempSize_290;
		public ushort IndexableTempSize_291;
		public ushort IndexableTempSize_292;
		public ushort IndexableTempSize_293;
		public ushort IndexableTempSize_294;
		public ushort IndexableTempSize_295;
		public ushort IndexableTempSize_296;
		public ushort IndexableTempSize_297;
		public ushort IndexableTempSize_298;
		public ushort IndexableTempSize_299;
		public ushort IndexableTempSize_300;
		public ushort IndexableTempSize_301;
		public ushort IndexableTempSize_302;
		public ushort IndexableTempSize_303;
		public ushort IndexableTempSize_304;
		public ushort IndexableTempSize_305;
		public ushort IndexableTempSize_306;
		public ushort IndexableTempSize_307;
		public ushort IndexableTempSize_308;
		public ushort IndexableTempSize_309;
		public ushort IndexableTempSize_310;
		public ushort IndexableTempSize_311;
		public ushort IndexableTempSize_312;
		public ushort IndexableTempSize_313;
		public ushort IndexableTempSize_314;
		public ushort IndexableTempSize_315;
		public ushort IndexableTempSize_316;
		public ushort IndexableTempSize_317;
		public ushort IndexableTempSize_318;
		public ushort IndexableTempSize_319;
		public ushort IndexableTempSize_320;
		public ushort IndexableTempSize_321;
		public ushort IndexableTempSize_322;
		public ushort IndexableTempSize_323;
		public ushort IndexableTempSize_324;
		public ushort IndexableTempSize_325;
		public ushort IndexableTempSize_326;
		public ushort IndexableTempSize_327;
		public ushort IndexableTempSize_328;
		public ushort IndexableTempSize_329;
		public ushort IndexableTempSize_330;
		public ushort IndexableTempSize_331;
		public ushort IndexableTempSize_332;
		public ushort IndexableTempSize_333;
		public ushort IndexableTempSize_334;
		public ushort IndexableTempSize_335;
		public ushort IndexableTempSize_336;
		public ushort IndexableTempSize_337;
		public ushort IndexableTempSize_338;
		public ushort IndexableTempSize_339;
		public ushort IndexableTempSize_340;
		public ushort IndexableTempSize_341;
		public ushort IndexableTempSize_342;
		public ushort IndexableTempSize_343;
		public ushort IndexableTempSize_344;
		public ushort IndexableTempSize_345;
		public ushort IndexableTempSize_346;
		public ushort IndexableTempSize_347;
		public ushort IndexableTempSize_348;
		public ushort IndexableTempSize_349;
		public ushort IndexableTempSize_350;
		public ushort IndexableTempSize_351;
		public ushort IndexableTempSize_352;
		public ushort IndexableTempSize_353;
		public ushort IndexableTempSize_354;
		public ushort IndexableTempSize_355;
		public ushort IndexableTempSize_356;
		public ushort IndexableTempSize_357;
		public ushort IndexableTempSize_358;
		public ushort IndexableTempSize_359;
		public ushort IndexableTempSize_360;
		public ushort IndexableTempSize_361;
		public ushort IndexableTempSize_362;
		public ushort IndexableTempSize_363;
		public ushort IndexableTempSize_364;
		public ushort IndexableTempSize_365;
		public ushort IndexableTempSize_366;
		public ushort IndexableTempSize_367;
		public ushort IndexableTempSize_368;
		public ushort IndexableTempSize_369;
		public ushort IndexableTempSize_370;
		public ushort IndexableTempSize_371;
		public ushort IndexableTempSize_372;
		public ushort IndexableTempSize_373;
		public ushort IndexableTempSize_374;
		public ushort IndexableTempSize_375;
		public ushort IndexableTempSize_376;
		public ushort IndexableTempSize_377;
		public ushort IndexableTempSize_378;
		public ushort IndexableTempSize_379;
		public ushort IndexableTempSize_380;
		public ushort IndexableTempSize_381;
		public ushort IndexableTempSize_382;
		public ushort IndexableTempSize_383;
		public ushort IndexableTempSize_384;
		public ushort IndexableTempSize_385;
		public ushort IndexableTempSize_386;
		public ushort IndexableTempSize_387;
		public ushort IndexableTempSize_388;
		public ushort IndexableTempSize_389;
		public ushort IndexableTempSize_390;
		public ushort IndexableTempSize_391;
		public ushort IndexableTempSize_392;
		public ushort IndexableTempSize_393;
		public ushort IndexableTempSize_394;
		public ushort IndexableTempSize_395;
		public ushort IndexableTempSize_396;
		public ushort IndexableTempSize_397;
		public ushort IndexableTempSize_398;
		public ushort IndexableTempSize_399;
		public ushort IndexableTempSize_400;
		public ushort IndexableTempSize_401;
		public ushort IndexableTempSize_402;
		public ushort IndexableTempSize_403;
		public ushort IndexableTempSize_404;
		public ushort IndexableTempSize_405;
		public ushort IndexableTempSize_406;
		public ushort IndexableTempSize_407;
		public ushort IndexableTempSize_408;
		public ushort IndexableTempSize_409;
		public ushort IndexableTempSize_410;
		public ushort IndexableTempSize_411;
		public ushort IndexableTempSize_412;
		public ushort IndexableTempSize_413;
		public ushort IndexableTempSize_414;
		public ushort IndexableTempSize_415;
		public ushort IndexableTempSize_416;
		public ushort IndexableTempSize_417;
		public ushort IndexableTempSize_418;
		public ushort IndexableTempSize_419;
		public ushort IndexableTempSize_420;
		public ushort IndexableTempSize_421;
		public ushort IndexableTempSize_422;
		public ushort IndexableTempSize_423;
		public ushort IndexableTempSize_424;
		public ushort IndexableTempSize_425;
		public ushort IndexableTempSize_426;
		public ushort IndexableTempSize_427;
		public ushort IndexableTempSize_428;
		public ushort IndexableTempSize_429;
		public ushort IndexableTempSize_430;
		public ushort IndexableTempSize_431;
		public ushort IndexableTempSize_432;
		public ushort IndexableTempSize_433;
		public ushort IndexableTempSize_434;
		public ushort IndexableTempSize_435;
		public ushort IndexableTempSize_436;
		public ushort IndexableTempSize_437;
		public ushort IndexableTempSize_438;
		public ushort IndexableTempSize_439;
		public ushort IndexableTempSize_440;
		public ushort IndexableTempSize_441;
		public ushort IndexableTempSize_442;
		public ushort IndexableTempSize_443;
		public ushort IndexableTempSize_444;
		public ushort IndexableTempSize_445;
		public ushort IndexableTempSize_446;
		public ushort IndexableTempSize_447;
		public ushort IndexableTempSize_448;
		public ushort IndexableTempSize_449;
		public ushort IndexableTempSize_450;
		public ushort IndexableTempSize_451;
		public ushort IndexableTempSize_452;
		public ushort IndexableTempSize_453;
		public ushort IndexableTempSize_454;
		public ushort IndexableTempSize_455;
		public ushort IndexableTempSize_456;
		public ushort IndexableTempSize_457;
		public ushort IndexableTempSize_458;
		public ushort IndexableTempSize_459;
		public ushort IndexableTempSize_460;
		public ushort IndexableTempSize_461;
		public ushort IndexableTempSize_462;
		public ushort IndexableTempSize_463;
		public ushort IndexableTempSize_464;
		public ushort IndexableTempSize_465;
		public ushort IndexableTempSize_466;
		public ushort IndexableTempSize_467;
		public ushort IndexableTempSize_468;
		public ushort IndexableTempSize_469;
		public ushort IndexableTempSize_470;
		public ushort IndexableTempSize_471;
		public ushort IndexableTempSize_472;
		public ushort IndexableTempSize_473;
		public ushort IndexableTempSize_474;
		public ushort IndexableTempSize_475;
		public ushort IndexableTempSize_476;
		public ushort IndexableTempSize_477;
		public ushort IndexableTempSize_478;
		public ushort IndexableTempSize_479;
		public ushort IndexableTempSize_480;
		public ushort IndexableTempSize_481;
		public ushort IndexableTempSize_482;
		public ushort IndexableTempSize_483;
		public ushort IndexableTempSize_484;
		public ushort IndexableTempSize_485;
		public ushort IndexableTempSize_486;
		public ushort IndexableTempSize_487;
		public ushort IndexableTempSize_488;
		public ushort IndexableTempSize_489;
		public ushort IndexableTempSize_490;
		public ushort IndexableTempSize_491;
		public ushort IndexableTempSize_492;
		public ushort IndexableTempSize_493;
		public ushort IndexableTempSize_494;
		public ushort IndexableTempSize_495;
		public ushort IndexableTempSize_496;
		public ushort IndexableTempSize_497;
		public ushort IndexableTempSize_498;
		public ushort IndexableTempSize_499;
		public ushort IndexableTempSize_500;
		public ushort IndexableTempSize_501;
		public ushort IndexableTempSize_502;
		public ushort IndexableTempSize_503;
		public ushort IndexableTempSize_504;
		public ushort IndexableTempSize_505;
		public ushort IndexableTempSize_506;
		public ushort IndexableTempSize_507;
		public ushort IndexableTempSize_508;
		public ushort IndexableTempSize_509;
		public ushort IndexableTempSize_510;
		public ushort IndexableTempSize_511;
		public ushort IndexableTempSize_512;
		public ushort IndexableTempSize_513;
		public ushort IndexableTempSize_514;
		public ushort IndexableTempSize_515;
		public ushort IndexableTempSize_516;
		public ushort IndexableTempSize_517;
		public ushort IndexableTempSize_518;
		public ushort IndexableTempSize_519;
		public ushort IndexableTempSize_520;
		public ushort IndexableTempSize_521;
		public ushort IndexableTempSize_522;
		public ushort IndexableTempSize_523;
		public ushort IndexableTempSize_524;
		public ushort IndexableTempSize_525;
		public ushort IndexableTempSize_526;
		public ushort IndexableTempSize_527;
		public ushort IndexableTempSize_528;
		public ushort IndexableTempSize_529;
		public ushort IndexableTempSize_530;
		public ushort IndexableTempSize_531;
		public ushort IndexableTempSize_532;
		public ushort IndexableTempSize_533;
		public ushort IndexableTempSize_534;
		public ushort IndexableTempSize_535;
		public ushort IndexableTempSize_536;
		public ushort IndexableTempSize_537;
		public ushort IndexableTempSize_538;
		public ushort IndexableTempSize_539;
		public ushort IndexableTempSize_540;
		public ushort IndexableTempSize_541;
		public ushort IndexableTempSize_542;
		public ushort IndexableTempSize_543;
		public ushort IndexableTempSize_544;
		public ushort IndexableTempSize_545;
		public ushort IndexableTempSize_546;
		public ushort IndexableTempSize_547;
		public ushort IndexableTempSize_548;
		public ushort IndexableTempSize_549;
		public ushort IndexableTempSize_550;
		public ushort IndexableTempSize_551;
		public ushort IndexableTempSize_552;
		public ushort IndexableTempSize_553;
		public ushort IndexableTempSize_554;
		public ushort IndexableTempSize_555;
		public ushort IndexableTempSize_556;
		public ushort IndexableTempSize_557;
		public ushort IndexableTempSize_558;
		public ushort IndexableTempSize_559;
		public ushort IndexableTempSize_560;
		public ushort IndexableTempSize_561;
		public ushort IndexableTempSize_562;
		public ushort IndexableTempSize_563;
		public ushort IndexableTempSize_564;
		public ushort IndexableTempSize_565;
		public ushort IndexableTempSize_566;
		public ushort IndexableTempSize_567;
		public ushort IndexableTempSize_568;
		public ushort IndexableTempSize_569;
		public ushort IndexableTempSize_570;
		public ushort IndexableTempSize_571;
		public ushort IndexableTempSize_572;
		public ushort IndexableTempSize_573;
		public ushort IndexableTempSize_574;
		public ushort IndexableTempSize_575;
		public ushort IndexableTempSize_576;
		public ushort IndexableTempSize_577;
		public ushort IndexableTempSize_578;
		public ushort IndexableTempSize_579;
		public ushort IndexableTempSize_580;
		public ushort IndexableTempSize_581;
		public ushort IndexableTempSize_582;
		public ushort IndexableTempSize_583;
		public ushort IndexableTempSize_584;
		public ushort IndexableTempSize_585;
		public ushort IndexableTempSize_586;
		public ushort IndexableTempSize_587;
		public ushort IndexableTempSize_588;
		public ushort IndexableTempSize_589;
		public ushort IndexableTempSize_590;
		public ushort IndexableTempSize_591;
		public ushort IndexableTempSize_592;
		public ushort IndexableTempSize_593;
		public ushort IndexableTempSize_594;
		public ushort IndexableTempSize_595;
		public ushort IndexableTempSize_596;
		public ushort IndexableTempSize_597;
		public ushort IndexableTempSize_598;
		public ushort IndexableTempSize_599;
		public ushort IndexableTempSize_600;
		public ushort IndexableTempSize_601;
		public ushort IndexableTempSize_602;
		public ushort IndexableTempSize_603;
		public ushort IndexableTempSize_604;
		public ushort IndexableTempSize_605;
		public ushort IndexableTempSize_606;
		public ushort IndexableTempSize_607;
		public ushort IndexableTempSize_608;
		public ushort IndexableTempSize_609;
		public ushort IndexableTempSize_610;
		public ushort IndexableTempSize_611;
		public ushort IndexableTempSize_612;
		public ushort IndexableTempSize_613;
		public ushort IndexableTempSize_614;
		public ushort IndexableTempSize_615;
		public ushort IndexableTempSize_616;
		public ushort IndexableTempSize_617;
		public ushort IndexableTempSize_618;
		public ushort IndexableTempSize_619;
		public ushort IndexableTempSize_620;
		public ushort IndexableTempSize_621;
		public ushort IndexableTempSize_622;
		public ushort IndexableTempSize_623;
		public ushort IndexableTempSize_624;
		public ushort IndexableTempSize_625;
		public ushort IndexableTempSize_626;
		public ushort IndexableTempSize_627;
		public ushort IndexableTempSize_628;
		public ushort IndexableTempSize_629;
		public ushort IndexableTempSize_630;
		public ushort IndexableTempSize_631;
		public ushort IndexableTempSize_632;
		public ushort IndexableTempSize_633;
		public ushort IndexableTempSize_634;
		public ushort IndexableTempSize_635;
		public ushort IndexableTempSize_636;
		public ushort IndexableTempSize_637;
		public ushort IndexableTempSize_638;
		public ushort IndexableTempSize_639;
		public ushort IndexableTempSize_640;
		public ushort IndexableTempSize_641;
		public ushort IndexableTempSize_642;
		public ushort IndexableTempSize_643;
		public ushort IndexableTempSize_644;
		public ushort IndexableTempSize_645;
		public ushort IndexableTempSize_646;
		public ushort IndexableTempSize_647;
		public ushort IndexableTempSize_648;
		public ushort IndexableTempSize_649;
		public ushort IndexableTempSize_650;
		public ushort IndexableTempSize_651;
		public ushort IndexableTempSize_652;
		public ushort IndexableTempSize_653;
		public ushort IndexableTempSize_654;
		public ushort IndexableTempSize_655;
		public ushort IndexableTempSize_656;
		public ushort IndexableTempSize_657;
		public ushort IndexableTempSize_658;
		public ushort IndexableTempSize_659;
		public ushort IndexableTempSize_660;
		public ushort IndexableTempSize_661;
		public ushort IndexableTempSize_662;
		public ushort IndexableTempSize_663;
		public ushort IndexableTempSize_664;
		public ushort IndexableTempSize_665;
		public ushort IndexableTempSize_666;
		public ushort IndexableTempSize_667;
		public ushort IndexableTempSize_668;
		public ushort IndexableTempSize_669;
		public ushort IndexableTempSize_670;
		public ushort IndexableTempSize_671;
		public ushort IndexableTempSize_672;
		public ushort IndexableTempSize_673;
		public ushort IndexableTempSize_674;
		public ushort IndexableTempSize_675;
		public ushort IndexableTempSize_676;
		public ushort IndexableTempSize_677;
		public ushort IndexableTempSize_678;
		public ushort IndexableTempSize_679;
		public ushort IndexableTempSize_680;
		public ushort IndexableTempSize_681;
		public ushort IndexableTempSize_682;
		public ushort IndexableTempSize_683;
		public ushort IndexableTempSize_684;
		public ushort IndexableTempSize_685;
		public ushort IndexableTempSize_686;
		public ushort IndexableTempSize_687;
		public ushort IndexableTempSize_688;
		public ushort IndexableTempSize_689;
		public ushort IndexableTempSize_690;
		public ushort IndexableTempSize_691;
		public ushort IndexableTempSize_692;
		public ushort IndexableTempSize_693;
		public ushort IndexableTempSize_694;
		public ushort IndexableTempSize_695;
		public ushort IndexableTempSize_696;
		public ushort IndexableTempSize_697;
		public ushort IndexableTempSize_698;
		public ushort IndexableTempSize_699;
		public ushort IndexableTempSize_700;
		public ushort IndexableTempSize_701;
		public ushort IndexableTempSize_702;
		public ushort IndexableTempSize_703;
		public ushort IndexableTempSize_704;
		public ushort IndexableTempSize_705;
		public ushort IndexableTempSize_706;
		public ushort IndexableTempSize_707;
		public ushort IndexableTempSize_708;
		public ushort IndexableTempSize_709;
		public ushort IndexableTempSize_710;
		public ushort IndexableTempSize_711;
		public ushort IndexableTempSize_712;
		public ushort IndexableTempSize_713;
		public ushort IndexableTempSize_714;
		public ushort IndexableTempSize_715;
		public ushort IndexableTempSize_716;
		public ushort IndexableTempSize_717;
		public ushort IndexableTempSize_718;
		public ushort IndexableTempSize_719;
		public ushort IndexableTempSize_720;
		public ushort IndexableTempSize_721;
		public ushort IndexableTempSize_722;
		public ushort IndexableTempSize_723;
		public ushort IndexableTempSize_724;
		public ushort IndexableTempSize_725;
		public ushort IndexableTempSize_726;
		public ushort IndexableTempSize_727;
		public ushort IndexableTempSize_728;
		public ushort IndexableTempSize_729;
		public ushort IndexableTempSize_730;
		public ushort IndexableTempSize_731;
		public ushort IndexableTempSize_732;
		public ushort IndexableTempSize_733;
		public ushort IndexableTempSize_734;
		public ushort IndexableTempSize_735;
		public ushort IndexableTempSize_736;
		public ushort IndexableTempSize_737;
		public ushort IndexableTempSize_738;
		public ushort IndexableTempSize_739;
		public ushort IndexableTempSize_740;
		public ushort IndexableTempSize_741;
		public ushort IndexableTempSize_742;
		public ushort IndexableTempSize_743;
		public ushort IndexableTempSize_744;
		public ushort IndexableTempSize_745;
		public ushort IndexableTempSize_746;
		public ushort IndexableTempSize_747;
		public ushort IndexableTempSize_748;
		public ushort IndexableTempSize_749;
		public ushort IndexableTempSize_750;
		public ushort IndexableTempSize_751;
		public ushort IndexableTempSize_752;
		public ushort IndexableTempSize_753;
		public ushort IndexableTempSize_754;
		public ushort IndexableTempSize_755;
		public ushort IndexableTempSize_756;
		public ushort IndexableTempSize_757;
		public ushort IndexableTempSize_758;
		public ushort IndexableTempSize_759;
		public ushort IndexableTempSize_760;
		public ushort IndexableTempSize_761;
		public ushort IndexableTempSize_762;
		public ushort IndexableTempSize_763;
		public ushort IndexableTempSize_764;
		public ushort IndexableTempSize_765;
		public ushort IndexableTempSize_766;
		public ushort IndexableTempSize_767;
		public ushort IndexableTempSize_768;
		public ushort IndexableTempSize_769;
		public ushort IndexableTempSize_770;
		public ushort IndexableTempSize_771;
		public ushort IndexableTempSize_772;
		public ushort IndexableTempSize_773;
		public ushort IndexableTempSize_774;
		public ushort IndexableTempSize_775;
		public ushort IndexableTempSize_776;
		public ushort IndexableTempSize_777;
		public ushort IndexableTempSize_778;
		public ushort IndexableTempSize_779;
		public ushort IndexableTempSize_780;
		public ushort IndexableTempSize_781;
		public ushort IndexableTempSize_782;
		public ushort IndexableTempSize_783;
		public ushort IndexableTempSize_784;
		public ushort IndexableTempSize_785;
		public ushort IndexableTempSize_786;
		public ushort IndexableTempSize_787;
		public ushort IndexableTempSize_788;
		public ushort IndexableTempSize_789;
		public ushort IndexableTempSize_790;
		public ushort IndexableTempSize_791;
		public ushort IndexableTempSize_792;
		public ushort IndexableTempSize_793;
		public ushort IndexableTempSize_794;
		public ushort IndexableTempSize_795;
		public ushort IndexableTempSize_796;
		public ushort IndexableTempSize_797;
		public ushort IndexableTempSize_798;
		public ushort IndexableTempSize_799;
		public ushort IndexableTempSize_800;
		public ushort IndexableTempSize_801;
		public ushort IndexableTempSize_802;
		public ushort IndexableTempSize_803;
		public ushort IndexableTempSize_804;
		public ushort IndexableTempSize_805;
		public ushort IndexableTempSize_806;
		public ushort IndexableTempSize_807;
		public ushort IndexableTempSize_808;
		public ushort IndexableTempSize_809;
		public ushort IndexableTempSize_810;
		public ushort IndexableTempSize_811;
		public ushort IndexableTempSize_812;
		public ushort IndexableTempSize_813;
		public ushort IndexableTempSize_814;
		public ushort IndexableTempSize_815;
		public ushort IndexableTempSize_816;
		public ushort IndexableTempSize_817;
		public ushort IndexableTempSize_818;
		public ushort IndexableTempSize_819;
		public ushort IndexableTempSize_820;
		public ushort IndexableTempSize_821;
		public ushort IndexableTempSize_822;
		public ushort IndexableTempSize_823;
		public ushort IndexableTempSize_824;
		public ushort IndexableTempSize_825;
		public ushort IndexableTempSize_826;
		public ushort IndexableTempSize_827;
		public ushort IndexableTempSize_828;
		public ushort IndexableTempSize_829;
		public ushort IndexableTempSize_830;
		public ushort IndexableTempSize_831;
		public ushort IndexableTempSize_832;
		public ushort IndexableTempSize_833;
		public ushort IndexableTempSize_834;
		public ushort IndexableTempSize_835;
		public ushort IndexableTempSize_836;
		public ushort IndexableTempSize_837;
		public ushort IndexableTempSize_838;
		public ushort IndexableTempSize_839;
		public ushort IndexableTempSize_840;
		public ushort IndexableTempSize_841;
		public ushort IndexableTempSize_842;
		public ushort IndexableTempSize_843;
		public ushort IndexableTempSize_844;
		public ushort IndexableTempSize_845;
		public ushort IndexableTempSize_846;
		public ushort IndexableTempSize_847;
		public ushort IndexableTempSize_848;
		public ushort IndexableTempSize_849;
		public ushort IndexableTempSize_850;
		public ushort IndexableTempSize_851;
		public ushort IndexableTempSize_852;
		public ushort IndexableTempSize_853;
		public ushort IndexableTempSize_854;
		public ushort IndexableTempSize_855;
		public ushort IndexableTempSize_856;
		public ushort IndexableTempSize_857;
		public ushort IndexableTempSize_858;
		public ushort IndexableTempSize_859;
		public ushort IndexableTempSize_860;
		public ushort IndexableTempSize_861;
		public ushort IndexableTempSize_862;
		public ushort IndexableTempSize_863;
		public ushort IndexableTempSize_864;
		public ushort IndexableTempSize_865;
		public ushort IndexableTempSize_866;
		public ushort IndexableTempSize_867;
		public ushort IndexableTempSize_868;
		public ushort IndexableTempSize_869;
		public ushort IndexableTempSize_870;
		public ushort IndexableTempSize_871;
		public ushort IndexableTempSize_872;
		public ushort IndexableTempSize_873;
		public ushort IndexableTempSize_874;
		public ushort IndexableTempSize_875;
		public ushort IndexableTempSize_876;
		public ushort IndexableTempSize_877;
		public ushort IndexableTempSize_878;
		public ushort IndexableTempSize_879;
		public ushort IndexableTempSize_880;
		public ushort IndexableTempSize_881;
		public ushort IndexableTempSize_882;
		public ushort IndexableTempSize_883;
		public ushort IndexableTempSize_884;
		public ushort IndexableTempSize_885;
		public ushort IndexableTempSize_886;
		public ushort IndexableTempSize_887;
		public ushort IndexableTempSize_888;
		public ushort IndexableTempSize_889;
		public ushort IndexableTempSize_890;
		public ushort IndexableTempSize_891;
		public ushort IndexableTempSize_892;
		public ushort IndexableTempSize_893;
		public ushort IndexableTempSize_894;
		public ushort IndexableTempSize_895;
		public ushort IndexableTempSize_896;
		public ushort IndexableTempSize_897;
		public ushort IndexableTempSize_898;
		public ushort IndexableTempSize_899;
		public ushort IndexableTempSize_900;
		public ushort IndexableTempSize_901;
		public ushort IndexableTempSize_902;
		public ushort IndexableTempSize_903;
		public ushort IndexableTempSize_904;
		public ushort IndexableTempSize_905;
		public ushort IndexableTempSize_906;
		public ushort IndexableTempSize_907;
		public ushort IndexableTempSize_908;
		public ushort IndexableTempSize_909;
		public ushort IndexableTempSize_910;
		public ushort IndexableTempSize_911;
		public ushort IndexableTempSize_912;
		public ushort IndexableTempSize_913;
		public ushort IndexableTempSize_914;
		public ushort IndexableTempSize_915;
		public ushort IndexableTempSize_916;
		public ushort IndexableTempSize_917;
		public ushort IndexableTempSize_918;
		public ushort IndexableTempSize_919;
		public ushort IndexableTempSize_920;
		public ushort IndexableTempSize_921;
		public ushort IndexableTempSize_922;
		public ushort IndexableTempSize_923;
		public ushort IndexableTempSize_924;
		public ushort IndexableTempSize_925;
		public ushort IndexableTempSize_926;
		public ushort IndexableTempSize_927;
		public ushort IndexableTempSize_928;
		public ushort IndexableTempSize_929;
		public ushort IndexableTempSize_930;
		public ushort IndexableTempSize_931;
		public ushort IndexableTempSize_932;
		public ushort IndexableTempSize_933;
		public ushort IndexableTempSize_934;
		public ushort IndexableTempSize_935;
		public ushort IndexableTempSize_936;
		public ushort IndexableTempSize_937;
		public ushort IndexableTempSize_938;
		public ushort IndexableTempSize_939;
		public ushort IndexableTempSize_940;
		public ushort IndexableTempSize_941;
		public ushort IndexableTempSize_942;
		public ushort IndexableTempSize_943;
		public ushort IndexableTempSize_944;
		public ushort IndexableTempSize_945;
		public ushort IndexableTempSize_946;
		public ushort IndexableTempSize_947;
		public ushort IndexableTempSize_948;
		public ushort IndexableTempSize_949;
		public ushort IndexableTempSize_950;
		public ushort IndexableTempSize_951;
		public ushort IndexableTempSize_952;
		public ushort IndexableTempSize_953;
		public ushort IndexableTempSize_954;
		public ushort IndexableTempSize_955;
		public ushort IndexableTempSize_956;
		public ushort IndexableTempSize_957;
		public ushort IndexableTempSize_958;
		public ushort IndexableTempSize_959;
		public ushort IndexableTempSize_960;
		public ushort IndexableTempSize_961;
		public ushort IndexableTempSize_962;
		public ushort IndexableTempSize_963;
		public ushort IndexableTempSize_964;
		public ushort IndexableTempSize_965;
		public ushort IndexableTempSize_966;
		public ushort IndexableTempSize_967;
		public ushort IndexableTempSize_968;
		public ushort IndexableTempSize_969;
		public ushort IndexableTempSize_970;
		public ushort IndexableTempSize_971;
		public ushort IndexableTempSize_972;
		public ushort IndexableTempSize_973;
		public ushort IndexableTempSize_974;
		public ushort IndexableTempSize_975;
		public ushort IndexableTempSize_976;
		public ushort IndexableTempSize_977;
		public ushort IndexableTempSize_978;
		public ushort IndexableTempSize_979;
		public ushort IndexableTempSize_980;
		public ushort IndexableTempSize_981;
		public ushort IndexableTempSize_982;
		public ushort IndexableTempSize_983;
		public ushort IndexableTempSize_984;
		public ushort IndexableTempSize_985;
		public ushort IndexableTempSize_986;
		public ushort IndexableTempSize_987;
		public ushort IndexableTempSize_988;
		public ushort IndexableTempSize_989;
		public ushort IndexableTempSize_990;
		public ushort IndexableTempSize_991;
		public ushort IndexableTempSize_992;
		public ushort IndexableTempSize_993;
		public ushort IndexableTempSize_994;
		public ushort IndexableTempSize_995;
		public ushort IndexableTempSize_996;
		public ushort IndexableTempSize_997;
		public ushort IndexableTempSize_998;
		public ushort IndexableTempSize_999;
		public ushort IndexableTempSize_1000;
		public ushort IndexableTempSize_1001;
		public ushort IndexableTempSize_1002;
		public ushort IndexableTempSize_1003;
		public ushort IndexableTempSize_1004;
		public ushort IndexableTempSize_1005;
		public ushort IndexableTempSize_1006;
		public ushort IndexableTempSize_1007;
		public ushort IndexableTempSize_1008;
		public ushort IndexableTempSize_1009;
		public ushort IndexableTempSize_1010;
		public ushort IndexableTempSize_1011;
		public ushort IndexableTempSize_1012;
		public ushort IndexableTempSize_1013;
		public ushort IndexableTempSize_1014;
		public ushort IndexableTempSize_1015;
		public ushort IndexableTempSize_1016;
		public ushort IndexableTempSize_1017;
		public ushort IndexableTempSize_1018;
		public ushort IndexableTempSize_1019;
		public ushort IndexableTempSize_1020;
		public ushort IndexableTempSize_1021;
		public ushort IndexableTempSize_1022;
		public ushort IndexableTempSize_1023;
		public ushort IndexableTempSize_1024;
		public ushort IndexableTempSize_1025;
		public ushort IndexableTempSize_1026;
		public ushort IndexableTempSize_1027;
		public ushort IndexableTempSize_1028;
		public ushort IndexableTempSize_1029;
		public ushort IndexableTempSize_1030;
		public ushort IndexableTempSize_1031;
		public ushort IndexableTempSize_1032;
		public ushort IndexableTempSize_1033;
		public ushort IndexableTempSize_1034;
		public ushort IndexableTempSize_1035;
		public ushort IndexableTempSize_1036;
		public ushort IndexableTempSize_1037;
		public ushort IndexableTempSize_1038;
		public ushort IndexableTempSize_1039;
		public ushort IndexableTempSize_1040;
		public ushort IndexableTempSize_1041;
		public ushort IndexableTempSize_1042;
		public ushort IndexableTempSize_1043;
		public ushort IndexableTempSize_1044;
		public ushort IndexableTempSize_1045;
		public ushort IndexableTempSize_1046;
		public ushort IndexableTempSize_1047;
		public ushort IndexableTempSize_1048;
		public ushort IndexableTempSize_1049;
		public ushort IndexableTempSize_1050;
		public ushort IndexableTempSize_1051;
		public ushort IndexableTempSize_1052;
		public ushort IndexableTempSize_1053;
		public ushort IndexableTempSize_1054;
		public ushort IndexableTempSize_1055;
		public ushort IndexableTempSize_1056;
		public ushort IndexableTempSize_1057;
		public ushort IndexableTempSize_1058;
		public ushort IndexableTempSize_1059;
		public ushort IndexableTempSize_1060;
		public ushort IndexableTempSize_1061;
		public ushort IndexableTempSize_1062;
		public ushort IndexableTempSize_1063;
		public ushort IndexableTempSize_1064;
		public ushort IndexableTempSize_1065;
		public ushort IndexableTempSize_1066;
		public ushort IndexableTempSize_1067;
		public ushort IndexableTempSize_1068;
		public ushort IndexableTempSize_1069;
		public ushort IndexableTempSize_1070;
		public ushort IndexableTempSize_1071;
		public ushort IndexableTempSize_1072;
		public ushort IndexableTempSize_1073;
		public ushort IndexableTempSize_1074;
		public ushort IndexableTempSize_1075;
		public ushort IndexableTempSize_1076;
		public ushort IndexableTempSize_1077;
		public ushort IndexableTempSize_1078;
		public ushort IndexableTempSize_1079;
		public ushort IndexableTempSize_1080;
		public ushort IndexableTempSize_1081;
		public ushort IndexableTempSize_1082;
		public ushort IndexableTempSize_1083;
		public ushort IndexableTempSize_1084;
		public ushort IndexableTempSize_1085;
		public ushort IndexableTempSize_1086;
		public ushort IndexableTempSize_1087;
		public ushort IndexableTempSize_1088;
		public ushort IndexableTempSize_1089;
		public ushort IndexableTempSize_1090;
		public ushort IndexableTempSize_1091;
		public ushort IndexableTempSize_1092;
		public ushort IndexableTempSize_1093;
		public ushort IndexableTempSize_1094;
		public ushort IndexableTempSize_1095;
		public ushort IndexableTempSize_1096;
		public ushort IndexableTempSize_1097;
		public ushort IndexableTempSize_1098;
		public ushort IndexableTempSize_1099;
		public ushort IndexableTempSize_1100;
		public ushort IndexableTempSize_1101;
		public ushort IndexableTempSize_1102;
		public ushort IndexableTempSize_1103;
		public ushort IndexableTempSize_1104;
		public ushort IndexableTempSize_1105;
		public ushort IndexableTempSize_1106;
		public ushort IndexableTempSize_1107;
		public ushort IndexableTempSize_1108;
		public ushort IndexableTempSize_1109;
		public ushort IndexableTempSize_1110;
		public ushort IndexableTempSize_1111;
		public ushort IndexableTempSize_1112;
		public ushort IndexableTempSize_1113;
		public ushort IndexableTempSize_1114;
		public ushort IndexableTempSize_1115;
		public ushort IndexableTempSize_1116;
		public ushort IndexableTempSize_1117;
		public ushort IndexableTempSize_1118;
		public ushort IndexableTempSize_1119;
		public ushort IndexableTempSize_1120;
		public ushort IndexableTempSize_1121;
		public ushort IndexableTempSize_1122;
		public ushort IndexableTempSize_1123;
		public ushort IndexableTempSize_1124;
		public ushort IndexableTempSize_1125;
		public ushort IndexableTempSize_1126;
		public ushort IndexableTempSize_1127;
		public ushort IndexableTempSize_1128;
		public ushort IndexableTempSize_1129;
		public ushort IndexableTempSize_1130;
		public ushort IndexableTempSize_1131;
		public ushort IndexableTempSize_1132;
		public ushort IndexableTempSize_1133;
		public ushort IndexableTempSize_1134;
		public ushort IndexableTempSize_1135;
		public ushort IndexableTempSize_1136;
		public ushort IndexableTempSize_1137;
		public ushort IndexableTempSize_1138;
		public ushort IndexableTempSize_1139;
		public ushort IndexableTempSize_1140;
		public ushort IndexableTempSize_1141;
		public ushort IndexableTempSize_1142;
		public ushort IndexableTempSize_1143;
		public ushort IndexableTempSize_1144;
		public ushort IndexableTempSize_1145;
		public ushort IndexableTempSize_1146;
		public ushort IndexableTempSize_1147;
		public ushort IndexableTempSize_1148;
		public ushort IndexableTempSize_1149;
		public ushort IndexableTempSize_1150;
		public ushort IndexableTempSize_1151;
		public ushort IndexableTempSize_1152;
		public ushort IndexableTempSize_1153;
		public ushort IndexableTempSize_1154;
		public ushort IndexableTempSize_1155;
		public ushort IndexableTempSize_1156;
		public ushort IndexableTempSize_1157;
		public ushort IndexableTempSize_1158;
		public ushort IndexableTempSize_1159;
		public ushort IndexableTempSize_1160;
		public ushort IndexableTempSize_1161;
		public ushort IndexableTempSize_1162;
		public ushort IndexableTempSize_1163;
		public ushort IndexableTempSize_1164;
		public ushort IndexableTempSize_1165;
		public ushort IndexableTempSize_1166;
		public ushort IndexableTempSize_1167;
		public ushort IndexableTempSize_1168;
		public ushort IndexableTempSize_1169;
		public ushort IndexableTempSize_1170;
		public ushort IndexableTempSize_1171;
		public ushort IndexableTempSize_1172;
		public ushort IndexableTempSize_1173;
		public ushort IndexableTempSize_1174;
		public ushort IndexableTempSize_1175;
		public ushort IndexableTempSize_1176;
		public ushort IndexableTempSize_1177;
		public ushort IndexableTempSize_1178;
		public ushort IndexableTempSize_1179;
		public ushort IndexableTempSize_1180;
		public ushort IndexableTempSize_1181;
		public ushort IndexableTempSize_1182;
		public ushort IndexableTempSize_1183;
		public ushort IndexableTempSize_1184;
		public ushort IndexableTempSize_1185;
		public ushort IndexableTempSize_1186;
		public ushort IndexableTempSize_1187;
		public ushort IndexableTempSize_1188;
		public ushort IndexableTempSize_1189;
		public ushort IndexableTempSize_1190;
		public ushort IndexableTempSize_1191;
		public ushort IndexableTempSize_1192;
		public ushort IndexableTempSize_1193;
		public ushort IndexableTempSize_1194;
		public ushort IndexableTempSize_1195;
		public ushort IndexableTempSize_1196;
		public ushort IndexableTempSize_1197;
		public ushort IndexableTempSize_1198;
		public ushort IndexableTempSize_1199;
		public ushort IndexableTempSize_1200;
		public ushort IndexableTempSize_1201;
		public ushort IndexableTempSize_1202;
		public ushort IndexableTempSize_1203;
		public ushort IndexableTempSize_1204;
		public ushort IndexableTempSize_1205;
		public ushort IndexableTempSize_1206;
		public ushort IndexableTempSize_1207;
		public ushort IndexableTempSize_1208;
		public ushort IndexableTempSize_1209;
		public ushort IndexableTempSize_1210;
		public ushort IndexableTempSize_1211;
		public ushort IndexableTempSize_1212;
		public ushort IndexableTempSize_1213;
		public ushort IndexableTempSize_1214;
		public ushort IndexableTempSize_1215;
		public ushort IndexableTempSize_1216;
		public ushort IndexableTempSize_1217;
		public ushort IndexableTempSize_1218;
		public ushort IndexableTempSize_1219;
		public ushort IndexableTempSize_1220;
		public ushort IndexableTempSize_1221;
		public ushort IndexableTempSize_1222;
		public ushort IndexableTempSize_1223;
		public ushort IndexableTempSize_1224;
		public ushort IndexableTempSize_1225;
		public ushort IndexableTempSize_1226;
		public ushort IndexableTempSize_1227;
		public ushort IndexableTempSize_1228;
		public ushort IndexableTempSize_1229;
		public ushort IndexableTempSize_1230;
		public ushort IndexableTempSize_1231;
		public ushort IndexableTempSize_1232;
		public ushort IndexableTempSize_1233;
		public ushort IndexableTempSize_1234;
		public ushort IndexableTempSize_1235;
		public ushort IndexableTempSize_1236;
		public ushort IndexableTempSize_1237;
		public ushort IndexableTempSize_1238;
		public ushort IndexableTempSize_1239;
		public ushort IndexableTempSize_1240;
		public ushort IndexableTempSize_1241;
		public ushort IndexableTempSize_1242;
		public ushort IndexableTempSize_1243;
		public ushort IndexableTempSize_1244;
		public ushort IndexableTempSize_1245;
		public ushort IndexableTempSize_1246;
		public ushort IndexableTempSize_1247;
		public ushort IndexableTempSize_1248;
		public ushort IndexableTempSize_1249;
		public ushort IndexableTempSize_1250;
		public ushort IndexableTempSize_1251;
		public ushort IndexableTempSize_1252;
		public ushort IndexableTempSize_1253;
		public ushort IndexableTempSize_1254;
		public ushort IndexableTempSize_1255;
		public ushort IndexableTempSize_1256;
		public ushort IndexableTempSize_1257;
		public ushort IndexableTempSize_1258;
		public ushort IndexableTempSize_1259;
		public ushort IndexableTempSize_1260;
		public ushort IndexableTempSize_1261;
		public ushort IndexableTempSize_1262;
		public ushort IndexableTempSize_1263;
		public ushort IndexableTempSize_1264;
		public ushort IndexableTempSize_1265;
		public ushort IndexableTempSize_1266;
		public ushort IndexableTempSize_1267;
		public ushort IndexableTempSize_1268;
		public ushort IndexableTempSize_1269;
		public ushort IndexableTempSize_1270;
		public ushort IndexableTempSize_1271;
		public ushort IndexableTempSize_1272;
		public ushort IndexableTempSize_1273;
		public ushort IndexableTempSize_1274;
		public ushort IndexableTempSize_1275;
		public ushort IndexableTempSize_1276;
		public ushort IndexableTempSize_1277;
		public ushort IndexableTempSize_1278;
		public ushort IndexableTempSize_1279;
		public ushort IndexableTempSize_1280;
		public ushort IndexableTempSize_1281;
		public ushort IndexableTempSize_1282;
		public ushort IndexableTempSize_1283;
		public ushort IndexableTempSize_1284;
		public ushort IndexableTempSize_1285;
		public ushort IndexableTempSize_1286;
		public ushort IndexableTempSize_1287;
		public ushort IndexableTempSize_1288;
		public ushort IndexableTempSize_1289;
		public ushort IndexableTempSize_1290;
		public ushort IndexableTempSize_1291;
		public ushort IndexableTempSize_1292;
		public ushort IndexableTempSize_1293;
		public ushort IndexableTempSize_1294;
		public ushort IndexableTempSize_1295;
		public ushort IndexableTempSize_1296;
		public ushort IndexableTempSize_1297;
		public ushort IndexableTempSize_1298;
		public ushort IndexableTempSize_1299;
		public ushort IndexableTempSize_1300;
		public ushort IndexableTempSize_1301;
		public ushort IndexableTempSize_1302;
		public ushort IndexableTempSize_1303;
		public ushort IndexableTempSize_1304;
		public ushort IndexableTempSize_1305;
		public ushort IndexableTempSize_1306;
		public ushort IndexableTempSize_1307;
		public ushort IndexableTempSize_1308;
		public ushort IndexableTempSize_1309;
		public ushort IndexableTempSize_1310;
		public ushort IndexableTempSize_1311;
		public ushort IndexableTempSize_1312;
		public ushort IndexableTempSize_1313;
		public ushort IndexableTempSize_1314;
		public ushort IndexableTempSize_1315;
		public ushort IndexableTempSize_1316;
		public ushort IndexableTempSize_1317;
		public ushort IndexableTempSize_1318;
		public ushort IndexableTempSize_1319;
		public ushort IndexableTempSize_1320;
		public ushort IndexableTempSize_1321;
		public ushort IndexableTempSize_1322;
		public ushort IndexableTempSize_1323;
		public ushort IndexableTempSize_1324;
		public ushort IndexableTempSize_1325;
		public ushort IndexableTempSize_1326;
		public ushort IndexableTempSize_1327;
		public ushort IndexableTempSize_1328;
		public ushort IndexableTempSize_1329;
		public ushort IndexableTempSize_1330;
		public ushort IndexableTempSize_1331;
		public ushort IndexableTempSize_1332;
		public ushort IndexableTempSize_1333;
		public ushort IndexableTempSize_1334;
		public ushort IndexableTempSize_1335;
		public ushort IndexableTempSize_1336;
		public ushort IndexableTempSize_1337;
		public ushort IndexableTempSize_1338;
		public ushort IndexableTempSize_1339;
		public ushort IndexableTempSize_1340;
		public ushort IndexableTempSize_1341;
		public ushort IndexableTempSize_1342;
		public ushort IndexableTempSize_1343;
		public ushort IndexableTempSize_1344;
		public ushort IndexableTempSize_1345;
		public ushort IndexableTempSize_1346;
		public ushort IndexableTempSize_1347;
		public ushort IndexableTempSize_1348;
		public ushort IndexableTempSize_1349;
		public ushort IndexableTempSize_1350;
		public ushort IndexableTempSize_1351;
		public ushort IndexableTempSize_1352;
		public ushort IndexableTempSize_1353;
		public ushort IndexableTempSize_1354;
		public ushort IndexableTempSize_1355;
		public ushort IndexableTempSize_1356;
		public ushort IndexableTempSize_1357;
		public ushort IndexableTempSize_1358;
		public ushort IndexableTempSize_1359;
		public ushort IndexableTempSize_1360;
		public ushort IndexableTempSize_1361;
		public ushort IndexableTempSize_1362;
		public ushort IndexableTempSize_1363;
		public ushort IndexableTempSize_1364;
		public ushort IndexableTempSize_1365;
		public ushort IndexableTempSize_1366;
		public ushort IndexableTempSize_1367;
		public ushort IndexableTempSize_1368;
		public ushort IndexableTempSize_1369;
		public ushort IndexableTempSize_1370;
		public ushort IndexableTempSize_1371;
		public ushort IndexableTempSize_1372;
		public ushort IndexableTempSize_1373;
		public ushort IndexableTempSize_1374;
		public ushort IndexableTempSize_1375;
		public ushort IndexableTempSize_1376;
		public ushort IndexableTempSize_1377;
		public ushort IndexableTempSize_1378;
		public ushort IndexableTempSize_1379;
		public ushort IndexableTempSize_1380;
		public ushort IndexableTempSize_1381;
		public ushort IndexableTempSize_1382;
		public ushort IndexableTempSize_1383;
		public ushort IndexableTempSize_1384;
		public ushort IndexableTempSize_1385;
		public ushort IndexableTempSize_1386;
		public ushort IndexableTempSize_1387;
		public ushort IndexableTempSize_1388;
		public ushort IndexableTempSize_1389;
		public ushort IndexableTempSize_1390;
		public ushort IndexableTempSize_1391;
		public ushort IndexableTempSize_1392;
		public ushort IndexableTempSize_1393;
		public ushort IndexableTempSize_1394;
		public ushort IndexableTempSize_1395;
		public ushort IndexableTempSize_1396;
		public ushort IndexableTempSize_1397;
		public ushort IndexableTempSize_1398;
		public ushort IndexableTempSize_1399;
		public ushort IndexableTempSize_1400;
		public ushort IndexableTempSize_1401;
		public ushort IndexableTempSize_1402;
		public ushort IndexableTempSize_1403;
		public ushort IndexableTempSize_1404;
		public ushort IndexableTempSize_1405;
		public ushort IndexableTempSize_1406;
		public ushort IndexableTempSize_1407;
		public ushort IndexableTempSize_1408;
		public ushort IndexableTempSize_1409;
		public ushort IndexableTempSize_1410;
		public ushort IndexableTempSize_1411;
		public ushort IndexableTempSize_1412;
		public ushort IndexableTempSize_1413;
		public ushort IndexableTempSize_1414;
		public ushort IndexableTempSize_1415;
		public ushort IndexableTempSize_1416;
		public ushort IndexableTempSize_1417;
		public ushort IndexableTempSize_1418;
		public ushort IndexableTempSize_1419;
		public ushort IndexableTempSize_1420;
		public ushort IndexableTempSize_1421;
		public ushort IndexableTempSize_1422;
		public ushort IndexableTempSize_1423;
		public ushort IndexableTempSize_1424;
		public ushort IndexableTempSize_1425;
		public ushort IndexableTempSize_1426;
		public ushort IndexableTempSize_1427;
		public ushort IndexableTempSize_1428;
		public ushort IndexableTempSize_1429;
		public ushort IndexableTempSize_1430;
		public ushort IndexableTempSize_1431;
		public ushort IndexableTempSize_1432;
		public ushort IndexableTempSize_1433;
		public ushort IndexableTempSize_1434;
		public ushort IndexableTempSize_1435;
		public ushort IndexableTempSize_1436;
		public ushort IndexableTempSize_1437;
		public ushort IndexableTempSize_1438;
		public ushort IndexableTempSize_1439;
		public ushort IndexableTempSize_1440;
		public ushort IndexableTempSize_1441;
		public ushort IndexableTempSize_1442;
		public ushort IndexableTempSize_1443;
		public ushort IndexableTempSize_1444;
		public ushort IndexableTempSize_1445;
		public ushort IndexableTempSize_1446;
		public ushort IndexableTempSize_1447;
		public ushort IndexableTempSize_1448;
		public ushort IndexableTempSize_1449;
		public ushort IndexableTempSize_1450;
		public ushort IndexableTempSize_1451;
		public ushort IndexableTempSize_1452;
		public ushort IndexableTempSize_1453;
		public ushort IndexableTempSize_1454;
		public ushort IndexableTempSize_1455;
		public ushort IndexableTempSize_1456;
		public ushort IndexableTempSize_1457;
		public ushort IndexableTempSize_1458;
		public ushort IndexableTempSize_1459;
		public ushort IndexableTempSize_1460;
		public ushort IndexableTempSize_1461;
		public ushort IndexableTempSize_1462;
		public ushort IndexableTempSize_1463;
		public ushort IndexableTempSize_1464;
		public ushort IndexableTempSize_1465;
		public ushort IndexableTempSize_1466;
		public ushort IndexableTempSize_1467;
		public ushort IndexableTempSize_1468;
		public ushort IndexableTempSize_1469;
		public ushort IndexableTempSize_1470;
		public ushort IndexableTempSize_1471;
		public ushort IndexableTempSize_1472;
		public ushort IndexableTempSize_1473;
		public ushort IndexableTempSize_1474;
		public ushort IndexableTempSize_1475;
		public ushort IndexableTempSize_1476;
		public ushort IndexableTempSize_1477;
		public ushort IndexableTempSize_1478;
		public ushort IndexableTempSize_1479;
		public ushort IndexableTempSize_1480;
		public ushort IndexableTempSize_1481;
		public ushort IndexableTempSize_1482;
		public ushort IndexableTempSize_1483;
		public ushort IndexableTempSize_1484;
		public ushort IndexableTempSize_1485;
		public ushort IndexableTempSize_1486;
		public ushort IndexableTempSize_1487;
		public ushort IndexableTempSize_1488;
		public ushort IndexableTempSize_1489;
		public ushort IndexableTempSize_1490;
		public ushort IndexableTempSize_1491;
		public ushort IndexableTempSize_1492;
		public ushort IndexableTempSize_1493;
		public ushort IndexableTempSize_1494;
		public ushort IndexableTempSize_1495;
		public ushort IndexableTempSize_1496;
		public ushort IndexableTempSize_1497;
		public ushort IndexableTempSize_1498;
		public ushort IndexableTempSize_1499;
		public ushort IndexableTempSize_1500;
		public ushort IndexableTempSize_1501;
		public ushort IndexableTempSize_1502;
		public ushort IndexableTempSize_1503;
		public ushort IndexableTempSize_1504;
		public ushort IndexableTempSize_1505;
		public ushort IndexableTempSize_1506;
		public ushort IndexableTempSize_1507;
		public ushort IndexableTempSize_1508;
		public ushort IndexableTempSize_1509;
		public ushort IndexableTempSize_1510;
		public ushort IndexableTempSize_1511;
		public ushort IndexableTempSize_1512;
		public ushort IndexableTempSize_1513;
		public ushort IndexableTempSize_1514;
		public ushort IndexableTempSize_1515;
		public ushort IndexableTempSize_1516;
		public ushort IndexableTempSize_1517;
		public ushort IndexableTempSize_1518;
		public ushort IndexableTempSize_1519;
		public ushort IndexableTempSize_1520;
		public ushort IndexableTempSize_1521;
		public ushort IndexableTempSize_1522;
		public ushort IndexableTempSize_1523;
		public ushort IndexableTempSize_1524;
		public ushort IndexableTempSize_1525;
		public ushort IndexableTempSize_1526;
		public ushort IndexableTempSize_1527;
		public ushort IndexableTempSize_1528;
		public ushort IndexableTempSize_1529;
		public ushort IndexableTempSize_1530;
		public ushort IndexableTempSize_1531;
		public ushort IndexableTempSize_1532;
		public ushort IndexableTempSize_1533;
		public ushort IndexableTempSize_1534;
		public ushort IndexableTempSize_1535;
		public ushort IndexableTempSize_1536;
		public ushort IndexableTempSize_1537;
		public ushort IndexableTempSize_1538;
		public ushort IndexableTempSize_1539;
		public ushort IndexableTempSize_1540;
		public ushort IndexableTempSize_1541;
		public ushort IndexableTempSize_1542;
		public ushort IndexableTempSize_1543;
		public ushort IndexableTempSize_1544;
		public ushort IndexableTempSize_1545;
		public ushort IndexableTempSize_1546;
		public ushort IndexableTempSize_1547;
		public ushort IndexableTempSize_1548;
		public ushort IndexableTempSize_1549;
		public ushort IndexableTempSize_1550;
		public ushort IndexableTempSize_1551;
		public ushort IndexableTempSize_1552;
		public ushort IndexableTempSize_1553;
		public ushort IndexableTempSize_1554;
		public ushort IndexableTempSize_1555;
		public ushort IndexableTempSize_1556;
		public ushort IndexableTempSize_1557;
		public ushort IndexableTempSize_1558;
		public ushort IndexableTempSize_1559;
		public ushort IndexableTempSize_1560;
		public ushort IndexableTempSize_1561;
		public ushort IndexableTempSize_1562;
		public ushort IndexableTempSize_1563;
		public ushort IndexableTempSize_1564;
		public ushort IndexableTempSize_1565;
		public ushort IndexableTempSize_1566;
		public ushort IndexableTempSize_1567;
		public ushort IndexableTempSize_1568;
		public ushort IndexableTempSize_1569;
		public ushort IndexableTempSize_1570;
		public ushort IndexableTempSize_1571;
		public ushort IndexableTempSize_1572;
		public ushort IndexableTempSize_1573;
		public ushort IndexableTempSize_1574;
		public ushort IndexableTempSize_1575;
		public ushort IndexableTempSize_1576;
		public ushort IndexableTempSize_1577;
		public ushort IndexableTempSize_1578;
		public ushort IndexableTempSize_1579;
		public ushort IndexableTempSize_1580;
		public ushort IndexableTempSize_1581;
		public ushort IndexableTempSize_1582;
		public ushort IndexableTempSize_1583;
		public ushort IndexableTempSize_1584;
		public ushort IndexableTempSize_1585;
		public ushort IndexableTempSize_1586;
		public ushort IndexableTempSize_1587;
		public ushort IndexableTempSize_1588;
		public ushort IndexableTempSize_1589;
		public ushort IndexableTempSize_1590;
		public ushort IndexableTempSize_1591;
		public ushort IndexableTempSize_1592;
		public ushort IndexableTempSize_1593;
		public ushort IndexableTempSize_1594;
		public ushort IndexableTempSize_1595;
		public ushort IndexableTempSize_1596;
		public ushort IndexableTempSize_1597;
		public ushort IndexableTempSize_1598;
		public ushort IndexableTempSize_1599;
		public ushort IndexableTempSize_1600;
		public ushort IndexableTempSize_1601;
		public ushort IndexableTempSize_1602;
		public ushort IndexableTempSize_1603;
		public ushort IndexableTempSize_1604;
		public ushort IndexableTempSize_1605;
		public ushort IndexableTempSize_1606;
		public ushort IndexableTempSize_1607;
		public ushort IndexableTempSize_1608;
		public ushort IndexableTempSize_1609;
		public ushort IndexableTempSize_1610;
		public ushort IndexableTempSize_1611;
		public ushort IndexableTempSize_1612;
		public ushort IndexableTempSize_1613;
		public ushort IndexableTempSize_1614;
		public ushort IndexableTempSize_1615;
		public ushort IndexableTempSize_1616;
		public ushort IndexableTempSize_1617;
		public ushort IndexableTempSize_1618;
		public ushort IndexableTempSize_1619;
		public ushort IndexableTempSize_1620;
		public ushort IndexableTempSize_1621;
		public ushort IndexableTempSize_1622;
		public ushort IndexableTempSize_1623;
		public ushort IndexableTempSize_1624;
		public ushort IndexableTempSize_1625;
		public ushort IndexableTempSize_1626;
		public ushort IndexableTempSize_1627;
		public ushort IndexableTempSize_1628;
		public ushort IndexableTempSize_1629;
		public ushort IndexableTempSize_1630;
		public ushort IndexableTempSize_1631;
		public ushort IndexableTempSize_1632;
		public ushort IndexableTempSize_1633;
		public ushort IndexableTempSize_1634;
		public ushort IndexableTempSize_1635;
		public ushort IndexableTempSize_1636;
		public ushort IndexableTempSize_1637;
		public ushort IndexableTempSize_1638;
		public ushort IndexableTempSize_1639;
		public ushort IndexableTempSize_1640;
		public ushort IndexableTempSize_1641;
		public ushort IndexableTempSize_1642;
		public ushort IndexableTempSize_1643;
		public ushort IndexableTempSize_1644;
		public ushort IndexableTempSize_1645;
		public ushort IndexableTempSize_1646;
		public ushort IndexableTempSize_1647;
		public ushort IndexableTempSize_1648;
		public ushort IndexableTempSize_1649;
		public ushort IndexableTempSize_1650;
		public ushort IndexableTempSize_1651;
		public ushort IndexableTempSize_1652;
		public ushort IndexableTempSize_1653;
		public ushort IndexableTempSize_1654;
		public ushort IndexableTempSize_1655;
		public ushort IndexableTempSize_1656;
		public ushort IndexableTempSize_1657;
		public ushort IndexableTempSize_1658;
		public ushort IndexableTempSize_1659;
		public ushort IndexableTempSize_1660;
		public ushort IndexableTempSize_1661;
		public ushort IndexableTempSize_1662;
		public ushort IndexableTempSize_1663;
		public ushort IndexableTempSize_1664;
		public ushort IndexableTempSize_1665;
		public ushort IndexableTempSize_1666;
		public ushort IndexableTempSize_1667;
		public ushort IndexableTempSize_1668;
		public ushort IndexableTempSize_1669;
		public ushort IndexableTempSize_1670;
		public ushort IndexableTempSize_1671;
		public ushort IndexableTempSize_1672;
		public ushort IndexableTempSize_1673;
		public ushort IndexableTempSize_1674;
		public ushort IndexableTempSize_1675;
		public ushort IndexableTempSize_1676;
		public ushort IndexableTempSize_1677;
		public ushort IndexableTempSize_1678;
		public ushort IndexableTempSize_1679;
		public ushort IndexableTempSize_1680;
		public ushort IndexableTempSize_1681;
		public ushort IndexableTempSize_1682;
		public ushort IndexableTempSize_1683;
		public ushort IndexableTempSize_1684;
		public ushort IndexableTempSize_1685;
		public ushort IndexableTempSize_1686;
		public ushort IndexableTempSize_1687;
		public ushort IndexableTempSize_1688;
		public ushort IndexableTempSize_1689;
		public ushort IndexableTempSize_1690;
		public ushort IndexableTempSize_1691;
		public ushort IndexableTempSize_1692;
		public ushort IndexableTempSize_1693;
		public ushort IndexableTempSize_1694;
		public ushort IndexableTempSize_1695;
		public ushort IndexableTempSize_1696;
		public ushort IndexableTempSize_1697;
		public ushort IndexableTempSize_1698;
		public ushort IndexableTempSize_1699;
		public ushort IndexableTempSize_1700;
		public ushort IndexableTempSize_1701;
		public ushort IndexableTempSize_1702;
		public ushort IndexableTempSize_1703;
		public ushort IndexableTempSize_1704;
		public ushort IndexableTempSize_1705;
		public ushort IndexableTempSize_1706;
		public ushort IndexableTempSize_1707;
		public ushort IndexableTempSize_1708;
		public ushort IndexableTempSize_1709;
		public ushort IndexableTempSize_1710;
		public ushort IndexableTempSize_1711;
		public ushort IndexableTempSize_1712;
		public ushort IndexableTempSize_1713;
		public ushort IndexableTempSize_1714;
		public ushort IndexableTempSize_1715;
		public ushort IndexableTempSize_1716;
		public ushort IndexableTempSize_1717;
		public ushort IndexableTempSize_1718;
		public ushort IndexableTempSize_1719;
		public ushort IndexableTempSize_1720;
		public ushort IndexableTempSize_1721;
		public ushort IndexableTempSize_1722;
		public ushort IndexableTempSize_1723;
		public ushort IndexableTempSize_1724;
		public ushort IndexableTempSize_1725;
		public ushort IndexableTempSize_1726;
		public ushort IndexableTempSize_1727;
		public ushort IndexableTempSize_1728;
		public ushort IndexableTempSize_1729;
		public ushort IndexableTempSize_1730;
		public ushort IndexableTempSize_1731;
		public ushort IndexableTempSize_1732;
		public ushort IndexableTempSize_1733;
		public ushort IndexableTempSize_1734;
		public ushort IndexableTempSize_1735;
		public ushort IndexableTempSize_1736;
		public ushort IndexableTempSize_1737;
		public ushort IndexableTempSize_1738;
		public ushort IndexableTempSize_1739;
		public ushort IndexableTempSize_1740;
		public ushort IndexableTempSize_1741;
		public ushort IndexableTempSize_1742;
		public ushort IndexableTempSize_1743;
		public ushort IndexableTempSize_1744;
		public ushort IndexableTempSize_1745;
		public ushort IndexableTempSize_1746;
		public ushort IndexableTempSize_1747;
		public ushort IndexableTempSize_1748;
		public ushort IndexableTempSize_1749;
		public ushort IndexableTempSize_1750;
		public ushort IndexableTempSize_1751;
		public ushort IndexableTempSize_1752;
		public ushort IndexableTempSize_1753;
		public ushort IndexableTempSize_1754;
		public ushort IndexableTempSize_1755;
		public ushort IndexableTempSize_1756;
		public ushort IndexableTempSize_1757;
		public ushort IndexableTempSize_1758;
		public ushort IndexableTempSize_1759;
		public ushort IndexableTempSize_1760;
		public ushort IndexableTempSize_1761;
		public ushort IndexableTempSize_1762;
		public ushort IndexableTempSize_1763;
		public ushort IndexableTempSize_1764;
		public ushort IndexableTempSize_1765;
		public ushort IndexableTempSize_1766;
		public ushort IndexableTempSize_1767;
		public ushort IndexableTempSize_1768;
		public ushort IndexableTempSize_1769;
		public ushort IndexableTempSize_1770;
		public ushort IndexableTempSize_1771;
		public ushort IndexableTempSize_1772;
		public ushort IndexableTempSize_1773;
		public ushort IndexableTempSize_1774;
		public ushort IndexableTempSize_1775;
		public ushort IndexableTempSize_1776;
		public ushort IndexableTempSize_1777;
		public ushort IndexableTempSize_1778;
		public ushort IndexableTempSize_1779;
		public ushort IndexableTempSize_1780;
		public ushort IndexableTempSize_1781;
		public ushort IndexableTempSize_1782;
		public ushort IndexableTempSize_1783;
		public ushort IndexableTempSize_1784;
		public ushort IndexableTempSize_1785;
		public ushort IndexableTempSize_1786;
		public ushort IndexableTempSize_1787;
		public ushort IndexableTempSize_1788;
		public ushort IndexableTempSize_1789;
		public ushort IndexableTempSize_1790;
		public ushort IndexableTempSize_1791;
		public ushort IndexableTempSize_1792;
		public ushort IndexableTempSize_1793;
		public ushort IndexableTempSize_1794;
		public ushort IndexableTempSize_1795;
		public ushort IndexableTempSize_1796;
		public ushort IndexableTempSize_1797;
		public ushort IndexableTempSize_1798;
		public ushort IndexableTempSize_1799;
		public ushort IndexableTempSize_1800;
		public ushort IndexableTempSize_1801;
		public ushort IndexableTempSize_1802;
		public ushort IndexableTempSize_1803;
		public ushort IndexableTempSize_1804;
		public ushort IndexableTempSize_1805;
		public ushort IndexableTempSize_1806;
		public ushort IndexableTempSize_1807;
		public ushort IndexableTempSize_1808;
		public ushort IndexableTempSize_1809;
		public ushort IndexableTempSize_1810;
		public ushort IndexableTempSize_1811;
		public ushort IndexableTempSize_1812;
		public ushort IndexableTempSize_1813;
		public ushort IndexableTempSize_1814;
		public ushort IndexableTempSize_1815;
		public ushort IndexableTempSize_1816;
		public ushort IndexableTempSize_1817;
		public ushort IndexableTempSize_1818;
		public ushort IndexableTempSize_1819;
		public ushort IndexableTempSize_1820;
		public ushort IndexableTempSize_1821;
		public ushort IndexableTempSize_1822;
		public ushort IndexableTempSize_1823;
		public ushort IndexableTempSize_1824;
		public ushort IndexableTempSize_1825;
		public ushort IndexableTempSize_1826;
		public ushort IndexableTempSize_1827;
		public ushort IndexableTempSize_1828;
		public ushort IndexableTempSize_1829;
		public ushort IndexableTempSize_1830;
		public ushort IndexableTempSize_1831;
		public ushort IndexableTempSize_1832;
		public ushort IndexableTempSize_1833;
		public ushort IndexableTempSize_1834;
		public ushort IndexableTempSize_1835;
		public ushort IndexableTempSize_1836;
		public ushort IndexableTempSize_1837;
		public ushort IndexableTempSize_1838;
		public ushort IndexableTempSize_1839;
		public ushort IndexableTempSize_1840;
		public ushort IndexableTempSize_1841;
		public ushort IndexableTempSize_1842;
		public ushort IndexableTempSize_1843;
		public ushort IndexableTempSize_1844;
		public ushort IndexableTempSize_1845;
		public ushort IndexableTempSize_1846;
		public ushort IndexableTempSize_1847;
		public ushort IndexableTempSize_1848;
		public ushort IndexableTempSize_1849;
		public ushort IndexableTempSize_1850;
		public ushort IndexableTempSize_1851;
		public ushort IndexableTempSize_1852;
		public ushort IndexableTempSize_1853;
		public ushort IndexableTempSize_1854;
		public ushort IndexableTempSize_1855;
		public ushort IndexableTempSize_1856;
		public ushort IndexableTempSize_1857;
		public ushort IndexableTempSize_1858;
		public ushort IndexableTempSize_1859;
		public ushort IndexableTempSize_1860;
		public ushort IndexableTempSize_1861;
		public ushort IndexableTempSize_1862;
		public ushort IndexableTempSize_1863;
		public ushort IndexableTempSize_1864;
		public ushort IndexableTempSize_1865;
		public ushort IndexableTempSize_1866;
		public ushort IndexableTempSize_1867;
		public ushort IndexableTempSize_1868;
		public ushort IndexableTempSize_1869;
		public ushort IndexableTempSize_1870;
		public ushort IndexableTempSize_1871;
		public ushort IndexableTempSize_1872;
		public ushort IndexableTempSize_1873;
		public ushort IndexableTempSize_1874;
		public ushort IndexableTempSize_1875;
		public ushort IndexableTempSize_1876;
		public ushort IndexableTempSize_1877;
		public ushort IndexableTempSize_1878;
		public ushort IndexableTempSize_1879;
		public ushort IndexableTempSize_1880;
		public ushort IndexableTempSize_1881;
		public ushort IndexableTempSize_1882;
		public ushort IndexableTempSize_1883;
		public ushort IndexableTempSize_1884;
		public ushort IndexableTempSize_1885;
		public ushort IndexableTempSize_1886;
		public ushort IndexableTempSize_1887;
		public ushort IndexableTempSize_1888;
		public ushort IndexableTempSize_1889;
		public ushort IndexableTempSize_1890;
		public ushort IndexableTempSize_1891;
		public ushort IndexableTempSize_1892;
		public ushort IndexableTempSize_1893;
		public ushort IndexableTempSize_1894;
		public ushort IndexableTempSize_1895;
		public ushort IndexableTempSize_1896;
		public ushort IndexableTempSize_1897;
		public ushort IndexableTempSize_1898;
		public ushort IndexableTempSize_1899;
		public ushort IndexableTempSize_1900;
		public ushort IndexableTempSize_1901;
		public ushort IndexableTempSize_1902;
		public ushort IndexableTempSize_1903;
		public ushort IndexableTempSize_1904;
		public ushort IndexableTempSize_1905;
		public ushort IndexableTempSize_1906;
		public ushort IndexableTempSize_1907;
		public ushort IndexableTempSize_1908;
		public ushort IndexableTempSize_1909;
		public ushort IndexableTempSize_1910;
		public ushort IndexableTempSize_1911;
		public ushort IndexableTempSize_1912;
		public ushort IndexableTempSize_1913;
		public ushort IndexableTempSize_1914;
		public ushort IndexableTempSize_1915;
		public ushort IndexableTempSize_1916;
		public ushort IndexableTempSize_1917;
		public ushort IndexableTempSize_1918;
		public ushort IndexableTempSize_1919;
		public ushort IndexableTempSize_1920;
		public ushort IndexableTempSize_1921;
		public ushort IndexableTempSize_1922;
		public ushort IndexableTempSize_1923;
		public ushort IndexableTempSize_1924;
		public ushort IndexableTempSize_1925;
		public ushort IndexableTempSize_1926;
		public ushort IndexableTempSize_1927;
		public ushort IndexableTempSize_1928;
		public ushort IndexableTempSize_1929;
		public ushort IndexableTempSize_1930;
		public ushort IndexableTempSize_1931;
		public ushort IndexableTempSize_1932;
		public ushort IndexableTempSize_1933;
		public ushort IndexableTempSize_1934;
		public ushort IndexableTempSize_1935;
		public ushort IndexableTempSize_1936;
		public ushort IndexableTempSize_1937;
		public ushort IndexableTempSize_1938;
		public ushort IndexableTempSize_1939;
		public ushort IndexableTempSize_1940;
		public ushort IndexableTempSize_1941;
		public ushort IndexableTempSize_1942;
		public ushort IndexableTempSize_1943;
		public ushort IndexableTempSize_1944;
		public ushort IndexableTempSize_1945;
		public ushort IndexableTempSize_1946;
		public ushort IndexableTempSize_1947;
		public ushort IndexableTempSize_1948;
		public ushort IndexableTempSize_1949;
		public ushort IndexableTempSize_1950;
		public ushort IndexableTempSize_1951;
		public ushort IndexableTempSize_1952;
		public ushort IndexableTempSize_1953;
		public ushort IndexableTempSize_1954;
		public ushort IndexableTempSize_1955;
		public ushort IndexableTempSize_1956;
		public ushort IndexableTempSize_1957;
		public ushort IndexableTempSize_1958;
		public ushort IndexableTempSize_1959;
		public ushort IndexableTempSize_1960;
		public ushort IndexableTempSize_1961;
		public ushort IndexableTempSize_1962;
		public ushort IndexableTempSize_1963;
		public ushort IndexableTempSize_1964;
		public ushort IndexableTempSize_1965;
		public ushort IndexableTempSize_1966;
		public ushort IndexableTempSize_1967;
		public ushort IndexableTempSize_1968;
		public ushort IndexableTempSize_1969;
		public ushort IndexableTempSize_1970;
		public ushort IndexableTempSize_1971;
		public ushort IndexableTempSize_1972;
		public ushort IndexableTempSize_1973;
		public ushort IndexableTempSize_1974;
		public ushort IndexableTempSize_1975;
		public ushort IndexableTempSize_1976;
		public ushort IndexableTempSize_1977;
		public ushort IndexableTempSize_1978;
		public ushort IndexableTempSize_1979;
		public ushort IndexableTempSize_1980;
		public ushort IndexableTempSize_1981;
		public ushort IndexableTempSize_1982;
		public ushort IndexableTempSize_1983;
		public ushort IndexableTempSize_1984;
		public ushort IndexableTempSize_1985;
		public ushort IndexableTempSize_1986;
		public ushort IndexableTempSize_1987;
		public ushort IndexableTempSize_1988;
		public ushort IndexableTempSize_1989;
		public ushort IndexableTempSize_1990;
		public ushort IndexableTempSize_1991;
		public ushort IndexableTempSize_1992;
		public ushort IndexableTempSize_1993;
		public ushort IndexableTempSize_1994;
		public ushort IndexableTempSize_1995;
		public ushort IndexableTempSize_1996;
		public ushort IndexableTempSize_1997;
		public ushort IndexableTempSize_1998;
		public ushort IndexableTempSize_1999;
		public ushort IndexableTempSize_2000;
		public ushort IndexableTempSize_2001;
		public ushort IndexableTempSize_2002;
		public ushort IndexableTempSize_2003;
		public ushort IndexableTempSize_2004;
		public ushort IndexableTempSize_2005;
		public ushort IndexableTempSize_2006;
		public ushort IndexableTempSize_2007;
		public ushort IndexableTempSize_2008;
		public ushort IndexableTempSize_2009;
		public ushort IndexableTempSize_2010;
		public ushort IndexableTempSize_2011;
		public ushort IndexableTempSize_2012;
		public ushort IndexableTempSize_2013;
		public ushort IndexableTempSize_2014;
		public ushort IndexableTempSize_2015;
		public ushort IndexableTempSize_2016;
		public ushort IndexableTempSize_2017;
		public ushort IndexableTempSize_2018;
		public ushort IndexableTempSize_2019;
		public ushort IndexableTempSize_2020;
		public ushort IndexableTempSize_2021;
		public ushort IndexableTempSize_2022;
		public ushort IndexableTempSize_2023;
		public ushort IndexableTempSize_2024;
		public ushort IndexableTempSize_2025;
		public ushort IndexableTempSize_2026;
		public ushort IndexableTempSize_2027;
		public ushort IndexableTempSize_2028;
		public ushort IndexableTempSize_2029;
		public ushort IndexableTempSize_2030;
		public ushort IndexableTempSize_2031;
		public ushort IndexableTempSize_2032;
		public ushort IndexableTempSize_2033;
		public ushort IndexableTempSize_2034;
		public ushort IndexableTempSize_2035;
		public ushort IndexableTempSize_2036;
		public ushort IndexableTempSize_2037;
		public ushort IndexableTempSize_2038;
		public ushort IndexableTempSize_2039;
		public ushort IndexableTempSize_2040;
		public ushort IndexableTempSize_2041;
		public ushort IndexableTempSize_2042;
		public ushort IndexableTempSize_2043;
		public ushort IndexableTempSize_2044;
		public ushort IndexableTempSize_2045;
		public ushort IndexableTempSize_2046;
		public ushort IndexableTempSize_2047;
		public ushort IndexableTempSize_2048;
		public ushort IndexableTempSize_2049;
		public ushort IndexableTempSize_2050;
		public ushort IndexableTempSize_2051;
		public ushort IndexableTempSize_2052;
		public ushort IndexableTempSize_2053;
		public ushort IndexableTempSize_2054;
		public ushort IndexableTempSize_2055;
		public ushort IndexableTempSize_2056;
		public ushort IndexableTempSize_2057;
		public ushort IndexableTempSize_2058;
		public ushort IndexableTempSize_2059;
		public ushort IndexableTempSize_2060;
		public ushort IndexableTempSize_2061;
		public ushort IndexableTempSize_2062;
		public ushort IndexableTempSize_2063;
		public ushort IndexableTempSize_2064;
		public ushort IndexableTempSize_2065;
		public ushort IndexableTempSize_2066;
		public ushort IndexableTempSize_2067;
		public ushort IndexableTempSize_2068;
		public ushort IndexableTempSize_2069;
		public ushort IndexableTempSize_2070;
		public ushort IndexableTempSize_2071;
		public ushort IndexableTempSize_2072;
		public ushort IndexableTempSize_2073;
		public ushort IndexableTempSize_2074;
		public ushort IndexableTempSize_2075;
		public ushort IndexableTempSize_2076;
		public ushort IndexableTempSize_2077;
		public ushort IndexableTempSize_2078;
		public ushort IndexableTempSize_2079;
		public ushort IndexableTempSize_2080;
		public ushort IndexableTempSize_2081;
		public ushort IndexableTempSize_2082;
		public ushort IndexableTempSize_2083;
		public ushort IndexableTempSize_2084;
		public ushort IndexableTempSize_2085;
		public ushort IndexableTempSize_2086;
		public ushort IndexableTempSize_2087;
		public ushort IndexableTempSize_2088;
		public ushort IndexableTempSize_2089;
		public ushort IndexableTempSize_2090;
		public ushort IndexableTempSize_2091;
		public ushort IndexableTempSize_2092;
		public ushort IndexableTempSize_2093;
		public ushort IndexableTempSize_2094;
		public ushort IndexableTempSize_2095;
		public ushort IndexableTempSize_2096;
		public ushort IndexableTempSize_2097;
		public ushort IndexableTempSize_2098;
		public ushort IndexableTempSize_2099;
		public ushort IndexableTempSize_2100;
		public ushort IndexableTempSize_2101;
		public ushort IndexableTempSize_2102;
		public ushort IndexableTempSize_2103;
		public ushort IndexableTempSize_2104;
		public ushort IndexableTempSize_2105;
		public ushort IndexableTempSize_2106;
		public ushort IndexableTempSize_2107;
		public ushort IndexableTempSize_2108;
		public ushort IndexableTempSize_2109;
		public ushort IndexableTempSize_2110;
		public ushort IndexableTempSize_2111;
		public ushort IndexableTempSize_2112;
		public ushort IndexableTempSize_2113;
		public ushort IndexableTempSize_2114;
		public ushort IndexableTempSize_2115;
		public ushort IndexableTempSize_2116;
		public ushort IndexableTempSize_2117;
		public ushort IndexableTempSize_2118;
		public ushort IndexableTempSize_2119;
		public ushort IndexableTempSize_2120;
		public ushort IndexableTempSize_2121;
		public ushort IndexableTempSize_2122;
		public ushort IndexableTempSize_2123;
		public ushort IndexableTempSize_2124;
		public ushort IndexableTempSize_2125;
		public ushort IndexableTempSize_2126;
		public ushort IndexableTempSize_2127;
		public ushort IndexableTempSize_2128;
		public ushort IndexableTempSize_2129;
		public ushort IndexableTempSize_2130;
		public ushort IndexableTempSize_2131;
		public ushort IndexableTempSize_2132;
		public ushort IndexableTempSize_2133;
		public ushort IndexableTempSize_2134;
		public ushort IndexableTempSize_2135;
		public ushort IndexableTempSize_2136;
		public ushort IndexableTempSize_2137;
		public ushort IndexableTempSize_2138;
		public ushort IndexableTempSize_2139;
		public ushort IndexableTempSize_2140;
		public ushort IndexableTempSize_2141;
		public ushort IndexableTempSize_2142;
		public ushort IndexableTempSize_2143;
		public ushort IndexableTempSize_2144;
		public ushort IndexableTempSize_2145;
		public ushort IndexableTempSize_2146;
		public ushort IndexableTempSize_2147;
		public ushort IndexableTempSize_2148;
		public ushort IndexableTempSize_2149;
		public ushort IndexableTempSize_2150;
		public ushort IndexableTempSize_2151;
		public ushort IndexableTempSize_2152;
		public ushort IndexableTempSize_2153;
		public ushort IndexableTempSize_2154;
		public ushort IndexableTempSize_2155;
		public ushort IndexableTempSize_2156;
		public ushort IndexableTempSize_2157;
		public ushort IndexableTempSize_2158;
		public ushort IndexableTempSize_2159;
		public ushort IndexableTempSize_2160;
		public ushort IndexableTempSize_2161;
		public ushort IndexableTempSize_2162;
		public ushort IndexableTempSize_2163;
		public ushort IndexableTempSize_2164;
		public ushort IndexableTempSize_2165;
		public ushort IndexableTempSize_2166;
		public ushort IndexableTempSize_2167;
		public ushort IndexableTempSize_2168;
		public ushort IndexableTempSize_2169;
		public ushort IndexableTempSize_2170;
		public ushort IndexableTempSize_2171;
		public ushort IndexableTempSize_2172;
		public ushort IndexableTempSize_2173;
		public ushort IndexableTempSize_2174;
		public ushort IndexableTempSize_2175;
		public ushort IndexableTempSize_2176;
		public ushort IndexableTempSize_2177;
		public ushort IndexableTempSize_2178;
		public ushort IndexableTempSize_2179;
		public ushort IndexableTempSize_2180;
		public ushort IndexableTempSize_2181;
		public ushort IndexableTempSize_2182;
		public ushort IndexableTempSize_2183;
		public ushort IndexableTempSize_2184;
		public ushort IndexableTempSize_2185;
		public ushort IndexableTempSize_2186;
		public ushort IndexableTempSize_2187;
		public ushort IndexableTempSize_2188;
		public ushort IndexableTempSize_2189;
		public ushort IndexableTempSize_2190;
		public ushort IndexableTempSize_2191;
		public ushort IndexableTempSize_2192;
		public ushort IndexableTempSize_2193;
		public ushort IndexableTempSize_2194;
		public ushort IndexableTempSize_2195;
		public ushort IndexableTempSize_2196;
		public ushort IndexableTempSize_2197;
		public ushort IndexableTempSize_2198;
		public ushort IndexableTempSize_2199;
		public ushort IndexableTempSize_2200;
		public ushort IndexableTempSize_2201;
		public ushort IndexableTempSize_2202;
		public ushort IndexableTempSize_2203;
		public ushort IndexableTempSize_2204;
		public ushort IndexableTempSize_2205;
		public ushort IndexableTempSize_2206;
		public ushort IndexableTempSize_2207;
		public ushort IndexableTempSize_2208;
		public ushort IndexableTempSize_2209;
		public ushort IndexableTempSize_2210;
		public ushort IndexableTempSize_2211;
		public ushort IndexableTempSize_2212;
		public ushort IndexableTempSize_2213;
		public ushort IndexableTempSize_2214;
		public ushort IndexableTempSize_2215;
		public ushort IndexableTempSize_2216;
		public ushort IndexableTempSize_2217;
		public ushort IndexableTempSize_2218;
		public ushort IndexableTempSize_2219;
		public ushort IndexableTempSize_2220;
		public ushort IndexableTempSize_2221;
		public ushort IndexableTempSize_2222;
		public ushort IndexableTempSize_2223;
		public ushort IndexableTempSize_2224;
		public ushort IndexableTempSize_2225;
		public ushort IndexableTempSize_2226;
		public ushort IndexableTempSize_2227;
		public ushort IndexableTempSize_2228;
		public ushort IndexableTempSize_2229;
		public ushort IndexableTempSize_2230;
		public ushort IndexableTempSize_2231;
		public ushort IndexableTempSize_2232;
		public ushort IndexableTempSize_2233;
		public ushort IndexableTempSize_2234;
		public ushort IndexableTempSize_2235;
		public ushort IndexableTempSize_2236;
		public ushort IndexableTempSize_2237;
		public ushort IndexableTempSize_2238;
		public ushort IndexableTempSize_2239;
		public ushort IndexableTempSize_2240;
		public ushort IndexableTempSize_2241;
		public ushort IndexableTempSize_2242;
		public ushort IndexableTempSize_2243;
		public ushort IndexableTempSize_2244;
		public ushort IndexableTempSize_2245;
		public ushort IndexableTempSize_2246;
		public ushort IndexableTempSize_2247;
		public ushort IndexableTempSize_2248;
		public ushort IndexableTempSize_2249;
		public ushort IndexableTempSize_2250;
		public ushort IndexableTempSize_2251;
		public ushort IndexableTempSize_2252;
		public ushort IndexableTempSize_2253;
		public ushort IndexableTempSize_2254;
		public ushort IndexableTempSize_2255;
		public ushort IndexableTempSize_2256;
		public ushort IndexableTempSize_2257;
		public ushort IndexableTempSize_2258;
		public ushort IndexableTempSize_2259;
		public ushort IndexableTempSize_2260;
		public ushort IndexableTempSize_2261;
		public ushort IndexableTempSize_2262;
		public ushort IndexableTempSize_2263;
		public ushort IndexableTempSize_2264;
		public ushort IndexableTempSize_2265;
		public ushort IndexableTempSize_2266;
		public ushort IndexableTempSize_2267;
		public ushort IndexableTempSize_2268;
		public ushort IndexableTempSize_2269;
		public ushort IndexableTempSize_2270;
		public ushort IndexableTempSize_2271;
		public ushort IndexableTempSize_2272;
		public ushort IndexableTempSize_2273;
		public ushort IndexableTempSize_2274;
		public ushort IndexableTempSize_2275;
		public ushort IndexableTempSize_2276;
		public ushort IndexableTempSize_2277;
		public ushort IndexableTempSize_2278;
		public ushort IndexableTempSize_2279;
		public ushort IndexableTempSize_2280;
		public ushort IndexableTempSize_2281;
		public ushort IndexableTempSize_2282;
		public ushort IndexableTempSize_2283;
		public ushort IndexableTempSize_2284;
		public ushort IndexableTempSize_2285;
		public ushort IndexableTempSize_2286;
		public ushort IndexableTempSize_2287;
		public ushort IndexableTempSize_2288;
		public ushort IndexableTempSize_2289;
		public ushort IndexableTempSize_2290;
		public ushort IndexableTempSize_2291;
		public ushort IndexableTempSize_2292;
		public ushort IndexableTempSize_2293;
		public ushort IndexableTempSize_2294;
		public ushort IndexableTempSize_2295;
		public ushort IndexableTempSize_2296;
		public ushort IndexableTempSize_2297;
		public ushort IndexableTempSize_2298;
		public ushort IndexableTempSize_2299;
		public ushort IndexableTempSize_2300;
		public ushort IndexableTempSize_2301;
		public ushort IndexableTempSize_2302;
		public ushort IndexableTempSize_2303;
		public ushort IndexableTempSize_2304;
		public ushort IndexableTempSize_2305;
		public ushort IndexableTempSize_2306;
		public ushort IndexableTempSize_2307;
		public ushort IndexableTempSize_2308;
		public ushort IndexableTempSize_2309;
		public ushort IndexableTempSize_2310;
		public ushort IndexableTempSize_2311;
		public ushort IndexableTempSize_2312;
		public ushort IndexableTempSize_2313;
		public ushort IndexableTempSize_2314;
		public ushort IndexableTempSize_2315;
		public ushort IndexableTempSize_2316;
		public ushort IndexableTempSize_2317;
		public ushort IndexableTempSize_2318;
		public ushort IndexableTempSize_2319;
		public ushort IndexableTempSize_2320;
		public ushort IndexableTempSize_2321;
		public ushort IndexableTempSize_2322;
		public ushort IndexableTempSize_2323;
		public ushort IndexableTempSize_2324;
		public ushort IndexableTempSize_2325;
		public ushort IndexableTempSize_2326;
		public ushort IndexableTempSize_2327;
		public ushort IndexableTempSize_2328;
		public ushort IndexableTempSize_2329;
		public ushort IndexableTempSize_2330;
		public ushort IndexableTempSize_2331;
		public ushort IndexableTempSize_2332;
		public ushort IndexableTempSize_2333;
		public ushort IndexableTempSize_2334;
		public ushort IndexableTempSize_2335;
		public ushort IndexableTempSize_2336;
		public ushort IndexableTempSize_2337;
		public ushort IndexableTempSize_2338;
		public ushort IndexableTempSize_2339;
		public ushort IndexableTempSize_2340;
		public ushort IndexableTempSize_2341;
		public ushort IndexableTempSize_2342;
		public ushort IndexableTempSize_2343;
		public ushort IndexableTempSize_2344;
		public ushort IndexableTempSize_2345;
		public ushort IndexableTempSize_2346;
		public ushort IndexableTempSize_2347;
		public ushort IndexableTempSize_2348;
		public ushort IndexableTempSize_2349;
		public ushort IndexableTempSize_2350;
		public ushort IndexableTempSize_2351;
		public ushort IndexableTempSize_2352;
		public ushort IndexableTempSize_2353;
		public ushort IndexableTempSize_2354;
		public ushort IndexableTempSize_2355;
		public ushort IndexableTempSize_2356;
		public ushort IndexableTempSize_2357;
		public ushort IndexableTempSize_2358;
		public ushort IndexableTempSize_2359;
		public ushort IndexableTempSize_2360;
		public ushort IndexableTempSize_2361;
		public ushort IndexableTempSize_2362;
		public ushort IndexableTempSize_2363;
		public ushort IndexableTempSize_2364;
		public ushort IndexableTempSize_2365;
		public ushort IndexableTempSize_2366;
		public ushort IndexableTempSize_2367;
		public ushort IndexableTempSize_2368;
		public ushort IndexableTempSize_2369;
		public ushort IndexableTempSize_2370;
		public ushort IndexableTempSize_2371;
		public ushort IndexableTempSize_2372;
		public ushort IndexableTempSize_2373;
		public ushort IndexableTempSize_2374;
		public ushort IndexableTempSize_2375;
		public ushort IndexableTempSize_2376;
		public ushort IndexableTempSize_2377;
		public ushort IndexableTempSize_2378;
		public ushort IndexableTempSize_2379;
		public ushort IndexableTempSize_2380;
		public ushort IndexableTempSize_2381;
		public ushort IndexableTempSize_2382;
		public ushort IndexableTempSize_2383;
		public ushort IndexableTempSize_2384;
		public ushort IndexableTempSize_2385;
		public ushort IndexableTempSize_2386;
		public ushort IndexableTempSize_2387;
		public ushort IndexableTempSize_2388;
		public ushort IndexableTempSize_2389;
		public ushort IndexableTempSize_2390;
		public ushort IndexableTempSize_2391;
		public ushort IndexableTempSize_2392;
		public ushort IndexableTempSize_2393;
		public ushort IndexableTempSize_2394;
		public ushort IndexableTempSize_2395;
		public ushort IndexableTempSize_2396;
		public ushort IndexableTempSize_2397;
		public ushort IndexableTempSize_2398;
		public ushort IndexableTempSize_2399;
		public ushort IndexableTempSize_2400;
		public ushort IndexableTempSize_2401;
		public ushort IndexableTempSize_2402;
		public ushort IndexableTempSize_2403;
		public ushort IndexableTempSize_2404;
		public ushort IndexableTempSize_2405;
		public ushort IndexableTempSize_2406;
		public ushort IndexableTempSize_2407;
		public ushort IndexableTempSize_2408;
		public ushort IndexableTempSize_2409;
		public ushort IndexableTempSize_2410;
		public ushort IndexableTempSize_2411;
		public ushort IndexableTempSize_2412;
		public ushort IndexableTempSize_2413;
		public ushort IndexableTempSize_2414;
		public ushort IndexableTempSize_2415;
		public ushort IndexableTempSize_2416;
		public ushort IndexableTempSize_2417;
		public ushort IndexableTempSize_2418;
		public ushort IndexableTempSize_2419;
		public ushort IndexableTempSize_2420;
		public ushort IndexableTempSize_2421;
		public ushort IndexableTempSize_2422;
		public ushort IndexableTempSize_2423;
		public ushort IndexableTempSize_2424;
		public ushort IndexableTempSize_2425;
		public ushort IndexableTempSize_2426;
		public ushort IndexableTempSize_2427;
		public ushort IndexableTempSize_2428;
		public ushort IndexableTempSize_2429;
		public ushort IndexableTempSize_2430;
		public ushort IndexableTempSize_2431;
		public ushort IndexableTempSize_2432;
		public ushort IndexableTempSize_2433;
		public ushort IndexableTempSize_2434;
		public ushort IndexableTempSize_2435;
		public ushort IndexableTempSize_2436;
		public ushort IndexableTempSize_2437;
		public ushort IndexableTempSize_2438;
		public ushort IndexableTempSize_2439;
		public ushort IndexableTempSize_2440;
		public ushort IndexableTempSize_2441;
		public ushort IndexableTempSize_2442;
		public ushort IndexableTempSize_2443;
		public ushort IndexableTempSize_2444;
		public ushort IndexableTempSize_2445;
		public ushort IndexableTempSize_2446;
		public ushort IndexableTempSize_2447;
		public ushort IndexableTempSize_2448;
		public ushort IndexableTempSize_2449;
		public ushort IndexableTempSize_2450;
		public ushort IndexableTempSize_2451;
		public ushort IndexableTempSize_2452;
		public ushort IndexableTempSize_2453;
		public ushort IndexableTempSize_2454;
		public ushort IndexableTempSize_2455;
		public ushort IndexableTempSize_2456;
		public ushort IndexableTempSize_2457;
		public ushort IndexableTempSize_2458;
		public ushort IndexableTempSize_2459;
		public ushort IndexableTempSize_2460;
		public ushort IndexableTempSize_2461;
		public ushort IndexableTempSize_2462;
		public ushort IndexableTempSize_2463;
		public ushort IndexableTempSize_2464;
		public ushort IndexableTempSize_2465;
		public ushort IndexableTempSize_2466;
		public ushort IndexableTempSize_2467;
		public ushort IndexableTempSize_2468;
		public ushort IndexableTempSize_2469;
		public ushort IndexableTempSize_2470;
		public ushort IndexableTempSize_2471;
		public ushort IndexableTempSize_2472;
		public ushort IndexableTempSize_2473;
		public ushort IndexableTempSize_2474;
		public ushort IndexableTempSize_2475;
		public ushort IndexableTempSize_2476;
		public ushort IndexableTempSize_2477;
		public ushort IndexableTempSize_2478;
		public ushort IndexableTempSize_2479;
		public ushort IndexableTempSize_2480;
		public ushort IndexableTempSize_2481;
		public ushort IndexableTempSize_2482;
		public ushort IndexableTempSize_2483;
		public ushort IndexableTempSize_2484;
		public ushort IndexableTempSize_2485;
		public ushort IndexableTempSize_2486;
		public ushort IndexableTempSize_2487;
		public ushort IndexableTempSize_2488;
		public ushort IndexableTempSize_2489;
		public ushort IndexableTempSize_2490;
		public ushort IndexableTempSize_2491;
		public ushort IndexableTempSize_2492;
		public ushort IndexableTempSize_2493;
		public ushort IndexableTempSize_2494;
		public ushort IndexableTempSize_2495;
		public ushort IndexableTempSize_2496;
		public ushort IndexableTempSize_2497;
		public ushort IndexableTempSize_2498;
		public ushort IndexableTempSize_2499;
		public ushort IndexableTempSize_2500;
		public ushort IndexableTempSize_2501;
		public ushort IndexableTempSize_2502;
		public ushort IndexableTempSize_2503;
		public ushort IndexableTempSize_2504;
		public ushort IndexableTempSize_2505;
		public ushort IndexableTempSize_2506;
		public ushort IndexableTempSize_2507;
		public ushort IndexableTempSize_2508;
		public ushort IndexableTempSize_2509;
		public ushort IndexableTempSize_2510;
		public ushort IndexableTempSize_2511;
		public ushort IndexableTempSize_2512;
		public ushort IndexableTempSize_2513;
		public ushort IndexableTempSize_2514;
		public ushort IndexableTempSize_2515;
		public ushort IndexableTempSize_2516;
		public ushort IndexableTempSize_2517;
		public ushort IndexableTempSize_2518;
		public ushort IndexableTempSize_2519;
		public ushort IndexableTempSize_2520;
		public ushort IndexableTempSize_2521;
		public ushort IndexableTempSize_2522;
		public ushort IndexableTempSize_2523;
		public ushort IndexableTempSize_2524;
		public ushort IndexableTempSize_2525;
		public ushort IndexableTempSize_2526;
		public ushort IndexableTempSize_2527;
		public ushort IndexableTempSize_2528;
		public ushort IndexableTempSize_2529;
		public ushort IndexableTempSize_2530;
		public ushort IndexableTempSize_2531;
		public ushort IndexableTempSize_2532;
		public ushort IndexableTempSize_2533;
		public ushort IndexableTempSize_2534;
		public ushort IndexableTempSize_2535;
		public ushort IndexableTempSize_2536;
		public ushort IndexableTempSize_2537;
		public ushort IndexableTempSize_2538;
		public ushort IndexableTempSize_2539;
		public ushort IndexableTempSize_2540;
		public ushort IndexableTempSize_2541;
		public ushort IndexableTempSize_2542;
		public ushort IndexableTempSize_2543;
		public ushort IndexableTempSize_2544;
		public ushort IndexableTempSize_2545;
		public ushort IndexableTempSize_2546;
		public ushort IndexableTempSize_2547;
		public ushort IndexableTempSize_2548;
		public ushort IndexableTempSize_2549;
		public ushort IndexableTempSize_2550;
		public ushort IndexableTempSize_2551;
		public ushort IndexableTempSize_2552;
		public ushort IndexableTempSize_2553;
		public ushort IndexableTempSize_2554;
		public ushort IndexableTempSize_2555;
		public ushort IndexableTempSize_2556;
		public ushort IndexableTempSize_2557;
		public ushort IndexableTempSize_2558;
		public ushort IndexableTempSize_2559;
		public ushort IndexableTempSize_2560;
		public ushort IndexableTempSize_2561;
		public ushort IndexableTempSize_2562;
		public ushort IndexableTempSize_2563;
		public ushort IndexableTempSize_2564;
		public ushort IndexableTempSize_2565;
		public ushort IndexableTempSize_2566;
		public ushort IndexableTempSize_2567;
		public ushort IndexableTempSize_2568;
		public ushort IndexableTempSize_2569;
		public ushort IndexableTempSize_2570;
		public ushort IndexableTempSize_2571;
		public ushort IndexableTempSize_2572;
		public ushort IndexableTempSize_2573;
		public ushort IndexableTempSize_2574;
		public ushort IndexableTempSize_2575;
		public ushort IndexableTempSize_2576;
		public ushort IndexableTempSize_2577;
		public ushort IndexableTempSize_2578;
		public ushort IndexableTempSize_2579;
		public ushort IndexableTempSize_2580;
		public ushort IndexableTempSize_2581;
		public ushort IndexableTempSize_2582;
		public ushort IndexableTempSize_2583;
		public ushort IndexableTempSize_2584;
		public ushort IndexableTempSize_2585;
		public ushort IndexableTempSize_2586;
		public ushort IndexableTempSize_2587;
		public ushort IndexableTempSize_2588;
		public ushort IndexableTempSize_2589;
		public ushort IndexableTempSize_2590;
		public ushort IndexableTempSize_2591;
		public ushort IndexableTempSize_2592;
		public ushort IndexableTempSize_2593;
		public ushort IndexableTempSize_2594;
		public ushort IndexableTempSize_2595;
		public ushort IndexableTempSize_2596;
		public ushort IndexableTempSize_2597;
		public ushort IndexableTempSize_2598;
		public ushort IndexableTempSize_2599;
		public ushort IndexableTempSize_2600;
		public ushort IndexableTempSize_2601;
		public ushort IndexableTempSize_2602;
		public ushort IndexableTempSize_2603;
		public ushort IndexableTempSize_2604;
		public ushort IndexableTempSize_2605;
		public ushort IndexableTempSize_2606;
		public ushort IndexableTempSize_2607;
		public ushort IndexableTempSize_2608;
		public ushort IndexableTempSize_2609;
		public ushort IndexableTempSize_2610;
		public ushort IndexableTempSize_2611;
		public ushort IndexableTempSize_2612;
		public ushort IndexableTempSize_2613;
		public ushort IndexableTempSize_2614;
		public ushort IndexableTempSize_2615;
		public ushort IndexableTempSize_2616;
		public ushort IndexableTempSize_2617;
		public ushort IndexableTempSize_2618;
		public ushort IndexableTempSize_2619;
		public ushort IndexableTempSize_2620;
		public ushort IndexableTempSize_2621;
		public ushort IndexableTempSize_2622;
		public ushort IndexableTempSize_2623;
		public ushort IndexableTempSize_2624;
		public ushort IndexableTempSize_2625;
		public ushort IndexableTempSize_2626;
		public ushort IndexableTempSize_2627;
		public ushort IndexableTempSize_2628;
		public ushort IndexableTempSize_2629;
		public ushort IndexableTempSize_2630;
		public ushort IndexableTempSize_2631;
		public ushort IndexableTempSize_2632;
		public ushort IndexableTempSize_2633;
		public ushort IndexableTempSize_2634;
		public ushort IndexableTempSize_2635;
		public ushort IndexableTempSize_2636;
		public ushort IndexableTempSize_2637;
		public ushort IndexableTempSize_2638;
		public ushort IndexableTempSize_2639;
		public ushort IndexableTempSize_2640;
		public ushort IndexableTempSize_2641;
		public ushort IndexableTempSize_2642;
		public ushort IndexableTempSize_2643;
		public ushort IndexableTempSize_2644;
		public ushort IndexableTempSize_2645;
		public ushort IndexableTempSize_2646;
		public ushort IndexableTempSize_2647;
		public ushort IndexableTempSize_2648;
		public ushort IndexableTempSize_2649;
		public ushort IndexableTempSize_2650;
		public ushort IndexableTempSize_2651;
		public ushort IndexableTempSize_2652;
		public ushort IndexableTempSize_2653;
		public ushort IndexableTempSize_2654;
		public ushort IndexableTempSize_2655;
		public ushort IndexableTempSize_2656;
		public ushort IndexableTempSize_2657;
		public ushort IndexableTempSize_2658;
		public ushort IndexableTempSize_2659;
		public ushort IndexableTempSize_2660;
		public ushort IndexableTempSize_2661;
		public ushort IndexableTempSize_2662;
		public ushort IndexableTempSize_2663;
		public ushort IndexableTempSize_2664;
		public ushort IndexableTempSize_2665;
		public ushort IndexableTempSize_2666;
		public ushort IndexableTempSize_2667;
		public ushort IndexableTempSize_2668;
		public ushort IndexableTempSize_2669;
		public ushort IndexableTempSize_2670;
		public ushort IndexableTempSize_2671;
		public ushort IndexableTempSize_2672;
		public ushort IndexableTempSize_2673;
		public ushort IndexableTempSize_2674;
		public ushort IndexableTempSize_2675;
		public ushort IndexableTempSize_2676;
		public ushort IndexableTempSize_2677;
		public ushort IndexableTempSize_2678;
		public ushort IndexableTempSize_2679;
		public ushort IndexableTempSize_2680;
		public ushort IndexableTempSize_2681;
		public ushort IndexableTempSize_2682;
		public ushort IndexableTempSize_2683;
		public ushort IndexableTempSize_2684;
		public ushort IndexableTempSize_2685;
		public ushort IndexableTempSize_2686;
		public ushort IndexableTempSize_2687;
		public ushort IndexableTempSize_2688;
		public ushort IndexableTempSize_2689;
		public ushort IndexableTempSize_2690;
		public ushort IndexableTempSize_2691;
		public ushort IndexableTempSize_2692;
		public ushort IndexableTempSize_2693;
		public ushort IndexableTempSize_2694;
		public ushort IndexableTempSize_2695;
		public ushort IndexableTempSize_2696;
		public ushort IndexableTempSize_2697;
		public ushort IndexableTempSize_2698;
		public ushort IndexableTempSize_2699;
		public ushort IndexableTempSize_2700;
		public ushort IndexableTempSize_2701;
		public ushort IndexableTempSize_2702;
		public ushort IndexableTempSize_2703;
		public ushort IndexableTempSize_2704;
		public ushort IndexableTempSize_2705;
		public ushort IndexableTempSize_2706;
		public ushort IndexableTempSize_2707;
		public ushort IndexableTempSize_2708;
		public ushort IndexableTempSize_2709;
		public ushort IndexableTempSize_2710;
		public ushort IndexableTempSize_2711;
		public ushort IndexableTempSize_2712;
		public ushort IndexableTempSize_2713;
		public ushort IndexableTempSize_2714;
		public ushort IndexableTempSize_2715;
		public ushort IndexableTempSize_2716;
		public ushort IndexableTempSize_2717;
		public ushort IndexableTempSize_2718;
		public ushort IndexableTempSize_2719;
		public ushort IndexableTempSize_2720;
		public ushort IndexableTempSize_2721;
		public ushort IndexableTempSize_2722;
		public ushort IndexableTempSize_2723;
		public ushort IndexableTempSize_2724;
		public ushort IndexableTempSize_2725;
		public ushort IndexableTempSize_2726;
		public ushort IndexableTempSize_2727;
		public ushort IndexableTempSize_2728;
		public ushort IndexableTempSize_2729;
		public ushort IndexableTempSize_2730;
		public ushort IndexableTempSize_2731;
		public ushort IndexableTempSize_2732;
		public ushort IndexableTempSize_2733;
		public ushort IndexableTempSize_2734;
		public ushort IndexableTempSize_2735;
		public ushort IndexableTempSize_2736;
		public ushort IndexableTempSize_2737;
		public ushort IndexableTempSize_2738;
		public ushort IndexableTempSize_2739;
		public ushort IndexableTempSize_2740;
		public ushort IndexableTempSize_2741;
		public ushort IndexableTempSize_2742;
		public ushort IndexableTempSize_2743;
		public ushort IndexableTempSize_2744;
		public ushort IndexableTempSize_2745;
		public ushort IndexableTempSize_2746;
		public ushort IndexableTempSize_2747;
		public ushort IndexableTempSize_2748;
		public ushort IndexableTempSize_2749;
		public ushort IndexableTempSize_2750;
		public ushort IndexableTempSize_2751;
		public ushort IndexableTempSize_2752;
		public ushort IndexableTempSize_2753;
		public ushort IndexableTempSize_2754;
		public ushort IndexableTempSize_2755;
		public ushort IndexableTempSize_2756;
		public ushort IndexableTempSize_2757;
		public ushort IndexableTempSize_2758;
		public ushort IndexableTempSize_2759;
		public ushort IndexableTempSize_2760;
		public ushort IndexableTempSize_2761;
		public ushort IndexableTempSize_2762;
		public ushort IndexableTempSize_2763;
		public ushort IndexableTempSize_2764;
		public ushort IndexableTempSize_2765;
		public ushort IndexableTempSize_2766;
		public ushort IndexableTempSize_2767;
		public ushort IndexableTempSize_2768;
		public ushort IndexableTempSize_2769;
		public ushort IndexableTempSize_2770;
		public ushort IndexableTempSize_2771;
		public ushort IndexableTempSize_2772;
		public ushort IndexableTempSize_2773;
		public ushort IndexableTempSize_2774;
		public ushort IndexableTempSize_2775;
		public ushort IndexableTempSize_2776;
		public ushort IndexableTempSize_2777;
		public ushort IndexableTempSize_2778;
		public ushort IndexableTempSize_2779;
		public ushort IndexableTempSize_2780;
		public ushort IndexableTempSize_2781;
		public ushort IndexableTempSize_2782;
		public ushort IndexableTempSize_2783;
		public ushort IndexableTempSize_2784;
		public ushort IndexableTempSize_2785;
		public ushort IndexableTempSize_2786;
		public ushort IndexableTempSize_2787;
		public ushort IndexableTempSize_2788;
		public ushort IndexableTempSize_2789;
		public ushort IndexableTempSize_2790;
		public ushort IndexableTempSize_2791;
		public ushort IndexableTempSize_2792;
		public ushort IndexableTempSize_2793;
		public ushort IndexableTempSize_2794;
		public ushort IndexableTempSize_2795;
		public ushort IndexableTempSize_2796;
		public ushort IndexableTempSize_2797;
		public ushort IndexableTempSize_2798;
		public ushort IndexableTempSize_2799;
		public ushort IndexableTempSize_2800;
		public ushort IndexableTempSize_2801;
		public ushort IndexableTempSize_2802;
		public ushort IndexableTempSize_2803;
		public ushort IndexableTempSize_2804;
		public ushort IndexableTempSize_2805;
		public ushort IndexableTempSize_2806;
		public ushort IndexableTempSize_2807;
		public ushort IndexableTempSize_2808;
		public ushort IndexableTempSize_2809;
		public ushort IndexableTempSize_2810;
		public ushort IndexableTempSize_2811;
		public ushort IndexableTempSize_2812;
		public ushort IndexableTempSize_2813;
		public ushort IndexableTempSize_2814;
		public ushort IndexableTempSize_2815;
		public ushort IndexableTempSize_2816;
		public ushort IndexableTempSize_2817;
		public ushort IndexableTempSize_2818;
		public ushort IndexableTempSize_2819;
		public ushort IndexableTempSize_2820;
		public ushort IndexableTempSize_2821;
		public ushort IndexableTempSize_2822;
		public ushort IndexableTempSize_2823;
		public ushort IndexableTempSize_2824;
		public ushort IndexableTempSize_2825;
		public ushort IndexableTempSize_2826;
		public ushort IndexableTempSize_2827;
		public ushort IndexableTempSize_2828;
		public ushort IndexableTempSize_2829;
		public ushort IndexableTempSize_2830;
		public ushort IndexableTempSize_2831;
		public ushort IndexableTempSize_2832;
		public ushort IndexableTempSize_2833;
		public ushort IndexableTempSize_2834;
		public ushort IndexableTempSize_2835;
		public ushort IndexableTempSize_2836;
		public ushort IndexableTempSize_2837;
		public ushort IndexableTempSize_2838;
		public ushort IndexableTempSize_2839;
		public ushort IndexableTempSize_2840;
		public ushort IndexableTempSize_2841;
		public ushort IndexableTempSize_2842;
		public ushort IndexableTempSize_2843;
		public ushort IndexableTempSize_2844;
		public ushort IndexableTempSize_2845;
		public ushort IndexableTempSize_2846;
		public ushort IndexableTempSize_2847;
		public ushort IndexableTempSize_2848;
		public ushort IndexableTempSize_2849;
		public ushort IndexableTempSize_2850;
		public ushort IndexableTempSize_2851;
		public ushort IndexableTempSize_2852;
		public ushort IndexableTempSize_2853;
		public ushort IndexableTempSize_2854;
		public ushort IndexableTempSize_2855;
		public ushort IndexableTempSize_2856;
		public ushort IndexableTempSize_2857;
		public ushort IndexableTempSize_2858;
		public ushort IndexableTempSize_2859;
		public ushort IndexableTempSize_2860;
		public ushort IndexableTempSize_2861;
		public ushort IndexableTempSize_2862;
		public ushort IndexableTempSize_2863;
		public ushort IndexableTempSize_2864;
		public ushort IndexableTempSize_2865;
		public ushort IndexableTempSize_2866;
		public ushort IndexableTempSize_2867;
		public ushort IndexableTempSize_2868;
		public ushort IndexableTempSize_2869;
		public ushort IndexableTempSize_2870;
		public ushort IndexableTempSize_2871;
		public ushort IndexableTempSize_2872;
		public ushort IndexableTempSize_2873;
		public ushort IndexableTempSize_2874;
		public ushort IndexableTempSize_2875;
		public ushort IndexableTempSize_2876;
		public ushort IndexableTempSize_2877;
		public ushort IndexableTempSize_2878;
		public ushort IndexableTempSize_2879;
		public ushort IndexableTempSize_2880;
		public ushort IndexableTempSize_2881;
		public ushort IndexableTempSize_2882;
		public ushort IndexableTempSize_2883;
		public ushort IndexableTempSize_2884;
		public ushort IndexableTempSize_2885;
		public ushort IndexableTempSize_2886;
		public ushort IndexableTempSize_2887;
		public ushort IndexableTempSize_2888;
		public ushort IndexableTempSize_2889;
		public ushort IndexableTempSize_2890;
		public ushort IndexableTempSize_2891;
		public ushort IndexableTempSize_2892;
		public ushort IndexableTempSize_2893;
		public ushort IndexableTempSize_2894;
		public ushort IndexableTempSize_2895;
		public ushort IndexableTempSize_2896;
		public ushort IndexableTempSize_2897;
		public ushort IndexableTempSize_2898;
		public ushort IndexableTempSize_2899;
		public ushort IndexableTempSize_2900;
		public ushort IndexableTempSize_2901;
		public ushort IndexableTempSize_2902;
		public ushort IndexableTempSize_2903;
		public ushort IndexableTempSize_2904;
		public ushort IndexableTempSize_2905;
		public ushort IndexableTempSize_2906;
		public ushort IndexableTempSize_2907;
		public ushort IndexableTempSize_2908;
		public ushort IndexableTempSize_2909;
		public ushort IndexableTempSize_2910;
		public ushort IndexableTempSize_2911;
		public ushort IndexableTempSize_2912;
		public ushort IndexableTempSize_2913;
		public ushort IndexableTempSize_2914;
		public ushort IndexableTempSize_2915;
		public ushort IndexableTempSize_2916;
		public ushort IndexableTempSize_2917;
		public ushort IndexableTempSize_2918;
		public ushort IndexableTempSize_2919;
		public ushort IndexableTempSize_2920;
		public ushort IndexableTempSize_2921;
		public ushort IndexableTempSize_2922;
		public ushort IndexableTempSize_2923;
		public ushort IndexableTempSize_2924;
		public ushort IndexableTempSize_2925;
		public ushort IndexableTempSize_2926;
		public ushort IndexableTempSize_2927;
		public ushort IndexableTempSize_2928;
		public ushort IndexableTempSize_2929;
		public ushort IndexableTempSize_2930;
		public ushort IndexableTempSize_2931;
		public ushort IndexableTempSize_2932;
		public ushort IndexableTempSize_2933;
		public ushort IndexableTempSize_2934;
		public ushort IndexableTempSize_2935;
		public ushort IndexableTempSize_2936;
		public ushort IndexableTempSize_2937;
		public ushort IndexableTempSize_2938;
		public ushort IndexableTempSize_2939;
		public ushort IndexableTempSize_2940;
		public ushort IndexableTempSize_2941;
		public ushort IndexableTempSize_2942;
		public ushort IndexableTempSize_2943;
		public ushort IndexableTempSize_2944;
		public ushort IndexableTempSize_2945;
		public ushort IndexableTempSize_2946;
		public ushort IndexableTempSize_2947;
		public ushort IndexableTempSize_2948;
		public ushort IndexableTempSize_2949;
		public ushort IndexableTempSize_2950;
		public ushort IndexableTempSize_2951;
		public ushort IndexableTempSize_2952;
		public ushort IndexableTempSize_2953;
		public ushort IndexableTempSize_2954;
		public ushort IndexableTempSize_2955;
		public ushort IndexableTempSize_2956;
		public ushort IndexableTempSize_2957;
		public ushort IndexableTempSize_2958;
		public ushort IndexableTempSize_2959;
		public ushort IndexableTempSize_2960;
		public ushort IndexableTempSize_2961;
		public ushort IndexableTempSize_2962;
		public ushort IndexableTempSize_2963;
		public ushort IndexableTempSize_2964;
		public ushort IndexableTempSize_2965;
		public ushort IndexableTempSize_2966;
		public ushort IndexableTempSize_2967;
		public ushort IndexableTempSize_2968;
		public ushort IndexableTempSize_2969;
		public ushort IndexableTempSize_2970;
		public ushort IndexableTempSize_2971;
		public ushort IndexableTempSize_2972;
		public ushort IndexableTempSize_2973;
		public ushort IndexableTempSize_2974;
		public ushort IndexableTempSize_2975;
		public ushort IndexableTempSize_2976;
		public ushort IndexableTempSize_2977;
		public ushort IndexableTempSize_2978;
		public ushort IndexableTempSize_2979;
		public ushort IndexableTempSize_2980;
		public ushort IndexableTempSize_2981;
		public ushort IndexableTempSize_2982;
		public ushort IndexableTempSize_2983;
		public ushort IndexableTempSize_2984;
		public ushort IndexableTempSize_2985;
		public ushort IndexableTempSize_2986;
		public ushort IndexableTempSize_2987;
		public ushort IndexableTempSize_2988;
		public ushort IndexableTempSize_2989;
		public ushort IndexableTempSize_2990;
		public ushort IndexableTempSize_2991;
		public ushort IndexableTempSize_2992;
		public ushort IndexableTempSize_2993;
		public ushort IndexableTempSize_2994;
		public ushort IndexableTempSize_2995;
		public ushort IndexableTempSize_2996;
		public ushort IndexableTempSize_2997;
		public ushort IndexableTempSize_2998;
		public ushort IndexableTempSize_2999;
		public ushort IndexableTempSize_3000;
		public ushort IndexableTempSize_3001;
		public ushort IndexableTempSize_3002;
		public ushort IndexableTempSize_3003;
		public ushort IndexableTempSize_3004;
		public ushort IndexableTempSize_3005;
		public ushort IndexableTempSize_3006;
		public ushort IndexableTempSize_3007;
		public ushort IndexableTempSize_3008;
		public ushort IndexableTempSize_3009;
		public ushort IndexableTempSize_3010;
		public ushort IndexableTempSize_3011;
		public ushort IndexableTempSize_3012;
		public ushort IndexableTempSize_3013;
		public ushort IndexableTempSize_3014;
		public ushort IndexableTempSize_3015;
		public ushort IndexableTempSize_3016;
		public ushort IndexableTempSize_3017;
		public ushort IndexableTempSize_3018;
		public ushort IndexableTempSize_3019;
		public ushort IndexableTempSize_3020;
		public ushort IndexableTempSize_3021;
		public ushort IndexableTempSize_3022;
		public ushort IndexableTempSize_3023;
		public ushort IndexableTempSize_3024;
		public ushort IndexableTempSize_3025;
		public ushort IndexableTempSize_3026;
		public ushort IndexableTempSize_3027;
		public ushort IndexableTempSize_3028;
		public ushort IndexableTempSize_3029;
		public ushort IndexableTempSize_3030;
		public ushort IndexableTempSize_3031;
		public ushort IndexableTempSize_3032;
		public ushort IndexableTempSize_3033;
		public ushort IndexableTempSize_3034;
		public ushort IndexableTempSize_3035;
		public ushort IndexableTempSize_3036;
		public ushort IndexableTempSize_3037;
		public ushort IndexableTempSize_3038;
		public ushort IndexableTempSize_3039;
		public ushort IndexableTempSize_3040;
		public ushort IndexableTempSize_3041;
		public ushort IndexableTempSize_3042;
		public ushort IndexableTempSize_3043;
		public ushort IndexableTempSize_3044;
		public ushort IndexableTempSize_3045;
		public ushort IndexableTempSize_3046;
		public ushort IndexableTempSize_3047;
		public ushort IndexableTempSize_3048;
		public ushort IndexableTempSize_3049;
		public ushort IndexableTempSize_3050;
		public ushort IndexableTempSize_3051;
		public ushort IndexableTempSize_3052;
		public ushort IndexableTempSize_3053;
		public ushort IndexableTempSize_3054;
		public ushort IndexableTempSize_3055;
		public ushort IndexableTempSize_3056;
		public ushort IndexableTempSize_3057;
		public ushort IndexableTempSize_3058;
		public ushort IndexableTempSize_3059;
		public ushort IndexableTempSize_3060;
		public ushort IndexableTempSize_3061;
		public ushort IndexableTempSize_3062;
		public ushort IndexableTempSize_3063;
		public ushort IndexableTempSize_3064;
		public ushort IndexableTempSize_3065;
		public ushort IndexableTempSize_3066;
		public ushort IndexableTempSize_3067;
		public ushort IndexableTempSize_3068;
		public ushort IndexableTempSize_3069;
		public ushort IndexableTempSize_3070;
		public ushort IndexableTempSize_3071;
		public ushort IndexableTempSize_3072;
		public ushort IndexableTempSize_3073;
		public ushort IndexableTempSize_3074;
		public ushort IndexableTempSize_3075;
		public ushort IndexableTempSize_3076;
		public ushort IndexableTempSize_3077;
		public ushort IndexableTempSize_3078;
		public ushort IndexableTempSize_3079;
		public ushort IndexableTempSize_3080;
		public ushort IndexableTempSize_3081;
		public ushort IndexableTempSize_3082;
		public ushort IndexableTempSize_3083;
		public ushort IndexableTempSize_3084;
		public ushort IndexableTempSize_3085;
		public ushort IndexableTempSize_3086;
		public ushort IndexableTempSize_3087;
		public ushort IndexableTempSize_3088;
		public ushort IndexableTempSize_3089;
		public ushort IndexableTempSize_3090;
		public ushort IndexableTempSize_3091;
		public ushort IndexableTempSize_3092;
		public ushort IndexableTempSize_3093;
		public ushort IndexableTempSize_3094;
		public ushort IndexableTempSize_3095;
		public ushort IndexableTempSize_3096;
		public ushort IndexableTempSize_3097;
		public ushort IndexableTempSize_3098;
		public ushort IndexableTempSize_3099;
		public ushort IndexableTempSize_3100;
		public ushort IndexableTempSize_3101;
		public ushort IndexableTempSize_3102;
		public ushort IndexableTempSize_3103;
		public ushort IndexableTempSize_3104;
		public ushort IndexableTempSize_3105;
		public ushort IndexableTempSize_3106;
		public ushort IndexableTempSize_3107;
		public ushort IndexableTempSize_3108;
		public ushort IndexableTempSize_3109;
		public ushort IndexableTempSize_3110;
		public ushort IndexableTempSize_3111;
		public ushort IndexableTempSize_3112;
		public ushort IndexableTempSize_3113;
		public ushort IndexableTempSize_3114;
		public ushort IndexableTempSize_3115;
		public ushort IndexableTempSize_3116;
		public ushort IndexableTempSize_3117;
		public ushort IndexableTempSize_3118;
		public ushort IndexableTempSize_3119;
		public ushort IndexableTempSize_3120;
		public ushort IndexableTempSize_3121;
		public ushort IndexableTempSize_3122;
		public ushort IndexableTempSize_3123;
		public ushort IndexableTempSize_3124;
		public ushort IndexableTempSize_3125;
		public ushort IndexableTempSize_3126;
		public ushort IndexableTempSize_3127;
		public ushort IndexableTempSize_3128;
		public ushort IndexableTempSize_3129;
		public ushort IndexableTempSize_3130;
		public ushort IndexableTempSize_3131;
		public ushort IndexableTempSize_3132;
		public ushort IndexableTempSize_3133;
		public ushort IndexableTempSize_3134;
		public ushort IndexableTempSize_3135;
		public ushort IndexableTempSize_3136;
		public ushort IndexableTempSize_3137;
		public ushort IndexableTempSize_3138;
		public ushort IndexableTempSize_3139;
		public ushort IndexableTempSize_3140;
		public ushort IndexableTempSize_3141;
		public ushort IndexableTempSize_3142;
		public ushort IndexableTempSize_3143;
		public ushort IndexableTempSize_3144;
		public ushort IndexableTempSize_3145;
		public ushort IndexableTempSize_3146;
		public ushort IndexableTempSize_3147;
		public ushort IndexableTempSize_3148;
		public ushort IndexableTempSize_3149;
		public ushort IndexableTempSize_3150;
		public ushort IndexableTempSize_3151;
		public ushort IndexableTempSize_3152;
		public ushort IndexableTempSize_3153;
		public ushort IndexableTempSize_3154;
		public ushort IndexableTempSize_3155;
		public ushort IndexableTempSize_3156;
		public ushort IndexableTempSize_3157;
		public ushort IndexableTempSize_3158;
		public ushort IndexableTempSize_3159;
		public ushort IndexableTempSize_3160;
		public ushort IndexableTempSize_3161;
		public ushort IndexableTempSize_3162;
		public ushort IndexableTempSize_3163;
		public ushort IndexableTempSize_3164;
		public ushort IndexableTempSize_3165;
		public ushort IndexableTempSize_3166;
		public ushort IndexableTempSize_3167;
		public ushort IndexableTempSize_3168;
		public ushort IndexableTempSize_3169;
		public ushort IndexableTempSize_3170;
		public ushort IndexableTempSize_3171;
		public ushort IndexableTempSize_3172;
		public ushort IndexableTempSize_3173;
		public ushort IndexableTempSize_3174;
		public ushort IndexableTempSize_3175;
		public ushort IndexableTempSize_3176;
		public ushort IndexableTempSize_3177;
		public ushort IndexableTempSize_3178;
		public ushort IndexableTempSize_3179;
		public ushort IndexableTempSize_3180;
		public ushort IndexableTempSize_3181;
		public ushort IndexableTempSize_3182;
		public ushort IndexableTempSize_3183;
		public ushort IndexableTempSize_3184;
		public ushort IndexableTempSize_3185;
		public ushort IndexableTempSize_3186;
		public ushort IndexableTempSize_3187;
		public ushort IndexableTempSize_3188;
		public ushort IndexableTempSize_3189;
		public ushort IndexableTempSize_3190;
		public ushort IndexableTempSize_3191;
		public ushort IndexableTempSize_3192;
		public ushort IndexableTempSize_3193;
		public ushort IndexableTempSize_3194;
		public ushort IndexableTempSize_3195;
		public ushort IndexableTempSize_3196;
		public ushort IndexableTempSize_3197;
		public ushort IndexableTempSize_3198;
		public ushort IndexableTempSize_3199;
		public ushort IndexableTempSize_3200;
		public ushort IndexableTempSize_3201;
		public ushort IndexableTempSize_3202;
		public ushort IndexableTempSize_3203;
		public ushort IndexableTempSize_3204;
		public ushort IndexableTempSize_3205;
		public ushort IndexableTempSize_3206;
		public ushort IndexableTempSize_3207;
		public ushort IndexableTempSize_3208;
		public ushort IndexableTempSize_3209;
		public ushort IndexableTempSize_3210;
		public ushort IndexableTempSize_3211;
		public ushort IndexableTempSize_3212;
		public ushort IndexableTempSize_3213;
		public ushort IndexableTempSize_3214;
		public ushort IndexableTempSize_3215;
		public ushort IndexableTempSize_3216;
		public ushort IndexableTempSize_3217;
		public ushort IndexableTempSize_3218;
		public ushort IndexableTempSize_3219;
		public ushort IndexableTempSize_3220;
		public ushort IndexableTempSize_3221;
		public ushort IndexableTempSize_3222;
		public ushort IndexableTempSize_3223;
		public ushort IndexableTempSize_3224;
		public ushort IndexableTempSize_3225;
		public ushort IndexableTempSize_3226;
		public ushort IndexableTempSize_3227;
		public ushort IndexableTempSize_3228;
		public ushort IndexableTempSize_3229;
		public ushort IndexableTempSize_3230;
		public ushort IndexableTempSize_3231;
		public ushort IndexableTempSize_3232;
		public ushort IndexableTempSize_3233;
		public ushort IndexableTempSize_3234;
		public ushort IndexableTempSize_3235;
		public ushort IndexableTempSize_3236;
		public ushort IndexableTempSize_3237;
		public ushort IndexableTempSize_3238;
		public ushort IndexableTempSize_3239;
		public ushort IndexableTempSize_3240;
		public ushort IndexableTempSize_3241;
		public ushort IndexableTempSize_3242;
		public ushort IndexableTempSize_3243;
		public ushort IndexableTempSize_3244;
		public ushort IndexableTempSize_3245;
		public ushort IndexableTempSize_3246;
		public ushort IndexableTempSize_3247;
		public ushort IndexableTempSize_3248;
		public ushort IndexableTempSize_3249;
		public ushort IndexableTempSize_3250;
		public ushort IndexableTempSize_3251;
		public ushort IndexableTempSize_3252;
		public ushort IndexableTempSize_3253;
		public ushort IndexableTempSize_3254;
		public ushort IndexableTempSize_3255;
		public ushort IndexableTempSize_3256;
		public ushort IndexableTempSize_3257;
		public ushort IndexableTempSize_3258;
		public ushort IndexableTempSize_3259;
		public ushort IndexableTempSize_3260;
		public ushort IndexableTempSize_3261;
		public ushort IndexableTempSize_3262;
		public ushort IndexableTempSize_3263;
		public ushort IndexableTempSize_3264;
		public ushort IndexableTempSize_3265;
		public ushort IndexableTempSize_3266;
		public ushort IndexableTempSize_3267;
		public ushort IndexableTempSize_3268;
		public ushort IndexableTempSize_3269;
		public ushort IndexableTempSize_3270;
		public ushort IndexableTempSize_3271;
		public ushort IndexableTempSize_3272;
		public ushort IndexableTempSize_3273;
		public ushort IndexableTempSize_3274;
		public ushort IndexableTempSize_3275;
		public ushort IndexableTempSize_3276;
		public ushort IndexableTempSize_3277;
		public ushort IndexableTempSize_3278;
		public ushort IndexableTempSize_3279;
		public ushort IndexableTempSize_3280;
		public ushort IndexableTempSize_3281;
		public ushort IndexableTempSize_3282;
		public ushort IndexableTempSize_3283;
		public ushort IndexableTempSize_3284;
		public ushort IndexableTempSize_3285;
		public ushort IndexableTempSize_3286;
		public ushort IndexableTempSize_3287;
		public ushort IndexableTempSize_3288;
		public ushort IndexableTempSize_3289;
		public ushort IndexableTempSize_3290;
		public ushort IndexableTempSize_3291;
		public ushort IndexableTempSize_3292;
		public ushort IndexableTempSize_3293;
		public ushort IndexableTempSize_3294;
		public ushort IndexableTempSize_3295;
		public ushort IndexableTempSize_3296;
		public ushort IndexableTempSize_3297;
		public ushort IndexableTempSize_3298;
		public ushort IndexableTempSize_3299;
		public ushort IndexableTempSize_3300;
		public ushort IndexableTempSize_3301;
		public ushort IndexableTempSize_3302;
		public ushort IndexableTempSize_3303;
		public ushort IndexableTempSize_3304;
		public ushort IndexableTempSize_3305;
		public ushort IndexableTempSize_3306;
		public ushort IndexableTempSize_3307;
		public ushort IndexableTempSize_3308;
		public ushort IndexableTempSize_3309;
		public ushort IndexableTempSize_3310;
		public ushort IndexableTempSize_3311;
		public ushort IndexableTempSize_3312;
		public ushort IndexableTempSize_3313;
		public ushort IndexableTempSize_3314;
		public ushort IndexableTempSize_3315;
		public ushort IndexableTempSize_3316;
		public ushort IndexableTempSize_3317;
		public ushort IndexableTempSize_3318;
		public ushort IndexableTempSize_3319;
		public ushort IndexableTempSize_3320;
		public ushort IndexableTempSize_3321;
		public ushort IndexableTempSize_3322;
		public ushort IndexableTempSize_3323;
		public ushort IndexableTempSize_3324;
		public ushort IndexableTempSize_3325;
		public ushort IndexableTempSize_3326;
		public ushort IndexableTempSize_3327;
		public ushort IndexableTempSize_3328;
		public ushort IndexableTempSize_3329;
		public ushort IndexableTempSize_3330;
		public ushort IndexableTempSize_3331;
		public ushort IndexableTempSize_3332;
		public ushort IndexableTempSize_3333;
		public ushort IndexableTempSize_3334;
		public ushort IndexableTempSize_3335;
		public ushort IndexableTempSize_3336;
		public ushort IndexableTempSize_3337;
		public ushort IndexableTempSize_3338;
		public ushort IndexableTempSize_3339;
		public ushort IndexableTempSize_3340;
		public ushort IndexableTempSize_3341;
		public ushort IndexableTempSize_3342;
		public ushort IndexableTempSize_3343;
		public ushort IndexableTempSize_3344;
		public ushort IndexableTempSize_3345;
		public ushort IndexableTempSize_3346;
		public ushort IndexableTempSize_3347;
		public ushort IndexableTempSize_3348;
		public ushort IndexableTempSize_3349;
		public ushort IndexableTempSize_3350;
		public ushort IndexableTempSize_3351;
		public ushort IndexableTempSize_3352;
		public ushort IndexableTempSize_3353;
		public ushort IndexableTempSize_3354;
		public ushort IndexableTempSize_3355;
		public ushort IndexableTempSize_3356;
		public ushort IndexableTempSize_3357;
		public ushort IndexableTempSize_3358;
		public ushort IndexableTempSize_3359;
		public ushort IndexableTempSize_3360;
		public ushort IndexableTempSize_3361;
		public ushort IndexableTempSize_3362;
		public ushort IndexableTempSize_3363;
		public ushort IndexableTempSize_3364;
		public ushort IndexableTempSize_3365;
		public ushort IndexableTempSize_3366;
		public ushort IndexableTempSize_3367;
		public ushort IndexableTempSize_3368;
		public ushort IndexableTempSize_3369;
		public ushort IndexableTempSize_3370;
		public ushort IndexableTempSize_3371;
		public ushort IndexableTempSize_3372;
		public ushort IndexableTempSize_3373;
		public ushort IndexableTempSize_3374;
		public ushort IndexableTempSize_3375;
		public ushort IndexableTempSize_3376;
		public ushort IndexableTempSize_3377;
		public ushort IndexableTempSize_3378;
		public ushort IndexableTempSize_3379;
		public ushort IndexableTempSize_3380;
		public ushort IndexableTempSize_3381;
		public ushort IndexableTempSize_3382;
		public ushort IndexableTempSize_3383;
		public ushort IndexableTempSize_3384;
		public ushort IndexableTempSize_3385;
		public ushort IndexableTempSize_3386;
		public ushort IndexableTempSize_3387;
		public ushort IndexableTempSize_3388;
		public ushort IndexableTempSize_3389;
		public ushort IndexableTempSize_3390;
		public ushort IndexableTempSize_3391;
		public ushort IndexableTempSize_3392;
		public ushort IndexableTempSize_3393;
		public ushort IndexableTempSize_3394;
		public ushort IndexableTempSize_3395;
		public ushort IndexableTempSize_3396;
		public ushort IndexableTempSize_3397;
		public ushort IndexableTempSize_3398;
		public ushort IndexableTempSize_3399;
		public ushort IndexableTempSize_3400;
		public ushort IndexableTempSize_3401;
		public ushort IndexableTempSize_3402;
		public ushort IndexableTempSize_3403;
		public ushort IndexableTempSize_3404;
		public ushort IndexableTempSize_3405;
		public ushort IndexableTempSize_3406;
		public ushort IndexableTempSize_3407;
		public ushort IndexableTempSize_3408;
		public ushort IndexableTempSize_3409;
		public ushort IndexableTempSize_3410;
		public ushort IndexableTempSize_3411;
		public ushort IndexableTempSize_3412;
		public ushort IndexableTempSize_3413;
		public ushort IndexableTempSize_3414;
		public ushort IndexableTempSize_3415;
		public ushort IndexableTempSize_3416;
		public ushort IndexableTempSize_3417;
		public ushort IndexableTempSize_3418;
		public ushort IndexableTempSize_3419;
		public ushort IndexableTempSize_3420;
		public ushort IndexableTempSize_3421;
		public ushort IndexableTempSize_3422;
		public ushort IndexableTempSize_3423;
		public ushort IndexableTempSize_3424;
		public ushort IndexableTempSize_3425;
		public ushort IndexableTempSize_3426;
		public ushort IndexableTempSize_3427;
		public ushort IndexableTempSize_3428;
		public ushort IndexableTempSize_3429;
		public ushort IndexableTempSize_3430;
		public ushort IndexableTempSize_3431;
		public ushort IndexableTempSize_3432;
		public ushort IndexableTempSize_3433;
		public ushort IndexableTempSize_3434;
		public ushort IndexableTempSize_3435;
		public ushort IndexableTempSize_3436;
		public ushort IndexableTempSize_3437;
		public ushort IndexableTempSize_3438;
		public ushort IndexableTempSize_3439;
		public ushort IndexableTempSize_3440;
		public ushort IndexableTempSize_3441;
		public ushort IndexableTempSize_3442;
		public ushort IndexableTempSize_3443;
		public ushort IndexableTempSize_3444;
		public ushort IndexableTempSize_3445;
		public ushort IndexableTempSize_3446;
		public ushort IndexableTempSize_3447;
		public ushort IndexableTempSize_3448;
		public ushort IndexableTempSize_3449;
		public ushort IndexableTempSize_3450;
		public ushort IndexableTempSize_3451;
		public ushort IndexableTempSize_3452;
		public ushort IndexableTempSize_3453;
		public ushort IndexableTempSize_3454;
		public ushort IndexableTempSize_3455;
		public ushort IndexableTempSize_3456;
		public ushort IndexableTempSize_3457;
		public ushort IndexableTempSize_3458;
		public ushort IndexableTempSize_3459;
		public ushort IndexableTempSize_3460;
		public ushort IndexableTempSize_3461;
		public ushort IndexableTempSize_3462;
		public ushort IndexableTempSize_3463;
		public ushort IndexableTempSize_3464;
		public ushort IndexableTempSize_3465;
		public ushort IndexableTempSize_3466;
		public ushort IndexableTempSize_3467;
		public ushort IndexableTempSize_3468;
		public ushort IndexableTempSize_3469;
		public ushort IndexableTempSize_3470;
		public ushort IndexableTempSize_3471;
		public ushort IndexableTempSize_3472;
		public ushort IndexableTempSize_3473;
		public ushort IndexableTempSize_3474;
		public ushort IndexableTempSize_3475;
		public ushort IndexableTempSize_3476;
		public ushort IndexableTempSize_3477;
		public ushort IndexableTempSize_3478;
		public ushort IndexableTempSize_3479;
		public ushort IndexableTempSize_3480;
		public ushort IndexableTempSize_3481;
		public ushort IndexableTempSize_3482;
		public ushort IndexableTempSize_3483;
		public ushort IndexableTempSize_3484;
		public ushort IndexableTempSize_3485;
		public ushort IndexableTempSize_3486;
		public ushort IndexableTempSize_3487;
		public ushort IndexableTempSize_3488;
		public ushort IndexableTempSize_3489;
		public ushort IndexableTempSize_3490;
		public ushort IndexableTempSize_3491;
		public ushort IndexableTempSize_3492;
		public ushort IndexableTempSize_3493;
		public ushort IndexableTempSize_3494;
		public ushort IndexableTempSize_3495;
		public ushort IndexableTempSize_3496;
		public ushort IndexableTempSize_3497;
		public ushort IndexableTempSize_3498;
		public ushort IndexableTempSize_3499;
		public ushort IndexableTempSize_3500;
		public ushort IndexableTempSize_3501;
		public ushort IndexableTempSize_3502;
		public ushort IndexableTempSize_3503;
		public ushort IndexableTempSize_3504;
		public ushort IndexableTempSize_3505;
		public ushort IndexableTempSize_3506;
		public ushort IndexableTempSize_3507;
		public ushort IndexableTempSize_3508;
		public ushort IndexableTempSize_3509;
		public ushort IndexableTempSize_3510;
		public ushort IndexableTempSize_3511;
		public ushort IndexableTempSize_3512;
		public ushort IndexableTempSize_3513;
		public ushort IndexableTempSize_3514;
		public ushort IndexableTempSize_3515;
		public ushort IndexableTempSize_3516;
		public ushort IndexableTempSize_3517;
		public ushort IndexableTempSize_3518;
		public ushort IndexableTempSize_3519;
		public ushort IndexableTempSize_3520;
		public ushort IndexableTempSize_3521;
		public ushort IndexableTempSize_3522;
		public ushort IndexableTempSize_3523;
		public ushort IndexableTempSize_3524;
		public ushort IndexableTempSize_3525;
		public ushort IndexableTempSize_3526;
		public ushort IndexableTempSize_3527;
		public ushort IndexableTempSize_3528;
		public ushort IndexableTempSize_3529;
		public ushort IndexableTempSize_3530;
		public ushort IndexableTempSize_3531;
		public ushort IndexableTempSize_3532;
		public ushort IndexableTempSize_3533;
		public ushort IndexableTempSize_3534;
		public ushort IndexableTempSize_3535;
		public ushort IndexableTempSize_3536;
		public ushort IndexableTempSize_3537;
		public ushort IndexableTempSize_3538;
		public ushort IndexableTempSize_3539;
		public ushort IndexableTempSize_3540;
		public ushort IndexableTempSize_3541;
		public ushort IndexableTempSize_3542;
		public ushort IndexableTempSize_3543;
		public ushort IndexableTempSize_3544;
		public ushort IndexableTempSize_3545;
		public ushort IndexableTempSize_3546;
		public ushort IndexableTempSize_3547;
		public ushort IndexableTempSize_3548;
		public ushort IndexableTempSize_3549;
		public ushort IndexableTempSize_3550;
		public ushort IndexableTempSize_3551;
		public ushort IndexableTempSize_3552;
		public ushort IndexableTempSize_3553;
		public ushort IndexableTempSize_3554;
		public ushort IndexableTempSize_3555;
		public ushort IndexableTempSize_3556;
		public ushort IndexableTempSize_3557;
		public ushort IndexableTempSize_3558;
		public ushort IndexableTempSize_3559;
		public ushort IndexableTempSize_3560;
		public ushort IndexableTempSize_3561;
		public ushort IndexableTempSize_3562;
		public ushort IndexableTempSize_3563;
		public ushort IndexableTempSize_3564;
		public ushort IndexableTempSize_3565;
		public ushort IndexableTempSize_3566;
		public ushort IndexableTempSize_3567;
		public ushort IndexableTempSize_3568;
		public ushort IndexableTempSize_3569;
		public ushort IndexableTempSize_3570;
		public ushort IndexableTempSize_3571;
		public ushort IndexableTempSize_3572;
		public ushort IndexableTempSize_3573;
		public ushort IndexableTempSize_3574;
		public ushort IndexableTempSize_3575;
		public ushort IndexableTempSize_3576;
		public ushort IndexableTempSize_3577;
		public ushort IndexableTempSize_3578;
		public ushort IndexableTempSize_3579;
		public ushort IndexableTempSize_3580;
		public ushort IndexableTempSize_3581;
		public ushort IndexableTempSize_3582;
		public ushort IndexableTempSize_3583;
		public ushort IndexableTempSize_3584;
		public ushort IndexableTempSize_3585;
		public ushort IndexableTempSize_3586;
		public ushort IndexableTempSize_3587;
		public ushort IndexableTempSize_3588;
		public ushort IndexableTempSize_3589;
		public ushort IndexableTempSize_3590;
		public ushort IndexableTempSize_3591;
		public ushort IndexableTempSize_3592;
		public ushort IndexableTempSize_3593;
		public ushort IndexableTempSize_3594;
		public ushort IndexableTempSize_3595;
		public ushort IndexableTempSize_3596;
		public ushort IndexableTempSize_3597;
		public ushort IndexableTempSize_3598;
		public ushort IndexableTempSize_3599;
		public ushort IndexableTempSize_3600;
		public ushort IndexableTempSize_3601;
		public ushort IndexableTempSize_3602;
		public ushort IndexableTempSize_3603;
		public ushort IndexableTempSize_3604;
		public ushort IndexableTempSize_3605;
		public ushort IndexableTempSize_3606;
		public ushort IndexableTempSize_3607;
		public ushort IndexableTempSize_3608;
		public ushort IndexableTempSize_3609;
		public ushort IndexableTempSize_3610;
		public ushort IndexableTempSize_3611;
		public ushort IndexableTempSize_3612;
		public ushort IndexableTempSize_3613;
		public ushort IndexableTempSize_3614;
		public ushort IndexableTempSize_3615;
		public ushort IndexableTempSize_3616;
		public ushort IndexableTempSize_3617;
		public ushort IndexableTempSize_3618;
		public ushort IndexableTempSize_3619;
		public ushort IndexableTempSize_3620;
		public ushort IndexableTempSize_3621;
		public ushort IndexableTempSize_3622;
		public ushort IndexableTempSize_3623;
		public ushort IndexableTempSize_3624;
		public ushort IndexableTempSize_3625;
		public ushort IndexableTempSize_3626;
		public ushort IndexableTempSize_3627;
		public ushort IndexableTempSize_3628;
		public ushort IndexableTempSize_3629;
		public ushort IndexableTempSize_3630;
		public ushort IndexableTempSize_3631;
		public ushort IndexableTempSize_3632;
		public ushort IndexableTempSize_3633;
		public ushort IndexableTempSize_3634;
		public ushort IndexableTempSize_3635;
		public ushort IndexableTempSize_3636;
		public ushort IndexableTempSize_3637;
		public ushort IndexableTempSize_3638;
		public ushort IndexableTempSize_3639;
		public ushort IndexableTempSize_3640;
		public ushort IndexableTempSize_3641;
		public ushort IndexableTempSize_3642;
		public ushort IndexableTempSize_3643;
		public ushort IndexableTempSize_3644;
		public ushort IndexableTempSize_3645;
		public ushort IndexableTempSize_3646;
		public ushort IndexableTempSize_3647;
		public ushort IndexableTempSize_3648;
		public ushort IndexableTempSize_3649;
		public ushort IndexableTempSize_3650;
		public ushort IndexableTempSize_3651;
		public ushort IndexableTempSize_3652;
		public ushort IndexableTempSize_3653;
		public ushort IndexableTempSize_3654;
		public ushort IndexableTempSize_3655;
		public ushort IndexableTempSize_3656;
		public ushort IndexableTempSize_3657;
		public ushort IndexableTempSize_3658;
		public ushort IndexableTempSize_3659;
		public ushort IndexableTempSize_3660;
		public ushort IndexableTempSize_3661;
		public ushort IndexableTempSize_3662;
		public ushort IndexableTempSize_3663;
		public ushort IndexableTempSize_3664;
		public ushort IndexableTempSize_3665;
		public ushort IndexableTempSize_3666;
		public ushort IndexableTempSize_3667;
		public ushort IndexableTempSize_3668;
		public ushort IndexableTempSize_3669;
		public ushort IndexableTempSize_3670;
		public ushort IndexableTempSize_3671;
		public ushort IndexableTempSize_3672;
		public ushort IndexableTempSize_3673;
		public ushort IndexableTempSize_3674;
		public ushort IndexableTempSize_3675;
		public ushort IndexableTempSize_3676;
		public ushort IndexableTempSize_3677;
		public ushort IndexableTempSize_3678;
		public ushort IndexableTempSize_3679;
		public ushort IndexableTempSize_3680;
		public ushort IndexableTempSize_3681;
		public ushort IndexableTempSize_3682;
		public ushort IndexableTempSize_3683;
		public ushort IndexableTempSize_3684;
		public ushort IndexableTempSize_3685;
		public ushort IndexableTempSize_3686;
		public ushort IndexableTempSize_3687;
		public ushort IndexableTempSize_3688;
		public ushort IndexableTempSize_3689;
		public ushort IndexableTempSize_3690;
		public ushort IndexableTempSize_3691;
		public ushort IndexableTempSize_3692;
		public ushort IndexableTempSize_3693;
		public ushort IndexableTempSize_3694;
		public ushort IndexableTempSize_3695;
		public ushort IndexableTempSize_3696;
		public ushort IndexableTempSize_3697;
		public ushort IndexableTempSize_3698;
		public ushort IndexableTempSize_3699;
		public ushort IndexableTempSize_3700;
		public ushort IndexableTempSize_3701;
		public ushort IndexableTempSize_3702;
		public ushort IndexableTempSize_3703;
		public ushort IndexableTempSize_3704;
		public ushort IndexableTempSize_3705;
		public ushort IndexableTempSize_3706;
		public ushort IndexableTempSize_3707;
		public ushort IndexableTempSize_3708;
		public ushort IndexableTempSize_3709;
		public ushort IndexableTempSize_3710;
		public ushort IndexableTempSize_3711;
		public ushort IndexableTempSize_3712;
		public ushort IndexableTempSize_3713;
		public ushort IndexableTempSize_3714;
		public ushort IndexableTempSize_3715;
		public ushort IndexableTempSize_3716;
		public ushort IndexableTempSize_3717;
		public ushort IndexableTempSize_3718;
		public ushort IndexableTempSize_3719;
		public ushort IndexableTempSize_3720;
		public ushort IndexableTempSize_3721;
		public ushort IndexableTempSize_3722;
		public ushort IndexableTempSize_3723;
		public ushort IndexableTempSize_3724;
		public ushort IndexableTempSize_3725;
		public ushort IndexableTempSize_3726;
		public ushort IndexableTempSize_3727;
		public ushort IndexableTempSize_3728;
		public ushort IndexableTempSize_3729;
		public ushort IndexableTempSize_3730;
		public ushort IndexableTempSize_3731;
		public ushort IndexableTempSize_3732;
		public ushort IndexableTempSize_3733;
		public ushort IndexableTempSize_3734;
		public ushort IndexableTempSize_3735;
		public ushort IndexableTempSize_3736;
		public ushort IndexableTempSize_3737;
		public ushort IndexableTempSize_3738;
		public ushort IndexableTempSize_3739;
		public ushort IndexableTempSize_3740;
		public ushort IndexableTempSize_3741;
		public ushort IndexableTempSize_3742;
		public ushort IndexableTempSize_3743;
		public ushort IndexableTempSize_3744;
		public ushort IndexableTempSize_3745;
		public ushort IndexableTempSize_3746;
		public ushort IndexableTempSize_3747;
		public ushort IndexableTempSize_3748;
		public ushort IndexableTempSize_3749;
		public ushort IndexableTempSize_3750;
		public ushort IndexableTempSize_3751;
		public ushort IndexableTempSize_3752;
		public ushort IndexableTempSize_3753;
		public ushort IndexableTempSize_3754;
		public ushort IndexableTempSize_3755;
		public ushort IndexableTempSize_3756;
		public ushort IndexableTempSize_3757;
		public ushort IndexableTempSize_3758;
		public ushort IndexableTempSize_3759;
		public ushort IndexableTempSize_3760;
		public ushort IndexableTempSize_3761;
		public ushort IndexableTempSize_3762;
		public ushort IndexableTempSize_3763;
		public ushort IndexableTempSize_3764;
		public ushort IndexableTempSize_3765;
		public ushort IndexableTempSize_3766;
		public ushort IndexableTempSize_3767;
		public ushort IndexableTempSize_3768;
		public ushort IndexableTempSize_3769;
		public ushort IndexableTempSize_3770;
		public ushort IndexableTempSize_3771;
		public ushort IndexableTempSize_3772;
		public ushort IndexableTempSize_3773;
		public ushort IndexableTempSize_3774;
		public ushort IndexableTempSize_3775;
		public ushort IndexableTempSize_3776;
		public ushort IndexableTempSize_3777;
		public ushort IndexableTempSize_3778;
		public ushort IndexableTempSize_3779;
		public ushort IndexableTempSize_3780;
		public ushort IndexableTempSize_3781;
		public ushort IndexableTempSize_3782;
		public ushort IndexableTempSize_3783;
		public ushort IndexableTempSize_3784;
		public ushort IndexableTempSize_3785;
		public ushort IndexableTempSize_3786;
		public ushort IndexableTempSize_3787;
		public ushort IndexableTempSize_3788;
		public ushort IndexableTempSize_3789;
		public ushort IndexableTempSize_3790;
		public ushort IndexableTempSize_3791;
		public ushort IndexableTempSize_3792;
		public ushort IndexableTempSize_3793;
		public ushort IndexableTempSize_3794;
		public ushort IndexableTempSize_3795;
		public ushort IndexableTempSize_3796;
		public ushort IndexableTempSize_3797;
		public ushort IndexableTempSize_3798;
		public ushort IndexableTempSize_3799;
		public ushort IndexableTempSize_3800;
		public ushort IndexableTempSize_3801;
		public ushort IndexableTempSize_3802;
		public ushort IndexableTempSize_3803;
		public ushort IndexableTempSize_3804;
		public ushort IndexableTempSize_3805;
		public ushort IndexableTempSize_3806;
		public ushort IndexableTempSize_3807;
		public ushort IndexableTempSize_3808;
		public ushort IndexableTempSize_3809;
		public ushort IndexableTempSize_3810;
		public ushort IndexableTempSize_3811;
		public ushort IndexableTempSize_3812;
		public ushort IndexableTempSize_3813;
		public ushort IndexableTempSize_3814;
		public ushort IndexableTempSize_3815;
		public ushort IndexableTempSize_3816;
		public ushort IndexableTempSize_3817;
		public ushort IndexableTempSize_3818;
		public ushort IndexableTempSize_3819;
		public ushort IndexableTempSize_3820;
		public ushort IndexableTempSize_3821;
		public ushort IndexableTempSize_3822;
		public ushort IndexableTempSize_3823;
		public ushort IndexableTempSize_3824;
		public ushort IndexableTempSize_3825;
		public ushort IndexableTempSize_3826;
		public ushort IndexableTempSize_3827;
		public ushort IndexableTempSize_3828;
		public ushort IndexableTempSize_3829;
		public ushort IndexableTempSize_3830;
		public ushort IndexableTempSize_3831;
		public ushort IndexableTempSize_3832;
		public ushort IndexableTempSize_3833;
		public ushort IndexableTempSize_3834;
		public ushort IndexableTempSize_3835;
		public ushort IndexableTempSize_3836;
		public ushort IndexableTempSize_3837;
		public ushort IndexableTempSize_3838;
		public ushort IndexableTempSize_3839;
		public ushort IndexableTempSize_3840;
		public ushort IndexableTempSize_3841;
		public ushort IndexableTempSize_3842;
		public ushort IndexableTempSize_3843;
		public ushort IndexableTempSize_3844;
		public ushort IndexableTempSize_3845;
		public ushort IndexableTempSize_3846;
		public ushort IndexableTempSize_3847;
		public ushort IndexableTempSize_3848;
		public ushort IndexableTempSize_3849;
		public ushort IndexableTempSize_3850;
		public ushort IndexableTempSize_3851;
		public ushort IndexableTempSize_3852;
		public ushort IndexableTempSize_3853;
		public ushort IndexableTempSize_3854;
		public ushort IndexableTempSize_3855;
		public ushort IndexableTempSize_3856;
		public ushort IndexableTempSize_3857;
		public ushort IndexableTempSize_3858;
		public ushort IndexableTempSize_3859;
		public ushort IndexableTempSize_3860;
		public ushort IndexableTempSize_3861;
		public ushort IndexableTempSize_3862;
		public ushort IndexableTempSize_3863;
		public ushort IndexableTempSize_3864;
		public ushort IndexableTempSize_3865;
		public ushort IndexableTempSize_3866;
		public ushort IndexableTempSize_3867;
		public ushort IndexableTempSize_3868;
		public ushort IndexableTempSize_3869;
		public ushort IndexableTempSize_3870;
		public ushort IndexableTempSize_3871;
		public ushort IndexableTempSize_3872;
		public ushort IndexableTempSize_3873;
		public ushort IndexableTempSize_3874;
		public ushort IndexableTempSize_3875;
		public ushort IndexableTempSize_3876;
		public ushort IndexableTempSize_3877;
		public ushort IndexableTempSize_3878;
		public ushort IndexableTempSize_3879;
		public ushort IndexableTempSize_3880;
		public ushort IndexableTempSize_3881;
		public ushort IndexableTempSize_3882;
		public ushort IndexableTempSize_3883;
		public ushort IndexableTempSize_3884;
		public ushort IndexableTempSize_3885;
		public ushort IndexableTempSize_3886;
		public ushort IndexableTempSize_3887;
		public ushort IndexableTempSize_3888;
		public ushort IndexableTempSize_3889;
		public ushort IndexableTempSize_3890;
		public ushort IndexableTempSize_3891;
		public ushort IndexableTempSize_3892;
		public ushort IndexableTempSize_3893;
		public ushort IndexableTempSize_3894;
		public ushort IndexableTempSize_3895;
		public ushort IndexableTempSize_3896;
		public ushort IndexableTempSize_3897;
		public ushort IndexableTempSize_3898;
		public ushort IndexableTempSize_3899;
		public ushort IndexableTempSize_3900;
		public ushort IndexableTempSize_3901;
		public ushort IndexableTempSize_3902;
		public ushort IndexableTempSize_3903;
		public ushort IndexableTempSize_3904;
		public ushort IndexableTempSize_3905;
		public ushort IndexableTempSize_3906;
		public ushort IndexableTempSize_3907;
		public ushort IndexableTempSize_3908;
		public ushort IndexableTempSize_3909;
		public ushort IndexableTempSize_3910;
		public ushort IndexableTempSize_3911;
		public ushort IndexableTempSize_3912;
		public ushort IndexableTempSize_3913;
		public ushort IndexableTempSize_3914;
		public ushort IndexableTempSize_3915;
		public ushort IndexableTempSize_3916;
		public ushort IndexableTempSize_3917;
		public ushort IndexableTempSize_3918;
		public ushort IndexableTempSize_3919;
		public ushort IndexableTempSize_3920;
		public ushort IndexableTempSize_3921;
		public ushort IndexableTempSize_3922;
		public ushort IndexableTempSize_3923;
		public ushort IndexableTempSize_3924;
		public ushort IndexableTempSize_3925;
		public ushort IndexableTempSize_3926;
		public ushort IndexableTempSize_3927;
		public ushort IndexableTempSize_3928;
		public ushort IndexableTempSize_3929;
		public ushort IndexableTempSize_3930;
		public ushort IndexableTempSize_3931;
		public ushort IndexableTempSize_3932;
		public ushort IndexableTempSize_3933;
		public ushort IndexableTempSize_3934;
		public ushort IndexableTempSize_3935;
		public ushort IndexableTempSize_3936;
		public ushort IndexableTempSize_3937;
		public ushort IndexableTempSize_3938;
		public ushort IndexableTempSize_3939;
		public ushort IndexableTempSize_3940;
		public ushort IndexableTempSize_3941;
		public ushort IndexableTempSize_3942;
		public ushort IndexableTempSize_3943;
		public ushort IndexableTempSize_3944;
		public ushort IndexableTempSize_3945;
		public ushort IndexableTempSize_3946;
		public ushort IndexableTempSize_3947;
		public ushort IndexableTempSize_3948;
		public ushort IndexableTempSize_3949;
		public ushort IndexableTempSize_3950;
		public ushort IndexableTempSize_3951;
		public ushort IndexableTempSize_3952;
		public ushort IndexableTempSize_3953;
		public ushort IndexableTempSize_3954;
		public ushort IndexableTempSize_3955;
		public ushort IndexableTempSize_3956;
		public ushort IndexableTempSize_3957;
		public ushort IndexableTempSize_3958;
		public ushort IndexableTempSize_3959;
		public ushort IndexableTempSize_3960;
		public ushort IndexableTempSize_3961;
		public ushort IndexableTempSize_3962;
		public ushort IndexableTempSize_3963;
		public ushort IndexableTempSize_3964;
		public ushort IndexableTempSize_3965;
		public ushort IndexableTempSize_3966;
		public ushort IndexableTempSize_3967;
		public ushort IndexableTempSize_3968;
		public ushort IndexableTempSize_3969;
		public ushort IndexableTempSize_3970;
		public ushort IndexableTempSize_3971;
		public ushort IndexableTempSize_3972;
		public ushort IndexableTempSize_3973;
		public ushort IndexableTempSize_3974;
		public ushort IndexableTempSize_3975;
		public ushort IndexableTempSize_3976;
		public ushort IndexableTempSize_3977;
		public ushort IndexableTempSize_3978;
		public ushort IndexableTempSize_3979;
		public ushort IndexableTempSize_3980;
		public ushort IndexableTempSize_3981;
		public ushort IndexableTempSize_3982;
		public ushort IndexableTempSize_3983;
		public ushort IndexableTempSize_3984;
		public ushort IndexableTempSize_3985;
		public ushort IndexableTempSize_3986;
		public ushort IndexableTempSize_3987;
		public ushort IndexableTempSize_3988;
		public ushort IndexableTempSize_3989;
		public ushort IndexableTempSize_3990;
		public ushort IndexableTempSize_3991;
		public ushort IndexableTempSize_3992;
		public ushort IndexableTempSize_3993;
		public ushort IndexableTempSize_3994;
		public ushort IndexableTempSize_3995;
		public ushort IndexableTempSize_3996;
		public ushort IndexableTempSize_3997;
		public ushort IndexableTempSize_3998;
		public ushort IndexableTempSize_3999;
		public ushort IndexableTempSize_4000;
		public ushort IndexableTempSize_4001;
		public ushort IndexableTempSize_4002;
		public ushort IndexableTempSize_4003;
		public ushort IndexableTempSize_4004;
		public ushort IndexableTempSize_4005;
		public ushort IndexableTempSize_4006;
		public ushort IndexableTempSize_4007;
		public ushort IndexableTempSize_4008;
		public ushort IndexableTempSize_4009;
		public ushort IndexableTempSize_4010;
		public ushort IndexableTempSize_4011;
		public ushort IndexableTempSize_4012;
		public ushort IndexableTempSize_4013;
		public ushort IndexableTempSize_4014;
		public ushort IndexableTempSize_4015;
		public ushort IndexableTempSize_4016;
		public ushort IndexableTempSize_4017;
		public ushort IndexableTempSize_4018;
		public ushort IndexableTempSize_4019;
		public ushort IndexableTempSize_4020;
		public ushort IndexableTempSize_4021;
		public ushort IndexableTempSize_4022;
		public ushort IndexableTempSize_4023;
		public ushort IndexableTempSize_4024;
		public ushort IndexableTempSize_4025;
		public ushort IndexableTempSize_4026;
		public ushort IndexableTempSize_4027;
		public ushort IndexableTempSize_4028;
		public ushort IndexableTempSize_4029;
		public ushort IndexableTempSize_4030;
		public ushort IndexableTempSize_4031;
		public ushort IndexableTempSize_4032;
		public ushort IndexableTempSize_4033;
		public ushort IndexableTempSize_4034;
		public ushort IndexableTempSize_4035;
		public ushort IndexableTempSize_4036;
		public ushort IndexableTempSize_4037;
		public ushort IndexableTempSize_4038;
		public ushort IndexableTempSize_4039;
		public ushort IndexableTempSize_4040;
		public ushort IndexableTempSize_4041;
		public ushort IndexableTempSize_4042;
		public ushort IndexableTempSize_4043;
		public ushort IndexableTempSize_4044;
		public ushort IndexableTempSize_4045;
		public ushort IndexableTempSize_4046;
		public ushort IndexableTempSize_4047;
		public ushort IndexableTempSize_4048;
		public ushort IndexableTempSize_4049;
		public ushort IndexableTempSize_4050;
		public ushort IndexableTempSize_4051;
		public ushort IndexableTempSize_4052;
		public ushort IndexableTempSize_4053;
		public ushort IndexableTempSize_4054;
		public ushort IndexableTempSize_4055;
		public ushort IndexableTempSize_4056;
		public ushort IndexableTempSize_4057;
		public ushort IndexableTempSize_4058;
		public ushort IndexableTempSize_4059;
		public ushort IndexableTempSize_4060;
		public ushort IndexableTempSize_4061;
		public ushort IndexableTempSize_4062;
		public ushort IndexableTempSize_4063;
		public ushort IndexableTempSize_4064;
		public ushort IndexableTempSize_4065;
		public ushort IndexableTempSize_4066;
		public ushort IndexableTempSize_4067;
		public ushort IndexableTempSize_4068;
		public ushort IndexableTempSize_4069;
		public ushort IndexableTempSize_4070;
		public ushort IndexableTempSize_4071;
		public ushort IndexableTempSize_4072;
		public ushort IndexableTempSize_4073;
		public ushort IndexableTempSize_4074;
		public ushort IndexableTempSize_4075;
		public ushort IndexableTempSize_4076;
		public ushort IndexableTempSize_4077;
		public ushort IndexableTempSize_4078;
		public ushort IndexableTempSize_4079;
		public ushort IndexableTempSize_4080;
		public ushort IndexableTempSize_4081;
		public ushort IndexableTempSize_4082;
		public ushort IndexableTempSize_4083;
		public ushort IndexableTempSize_4084;
		public ushort IndexableTempSize_4085;
		public ushort IndexableTempSize_4086;
		public ushort IndexableTempSize_4087;
		public ushort IndexableTempSize_4088;
		public ushort IndexableTempSize_4089;
		public ushort IndexableTempSize_4090;
		public ushort IndexableTempSize_4091;
		public ushort IndexableTempSize_4092;
		public ushort IndexableTempSize_4093;
		public ushort IndexableTempSize_4094;
		public ushort IndexableTempSize_4095;
		[NativeName("ImmediateConstantBufferSize")]
		public ushort ImmediateConstantBufferSize;
		[NativeName("PixelPosition")]
		public unsafe uint* PixelPosition_0;
		public unsafe uint* PixelPosition_1;
		public unsafe uint* PixelPosition_2;
		public unsafe uint* PixelPosition_3;
		[NativeName("PixelCoverageMask")]
		public ulong PixelCoverageMask_0;
		public ulong PixelCoverageMask_1;
		public ulong PixelCoverageMask_2;
		public ulong PixelCoverageMask_3;
		[NativeName("PixelDiscardedMask")]
		public ulong PixelDiscardedMask_0;
		public ulong PixelDiscardedMask_1;
		public ulong PixelDiscardedMask_2;
		public ulong PixelDiscardedMask_3;
		[NativeName("PixelCoverageMaskAfterShader")]
		public ulong PixelCoverageMaskAfterShader_0;
		public ulong PixelCoverageMaskAfterShader_1;
		public ulong PixelCoverageMaskAfterShader_2;
		public ulong PixelCoverageMaskAfterShader_3;
		[NativeName("PixelCoverageMaskAfterA2CSampleMask")]
		public ulong PixelCoverageMaskAfterA2CSampleMask_0;
		public ulong PixelCoverageMaskAfterA2CSampleMask_1;
		public ulong PixelCoverageMaskAfterA2CSampleMask_2;
		public ulong PixelCoverageMaskAfterA2CSampleMask_3;
		[NativeName("PixelCoverageMaskAfterA2CSampleMaskDepth")]
		public ulong PixelCoverageMaskAfterA2CSampleMaskDepth_0;
		public ulong PixelCoverageMaskAfterA2CSampleMaskDepth_1;
		public ulong PixelCoverageMaskAfterA2CSampleMaskDepth_2;
		public ulong PixelCoverageMaskAfterA2CSampleMaskDepth_3;
		[NativeName("PixelCoverageMaskAfterA2CSampleMaskDepthStencil")]
		public ulong PixelCoverageMaskAfterA2CSampleMaskDepthStencil_0;
		public ulong PixelCoverageMaskAfterA2CSampleMaskDepthStencil_1;
		public ulong PixelCoverageMaskAfterA2CSampleMaskDepthStencil_2;
		public ulong PixelCoverageMaskAfterA2CSampleMaskDepthStencil_3;
		[NativeName("PSOutputsDepth")]
		public int PSOutputsDepth;
		[NativeName("PSOutputsMask")]
		public int PSOutputsMask;
		[NativeName("GSInputPrimitive")]
		public D3D11TraceGsInputPrimitive GSInputPrimitive;
		[NativeName("GSInputsPrimitiveID")]
		public int GSInputsPrimitiveID;
		[NativeName("HSOutputPatchConstantMask")]
		public byte HSOutputPatchConstantMask_0;
		public byte HSOutputPatchConstantMask_1;
		public byte HSOutputPatchConstantMask_2;
		public byte HSOutputPatchConstantMask_3;
		public byte HSOutputPatchConstantMask_4;
		public byte HSOutputPatchConstantMask_5;
		public byte HSOutputPatchConstantMask_6;
		public byte HSOutputPatchConstantMask_7;
		public byte HSOutputPatchConstantMask_8;
		public byte HSOutputPatchConstantMask_9;
		public byte HSOutputPatchConstantMask_10;
		public byte HSOutputPatchConstantMask_11;
		public byte HSOutputPatchConstantMask_12;
		public byte HSOutputPatchConstantMask_13;
		public byte HSOutputPatchConstantMask_14;
		public byte HSOutputPatchConstantMask_15;
		public byte HSOutputPatchConstantMask_16;
		public byte HSOutputPatchConstantMask_17;
		public byte HSOutputPatchConstantMask_18;
		public byte HSOutputPatchConstantMask_19;
		public byte HSOutputPatchConstantMask_20;
		public byte HSOutputPatchConstantMask_21;
		public byte HSOutputPatchConstantMask_22;
		public byte HSOutputPatchConstantMask_23;
		public byte HSOutputPatchConstantMask_24;
		public byte HSOutputPatchConstantMask_25;
		public byte HSOutputPatchConstantMask_26;
		public byte HSOutputPatchConstantMask_27;
		public byte HSOutputPatchConstantMask_28;
		public byte HSOutputPatchConstantMask_29;
		public byte HSOutputPatchConstantMask_30;
		public byte HSOutputPatchConstantMask_31;
		[NativeName("DSInputPatchConstantMask")]
		public byte DSInputPatchConstantMask_0;
		public byte DSInputPatchConstantMask_1;
		public byte DSInputPatchConstantMask_2;
		public byte DSInputPatchConstantMask_3;
		public byte DSInputPatchConstantMask_4;
		public byte DSInputPatchConstantMask_5;
		public byte DSInputPatchConstantMask_6;
		public byte DSInputPatchConstantMask_7;
		public byte DSInputPatchConstantMask_8;
		public byte DSInputPatchConstantMask_9;
		public byte DSInputPatchConstantMask_10;
		public byte DSInputPatchConstantMask_11;
		public byte DSInputPatchConstantMask_12;
		public byte DSInputPatchConstantMask_13;
		public byte DSInputPatchConstantMask_14;
		public byte DSInputPatchConstantMask_15;
		public byte DSInputPatchConstantMask_16;
		public byte DSInputPatchConstantMask_17;
		public byte DSInputPatchConstantMask_18;
		public byte DSInputPatchConstantMask_19;
		public byte DSInputPatchConstantMask_20;
		public byte DSInputPatchConstantMask_21;
		public byte DSInputPatchConstantMask_22;
		public byte DSInputPatchConstantMask_23;
		public byte DSInputPatchConstantMask_24;
		public byte DSInputPatchConstantMask_25;
		public byte DSInputPatchConstantMask_26;
		public byte DSInputPatchConstantMask_27;
		public byte DSInputPatchConstantMask_28;
		public byte DSInputPatchConstantMask_29;
		public byte DSInputPatchConstantMask_30;
		public byte DSInputPatchConstantMask_31;


	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D11ShaderTraceDescUnion
	{
		[NativeName("VertexShaderTraceDesc")]
		[FieldOffset(0)]
		public D3D11VertexShaderTraceDesc VertexShaderTraceDesc;
		[NativeName("HullShaderTraceDesc")]
		[FieldOffset(0)]
		public D3D11HullShaderTraceDesc HullShaderTraceDesc;
		[NativeName("DomainShaderTraceDesc")]
		[FieldOffset(0)]
		public D3D11DomainShaderTraceDesc DomainShaderTraceDesc;
		[NativeName("GeometryShaderTraceDesc")]
		[FieldOffset(0)]
		public D3D11GeometryShaderTraceDesc GeometryShaderTraceDesc;
		[NativeName("PixelShaderTraceDesc")]
		[FieldOffset(0)]
		public D3D11PixelShaderTraceDesc PixelShaderTraceDesc;
		[NativeName("ComputeShaderTraceDesc")]
		[FieldOffset(0)]
		public D3D11ComputeShaderTraceDesc ComputeShaderTraceDesc;


	}

	[NativeName("D3D11_SHADER_TRACE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11ShaderTraceDesc
	{
		[NativeName("Type")]
		public D3D11ShaderType Type;
		[NativeName("Flags")]
		public uint Flags;
		[NativeName("")]
		public D3D11ShaderTraceDescUnion D3D11ShaderTraceDescUnion;


	}

	[NativeName("D3D11_VERTEX_SHADER_TRACE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VertexShaderTraceDesc
	{
		[NativeName("Invocation")]
		public ulong Invocation;


	}

	[NativeName("D3D11_HULL_SHADER_TRACE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11HullShaderTraceDesc
	{
		[NativeName("Invocation")]
		public ulong Invocation;


	}

	[NativeName("D3D11_DOMAIN_SHADER_TRACE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11DomainShaderTraceDesc
	{
		[NativeName("Invocation")]
		public ulong Invocation;


	}

	[NativeName("D3D11_GEOMETRY_SHADER_TRACE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11GeometryShaderTraceDesc
	{
		[NativeName("Invocation")]
		public ulong Invocation;


	}

	[NativeName("D3D11_PIXEL_SHADER_TRACE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11PixelShaderTraceDesc
	{
		[NativeName("Invocation")]
		public ulong Invocation;
		[NativeName("X")]
		public int X;
		[NativeName("Y")]
		public int Y;
		[NativeName("SampleMask")]
		public ulong SampleMask;


	}

	[NativeName("D3D11_COMPUTE_SHADER_TRACE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11ComputeShaderTraceDesc
	{
		[NativeName("Invocation")]
		public ulong Invocation;
		[NativeName("ThreadIDInGroup")]
		public uint ThreadIDInGroup_0;
		public uint ThreadIDInGroup_1;
		public uint ThreadIDInGroup_2;
		[NativeName("ThreadGroupID")]
		public uint ThreadGroupID_0;
		public uint ThreadGroupID_1;
		public uint ThreadGroupID_2;


	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D11TraceRegisterUnion
	{
		[NativeName("Index1D")]
		[FieldOffset(0)]
		public ushort Index1D;
		[NativeName("Index2D")]
		[FieldOffset(0)]
		public ushort Index2D_0;
		[FieldOffset(4)]
		public ushort Index2D_1;


	}

	[NativeName("D3D11_TRACE_REGISTER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11TraceRegister
	{
		[NativeName("RegType")]
		public D3D11TraceRegisterType RegType;
		[NativeName("")]
		public D3D11TraceRegisterUnion D3D11TraceRegisterUnion;
		[NativeName("OperandIndex")]
		public byte OperandIndex;
		[NativeName("Flags")]
		public byte Flags;


	}

	[NativeName("D3D11_TRACE_VALUE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11TraceValue
	{
		[NativeName("Bits")]
		public uint Bits_0;
		public uint Bits_1;
		public uint Bits_2;
		public uint Bits_3;
		[NativeName("ValidMask")]
		public uint ValidMask;


	}

	[NativeName("D3D11_TRACE_STEP")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11TraceStep
	{
		[NativeName("ID")]
		public uint ID;
		[NativeName("InstructionActive")]
		public int InstructionActive;
		[NativeName("NumRegistersWritten")]
		public byte NumRegistersWritten;
		[NativeName("NumRegistersRead")]
		public byte NumRegistersRead;
		[NativeName("MiscOperations")]
		public uint MiscOperations;
		[NativeName("OpcodeType")]
		public uint OpcodeType;
		[NativeName("CurrentGlobalCycle")]
		public ulong CurrentGlobalCycle;


	}

	[NativeName("ID3D11ShaderTraceFactory")]
	public partial struct ID3D11ShaderTraceFactory : IComObject, IComObject<ID3D11ShaderTraceFactory>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe ID3D11ShaderTraceFactory (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult CreateShaderTrace(IUnknown* pShader, D3D11ShaderTraceDesc* pTraceDesc, ID3D11ShaderTrace** ppShaderTrace)
		{
			ID3D11ShaderTraceFactory* ptr = (ID3D11ShaderTraceFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, D3D11ShaderTraceDesc*, ID3D11ShaderTrace**, HResult>)(*LpVtbl))(ptr, pShader, pTraceDesc, ppShaderTrace);
			return ret;
		}

		public readonly unsafe HResult CreateShaderTrace(ref IUnknown pShader, D3D11ShaderTraceDesc* pTraceDesc, ID3D11ShaderTrace** ppShaderTrace)
		{
			ID3D11ShaderTraceFactory* ptr = (ID3D11ShaderTraceFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppShader = &pShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, D3D11ShaderTraceDesc*, ID3D11ShaderTrace**, HResult>)(*LpVtbl))(ptr, (IUnknown*)ppShader, pTraceDesc, ppShaderTrace);
				return ret;
			}
		}

		public readonly unsafe HResult CreateShaderTrace(IUnknown* pShader, ref D3D11ShaderTraceDesc pTraceDesc, ID3D11ShaderTrace** ppShaderTrace)
		{
			ID3D11ShaderTraceFactory* ptr = (ID3D11ShaderTraceFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ShaderTraceDesc* ppTraceDesc = &pTraceDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, D3D11ShaderTraceDesc*, ID3D11ShaderTrace**, HResult>)(*LpVtbl))(ptr, pShader, (D3D11ShaderTraceDesc*)ppTraceDesc, ppShaderTrace);
				return ret;
			}
		}

		public readonly unsafe HResult CreateShaderTrace(ref IUnknown pShader, ref D3D11ShaderTraceDesc pTraceDesc, ID3D11ShaderTrace** ppShaderTrace)
		{
			ID3D11ShaderTraceFactory* ptr = (ID3D11ShaderTraceFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppShader = &pShader)
			{
				fixed (D3D11ShaderTraceDesc* ppTraceDesc = &pTraceDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, D3D11ShaderTraceDesc*, ID3D11ShaderTrace**, HResult>)(*LpVtbl))(ptr, (IUnknown*)ppShader, (D3D11ShaderTraceDesc*)ppTraceDesc, ppShaderTrace);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateShaderTrace(IUnknown* pShader, D3D11ShaderTraceDesc* pTraceDesc, ref ID3D11ShaderTrace* ppShaderTrace)
		{
			ID3D11ShaderTraceFactory* ptr = (ID3D11ShaderTraceFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderTrace** pppShaderTrace = &ppShaderTrace)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, D3D11ShaderTraceDesc*, ID3D11ShaderTrace**, HResult>)(*LpVtbl))(ptr, pShader, pTraceDesc, (ID3D11ShaderTrace**)pppShaderTrace);
				return ret;
			}
		}

		public readonly unsafe HResult CreateShaderTrace(ref IUnknown pShader, D3D11ShaderTraceDesc* pTraceDesc, ref ID3D11ShaderTrace* ppShaderTrace)
		{
			ID3D11ShaderTraceFactory* ptr = (ID3D11ShaderTraceFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppShader = &pShader)
			{
				fixed (ID3D11ShaderTrace** pppShaderTrace = &ppShaderTrace)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, D3D11ShaderTraceDesc*, ID3D11ShaderTrace**, HResult>)(*LpVtbl))(ptr, (IUnknown*)ppShader, pTraceDesc, (ID3D11ShaderTrace**)pppShaderTrace);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateShaderTrace(IUnknown* pShader, ref D3D11ShaderTraceDesc pTraceDesc, ref ID3D11ShaderTrace* ppShaderTrace)
		{
			ID3D11ShaderTraceFactory* ptr = (ID3D11ShaderTraceFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ShaderTraceDesc* ppTraceDesc = &pTraceDesc)
			{
				fixed (ID3D11ShaderTrace** pppShaderTrace = &ppShaderTrace)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, D3D11ShaderTraceDesc*, ID3D11ShaderTrace**, HResult>)(*LpVtbl))(ptr, pShader, (D3D11ShaderTraceDesc*)ppTraceDesc, (ID3D11ShaderTrace**)pppShaderTrace);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateShaderTrace(ref IUnknown pShader, ref D3D11ShaderTraceDesc pTraceDesc, ref ID3D11ShaderTrace* ppShaderTrace)
		{
			ID3D11ShaderTraceFactory* ptr = (ID3D11ShaderTraceFactory*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppShader = &pShader)
			{
				fixed (D3D11ShaderTraceDesc* ppTraceDesc = &pTraceDesc)
				{
					fixed (ID3D11ShaderTrace** pppShaderTrace = &ppShaderTrace)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderTraceFactory*, IUnknown*, D3D11ShaderTraceDesc*, ID3D11ShaderTrace**, HResult>)(*LpVtbl))(ptr, (IUnknown*)ppShader, (D3D11ShaderTraceDesc*)ppTraceDesc, (ID3D11ShaderTrace**)pppShaderTrace);
						return ret;
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11ShaderTraceFactory value)
		{
			return Unsafe.As<ID3D11ShaderTraceFactory, IUnknown>(ref value);
		}

	}

	[Guid("cc86fabe-da55-401d-85e7-e3c9de2877e9")]
	[NativeName("ID3D11BlendState1")]
	public partial struct ID3D11BlendState1 : IComObject, IComObject<ID3D11BlendState1>, IComObject<ID3D11BlendState>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("cc86fabe-da55-401d-85e7-e3c9de2877e9");

		public unsafe ID3D11BlendState1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc1(D3D11BlendDesc1* pDesc)
		{
			ID3D11BlendState1* ptr = (ID3D11BlendState1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, D3D11BlendDesc1*, void>)(LpVtbl[1]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc1(ref D3D11BlendDesc1 pDesc)
		{
			ID3D11BlendState1* ptr = (ID3D11BlendState1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11BlendDesc1* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11BlendState1*, D3D11BlendDesc1*, void>)(LpVtbl[1]))(ptr, (D3D11BlendDesc1*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11BlendState (ID3D11BlendState1 value)
		{
			return Unsafe.As<ID3D11BlendState1, ID3D11BlendState>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11BlendState1 value)
		{
			return Unsafe.As<ID3D11BlendState1, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11BlendState1 value)
		{
			return Unsafe.As<ID3D11BlendState1, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_BLEND_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11BlendDesc1
	{
		[NativeName("AlphaToCoverageEnable")]
		public int AlphaToCoverageEnable;
		[NativeName("IndependentBlendEnable")]
		public int IndependentBlendEnable;
		[NativeName("RenderTarget")]
		public D3D11RenderTargetBlendDesc1 RenderTarget_0;
		public D3D11RenderTargetBlendDesc1 RenderTarget_1;
		public D3D11RenderTargetBlendDesc1 RenderTarget_2;
		public D3D11RenderTargetBlendDesc1 RenderTarget_3;
		public D3D11RenderTargetBlendDesc1 RenderTarget_4;
		public D3D11RenderTargetBlendDesc1 RenderTarget_5;
		public D3D11RenderTargetBlendDesc1 RenderTarget_6;
		public D3D11RenderTargetBlendDesc1 RenderTarget_7;


		public unsafe Span<D3D11RenderTargetBlendDesc1> RenderTarget
		
		{
			get
			{
				fixed (D3D11RenderTargetBlendDesc1* p = &this.RenderTarget_0)
				{
					return new Span<D3D11RenderTargetBlendDesc1>(p, 8);
				}
			}
		}
	}

	[NativeName("D3D11_RENDER_TARGET_BLEND_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11RenderTargetBlendDesc1
	{
		[NativeName("BlendEnable")]
		public int BlendEnable;
		[NativeName("LogicOpEnable")]
		public int LogicOpEnable;
		[NativeName("SrcBlend")]
		public D3D11Blend SrcBlend;
		[NativeName("DestBlend")]
		public D3D11Blend DestBlend;
		[NativeName("BlendOp")]
		public D3D11BlendOp BlendOp;
		[NativeName("SrcBlendAlpha")]
		public D3D11Blend SrcBlendAlpha;
		[NativeName("DestBlendAlpha")]
		public D3D11Blend DestBlendAlpha;
		[NativeName("BlendOpAlpha")]
		public D3D11BlendOp BlendOpAlpha;
		[NativeName("LogicOp")]
		public D3D11LogicOp LogicOp;
		[NativeName("RenderTargetWriteMask")]
		public byte RenderTargetWriteMask;


	}

	[Guid("1217d7a6-5039-418c-b042-9cbe256afd6e")]
	[NativeName("ID3D11RasterizerState1")]
	public partial struct ID3D11RasterizerState1 : IComObject, IComObject<ID3D11RasterizerState1>, IComObject<ID3D11RasterizerState>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("1217d7a6-5039-418c-b042-9cbe256afd6e");

		public unsafe ID3D11RasterizerState1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc1(D3D11RasterizerDesc1* pDesc)
		{
			ID3D11RasterizerState1* ptr = (ID3D11RasterizerState1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11RasterizerState1*, D3D11RasterizerDesc1*, void>)(LpVtbl[1]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc1(ref D3D11RasterizerDesc1 pDesc)
		{
			ID3D11RasterizerState1* ptr = (ID3D11RasterizerState1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11RasterizerDesc1* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11RasterizerState1*, D3D11RasterizerDesc1*, void>)(LpVtbl[1]))(ptr, (D3D11RasterizerDesc1*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11RasterizerState (ID3D11RasterizerState1 value)
		{
			return Unsafe.As<ID3D11RasterizerState1, ID3D11RasterizerState>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11RasterizerState1 value)
		{
			return Unsafe.As<ID3D11RasterizerState1, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11RasterizerState1 value)
		{
			return Unsafe.As<ID3D11RasterizerState1, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_1_0000_0001 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D11_RASTERIZER_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11RasterizerDesc1
	{
		[NativeName("FillMode")]
		public D3D11FillMode FillMode;
		[NativeName("CullMode")]
		public D3D11CullMode CullMode;
		[NativeName("FrontCounterClockwise")]
		public int FrontCounterClockwise;
		[NativeName("DepthBias")]
		public int DepthBias;
		[NativeName("DepthBiasClamp")]
		public float DepthBiasClamp;
		[NativeName("SlopeScaledDepthBias")]
		public float SlopeScaledDepthBias;
		[NativeName("DepthClipEnable")]
		public int DepthClipEnable;
		[NativeName("ScissorEnable")]
		public int ScissorEnable;
		[NativeName("MultisampleEnable")]
		public int MultisampleEnable;
		[NativeName("AntialiasedLineEnable")]
		public int AntialiasedLineEnable;
		[NativeName("ForcedSampleCount")]
		public uint ForcedSampleCount;


	}

	[Guid("5c1e0d8a-7c23-48f9-8c59-a92958ceff11")]
	[NativeName("ID3DDeviceContextState")]
	public partial struct ID3DDeviceContextState : IComObject, IComObject<ID3DDeviceContextState>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("5c1e0d8a-7c23-48f9-8c59-a92958ceff11");

		public unsafe ID3DDeviceContextState (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3DDeviceContextState value)
		{
			return Unsafe.As<ID3DDeviceContextState, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3DDeviceContextState value)
		{
			return Unsafe.As<ID3DDeviceContextState, IUnknown>(ref value);
		}

	}

	[Guid("bb2c6faa-b5fb-4082-8e6b-388b8cfa90e1")]
	[NativeName("ID3D11DeviceContext1")]
	public partial struct ID3D11DeviceContext1 : IComObject, IComObject<ID3D11DeviceContext1>, IComObject<ID3D11DeviceContext>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("bb2c6faa-b5fb-4082-8e6b-388b8cfa90e1");

		public unsafe ID3D11DeviceContext1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void CopySubresourceRegion1(ID3D11Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, uint dstZ, ID3D11Resource* pSrcResource, uint srcSubresource, D3D11Box* pSrcBox, uint copyFlags)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11Resource*, uint, uint, uint, uint, ID3D11Resource*, uint, D3D11Box*, uint, void>)(LpVtbl[108]))(ptr, pDstResource, dstSubresource, dstX, dstY, dstZ, pSrcResource, srcSubresource, pSrcBox, copyFlags);
		}

		public readonly unsafe void CopySubresourceRegion1(ref ID3D11Resource pDstResource, uint dstSubresource, uint dstX, uint dstY, uint dstZ, ID3D11Resource* pSrcResource, uint srcSubresource, D3D11Box* pSrcBox, uint copyFlags)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDstResource = &pDstResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11Resource*, uint, uint, uint, uint, ID3D11Resource*, uint, D3D11Box*, uint, void>)(LpVtbl[108]))(ptr, (ID3D11Resource*)ppDstResource, dstSubresource, dstX, dstY, dstZ, pSrcResource, srcSubresource, pSrcBox, copyFlags);
			}
		}

		public readonly unsafe void CopySubresourceRegion1(ID3D11Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, uint dstZ, ref ID3D11Resource pSrcResource, uint srcSubresource, D3D11Box* pSrcBox, uint copyFlags)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppSrcResource = &pSrcResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11Resource*, uint, uint, uint, uint, ID3D11Resource*, uint, D3D11Box*, uint, void>)(LpVtbl[108]))(ptr, pDstResource, dstSubresource, dstX, dstY, dstZ, (ID3D11Resource*)ppSrcResource, srcSubresource, pSrcBox, copyFlags);
			}
		}

		public readonly unsafe void CopySubresourceRegion1(ref ID3D11Resource pDstResource, uint dstSubresource, uint dstX, uint dstY, uint dstZ, ref ID3D11Resource pSrcResource, uint srcSubresource, D3D11Box* pSrcBox, uint copyFlags)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D11Resource* ppSrcResource = &pSrcResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11Resource*, uint, uint, uint, uint, ID3D11Resource*, uint, D3D11Box*, uint, void>)(LpVtbl[108]))(ptr, (ID3D11Resource*)ppDstResource, dstSubresource, dstX, dstY, dstZ, (ID3D11Resource*)ppSrcResource, srcSubresource, pSrcBox, copyFlags);
				}
			}
		}

		public readonly unsafe void CopySubresourceRegion1(ID3D11Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, uint dstZ, ID3D11Resource* pSrcResource, uint srcSubresource, ref D3D11Box pSrcBox, uint copyFlags)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Box* ppSrcBox = &pSrcBox)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11Resource*, uint, uint, uint, uint, ID3D11Resource*, uint, D3D11Box*, uint, void>)(LpVtbl[108]))(ptr, pDstResource, dstSubresource, dstX, dstY, dstZ, pSrcResource, srcSubresource, (D3D11Box*)ppSrcBox, copyFlags);
			}
		}

		public readonly unsafe void CopySubresourceRegion1(ref ID3D11Resource pDstResource, uint dstSubresource, uint dstX, uint dstY, uint dstZ, ID3D11Resource* pSrcResource, uint srcSubresource, ref D3D11Box pSrcBox, uint copyFlags)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D11Box* ppSrcBox = &pSrcBox)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11Resource*, uint, uint, uint, uint, ID3D11Resource*, uint, D3D11Box*, uint, void>)(LpVtbl[108]))(ptr, (ID3D11Resource*)ppDstResource, dstSubresource, dstX, dstY, dstZ, pSrcResource, srcSubresource, (D3D11Box*)ppSrcBox, copyFlags);
				}
			}
		}

		public readonly unsafe void CopySubresourceRegion1(ID3D11Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, uint dstZ, ref ID3D11Resource pSrcResource, uint srcSubresource, ref D3D11Box pSrcBox, uint copyFlags)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppSrcResource = &pSrcResource)
			{
				fixed (D3D11Box* ppSrcBox = &pSrcBox)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11Resource*, uint, uint, uint, uint, ID3D11Resource*, uint, D3D11Box*, uint, void>)(LpVtbl[108]))(ptr, pDstResource, dstSubresource, dstX, dstY, dstZ, (ID3D11Resource*)ppSrcResource, srcSubresource, (D3D11Box*)ppSrcBox, copyFlags);
				}
			}
		}

		public readonly unsafe void CopySubresourceRegion1(ref ID3D11Resource pDstResource, uint dstSubresource, uint dstX, uint dstY, uint dstZ, ref ID3D11Resource pSrcResource, uint srcSubresource, ref D3D11Box pSrcBox, uint copyFlags)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D11Resource* ppSrcResource = &pSrcResource)
				{
					fixed (D3D11Box* ppSrcBox = &pSrcBox)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11Resource*, uint, uint, uint, uint, ID3D11Resource*, uint, D3D11Box*, uint, void>)(LpVtbl[108]))(ptr, (ID3D11Resource*)ppDstResource, dstSubresource, dstX, dstY, dstZ, (ID3D11Resource*)ppSrcResource, srcSubresource, (D3D11Box*)ppSrcBox, copyFlags);
					}
				}
			}
		}

		public readonly unsafe void UpdateSubresource1(ID3D11Resource* pDstResource, uint dstSubresource, D3D11Box* pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch, uint copyFlags)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11Resource*, uint, D3D11Box*, void*, uint, uint, uint, void>)(LpVtbl[109]))(ptr, pDstResource, dstSubresource, pDstBox, pSrcData, srcRowPitch, srcDepthPitch, copyFlags);
		}

		public readonly unsafe void UpdateSubresource1(ref ID3D11Resource pDstResource, uint dstSubresource, D3D11Box* pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch, uint copyFlags)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDstResource = &pDstResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11Resource*, uint, D3D11Box*, void*, uint, uint, uint, void>)(LpVtbl[109]))(ptr, (ID3D11Resource*)ppDstResource, dstSubresource, pDstBox, pSrcData, srcRowPitch, srcDepthPitch, copyFlags);
			}
		}

		public readonly unsafe void UpdateSubresource1(ID3D11Resource* pDstResource, uint dstSubresource, ref D3D11Box pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch, uint copyFlags)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Box* ppDstBox = &pDstBox)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11Resource*, uint, D3D11Box*, void*, uint, uint, uint, void>)(LpVtbl[109]))(ptr, pDstResource, dstSubresource, (D3D11Box*)ppDstBox, pSrcData, srcRowPitch, srcDepthPitch, copyFlags);
			}
		}

		public readonly unsafe void UpdateSubresource1(ref ID3D11Resource pDstResource, uint dstSubresource, ref D3D11Box pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch, uint copyFlags)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D11Box* ppDstBox = &pDstBox)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11Resource*, uint, D3D11Box*, void*, uint, uint, uint, void>)(LpVtbl[109]))(ptr, (ID3D11Resource*)ppDstResource, dstSubresource, (D3D11Box*)ppDstBox, pSrcData, srcRowPitch, srcDepthPitch, copyFlags);
				}
			}
		}

		public readonly unsafe void DiscardResource(ID3D11Resource* pResource)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11Resource*, void>)(LpVtbl[110]))(ptr, pResource);
		}

		public readonly unsafe void DiscardResource(ref ID3D11Resource pResource)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11Resource*, void>)(LpVtbl[110]))(ptr, (ID3D11Resource*)ppResource);
			}
		}

		public readonly unsafe void DiscardView(ID3D11View* pResourceView)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11View*, void>)(LpVtbl[111]))(ptr, pResourceView);
		}

		public readonly unsafe void DiscardView(ref ID3D11View pResourceView)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11View* ppResourceView = &pResourceView)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11View*, void>)(LpVtbl[111]))(ptr, (ID3D11View*)ppResourceView);
			}
		}

		public readonly unsafe void VSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[112]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
		}

		public readonly unsafe void VSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[112]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, pFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void VSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[112]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void VSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[112]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
				}
			}
		}

		public readonly unsafe void VSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumConstants = &pNumConstants)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[112]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
			}
		}

		public readonly unsafe void VSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[112]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void VSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[112]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void VSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					fixed (uint* ppNumConstants = &pNumConstants)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[112]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
					}
				}
			}
		}

		public readonly unsafe void HSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[113]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
		}

		public readonly unsafe void HSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[113]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, pFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void HSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[113]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void HSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[113]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
				}
			}
		}

		public readonly unsafe void HSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumConstants = &pNumConstants)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[113]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
			}
		}

		public readonly unsafe void HSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[113]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void HSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[113]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void HSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					fixed (uint* ppNumConstants = &pNumConstants)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[113]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
					}
				}
			}
		}

		public readonly unsafe void DSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[114]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
		}

		public readonly unsafe void DSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[114]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, pFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void DSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[114]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void DSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[114]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
				}
			}
		}

		public readonly unsafe void DSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumConstants = &pNumConstants)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[114]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
			}
		}

		public readonly unsafe void DSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[114]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void DSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[114]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void DSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					fixed (uint* ppNumConstants = &pNumConstants)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[114]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
					}
				}
			}
		}

		public readonly unsafe void GSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[115]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
		}

		public readonly unsafe void GSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[115]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, pFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void GSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[115]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void GSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[115]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
				}
			}
		}

		public readonly unsafe void GSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumConstants = &pNumConstants)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[115]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
			}
		}

		public readonly unsafe void GSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[115]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void GSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[115]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void GSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					fixed (uint* ppNumConstants = &pNumConstants)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[115]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
					}
				}
			}
		}

		public readonly unsafe void PSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[116]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
		}

		public readonly unsafe void PSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[116]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, pFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void PSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[116]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void PSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[116]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
				}
			}
		}

		public readonly unsafe void PSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumConstants = &pNumConstants)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[116]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
			}
		}

		public readonly unsafe void PSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[116]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void PSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[116]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void PSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					fixed (uint* ppNumConstants = &pNumConstants)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[116]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
					}
				}
			}
		}

		public readonly unsafe void CSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[117]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
		}

		public readonly unsafe void CSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[117]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, pFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void CSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[117]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void CSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[117]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
				}
			}
		}

		public readonly unsafe void CSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumConstants = &pNumConstants)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[117]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
			}
		}

		public readonly unsafe void CSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[117]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void CSSetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer*** ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[117]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void CSSetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					fixed (uint* ppNumConstants = &pNumConstants)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer***, uint*, uint*, void>)(LpVtbl[117]))(ptr, startSlot, numBuffers, (ID3D11Buffer***)pppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
					}
				}
			}
		}

		public readonly unsafe void VSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[118]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
		}

		public readonly unsafe void VSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[118]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, pFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void VSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[118]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void VSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[118]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
				}
			}
		}

		public readonly unsafe void VSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumConstants = &pNumConstants)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[118]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
			}
		}

		public readonly unsafe void VSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[118]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void VSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[118]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void VSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					fixed (uint* ppNumConstants = &pNumConstants)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[118]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
					}
				}
			}
		}

		public readonly unsafe void HSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[119]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
		}

		public readonly unsafe void HSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[119]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, pFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void HSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[119]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void HSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[119]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
				}
			}
		}

		public readonly unsafe void HSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumConstants = &pNumConstants)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[119]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
			}
		}

		public readonly unsafe void HSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[119]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void HSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[119]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void HSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					fixed (uint* ppNumConstants = &pNumConstants)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[119]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
					}
				}
			}
		}

		public readonly unsafe void DSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[120]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
		}

		public readonly unsafe void DSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[120]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, pFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void DSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[120]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void DSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[120]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
				}
			}
		}

		public readonly unsafe void DSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumConstants = &pNumConstants)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[120]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
			}
		}

		public readonly unsafe void DSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[120]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void DSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[120]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void DSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					fixed (uint* ppNumConstants = &pNumConstants)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[120]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
					}
				}
			}
		}

		public readonly unsafe void GSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[121]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
		}

		public readonly unsafe void GSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[121]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, pFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void GSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[121]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void GSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[121]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
				}
			}
		}

		public readonly unsafe void GSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumConstants = &pNumConstants)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[121]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
			}
		}

		public readonly unsafe void GSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[121]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void GSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[121]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void GSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					fixed (uint* ppNumConstants = &pNumConstants)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[121]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
					}
				}
			}
		}

		public readonly unsafe void PSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[122]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
		}

		public readonly unsafe void PSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[122]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, pFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void PSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[122]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void PSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[122]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
				}
			}
		}

		public readonly unsafe void PSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumConstants = &pNumConstants)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[122]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
			}
		}

		public readonly unsafe void PSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[122]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void PSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[122]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void PSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					fixed (uint* ppNumConstants = &pNumConstants)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[122]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
					}
				}
			}
		}

		public readonly unsafe void CSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[123]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
		}

		public readonly unsafe void CSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[123]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, pFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void CSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[123]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
			}
		}

		public readonly unsafe void CSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, uint* pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[123]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, (uint*)ppFirstConstant, pNumConstants);
				}
			}
		}

		public readonly unsafe void CSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumConstants = &pNumConstants)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[123]))(ptr, startSlot, numBuffers, ppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
			}
		}

		public readonly unsafe void CSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[123]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, pFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void CSGetConstantBuffers1(uint startSlot, uint numBuffers, ID3D11Buffer** ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppFirstConstant = &pFirstConstant)
			{
				fixed (uint* ppNumConstants = &pNumConstants)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[123]))(ptr, startSlot, numBuffers, ppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
				}
			}
		}

		public readonly unsafe void CSGetConstantBuffers1(uint startSlot, uint numBuffers, ref ID3D11Buffer* ppConstantBuffers, ref uint pFirstConstant, ref uint pNumConstants)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppConstantBuffers = &ppConstantBuffers)
			{
				fixed (uint* ppFirstConstant = &pFirstConstant)
				{
					fixed (uint* ppNumConstants = &pNumConstants)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, uint, uint, ID3D11Buffer**, uint*, uint*, void>)(LpVtbl[123]))(ptr, startSlot, numBuffers, (ID3D11Buffer**)pppConstantBuffers, (uint*)ppFirstConstant, (uint*)ppNumConstants);
					}
				}
			}
		}

		public readonly unsafe void SwapDeviceContextState(ID3DDeviceContextState* pState, ID3DDeviceContextState** ppPreviousState)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3DDeviceContextState*, ID3DDeviceContextState**, void>)(LpVtbl[124]))(ptr, pState, ppPreviousState);
		}

		public readonly unsafe void SwapDeviceContextState(ref ID3DDeviceContextState pState, ID3DDeviceContextState** ppPreviousState)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3DDeviceContextState* ppState = &pState)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3DDeviceContextState*, ID3DDeviceContextState**, void>)(LpVtbl[124]))(ptr, (ID3DDeviceContextState*)ppState, ppPreviousState);
			}
		}

		public readonly unsafe void SwapDeviceContextState(ID3DDeviceContextState* pState, ref ID3DDeviceContextState* ppPreviousState)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3DDeviceContextState** pppPreviousState = &ppPreviousState)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3DDeviceContextState*, ID3DDeviceContextState**, void>)(LpVtbl[124]))(ptr, pState, (ID3DDeviceContextState**)pppPreviousState);
			}
		}

		public readonly unsafe void SwapDeviceContextState(ref ID3DDeviceContextState pState, ref ID3DDeviceContextState* ppPreviousState)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3DDeviceContextState* ppState = &pState)
			{
				fixed (ID3DDeviceContextState** pppPreviousState = &ppPreviousState)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3DDeviceContextState*, ID3DDeviceContextState**, void>)(LpVtbl[124]))(ptr, (ID3DDeviceContextState*)ppState, (ID3DDeviceContextState**)pppPreviousState);
				}
			}
		}

		public readonly unsafe void ClearView(ID3D11View* pView, float* color, Rect32* pRect, uint numRects)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11View*, float*, Rect32*, uint, void>)(LpVtbl[125]))(ptr, pView, color, pRect, numRects);
		}

		public readonly unsafe void ClearView(ref ID3D11View pView, float* color, Rect32* pRect, uint numRects)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11View* ppView = &pView)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11View*, float*, Rect32*, uint, void>)(LpVtbl[125]))(ptr, (ID3D11View*)ppView, color, pRect, numRects);
			}
		}

		public readonly unsafe void ClearView(ID3D11View* pView, ref float color, Rect32* pRect, uint numRects)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* pcolor = &color)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11View*, float*, Rect32*, uint, void>)(LpVtbl[125]))(ptr, pView, (float*)pcolor, pRect, numRects);
			}
		}

		public readonly unsafe void ClearView(ref ID3D11View pView, ref float color, Rect32* pRect, uint numRects)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11View* ppView = &pView)
			{
				fixed (float* pcolor = &color)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11View*, float*, Rect32*, uint, void>)(LpVtbl[125]))(ptr, (ID3D11View*)ppView, (float*)pcolor, pRect, numRects);
				}
			}
		}

		public readonly unsafe void ClearView(ID3D11View* pView, float* color, ref Rect32 pRect, uint numRects)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppRect = &pRect)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11View*, float*, Rect32*, uint, void>)(LpVtbl[125]))(ptr, pView, color, (Rect32*)ppRect, numRects);
			}
		}

		public readonly unsafe void ClearView(ref ID3D11View pView, float* color, ref Rect32 pRect, uint numRects)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11View* ppView = &pView)
			{
				fixed (Rect32* ppRect = &pRect)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11View*, float*, Rect32*, uint, void>)(LpVtbl[125]))(ptr, (ID3D11View*)ppView, color, (Rect32*)ppRect, numRects);
				}
			}
		}

		public readonly unsafe void ClearView(ID3D11View* pView, ref float color, ref Rect32 pRect, uint numRects)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* pcolor = &color)
			{
				fixed (Rect32* ppRect = &pRect)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11View*, float*, Rect32*, uint, void>)(LpVtbl[125]))(ptr, pView, (float*)pcolor, (Rect32*)ppRect, numRects);
				}
			}
		}

		public readonly unsafe void ClearView(ref ID3D11View pView, ref float color, ref Rect32 pRect, uint numRects)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11View* ppView = &pView)
			{
				fixed (float* pcolor = &color)
				{
					fixed (Rect32* ppRect = &pRect)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11View*, float*, Rect32*, uint, void>)(LpVtbl[125]))(ptr, (ID3D11View*)ppView, (float*)pcolor, (Rect32*)ppRect, numRects);
					}
				}
			}
		}

		public readonly unsafe void DiscardView1(ID3D11View* pResourceView, Rect32* pRects, uint numRects)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11View*, Rect32*, uint, void>)(LpVtbl[126]))(ptr, pResourceView, pRects, numRects);
		}

		public readonly unsafe void DiscardView1(ref ID3D11View pResourceView, Rect32* pRects, uint numRects)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11View* ppResourceView = &pResourceView)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11View*, Rect32*, uint, void>)(LpVtbl[126]))(ptr, (ID3D11View*)ppResourceView, pRects, numRects);
			}
		}

		public readonly unsafe void DiscardView1(ID3D11View* pResourceView, ref Rect32 pRects, uint numRects)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppRects = &pRects)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11View*, Rect32*, uint, void>)(LpVtbl[126]))(ptr, pResourceView, (Rect32*)ppRects, numRects);
			}
		}

		public readonly unsafe void DiscardView1(ref ID3D11View pResourceView, ref Rect32 pRects, uint numRects)
		{
			ID3D11DeviceContext1* ptr = (ID3D11DeviceContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11View* ppResourceView = &pResourceView)
			{
				fixed (Rect32* ppRects = &pRects)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext1*, ID3D11View*, Rect32*, uint, void>)(LpVtbl[126]))(ptr, (ID3D11View*)ppResourceView, (Rect32*)ppRects, numRects);
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceContext (ID3D11DeviceContext1 value)
		{
			return Unsafe.As<ID3D11DeviceContext1, ID3D11DeviceContext>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11DeviceContext1 value)
		{
			return Unsafe.As<ID3D11DeviceContext1, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11DeviceContext1 value)
		{
			return Unsafe.As<ID3D11DeviceContext1, IUnknown>(ref value);
		}

	}

	[Guid("a7f026da-a5f8-4487-a564-15e34357651e")]
	[NativeName("ID3D11VideoContext1")]
	public partial struct ID3D11VideoContext1 : IComObject, IComObject<ID3D11VideoContext1>, IComObject<ID3D11VideoContext>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("a7f026da-a5f8-4487-a564-15e34357651e");

		public unsafe ID3D11VideoContext1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult SubmitDecoderBuffers1(ID3D11VideoDecoder* pDecoder, uint numBuffers, D3D11VideoDecoderBufferDesc1* pBufferDesc)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoDecoder*, uint, D3D11VideoDecoderBufferDesc1*, HResult>)(LpVtbl[58]))(ptr, pDecoder, numBuffers, pBufferDesc);
			return ret;
		}

		public readonly unsafe HResult SubmitDecoderBuffers1(ref ID3D11VideoDecoder pDecoder, uint numBuffers, D3D11VideoDecoderBufferDesc1* pBufferDesc)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoDecoder*, uint, D3D11VideoDecoderBufferDesc1*, HResult>)(LpVtbl[58]))(ptr, (ID3D11VideoDecoder*)ppDecoder, numBuffers, pBufferDesc);
				return ret;
			}
		}

		public readonly unsafe HResult SubmitDecoderBuffers1(ID3D11VideoDecoder* pDecoder, uint numBuffers, ref D3D11VideoDecoderBufferDesc1 pBufferDesc)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderBufferDesc1* ppBufferDesc = &pBufferDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoDecoder*, uint, D3D11VideoDecoderBufferDesc1*, HResult>)(LpVtbl[58]))(ptr, pDecoder, numBuffers, (D3D11VideoDecoderBufferDesc1*)ppBufferDesc);
				return ret;
			}
		}

		public readonly unsafe HResult SubmitDecoderBuffers1(ref ID3D11VideoDecoder pDecoder, uint numBuffers, ref D3D11VideoDecoderBufferDesc1 pBufferDesc)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (D3D11VideoDecoderBufferDesc1* ppBufferDesc = &pBufferDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoDecoder*, uint, D3D11VideoDecoderBufferDesc1*, HResult>)(LpVtbl[58]))(ptr, (ID3D11VideoDecoder*)ppDecoder, numBuffers, (D3D11VideoDecoderBufferDesc1*)ppBufferDesc);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetDataForNewHardwareKey(ID3D11CryptoSession* pCryptoSession, uint privateInputSize, void* pPrivatInputData, ulong* pPrivateOutputData)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11CryptoSession*, uint, void*, ulong*, HResult>)(LpVtbl[59]))(ptr, pCryptoSession, privateInputSize, pPrivatInputData, pPrivateOutputData);
			return ret;
		}

		public readonly unsafe HResult GetDataForNewHardwareKey(ref ID3D11CryptoSession pCryptoSession, uint privateInputSize, void* pPrivatInputData, ulong* pPrivateOutputData)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11CryptoSession*, uint, void*, ulong*, HResult>)(LpVtbl[59]))(ptr, (ID3D11CryptoSession*)ppCryptoSession, privateInputSize, pPrivatInputData, pPrivateOutputData);
				return ret;
			}
		}

		public readonly unsafe HResult GetDataForNewHardwareKey(ID3D11CryptoSession* pCryptoSession, uint privateInputSize, void* pPrivatInputData, ref ulong pPrivateOutputData)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppPrivateOutputData = &pPrivateOutputData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11CryptoSession*, uint, void*, ulong*, HResult>)(LpVtbl[59]))(ptr, pCryptoSession, privateInputSize, pPrivatInputData, (ulong*)ppPrivateOutputData);
				return ret;
			}
		}

		public readonly unsafe HResult GetDataForNewHardwareKey(ref ID3D11CryptoSession pCryptoSession, uint privateInputSize, void* pPrivatInputData, ref ulong pPrivateOutputData)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				fixed (ulong* ppPrivateOutputData = &pPrivateOutputData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11CryptoSession*, uint, void*, ulong*, HResult>)(LpVtbl[59]))(ptr, (ID3D11CryptoSession*)ppCryptoSession, privateInputSize, pPrivatInputData, (ulong*)ppPrivateOutputData);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckCryptoSessionStatus(ID3D11CryptoSession* pCryptoSession, D3D11CryptoSessionStatus* pStatus)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11CryptoSession*, D3D11CryptoSessionStatus*, HResult>)(LpVtbl[60]))(ptr, pCryptoSession, pStatus);
			return ret;
		}

		public readonly unsafe HResult CheckCryptoSessionStatus(ref ID3D11CryptoSession pCryptoSession, D3D11CryptoSessionStatus* pStatus)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11CryptoSession*, D3D11CryptoSessionStatus*, HResult>)(LpVtbl[60]))(ptr, (ID3D11CryptoSession*)ppCryptoSession, pStatus);
				return ret;
			}
		}

		public readonly unsafe HResult CheckCryptoSessionStatus(ID3D11CryptoSession* pCryptoSession, ref D3D11CryptoSessionStatus pStatus)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11CryptoSessionStatus* ppStatus = &pStatus)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11CryptoSession*, D3D11CryptoSessionStatus*, HResult>)(LpVtbl[60]))(ptr, pCryptoSession, (D3D11CryptoSessionStatus*)ppStatus);
				return ret;
			}
		}

		public readonly unsafe HResult CheckCryptoSessionStatus(ref ID3D11CryptoSession pCryptoSession, ref D3D11CryptoSessionStatus pStatus)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				fixed (D3D11CryptoSessionStatus* ppStatus = &pStatus)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11CryptoSession*, D3D11CryptoSessionStatus*, HResult>)(LpVtbl[60]))(ptr, (ID3D11CryptoSession*)ppCryptoSession, (D3D11CryptoSessionStatus*)ppStatus);
					return ret;
				}
			}
		}

		public readonly unsafe HResult DecoderEnableDownsampling(ID3D11VideoDecoder* pDecoder, DxgiColorSpaceType inputColorSpace, D3D11VideoSampleDesc* pOutputDesc, uint referenceFrameCount)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoDecoder*, DxgiColorSpaceType, D3D11VideoSampleDesc*, uint, HResult>)(LpVtbl[61]))(ptr, pDecoder, inputColorSpace, pOutputDesc, referenceFrameCount);
			return ret;
		}

		public readonly unsafe HResult DecoderEnableDownsampling(ref ID3D11VideoDecoder pDecoder, DxgiColorSpaceType inputColorSpace, D3D11VideoSampleDesc* pOutputDesc, uint referenceFrameCount)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoDecoder*, DxgiColorSpaceType, D3D11VideoSampleDesc*, uint, HResult>)(LpVtbl[61]))(ptr, (ID3D11VideoDecoder*)ppDecoder, inputColorSpace, pOutputDesc, referenceFrameCount);
				return ret;
			}
		}

		public readonly unsafe HResult DecoderEnableDownsampling(ID3D11VideoDecoder* pDecoder, DxgiColorSpaceType inputColorSpace, ref D3D11VideoSampleDesc pOutputDesc, uint referenceFrameCount)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoDecoder*, DxgiColorSpaceType, D3D11VideoSampleDesc*, uint, HResult>)(LpVtbl[61]))(ptr, pDecoder, inputColorSpace, (D3D11VideoSampleDesc*)ppOutputDesc, referenceFrameCount);
				return ret;
			}
		}

		public readonly unsafe HResult DecoderEnableDownsampling(ref ID3D11VideoDecoder pDecoder, DxgiColorSpaceType inputColorSpace, ref D3D11VideoSampleDesc pOutputDesc, uint referenceFrameCount)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoDecoder*, DxgiColorSpaceType, D3D11VideoSampleDesc*, uint, HResult>)(LpVtbl[61]))(ptr, (ID3D11VideoDecoder*)ppDecoder, inputColorSpace, (D3D11VideoSampleDesc*)ppOutputDesc, referenceFrameCount);
					return ret;
				}
			}
		}

		public readonly unsafe HResult DecoderUpdateDownsampling(ID3D11VideoDecoder* pDecoder, D3D11VideoSampleDesc* pOutputDesc)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoDecoder*, D3D11VideoSampleDesc*, HResult>)(LpVtbl[62]))(ptr, pDecoder, pOutputDesc);
			return ret;
		}

		public readonly unsafe HResult DecoderUpdateDownsampling(ref ID3D11VideoDecoder pDecoder, D3D11VideoSampleDesc* pOutputDesc)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoDecoder*, D3D11VideoSampleDesc*, HResult>)(LpVtbl[62]))(ptr, (ID3D11VideoDecoder*)ppDecoder, pOutputDesc);
				return ret;
			}
		}

		public readonly unsafe HResult DecoderUpdateDownsampling(ID3D11VideoDecoder* pDecoder, ref D3D11VideoSampleDesc pOutputDesc)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoDecoder*, D3D11VideoSampleDesc*, HResult>)(LpVtbl[62]))(ptr, pDecoder, (D3D11VideoSampleDesc*)ppOutputDesc);
				return ret;
			}
		}

		public readonly unsafe HResult DecoderUpdateDownsampling(ref ID3D11VideoDecoder pDecoder, ref D3D11VideoSampleDesc pOutputDesc)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoDecoder*, D3D11VideoSampleDesc*, HResult>)(LpVtbl[62]))(ptr, (ID3D11VideoDecoder*)ppDecoder, (D3D11VideoSampleDesc*)ppOutputDesc);
					return ret;
				}
			}
		}

		public readonly unsafe void VideoProcessorSetOutputColorSpace1(ID3D11VideoProcessor* pVideoProcessor, DxgiColorSpaceType colorSpace)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, DxgiColorSpaceType, void>)(LpVtbl[63]))(ptr, pVideoProcessor, colorSpace);
		}

		public readonly unsafe void VideoProcessorSetOutputColorSpace1(ref ID3D11VideoProcessor pVideoProcessor, DxgiColorSpaceType colorSpace)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, DxgiColorSpaceType, void>)(LpVtbl[63]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, colorSpace);
			}
		}

		public readonly unsafe void VideoProcessorSetOutputShaderUsage(ID3D11VideoProcessor* pVideoProcessor, int shaderUsage)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, int, void>)(LpVtbl[64]))(ptr, pVideoProcessor, shaderUsage);
		}

		public readonly unsafe void VideoProcessorSetOutputShaderUsage(ref ID3D11VideoProcessor pVideoProcessor, int shaderUsage)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, int, void>)(LpVtbl[64]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, shaderUsage);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputColorSpace1(ID3D11VideoProcessor* pVideoProcessor, DxgiColorSpaceType* pColorSpace)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, DxgiColorSpaceType*, void>)(LpVtbl[65]))(ptr, pVideoProcessor, pColorSpace);
		}

		public readonly unsafe void VideoProcessorGetOutputColorSpace1(ref ID3D11VideoProcessor pVideoProcessor, DxgiColorSpaceType* pColorSpace)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, DxgiColorSpaceType*, void>)(LpVtbl[65]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, pColorSpace);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputColorSpace1(ID3D11VideoProcessor* pVideoProcessor, ref DxgiColorSpaceType pColorSpace)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiColorSpaceType* ppColorSpace = &pColorSpace)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, DxgiColorSpaceType*, void>)(LpVtbl[65]))(ptr, pVideoProcessor, (DxgiColorSpaceType*)ppColorSpace);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputColorSpace1(ref ID3D11VideoProcessor pVideoProcessor, ref DxgiColorSpaceType pColorSpace)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (DxgiColorSpaceType* ppColorSpace = &pColorSpace)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, DxgiColorSpaceType*, void>)(LpVtbl[65]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, (DxgiColorSpaceType*)ppColorSpace);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetOutputShaderUsage(ID3D11VideoProcessor* pVideoProcessor, int* pShaderUsage)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, int*, void>)(LpVtbl[66]))(ptr, pVideoProcessor, pShaderUsage);
		}

		public readonly unsafe void VideoProcessorGetOutputShaderUsage(ref ID3D11VideoProcessor pVideoProcessor, int* pShaderUsage)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, int*, void>)(LpVtbl[66]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, pShaderUsage);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputShaderUsage(ID3D11VideoProcessor* pVideoProcessor, ref int pShaderUsage)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppShaderUsage = &pShaderUsage)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, int*, void>)(LpVtbl[66]))(ptr, pVideoProcessor, (int*)ppShaderUsage);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputShaderUsage(ref ID3D11VideoProcessor pVideoProcessor, ref int pShaderUsage)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppShaderUsage = &pShaderUsage)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, int*, void>)(LpVtbl[66]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, (int*)ppShaderUsage);
				}
			}
		}

		public readonly unsafe void VideoProcessorSetStreamColorSpace1(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, DxgiColorSpaceType colorSpace)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, DxgiColorSpaceType, void>)(LpVtbl[67]))(ptr, pVideoProcessor, streamIndex, colorSpace);
		}

		public readonly unsafe void VideoProcessorSetStreamColorSpace1(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, DxgiColorSpaceType colorSpace)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, DxgiColorSpaceType, void>)(LpVtbl[67]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, colorSpace);
			}
		}

		public readonly unsafe void VideoProcessorSetStreamMirror(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int enable, int flipHorizontal, int flipVertical)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, int, int, int, void>)(LpVtbl[68]))(ptr, pVideoProcessor, streamIndex, enable, flipHorizontal, flipVertical);
		}

		public readonly unsafe void VideoProcessorSetStreamMirror(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int enable, int flipHorizontal, int flipVertical)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, int, int, int, void>)(LpVtbl[68]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, enable, flipHorizontal, flipVertical);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamColorSpace1(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, DxgiColorSpaceType* pColorSpace)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, DxgiColorSpaceType*, void>)(LpVtbl[69]))(ptr, pVideoProcessor, streamIndex, pColorSpace);
		}

		public readonly unsafe void VideoProcessorGetStreamColorSpace1(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, DxgiColorSpaceType* pColorSpace)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, DxgiColorSpaceType*, void>)(LpVtbl[69]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pColorSpace);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamColorSpace1(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref DxgiColorSpaceType pColorSpace)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiColorSpaceType* ppColorSpace = &pColorSpace)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, DxgiColorSpaceType*, void>)(LpVtbl[69]))(ptr, pVideoProcessor, streamIndex, (DxgiColorSpaceType*)ppColorSpace);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamColorSpace1(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref DxgiColorSpaceType pColorSpace)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (DxgiColorSpaceType* ppColorSpace = &pColorSpace)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, DxgiColorSpaceType*, void>)(LpVtbl[69]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (DxgiColorSpaceType*)ppColorSpace);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamMirror(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, int* pFlipHorizontal, int* pFlipVertical)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, int*, int*, int*, void>)(LpVtbl[70]))(ptr, pVideoProcessor, streamIndex, pEnable, pFlipHorizontal, pFlipVertical);
		}

		public readonly unsafe void VideoProcessorGetStreamMirror(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, int* pFlipHorizontal, int* pFlipVertical)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, int*, int*, int*, void>)(LpVtbl[70]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, pFlipHorizontal, pFlipVertical);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamMirror(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, int* pFlipHorizontal, int* pFlipVertical)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, int*, int*, int*, void>)(LpVtbl[70]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, pFlipHorizontal, pFlipVertical);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamMirror(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, int* pFlipHorizontal, int* pFlipVertical)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, int*, int*, int*, void>)(LpVtbl[70]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, pFlipHorizontal, pFlipVertical);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamMirror(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, ref int pFlipHorizontal, int* pFlipVertical)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppFlipHorizontal = &pFlipHorizontal)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, int*, int*, int*, void>)(LpVtbl[70]))(ptr, pVideoProcessor, streamIndex, pEnable, (int*)ppFlipHorizontal, pFlipVertical);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamMirror(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, ref int pFlipHorizontal, int* pFlipVertical)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppFlipHorizontal = &pFlipHorizontal)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, int*, int*, int*, void>)(LpVtbl[70]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, (int*)ppFlipHorizontal, pFlipVertical);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamMirror(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, ref int pFlipHorizontal, int* pFlipVertical)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (int* ppFlipHorizontal = &pFlipHorizontal)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, int*, int*, int*, void>)(LpVtbl[70]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, (int*)ppFlipHorizontal, pFlipVertical);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamMirror(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, ref int pFlipHorizontal, int* pFlipVertical)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (int* ppFlipHorizontal = &pFlipHorizontal)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, int*, int*, int*, void>)(LpVtbl[70]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, (int*)ppFlipHorizontal, pFlipVertical);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamMirror(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, int* pFlipHorizontal, ref int pFlipVertical)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppFlipVertical = &pFlipVertical)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, int*, int*, int*, void>)(LpVtbl[70]))(ptr, pVideoProcessor, streamIndex, pEnable, pFlipHorizontal, (int*)ppFlipVertical);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamMirror(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, int* pFlipHorizontal, ref int pFlipVertical)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppFlipVertical = &pFlipVertical)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, int*, int*, int*, void>)(LpVtbl[70]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, pFlipHorizontal, (int*)ppFlipVertical);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamMirror(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, int* pFlipHorizontal, ref int pFlipVertical)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (int* ppFlipVertical = &pFlipVertical)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, int*, int*, int*, void>)(LpVtbl[70]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, pFlipHorizontal, (int*)ppFlipVertical);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamMirror(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, int* pFlipHorizontal, ref int pFlipVertical)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (int* ppFlipVertical = &pFlipVertical)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, int*, int*, int*, void>)(LpVtbl[70]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, pFlipHorizontal, (int*)ppFlipVertical);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamMirror(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, int* pEnable, ref int pFlipHorizontal, ref int pFlipVertical)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppFlipHorizontal = &pFlipHorizontal)
			{
				fixed (int* ppFlipVertical = &pFlipVertical)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, int*, int*, int*, void>)(LpVtbl[70]))(ptr, pVideoProcessor, streamIndex, pEnable, (int*)ppFlipHorizontal, (int*)ppFlipVertical);
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamMirror(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, int* pEnable, ref int pFlipHorizontal, ref int pFlipVertical)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppFlipHorizontal = &pFlipHorizontal)
				{
					fixed (int* ppFlipVertical = &pFlipVertical)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, int*, int*, int*, void>)(LpVtbl[70]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pEnable, (int*)ppFlipHorizontal, (int*)ppFlipVertical);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamMirror(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref int pEnable, ref int pFlipHorizontal, ref int pFlipVertical)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppEnable = &pEnable)
			{
				fixed (int* ppFlipHorizontal = &pFlipHorizontal)
				{
					fixed (int* ppFlipVertical = &pFlipVertical)
					{
						((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, int*, int*, int*, void>)(LpVtbl[70]))(ptr, pVideoProcessor, streamIndex, (int*)ppEnable, (int*)ppFlipHorizontal, (int*)ppFlipVertical);
					}
				}
			}
		}

		public readonly unsafe void VideoProcessorGetStreamMirror(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref int pEnable, ref int pFlipHorizontal, ref int pFlipVertical)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (int* ppEnable = &pEnable)
				{
					fixed (int* ppFlipHorizontal = &pFlipHorizontal)
					{
						fixed (int* ppFlipVertical = &pFlipVertical)
						{
							((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, int*, int*, int*, void>)(LpVtbl[70]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (int*)ppEnable, (int*)ppFlipHorizontal, (int*)ppFlipVertical);
						}
					}
				}
			}
		}

		public readonly unsafe HResult VideoProcessorGetBehaviorHints(ID3D11VideoProcessor* pVideoProcessor, uint outputWidth, uint outputHeight, DxgiFormat outputFormat, uint streamCount, D3D11VideoProcessorStreamBehaviorHint* pStreams, uint* pBehaviorHints)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, uint, DxgiFormat, uint, D3D11VideoProcessorStreamBehaviorHint*, uint*, HResult>)(LpVtbl[71]))(ptr, pVideoProcessor, outputWidth, outputHeight, outputFormat, streamCount, pStreams, pBehaviorHints);
			return ret;
		}

		public readonly unsafe HResult VideoProcessorGetBehaviorHints(ref ID3D11VideoProcessor pVideoProcessor, uint outputWidth, uint outputHeight, DxgiFormat outputFormat, uint streamCount, D3D11VideoProcessorStreamBehaviorHint* pStreams, uint* pBehaviorHints)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, uint, DxgiFormat, uint, D3D11VideoProcessorStreamBehaviorHint*, uint*, HResult>)(LpVtbl[71]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, outputWidth, outputHeight, outputFormat, streamCount, pStreams, pBehaviorHints);
				return ret;
			}
		}

		public readonly unsafe HResult VideoProcessorGetBehaviorHints(ID3D11VideoProcessor* pVideoProcessor, uint outputWidth, uint outputHeight, DxgiFormat outputFormat, uint streamCount, ref D3D11VideoProcessorStreamBehaviorHint pStreams, uint* pBehaviorHints)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStreamBehaviorHint* ppStreams = &pStreams)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, uint, DxgiFormat, uint, D3D11VideoProcessorStreamBehaviorHint*, uint*, HResult>)(LpVtbl[71]))(ptr, pVideoProcessor, outputWidth, outputHeight, outputFormat, streamCount, (D3D11VideoProcessorStreamBehaviorHint*)ppStreams, pBehaviorHints);
				return ret;
			}
		}

		public readonly unsafe HResult VideoProcessorGetBehaviorHints(ref ID3D11VideoProcessor pVideoProcessor, uint outputWidth, uint outputHeight, DxgiFormat outputFormat, uint streamCount, ref D3D11VideoProcessorStreamBehaviorHint pStreams, uint* pBehaviorHints)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStreamBehaviorHint* ppStreams = &pStreams)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, uint, DxgiFormat, uint, D3D11VideoProcessorStreamBehaviorHint*, uint*, HResult>)(LpVtbl[71]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, outputWidth, outputHeight, outputFormat, streamCount, (D3D11VideoProcessorStreamBehaviorHint*)ppStreams, pBehaviorHints);
					return ret;
				}
			}
		}

		public readonly unsafe HResult VideoProcessorGetBehaviorHints(ID3D11VideoProcessor* pVideoProcessor, uint outputWidth, uint outputHeight, DxgiFormat outputFormat, uint streamCount, D3D11VideoProcessorStreamBehaviorHint* pStreams, ref uint pBehaviorHints)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppBehaviorHints = &pBehaviorHints)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, uint, DxgiFormat, uint, D3D11VideoProcessorStreamBehaviorHint*, uint*, HResult>)(LpVtbl[71]))(ptr, pVideoProcessor, outputWidth, outputHeight, outputFormat, streamCount, pStreams, (uint*)ppBehaviorHints);
				return ret;
			}
		}

		public readonly unsafe HResult VideoProcessorGetBehaviorHints(ref ID3D11VideoProcessor pVideoProcessor, uint outputWidth, uint outputHeight, DxgiFormat outputFormat, uint streamCount, D3D11VideoProcessorStreamBehaviorHint* pStreams, ref uint pBehaviorHints)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (uint* ppBehaviorHints = &pBehaviorHints)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, uint, DxgiFormat, uint, D3D11VideoProcessorStreamBehaviorHint*, uint*, HResult>)(LpVtbl[71]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, outputWidth, outputHeight, outputFormat, streamCount, pStreams, (uint*)ppBehaviorHints);
					return ret;
				}
			}
		}

		public readonly unsafe HResult VideoProcessorGetBehaviorHints(ID3D11VideoProcessor* pVideoProcessor, uint outputWidth, uint outputHeight, DxgiFormat outputFormat, uint streamCount, ref D3D11VideoProcessorStreamBehaviorHint pStreams, ref uint pBehaviorHints)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorStreamBehaviorHint* ppStreams = &pStreams)
			{
				fixed (uint* ppBehaviorHints = &pBehaviorHints)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, uint, DxgiFormat, uint, D3D11VideoProcessorStreamBehaviorHint*, uint*, HResult>)(LpVtbl[71]))(ptr, pVideoProcessor, outputWidth, outputHeight, outputFormat, streamCount, (D3D11VideoProcessorStreamBehaviorHint*)ppStreams, (uint*)ppBehaviorHints);
					return ret;
				}
			}
		}

		public readonly unsafe HResult VideoProcessorGetBehaviorHints(ref ID3D11VideoProcessor pVideoProcessor, uint outputWidth, uint outputHeight, DxgiFormat outputFormat, uint streamCount, ref D3D11VideoProcessorStreamBehaviorHint pStreams, ref uint pBehaviorHints)
		{
			ID3D11VideoContext1* ptr = (ID3D11VideoContext1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D11VideoProcessorStreamBehaviorHint* ppStreams = &pStreams)
				{
					fixed (uint* ppBehaviorHints = &pBehaviorHints)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext1*, ID3D11VideoProcessor*, uint, uint, DxgiFormat, uint, D3D11VideoProcessorStreamBehaviorHint*, uint*, HResult>)(LpVtbl[71]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, outputWidth, outputHeight, outputFormat, streamCount, (D3D11VideoProcessorStreamBehaviorHint*)ppStreams, (uint*)ppBehaviorHints);
						return ret;
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11VideoContext (ID3D11VideoContext1 value)
		{
			return Unsafe.As<ID3D11VideoContext1, ID3D11VideoContext>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11VideoContext1 value)
		{
			return Unsafe.As<ID3D11VideoContext1, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11VideoContext1 value)
		{
			return Unsafe.As<ID3D11VideoContext1, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_VIDEO_DECODER_BUFFER_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoDecoderBufferDesc1
	{
		[NativeName("BufferType")]
		public D3D11VideoDecoderBufferType BufferType;
		[NativeName("DataOffset")]
		public uint DataOffset;
		[NativeName("DataSize")]
		public uint DataSize;
		[NativeName("pIV")]
		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		public unsafe void* PIV;

		[NativeName("IVSize")]
		public uint IVSize;
		[NativeName("pSubSampleMappingBlock")]
		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		public unsafe D3D11VideoDecoderSubSampleMappingBlock* PSubSampleMappingBlock;

		[NativeName("SubSampleMappingCount")]
		public uint SubSampleMappingCount;


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_1_0000_0004 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoDecoderSubSampleMappingBlock
	{
		[NativeName("ClearSize")]
		public uint ClearSize;
		[NativeName("EncryptedSize")]
		public uint EncryptedSize;


	}

	[NativeName("D3D11_VIDEO_SAMPLE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoSampleDesc
	{
		[NativeName("Width")]
		public uint Width;
		[NativeName("Height")]
		public uint Height;
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("ColorSpace")]
		public DxgiColorSpaceType ColorSpace;


	}

	[NativeName("D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoProcessorStreamBehaviorHint
	{
		[NativeName("Enable")]
		public int Enable;
		[NativeName("Width")]
		public uint Width;
		[NativeName("Height")]
		public uint Height;
		[NativeName("Format")]
		public DxgiFormat Format;


	}

	[Guid("29da1d51-1321-4454-804b-f5fc9f861f0f")]
	[NativeName("ID3D11VideoDevice1")]
	public partial struct ID3D11VideoDevice1 : IComObject, IComObject<ID3D11VideoDevice1>, IComObject<ID3D11VideoDevice>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("29da1d51-1321-4454-804b-f5fc9f861f0f");

		public unsafe ID3D11VideoDevice1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(Guid* pCryptoType, Guid* pDecoderProfile, Guid* pKeyExchangeType, uint* pPrivateInputSize, uint* pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, pCryptoType, pDecoderProfile, pKeyExchangeType, pPrivateInputSize, pPrivateOutputSize);
			return ret;
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(ref Guid pCryptoType, Guid* pDecoderProfile, Guid* pKeyExchangeType, uint* pPrivateInputSize, uint* pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, pKeyExchangeType, pPrivateInputSize, pPrivateOutputSize);
				return ret;
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(Guid* pCryptoType, ref Guid pDecoderProfile, Guid* pKeyExchangeType, uint* pPrivateInputSize, uint* pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, pKeyExchangeType, pPrivateInputSize, pPrivateOutputSize);
				return ret;
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(ref Guid pCryptoType, ref Guid pDecoderProfile, Guid* pKeyExchangeType, uint* pPrivateInputSize, uint* pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, pKeyExchangeType, pPrivateInputSize, pPrivateOutputSize);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(Guid* pCryptoType, Guid* pDecoderProfile, ref Guid pKeyExchangeType, uint* pPrivateInputSize, uint* pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, pCryptoType, pDecoderProfile, (Guid*)ppKeyExchangeType, pPrivateInputSize, pPrivateOutputSize);
				return ret;
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(ref Guid pCryptoType, Guid* pDecoderProfile, ref Guid pKeyExchangeType, uint* pPrivateInputSize, uint* pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, (Guid*)ppKeyExchangeType, pPrivateInputSize, pPrivateOutputSize);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(Guid* pCryptoType, ref Guid pDecoderProfile, ref Guid pKeyExchangeType, uint* pPrivateInputSize, uint* pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, pPrivateInputSize, pPrivateOutputSize);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(ref Guid pCryptoType, ref Guid pDecoderProfile, ref Guid pKeyExchangeType, uint* pPrivateInputSize, uint* pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, pPrivateInputSize, pPrivateOutputSize);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(Guid* pCryptoType, Guid* pDecoderProfile, Guid* pKeyExchangeType, ref uint pPrivateInputSize, uint* pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppPrivateInputSize = &pPrivateInputSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, pCryptoType, pDecoderProfile, pKeyExchangeType, (uint*)ppPrivateInputSize, pPrivateOutputSize);
				return ret;
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(ref Guid pCryptoType, Guid* pDecoderProfile, Guid* pKeyExchangeType, ref uint pPrivateInputSize, uint* pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (uint* ppPrivateInputSize = &pPrivateInputSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, pKeyExchangeType, (uint*)ppPrivateInputSize, pPrivateOutputSize);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(Guid* pCryptoType, ref Guid pDecoderProfile, Guid* pKeyExchangeType, ref uint pPrivateInputSize, uint* pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (uint* ppPrivateInputSize = &pPrivateInputSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, pKeyExchangeType, (uint*)ppPrivateInputSize, pPrivateOutputSize);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(ref Guid pCryptoType, ref Guid pDecoderProfile, Guid* pKeyExchangeType, ref uint pPrivateInputSize, uint* pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (uint* ppPrivateInputSize = &pPrivateInputSize)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, pKeyExchangeType, (uint*)ppPrivateInputSize, pPrivateOutputSize);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(Guid* pCryptoType, Guid* pDecoderProfile, ref Guid pKeyExchangeType, ref uint pPrivateInputSize, uint* pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
			{
				fixed (uint* ppPrivateInputSize = &pPrivateInputSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, pCryptoType, pDecoderProfile, (Guid*)ppKeyExchangeType, (uint*)ppPrivateInputSize, pPrivateOutputSize);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(ref Guid pCryptoType, Guid* pDecoderProfile, ref Guid pKeyExchangeType, ref uint pPrivateInputSize, uint* pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					fixed (uint* ppPrivateInputSize = &pPrivateInputSize)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, (Guid*)ppKeyExchangeType, (uint*)ppPrivateInputSize, pPrivateOutputSize);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(Guid* pCryptoType, ref Guid pDecoderProfile, ref Guid pKeyExchangeType, ref uint pPrivateInputSize, uint* pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					fixed (uint* ppPrivateInputSize = &pPrivateInputSize)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, (uint*)ppPrivateInputSize, pPrivateOutputSize);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(ref Guid pCryptoType, ref Guid pDecoderProfile, ref Guid pKeyExchangeType, ref uint pPrivateInputSize, uint* pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
					{
						fixed (uint* ppPrivateInputSize = &pPrivateInputSize)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, (uint*)ppPrivateInputSize, pPrivateOutputSize);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(Guid* pCryptoType, Guid* pDecoderProfile, Guid* pKeyExchangeType, uint* pPrivateInputSize, ref uint pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppPrivateOutputSize = &pPrivateOutputSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, pCryptoType, pDecoderProfile, pKeyExchangeType, pPrivateInputSize, (uint*)ppPrivateOutputSize);
				return ret;
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(ref Guid pCryptoType, Guid* pDecoderProfile, Guid* pKeyExchangeType, uint* pPrivateInputSize, ref uint pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (uint* ppPrivateOutputSize = &pPrivateOutputSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, pKeyExchangeType, pPrivateInputSize, (uint*)ppPrivateOutputSize);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(Guid* pCryptoType, ref Guid pDecoderProfile, Guid* pKeyExchangeType, uint* pPrivateInputSize, ref uint pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (uint* ppPrivateOutputSize = &pPrivateOutputSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, pKeyExchangeType, pPrivateInputSize, (uint*)ppPrivateOutputSize);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(ref Guid pCryptoType, ref Guid pDecoderProfile, Guid* pKeyExchangeType, uint* pPrivateInputSize, ref uint pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (uint* ppPrivateOutputSize = &pPrivateOutputSize)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, pKeyExchangeType, pPrivateInputSize, (uint*)ppPrivateOutputSize);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(Guid* pCryptoType, Guid* pDecoderProfile, ref Guid pKeyExchangeType, uint* pPrivateInputSize, ref uint pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
			{
				fixed (uint* ppPrivateOutputSize = &pPrivateOutputSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, pCryptoType, pDecoderProfile, (Guid*)ppKeyExchangeType, pPrivateInputSize, (uint*)ppPrivateOutputSize);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(ref Guid pCryptoType, Guid* pDecoderProfile, ref Guid pKeyExchangeType, uint* pPrivateInputSize, ref uint pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					fixed (uint* ppPrivateOutputSize = &pPrivateOutputSize)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, (Guid*)ppKeyExchangeType, pPrivateInputSize, (uint*)ppPrivateOutputSize);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(Guid* pCryptoType, ref Guid pDecoderProfile, ref Guid pKeyExchangeType, uint* pPrivateInputSize, ref uint pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					fixed (uint* ppPrivateOutputSize = &pPrivateOutputSize)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, pPrivateInputSize, (uint*)ppPrivateOutputSize);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(ref Guid pCryptoType, ref Guid pDecoderProfile, ref Guid pKeyExchangeType, uint* pPrivateInputSize, ref uint pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
					{
						fixed (uint* ppPrivateOutputSize = &pPrivateOutputSize)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, pPrivateInputSize, (uint*)ppPrivateOutputSize);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(Guid* pCryptoType, Guid* pDecoderProfile, Guid* pKeyExchangeType, ref uint pPrivateInputSize, ref uint pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppPrivateInputSize = &pPrivateInputSize)
			{
				fixed (uint* ppPrivateOutputSize = &pPrivateOutputSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, pCryptoType, pDecoderProfile, pKeyExchangeType, (uint*)ppPrivateInputSize, (uint*)ppPrivateOutputSize);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(ref Guid pCryptoType, Guid* pDecoderProfile, Guid* pKeyExchangeType, ref uint pPrivateInputSize, ref uint pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (uint* ppPrivateInputSize = &pPrivateInputSize)
				{
					fixed (uint* ppPrivateOutputSize = &pPrivateOutputSize)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, pKeyExchangeType, (uint*)ppPrivateInputSize, (uint*)ppPrivateOutputSize);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(Guid* pCryptoType, ref Guid pDecoderProfile, Guid* pKeyExchangeType, ref uint pPrivateInputSize, ref uint pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (uint* ppPrivateInputSize = &pPrivateInputSize)
				{
					fixed (uint* ppPrivateOutputSize = &pPrivateOutputSize)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, pKeyExchangeType, (uint*)ppPrivateInputSize, (uint*)ppPrivateOutputSize);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(ref Guid pCryptoType, ref Guid pDecoderProfile, Guid* pKeyExchangeType, ref uint pPrivateInputSize, ref uint pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (uint* ppPrivateInputSize = &pPrivateInputSize)
					{
						fixed (uint* ppPrivateOutputSize = &pPrivateOutputSize)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, pKeyExchangeType, (uint*)ppPrivateInputSize, (uint*)ppPrivateOutputSize);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(Guid* pCryptoType, Guid* pDecoderProfile, ref Guid pKeyExchangeType, ref uint pPrivateInputSize, ref uint pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
			{
				fixed (uint* ppPrivateInputSize = &pPrivateInputSize)
				{
					fixed (uint* ppPrivateOutputSize = &pPrivateOutputSize)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, pCryptoType, pDecoderProfile, (Guid*)ppKeyExchangeType, (uint*)ppPrivateInputSize, (uint*)ppPrivateOutputSize);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(ref Guid pCryptoType, Guid* pDecoderProfile, ref Guid pKeyExchangeType, ref uint pPrivateInputSize, ref uint pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					fixed (uint* ppPrivateInputSize = &pPrivateInputSize)
					{
						fixed (uint* ppPrivateOutputSize = &pPrivateOutputSize)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, (Guid*)ppKeyExchangeType, (uint*)ppPrivateInputSize, (uint*)ppPrivateOutputSize);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(Guid* pCryptoType, ref Guid pDecoderProfile, ref Guid pKeyExchangeType, ref uint pPrivateInputSize, ref uint pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					fixed (uint* ppPrivateInputSize = &pPrivateInputSize)
					{
						fixed (uint* ppPrivateOutputSize = &pPrivateOutputSize)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, (uint*)ppPrivateInputSize, (uint*)ppPrivateOutputSize);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult GetCryptoSessionPrivateDataSize(ref Guid pCryptoType, ref Guid pDecoderProfile, ref Guid pKeyExchangeType, ref uint pPrivateInputSize, ref uint pPrivateOutputSize)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
					{
						fixed (uint* ppPrivateInputSize = &pPrivateInputSize)
						{
							fixed (uint* ppPrivateOutputSize = &pPrivateOutputSize)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, Guid*, Guid*, uint*, uint*, HResult>)(LpVtbl[17]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, (uint*)ppPrivateInputSize, (uint*)ppPrivateOutputSize);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult GetVideoDecoderCaps(Guid* pDecoderProfile, uint sampleWidth, uint sampleHeight, DxgiRational* pFrameRate, uint bitRate, Guid* pCryptoType, uint* pDecoderCaps)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, uint, uint, DxgiRational*, uint, Guid*, uint*, HResult>)(LpVtbl[18]))(ptr, pDecoderProfile, sampleWidth, sampleHeight, pFrameRate, bitRate, pCryptoType, pDecoderCaps);
			return ret;
		}

		public readonly unsafe HResult GetVideoDecoderCaps(ref Guid pDecoderProfile, uint sampleWidth, uint sampleHeight, DxgiRational* pFrameRate, uint bitRate, Guid* pCryptoType, uint* pDecoderCaps)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, uint, uint, DxgiRational*, uint, Guid*, uint*, HResult>)(LpVtbl[18]))(ptr, (Guid*)ppDecoderProfile, sampleWidth, sampleHeight, pFrameRate, bitRate, pCryptoType, pDecoderCaps);
				return ret;
			}
		}

		public readonly unsafe HResult GetVideoDecoderCaps(Guid* pDecoderProfile, uint sampleWidth, uint sampleHeight, ref DxgiRational pFrameRate, uint bitRate, Guid* pCryptoType, uint* pDecoderCaps)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppFrameRate = &pFrameRate)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, uint, uint, DxgiRational*, uint, Guid*, uint*, HResult>)(LpVtbl[18]))(ptr, pDecoderProfile, sampleWidth, sampleHeight, (DxgiRational*)ppFrameRate, bitRate, pCryptoType, pDecoderCaps);
				return ret;
			}
		}

		public readonly unsafe HResult GetVideoDecoderCaps(ref Guid pDecoderProfile, uint sampleWidth, uint sampleHeight, ref DxgiRational pFrameRate, uint bitRate, Guid* pCryptoType, uint* pDecoderCaps)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, uint, uint, DxgiRational*, uint, Guid*, uint*, HResult>)(LpVtbl[18]))(ptr, (Guid*)ppDecoderProfile, sampleWidth, sampleHeight, (DxgiRational*)ppFrameRate, bitRate, pCryptoType, pDecoderCaps);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetVideoDecoderCaps(Guid* pDecoderProfile, uint sampleWidth, uint sampleHeight, DxgiRational* pFrameRate, uint bitRate, ref Guid pCryptoType, uint* pDecoderCaps)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, uint, uint, DxgiRational*, uint, Guid*, uint*, HResult>)(LpVtbl[18]))(ptr, pDecoderProfile, sampleWidth, sampleHeight, pFrameRate, bitRate, (Guid*)ppCryptoType, pDecoderCaps);
				return ret;
			}
		}

		public readonly unsafe HResult GetVideoDecoderCaps(ref Guid pDecoderProfile, uint sampleWidth, uint sampleHeight, DxgiRational* pFrameRate, uint bitRate, ref Guid pCryptoType, uint* pDecoderCaps)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (Guid* ppCryptoType = &pCryptoType)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, uint, uint, DxgiRational*, uint, Guid*, uint*, HResult>)(LpVtbl[18]))(ptr, (Guid*)ppDecoderProfile, sampleWidth, sampleHeight, pFrameRate, bitRate, (Guid*)ppCryptoType, pDecoderCaps);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetVideoDecoderCaps(Guid* pDecoderProfile, uint sampleWidth, uint sampleHeight, ref DxgiRational pFrameRate, uint bitRate, ref Guid pCryptoType, uint* pDecoderCaps)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppFrameRate = &pFrameRate)
			{
				fixed (Guid* ppCryptoType = &pCryptoType)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, uint, uint, DxgiRational*, uint, Guid*, uint*, HResult>)(LpVtbl[18]))(ptr, pDecoderProfile, sampleWidth, sampleHeight, (DxgiRational*)ppFrameRate, bitRate, (Guid*)ppCryptoType, pDecoderCaps);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetVideoDecoderCaps(ref Guid pDecoderProfile, uint sampleWidth, uint sampleHeight, ref DxgiRational pFrameRate, uint bitRate, ref Guid pCryptoType, uint* pDecoderCaps)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					fixed (Guid* ppCryptoType = &pCryptoType)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, uint, uint, DxgiRational*, uint, Guid*, uint*, HResult>)(LpVtbl[18]))(ptr, (Guid*)ppDecoderProfile, sampleWidth, sampleHeight, (DxgiRational*)ppFrameRate, bitRate, (Guid*)ppCryptoType, pDecoderCaps);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult GetVideoDecoderCaps(Guid* pDecoderProfile, uint sampleWidth, uint sampleHeight, DxgiRational* pFrameRate, uint bitRate, Guid* pCryptoType, ref uint pDecoderCaps)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDecoderCaps = &pDecoderCaps)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, uint, uint, DxgiRational*, uint, Guid*, uint*, HResult>)(LpVtbl[18]))(ptr, pDecoderProfile, sampleWidth, sampleHeight, pFrameRate, bitRate, pCryptoType, (uint*)ppDecoderCaps);
				return ret;
			}
		}

		public readonly unsafe HResult GetVideoDecoderCaps(ref Guid pDecoderProfile, uint sampleWidth, uint sampleHeight, DxgiRational* pFrameRate, uint bitRate, Guid* pCryptoType, ref uint pDecoderCaps)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (uint* ppDecoderCaps = &pDecoderCaps)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, uint, uint, DxgiRational*, uint, Guid*, uint*, HResult>)(LpVtbl[18]))(ptr, (Guid*)ppDecoderProfile, sampleWidth, sampleHeight, pFrameRate, bitRate, pCryptoType, (uint*)ppDecoderCaps);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetVideoDecoderCaps(Guid* pDecoderProfile, uint sampleWidth, uint sampleHeight, ref DxgiRational pFrameRate, uint bitRate, Guid* pCryptoType, ref uint pDecoderCaps)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppFrameRate = &pFrameRate)
			{
				fixed (uint* ppDecoderCaps = &pDecoderCaps)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, uint, uint, DxgiRational*, uint, Guid*, uint*, HResult>)(LpVtbl[18]))(ptr, pDecoderProfile, sampleWidth, sampleHeight, (DxgiRational*)ppFrameRate, bitRate, pCryptoType, (uint*)ppDecoderCaps);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetVideoDecoderCaps(ref Guid pDecoderProfile, uint sampleWidth, uint sampleHeight, ref DxgiRational pFrameRate, uint bitRate, Guid* pCryptoType, ref uint pDecoderCaps)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					fixed (uint* ppDecoderCaps = &pDecoderCaps)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, uint, uint, DxgiRational*, uint, Guid*, uint*, HResult>)(LpVtbl[18]))(ptr, (Guid*)ppDecoderProfile, sampleWidth, sampleHeight, (DxgiRational*)ppFrameRate, bitRate, pCryptoType, (uint*)ppDecoderCaps);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult GetVideoDecoderCaps(Guid* pDecoderProfile, uint sampleWidth, uint sampleHeight, DxgiRational* pFrameRate, uint bitRate, ref Guid pCryptoType, ref uint pDecoderCaps)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (uint* ppDecoderCaps = &pDecoderCaps)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, uint, uint, DxgiRational*, uint, Guid*, uint*, HResult>)(LpVtbl[18]))(ptr, pDecoderProfile, sampleWidth, sampleHeight, pFrameRate, bitRate, (Guid*)ppCryptoType, (uint*)ppDecoderCaps);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetVideoDecoderCaps(ref Guid pDecoderProfile, uint sampleWidth, uint sampleHeight, DxgiRational* pFrameRate, uint bitRate, ref Guid pCryptoType, ref uint pDecoderCaps)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (Guid* ppCryptoType = &pCryptoType)
				{
					fixed (uint* ppDecoderCaps = &pDecoderCaps)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, uint, uint, DxgiRational*, uint, Guid*, uint*, HResult>)(LpVtbl[18]))(ptr, (Guid*)ppDecoderProfile, sampleWidth, sampleHeight, pFrameRate, bitRate, (Guid*)ppCryptoType, (uint*)ppDecoderCaps);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult GetVideoDecoderCaps(Guid* pDecoderProfile, uint sampleWidth, uint sampleHeight, ref DxgiRational pFrameRate, uint bitRate, ref Guid pCryptoType, ref uint pDecoderCaps)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppFrameRate = &pFrameRate)
			{
				fixed (Guid* ppCryptoType = &pCryptoType)
				{
					fixed (uint* ppDecoderCaps = &pDecoderCaps)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, uint, uint, DxgiRational*, uint, Guid*, uint*, HResult>)(LpVtbl[18]))(ptr, pDecoderProfile, sampleWidth, sampleHeight, (DxgiRational*)ppFrameRate, bitRate, (Guid*)ppCryptoType, (uint*)ppDecoderCaps);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult GetVideoDecoderCaps(ref Guid pDecoderProfile, uint sampleWidth, uint sampleHeight, ref DxgiRational pFrameRate, uint bitRate, ref Guid pCryptoType, ref uint pDecoderCaps)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					fixed (Guid* ppCryptoType = &pCryptoType)
					{
						fixed (uint* ppDecoderCaps = &pDecoderCaps)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, Guid*, uint, uint, DxgiRational*, uint, Guid*, uint*, HResult>)(LpVtbl[18]))(ptr, (Guid*)ppDecoderProfile, sampleWidth, sampleHeight, (DxgiRational*)ppFrameRate, bitRate, (Guid*)ppCryptoType, (uint*)ppDecoderCaps);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, DxgiRational* pFrameRate, D3D11VideoSampleDesc* pOutputDesc, int* pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, pInputConfig, pFrameRate, pOutputDesc, pSupported, pRealTimeHint);
			return ret;
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, DxgiRational* pFrameRate, D3D11VideoSampleDesc* pOutputDesc, int* pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, pInputConfig, pFrameRate, pOutputDesc, pSupported, pRealTimeHint);
				return ret;
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, DxgiRational* pFrameRate, D3D11VideoSampleDesc* pOutputDesc, int* pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, pFrameRate, pOutputDesc, pSupported, pRealTimeHint);
				return ret;
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, DxgiRational* pFrameRate, D3D11VideoSampleDesc* pOutputDesc, int* pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, pFrameRate, pOutputDesc, pSupported, pRealTimeHint);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, ref DxgiRational pFrameRate, D3D11VideoSampleDesc* pOutputDesc, int* pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppFrameRate = &pFrameRate)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, pInputConfig, (DxgiRational*)ppFrameRate, pOutputDesc, pSupported, pRealTimeHint);
				return ret;
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, ref DxgiRational pFrameRate, D3D11VideoSampleDesc* pOutputDesc, int* pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, pInputConfig, (DxgiRational*)ppFrameRate, pOutputDesc, pSupported, pRealTimeHint);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, ref DxgiRational pFrameRate, D3D11VideoSampleDesc* pOutputDesc, int* pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, (DxgiRational*)ppFrameRate, pOutputDesc, pSupported, pRealTimeHint);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, ref DxgiRational pFrameRate, D3D11VideoSampleDesc* pOutputDesc, int* pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
				{
					fixed (DxgiRational* ppFrameRate = &pFrameRate)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, (DxgiRational*)ppFrameRate, pOutputDesc, pSupported, pRealTimeHint);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, DxgiRational* pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, int* pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, pInputConfig, pFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, pSupported, pRealTimeHint);
				return ret;
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, DxgiRational* pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, int* pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, pInputConfig, pFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, pSupported, pRealTimeHint);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, DxgiRational* pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, int* pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
			{
				fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, pFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, pSupported, pRealTimeHint);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, DxgiRational* pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, int* pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
				{
					fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, pFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, pSupported, pRealTimeHint);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, ref DxgiRational pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, int* pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppFrameRate = &pFrameRate)
			{
				fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, pInputConfig, (DxgiRational*)ppFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, pSupported, pRealTimeHint);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, ref DxgiRational pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, int* pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, pInputConfig, (DxgiRational*)ppFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, pSupported, pRealTimeHint);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, ref DxgiRational pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, int* pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, (DxgiRational*)ppFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, pSupported, pRealTimeHint);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, ref DxgiRational pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, int* pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
				{
					fixed (DxgiRational* ppFrameRate = &pFrameRate)
					{
						fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, (DxgiRational*)ppFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, pSupported, pRealTimeHint);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, DxgiRational* pFrameRate, D3D11VideoSampleDesc* pOutputDesc, ref int pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppSupported = &pSupported)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, pInputConfig, pFrameRate, pOutputDesc, (int*)ppSupported, pRealTimeHint);
				return ret;
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, DxgiRational* pFrameRate, D3D11VideoSampleDesc* pOutputDesc, ref int pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (int* ppSupported = &pSupported)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, pInputConfig, pFrameRate, pOutputDesc, (int*)ppSupported, pRealTimeHint);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, DxgiRational* pFrameRate, D3D11VideoSampleDesc* pOutputDesc, ref int pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
			{
				fixed (int* ppSupported = &pSupported)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, pFrameRate, pOutputDesc, (int*)ppSupported, pRealTimeHint);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, DxgiRational* pFrameRate, D3D11VideoSampleDesc* pOutputDesc, ref int pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
				{
					fixed (int* ppSupported = &pSupported)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, pFrameRate, pOutputDesc, (int*)ppSupported, pRealTimeHint);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, ref DxgiRational pFrameRate, D3D11VideoSampleDesc* pOutputDesc, ref int pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppFrameRate = &pFrameRate)
			{
				fixed (int* ppSupported = &pSupported)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, pInputConfig, (DxgiRational*)ppFrameRate, pOutputDesc, (int*)ppSupported, pRealTimeHint);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, ref DxgiRational pFrameRate, D3D11VideoSampleDesc* pOutputDesc, ref int pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					fixed (int* ppSupported = &pSupported)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, pInputConfig, (DxgiRational*)ppFrameRate, pOutputDesc, (int*)ppSupported, pRealTimeHint);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, ref DxgiRational pFrameRate, D3D11VideoSampleDesc* pOutputDesc, ref int pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					fixed (int* ppSupported = &pSupported)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, (DxgiRational*)ppFrameRate, pOutputDesc, (int*)ppSupported, pRealTimeHint);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, ref DxgiRational pFrameRate, D3D11VideoSampleDesc* pOutputDesc, ref int pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
				{
					fixed (DxgiRational* ppFrameRate = &pFrameRate)
					{
						fixed (int* ppSupported = &pSupported)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, (DxgiRational*)ppFrameRate, pOutputDesc, (int*)ppSupported, pRealTimeHint);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, DxgiRational* pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, ref int pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
			{
				fixed (int* ppSupported = &pSupported)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, pInputConfig, pFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, (int*)ppSupported, pRealTimeHint);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, DxgiRational* pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, ref int pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
				{
					fixed (int* ppSupported = &pSupported)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, pInputConfig, pFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, (int*)ppSupported, pRealTimeHint);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, DxgiRational* pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, ref int pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
			{
				fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
				{
					fixed (int* ppSupported = &pSupported)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, pFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, (int*)ppSupported, pRealTimeHint);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, DxgiRational* pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, ref int pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
				{
					fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
					{
						fixed (int* ppSupported = &pSupported)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, pFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, (int*)ppSupported, pRealTimeHint);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, ref DxgiRational pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, ref int pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppFrameRate = &pFrameRate)
			{
				fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
				{
					fixed (int* ppSupported = &pSupported)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, pInputConfig, (DxgiRational*)ppFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, (int*)ppSupported, pRealTimeHint);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, ref DxgiRational pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, ref int pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
					{
						fixed (int* ppSupported = &pSupported)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, pInputConfig, (DxgiRational*)ppFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, (int*)ppSupported, pRealTimeHint);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, ref DxgiRational pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, ref int pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
					{
						fixed (int* ppSupported = &pSupported)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, (DxgiRational*)ppFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, (int*)ppSupported, pRealTimeHint);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, ref DxgiRational pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, ref int pSupported, int* pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
				{
					fixed (DxgiRational* ppFrameRate = &pFrameRate)
					{
						fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
						{
							fixed (int* ppSupported = &pSupported)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, (DxgiRational*)ppFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, (int*)ppSupported, pRealTimeHint);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, DxgiRational* pFrameRate, D3D11VideoSampleDesc* pOutputDesc, int* pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppRealTimeHint = &pRealTimeHint)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, pInputConfig, pFrameRate, pOutputDesc, pSupported, (int*)ppRealTimeHint);
				return ret;
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, DxgiRational* pFrameRate, D3D11VideoSampleDesc* pOutputDesc, int* pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (int* ppRealTimeHint = &pRealTimeHint)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, pInputConfig, pFrameRate, pOutputDesc, pSupported, (int*)ppRealTimeHint);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, DxgiRational* pFrameRate, D3D11VideoSampleDesc* pOutputDesc, int* pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
			{
				fixed (int* ppRealTimeHint = &pRealTimeHint)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, pFrameRate, pOutputDesc, pSupported, (int*)ppRealTimeHint);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, DxgiRational* pFrameRate, D3D11VideoSampleDesc* pOutputDesc, int* pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
				{
					fixed (int* ppRealTimeHint = &pRealTimeHint)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, pFrameRate, pOutputDesc, pSupported, (int*)ppRealTimeHint);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, ref DxgiRational pFrameRate, D3D11VideoSampleDesc* pOutputDesc, int* pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppFrameRate = &pFrameRate)
			{
				fixed (int* ppRealTimeHint = &pRealTimeHint)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, pInputConfig, (DxgiRational*)ppFrameRate, pOutputDesc, pSupported, (int*)ppRealTimeHint);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, ref DxgiRational pFrameRate, D3D11VideoSampleDesc* pOutputDesc, int* pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					fixed (int* ppRealTimeHint = &pRealTimeHint)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, pInputConfig, (DxgiRational*)ppFrameRate, pOutputDesc, pSupported, (int*)ppRealTimeHint);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, ref DxgiRational pFrameRate, D3D11VideoSampleDesc* pOutputDesc, int* pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					fixed (int* ppRealTimeHint = &pRealTimeHint)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, (DxgiRational*)ppFrameRate, pOutputDesc, pSupported, (int*)ppRealTimeHint);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, ref DxgiRational pFrameRate, D3D11VideoSampleDesc* pOutputDesc, int* pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
				{
					fixed (DxgiRational* ppFrameRate = &pFrameRate)
					{
						fixed (int* ppRealTimeHint = &pRealTimeHint)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, (DxgiRational*)ppFrameRate, pOutputDesc, pSupported, (int*)ppRealTimeHint);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, DxgiRational* pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, int* pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
			{
				fixed (int* ppRealTimeHint = &pRealTimeHint)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, pInputConfig, pFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, pSupported, (int*)ppRealTimeHint);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, DxgiRational* pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, int* pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
				{
					fixed (int* ppRealTimeHint = &pRealTimeHint)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, pInputConfig, pFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, pSupported, (int*)ppRealTimeHint);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, DxgiRational* pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, int* pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
			{
				fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
				{
					fixed (int* ppRealTimeHint = &pRealTimeHint)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, pFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, pSupported, (int*)ppRealTimeHint);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, DxgiRational* pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, int* pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
				{
					fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
					{
						fixed (int* ppRealTimeHint = &pRealTimeHint)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, pFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, pSupported, (int*)ppRealTimeHint);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, ref DxgiRational pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, int* pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppFrameRate = &pFrameRate)
			{
				fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
				{
					fixed (int* ppRealTimeHint = &pRealTimeHint)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, pInputConfig, (DxgiRational*)ppFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, pSupported, (int*)ppRealTimeHint);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, ref DxgiRational pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, int* pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
					{
						fixed (int* ppRealTimeHint = &pRealTimeHint)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, pInputConfig, (DxgiRational*)ppFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, pSupported, (int*)ppRealTimeHint);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, ref DxgiRational pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, int* pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
					{
						fixed (int* ppRealTimeHint = &pRealTimeHint)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, (DxgiRational*)ppFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, pSupported, (int*)ppRealTimeHint);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, ref DxgiRational pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, int* pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
				{
					fixed (DxgiRational* ppFrameRate = &pFrameRate)
					{
						fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
						{
							fixed (int* ppRealTimeHint = &pRealTimeHint)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, (DxgiRational*)ppFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, pSupported, (int*)ppRealTimeHint);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, DxgiRational* pFrameRate, D3D11VideoSampleDesc* pOutputDesc, ref int pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppSupported = &pSupported)
			{
				fixed (int* ppRealTimeHint = &pRealTimeHint)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, pInputConfig, pFrameRate, pOutputDesc, (int*)ppSupported, (int*)ppRealTimeHint);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, DxgiRational* pFrameRate, D3D11VideoSampleDesc* pOutputDesc, ref int pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (int* ppSupported = &pSupported)
				{
					fixed (int* ppRealTimeHint = &pRealTimeHint)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, pInputConfig, pFrameRate, pOutputDesc, (int*)ppSupported, (int*)ppRealTimeHint);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, DxgiRational* pFrameRate, D3D11VideoSampleDesc* pOutputDesc, ref int pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
			{
				fixed (int* ppSupported = &pSupported)
				{
					fixed (int* ppRealTimeHint = &pRealTimeHint)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, pFrameRate, pOutputDesc, (int*)ppSupported, (int*)ppRealTimeHint);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, DxgiRational* pFrameRate, D3D11VideoSampleDesc* pOutputDesc, ref int pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
				{
					fixed (int* ppSupported = &pSupported)
					{
						fixed (int* ppRealTimeHint = &pRealTimeHint)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, pFrameRate, pOutputDesc, (int*)ppSupported, (int*)ppRealTimeHint);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, ref DxgiRational pFrameRate, D3D11VideoSampleDesc* pOutputDesc, ref int pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppFrameRate = &pFrameRate)
			{
				fixed (int* ppSupported = &pSupported)
				{
					fixed (int* ppRealTimeHint = &pRealTimeHint)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, pInputConfig, (DxgiRational*)ppFrameRate, pOutputDesc, (int*)ppSupported, (int*)ppRealTimeHint);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, ref DxgiRational pFrameRate, D3D11VideoSampleDesc* pOutputDesc, ref int pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					fixed (int* ppSupported = &pSupported)
					{
						fixed (int* ppRealTimeHint = &pRealTimeHint)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, pInputConfig, (DxgiRational*)ppFrameRate, pOutputDesc, (int*)ppSupported, (int*)ppRealTimeHint);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, ref DxgiRational pFrameRate, D3D11VideoSampleDesc* pOutputDesc, ref int pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					fixed (int* ppSupported = &pSupported)
					{
						fixed (int* ppRealTimeHint = &pRealTimeHint)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, (DxgiRational*)ppFrameRate, pOutputDesc, (int*)ppSupported, (int*)ppRealTimeHint);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, ref DxgiRational pFrameRate, D3D11VideoSampleDesc* pOutputDesc, ref int pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
				{
					fixed (DxgiRational* ppFrameRate = &pFrameRate)
					{
						fixed (int* ppSupported = &pSupported)
						{
							fixed (int* ppRealTimeHint = &pRealTimeHint)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, (DxgiRational*)ppFrameRate, pOutputDesc, (int*)ppSupported, (int*)ppRealTimeHint);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, DxgiRational* pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, ref int pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
			{
				fixed (int* ppSupported = &pSupported)
				{
					fixed (int* ppRealTimeHint = &pRealTimeHint)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, pInputConfig, pFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, (int*)ppSupported, (int*)ppRealTimeHint);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, DxgiRational* pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, ref int pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
				{
					fixed (int* ppSupported = &pSupported)
					{
						fixed (int* ppRealTimeHint = &pRealTimeHint)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, pInputConfig, pFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, (int*)ppSupported, (int*)ppRealTimeHint);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, DxgiRational* pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, ref int pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
			{
				fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
				{
					fixed (int* ppSupported = &pSupported)
					{
						fixed (int* ppRealTimeHint = &pRealTimeHint)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, pFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, (int*)ppSupported, (int*)ppRealTimeHint);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, DxgiRational* pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, ref int pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
				{
					fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
					{
						fixed (int* ppSupported = &pSupported)
						{
							fixed (int* ppRealTimeHint = &pRealTimeHint)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, pFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, (int*)ppSupported, (int*)ppRealTimeHint);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, ref DxgiRational pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, ref int pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppFrameRate = &pFrameRate)
			{
				fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
				{
					fixed (int* ppSupported = &pSupported)
					{
						fixed (int* ppRealTimeHint = &pRealTimeHint)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, pInputConfig, (DxgiRational*)ppFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, (int*)ppSupported, (int*)ppRealTimeHint);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, ref DxgiRational pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, ref int pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
					{
						fixed (int* ppSupported = &pSupported)
						{
							fixed (int* ppRealTimeHint = &pRealTimeHint)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, pInputConfig, (DxgiRational*)ppFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, (int*)ppSupported, (int*)ppRealTimeHint);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, ref DxgiRational pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, ref int pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
					{
						fixed (int* ppSupported = &pSupported)
						{
							fixed (int* ppRealTimeHint = &pRealTimeHint)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, pInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, (DxgiRational*)ppFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, (int*)ppSupported, (int*)ppRealTimeHint);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckVideoDecoderDownsampling(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, ref DxgiRational pFrameRate, ref D3D11VideoSampleDesc pOutputDesc, ref int pSupported, ref int pRealTimeHint)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
				{
					fixed (DxgiRational* ppFrameRate = &pFrameRate)
					{
						fixed (D3D11VideoSampleDesc* ppOutputDesc = &pOutputDesc)
						{
							fixed (int* ppSupported = &pSupported)
							{
								fixed (int* ppRealTimeHint = &pRealTimeHint)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, int*, int*, HResult>)(LpVtbl[19]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, (DxgiRational*)ppFrameRate, (D3D11VideoSampleDesc*)ppOutputDesc, (int*)ppSupported, (int*)ppRealTimeHint);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult RecommendVideoDecoderDownsampleParameters(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, DxgiRational* pFrameRate, D3D11VideoSampleDesc* pRecommendedOutputDesc)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, HResult>)(LpVtbl[20]))(ptr, pInputDesc, inputColorSpace, pInputConfig, pFrameRate, pRecommendedOutputDesc);
			return ret;
		}

		public readonly unsafe HResult RecommendVideoDecoderDownsampleParameters(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, DxgiRational* pFrameRate, D3D11VideoSampleDesc* pRecommendedOutputDesc)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, HResult>)(LpVtbl[20]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, pInputConfig, pFrameRate, pRecommendedOutputDesc);
				return ret;
			}
		}

		public readonly unsafe HResult RecommendVideoDecoderDownsampleParameters(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, DxgiRational* pFrameRate, D3D11VideoSampleDesc* pRecommendedOutputDesc)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, HResult>)(LpVtbl[20]))(ptr, pInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, pFrameRate, pRecommendedOutputDesc);
				return ret;
			}
		}

		public readonly unsafe HResult RecommendVideoDecoderDownsampleParameters(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, DxgiRational* pFrameRate, D3D11VideoSampleDesc* pRecommendedOutputDesc)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, HResult>)(LpVtbl[20]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, pFrameRate, pRecommendedOutputDesc);
					return ret;
				}
			}
		}

		public readonly unsafe HResult RecommendVideoDecoderDownsampleParameters(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, ref DxgiRational pFrameRate, D3D11VideoSampleDesc* pRecommendedOutputDesc)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppFrameRate = &pFrameRate)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, HResult>)(LpVtbl[20]))(ptr, pInputDesc, inputColorSpace, pInputConfig, (DxgiRational*)ppFrameRate, pRecommendedOutputDesc);
				return ret;
			}
		}

		public readonly unsafe HResult RecommendVideoDecoderDownsampleParameters(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, ref DxgiRational pFrameRate, D3D11VideoSampleDesc* pRecommendedOutputDesc)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, HResult>)(LpVtbl[20]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, pInputConfig, (DxgiRational*)ppFrameRate, pRecommendedOutputDesc);
					return ret;
				}
			}
		}

		public readonly unsafe HResult RecommendVideoDecoderDownsampleParameters(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, ref DxgiRational pFrameRate, D3D11VideoSampleDesc* pRecommendedOutputDesc)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, HResult>)(LpVtbl[20]))(ptr, pInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, (DxgiRational*)ppFrameRate, pRecommendedOutputDesc);
					return ret;
				}
			}
		}

		public readonly unsafe HResult RecommendVideoDecoderDownsampleParameters(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, ref DxgiRational pFrameRate, D3D11VideoSampleDesc* pRecommendedOutputDesc)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
				{
					fixed (DxgiRational* ppFrameRate = &pFrameRate)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, HResult>)(LpVtbl[20]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, (DxgiRational*)ppFrameRate, pRecommendedOutputDesc);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult RecommendVideoDecoderDownsampleParameters(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, DxgiRational* pFrameRate, ref D3D11VideoSampleDesc pRecommendedOutputDesc)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoSampleDesc* ppRecommendedOutputDesc = &pRecommendedOutputDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, HResult>)(LpVtbl[20]))(ptr, pInputDesc, inputColorSpace, pInputConfig, pFrameRate, (D3D11VideoSampleDesc*)ppRecommendedOutputDesc);
				return ret;
			}
		}

		public readonly unsafe HResult RecommendVideoDecoderDownsampleParameters(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, DxgiRational* pFrameRate, ref D3D11VideoSampleDesc pRecommendedOutputDesc)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoSampleDesc* ppRecommendedOutputDesc = &pRecommendedOutputDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, HResult>)(LpVtbl[20]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, pInputConfig, pFrameRate, (D3D11VideoSampleDesc*)ppRecommendedOutputDesc);
					return ret;
				}
			}
		}

		public readonly unsafe HResult RecommendVideoDecoderDownsampleParameters(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, DxgiRational* pFrameRate, ref D3D11VideoSampleDesc pRecommendedOutputDesc)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
			{
				fixed (D3D11VideoSampleDesc* ppRecommendedOutputDesc = &pRecommendedOutputDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, HResult>)(LpVtbl[20]))(ptr, pInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, pFrameRate, (D3D11VideoSampleDesc*)ppRecommendedOutputDesc);
					return ret;
				}
			}
		}

		public readonly unsafe HResult RecommendVideoDecoderDownsampleParameters(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, DxgiRational* pFrameRate, ref D3D11VideoSampleDesc pRecommendedOutputDesc)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
				{
					fixed (D3D11VideoSampleDesc* ppRecommendedOutputDesc = &pRecommendedOutputDesc)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, HResult>)(LpVtbl[20]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, pFrameRate, (D3D11VideoSampleDesc*)ppRecommendedOutputDesc);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult RecommendVideoDecoderDownsampleParameters(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, ref DxgiRational pFrameRate, ref D3D11VideoSampleDesc pRecommendedOutputDesc)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiRational* ppFrameRate = &pFrameRate)
			{
				fixed (D3D11VideoSampleDesc* ppRecommendedOutputDesc = &pRecommendedOutputDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, HResult>)(LpVtbl[20]))(ptr, pInputDesc, inputColorSpace, pInputConfig, (DxgiRational*)ppFrameRate, (D3D11VideoSampleDesc*)ppRecommendedOutputDesc);
					return ret;
				}
			}
		}

		public readonly unsafe HResult RecommendVideoDecoderDownsampleParameters(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, D3D11VideoDecoderConfig* pInputConfig, ref DxgiRational pFrameRate, ref D3D11VideoSampleDesc pRecommendedOutputDesc)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					fixed (D3D11VideoSampleDesc* ppRecommendedOutputDesc = &pRecommendedOutputDesc)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, HResult>)(LpVtbl[20]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, pInputConfig, (DxgiRational*)ppFrameRate, (D3D11VideoSampleDesc*)ppRecommendedOutputDesc);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult RecommendVideoDecoderDownsampleParameters(D3D11VideoDecoderDesc* pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, ref DxgiRational pFrameRate, ref D3D11VideoSampleDesc pRecommendedOutputDesc)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
			{
				fixed (DxgiRational* ppFrameRate = &pFrameRate)
				{
					fixed (D3D11VideoSampleDesc* ppRecommendedOutputDesc = &pRecommendedOutputDesc)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, HResult>)(LpVtbl[20]))(ptr, pInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, (DxgiRational*)ppFrameRate, (D3D11VideoSampleDesc*)ppRecommendedOutputDesc);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult RecommendVideoDecoderDownsampleParameters(ref D3D11VideoDecoderDesc pInputDesc, DxgiColorSpaceType inputColorSpace, ref D3D11VideoDecoderConfig pInputConfig, ref DxgiRational pFrameRate, ref D3D11VideoSampleDesc pRecommendedOutputDesc)
		{
			ID3D11VideoDevice1* ptr = (ID3D11VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppInputDesc = &pInputDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppInputConfig = &pInputConfig)
				{
					fixed (DxgiRational* ppFrameRate = &pFrameRate)
					{
						fixed (D3D11VideoSampleDesc* ppRecommendedOutputDesc = &pRecommendedOutputDesc)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice1*, D3D11VideoDecoderDesc*, DxgiColorSpaceType, D3D11VideoDecoderConfig*, DxgiRational*, D3D11VideoSampleDesc*, HResult>)(LpVtbl[20]))(ptr, (D3D11VideoDecoderDesc*)ppInputDesc, inputColorSpace, (D3D11VideoDecoderConfig*)ppInputConfig, (DxgiRational*)ppFrameRate, (D3D11VideoSampleDesc*)ppRecommendedOutputDesc);
							return ret;
						}
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11VideoDevice (ID3D11VideoDevice1 value)
		{
			return Unsafe.As<ID3D11VideoDevice1, ID3D11VideoDevice>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11VideoDevice1 value)
		{
			return Unsafe.As<ID3D11VideoDevice1, IUnknown>(ref value);
		}

	}

	[Guid("465217f2-5568-43cf-b5b9-f61d54531ca1")]
	[NativeName("ID3D11VideoProcessorEnumerator1")]
	public partial struct ID3D11VideoProcessorEnumerator1 : IComObject, IComObject<ID3D11VideoProcessorEnumerator1>, IComObject<ID3D11VideoProcessorEnumerator>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("465217f2-5568-43cf-b5b9-f61d54531ca1");

		public unsafe ID3D11VideoProcessorEnumerator1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult CheckVideoProcessorFormatConversion(DxgiFormat inputFormat, DxgiColorSpaceType inputColorSpace, DxgiFormat outputFormat, DxgiColorSpaceType outputColorSpace, int* pSupported)
		{
			ID3D11VideoProcessorEnumerator1* ptr = (ID3D11VideoProcessorEnumerator1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator1*, DxgiFormat, DxgiColorSpaceType, DxgiFormat, DxgiColorSpaceType, int*, HResult>)(LpVtbl[6]))(ptr, inputFormat, inputColorSpace, outputFormat, outputColorSpace, pSupported);
			return ret;
		}

		public readonly unsafe HResult CheckVideoProcessorFormatConversion(DxgiFormat inputFormat, DxgiColorSpaceType inputColorSpace, DxgiFormat outputFormat, DxgiColorSpaceType outputColorSpace, ref int pSupported)
		{
			ID3D11VideoProcessorEnumerator1* ptr = (ID3D11VideoProcessorEnumerator1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppSupported = &pSupported)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator1*, DxgiFormat, DxgiColorSpaceType, DxgiFormat, DxgiColorSpaceType, int*, HResult>)(LpVtbl[6]))(ptr, inputFormat, inputColorSpace, outputFormat, outputColorSpace, (int*)ppSupported);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11VideoProcessorEnumerator (ID3D11VideoProcessorEnumerator1 value)
		{
			return Unsafe.As<ID3D11VideoProcessorEnumerator1, ID3D11VideoProcessorEnumerator>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11VideoProcessorEnumerator1 value)
		{
			return Unsafe.As<ID3D11VideoProcessorEnumerator1, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11VideoProcessorEnumerator1 value)
		{
			return Unsafe.As<ID3D11VideoProcessorEnumerator1, IUnknown>(ref value);
		}

	}

	[Guid("a04bfb29-08ef-43d6-a49c-a9bdbdcbe686")]
	[NativeName("ID3D11Device1")]
	public partial struct ID3D11Device1 : IComObject, IComObject<ID3D11Device1>, IComObject<ID3D11Device>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("a04bfb29-08ef-43d6-a49c-a9bdbdcbe686");

		public unsafe ID3D11Device1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetImmediateContext1(ID3D11DeviceContext1** ppImmediateContext)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11DeviceContext1**, void>)(LpVtbl[40]))(ptr, ppImmediateContext);
		}

		public readonly unsafe void GetImmediateContext1(ref ID3D11DeviceContext1* ppImmediateContext)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceContext1** pppImmediateContext = &ppImmediateContext)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11DeviceContext1**, void>)(LpVtbl[40]))(ptr, (ID3D11DeviceContext1**)pppImmediateContext);
			}
		}

		public readonly unsafe HResult CreateDeferredContext1(uint contextFlags, ID3D11DeviceContext1** ppDeferredContext)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, ID3D11DeviceContext1**, HResult>)(LpVtbl[41]))(ptr, contextFlags, ppDeferredContext);
			return ret;
		}

		public readonly unsafe HResult CreateDeferredContext1(uint contextFlags, ref ID3D11DeviceContext1* ppDeferredContext)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceContext1** pppDeferredContext = &ppDeferredContext)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, ID3D11DeviceContext1**, HResult>)(LpVtbl[41]))(ptr, contextFlags, (ID3D11DeviceContext1**)pppDeferredContext);
				return ret;
			}
		}

		public readonly unsafe HResult CreateBlendState1(D3D11BlendDesc1* pBlendStateDesc, ID3D11BlendState1** ppBlendState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, D3D11BlendDesc1*, ID3D11BlendState1**, HResult>)(LpVtbl[42]))(ptr, pBlendStateDesc, ppBlendState);
			return ret;
		}

		public readonly unsafe HResult CreateBlendState1(ref D3D11BlendDesc1 pBlendStateDesc, ID3D11BlendState1** ppBlendState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11BlendDesc1* ppBlendStateDesc = &pBlendStateDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, D3D11BlendDesc1*, ID3D11BlendState1**, HResult>)(LpVtbl[42]))(ptr, (D3D11BlendDesc1*)ppBlendStateDesc, ppBlendState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateBlendState1(D3D11BlendDesc1* pBlendStateDesc, ref ID3D11BlendState1* ppBlendState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11BlendState1** pppBlendState = &ppBlendState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, D3D11BlendDesc1*, ID3D11BlendState1**, HResult>)(LpVtbl[42]))(ptr, pBlendStateDesc, (ID3D11BlendState1**)pppBlendState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateBlendState1(ref D3D11BlendDesc1 pBlendStateDesc, ref ID3D11BlendState1* ppBlendState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11BlendDesc1* ppBlendStateDesc = &pBlendStateDesc)
			{
				fixed (ID3D11BlendState1** pppBlendState = &ppBlendState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, D3D11BlendDesc1*, ID3D11BlendState1**, HResult>)(LpVtbl[42]))(ptr, (D3D11BlendDesc1*)ppBlendStateDesc, (ID3D11BlendState1**)pppBlendState);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateRasterizerState1(D3D11RasterizerDesc1* pRasterizerDesc, ID3D11RasterizerState1** ppRasterizerState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, D3D11RasterizerDesc1*, ID3D11RasterizerState1**, HResult>)(LpVtbl[43]))(ptr, pRasterizerDesc, ppRasterizerState);
			return ret;
		}

		public readonly unsafe HResult CreateRasterizerState1(ref D3D11RasterizerDesc1 pRasterizerDesc, ID3D11RasterizerState1** ppRasterizerState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11RasterizerDesc1* ppRasterizerDesc = &pRasterizerDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, D3D11RasterizerDesc1*, ID3D11RasterizerState1**, HResult>)(LpVtbl[43]))(ptr, (D3D11RasterizerDesc1*)ppRasterizerDesc, ppRasterizerState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateRasterizerState1(D3D11RasterizerDesc1* pRasterizerDesc, ref ID3D11RasterizerState1* ppRasterizerState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RasterizerState1** pppRasterizerState = &ppRasterizerState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, D3D11RasterizerDesc1*, ID3D11RasterizerState1**, HResult>)(LpVtbl[43]))(ptr, pRasterizerDesc, (ID3D11RasterizerState1**)pppRasterizerState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateRasterizerState1(ref D3D11RasterizerDesc1 pRasterizerDesc, ref ID3D11RasterizerState1* ppRasterizerState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11RasterizerDesc1* ppRasterizerDesc = &pRasterizerDesc)
			{
				fixed (ID3D11RasterizerState1** pppRasterizerState = &ppRasterizerState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, D3D11RasterizerDesc1*, ID3D11RasterizerState1**, HResult>)(LpVtbl[43]))(ptr, (D3D11RasterizerDesc1*)ppRasterizerDesc, (ID3D11RasterizerState1**)pppRasterizerState);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDeviceContextState(uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sDKVersion, Guid* emulatedInterface, D3DFeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, D3DFeatureLevel*, uint, uint, Guid*, D3DFeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[44]))(ptr, flags, pFeatureLevels, featureLevels, sDKVersion, emulatedInterface, pChosenFeatureLevel, ppContextState);
			return ret;
		}

		public readonly unsafe HResult CreateDeviceContextState(uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sDKVersion, Guid* emulatedInterface, D3DFeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, D3DFeatureLevel*, uint, uint, Guid*, D3DFeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[44]))(ptr, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sDKVersion, emulatedInterface, pChosenFeatureLevel, ppContextState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateDeviceContextState(uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sDKVersion, ref Guid emulatedInterface, D3DFeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pemulatedInterface = &emulatedInterface)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, D3DFeatureLevel*, uint, uint, Guid*, D3DFeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[44]))(ptr, flags, pFeatureLevels, featureLevels, sDKVersion, (Guid*)pemulatedInterface, pChosenFeatureLevel, ppContextState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateDeviceContextState(uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sDKVersion, ref Guid emulatedInterface, D3DFeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (Guid* pemulatedInterface = &emulatedInterface)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, D3DFeatureLevel*, uint, uint, Guid*, D3DFeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[44]))(ptr, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sDKVersion, (Guid*)pemulatedInterface, pChosenFeatureLevel, ppContextState);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDeviceContextState(uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sDKVersion, Guid* emulatedInterface, ref D3DFeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3DFeatureLevel* ppChosenFeatureLevel = &pChosenFeatureLevel)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, D3DFeatureLevel*, uint, uint, Guid*, D3DFeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[44]))(ptr, flags, pFeatureLevels, featureLevels, sDKVersion, emulatedInterface, (D3DFeatureLevel*)ppChosenFeatureLevel, ppContextState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateDeviceContextState(uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sDKVersion, Guid* emulatedInterface, ref D3DFeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (D3DFeatureLevel* ppChosenFeatureLevel = &pChosenFeatureLevel)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, D3DFeatureLevel*, uint, uint, Guid*, D3DFeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[44]))(ptr, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sDKVersion, emulatedInterface, (D3DFeatureLevel*)ppChosenFeatureLevel, ppContextState);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDeviceContextState(uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sDKVersion, ref Guid emulatedInterface, ref D3DFeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pemulatedInterface = &emulatedInterface)
			{
				fixed (D3DFeatureLevel* ppChosenFeatureLevel = &pChosenFeatureLevel)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, D3DFeatureLevel*, uint, uint, Guid*, D3DFeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[44]))(ptr, flags, pFeatureLevels, featureLevels, sDKVersion, (Guid*)pemulatedInterface, (D3DFeatureLevel*)ppChosenFeatureLevel, ppContextState);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDeviceContextState(uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sDKVersion, ref Guid emulatedInterface, ref D3DFeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (Guid* pemulatedInterface = &emulatedInterface)
				{
					fixed (D3DFeatureLevel* ppChosenFeatureLevel = &pChosenFeatureLevel)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, D3DFeatureLevel*, uint, uint, Guid*, D3DFeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[44]))(ptr, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sDKVersion, (Guid*)pemulatedInterface, (D3DFeatureLevel*)ppChosenFeatureLevel, ppContextState);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateDeviceContextState(uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sDKVersion, Guid* emulatedInterface, D3DFeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3DDeviceContextState** pppContextState = &ppContextState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, D3DFeatureLevel*, uint, uint, Guid*, D3DFeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[44]))(ptr, flags, pFeatureLevels, featureLevels, sDKVersion, emulatedInterface, pChosenFeatureLevel, (ID3DDeviceContextState**)pppContextState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateDeviceContextState(uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sDKVersion, Guid* emulatedInterface, D3DFeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3DDeviceContextState** pppContextState = &ppContextState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, D3DFeatureLevel*, uint, uint, Guid*, D3DFeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[44]))(ptr, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sDKVersion, emulatedInterface, pChosenFeatureLevel, (ID3DDeviceContextState**)pppContextState);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDeviceContextState(uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sDKVersion, ref Guid emulatedInterface, D3DFeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pemulatedInterface = &emulatedInterface)
			{
				fixed (ID3DDeviceContextState** pppContextState = &ppContextState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, D3DFeatureLevel*, uint, uint, Guid*, D3DFeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[44]))(ptr, flags, pFeatureLevels, featureLevels, sDKVersion, (Guid*)pemulatedInterface, pChosenFeatureLevel, (ID3DDeviceContextState**)pppContextState);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDeviceContextState(uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sDKVersion, ref Guid emulatedInterface, D3DFeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (Guid* pemulatedInterface = &emulatedInterface)
				{
					fixed (ID3DDeviceContextState** pppContextState = &ppContextState)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, D3DFeatureLevel*, uint, uint, Guid*, D3DFeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[44]))(ptr, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sDKVersion, (Guid*)pemulatedInterface, pChosenFeatureLevel, (ID3DDeviceContextState**)pppContextState);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateDeviceContextState(uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sDKVersion, Guid* emulatedInterface, ref D3DFeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3DFeatureLevel* ppChosenFeatureLevel = &pChosenFeatureLevel)
			{
				fixed (ID3DDeviceContextState** pppContextState = &ppContextState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, D3DFeatureLevel*, uint, uint, Guid*, D3DFeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[44]))(ptr, flags, pFeatureLevels, featureLevels, sDKVersion, emulatedInterface, (D3DFeatureLevel*)ppChosenFeatureLevel, (ID3DDeviceContextState**)pppContextState);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateDeviceContextState(uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sDKVersion, Guid* emulatedInterface, ref D3DFeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (D3DFeatureLevel* ppChosenFeatureLevel = &pChosenFeatureLevel)
				{
					fixed (ID3DDeviceContextState** pppContextState = &ppContextState)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, D3DFeatureLevel*, uint, uint, Guid*, D3DFeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[44]))(ptr, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sDKVersion, emulatedInterface, (D3DFeatureLevel*)ppChosenFeatureLevel, (ID3DDeviceContextState**)pppContextState);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateDeviceContextState(uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sDKVersion, ref Guid emulatedInterface, ref D3DFeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pemulatedInterface = &emulatedInterface)
			{
				fixed (D3DFeatureLevel* ppChosenFeatureLevel = &pChosenFeatureLevel)
				{
					fixed (ID3DDeviceContextState** pppContextState = &ppContextState)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, D3DFeatureLevel*, uint, uint, Guid*, D3DFeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[44]))(ptr, flags, pFeatureLevels, featureLevels, sDKVersion, (Guid*)pemulatedInterface, (D3DFeatureLevel*)ppChosenFeatureLevel, (ID3DDeviceContextState**)pppContextState);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateDeviceContextState(uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sDKVersion, ref Guid emulatedInterface, ref D3DFeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (Guid* pemulatedInterface = &emulatedInterface)
				{
					fixed (D3DFeatureLevel* ppChosenFeatureLevel = &pChosenFeatureLevel)
					{
						fixed (ID3DDeviceContextState** pppContextState = &ppContextState)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, D3DFeatureLevel*, uint, uint, Guid*, D3DFeatureLevel*, ID3DDeviceContextState**, HResult>)(LpVtbl[44]))(ptr, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sDKVersion, (Guid*)pemulatedInterface, (D3DFeatureLevel*)ppChosenFeatureLevel, (ID3DDeviceContextState**)pppContextState);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult OpenSharedResource1(nint hResource, Guid* returnedInterface, void** ppResource)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, nint, Guid*, void**, HResult>)(LpVtbl[45]))(ptr, hResource, returnedInterface, ppResource);
			return ret;
		}

		public readonly unsafe HResult OpenSharedResource1(nint hResource, ref Guid returnedInterface, void** ppResource)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* preturnedInterface = &returnedInterface)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, nint, Guid*, void**, HResult>)(LpVtbl[45]))(ptr, hResource, (Guid*)preturnedInterface, ppResource);
				return ret;
			}
		}

		public readonly unsafe HResult OpenSharedResourceByName(char* lpName, uint dwDesiredAccess, Guid* returnedInterface, void** ppResource)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, char*, uint, Guid*, void**, HResult>)(LpVtbl[46]))(ptr, lpName, dwDesiredAccess, returnedInterface, ppResource);
			return ret;
		}

		public readonly unsafe HResult OpenSharedResourceByName(char* lpName, uint dwDesiredAccess, ref Guid returnedInterface, void** ppResource)
		{
			ID3D11Device1* ptr = (ID3D11Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* preturnedInterface = &returnedInterface)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, char*, uint, Guid*, void**, HResult>)(LpVtbl[46]))(ptr, lpName, dwDesiredAccess, (Guid*)preturnedInterface, ppResource);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11Device (ID3D11Device1 value)
		{
			return Unsafe.As<ID3D11Device1, ID3D11Device>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11Device1 value)
		{
			return Unsafe.As<ID3D11Device1, IUnknown>(ref value);
		}

	}

	[Guid("b2daad8b-03d4-4dbf-95eb-32ab4b63d0ab")]
	[NativeName("ID3DUserDefinedAnnotation")]
	public partial struct ID3DUserDefinedAnnotation : IComObject, IComObject<ID3DUserDefinedAnnotation>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("b2daad8b-03d4-4dbf-95eb-32ab4b63d0ab");

		public unsafe ID3DUserDefinedAnnotation (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe int BeginEvent(char* name)
		{
			ID3DUserDefinedAnnotation* ptr = (ID3DUserDefinedAnnotation*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3DUserDefinedAnnotation*, char*, int>)(*LpVtbl))(ptr, name);
			return ret;
		}

		public readonly unsafe int EndEvent()
		{
			ID3DUserDefinedAnnotation* ptr = (ID3DUserDefinedAnnotation*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3DUserDefinedAnnotation*, int>)(LpVtbl[1]))(ptr);
			return ret;
		}

		public readonly unsafe void SetMarker(char* name)
		{
			ID3DUserDefinedAnnotation* ptr = (ID3DUserDefinedAnnotation*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3DUserDefinedAnnotation*, char*, void>)(LpVtbl[2]))(ptr, name);
		}

		public readonly unsafe int GetStatus()
		{
			ID3DUserDefinedAnnotation* ptr = (ID3DUserDefinedAnnotation*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3DUserDefinedAnnotation*, int>)(LpVtbl[3]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3DUserDefinedAnnotation value)
		{
			return Unsafe.As<ID3DUserDefinedAnnotation, IUnknown>(ref value);
		}

	}

	[NativeName("CD3D11_BLEND_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11BlendDesc1
	{


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_1_0000_0001 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("CD3D11_RASTERIZER_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11RasterizerDesc1
	{


	}

	[NativeName("D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoDecoderBeginFrameCryptoSession
	{
		[NativeName("pCryptoSession")]
		public unsafe ID3D11CryptoSession* PCryptoSession;
		[NativeName("BlobSize")]
		public uint BlobSize;
		[NativeName("pBlob")]
		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		public unsafe void* PBlob;

		[NativeName("pKeyInfoId")]
		public unsafe Guid* PKeyInfoId;
		[NativeName("PrivateDataSize")]
		public uint PrivateDataSize;
		[NativeName("pPrivateData")]
		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		public unsafe void* PPrivateData;



	}

	[NativeName("D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11KeyExchangeHwProtectionInputData
	{
		[NativeName("PrivateDataSize")]
		public uint PrivateDataSize;
		[NativeName("HWProtectionDataSize")]
		public uint HWProtectionDataSize;
		[NativeName("pbInput")]
		public byte PbInput_0;
		public byte PbInput_1;
		public byte PbInput_2;
		public byte PbInput_3;


	}

	[NativeName("D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11KeyExchangeHwProtectionOutputData
	{
		[NativeName("PrivateDataSize")]
		public uint PrivateDataSize;
		[NativeName("MaxHWProtectionDataSize")]
		public uint MaxHWProtectionDataSize;
		[NativeName("HWProtectionDataSize")]
		public uint HWProtectionDataSize;
		[NativeName("TransportTime")]
		public ulong TransportTime;
		[NativeName("ExecutionTime")]
		public ulong ExecutionTime;
		[NativeName("pbOutput")]
		public byte PbOutput_0;
		public byte PbOutput_1;
		public byte PbOutput_2;
		public byte PbOutput_3;


	}

	[NativeName("D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11KeyExchangeHwProtectionData
	{
		[NativeName("HWProtectionFunctionID")]
		public uint HWProtectionFunctionID;
		[NativeName("pInputData")]
		public unsafe D3D11KeyExchangeHwProtectionInputData* PInputData;
		[NativeName("pOutputData")]
		public unsafe D3D11KeyExchangeHwProtectionOutputData* POutputData;
		[NativeName("Status")]
		public HResult Status;


	}

	[Guid("420d5b32-b90c-4da4-bef0-359f6a24a83a")]
	[NativeName("ID3D11DeviceContext2")]
	public partial struct ID3D11DeviceContext2 : IComObject, IComObject<ID3D11DeviceContext2>, IComObject<ID3D11DeviceContext1>, IComObject<ID3D11DeviceContext>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("420d5b32-b90c-4da4-bef0-359f6a24a83a");

		public unsafe ID3D11DeviceContext2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
			return ret;
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
				return ret;
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
				return ret;
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
				return ret;
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer* ppTilePool = &pTilePool)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
				return ret;
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
					{
						fixed (ID3D11Buffer* ppTilePool = &pTilePool)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppRangeFlags = &pRangeFlags)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
				return ret;
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppRangeFlags = &pRangeFlags)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (uint* ppRangeFlags = &pRangeFlags)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
			{
				fixed (uint* ppRangeFlags = &pRangeFlags)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
					{
						fixed (uint* ppRangeFlags = &pRangeFlags)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer* ppTilePool = &pTilePool)
			{
				fixed (uint* ppRangeFlags = &pRangeFlags)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppRangeFlags = &pRangeFlags)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppRangeFlags = &pRangeFlags)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppRangeFlags = &pRangeFlags)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
					{
						fixed (ID3D11Buffer* ppTilePool = &pTilePool)
						{
							fixed (uint* ppRangeFlags = &pRangeFlags)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
				return ret;
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
			{
				fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
					{
						fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer* ppTilePool = &pTilePool)
			{
				fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
					{
						fixed (ID3D11Buffer* ppTilePool = &pTilePool)
						{
							fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (uint* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
			{
				fixed (uint* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
					{
						fixed (uint* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer* ppTilePool = &pTilePool)
			{
				fixed (uint* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, uint* pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
					{
						fixed (ID3D11Buffer* ppTilePool = &pTilePool)
						{
							fixed (uint* ppRangeFlags = &pRangeFlags)
							{
								fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, pRangeTileCounts, flags);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
				return ret;
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer* ppTilePool = &pTilePool)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
					{
						fixed (ID3D11Buffer* ppTilePool = &pTilePool)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (uint* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
			{
				fixed (uint* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
					{
						fixed (uint* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer* ppTilePool = &pTilePool)
			{
				fixed (uint* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, uint* pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
					{
						fixed (ID3D11Buffer* ppTilePool = &pTilePool)
						{
							fixed (uint* ppRangeFlags = &pRangeFlags)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, pTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
			{
				fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
					{
						fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer* ppTilePool = &pTilePool)
			{
				fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, uint* pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
					{
						fixed (ID3D11Buffer* ppTilePool = &pTilePool)
						{
							fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, pRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (uint* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
			{
				fixed (uint* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ID3D11Buffer* pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
					{
						fixed (uint* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, pTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer* ppTilePool = &pTilePool)
			{
				fixed (uint* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, D3D11TileRegionSize* pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
			{
				fixed (ID3D11Buffer* ppTilePool = &pTilePool)
				{
					fixed (uint* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, D3D11TiledResourceCoordinate* pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, pTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ID3D11Resource* pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
			{
				fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
				{
					fixed (ID3D11Buffer* ppTilePool = &pTilePool)
					{
						fixed (uint* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, pTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult UpdateTileMappings(ref ID3D11Resource pTiledResource, uint numTiledResourceRegions, ref D3D11TiledResourceCoordinate pTiledResourceRegionStartCoordinates, ref D3D11TileRegionSize pTiledResourceRegionSizes, ref ID3D11Buffer pTilePool, uint numRanges, ref uint pRangeFlags, ref uint pTilePoolStartOffsets, ref uint pRangeTileCounts, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTiledResourceRegionStartCoordinates = &pTiledResourceRegionStartCoordinates)
				{
					fixed (D3D11TileRegionSize* ppTiledResourceRegionSizes = &pTiledResourceRegionSizes)
					{
						fixed (ID3D11Buffer* ppTilePool = &pTilePool)
						{
							fixed (uint* ppRangeFlags = &pRangeFlags)
							{
								fixed (uint* ppTilePoolStartOffsets = &pTilePoolStartOffsets)
								{
									fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, uint, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, uint, uint*, uint*, uint*, uint, HResult>)(LpVtbl[19]))(ptr, (ID3D11Resource*)ppTiledResource, numTiledResourceRegions, (D3D11TiledResourceCoordinate*)ppTiledResourceRegionStartCoordinates, (D3D11TileRegionSize*)ppTiledResourceRegionSizes, (ID3D11Buffer*)ppTilePool, numRanges, (uint*)ppRangeFlags, (uint*)ppTilePoolStartOffsets, (uint*)ppRangeTileCounts, flags);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ID3D11Resource* pDestTiledResource, D3D11TiledResourceCoordinate* pDestRegionStartCoordinate, ID3D11Resource* pSourceTiledResource, D3D11TiledResourceCoordinate* pSourceRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, pDestTiledResource, pDestRegionStartCoordinate, pSourceTiledResource, pSourceRegionStartCoordinate, pTileRegionSize, flags);
			return ret;
		}

		public readonly unsafe HResult CopyTileMappings(ref ID3D11Resource pDestTiledResource, D3D11TiledResourceCoordinate* pDestRegionStartCoordinate, ID3D11Resource* pSourceTiledResource, D3D11TiledResourceCoordinate* pSourceRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDestTiledResource = &pDestTiledResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, (ID3D11Resource*)ppDestTiledResource, pDestRegionStartCoordinate, pSourceTiledResource, pSourceRegionStartCoordinate, pTileRegionSize, flags);
				return ret;
			}
		}

		public readonly unsafe HResult CopyTileMappings(ID3D11Resource* pDestTiledResource, ref D3D11TiledResourceCoordinate pDestRegionStartCoordinate, ID3D11Resource* pSourceTiledResource, D3D11TiledResourceCoordinate* pSourceRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppDestRegionStartCoordinate = &pDestRegionStartCoordinate)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, pDestTiledResource, (D3D11TiledResourceCoordinate*)ppDestRegionStartCoordinate, pSourceTiledResource, pSourceRegionStartCoordinate, pTileRegionSize, flags);
				return ret;
			}
		}

		public readonly unsafe HResult CopyTileMappings(ref ID3D11Resource pDestTiledResource, ref D3D11TiledResourceCoordinate pDestRegionStartCoordinate, ID3D11Resource* pSourceTiledResource, D3D11TiledResourceCoordinate* pSourceRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDestTiledResource = &pDestTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppDestRegionStartCoordinate = &pDestRegionStartCoordinate)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, (ID3D11Resource*)ppDestTiledResource, (D3D11TiledResourceCoordinate*)ppDestRegionStartCoordinate, pSourceTiledResource, pSourceRegionStartCoordinate, pTileRegionSize, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ID3D11Resource* pDestTiledResource, D3D11TiledResourceCoordinate* pDestRegionStartCoordinate, ref ID3D11Resource pSourceTiledResource, D3D11TiledResourceCoordinate* pSourceRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppSourceTiledResource = &pSourceTiledResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, pDestTiledResource, pDestRegionStartCoordinate, (ID3D11Resource*)ppSourceTiledResource, pSourceRegionStartCoordinate, pTileRegionSize, flags);
				return ret;
			}
		}

		public readonly unsafe HResult CopyTileMappings(ref ID3D11Resource pDestTiledResource, D3D11TiledResourceCoordinate* pDestRegionStartCoordinate, ref ID3D11Resource pSourceTiledResource, D3D11TiledResourceCoordinate* pSourceRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDestTiledResource = &pDestTiledResource)
			{
				fixed (ID3D11Resource* ppSourceTiledResource = &pSourceTiledResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, (ID3D11Resource*)ppDestTiledResource, pDestRegionStartCoordinate, (ID3D11Resource*)ppSourceTiledResource, pSourceRegionStartCoordinate, pTileRegionSize, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ID3D11Resource* pDestTiledResource, ref D3D11TiledResourceCoordinate pDestRegionStartCoordinate, ref ID3D11Resource pSourceTiledResource, D3D11TiledResourceCoordinate* pSourceRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppDestRegionStartCoordinate = &pDestRegionStartCoordinate)
			{
				fixed (ID3D11Resource* ppSourceTiledResource = &pSourceTiledResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, pDestTiledResource, (D3D11TiledResourceCoordinate*)ppDestRegionStartCoordinate, (ID3D11Resource*)ppSourceTiledResource, pSourceRegionStartCoordinate, pTileRegionSize, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ref ID3D11Resource pDestTiledResource, ref D3D11TiledResourceCoordinate pDestRegionStartCoordinate, ref ID3D11Resource pSourceTiledResource, D3D11TiledResourceCoordinate* pSourceRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDestTiledResource = &pDestTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppDestRegionStartCoordinate = &pDestRegionStartCoordinate)
				{
					fixed (ID3D11Resource* ppSourceTiledResource = &pSourceTiledResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, (ID3D11Resource*)ppDestTiledResource, (D3D11TiledResourceCoordinate*)ppDestRegionStartCoordinate, (ID3D11Resource*)ppSourceTiledResource, pSourceRegionStartCoordinate, pTileRegionSize, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ID3D11Resource* pDestTiledResource, D3D11TiledResourceCoordinate* pDestRegionStartCoordinate, ID3D11Resource* pSourceTiledResource, ref D3D11TiledResourceCoordinate pSourceRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppSourceRegionStartCoordinate = &pSourceRegionStartCoordinate)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, pDestTiledResource, pDestRegionStartCoordinate, pSourceTiledResource, (D3D11TiledResourceCoordinate*)ppSourceRegionStartCoordinate, pTileRegionSize, flags);
				return ret;
			}
		}

		public readonly unsafe HResult CopyTileMappings(ref ID3D11Resource pDestTiledResource, D3D11TiledResourceCoordinate* pDestRegionStartCoordinate, ID3D11Resource* pSourceTiledResource, ref D3D11TiledResourceCoordinate pSourceRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDestTiledResource = &pDestTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppSourceRegionStartCoordinate = &pSourceRegionStartCoordinate)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, (ID3D11Resource*)ppDestTiledResource, pDestRegionStartCoordinate, pSourceTiledResource, (D3D11TiledResourceCoordinate*)ppSourceRegionStartCoordinate, pTileRegionSize, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ID3D11Resource* pDestTiledResource, ref D3D11TiledResourceCoordinate pDestRegionStartCoordinate, ID3D11Resource* pSourceTiledResource, ref D3D11TiledResourceCoordinate pSourceRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppDestRegionStartCoordinate = &pDestRegionStartCoordinate)
			{
				fixed (D3D11TiledResourceCoordinate* ppSourceRegionStartCoordinate = &pSourceRegionStartCoordinate)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, pDestTiledResource, (D3D11TiledResourceCoordinate*)ppDestRegionStartCoordinate, pSourceTiledResource, (D3D11TiledResourceCoordinate*)ppSourceRegionStartCoordinate, pTileRegionSize, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ref ID3D11Resource pDestTiledResource, ref D3D11TiledResourceCoordinate pDestRegionStartCoordinate, ID3D11Resource* pSourceTiledResource, ref D3D11TiledResourceCoordinate pSourceRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDestTiledResource = &pDestTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppDestRegionStartCoordinate = &pDestRegionStartCoordinate)
				{
					fixed (D3D11TiledResourceCoordinate* ppSourceRegionStartCoordinate = &pSourceRegionStartCoordinate)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, (ID3D11Resource*)ppDestTiledResource, (D3D11TiledResourceCoordinate*)ppDestRegionStartCoordinate, pSourceTiledResource, (D3D11TiledResourceCoordinate*)ppSourceRegionStartCoordinate, pTileRegionSize, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ID3D11Resource* pDestTiledResource, D3D11TiledResourceCoordinate* pDestRegionStartCoordinate, ref ID3D11Resource pSourceTiledResource, ref D3D11TiledResourceCoordinate pSourceRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppSourceTiledResource = &pSourceTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppSourceRegionStartCoordinate = &pSourceRegionStartCoordinate)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, pDestTiledResource, pDestRegionStartCoordinate, (ID3D11Resource*)ppSourceTiledResource, (D3D11TiledResourceCoordinate*)ppSourceRegionStartCoordinate, pTileRegionSize, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ref ID3D11Resource pDestTiledResource, D3D11TiledResourceCoordinate* pDestRegionStartCoordinate, ref ID3D11Resource pSourceTiledResource, ref D3D11TiledResourceCoordinate pSourceRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDestTiledResource = &pDestTiledResource)
			{
				fixed (ID3D11Resource* ppSourceTiledResource = &pSourceTiledResource)
				{
					fixed (D3D11TiledResourceCoordinate* ppSourceRegionStartCoordinate = &pSourceRegionStartCoordinate)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, (ID3D11Resource*)ppDestTiledResource, pDestRegionStartCoordinate, (ID3D11Resource*)ppSourceTiledResource, (D3D11TiledResourceCoordinate*)ppSourceRegionStartCoordinate, pTileRegionSize, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ID3D11Resource* pDestTiledResource, ref D3D11TiledResourceCoordinate pDestRegionStartCoordinate, ref ID3D11Resource pSourceTiledResource, ref D3D11TiledResourceCoordinate pSourceRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppDestRegionStartCoordinate = &pDestRegionStartCoordinate)
			{
				fixed (ID3D11Resource* ppSourceTiledResource = &pSourceTiledResource)
				{
					fixed (D3D11TiledResourceCoordinate* ppSourceRegionStartCoordinate = &pSourceRegionStartCoordinate)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, pDestTiledResource, (D3D11TiledResourceCoordinate*)ppDestRegionStartCoordinate, (ID3D11Resource*)ppSourceTiledResource, (D3D11TiledResourceCoordinate*)ppSourceRegionStartCoordinate, pTileRegionSize, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ref ID3D11Resource pDestTiledResource, ref D3D11TiledResourceCoordinate pDestRegionStartCoordinate, ref ID3D11Resource pSourceTiledResource, ref D3D11TiledResourceCoordinate pSourceRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDestTiledResource = &pDestTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppDestRegionStartCoordinate = &pDestRegionStartCoordinate)
				{
					fixed (ID3D11Resource* ppSourceTiledResource = &pSourceTiledResource)
					{
						fixed (D3D11TiledResourceCoordinate* ppSourceRegionStartCoordinate = &pSourceRegionStartCoordinate)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, (ID3D11Resource*)ppDestTiledResource, (D3D11TiledResourceCoordinate*)ppDestRegionStartCoordinate, (ID3D11Resource*)ppSourceTiledResource, (D3D11TiledResourceCoordinate*)ppSourceRegionStartCoordinate, pTileRegionSize, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ID3D11Resource* pDestTiledResource, D3D11TiledResourceCoordinate* pDestRegionStartCoordinate, ID3D11Resource* pSourceTiledResource, D3D11TiledResourceCoordinate* pSourceRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, pDestTiledResource, pDestRegionStartCoordinate, pSourceTiledResource, pSourceRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, flags);
				return ret;
			}
		}

		public readonly unsafe HResult CopyTileMappings(ref ID3D11Resource pDestTiledResource, D3D11TiledResourceCoordinate* pDestRegionStartCoordinate, ID3D11Resource* pSourceTiledResource, D3D11TiledResourceCoordinate* pSourceRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDestTiledResource = &pDestTiledResource)
			{
				fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, (ID3D11Resource*)ppDestTiledResource, pDestRegionStartCoordinate, pSourceTiledResource, pSourceRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ID3D11Resource* pDestTiledResource, ref D3D11TiledResourceCoordinate pDestRegionStartCoordinate, ID3D11Resource* pSourceTiledResource, D3D11TiledResourceCoordinate* pSourceRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppDestRegionStartCoordinate = &pDestRegionStartCoordinate)
			{
				fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, pDestTiledResource, (D3D11TiledResourceCoordinate*)ppDestRegionStartCoordinate, pSourceTiledResource, pSourceRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ref ID3D11Resource pDestTiledResource, ref D3D11TiledResourceCoordinate pDestRegionStartCoordinate, ID3D11Resource* pSourceTiledResource, D3D11TiledResourceCoordinate* pSourceRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDestTiledResource = &pDestTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppDestRegionStartCoordinate = &pDestRegionStartCoordinate)
				{
					fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, (ID3D11Resource*)ppDestTiledResource, (D3D11TiledResourceCoordinate*)ppDestRegionStartCoordinate, pSourceTiledResource, pSourceRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ID3D11Resource* pDestTiledResource, D3D11TiledResourceCoordinate* pDestRegionStartCoordinate, ref ID3D11Resource pSourceTiledResource, D3D11TiledResourceCoordinate* pSourceRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppSourceTiledResource = &pSourceTiledResource)
			{
				fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, pDestTiledResource, pDestRegionStartCoordinate, (ID3D11Resource*)ppSourceTiledResource, pSourceRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ref ID3D11Resource pDestTiledResource, D3D11TiledResourceCoordinate* pDestRegionStartCoordinate, ref ID3D11Resource pSourceTiledResource, D3D11TiledResourceCoordinate* pSourceRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDestTiledResource = &pDestTiledResource)
			{
				fixed (ID3D11Resource* ppSourceTiledResource = &pSourceTiledResource)
				{
					fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, (ID3D11Resource*)ppDestTiledResource, pDestRegionStartCoordinate, (ID3D11Resource*)ppSourceTiledResource, pSourceRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ID3D11Resource* pDestTiledResource, ref D3D11TiledResourceCoordinate pDestRegionStartCoordinate, ref ID3D11Resource pSourceTiledResource, D3D11TiledResourceCoordinate* pSourceRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppDestRegionStartCoordinate = &pDestRegionStartCoordinate)
			{
				fixed (ID3D11Resource* ppSourceTiledResource = &pSourceTiledResource)
				{
					fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, pDestTiledResource, (D3D11TiledResourceCoordinate*)ppDestRegionStartCoordinate, (ID3D11Resource*)ppSourceTiledResource, pSourceRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ref ID3D11Resource pDestTiledResource, ref D3D11TiledResourceCoordinate pDestRegionStartCoordinate, ref ID3D11Resource pSourceTiledResource, D3D11TiledResourceCoordinate* pSourceRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDestTiledResource = &pDestTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppDestRegionStartCoordinate = &pDestRegionStartCoordinate)
				{
					fixed (ID3D11Resource* ppSourceTiledResource = &pSourceTiledResource)
					{
						fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, (ID3D11Resource*)ppDestTiledResource, (D3D11TiledResourceCoordinate*)ppDestRegionStartCoordinate, (ID3D11Resource*)ppSourceTiledResource, pSourceRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ID3D11Resource* pDestTiledResource, D3D11TiledResourceCoordinate* pDestRegionStartCoordinate, ID3D11Resource* pSourceTiledResource, ref D3D11TiledResourceCoordinate pSourceRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppSourceRegionStartCoordinate = &pSourceRegionStartCoordinate)
			{
				fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, pDestTiledResource, pDestRegionStartCoordinate, pSourceTiledResource, (D3D11TiledResourceCoordinate*)ppSourceRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, flags);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ref ID3D11Resource pDestTiledResource, D3D11TiledResourceCoordinate* pDestRegionStartCoordinate, ID3D11Resource* pSourceTiledResource, ref D3D11TiledResourceCoordinate pSourceRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDestTiledResource = &pDestTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppSourceRegionStartCoordinate = &pSourceRegionStartCoordinate)
				{
					fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, (ID3D11Resource*)ppDestTiledResource, pDestRegionStartCoordinate, pSourceTiledResource, (D3D11TiledResourceCoordinate*)ppSourceRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ID3D11Resource* pDestTiledResource, ref D3D11TiledResourceCoordinate pDestRegionStartCoordinate, ID3D11Resource* pSourceTiledResource, ref D3D11TiledResourceCoordinate pSourceRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppDestRegionStartCoordinate = &pDestRegionStartCoordinate)
			{
				fixed (D3D11TiledResourceCoordinate* ppSourceRegionStartCoordinate = &pSourceRegionStartCoordinate)
				{
					fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, pDestTiledResource, (D3D11TiledResourceCoordinate*)ppDestRegionStartCoordinate, pSourceTiledResource, (D3D11TiledResourceCoordinate*)ppSourceRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ref ID3D11Resource pDestTiledResource, ref D3D11TiledResourceCoordinate pDestRegionStartCoordinate, ID3D11Resource* pSourceTiledResource, ref D3D11TiledResourceCoordinate pSourceRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDestTiledResource = &pDestTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppDestRegionStartCoordinate = &pDestRegionStartCoordinate)
				{
					fixed (D3D11TiledResourceCoordinate* ppSourceRegionStartCoordinate = &pSourceRegionStartCoordinate)
					{
						fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, (ID3D11Resource*)ppDestTiledResource, (D3D11TiledResourceCoordinate*)ppDestRegionStartCoordinate, pSourceTiledResource, (D3D11TiledResourceCoordinate*)ppSourceRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ID3D11Resource* pDestTiledResource, D3D11TiledResourceCoordinate* pDestRegionStartCoordinate, ref ID3D11Resource pSourceTiledResource, ref D3D11TiledResourceCoordinate pSourceRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppSourceTiledResource = &pSourceTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppSourceRegionStartCoordinate = &pSourceRegionStartCoordinate)
				{
					fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, pDestTiledResource, pDestRegionStartCoordinate, (ID3D11Resource*)ppSourceTiledResource, (D3D11TiledResourceCoordinate*)ppSourceRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, flags);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ref ID3D11Resource pDestTiledResource, D3D11TiledResourceCoordinate* pDestRegionStartCoordinate, ref ID3D11Resource pSourceTiledResource, ref D3D11TiledResourceCoordinate pSourceRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDestTiledResource = &pDestTiledResource)
			{
				fixed (ID3D11Resource* ppSourceTiledResource = &pSourceTiledResource)
				{
					fixed (D3D11TiledResourceCoordinate* ppSourceRegionStartCoordinate = &pSourceRegionStartCoordinate)
					{
						fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, (ID3D11Resource*)ppDestTiledResource, pDestRegionStartCoordinate, (ID3D11Resource*)ppSourceTiledResource, (D3D11TiledResourceCoordinate*)ppSourceRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ID3D11Resource* pDestTiledResource, ref D3D11TiledResourceCoordinate pDestRegionStartCoordinate, ref ID3D11Resource pSourceTiledResource, ref D3D11TiledResourceCoordinate pSourceRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppDestRegionStartCoordinate = &pDestRegionStartCoordinate)
			{
				fixed (ID3D11Resource* ppSourceTiledResource = &pSourceTiledResource)
				{
					fixed (D3D11TiledResourceCoordinate* ppSourceRegionStartCoordinate = &pSourceRegionStartCoordinate)
					{
						fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, pDestTiledResource, (D3D11TiledResourceCoordinate*)ppDestRegionStartCoordinate, (ID3D11Resource*)ppSourceTiledResource, (D3D11TiledResourceCoordinate*)ppSourceRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, flags);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CopyTileMappings(ref ID3D11Resource pDestTiledResource, ref D3D11TiledResourceCoordinate pDestRegionStartCoordinate, ref ID3D11Resource pSourceTiledResource, ref D3D11TiledResourceCoordinate pSourceRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDestTiledResource = &pDestTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppDestRegionStartCoordinate = &pDestRegionStartCoordinate)
				{
					fixed (ID3D11Resource* ppSourceTiledResource = &pSourceTiledResource)
					{
						fixed (D3D11TiledResourceCoordinate* ppSourceRegionStartCoordinate = &pSourceRegionStartCoordinate)
						{
							fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, uint, HResult>)(LpVtbl[20]))(ptr, (ID3D11Resource*)ppDestTiledResource, (D3D11TiledResourceCoordinate*)ppDestRegionStartCoordinate, (ID3D11Resource*)ppSourceTiledResource, (D3D11TiledResourceCoordinate*)ppSourceRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, flags);
								return ret;
							}
						}
					}
				}
			}
		}

		public readonly unsafe void CopyTiles(ID3D11Resource* pTiledResource, D3D11TiledResourceCoordinate* pTileRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, ID3D11Buffer* pBuffer, ulong bufferStartOffsetInBytes, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, ulong, uint, void>)(LpVtbl[21]))(ptr, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
		}

		public readonly unsafe void CopyTiles(ref ID3D11Resource pTiledResource, D3D11TiledResourceCoordinate* pTileRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, ID3D11Buffer* pBuffer, ulong bufferStartOffsetInBytes, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, ulong, uint, void>)(LpVtbl[21]))(ptr, (ID3D11Resource*)ppTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
			}
		}

		public readonly unsafe void CopyTiles(ID3D11Resource* pTiledResource, ref D3D11TiledResourceCoordinate pTileRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, ID3D11Buffer* pBuffer, ulong bufferStartOffsetInBytes, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, ulong, uint, void>)(LpVtbl[21]))(ptr, pTiledResource, (D3D11TiledResourceCoordinate*)ppTileRegionStartCoordinate, pTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
			}
		}

		public readonly unsafe void CopyTiles(ref ID3D11Resource pTiledResource, ref D3D11TiledResourceCoordinate pTileRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, ID3D11Buffer* pBuffer, ulong bufferStartOffsetInBytes, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, ulong, uint, void>)(LpVtbl[21]))(ptr, (ID3D11Resource*)ppTiledResource, (D3D11TiledResourceCoordinate*)ppTileRegionStartCoordinate, pTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
				}
			}
		}

		public readonly unsafe void CopyTiles(ID3D11Resource* pTiledResource, D3D11TiledResourceCoordinate* pTileRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, ID3D11Buffer* pBuffer, ulong bufferStartOffsetInBytes, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, ulong, uint, void>)(LpVtbl[21]))(ptr, pTiledResource, pTileRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
			}
		}

		public readonly unsafe void CopyTiles(ref ID3D11Resource pTiledResource, D3D11TiledResourceCoordinate* pTileRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, ID3D11Buffer* pBuffer, ulong bufferStartOffsetInBytes, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, ulong, uint, void>)(LpVtbl[21]))(ptr, (ID3D11Resource*)ppTiledResource, pTileRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
				}
			}
		}

		public readonly unsafe void CopyTiles(ID3D11Resource* pTiledResource, ref D3D11TiledResourceCoordinate pTileRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, ID3D11Buffer* pBuffer, ulong bufferStartOffsetInBytes, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
			{
				fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, ulong, uint, void>)(LpVtbl[21]))(ptr, pTiledResource, (D3D11TiledResourceCoordinate*)ppTileRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
				}
			}
		}

		public readonly unsafe void CopyTiles(ref ID3D11Resource pTiledResource, ref D3D11TiledResourceCoordinate pTileRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, ID3D11Buffer* pBuffer, ulong bufferStartOffsetInBytes, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
				{
					fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, ulong, uint, void>)(LpVtbl[21]))(ptr, (ID3D11Resource*)ppTiledResource, (D3D11TiledResourceCoordinate*)ppTileRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
					}
				}
			}
		}

		public readonly unsafe void CopyTiles(ID3D11Resource* pTiledResource, D3D11TiledResourceCoordinate* pTileRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, ref ID3D11Buffer pBuffer, ulong bufferStartOffsetInBytes, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer* ppBuffer = &pBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, ulong, uint, void>)(LpVtbl[21]))(ptr, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, (ID3D11Buffer*)ppBuffer, bufferStartOffsetInBytes, flags);
			}
		}

		public readonly unsafe void CopyTiles(ref ID3D11Resource pTiledResource, D3D11TiledResourceCoordinate* pTileRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, ref ID3D11Buffer pBuffer, ulong bufferStartOffsetInBytes, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (ID3D11Buffer* ppBuffer = &pBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, ulong, uint, void>)(LpVtbl[21]))(ptr, (ID3D11Resource*)ppTiledResource, pTileRegionStartCoordinate, pTileRegionSize, (ID3D11Buffer*)ppBuffer, bufferStartOffsetInBytes, flags);
				}
			}
		}

		public readonly unsafe void CopyTiles(ID3D11Resource* pTiledResource, ref D3D11TiledResourceCoordinate pTileRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, ref ID3D11Buffer pBuffer, ulong bufferStartOffsetInBytes, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
			{
				fixed (ID3D11Buffer* ppBuffer = &pBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, ulong, uint, void>)(LpVtbl[21]))(ptr, pTiledResource, (D3D11TiledResourceCoordinate*)ppTileRegionStartCoordinate, pTileRegionSize, (ID3D11Buffer*)ppBuffer, bufferStartOffsetInBytes, flags);
				}
			}
		}

		public readonly unsafe void CopyTiles(ref ID3D11Resource pTiledResource, ref D3D11TiledResourceCoordinate pTileRegionStartCoordinate, D3D11TileRegionSize* pTileRegionSize, ref ID3D11Buffer pBuffer, ulong bufferStartOffsetInBytes, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
				{
					fixed (ID3D11Buffer* ppBuffer = &pBuffer)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, ulong, uint, void>)(LpVtbl[21]))(ptr, (ID3D11Resource*)ppTiledResource, (D3D11TiledResourceCoordinate*)ppTileRegionStartCoordinate, pTileRegionSize, (ID3D11Buffer*)ppBuffer, bufferStartOffsetInBytes, flags);
					}
				}
			}
		}

		public readonly unsafe void CopyTiles(ID3D11Resource* pTiledResource, D3D11TiledResourceCoordinate* pTileRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, ref ID3D11Buffer pBuffer, ulong bufferStartOffsetInBytes, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
			{
				fixed (ID3D11Buffer* ppBuffer = &pBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, ulong, uint, void>)(LpVtbl[21]))(ptr, pTiledResource, pTileRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, (ID3D11Buffer*)ppBuffer, bufferStartOffsetInBytes, flags);
				}
			}
		}

		public readonly unsafe void CopyTiles(ref ID3D11Resource pTiledResource, D3D11TiledResourceCoordinate* pTileRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, ref ID3D11Buffer pBuffer, ulong bufferStartOffsetInBytes, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
				{
					fixed (ID3D11Buffer* ppBuffer = &pBuffer)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, ulong, uint, void>)(LpVtbl[21]))(ptr, (ID3D11Resource*)ppTiledResource, pTileRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, (ID3D11Buffer*)ppBuffer, bufferStartOffsetInBytes, flags);
					}
				}
			}
		}

		public readonly unsafe void CopyTiles(ID3D11Resource* pTiledResource, ref D3D11TiledResourceCoordinate pTileRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, ref ID3D11Buffer pBuffer, ulong bufferStartOffsetInBytes, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
			{
				fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
				{
					fixed (ID3D11Buffer* ppBuffer = &pBuffer)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, ulong, uint, void>)(LpVtbl[21]))(ptr, pTiledResource, (D3D11TiledResourceCoordinate*)ppTileRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, (ID3D11Buffer*)ppBuffer, bufferStartOffsetInBytes, flags);
					}
				}
			}
		}

		public readonly unsafe void CopyTiles(ref ID3D11Resource pTiledResource, ref D3D11TiledResourceCoordinate pTileRegionStartCoordinate, ref D3D11TileRegionSize pTileRegionSize, ref ID3D11Buffer pBuffer, ulong bufferStartOffsetInBytes, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
				{
					fixed (D3D11TileRegionSize* ppTileRegionSize = &pTileRegionSize)
					{
						fixed (ID3D11Buffer* ppBuffer = &pBuffer)
						{
							((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, ID3D11Buffer*, ulong, uint, void>)(LpVtbl[21]))(ptr, (ID3D11Resource*)ppTiledResource, (D3D11TiledResourceCoordinate*)ppTileRegionStartCoordinate, (D3D11TileRegionSize*)ppTileRegionSize, (ID3D11Buffer*)ppBuffer, bufferStartOffsetInBytes, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTiles(ID3D11Resource* pDestTiledResource, D3D11TiledResourceCoordinate* pDestTileRegionStartCoordinate, D3D11TileRegionSize* pDestTileRegionSize, void* pSourceTileData, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, void*, uint, void>)(LpVtbl[22]))(ptr, pDestTiledResource, pDestTileRegionStartCoordinate, pDestTileRegionSize, pSourceTileData, flags);
		}

		public readonly unsafe void UpdateTiles(ref ID3D11Resource pDestTiledResource, D3D11TiledResourceCoordinate* pDestTileRegionStartCoordinate, D3D11TileRegionSize* pDestTileRegionSize, void* pSourceTileData, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDestTiledResource = &pDestTiledResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, void*, uint, void>)(LpVtbl[22]))(ptr, (ID3D11Resource*)ppDestTiledResource, pDestTileRegionStartCoordinate, pDestTileRegionSize, pSourceTileData, flags);
			}
		}

		public readonly unsafe void UpdateTiles(ID3D11Resource* pDestTiledResource, ref D3D11TiledResourceCoordinate pDestTileRegionStartCoordinate, D3D11TileRegionSize* pDestTileRegionSize, void* pSourceTileData, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppDestTileRegionStartCoordinate = &pDestTileRegionStartCoordinate)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, void*, uint, void>)(LpVtbl[22]))(ptr, pDestTiledResource, (D3D11TiledResourceCoordinate*)ppDestTileRegionStartCoordinate, pDestTileRegionSize, pSourceTileData, flags);
			}
		}

		public readonly unsafe void UpdateTiles(ref ID3D11Resource pDestTiledResource, ref D3D11TiledResourceCoordinate pDestTileRegionStartCoordinate, D3D11TileRegionSize* pDestTileRegionSize, void* pSourceTileData, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDestTiledResource = &pDestTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppDestTileRegionStartCoordinate = &pDestTileRegionStartCoordinate)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, void*, uint, void>)(LpVtbl[22]))(ptr, (ID3D11Resource*)ppDestTiledResource, (D3D11TiledResourceCoordinate*)ppDestTileRegionStartCoordinate, pDestTileRegionSize, pSourceTileData, flags);
				}
			}
		}

		public readonly unsafe void UpdateTiles(ID3D11Resource* pDestTiledResource, D3D11TiledResourceCoordinate* pDestTileRegionStartCoordinate, ref D3D11TileRegionSize pDestTileRegionSize, void* pSourceTileData, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileRegionSize* ppDestTileRegionSize = &pDestTileRegionSize)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, void*, uint, void>)(LpVtbl[22]))(ptr, pDestTiledResource, pDestTileRegionStartCoordinate, (D3D11TileRegionSize*)ppDestTileRegionSize, pSourceTileData, flags);
			}
		}

		public readonly unsafe void UpdateTiles(ref ID3D11Resource pDestTiledResource, D3D11TiledResourceCoordinate* pDestTileRegionStartCoordinate, ref D3D11TileRegionSize pDestTileRegionSize, void* pSourceTileData, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDestTiledResource = &pDestTiledResource)
			{
				fixed (D3D11TileRegionSize* ppDestTileRegionSize = &pDestTileRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, void*, uint, void>)(LpVtbl[22]))(ptr, (ID3D11Resource*)ppDestTiledResource, pDestTileRegionStartCoordinate, (D3D11TileRegionSize*)ppDestTileRegionSize, pSourceTileData, flags);
				}
			}
		}

		public readonly unsafe void UpdateTiles(ID3D11Resource* pDestTiledResource, ref D3D11TiledResourceCoordinate pDestTileRegionStartCoordinate, ref D3D11TileRegionSize pDestTileRegionSize, void* pSourceTileData, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TiledResourceCoordinate* ppDestTileRegionStartCoordinate = &pDestTileRegionStartCoordinate)
			{
				fixed (D3D11TileRegionSize* ppDestTileRegionSize = &pDestTileRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, void*, uint, void>)(LpVtbl[22]))(ptr, pDestTiledResource, (D3D11TiledResourceCoordinate*)ppDestTileRegionStartCoordinate, (D3D11TileRegionSize*)ppDestTileRegionSize, pSourceTileData, flags);
				}
			}
		}

		public readonly unsafe void UpdateTiles(ref ID3D11Resource pDestTiledResource, ref D3D11TiledResourceCoordinate pDestTileRegionStartCoordinate, ref D3D11TileRegionSize pDestTileRegionSize, void* pSourceTileData, uint flags)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDestTiledResource = &pDestTiledResource)
			{
				fixed (D3D11TiledResourceCoordinate* ppDestTileRegionStartCoordinate = &pDestTileRegionStartCoordinate)
				{
					fixed (D3D11TileRegionSize* ppDestTileRegionSize = &pDestTileRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Resource*, D3D11TiledResourceCoordinate*, D3D11TileRegionSize*, void*, uint, void>)(LpVtbl[22]))(ptr, (ID3D11Resource*)ppDestTiledResource, (D3D11TiledResourceCoordinate*)ppDestTileRegionStartCoordinate, (D3D11TileRegionSize*)ppDestTileRegionSize, pSourceTileData, flags);
					}
				}
			}
		}

		public readonly unsafe HResult ResizeTilePool(ID3D11Buffer* pTilePool, ulong newSizeInBytes)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Buffer*, ulong, HResult>)(LpVtbl[23]))(ptr, pTilePool, newSizeInBytes);
			return ret;
		}

		public readonly unsafe HResult ResizeTilePool(ref ID3D11Buffer pTilePool, ulong newSizeInBytes)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer* ppTilePool = &pTilePool)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11Buffer*, ulong, HResult>)(LpVtbl[23]))(ptr, (ID3D11Buffer*)ppTilePool, newSizeInBytes);
				return ret;
			}
		}

		public readonly unsafe void TiledResourceBarrier(ID3D11DeviceChild* pTiledResourceOrViewAccessBeforeBarrier, ID3D11DeviceChild* pTiledResourceOrViewAccessAfterBarrier)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11DeviceChild*, ID3D11DeviceChild*, void>)(LpVtbl[24]))(ptr, pTiledResourceOrViewAccessBeforeBarrier, pTiledResourceOrViewAccessAfterBarrier);
		}

		public readonly unsafe void TiledResourceBarrier(ref ID3D11DeviceChild pTiledResourceOrViewAccessBeforeBarrier, ID3D11DeviceChild* pTiledResourceOrViewAccessAfterBarrier)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceChild* ppTiledResourceOrViewAccessBeforeBarrier = &pTiledResourceOrViewAccessBeforeBarrier)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11DeviceChild*, ID3D11DeviceChild*, void>)(LpVtbl[24]))(ptr, (ID3D11DeviceChild*)ppTiledResourceOrViewAccessBeforeBarrier, pTiledResourceOrViewAccessAfterBarrier);
			}
		}

		public readonly unsafe void TiledResourceBarrier(ID3D11DeviceChild* pTiledResourceOrViewAccessBeforeBarrier, ref ID3D11DeviceChild pTiledResourceOrViewAccessAfterBarrier)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceChild* ppTiledResourceOrViewAccessAfterBarrier = &pTiledResourceOrViewAccessAfterBarrier)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11DeviceChild*, ID3D11DeviceChild*, void>)(LpVtbl[24]))(ptr, pTiledResourceOrViewAccessBeforeBarrier, (ID3D11DeviceChild*)ppTiledResourceOrViewAccessAfterBarrier);
			}
		}

		public readonly unsafe void TiledResourceBarrier(ref ID3D11DeviceChild pTiledResourceOrViewAccessBeforeBarrier, ref ID3D11DeviceChild pTiledResourceOrViewAccessAfterBarrier)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceChild* ppTiledResourceOrViewAccessBeforeBarrier = &pTiledResourceOrViewAccessBeforeBarrier)
			{
				fixed (ID3D11DeviceChild* ppTiledResourceOrViewAccessAfterBarrier = &pTiledResourceOrViewAccessAfterBarrier)
				{
					((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, ID3D11DeviceChild*, ID3D11DeviceChild*, void>)(LpVtbl[24]))(ptr, (ID3D11DeviceChild*)ppTiledResourceOrViewAccessBeforeBarrier, (ID3D11DeviceChild*)ppTiledResourceOrViewAccessAfterBarrier);
				}
			}
		}

		public readonly unsafe int IsAnnotationEnabled()
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, int>)(LpVtbl[25]))(ptr);
			return ret;
		}

		public readonly unsafe void SetMarkerInt(char* pLabel, int data)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, char*, int, void>)(LpVtbl[26]))(ptr, pLabel, data);
		}

		public readonly unsafe void BeginEventInt(char* pLabel, int data)
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, char*, int, void>)(LpVtbl[27]))(ptr, pLabel, data);
		}

		public readonly unsafe void EndEvent()
		{
			ID3D11DeviceContext2* ptr = (ID3D11DeviceContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext2*, void>)(LpVtbl[28]))(ptr);
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceContext1 (ID3D11DeviceContext2 value)
		{
			return Unsafe.As<ID3D11DeviceContext2, ID3D11DeviceContext1>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceContext (ID3D11DeviceContext2 value)
		{
			return Unsafe.As<ID3D11DeviceContext2, ID3D11DeviceContext>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11DeviceContext2 value)
		{
			return Unsafe.As<ID3D11DeviceContext2, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11DeviceContext2 value)
		{
			return Unsafe.As<ID3D11DeviceContext2, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_TILED_RESOURCE_COORDINATE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11TiledResourceCoordinate
	{
		[NativeName("X")]
		public uint X;
		[NativeName("Y")]
		public uint Y;
		[NativeName("Z")]
		public uint Z;
		[NativeName("Subresource")]
		public uint Subresource;


	}

	[NativeName("D3D11_TILE_REGION_SIZE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11TileRegionSize
	{
		[NativeName("NumTiles")]
		public uint NumTiles;
		[NativeName("bUseBox")]
		public int BUseBox;
		[NativeName("Width")]
		public uint Width;
		[NativeName("Height")]
		public ushort Height;
		[NativeName("Depth")]
		public ushort Depth;


	}

	[Guid("9d06dffa-d1e5-4d07-83a8-1bb123f2f841")]
	[NativeName("ID3D11Device2")]
	public partial struct ID3D11Device2 : IComObject, IComObject<ID3D11Device2>, IComObject<ID3D11Device1>, IComObject<ID3D11Device>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("9d06dffa-d1e5-4d07-83a8-1bb123f2f841");

		public unsafe ID3D11Device2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetImmediateContext2(ID3D11DeviceContext2** ppImmediateContext)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11DeviceContext2**, void>)(LpVtbl[7]))(ptr, ppImmediateContext);
		}

		public readonly unsafe void GetImmediateContext2(ref ID3D11DeviceContext2* ppImmediateContext)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceContext2** pppImmediateContext = &ppImmediateContext)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11DeviceContext2**, void>)(LpVtbl[7]))(ptr, (ID3D11DeviceContext2**)pppImmediateContext);
			}
		}

		public readonly unsafe HResult CreateDeferredContext2(uint contextFlags, ID3D11DeviceContext2** ppDeferredContext)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, ID3D11DeviceContext2**, HResult>)(LpVtbl[8]))(ptr, contextFlags, ppDeferredContext);
			return ret;
		}

		public readonly unsafe HResult CreateDeferredContext2(uint contextFlags, ref ID3D11DeviceContext2* ppDeferredContext)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceContext2** pppDeferredContext = &ppDeferredContext)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, uint, ID3D11DeviceContext2**, HResult>)(LpVtbl[8]))(ptr, contextFlags, (ID3D11DeviceContext2**)pppDeferredContext);
				return ret;
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D11SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
						{
							fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
							{
								((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
			{
				fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
						{
							fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
			{
				fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, D3D11TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, D3D11PackedMipDesc* pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref D3D11PackedMipDesc pPackedMipDesc, ref D3D11TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D11SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D11PackedMipDesc* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (D3D11TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
						{
							fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
							{
								fixed (D3D11SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
								{
									((delegate* unmanaged[Stdcall]<ID3D11Device2*, ID3D11Resource*, uint*, D3D11PackedMipDesc*, D3D11TileShape*, uint*, uint, D3D11SubresourceTiling*, void>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D11PackedMipDesc*)ppPackedMipDesc, (D3D11TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D11SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult CheckMultisampleQualityLevels1(DxgiFormat format, uint sampleCount, uint flags, uint* pNumQualityLevels)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, DxgiFormat, uint, uint, uint*, HResult>)(LpVtbl[10]))(ptr, format, sampleCount, flags, pNumQualityLevels);
			return ret;
		}

		public readonly unsafe HResult CheckMultisampleQualityLevels1(DxgiFormat format, uint sampleCount, uint flags, ref uint pNumQualityLevels)
		{
			ID3D11Device2* ptr = (ID3D11Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumQualityLevels = &pNumQualityLevels)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device2*, DxgiFormat, uint, uint, uint*, HResult>)(LpVtbl[10]))(ptr, format, sampleCount, flags, (uint*)ppNumQualityLevels);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11Device1 (ID3D11Device2 value)
		{
			return Unsafe.As<ID3D11Device2, ID3D11Device1>(ref value);
		}

		public unsafe static implicit operator ID3D11Device (ID3D11Device2 value)
		{
			return Unsafe.As<ID3D11Device2, ID3D11Device>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11Device2 value)
		{
			return Unsafe.As<ID3D11Device2, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_PACKED_MIP_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11PackedMipDesc
	{
		[NativeName("NumStandardMips")]
		public byte NumStandardMips;
		[NativeName("NumPackedMips")]
		public byte NumPackedMips;
		[NativeName("NumTilesForPackedMips")]
		public uint NumTilesForPackedMips;
		[NativeName("StartTileIndexInOverallResource")]
		public uint StartTileIndexInOverallResource;


	}

	[NativeName("D3D11_TILE_SHAPE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11TileShape
	{
		[NativeName("WidthInTexels")]
		public uint WidthInTexels;
		[NativeName("HeightInTexels")]
		public uint HeightInTexels;
		[NativeName("DepthInTexels")]
		public uint DepthInTexels;


	}

	[NativeName("D3D11_SUBRESOURCE_TILING")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11SubresourceTiling
	{
		[NativeName("WidthInTiles")]
		public uint WidthInTiles;
		[NativeName("HeightInTiles")]
		public ushort HeightInTiles;
		[NativeName("DepthInTiles")]
		public ushort DepthInTiles;
		[NativeName("StartTileIndexInOverallResource")]
		public uint StartTileIndexInOverallResource;


	}

	[Guid("51218251-1e33-4617-9ccb-4d3a4367e7bb")]
	[NativeName("ID3D11Texture2D1")]
	public partial struct ID3D11Texture2D1 : IComObject, IComObject<ID3D11Texture2D1>, IComObject<ID3D11Texture2D>, IComObject<ID3D11Resource>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("51218251-1e33-4617-9ccb-4d3a4367e7bb");

		public unsafe ID3D11Texture2D1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc1(D3D11Texture2DDesc1* pDesc)
		{
			ID3D11Texture2D1* ptr = (ID3D11Texture2D1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Texture2D1*, D3D11Texture2DDesc1*, void>)(LpVtbl[1]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc1(ref D3D11Texture2DDesc1 pDesc)
		{
			ID3D11Texture2D1* ptr = (ID3D11Texture2D1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture2DDesc1* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Texture2D1*, D3D11Texture2DDesc1*, void>)(LpVtbl[1]))(ptr, (D3D11Texture2DDesc1*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11Texture2D (ID3D11Texture2D1 value)
		{
			return Unsafe.As<ID3D11Texture2D1, ID3D11Texture2D>(ref value);
		}

		public unsafe static implicit operator ID3D11Resource (ID3D11Texture2D1 value)
		{
			return Unsafe.As<ID3D11Texture2D1, ID3D11Resource>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11Texture2D1 value)
		{
			return Unsafe.As<ID3D11Texture2D1, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11Texture2D1 value)
		{
			return Unsafe.As<ID3D11Texture2D1, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_TEXTURE2D_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Texture2DDesc1
	{
		[NativeName("Width")]
		public uint Width;
		[NativeName("Height")]
		public uint Height;
		[NativeName("MipLevels")]
		public uint MipLevels;
		[NativeName("ArraySize")]
		public uint ArraySize;
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("SampleDesc")]
		public DxgiSampleDesc SampleDesc;
		[NativeName("Usage")]
		public D3D11Usage Usage;
		[NativeName("BindFlags")]
		public uint BindFlags;
		[NativeName("CPUAccessFlags")]
		public uint CPUAccessFlags;
		[NativeName("MiscFlags")]
		public uint MiscFlags;
		[NativeName("TextureLayout")]
		public D3D11TextureLayout TextureLayout;


	}

	[Guid("0c711683-2853-4846-9bb0-f3e60639e46a")]
	[NativeName("ID3D11Texture3D1")]
	public partial struct ID3D11Texture3D1 : IComObject, IComObject<ID3D11Texture3D1>, IComObject<ID3D11Texture3D>, IComObject<ID3D11Resource>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("0c711683-2853-4846-9bb0-f3e60639e46a");

		public unsafe ID3D11Texture3D1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc1(D3D11Texture3DDesc1* pDesc)
		{
			ID3D11Texture3D1* ptr = (ID3D11Texture3D1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Texture3D1*, D3D11Texture3DDesc1*, void>)(LpVtbl[1]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc1(ref D3D11Texture3DDesc1 pDesc)
		{
			ID3D11Texture3D1* ptr = (ID3D11Texture3D1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture3DDesc1* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Texture3D1*, D3D11Texture3DDesc1*, void>)(LpVtbl[1]))(ptr, (D3D11Texture3DDesc1*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11Texture3D (ID3D11Texture3D1 value)
		{
			return Unsafe.As<ID3D11Texture3D1, ID3D11Texture3D>(ref value);
		}

		public unsafe static implicit operator ID3D11Resource (ID3D11Texture3D1 value)
		{
			return Unsafe.As<ID3D11Texture3D1, ID3D11Resource>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11Texture3D1 value)
		{
			return Unsafe.As<ID3D11Texture3D1, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11Texture3D1 value)
		{
			return Unsafe.As<ID3D11Texture3D1, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_3_0000_0001 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D11_TEXTURE3D_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Texture3DDesc1
	{
		[NativeName("Width")]
		public uint Width;
		[NativeName("Height")]
		public uint Height;
		[NativeName("Depth")]
		public uint Depth;
		[NativeName("MipLevels")]
		public uint MipLevels;
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("Usage")]
		public D3D11Usage Usage;
		[NativeName("BindFlags")]
		public uint BindFlags;
		[NativeName("CPUAccessFlags")]
		public uint CPUAccessFlags;
		[NativeName("MiscFlags")]
		public uint MiscFlags;
		[NativeName("TextureLayout")]
		public D3D11TextureLayout TextureLayout;


	}

	[Guid("6fbd02fb-209f-46c4-b059-2ed15586a6ac")]
	[NativeName("ID3D11RasterizerState2")]
	public partial struct ID3D11RasterizerState2 : IComObject, IComObject<ID3D11RasterizerState2>, IComObject<ID3D11RasterizerState1>, IComObject<ID3D11RasterizerState>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("6fbd02fb-209f-46c4-b059-2ed15586a6ac");

		public unsafe ID3D11RasterizerState2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc2(D3D11RasterizerDesc2* pDesc)
		{
			ID3D11RasterizerState2* ptr = (ID3D11RasterizerState2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11RasterizerState2*, D3D11RasterizerDesc2*, void>)(LpVtbl[1]))(ptr, pDesc);
		}

		public readonly unsafe void GetDesc2(ref D3D11RasterizerDesc2 pDesc)
		{
			ID3D11RasterizerState2* ptr = (ID3D11RasterizerState2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11RasterizerDesc2* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D11RasterizerState2*, D3D11RasterizerDesc2*, void>)(LpVtbl[1]))(ptr, (D3D11RasterizerDesc2*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11RasterizerState1 (ID3D11RasterizerState2 value)
		{
			return Unsafe.As<ID3D11RasterizerState2, ID3D11RasterizerState1>(ref value);
		}

		public unsafe static implicit operator ID3D11RasterizerState (ID3D11RasterizerState2 value)
		{
			return Unsafe.As<ID3D11RasterizerState2, ID3D11RasterizerState>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11RasterizerState2 value)
		{
			return Unsafe.As<ID3D11RasterizerState2, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11RasterizerState2 value)
		{
			return Unsafe.As<ID3D11RasterizerState2, IUnknown>(ref value);
		}

	}

	[NativeName("D3D11_RASTERIZER_DESC2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11RasterizerDesc2
	{
		[NativeName("FillMode")]
		public D3D11FillMode FillMode;
		[NativeName("CullMode")]
		public D3D11CullMode CullMode;
		[NativeName("FrontCounterClockwise")]
		public int FrontCounterClockwise;
		[NativeName("DepthBias")]
		public int DepthBias;
		[NativeName("DepthBiasClamp")]
		public float DepthBiasClamp;
		[NativeName("SlopeScaledDepthBias")]
		public float SlopeScaledDepthBias;
		[NativeName("DepthClipEnable")]
		public int DepthClipEnable;
		[NativeName("ScissorEnable")]
		public int ScissorEnable;
		[NativeName("MultisampleEnable")]
		public int MultisampleEnable;
		[NativeName("AntialiasedLineEnable")]
		public int AntialiasedLineEnable;
		[NativeName("ForcedSampleCount")]
		public uint ForcedSampleCount;
		[NativeName("ConservativeRaster")]
		public D3D11ConservativeRasterizationMode ConservativeRaster;


	}

	[Guid("91308b87-9040-411d-8c67-c39253ce3802")]
	[NativeName("ID3D11ShaderResourceView1")]
	public partial struct ID3D11ShaderResourceView1 : IComObject, IComObject<ID3D11ShaderResourceView1>, IComObject<ID3D11ShaderResourceView>, IComObject<ID3D11View>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("91308b87-9040-411d-8c67-c39253ce3802");

		public unsafe ID3D11ShaderResourceView1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc1(D3D11ShaderResourceViewDesc1* pDesc1)
		{
			ID3D11ShaderResourceView1* ptr = (ID3D11ShaderResourceView1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11ShaderResourceView1*, D3D11ShaderResourceViewDesc1*, void>)(LpVtbl[1]))(ptr, pDesc1);
		}

		public readonly unsafe void GetDesc1(ref D3D11ShaderResourceViewDesc1 pDesc1)
		{
			ID3D11ShaderResourceView1* ptr = (ID3D11ShaderResourceView1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ShaderResourceViewDesc1* ppDesc1 = &pDesc1)
			{
				((delegate* unmanaged[Stdcall]<ID3D11ShaderResourceView1*, D3D11ShaderResourceViewDesc1*, void>)(LpVtbl[1]))(ptr, (D3D11ShaderResourceViewDesc1*)ppDesc1);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11ShaderResourceView (ID3D11ShaderResourceView1 value)
		{
			return Unsafe.As<ID3D11ShaderResourceView1, ID3D11ShaderResourceView>(ref value);
		}

		public unsafe static implicit operator ID3D11View (ID3D11ShaderResourceView1 value)
		{
			return Unsafe.As<ID3D11ShaderResourceView1, ID3D11View>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11ShaderResourceView1 value)
		{
			return Unsafe.As<ID3D11ShaderResourceView1, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11ShaderResourceView1 value)
		{
			return Unsafe.As<ID3D11ShaderResourceView1, IUnknown>(ref value);
		}

	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D11ShaderResourceViewDesc1Union
	{
		[NativeName("Buffer")]
		[FieldOffset(0)]
		public D3D11BufferSrv Buffer;
		[NativeName("Texture1D")]
		[FieldOffset(0)]
		public D3D11Tex1DSrv Texture1D;
		[NativeName("Texture1DArray")]
		[FieldOffset(0)]
		public D3D11Tex1DArraySrv Texture1DArray;
		[NativeName("Texture2D")]
		[FieldOffset(0)]
		public D3D11Tex2DSrv1 Texture2D;
		[NativeName("Texture2DArray")]
		[FieldOffset(0)]
		public D3D11Tex2DArraySrv1 Texture2DArray;
		[NativeName("Texture2DMS")]
		[FieldOffset(0)]
		public D3D11Tex2DmsSrv Texture2DMS;
		[NativeName("Texture2DMSArray")]
		[FieldOffset(0)]
		public D3D11Tex2DmsArraySrv Texture2DMSArray;
		[NativeName("Texture3D")]
		[FieldOffset(0)]
		public D3D11Tex3DSrv Texture3D;
		[NativeName("TextureCube")]
		[FieldOffset(0)]
		public D3D11TexcubeSrv TextureCube;
		[NativeName("TextureCubeArray")]
		[FieldOffset(0)]
		public D3D11TexcubeArraySrv TextureCubeArray;
		[NativeName("BufferEx")]
		[FieldOffset(0)]
		public D3D11BufferexSrv BufferEx;


	}

	[NativeName("D3D11_SHADER_RESOURCE_VIEW_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11ShaderResourceViewDesc1
	{
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("ViewDimension")]
		public D3D11SrvDimension ViewDimension;
		[NativeName("")]
		public D3D11ShaderResourceViewDesc1Union D3D11ShaderResourceViewDesc1Union;


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_3_0000_0003 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D11_TEX2D_SRV1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DSrv1
	{
		[NativeName("MostDetailedMip")]
		public uint MostDetailedMip;
		[NativeName("MipLevels")]
		public uint MipLevels;
		[NativeName("PlaneSlice")]
		public uint PlaneSlice;


	}

	[NativeName("D3D11_TEX2D_ARRAY_SRV1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DArraySrv1
	{
		[NativeName("MostDetailedMip")]
		public uint MostDetailedMip;
		[NativeName("MipLevels")]
		public uint MipLevels;
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;
		[NativeName("PlaneSlice")]
		public uint PlaneSlice;


	}

	[Guid("ffbe2e23-f011-418a-ac56-5ceed7c5b94b")]
	[NativeName("ID3D11RenderTargetView1")]
	public partial struct ID3D11RenderTargetView1 : IComObject, IComObject<ID3D11RenderTargetView1>, IComObject<ID3D11RenderTargetView>, IComObject<ID3D11View>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("ffbe2e23-f011-418a-ac56-5ceed7c5b94b");

		public unsafe ID3D11RenderTargetView1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc1(D3D11RenderTargetViewDesc1* pDesc1)
		{
			ID3D11RenderTargetView1* ptr = (ID3D11RenderTargetView1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11RenderTargetView1*, D3D11RenderTargetViewDesc1*, void>)(LpVtbl[1]))(ptr, pDesc1);
		}

		public readonly unsafe void GetDesc1(ref D3D11RenderTargetViewDesc1 pDesc1)
		{
			ID3D11RenderTargetView1* ptr = (ID3D11RenderTargetView1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11RenderTargetViewDesc1* ppDesc1 = &pDesc1)
			{
				((delegate* unmanaged[Stdcall]<ID3D11RenderTargetView1*, D3D11RenderTargetViewDesc1*, void>)(LpVtbl[1]))(ptr, (D3D11RenderTargetViewDesc1*)ppDesc1);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11RenderTargetView (ID3D11RenderTargetView1 value)
		{
			return Unsafe.As<ID3D11RenderTargetView1, ID3D11RenderTargetView>(ref value);
		}

		public unsafe static implicit operator ID3D11View (ID3D11RenderTargetView1 value)
		{
			return Unsafe.As<ID3D11RenderTargetView1, ID3D11View>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11RenderTargetView1 value)
		{
			return Unsafe.As<ID3D11RenderTargetView1, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11RenderTargetView1 value)
		{
			return Unsafe.As<ID3D11RenderTargetView1, IUnknown>(ref value);
		}

	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D11RenderTargetViewDesc1Union
	{
		[NativeName("Buffer")]
		[FieldOffset(0)]
		public D3D11BufferRtv Buffer;
		[NativeName("Texture1D")]
		[FieldOffset(0)]
		public D3D11Tex1DRtv Texture1D;
		[NativeName("Texture1DArray")]
		[FieldOffset(0)]
		public D3D11Tex1DArrayRtv Texture1DArray;
		[NativeName("Texture2D")]
		[FieldOffset(0)]
		public D3D11Tex2DRtv1 Texture2D;
		[NativeName("Texture2DArray")]
		[FieldOffset(0)]
		public D3D11Tex2DArrayRtv1 Texture2DArray;
		[NativeName("Texture2DMS")]
		[FieldOffset(0)]
		public D3D11Tex2DmsRtv Texture2DMS;
		[NativeName("Texture2DMSArray")]
		[FieldOffset(0)]
		public D3D11Tex2DmsArrayRtv Texture2DMSArray;
		[NativeName("Texture3D")]
		[FieldOffset(0)]
		public D3D11Tex3DRtv Texture3D;


	}

	[NativeName("D3D11_RENDER_TARGET_VIEW_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11RenderTargetViewDesc1
	{
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("ViewDimension")]
		public D3D11RtvDimension ViewDimension;
		[NativeName("")]
		public D3D11RenderTargetViewDesc1Union D3D11RenderTargetViewDesc1Union;


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_3_0000_0004 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D11_TEX2D_RTV1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DRtv1
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("PlaneSlice")]
		public uint PlaneSlice;


	}

	[NativeName("D3D11_TEX2D_ARRAY_RTV1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DArrayRtv1
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;
		[NativeName("PlaneSlice")]
		public uint PlaneSlice;


	}

	[Guid("7b3b6153-a886-4544-ab37-6537c8500403")]
	[NativeName("ID3D11UnorderedAccessView1")]
	public partial struct ID3D11UnorderedAccessView1 : IComObject, IComObject<ID3D11UnorderedAccessView1>, IComObject<ID3D11UnorderedAccessView>, IComObject<ID3D11View>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("7b3b6153-a886-4544-ab37-6537c8500403");

		public unsafe ID3D11UnorderedAccessView1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc1(D3D11UnorderedAccessViewDesc1* pDesc1)
		{
			ID3D11UnorderedAccessView1* ptr = (ID3D11UnorderedAccessView1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11UnorderedAccessView1*, D3D11UnorderedAccessViewDesc1*, void>)(LpVtbl[1]))(ptr, pDesc1);
		}

		public readonly unsafe void GetDesc1(ref D3D11UnorderedAccessViewDesc1 pDesc1)
		{
			ID3D11UnorderedAccessView1* ptr = (ID3D11UnorderedAccessView1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11UnorderedAccessViewDesc1* ppDesc1 = &pDesc1)
			{
				((delegate* unmanaged[Stdcall]<ID3D11UnorderedAccessView1*, D3D11UnorderedAccessViewDesc1*, void>)(LpVtbl[1]))(ptr, (D3D11UnorderedAccessViewDesc1*)ppDesc1);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11UnorderedAccessView (ID3D11UnorderedAccessView1 value)
		{
			return Unsafe.As<ID3D11UnorderedAccessView1, ID3D11UnorderedAccessView>(ref value);
		}

		public unsafe static implicit operator ID3D11View (ID3D11UnorderedAccessView1 value)
		{
			return Unsafe.As<ID3D11UnorderedAccessView1, ID3D11View>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11UnorderedAccessView1 value)
		{
			return Unsafe.As<ID3D11UnorderedAccessView1, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11UnorderedAccessView1 value)
		{
			return Unsafe.As<ID3D11UnorderedAccessView1, IUnknown>(ref value);
		}

	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D11UnorderedAccessViewDesc1Union
	{
		[NativeName("Buffer")]
		[FieldOffset(0)]
		public D3D11BufferUav Buffer;
		[NativeName("Texture1D")]
		[FieldOffset(0)]
		public D3D11Tex1DUav Texture1D;
		[NativeName("Texture1DArray")]
		[FieldOffset(0)]
		public D3D11Tex1DArrayUav Texture1DArray;
		[NativeName("Texture2D")]
		[FieldOffset(0)]
		public D3D11Tex2DUav1 Texture2D;
		[NativeName("Texture2DArray")]
		[FieldOffset(0)]
		public D3D11Tex2DArrayUav1 Texture2DArray;
		[NativeName("Texture3D")]
		[FieldOffset(0)]
		public D3D11Tex3DUav Texture3D;


	}

	[NativeName("D3D11_UNORDERED_ACCESS_VIEW_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11UnorderedAccessViewDesc1
	{
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("ViewDimension")]
		public D3D11UavDimension ViewDimension;
		[NativeName("")]
		public D3D11UnorderedAccessViewDesc1Union D3D11UnorderedAccessViewDesc1Union;


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_3_0000_0005 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D11_TEX2D_UAV1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DUav1
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("PlaneSlice")]
		public uint PlaneSlice;


	}

	[NativeName("D3D11_TEX2D_ARRAY_UAV1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Tex2DArrayUav1
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;
		[NativeName("PlaneSlice")]
		public uint PlaneSlice;


	}

	[Guid("631b4766-36dc-461d-8db6-c47e13e60916")]
	[NativeName("ID3D11Query1")]
	public partial struct ID3D11Query1 : IComObject, IComObject<ID3D11Query1>, IComObject<ID3D11Query>, IComObject<ID3D11Asynchronous>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("631b4766-36dc-461d-8db6-c47e13e60916");

		public unsafe ID3D11Query1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void GetDesc1(D3D11QueryDesc1* pDesc1)
		{
			ID3D11Query1* ptr = (ID3D11Query1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Query1*, D3D11QueryDesc1*, void>)(LpVtbl[1]))(ptr, pDesc1);
		}

		public readonly unsafe void GetDesc1(ref D3D11QueryDesc1 pDesc1)
		{
			ID3D11Query1* ptr = (ID3D11Query1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11QueryDesc1* ppDesc1 = &pDesc1)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Query1*, D3D11QueryDesc1*, void>)(LpVtbl[1]))(ptr, (D3D11QueryDesc1*)ppDesc1);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11Query (ID3D11Query1 value)
		{
			return Unsafe.As<ID3D11Query1, ID3D11Query>(ref value);
		}

		public unsafe static implicit operator ID3D11Asynchronous (ID3D11Query1 value)
		{
			return Unsafe.As<ID3D11Query1, ID3D11Asynchronous>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11Query1 value)
		{
			return Unsafe.As<ID3D11Query1, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11Query1 value)
		{
			return Unsafe.As<ID3D11Query1, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_3_0000_0006 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D11_QUERY_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11QueryDesc1
	{
		[NativeName("Query")]
		public D3D11Query Query;
		[NativeName("MiscFlags")]
		public uint MiscFlags;
		[NativeName("ContextType")]
		public D3D11ContextType ContextType;


	}

	[Guid("b4e3c01d-e79e-4637-91b2-510e9f4c9b8f")]
	[NativeName("ID3D11DeviceContext3")]
	public partial struct ID3D11DeviceContext3 : IComObject, IComObject<ID3D11DeviceContext3>, IComObject<ID3D11DeviceContext2>, IComObject<ID3D11DeviceContext1>, IComObject<ID3D11DeviceContext>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("b4e3c01d-e79e-4637-91b2-510e9f4c9b8f");

		public unsafe ID3D11DeviceContext3 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void Flush1(D3D11ContextType contextType, nint hEvent)
		{
			ID3D11DeviceContext3* ptr = (ID3D11DeviceContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext3*, D3D11ContextType, nint, void>)(LpVtbl[10]))(ptr, contextType, hEvent);
		}

		public readonly unsafe void SetHardwareProtectionState(int hwProtectionEnable)
		{
			ID3D11DeviceContext3* ptr = (ID3D11DeviceContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext3*, int, void>)(LpVtbl[11]))(ptr, hwProtectionEnable);
		}

		public readonly unsafe void GetHardwareProtectionState(int* pHwProtectionEnable)
		{
			ID3D11DeviceContext3* ptr = (ID3D11DeviceContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11DeviceContext3*, int*, void>)(LpVtbl[12]))(ptr, pHwProtectionEnable);
		}

		public readonly unsafe void GetHardwareProtectionState(ref int pHwProtectionEnable)
		{
			ID3D11DeviceContext3* ptr = (ID3D11DeviceContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppHwProtectionEnable = &pHwProtectionEnable)
			{
				((delegate* unmanaged[Stdcall]<ID3D11DeviceContext3*, int*, void>)(LpVtbl[12]))(ptr, (int*)ppHwProtectionEnable);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceContext2 (ID3D11DeviceContext3 value)
		{
			return Unsafe.As<ID3D11DeviceContext3, ID3D11DeviceContext2>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceContext1 (ID3D11DeviceContext3 value)
		{
			return Unsafe.As<ID3D11DeviceContext3, ID3D11DeviceContext1>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceContext (ID3D11DeviceContext3 value)
		{
			return Unsafe.As<ID3D11DeviceContext3, ID3D11DeviceContext>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11DeviceContext3 value)
		{
			return Unsafe.As<ID3D11DeviceContext3, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11DeviceContext3 value)
		{
			return Unsafe.As<ID3D11DeviceContext3, IUnknown>(ref value);
		}

	}

	[Guid("affde9d1-1df7-4bb7-8a34-0f46251dab80")]
	[NativeName("ID3D11Fence")]
	public partial struct ID3D11Fence : IComObject, IComObject<ID3D11Fence>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("affde9d1-1df7-4bb7-8a34-0f46251dab80");

		public unsafe ID3D11Fence (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult CreateSharedHandle(SecurityAttributes* pAttributes, uint dwAccess, char* lpName, nint* pHandle)
		{
			ID3D11Fence* ptr = (ID3D11Fence*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Fence*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[4]))(ptr, pAttributes, dwAccess, lpName, pHandle);
			return ret;
		}

		public readonly unsafe HResult CreateSharedHandle(ref SecurityAttributes pAttributes, uint dwAccess, char* lpName, nint* pHandle)
		{
			ID3D11Fence* ptr = (ID3D11Fence*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SecurityAttributes* ppAttributes = &pAttributes)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Fence*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[4]))(ptr, (SecurityAttributes*)ppAttributes, dwAccess, lpName, pHandle);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSharedHandle(SecurityAttributes* pAttributes, uint dwAccess, char* lpName, ref nint pHandle)
		{
			ID3D11Fence* ptr = (ID3D11Fence*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nint* ppHandle = &pHandle)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Fence*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[4]))(ptr, pAttributes, dwAccess, lpName, (nint*)ppHandle);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSharedHandle(ref SecurityAttributes pAttributes, uint dwAccess, char* lpName, ref nint pHandle)
		{
			ID3D11Fence* ptr = (ID3D11Fence*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SecurityAttributes* ppAttributes = &pAttributes)
			{
				fixed (nint* ppHandle = &pHandle)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Fence*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[4]))(ptr, (SecurityAttributes*)ppAttributes, dwAccess, lpName, (nint*)ppHandle);
					return ret;
				}
			}
		}

		public readonly unsafe ulong GetCompletedValue()
		{
			ID3D11Fence* ptr = (ID3D11Fence*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11Fence*, ulong>)(LpVtbl[5]))(ptr);
			return ret;
		}

		public readonly unsafe HResult SetEventOnCompletion(ulong value, nint hEvent)
		{
			ID3D11Fence* ptr = (ID3D11Fence*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Fence*, ulong, nint, HResult>)(LpVtbl[6]))(ptr, value, hEvent);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11Fence value)
		{
			return Unsafe.As<ID3D11Fence, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11Fence value)
		{
			return Unsafe.As<ID3D11Fence, IUnknown>(ref value);
		}

	}

	[Guid("917600da-f58c-4c33-98d8-3e15b390fa24")]
	[NativeName("ID3D11DeviceContext4")]
	public partial struct ID3D11DeviceContext4 : IComObject, IComObject<ID3D11DeviceContext4>, IComObject<ID3D11DeviceContext3>, IComObject<ID3D11DeviceContext2>, IComObject<ID3D11DeviceContext1>, IComObject<ID3D11DeviceContext>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("917600da-f58c-4c33-98d8-3e15b390fa24");

		public unsafe ID3D11DeviceContext4 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult Signal(ID3D11Fence* pFence, ulong value)
		{
			ID3D11DeviceContext4* ptr = (ID3D11DeviceContext4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext4*, ID3D11Fence*, ulong, HResult>)(LpVtbl[3]))(ptr, pFence, value);
			return ret;
		}

		public readonly unsafe HResult Signal(ref ID3D11Fence pFence, ulong value)
		{
			ID3D11DeviceContext4* ptr = (ID3D11DeviceContext4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Fence* ppFence = &pFence)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext4*, ID3D11Fence*, ulong, HResult>)(LpVtbl[3]))(ptr, (ID3D11Fence*)ppFence, value);
				return ret;
			}
		}

		public readonly unsafe HResult Wait(ID3D11Fence* pFence, ulong value)
		{
			ID3D11DeviceContext4* ptr = (ID3D11DeviceContext4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext4*, ID3D11Fence*, ulong, HResult>)(LpVtbl[4]))(ptr, pFence, value);
			return ret;
		}

		public readonly unsafe HResult Wait(ref ID3D11Fence pFence, ulong value)
		{
			ID3D11DeviceContext4* ptr = (ID3D11DeviceContext4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Fence* ppFence = &pFence)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11DeviceContext4*, ID3D11Fence*, ulong, HResult>)(LpVtbl[4]))(ptr, (ID3D11Fence*)ppFence, value);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11DeviceContext3 (ID3D11DeviceContext4 value)
		{
			return Unsafe.As<ID3D11DeviceContext4, ID3D11DeviceContext3>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceContext2 (ID3D11DeviceContext4 value)
		{
			return Unsafe.As<ID3D11DeviceContext4, ID3D11DeviceContext2>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceContext1 (ID3D11DeviceContext4 value)
		{
			return Unsafe.As<ID3D11DeviceContext4, ID3D11DeviceContext1>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceContext (ID3D11DeviceContext4 value)
		{
			return Unsafe.As<ID3D11DeviceContext4, ID3D11DeviceContext>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11DeviceContext4 value)
		{
			return Unsafe.As<ID3D11DeviceContext4, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11DeviceContext4 value)
		{
			return Unsafe.As<ID3D11DeviceContext4, IUnknown>(ref value);
		}

	}

	[Guid("a05c8c37-d2c6-4732-b3a0-9ce0b0dc9ae6")]
	[NativeName("ID3D11Device3")]
	public partial struct ID3D11Device3 : IComObject, IComObject<ID3D11Device3>, IComObject<ID3D11Device2>, IComObject<ID3D11Device1>, IComObject<ID3D11Device>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("a05c8c37-d2c6-4732-b3a0-9ce0b0dc9ae6");

		public unsafe ID3D11Device3 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult CreateTexture2D1(D3D11Texture2DDesc1* pDesc1, D3D11SubresourceData* pInitialData, ID3D11Texture2D1** ppTexture2D)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11Texture2DDesc1*, D3D11SubresourceData*, ID3D11Texture2D1**, HResult>)(LpVtbl[4]))(ptr, pDesc1, pInitialData, ppTexture2D);
			return ret;
		}

		public readonly unsafe HResult CreateTexture2D1(ref D3D11Texture2DDesc1 pDesc1, D3D11SubresourceData* pInitialData, ID3D11Texture2D1** ppTexture2D)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture2DDesc1* ppDesc1 = &pDesc1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11Texture2DDesc1*, D3D11SubresourceData*, ID3D11Texture2D1**, HResult>)(LpVtbl[4]))(ptr, (D3D11Texture2DDesc1*)ppDesc1, pInitialData, ppTexture2D);
				return ret;
			}
		}

		public readonly unsafe HResult CreateTexture2D1(D3D11Texture2DDesc1* pDesc1, ref D3D11SubresourceData pInitialData, ID3D11Texture2D1** ppTexture2D)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11Texture2DDesc1*, D3D11SubresourceData*, ID3D11Texture2D1**, HResult>)(LpVtbl[4]))(ptr, pDesc1, (D3D11SubresourceData*)ppInitialData, ppTexture2D);
				return ret;
			}
		}

		public readonly unsafe HResult CreateTexture2D1(ref D3D11Texture2DDesc1 pDesc1, ref D3D11SubresourceData pInitialData, ID3D11Texture2D1** ppTexture2D)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture2DDesc1* ppDesc1 = &pDesc1)
			{
				fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11Texture2DDesc1*, D3D11SubresourceData*, ID3D11Texture2D1**, HResult>)(LpVtbl[4]))(ptr, (D3D11Texture2DDesc1*)ppDesc1, (D3D11SubresourceData*)ppInitialData, ppTexture2D);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateTexture2D1(D3D11Texture2DDesc1* pDesc1, D3D11SubresourceData* pInitialData, ref ID3D11Texture2D1* ppTexture2D)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Texture2D1** pppTexture2D = &ppTexture2D)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11Texture2DDesc1*, D3D11SubresourceData*, ID3D11Texture2D1**, HResult>)(LpVtbl[4]))(ptr, pDesc1, pInitialData, (ID3D11Texture2D1**)pppTexture2D);
				return ret;
			}
		}

		public readonly unsafe HResult CreateTexture2D1(ref D3D11Texture2DDesc1 pDesc1, D3D11SubresourceData* pInitialData, ref ID3D11Texture2D1* ppTexture2D)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture2DDesc1* ppDesc1 = &pDesc1)
			{
				fixed (ID3D11Texture2D1** pppTexture2D = &ppTexture2D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11Texture2DDesc1*, D3D11SubresourceData*, ID3D11Texture2D1**, HResult>)(LpVtbl[4]))(ptr, (D3D11Texture2DDesc1*)ppDesc1, pInitialData, (ID3D11Texture2D1**)pppTexture2D);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateTexture2D1(D3D11Texture2DDesc1* pDesc1, ref D3D11SubresourceData pInitialData, ref ID3D11Texture2D1* ppTexture2D)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
			{
				fixed (ID3D11Texture2D1** pppTexture2D = &ppTexture2D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11Texture2DDesc1*, D3D11SubresourceData*, ID3D11Texture2D1**, HResult>)(LpVtbl[4]))(ptr, pDesc1, (D3D11SubresourceData*)ppInitialData, (ID3D11Texture2D1**)pppTexture2D);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateTexture2D1(ref D3D11Texture2DDesc1 pDesc1, ref D3D11SubresourceData pInitialData, ref ID3D11Texture2D1* ppTexture2D)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture2DDesc1* ppDesc1 = &pDesc1)
			{
				fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
				{
					fixed (ID3D11Texture2D1** pppTexture2D = &ppTexture2D)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11Texture2DDesc1*, D3D11SubresourceData*, ID3D11Texture2D1**, HResult>)(LpVtbl[4]))(ptr, (D3D11Texture2DDesc1*)ppDesc1, (D3D11SubresourceData*)ppInitialData, (ID3D11Texture2D1**)pppTexture2D);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateTexture3D1(D3D11Texture3DDesc1* pDesc1, D3D11SubresourceData* pInitialData, ID3D11Texture3D1** ppTexture3D)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11Texture3DDesc1*, D3D11SubresourceData*, ID3D11Texture3D1**, HResult>)(LpVtbl[5]))(ptr, pDesc1, pInitialData, ppTexture3D);
			return ret;
		}

		public readonly unsafe HResult CreateTexture3D1(ref D3D11Texture3DDesc1 pDesc1, D3D11SubresourceData* pInitialData, ID3D11Texture3D1** ppTexture3D)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture3DDesc1* ppDesc1 = &pDesc1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11Texture3DDesc1*, D3D11SubresourceData*, ID3D11Texture3D1**, HResult>)(LpVtbl[5]))(ptr, (D3D11Texture3DDesc1*)ppDesc1, pInitialData, ppTexture3D);
				return ret;
			}
		}

		public readonly unsafe HResult CreateTexture3D1(D3D11Texture3DDesc1* pDesc1, ref D3D11SubresourceData pInitialData, ID3D11Texture3D1** ppTexture3D)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11Texture3DDesc1*, D3D11SubresourceData*, ID3D11Texture3D1**, HResult>)(LpVtbl[5]))(ptr, pDesc1, (D3D11SubresourceData*)ppInitialData, ppTexture3D);
				return ret;
			}
		}

		public readonly unsafe HResult CreateTexture3D1(ref D3D11Texture3DDesc1 pDesc1, ref D3D11SubresourceData pInitialData, ID3D11Texture3D1** ppTexture3D)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture3DDesc1* ppDesc1 = &pDesc1)
			{
				fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11Texture3DDesc1*, D3D11SubresourceData*, ID3D11Texture3D1**, HResult>)(LpVtbl[5]))(ptr, (D3D11Texture3DDesc1*)ppDesc1, (D3D11SubresourceData*)ppInitialData, ppTexture3D);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateTexture3D1(D3D11Texture3DDesc1* pDesc1, D3D11SubresourceData* pInitialData, ref ID3D11Texture3D1* ppTexture3D)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Texture3D1** pppTexture3D = &ppTexture3D)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11Texture3DDesc1*, D3D11SubresourceData*, ID3D11Texture3D1**, HResult>)(LpVtbl[5]))(ptr, pDesc1, pInitialData, (ID3D11Texture3D1**)pppTexture3D);
				return ret;
			}
		}

		public readonly unsafe HResult CreateTexture3D1(ref D3D11Texture3DDesc1 pDesc1, D3D11SubresourceData* pInitialData, ref ID3D11Texture3D1* ppTexture3D)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture3DDesc1* ppDesc1 = &pDesc1)
			{
				fixed (ID3D11Texture3D1** pppTexture3D = &ppTexture3D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11Texture3DDesc1*, D3D11SubresourceData*, ID3D11Texture3D1**, HResult>)(LpVtbl[5]))(ptr, (D3D11Texture3DDesc1*)ppDesc1, pInitialData, (ID3D11Texture3D1**)pppTexture3D);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateTexture3D1(D3D11Texture3DDesc1* pDesc1, ref D3D11SubresourceData pInitialData, ref ID3D11Texture3D1* ppTexture3D)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
			{
				fixed (ID3D11Texture3D1** pppTexture3D = &ppTexture3D)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11Texture3DDesc1*, D3D11SubresourceData*, ID3D11Texture3D1**, HResult>)(LpVtbl[5]))(ptr, pDesc1, (D3D11SubresourceData*)ppInitialData, (ID3D11Texture3D1**)pppTexture3D);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateTexture3D1(ref D3D11Texture3DDesc1 pDesc1, ref D3D11SubresourceData pInitialData, ref ID3D11Texture3D1* ppTexture3D)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Texture3DDesc1* ppDesc1 = &pDesc1)
			{
				fixed (D3D11SubresourceData* ppInitialData = &pInitialData)
				{
					fixed (ID3D11Texture3D1** pppTexture3D = &ppTexture3D)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11Texture3DDesc1*, D3D11SubresourceData*, ID3D11Texture3D1**, HResult>)(LpVtbl[5]))(ptr, (D3D11Texture3DDesc1*)ppDesc1, (D3D11SubresourceData*)ppInitialData, (ID3D11Texture3D1**)pppTexture3D);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateRasterizerState2(D3D11RasterizerDesc2* pRasterizerDesc, ID3D11RasterizerState2** ppRasterizerState)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11RasterizerDesc2*, ID3D11RasterizerState2**, HResult>)(LpVtbl[6]))(ptr, pRasterizerDesc, ppRasterizerState);
			return ret;
		}

		public readonly unsafe HResult CreateRasterizerState2(ref D3D11RasterizerDesc2 pRasterizerDesc, ID3D11RasterizerState2** ppRasterizerState)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11RasterizerDesc2* ppRasterizerDesc = &pRasterizerDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11RasterizerDesc2*, ID3D11RasterizerState2**, HResult>)(LpVtbl[6]))(ptr, (D3D11RasterizerDesc2*)ppRasterizerDesc, ppRasterizerState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateRasterizerState2(D3D11RasterizerDesc2* pRasterizerDesc, ref ID3D11RasterizerState2* ppRasterizerState)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RasterizerState2** pppRasterizerState = &ppRasterizerState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11RasterizerDesc2*, ID3D11RasterizerState2**, HResult>)(LpVtbl[6]))(ptr, pRasterizerDesc, (ID3D11RasterizerState2**)pppRasterizerState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateRasterizerState2(ref D3D11RasterizerDesc2 pRasterizerDesc, ref ID3D11RasterizerState2* ppRasterizerState)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11RasterizerDesc2* ppRasterizerDesc = &pRasterizerDesc)
			{
				fixed (ID3D11RasterizerState2** pppRasterizerState = &ppRasterizerState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11RasterizerDesc2*, ID3D11RasterizerState2**, HResult>)(LpVtbl[6]))(ptr, (D3D11RasterizerDesc2*)ppRasterizerDesc, (ID3D11RasterizerState2**)pppRasterizerState);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateShaderResourceView1(ID3D11Resource* pResource, D3D11ShaderResourceViewDesc1* pDesc1, ID3D11ShaderResourceView1** ppSRView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[7]))(ptr, pResource, pDesc1, ppSRView1);
			return ret;
		}

		public readonly unsafe HResult CreateShaderResourceView1(ref ID3D11Resource pResource, D3D11ShaderResourceViewDesc1* pDesc1, ID3D11ShaderResourceView1** ppSRView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[7]))(ptr, (ID3D11Resource*)ppResource, pDesc1, ppSRView1);
				return ret;
			}
		}

		public readonly unsafe HResult CreateShaderResourceView1(ID3D11Resource* pResource, ref D3D11ShaderResourceViewDesc1 pDesc1, ID3D11ShaderResourceView1** ppSRView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ShaderResourceViewDesc1* ppDesc1 = &pDesc1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[7]))(ptr, pResource, (D3D11ShaderResourceViewDesc1*)ppDesc1, ppSRView1);
				return ret;
			}
		}

		public readonly unsafe HResult CreateShaderResourceView1(ref ID3D11Resource pResource, ref D3D11ShaderResourceViewDesc1 pDesc1, ID3D11ShaderResourceView1** ppSRView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11ShaderResourceViewDesc1* ppDesc1 = &pDesc1)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[7]))(ptr, (ID3D11Resource*)ppResource, (D3D11ShaderResourceViewDesc1*)ppDesc1, ppSRView1);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateShaderResourceView1(ID3D11Resource* pResource, D3D11ShaderResourceViewDesc1* pDesc1, ref ID3D11ShaderResourceView1* ppSRView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderResourceView1** pppSRView1 = &ppSRView1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[7]))(ptr, pResource, pDesc1, (ID3D11ShaderResourceView1**)pppSRView1);
				return ret;
			}
		}

		public readonly unsafe HResult CreateShaderResourceView1(ref ID3D11Resource pResource, D3D11ShaderResourceViewDesc1* pDesc1, ref ID3D11ShaderResourceView1* ppSRView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11ShaderResourceView1** pppSRView1 = &ppSRView1)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[7]))(ptr, (ID3D11Resource*)ppResource, pDesc1, (ID3D11ShaderResourceView1**)pppSRView1);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateShaderResourceView1(ID3D11Resource* pResource, ref D3D11ShaderResourceViewDesc1 pDesc1, ref ID3D11ShaderResourceView1* ppSRView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ShaderResourceViewDesc1* ppDesc1 = &pDesc1)
			{
				fixed (ID3D11ShaderResourceView1** pppSRView1 = &ppSRView1)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[7]))(ptr, pResource, (D3D11ShaderResourceViewDesc1*)ppDesc1, (ID3D11ShaderResourceView1**)pppSRView1);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateShaderResourceView1(ref ID3D11Resource pResource, ref D3D11ShaderResourceViewDesc1 pDesc1, ref ID3D11ShaderResourceView1* ppSRView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11ShaderResourceViewDesc1* ppDesc1 = &pDesc1)
				{
					fixed (ID3D11ShaderResourceView1** pppSRView1 = &ppSRView1)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, HResult>)(LpVtbl[7]))(ptr, (ID3D11Resource*)ppResource, (D3D11ShaderResourceViewDesc1*)ppDesc1, (ID3D11ShaderResourceView1**)pppSRView1);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateUnorderedAccessView1(ID3D11Resource* pResource, D3D11UnorderedAccessViewDesc1* pDesc1, ID3D11UnorderedAccessView1** ppUAView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[8]))(ptr, pResource, pDesc1, ppUAView1);
			return ret;
		}

		public readonly unsafe HResult CreateUnorderedAccessView1(ref ID3D11Resource pResource, D3D11UnorderedAccessViewDesc1* pDesc1, ID3D11UnorderedAccessView1** ppUAView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[8]))(ptr, (ID3D11Resource*)ppResource, pDesc1, ppUAView1);
				return ret;
			}
		}

		public readonly unsafe HResult CreateUnorderedAccessView1(ID3D11Resource* pResource, ref D3D11UnorderedAccessViewDesc1 pDesc1, ID3D11UnorderedAccessView1** ppUAView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11UnorderedAccessViewDesc1* ppDesc1 = &pDesc1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[8]))(ptr, pResource, (D3D11UnorderedAccessViewDesc1*)ppDesc1, ppUAView1);
				return ret;
			}
		}

		public readonly unsafe HResult CreateUnorderedAccessView1(ref ID3D11Resource pResource, ref D3D11UnorderedAccessViewDesc1 pDesc1, ID3D11UnorderedAccessView1** ppUAView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11UnorderedAccessViewDesc1* ppDesc1 = &pDesc1)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[8]))(ptr, (ID3D11Resource*)ppResource, (D3D11UnorderedAccessViewDesc1*)ppDesc1, ppUAView1);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateUnorderedAccessView1(ID3D11Resource* pResource, D3D11UnorderedAccessViewDesc1* pDesc1, ref ID3D11UnorderedAccessView1* ppUAView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11UnorderedAccessView1** pppUAView1 = &ppUAView1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[8]))(ptr, pResource, pDesc1, (ID3D11UnorderedAccessView1**)pppUAView1);
				return ret;
			}
		}

		public readonly unsafe HResult CreateUnorderedAccessView1(ref ID3D11Resource pResource, D3D11UnorderedAccessViewDesc1* pDesc1, ref ID3D11UnorderedAccessView1* ppUAView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11UnorderedAccessView1** pppUAView1 = &ppUAView1)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[8]))(ptr, (ID3D11Resource*)ppResource, pDesc1, (ID3D11UnorderedAccessView1**)pppUAView1);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateUnorderedAccessView1(ID3D11Resource* pResource, ref D3D11UnorderedAccessViewDesc1 pDesc1, ref ID3D11UnorderedAccessView1* ppUAView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11UnorderedAccessViewDesc1* ppDesc1 = &pDesc1)
			{
				fixed (ID3D11UnorderedAccessView1** pppUAView1 = &ppUAView1)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[8]))(ptr, pResource, (D3D11UnorderedAccessViewDesc1*)ppDesc1, (ID3D11UnorderedAccessView1**)pppUAView1);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateUnorderedAccessView1(ref ID3D11Resource pResource, ref D3D11UnorderedAccessViewDesc1 pDesc1, ref ID3D11UnorderedAccessView1* ppUAView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11UnorderedAccessViewDesc1* ppDesc1 = &pDesc1)
				{
					fixed (ID3D11UnorderedAccessView1** pppUAView1 = &ppUAView1)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, HResult>)(LpVtbl[8]))(ptr, (ID3D11Resource*)ppResource, (D3D11UnorderedAccessViewDesc1*)ppDesc1, (ID3D11UnorderedAccessView1**)pppUAView1);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateRenderTargetView1(ID3D11Resource* pResource, D3D11RenderTargetViewDesc1* pDesc1, ID3D11RenderTargetView1** ppRTView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[9]))(ptr, pResource, pDesc1, ppRTView1);
			return ret;
		}

		public readonly unsafe HResult CreateRenderTargetView1(ref ID3D11Resource pResource, D3D11RenderTargetViewDesc1* pDesc1, ID3D11RenderTargetView1** ppRTView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppResource, pDesc1, ppRTView1);
				return ret;
			}
		}

		public readonly unsafe HResult CreateRenderTargetView1(ID3D11Resource* pResource, ref D3D11RenderTargetViewDesc1 pDesc1, ID3D11RenderTargetView1** ppRTView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11RenderTargetViewDesc1* ppDesc1 = &pDesc1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[9]))(ptr, pResource, (D3D11RenderTargetViewDesc1*)ppDesc1, ppRTView1);
				return ret;
			}
		}

		public readonly unsafe HResult CreateRenderTargetView1(ref ID3D11Resource pResource, ref D3D11RenderTargetViewDesc1 pDesc1, ID3D11RenderTargetView1** ppRTView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11RenderTargetViewDesc1* ppDesc1 = &pDesc1)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppResource, (D3D11RenderTargetViewDesc1*)ppDesc1, ppRTView1);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateRenderTargetView1(ID3D11Resource* pResource, D3D11RenderTargetViewDesc1* pDesc1, ref ID3D11RenderTargetView1* ppRTView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11RenderTargetView1** pppRTView1 = &ppRTView1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[9]))(ptr, pResource, pDesc1, (ID3D11RenderTargetView1**)pppRTView1);
				return ret;
			}
		}

		public readonly unsafe HResult CreateRenderTargetView1(ref ID3D11Resource pResource, D3D11RenderTargetViewDesc1* pDesc1, ref ID3D11RenderTargetView1* ppRTView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11RenderTargetView1** pppRTView1 = &ppRTView1)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppResource, pDesc1, (ID3D11RenderTargetView1**)pppRTView1);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateRenderTargetView1(ID3D11Resource* pResource, ref D3D11RenderTargetViewDesc1 pDesc1, ref ID3D11RenderTargetView1* ppRTView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11RenderTargetViewDesc1* ppDesc1 = &pDesc1)
			{
				fixed (ID3D11RenderTargetView1** pppRTView1 = &ppRTView1)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[9]))(ptr, pResource, (D3D11RenderTargetViewDesc1*)ppDesc1, (ID3D11RenderTargetView1**)pppRTView1);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateRenderTargetView1(ref ID3D11Resource pResource, ref D3D11RenderTargetViewDesc1 pDesc1, ref ID3D11RenderTargetView1* ppRTView1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11RenderTargetViewDesc1* ppDesc1 = &pDesc1)
				{
					fixed (ID3D11RenderTargetView1** pppRTView1 = &ppRTView1)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, D3D11RenderTargetViewDesc1*, ID3D11RenderTargetView1**, HResult>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppResource, (D3D11RenderTargetViewDesc1*)ppDesc1, (ID3D11RenderTargetView1**)pppRTView1);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateQuery1(D3D11QueryDesc1* pQueryDesc1, ID3D11Query1** ppQuery1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11QueryDesc1*, ID3D11Query1**, HResult>)(LpVtbl[10]))(ptr, pQueryDesc1, ppQuery1);
			return ret;
		}

		public readonly unsafe HResult CreateQuery1(ref D3D11QueryDesc1 pQueryDesc1, ID3D11Query1** ppQuery1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11QueryDesc1* ppQueryDesc1 = &pQueryDesc1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11QueryDesc1*, ID3D11Query1**, HResult>)(LpVtbl[10]))(ptr, (D3D11QueryDesc1*)ppQueryDesc1, ppQuery1);
				return ret;
			}
		}

		public readonly unsafe HResult CreateQuery1(D3D11QueryDesc1* pQueryDesc1, ref ID3D11Query1* ppQuery1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Query1** pppQuery1 = &ppQuery1)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11QueryDesc1*, ID3D11Query1**, HResult>)(LpVtbl[10]))(ptr, pQueryDesc1, (ID3D11Query1**)pppQuery1);
				return ret;
			}
		}

		public readonly unsafe HResult CreateQuery1(ref D3D11QueryDesc1 pQueryDesc1, ref ID3D11Query1* ppQuery1)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11QueryDesc1* ppQueryDesc1 = &pQueryDesc1)
			{
				fixed (ID3D11Query1** pppQuery1 = &ppQuery1)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, D3D11QueryDesc1*, ID3D11Query1**, HResult>)(LpVtbl[10]))(ptr, (D3D11QueryDesc1*)ppQueryDesc1, (ID3D11Query1**)pppQuery1);
					return ret;
				}
			}
		}

		public readonly unsafe void GetImmediateContext3(ID3D11DeviceContext3** ppImmediateContext)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11DeviceContext3**, void>)(LpVtbl[11]))(ptr, ppImmediateContext);
		}

		public readonly unsafe void GetImmediateContext3(ref ID3D11DeviceContext3* ppImmediateContext)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceContext3** pppImmediateContext = &ppImmediateContext)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11DeviceContext3**, void>)(LpVtbl[11]))(ptr, (ID3D11DeviceContext3**)pppImmediateContext);
			}
		}

		public readonly unsafe HResult CreateDeferredContext3(uint contextFlags, ID3D11DeviceContext3** ppDeferredContext)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, uint, ID3D11DeviceContext3**, HResult>)(LpVtbl[12]))(ptr, contextFlags, ppDeferredContext);
			return ret;
		}

		public readonly unsafe HResult CreateDeferredContext3(uint contextFlags, ref ID3D11DeviceContext3* ppDeferredContext)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceContext3** pppDeferredContext = &ppDeferredContext)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device3*, uint, ID3D11DeviceContext3**, HResult>)(LpVtbl[12]))(ptr, contextFlags, (ID3D11DeviceContext3**)pppDeferredContext);
				return ret;
			}
		}

		public readonly unsafe void WriteToSubresource(ID3D11Resource* pDstResource, uint dstSubresource, D3D11Box* pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, uint, D3D11Box*, void*, uint, uint, void>)(LpVtbl[13]))(ptr, pDstResource, dstSubresource, pDstBox, pSrcData, srcRowPitch, srcDepthPitch);
		}

		public readonly unsafe void WriteToSubresource(ref ID3D11Resource pDstResource, uint dstSubresource, D3D11Box* pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDstResource = &pDstResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, uint, D3D11Box*, void*, uint, uint, void>)(LpVtbl[13]))(ptr, (ID3D11Resource*)ppDstResource, dstSubresource, pDstBox, pSrcData, srcRowPitch, srcDepthPitch);
			}
		}

		public readonly unsafe void WriteToSubresource(ID3D11Resource* pDstResource, uint dstSubresource, ref D3D11Box pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Box* ppDstBox = &pDstBox)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, uint, D3D11Box*, void*, uint, uint, void>)(LpVtbl[13]))(ptr, pDstResource, dstSubresource, (D3D11Box*)ppDstBox, pSrcData, srcRowPitch, srcDepthPitch);
			}
		}

		public readonly unsafe void WriteToSubresource(ref ID3D11Resource pDstResource, uint dstSubresource, ref D3D11Box pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D11Box* ppDstBox = &pDstBox)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device3*, ID3D11Resource*, uint, D3D11Box*, void*, uint, uint, void>)(LpVtbl[13]))(ptr, (ID3D11Resource*)ppDstResource, dstSubresource, (D3D11Box*)ppDstBox, pSrcData, srcRowPitch, srcDepthPitch);
				}
			}
		}

		public readonly unsafe void ReadFromSubresource(void* pDstData, uint dstRowPitch, uint dstDepthPitch, ID3D11Resource* pSrcResource, uint srcSubresource, D3D11Box* pSrcBox)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device3*, void*, uint, uint, ID3D11Resource*, uint, D3D11Box*, void>)(LpVtbl[14]))(ptr, pDstData, dstRowPitch, dstDepthPitch, pSrcResource, srcSubresource, pSrcBox);
		}

		public readonly unsafe void ReadFromSubresource(void* pDstData, uint dstRowPitch, uint dstDepthPitch, ref ID3D11Resource pSrcResource, uint srcSubresource, D3D11Box* pSrcBox)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppSrcResource = &pSrcResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device3*, void*, uint, uint, ID3D11Resource*, uint, D3D11Box*, void>)(LpVtbl[14]))(ptr, pDstData, dstRowPitch, dstDepthPitch, (ID3D11Resource*)ppSrcResource, srcSubresource, pSrcBox);
			}
		}

		public readonly unsafe void ReadFromSubresource(void* pDstData, uint dstRowPitch, uint dstDepthPitch, ID3D11Resource* pSrcResource, uint srcSubresource, ref D3D11Box pSrcBox)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Box* ppSrcBox = &pSrcBox)
			{
				((delegate* unmanaged[Stdcall]<ID3D11Device3*, void*, uint, uint, ID3D11Resource*, uint, D3D11Box*, void>)(LpVtbl[14]))(ptr, pDstData, dstRowPitch, dstDepthPitch, pSrcResource, srcSubresource, (D3D11Box*)ppSrcBox);
			}
		}

		public readonly unsafe void ReadFromSubresource(void* pDstData, uint dstRowPitch, uint dstDepthPitch, ref ID3D11Resource pSrcResource, uint srcSubresource, ref D3D11Box pSrcBox)
		{
			ID3D11Device3* ptr = (ID3D11Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppSrcResource = &pSrcResource)
			{
				fixed (D3D11Box* ppSrcBox = &pSrcBox)
				{
					((delegate* unmanaged[Stdcall]<ID3D11Device3*, void*, uint, uint, ID3D11Resource*, uint, D3D11Box*, void>)(LpVtbl[14]))(ptr, pDstData, dstRowPitch, dstDepthPitch, (ID3D11Resource*)ppSrcResource, srcSubresource, (D3D11Box*)ppSrcBox);
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11Device2 (ID3D11Device3 value)
		{
			return Unsafe.As<ID3D11Device3, ID3D11Device2>(ref value);
		}

		public unsafe static implicit operator ID3D11Device1 (ID3D11Device3 value)
		{
			return Unsafe.As<ID3D11Device3, ID3D11Device1>(ref value);
		}

		public unsafe static implicit operator ID3D11Device (ID3D11Device3 value)
		{
			return Unsafe.As<ID3D11Device3, ID3D11Device>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11Device3 value)
		{
			return Unsafe.As<ID3D11Device3, IUnknown>(ref value);
		}

	}

	[NativeName("CD3D11_TEXTURE2D_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11Texture2DDesc1
	{


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_3_0000_0001 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("CD3D11_TEXTURE3D_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11Texture3DDesc1
	{


	}

	[NativeName("CD3D11_RASTERIZER_DESC2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11RasterizerDesc2
	{


	}

	[NativeName("CD3D11_SHADER_RESOURCE_VIEW_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11ShaderResourceViewDesc1
	{


	}

	[NativeName("CD3D11_RENDER_TARGET_VIEW_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11RenderTargetViewDesc1
	{


	}

	[NativeName("CD3D11_UNORDERED_ACCESS_VIEW_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11UnorderedAccessViewDesc1
	{


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_3_0000_0006 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("CD3D11_QUERY_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Cd3D11QueryDesc1
	{


	}

	[Guid("8992ab71-02e6-4b8d-ba48-b056dcda42c4")]
	[NativeName("ID3D11Device4")]
	public partial struct ID3D11Device4 : IComObject, IComObject<ID3D11Device4>, IComObject<ID3D11Device3>, IComObject<ID3D11Device2>, IComObject<ID3D11Device1>, IComObject<ID3D11Device>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("8992ab71-02e6-4b8d-ba48-b056dcda42c4");

		public unsafe ID3D11Device4 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult RegisterDeviceRemovedEvent(nint hEvent, uint* pdwCookie)
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, nint, uint*, HResult>)(LpVtbl[11]))(ptr, hEvent, pdwCookie);
			return ret;
		}

		public readonly unsafe HResult RegisterDeviceRemovedEvent(nint hEvent, ref uint pdwCookie)
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppdwCookie = &pdwCookie)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device4*, nint, uint*, HResult>)(LpVtbl[11]))(ptr, hEvent, (uint*)ppdwCookie);
				return ret;
			}
		}

		public readonly unsafe void UnregisterDeviceRemoved(uint dwCookie)
		{
			ID3D11Device4* ptr = (ID3D11Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Device4*, uint, void>)(LpVtbl[12]))(ptr, dwCookie);
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11Device3 (ID3D11Device4 value)
		{
			return Unsafe.As<ID3D11Device4, ID3D11Device3>(ref value);
		}

		public unsafe static implicit operator ID3D11Device2 (ID3D11Device4 value)
		{
			return Unsafe.As<ID3D11Device4, ID3D11Device2>(ref value);
		}

		public unsafe static implicit operator ID3D11Device1 (ID3D11Device4 value)
		{
			return Unsafe.As<ID3D11Device4, ID3D11Device1>(ref value);
		}

		public unsafe static implicit operator ID3D11Device (ID3D11Device4 value)
		{
			return Unsafe.As<ID3D11Device4, ID3D11Device>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11Device4 value)
		{
			return Unsafe.As<ID3D11Device4, IUnknown>(ref value);
		}

	}

	[Guid("8ffde202-a0e7-45df-9e01-e837801b5ea0")]
	[NativeName("ID3D11Device5")]
	public partial struct ID3D11Device5 : IComObject, IComObject<ID3D11Device5>, IComObject<ID3D11Device4>, IComObject<ID3D11Device3>, IComObject<ID3D11Device2>, IComObject<ID3D11Device1>, IComObject<ID3D11Device>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("8ffde202-a0e7-45df-9e01-e837801b5ea0");

		public unsafe ID3D11Device5 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult OpenSharedFence(nint hFence, Guid* returnedInterface, void** ppFence)
		{
			ID3D11Device5* ptr = (ID3D11Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, nint, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, hFence, returnedInterface, ppFence);
			return ret;
		}

		public readonly unsafe HResult OpenSharedFence(nint hFence, ref Guid returnedInterface, void** ppFence)
		{
			ID3D11Device5* ptr = (ID3D11Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* preturnedInterface = &returnedInterface)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, nint, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, hFence, (Guid*)preturnedInterface, ppFence);
				return ret;
			}
		}

		public readonly unsafe HResult CreateFence(ulong initialValue, D3D11FenceFlag flags, Guid* returnedInterface, void** ppFence)
		{
			ID3D11Device5* ptr = (ID3D11Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ulong, D3D11FenceFlag, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, initialValue, flags, returnedInterface, ppFence);
			return ret;
		}

		public readonly unsafe HResult CreateFence(ulong initialValue, D3D11FenceFlag flags, ref Guid returnedInterface, void** ppFence)
		{
			ID3D11Device5* ptr = (ID3D11Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* preturnedInterface = &returnedInterface)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ulong, D3D11FenceFlag, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, initialValue, flags, (Guid*)preturnedInterface, ppFence);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11Device4 (ID3D11Device5 value)
		{
			return Unsafe.As<ID3D11Device5, ID3D11Device4>(ref value);
		}

		public unsafe static implicit operator ID3D11Device3 (ID3D11Device5 value)
		{
			return Unsafe.As<ID3D11Device5, ID3D11Device3>(ref value);
		}

		public unsafe static implicit operator ID3D11Device2 (ID3D11Device5 value)
		{
			return Unsafe.As<ID3D11Device5, ID3D11Device2>(ref value);
		}

		public unsafe static implicit operator ID3D11Device1 (ID3D11Device5 value)
		{
			return Unsafe.As<ID3D11Device5, ID3D11Device1>(ref value);
		}

		public unsafe static implicit operator ID3D11Device (ID3D11Device5 value)
		{
			return Unsafe.As<ID3D11Device5, ID3D11Device>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11Device5 value)
		{
			return Unsafe.As<ID3D11Device5, IUnknown>(ref value);
		}

	}

	[Guid("9b7e4e00-342c-4106-a19f-4f2704f689f0")]
	[NativeName("ID3D11Multithread")]
	public partial struct ID3D11Multithread : IComObject, IComObject<ID3D11Multithread>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("9b7e4e00-342c-4106-a19f-4f2704f689f0");

		public unsafe ID3D11Multithread (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void Enter()
		{
			ID3D11Multithread* ptr = (ID3D11Multithread*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Multithread*, void>)(*LpVtbl))(ptr);
		}

		public readonly unsafe void Leave()
		{
			ID3D11Multithread* ptr = (ID3D11Multithread*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11Multithread*, void>)(LpVtbl[1]))(ptr);
		}

		public readonly unsafe int SetMultithreadProtected(int bMTProtect)
		{
			ID3D11Multithread* ptr = (ID3D11Multithread*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Multithread*, int, int>)(LpVtbl[2]))(ptr, bMTProtect);
			return ret;
		}

		public readonly unsafe int GetMultithreadProtected()
		{
			ID3D11Multithread* ptr = (ID3D11Multithread*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Multithread*, int>)(LpVtbl[3]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11Multithread value)
		{
			return Unsafe.As<ID3D11Multithread, IUnknown>(ref value);
		}

	}

	[Guid("c4e7374c-6243-4d1b-ae87-52b4f740e261")]
	[NativeName("ID3D11VideoContext2")]
	public partial struct ID3D11VideoContext2 : IComObject, IComObject<ID3D11VideoContext2>, IComObject<ID3D11VideoContext1>, IComObject<ID3D11VideoContext>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("c4e7374c-6243-4d1b-ae87-52b4f740e261");

		public unsafe ID3D11VideoContext2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void VideoProcessorSetOutputHDRMetaData(ID3D11VideoProcessor* pVideoProcessor, DxgiHdrMetadataType type, uint size, void* pHDRMetaData)
		{
			ID3D11VideoContext2* ptr = (ID3D11VideoContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext2*, ID3D11VideoProcessor*, DxgiHdrMetadataType, uint, void*, void>)(LpVtbl[14]))(ptr, pVideoProcessor, type, size, pHDRMetaData);
		}

		public readonly unsafe void VideoProcessorSetOutputHDRMetaData(ref ID3D11VideoProcessor pVideoProcessor, DxgiHdrMetadataType type, uint size, void* pHDRMetaData)
		{
			ID3D11VideoContext2* ptr = (ID3D11VideoContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext2*, ID3D11VideoProcessor*, DxgiHdrMetadataType, uint, void*, void>)(LpVtbl[14]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, type, size, pHDRMetaData);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputHDRMetaData(ID3D11VideoProcessor* pVideoProcessor, DxgiHdrMetadataType* pType, uint size, void* pMetaData)
		{
			ID3D11VideoContext2* ptr = (ID3D11VideoContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext2*, ID3D11VideoProcessor*, DxgiHdrMetadataType*, uint, void*, void>)(LpVtbl[15]))(ptr, pVideoProcessor, pType, size, pMetaData);
		}

		public readonly unsafe void VideoProcessorGetOutputHDRMetaData(ref ID3D11VideoProcessor pVideoProcessor, DxgiHdrMetadataType* pType, uint size, void* pMetaData)
		{
			ID3D11VideoContext2* ptr = (ID3D11VideoContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext2*, ID3D11VideoProcessor*, DxgiHdrMetadataType*, uint, void*, void>)(LpVtbl[15]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, pType, size, pMetaData);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputHDRMetaData(ID3D11VideoProcessor* pVideoProcessor, ref DxgiHdrMetadataType pType, uint size, void* pMetaData)
		{
			ID3D11VideoContext2* ptr = (ID3D11VideoContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiHdrMetadataType* ppType = &pType)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext2*, ID3D11VideoProcessor*, DxgiHdrMetadataType*, uint, void*, void>)(LpVtbl[15]))(ptr, pVideoProcessor, (DxgiHdrMetadataType*)ppType, size, pMetaData);
			}
		}

		public readonly unsafe void VideoProcessorGetOutputHDRMetaData(ref ID3D11VideoProcessor pVideoProcessor, ref DxgiHdrMetadataType pType, uint size, void* pMetaData)
		{
			ID3D11VideoContext2* ptr = (ID3D11VideoContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (DxgiHdrMetadataType* ppType = &pType)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext2*, ID3D11VideoProcessor*, DxgiHdrMetadataType*, uint, void*, void>)(LpVtbl[15]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, (DxgiHdrMetadataType*)ppType, size, pMetaData);
				}
			}
		}

		public readonly unsafe void VideoProcessorSetStreamHDRMetaData(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, DxgiHdrMetadataType type, uint size, void* pHDRMetaData)
		{
			ID3D11VideoContext2* ptr = (ID3D11VideoContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext2*, ID3D11VideoProcessor*, uint, DxgiHdrMetadataType, uint, void*, void>)(LpVtbl[16]))(ptr, pVideoProcessor, streamIndex, type, size, pHDRMetaData);
		}

		public readonly unsafe void VideoProcessorSetStreamHDRMetaData(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, DxgiHdrMetadataType type, uint size, void* pHDRMetaData)
		{
			ID3D11VideoContext2* ptr = (ID3D11VideoContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext2*, ID3D11VideoProcessor*, uint, DxgiHdrMetadataType, uint, void*, void>)(LpVtbl[16]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, type, size, pHDRMetaData);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamHDRMetaData(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, DxgiHdrMetadataType* pType, uint size, void* pMetaData)
		{
			ID3D11VideoContext2* ptr = (ID3D11VideoContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11VideoContext2*, ID3D11VideoProcessor*, uint, DxgiHdrMetadataType*, uint, void*, void>)(LpVtbl[17]))(ptr, pVideoProcessor, streamIndex, pType, size, pMetaData);
		}

		public readonly unsafe void VideoProcessorGetStreamHDRMetaData(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, DxgiHdrMetadataType* pType, uint size, void* pMetaData)
		{
			ID3D11VideoContext2* ptr = (ID3D11VideoContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext2*, ID3D11VideoProcessor*, uint, DxgiHdrMetadataType*, uint, void*, void>)(LpVtbl[17]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, pType, size, pMetaData);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamHDRMetaData(ID3D11VideoProcessor* pVideoProcessor, uint streamIndex, ref DxgiHdrMetadataType pType, uint size, void* pMetaData)
		{
			ID3D11VideoContext2* ptr = (ID3D11VideoContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiHdrMetadataType* ppType = &pType)
			{
				((delegate* unmanaged[Stdcall]<ID3D11VideoContext2*, ID3D11VideoProcessor*, uint, DxgiHdrMetadataType*, uint, void*, void>)(LpVtbl[17]))(ptr, pVideoProcessor, streamIndex, (DxgiHdrMetadataType*)ppType, size, pMetaData);
			}
		}

		public readonly unsafe void VideoProcessorGetStreamHDRMetaData(ref ID3D11VideoProcessor pVideoProcessor, uint streamIndex, ref DxgiHdrMetadataType pType, uint size, void* pMetaData)
		{
			ID3D11VideoContext2* ptr = (ID3D11VideoContext2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (DxgiHdrMetadataType* ppType = &pType)
				{
					((delegate* unmanaged[Stdcall]<ID3D11VideoContext2*, ID3D11VideoProcessor*, uint, DxgiHdrMetadataType*, uint, void*, void>)(LpVtbl[17]))(ptr, (ID3D11VideoProcessor*)ppVideoProcessor, streamIndex, (DxgiHdrMetadataType*)ppType, size, pMetaData);
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11VideoContext1 (ID3D11VideoContext2 value)
		{
			return Unsafe.As<ID3D11VideoContext2, ID3D11VideoContext1>(ref value);
		}

		public unsafe static implicit operator ID3D11VideoContext (ID3D11VideoContext2 value)
		{
			return Unsafe.As<ID3D11VideoContext2, ID3D11VideoContext>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11VideoContext2 value)
		{
			return Unsafe.As<ID3D11VideoContext2, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11VideoContext2 value)
		{
			return Unsafe.As<ID3D11VideoContext2, IUnknown>(ref value);
		}

	}

	[Guid("59c0cb01-35f0-4a70-8f67-87905c906a53")]
	[NativeName("ID3D11VideoDevice2")]
	public partial struct ID3D11VideoDevice2 : IComObject, IComObject<ID3D11VideoDevice2>, IComObject<ID3D11VideoDevice1>, IComObject<ID3D11VideoDevice>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("59c0cb01-35f0-4a70-8f67-87905c906a53");

		public unsafe ID3D11VideoDevice2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult CheckFeatureSupport(D3D11FeatureVideo feature, void* pFeatureSupportData, uint featureSupportDataSize)
		{
			ID3D11VideoDevice2* ptr = (ID3D11VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice2*, D3D11FeatureVideo, void*, uint, HResult>)(LpVtbl[4]))(ptr, feature, pFeatureSupportData, featureSupportDataSize);
			return ret;
		}

		public readonly unsafe HResult NegotiateCryptoSessionKeyExchangeM(ID3D11CryptoSession* pCryptoSession, D3D11CryptoSessionKeyExchangeFlags flags, uint dataSize, void* pData)
		{
			ID3D11VideoDevice2* ptr = (ID3D11VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice2*, ID3D11CryptoSession*, D3D11CryptoSessionKeyExchangeFlags, uint, void*, HResult>)(LpVtbl[5]))(ptr, pCryptoSession, flags, dataSize, pData);
			return ret;
		}

		public readonly unsafe HResult NegotiateCryptoSessionKeyExchangeM(ref ID3D11CryptoSession pCryptoSession, D3D11CryptoSessionKeyExchangeFlags flags, uint dataSize, void* pData)
		{
			ID3D11VideoDevice2* ptr = (ID3D11VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession* ppCryptoSession = &pCryptoSession)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice2*, ID3D11CryptoSession*, D3D11CryptoSessionKeyExchangeFlags, uint, void*, HResult>)(LpVtbl[5]))(ptr, (ID3D11CryptoSession*)ppCryptoSession, flags, dataSize, pData);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11VideoDevice1 (ID3D11VideoDevice2 value)
		{
			return Unsafe.As<ID3D11VideoDevice2, ID3D11VideoDevice1>(ref value);
		}

		public unsafe static implicit operator ID3D11VideoDevice (ID3D11VideoDevice2 value)
		{
			return Unsafe.As<ID3D11VideoDevice2, ID3D11VideoDevice>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11VideoDevice2 value)
		{
			return Unsafe.As<ID3D11VideoDevice2, IUnknown>(ref value);
		}

	}

	[Guid("a9e2faa0-cb39-418f-a0b7-d8aad4de672e")]
	[NativeName("ID3D11VideoContext3")]
	public partial struct ID3D11VideoContext3 : IComObject, IComObject<ID3D11VideoContext3>, IComObject<ID3D11VideoContext2>, IComObject<ID3D11VideoContext1>, IComObject<ID3D11VideoContext>, IComObject<ID3D11DeviceChild>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("a9e2faa0-cb39-418f-a0b7-d8aad4de672e");

		public unsafe ID3D11VideoContext3 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult DecoderBeginFrame1(ID3D11VideoDecoder* pDecoder, ID3D11VideoDecoderOutputView* pView, uint contentKeySize, void* pContentKey, uint numComponentHistograms, uint* pHistogramOffsets, ID3D11Buffer*** ppHistogramBuffers)
		{
			ID3D11VideoContext3* ptr = (ID3D11VideoContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext3*, ID3D11VideoDecoder*, ID3D11VideoDecoderOutputView*, uint, void*, uint, uint*, ID3D11Buffer***, HResult>)(LpVtbl[4]))(ptr, pDecoder, pView, contentKeySize, pContentKey, numComponentHistograms, pHistogramOffsets, ppHistogramBuffers);
			return ret;
		}

		public readonly unsafe HResult DecoderBeginFrame1(ref ID3D11VideoDecoder pDecoder, ID3D11VideoDecoderOutputView* pView, uint contentKeySize, void* pContentKey, uint numComponentHistograms, uint* pHistogramOffsets, ID3D11Buffer*** ppHistogramBuffers)
		{
			ID3D11VideoContext3* ptr = (ID3D11VideoContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext3*, ID3D11VideoDecoder*, ID3D11VideoDecoderOutputView*, uint, void*, uint, uint*, ID3D11Buffer***, HResult>)(LpVtbl[4]))(ptr, (ID3D11VideoDecoder*)ppDecoder, pView, contentKeySize, pContentKey, numComponentHistograms, pHistogramOffsets, ppHistogramBuffers);
				return ret;
			}
		}

		public readonly unsafe HResult DecoderBeginFrame1(ID3D11VideoDecoder* pDecoder, ref ID3D11VideoDecoderOutputView pView, uint contentKeySize, void* pContentKey, uint numComponentHistograms, uint* pHistogramOffsets, ID3D11Buffer*** ppHistogramBuffers)
		{
			ID3D11VideoContext3* ptr = (ID3D11VideoContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoderOutputView* ppView = &pView)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext3*, ID3D11VideoDecoder*, ID3D11VideoDecoderOutputView*, uint, void*, uint, uint*, ID3D11Buffer***, HResult>)(LpVtbl[4]))(ptr, pDecoder, (ID3D11VideoDecoderOutputView*)ppView, contentKeySize, pContentKey, numComponentHistograms, pHistogramOffsets, ppHistogramBuffers);
				return ret;
			}
		}

		public readonly unsafe HResult DecoderBeginFrame1(ref ID3D11VideoDecoder pDecoder, ref ID3D11VideoDecoderOutputView pView, uint contentKeySize, void* pContentKey, uint numComponentHistograms, uint* pHistogramOffsets, ID3D11Buffer*** ppHistogramBuffers)
		{
			ID3D11VideoContext3* ptr = (ID3D11VideoContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (ID3D11VideoDecoderOutputView* ppView = &pView)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext3*, ID3D11VideoDecoder*, ID3D11VideoDecoderOutputView*, uint, void*, uint, uint*, ID3D11Buffer***, HResult>)(LpVtbl[4]))(ptr, (ID3D11VideoDecoder*)ppDecoder, (ID3D11VideoDecoderOutputView*)ppView, contentKeySize, pContentKey, numComponentHistograms, pHistogramOffsets, ppHistogramBuffers);
					return ret;
				}
			}
		}

		public readonly unsafe HResult DecoderBeginFrame1(ID3D11VideoDecoder* pDecoder, ID3D11VideoDecoderOutputView* pView, uint contentKeySize, void* pContentKey, uint numComponentHistograms, ref uint pHistogramOffsets, ID3D11Buffer*** ppHistogramBuffers)
		{
			ID3D11VideoContext3* ptr = (ID3D11VideoContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppHistogramOffsets = &pHistogramOffsets)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext3*, ID3D11VideoDecoder*, ID3D11VideoDecoderOutputView*, uint, void*, uint, uint*, ID3D11Buffer***, HResult>)(LpVtbl[4]))(ptr, pDecoder, pView, contentKeySize, pContentKey, numComponentHistograms, (uint*)ppHistogramOffsets, ppHistogramBuffers);
				return ret;
			}
		}

		public readonly unsafe HResult DecoderBeginFrame1(ref ID3D11VideoDecoder pDecoder, ID3D11VideoDecoderOutputView* pView, uint contentKeySize, void* pContentKey, uint numComponentHistograms, ref uint pHistogramOffsets, ID3D11Buffer*** ppHistogramBuffers)
		{
			ID3D11VideoContext3* ptr = (ID3D11VideoContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (uint* ppHistogramOffsets = &pHistogramOffsets)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext3*, ID3D11VideoDecoder*, ID3D11VideoDecoderOutputView*, uint, void*, uint, uint*, ID3D11Buffer***, HResult>)(LpVtbl[4]))(ptr, (ID3D11VideoDecoder*)ppDecoder, pView, contentKeySize, pContentKey, numComponentHistograms, (uint*)ppHistogramOffsets, ppHistogramBuffers);
					return ret;
				}
			}
		}

		public readonly unsafe HResult DecoderBeginFrame1(ID3D11VideoDecoder* pDecoder, ref ID3D11VideoDecoderOutputView pView, uint contentKeySize, void* pContentKey, uint numComponentHistograms, ref uint pHistogramOffsets, ID3D11Buffer*** ppHistogramBuffers)
		{
			ID3D11VideoContext3* ptr = (ID3D11VideoContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoderOutputView* ppView = &pView)
			{
				fixed (uint* ppHistogramOffsets = &pHistogramOffsets)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext3*, ID3D11VideoDecoder*, ID3D11VideoDecoderOutputView*, uint, void*, uint, uint*, ID3D11Buffer***, HResult>)(LpVtbl[4]))(ptr, pDecoder, (ID3D11VideoDecoderOutputView*)ppView, contentKeySize, pContentKey, numComponentHistograms, (uint*)ppHistogramOffsets, ppHistogramBuffers);
					return ret;
				}
			}
		}

		public readonly unsafe HResult DecoderBeginFrame1(ref ID3D11VideoDecoder pDecoder, ref ID3D11VideoDecoderOutputView pView, uint contentKeySize, void* pContentKey, uint numComponentHistograms, ref uint pHistogramOffsets, ID3D11Buffer*** ppHistogramBuffers)
		{
			ID3D11VideoContext3* ptr = (ID3D11VideoContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (ID3D11VideoDecoderOutputView* ppView = &pView)
				{
					fixed (uint* ppHistogramOffsets = &pHistogramOffsets)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext3*, ID3D11VideoDecoder*, ID3D11VideoDecoderOutputView*, uint, void*, uint, uint*, ID3D11Buffer***, HResult>)(LpVtbl[4]))(ptr, (ID3D11VideoDecoder*)ppDecoder, (ID3D11VideoDecoderOutputView*)ppView, contentKeySize, pContentKey, numComponentHistograms, (uint*)ppHistogramOffsets, ppHistogramBuffers);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult DecoderBeginFrame1(ID3D11VideoDecoder* pDecoder, ID3D11VideoDecoderOutputView* pView, uint contentKeySize, void* pContentKey, uint numComponentHistograms, uint* pHistogramOffsets, ref ID3D11Buffer* ppHistogramBuffers)
		{
			ID3D11VideoContext3* ptr = (ID3D11VideoContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Buffer** pppHistogramBuffers = &ppHistogramBuffers)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext3*, ID3D11VideoDecoder*, ID3D11VideoDecoderOutputView*, uint, void*, uint, uint*, ID3D11Buffer***, HResult>)(LpVtbl[4]))(ptr, pDecoder, pView, contentKeySize, pContentKey, numComponentHistograms, pHistogramOffsets, (ID3D11Buffer***)pppHistogramBuffers);
				return ret;
			}
		}

		public readonly unsafe HResult DecoderBeginFrame1(ref ID3D11VideoDecoder pDecoder, ID3D11VideoDecoderOutputView* pView, uint contentKeySize, void* pContentKey, uint numComponentHistograms, uint* pHistogramOffsets, ref ID3D11Buffer* ppHistogramBuffers)
		{
			ID3D11VideoContext3* ptr = (ID3D11VideoContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (ID3D11Buffer** pppHistogramBuffers = &ppHistogramBuffers)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext3*, ID3D11VideoDecoder*, ID3D11VideoDecoderOutputView*, uint, void*, uint, uint*, ID3D11Buffer***, HResult>)(LpVtbl[4]))(ptr, (ID3D11VideoDecoder*)ppDecoder, pView, contentKeySize, pContentKey, numComponentHistograms, pHistogramOffsets, (ID3D11Buffer***)pppHistogramBuffers);
					return ret;
				}
			}
		}

		public readonly unsafe HResult DecoderBeginFrame1(ID3D11VideoDecoder* pDecoder, ref ID3D11VideoDecoderOutputView pView, uint contentKeySize, void* pContentKey, uint numComponentHistograms, uint* pHistogramOffsets, ref ID3D11Buffer* ppHistogramBuffers)
		{
			ID3D11VideoContext3* ptr = (ID3D11VideoContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoderOutputView* ppView = &pView)
			{
				fixed (ID3D11Buffer** pppHistogramBuffers = &ppHistogramBuffers)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext3*, ID3D11VideoDecoder*, ID3D11VideoDecoderOutputView*, uint, void*, uint, uint*, ID3D11Buffer***, HResult>)(LpVtbl[4]))(ptr, pDecoder, (ID3D11VideoDecoderOutputView*)ppView, contentKeySize, pContentKey, numComponentHistograms, pHistogramOffsets, (ID3D11Buffer***)pppHistogramBuffers);
					return ret;
				}
			}
		}

		public readonly unsafe HResult DecoderBeginFrame1(ref ID3D11VideoDecoder pDecoder, ref ID3D11VideoDecoderOutputView pView, uint contentKeySize, void* pContentKey, uint numComponentHistograms, uint* pHistogramOffsets, ref ID3D11Buffer* ppHistogramBuffers)
		{
			ID3D11VideoContext3* ptr = (ID3D11VideoContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (ID3D11VideoDecoderOutputView* ppView = &pView)
				{
					fixed (ID3D11Buffer** pppHistogramBuffers = &ppHistogramBuffers)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext3*, ID3D11VideoDecoder*, ID3D11VideoDecoderOutputView*, uint, void*, uint, uint*, ID3D11Buffer***, HResult>)(LpVtbl[4]))(ptr, (ID3D11VideoDecoder*)ppDecoder, (ID3D11VideoDecoderOutputView*)ppView, contentKeySize, pContentKey, numComponentHistograms, pHistogramOffsets, (ID3D11Buffer***)pppHistogramBuffers);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult DecoderBeginFrame1(ID3D11VideoDecoder* pDecoder, ID3D11VideoDecoderOutputView* pView, uint contentKeySize, void* pContentKey, uint numComponentHistograms, ref uint pHistogramOffsets, ref ID3D11Buffer* ppHistogramBuffers)
		{
			ID3D11VideoContext3* ptr = (ID3D11VideoContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppHistogramOffsets = &pHistogramOffsets)
			{
				fixed (ID3D11Buffer** pppHistogramBuffers = &ppHistogramBuffers)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext3*, ID3D11VideoDecoder*, ID3D11VideoDecoderOutputView*, uint, void*, uint, uint*, ID3D11Buffer***, HResult>)(LpVtbl[4]))(ptr, pDecoder, pView, contentKeySize, pContentKey, numComponentHistograms, (uint*)ppHistogramOffsets, (ID3D11Buffer***)pppHistogramBuffers);
					return ret;
				}
			}
		}

		public readonly unsafe HResult DecoderBeginFrame1(ref ID3D11VideoDecoder pDecoder, ID3D11VideoDecoderOutputView* pView, uint contentKeySize, void* pContentKey, uint numComponentHistograms, ref uint pHistogramOffsets, ref ID3D11Buffer* ppHistogramBuffers)
		{
			ID3D11VideoContext3* ptr = (ID3D11VideoContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (uint* ppHistogramOffsets = &pHistogramOffsets)
				{
					fixed (ID3D11Buffer** pppHistogramBuffers = &ppHistogramBuffers)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext3*, ID3D11VideoDecoder*, ID3D11VideoDecoderOutputView*, uint, void*, uint, uint*, ID3D11Buffer***, HResult>)(LpVtbl[4]))(ptr, (ID3D11VideoDecoder*)ppDecoder, pView, contentKeySize, pContentKey, numComponentHistograms, (uint*)ppHistogramOffsets, (ID3D11Buffer***)pppHistogramBuffers);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult DecoderBeginFrame1(ID3D11VideoDecoder* pDecoder, ref ID3D11VideoDecoderOutputView pView, uint contentKeySize, void* pContentKey, uint numComponentHistograms, ref uint pHistogramOffsets, ref ID3D11Buffer* ppHistogramBuffers)
		{
			ID3D11VideoContext3* ptr = (ID3D11VideoContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoderOutputView* ppView = &pView)
			{
				fixed (uint* ppHistogramOffsets = &pHistogramOffsets)
				{
					fixed (ID3D11Buffer** pppHistogramBuffers = &ppHistogramBuffers)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext3*, ID3D11VideoDecoder*, ID3D11VideoDecoderOutputView*, uint, void*, uint, uint*, ID3D11Buffer***, HResult>)(LpVtbl[4]))(ptr, pDecoder, (ID3D11VideoDecoderOutputView*)ppView, contentKeySize, pContentKey, numComponentHistograms, (uint*)ppHistogramOffsets, (ID3D11Buffer***)pppHistogramBuffers);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult DecoderBeginFrame1(ref ID3D11VideoDecoder pDecoder, ref ID3D11VideoDecoderOutputView pView, uint contentKeySize, void* pContentKey, uint numComponentHistograms, ref uint pHistogramOffsets, ref ID3D11Buffer* ppHistogramBuffers)
		{
			ID3D11VideoContext3* ptr = (ID3D11VideoContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (ID3D11VideoDecoderOutputView* ppView = &pView)
				{
					fixed (uint* ppHistogramOffsets = &pHistogramOffsets)
					{
						fixed (ID3D11Buffer** pppHistogramBuffers = &ppHistogramBuffers)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext3*, ID3D11VideoDecoder*, ID3D11VideoDecoderOutputView*, uint, void*, uint, uint*, ID3D11Buffer***, HResult>)(LpVtbl[4]))(ptr, (ID3D11VideoDecoder*)ppDecoder, (ID3D11VideoDecoderOutputView*)ppView, contentKeySize, pContentKey, numComponentHistograms, (uint*)ppHistogramOffsets, (ID3D11Buffer***)pppHistogramBuffers);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult SubmitDecoderBuffers2(ID3D11VideoDecoder* pDecoder, uint numBuffers, D3D11VideoDecoderBufferDesc2* pBufferDesc)
		{
			ID3D11VideoContext3* ptr = (ID3D11VideoContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext3*, ID3D11VideoDecoder*, uint, D3D11VideoDecoderBufferDesc2*, HResult>)(LpVtbl[5]))(ptr, pDecoder, numBuffers, pBufferDesc);
			return ret;
		}

		public readonly unsafe HResult SubmitDecoderBuffers2(ref ID3D11VideoDecoder pDecoder, uint numBuffers, D3D11VideoDecoderBufferDesc2* pBufferDesc)
		{
			ID3D11VideoContext3* ptr = (ID3D11VideoContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext3*, ID3D11VideoDecoder*, uint, D3D11VideoDecoderBufferDesc2*, HResult>)(LpVtbl[5]))(ptr, (ID3D11VideoDecoder*)ppDecoder, numBuffers, pBufferDesc);
				return ret;
			}
		}

		public readonly unsafe HResult SubmitDecoderBuffers2(ID3D11VideoDecoder* pDecoder, uint numBuffers, ref D3D11VideoDecoderBufferDesc2 pBufferDesc)
		{
			ID3D11VideoContext3* ptr = (ID3D11VideoContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderBufferDesc2* ppBufferDesc = &pBufferDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext3*, ID3D11VideoDecoder*, uint, D3D11VideoDecoderBufferDesc2*, HResult>)(LpVtbl[5]))(ptr, pDecoder, numBuffers, (D3D11VideoDecoderBufferDesc2*)ppBufferDesc);
				return ret;
			}
		}

		public readonly unsafe HResult SubmitDecoderBuffers2(ref ID3D11VideoDecoder pDecoder, uint numBuffers, ref D3D11VideoDecoderBufferDesc2 pBufferDesc)
		{
			ID3D11VideoContext3* ptr = (ID3D11VideoContext3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (D3D11VideoDecoderBufferDesc2* ppBufferDesc = &pBufferDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoContext3*, ID3D11VideoDecoder*, uint, D3D11VideoDecoderBufferDesc2*, HResult>)(LpVtbl[5]))(ptr, (ID3D11VideoDecoder*)ppDecoder, numBuffers, (D3D11VideoDecoderBufferDesc2*)ppBufferDesc);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D11VideoContext2 (ID3D11VideoContext3 value)
		{
			return Unsafe.As<ID3D11VideoContext3, ID3D11VideoContext2>(ref value);
		}

		public unsafe static implicit operator ID3D11VideoContext1 (ID3D11VideoContext3 value)
		{
			return Unsafe.As<ID3D11VideoContext3, ID3D11VideoContext1>(ref value);
		}

		public unsafe static implicit operator ID3D11VideoContext (ID3D11VideoContext3 value)
		{
			return Unsafe.As<ID3D11VideoContext3, ID3D11VideoContext>(ref value);
		}

		public unsafe static implicit operator ID3D11DeviceChild (ID3D11VideoContext3 value)
		{
			return Unsafe.As<ID3D11VideoContext3, ID3D11DeviceChild>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D11VideoContext3 value)
		{
			return Unsafe.As<ID3D11VideoContext3, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_4_0000_0005 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D11_VIDEO_DECODER_BUFFER_DESC2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoDecoderBufferDesc2
	{
		[NativeName("BufferType")]
		public D3D11VideoDecoderBufferType BufferType;
		[NativeName("DataOffset")]
		public uint DataOffset;
		[NativeName("DataSize")]
		public uint DataSize;
		[NativeName("pIV")]
		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		public unsafe void* PIV;

		[NativeName("IVSize")]
		public uint IVSize;
		[NativeName("pSubSampleMappingBlock")]
		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		public unsafe D3D11VideoDecoderSubSampleMappingBlock* PSubSampleMappingBlock;

		[NativeName("SubSampleMappingCount")]
		public uint SubSampleMappingCount;
		[NativeName("cBlocksStripeEncrypted")]
		public uint CBlocksStripeEncrypted;
		[NativeName("cBlocksStripeClear")]
		public uint CBlocksStripeClear;


	}

	[NativeName("D3D11_FEATURE_DATA_VIDEO_DECODER_HISTOGRAM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataVideoDecoderHistogram
	{
		[NativeName("DecoderDesc")]
		public D3D11VideoDecoderDesc DecoderDesc;
		[NativeName("Components")]
		public D3D11VideoDecoderHistogramComponentFlags Components;
		[NativeName("BinCount")]
		public uint BinCount;
		[NativeName("CounterBitDepth")]
		public uint CounterBitDepth;


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_4_0000_0006 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D11_FEATURE_DATA_D3D11_OPTIONS4")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D11Options4
	{
		[NativeName("ExtendedNV12SharedTextureSupported")]
		public int ExtendedNV12SharedTextureSupported;


	}

}
