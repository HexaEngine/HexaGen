// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.VMA
{
	[NativeName(NativeNameType.Typedef, "VmaAllocator")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VmaAllocator : IEquatable<VmaAllocator>
	{
		public VmaAllocator(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VmaAllocator Null => new VmaAllocator(0);
		public static implicit operator VmaAllocator(nint handle) => new VmaAllocator(handle);
		public static bool operator ==(VmaAllocator left, VmaAllocator right) => left.Handle == right.Handle;
		public static bool operator !=(VmaAllocator left, VmaAllocator right) => left.Handle != right.Handle;
		public static bool operator ==(VmaAllocator left, nint right) => left.Handle == right;
		public static bool operator !=(VmaAllocator left, nint right) => left.Handle != right;
		public bool Equals(VmaAllocator other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VmaAllocator handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VmaAllocator [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VmaPool")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VmaPool : IEquatable<VmaPool>
	{
		public VmaPool(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VmaPool Null => new VmaPool(0);
		public static implicit operator VmaPool(nint handle) => new VmaPool(handle);
		public static bool operator ==(VmaPool left, VmaPool right) => left.Handle == right.Handle;
		public static bool operator !=(VmaPool left, VmaPool right) => left.Handle != right.Handle;
		public static bool operator ==(VmaPool left, nint right) => left.Handle == right;
		public static bool operator !=(VmaPool left, nint right) => left.Handle != right;
		public bool Equals(VmaPool other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VmaPool handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VmaPool [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VmaAllocation")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VmaAllocation : IEquatable<VmaAllocation>
	{
		public VmaAllocation(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VmaAllocation Null => new VmaAllocation(0);
		public static implicit operator VmaAllocation(nint handle) => new VmaAllocation(handle);
		public static bool operator ==(VmaAllocation left, VmaAllocation right) => left.Handle == right.Handle;
		public static bool operator !=(VmaAllocation left, VmaAllocation right) => left.Handle != right.Handle;
		public static bool operator ==(VmaAllocation left, nint right) => left.Handle == right;
		public static bool operator !=(VmaAllocation left, nint right) => left.Handle != right;
		public bool Equals(VmaAllocation other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VmaAllocation handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VmaAllocation [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VmaDefragmentationContext")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VmaDefragmentationContext : IEquatable<VmaDefragmentationContext>
	{
		public VmaDefragmentationContext(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VmaDefragmentationContext Null => new VmaDefragmentationContext(0);
		public static implicit operator VmaDefragmentationContext(nint handle) => new VmaDefragmentationContext(handle);
		public static bool operator ==(VmaDefragmentationContext left, VmaDefragmentationContext right) => left.Handle == right.Handle;
		public static bool operator !=(VmaDefragmentationContext left, VmaDefragmentationContext right) => left.Handle != right.Handle;
		public static bool operator ==(VmaDefragmentationContext left, nint right) => left.Handle == right;
		public static bool operator !=(VmaDefragmentationContext left, nint right) => left.Handle != right;
		public bool Equals(VmaDefragmentationContext other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VmaDefragmentationContext handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VmaDefragmentationContext [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VmaVirtualAllocation")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VmaVirtualAllocation : IEquatable<VmaVirtualAllocation>
	{
		public VmaVirtualAllocation(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VmaVirtualAllocation Null => new VmaVirtualAllocation(0);
		public static implicit operator VmaVirtualAllocation(nint handle) => new VmaVirtualAllocation(handle);
		public static bool operator ==(VmaVirtualAllocation left, VmaVirtualAllocation right) => left.Handle == right.Handle;
		public static bool operator !=(VmaVirtualAllocation left, VmaVirtualAllocation right) => left.Handle != right.Handle;
		public static bool operator ==(VmaVirtualAllocation left, nint right) => left.Handle == right;
		public static bool operator !=(VmaVirtualAllocation left, nint right) => left.Handle != right;
		public bool Equals(VmaVirtualAllocation other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VmaVirtualAllocation handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VmaVirtualAllocation [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VmaVirtualBlock")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VmaVirtualBlock : IEquatable<VmaVirtualBlock>
	{
		public VmaVirtualBlock(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VmaVirtualBlock Null => new VmaVirtualBlock(0);
		public static implicit operator VmaVirtualBlock(nint handle) => new VmaVirtualBlock(handle);
		public static bool operator ==(VmaVirtualBlock left, VmaVirtualBlock right) => left.Handle == right.Handle;
		public static bool operator !=(VmaVirtualBlock left, VmaVirtualBlock right) => left.Handle != right.Handle;
		public static bool operator ==(VmaVirtualBlock left, nint right) => left.Handle == right;
		public static bool operator !=(VmaVirtualBlock left, nint right) => left.Handle != right;
		public bool Equals(VmaVirtualBlock other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VmaVirtualBlock handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VmaVirtualBlock [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VmaAllocHandle")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VmaAllocHandle : IEquatable<VmaAllocHandle>
	{
		public VmaAllocHandle(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VmaAllocHandle Null => new VmaAllocHandle(0);
		public static implicit operator VmaAllocHandle(nint handle) => new VmaAllocHandle(handle);
		public static bool operator ==(VmaAllocHandle left, VmaAllocHandle right) => left.Handle == right.Handle;
		public static bool operator !=(VmaAllocHandle left, VmaAllocHandle right) => left.Handle != right.Handle;
		public static bool operator ==(VmaAllocHandle left, nint right) => left.Handle == right;
		public static bool operator !=(VmaAllocHandle left, nint right) => left.Handle != right;
		public bool Equals(VmaAllocHandle other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VmaAllocHandle handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VmaAllocHandle [0x{0}]", Handle.ToString("X"));
	}

}
