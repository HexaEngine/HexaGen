// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.Vulkan;

namespace Hexa.NET.VMA
{
	public unsafe partial class VMA
	{
		internal const string LibName = "vma";

		/// <summary>
		/// Creates #VmaAllocator object.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaCreateAllocator")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaCreateAllocator")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaCreateAllocatorNative([NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocatorCreateInfo*")] VmaAllocatorCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocator")] [NativeName(NativeNameType.Type, "VmaAllocator*")] VmaAllocator* pAllocator);

		/// <summary>/// Creates #VmaAllocator object.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateAllocator")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateAllocator([NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocatorCreateInfo*")] VmaAllocatorCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocator")] [NativeName(NativeNameType.Type, "VmaAllocator*")] VmaAllocator* pAllocator)
		{
			int ret = VmaCreateAllocatorNative(pCreateInfo, pAllocator);
			return ret;
		}

		/// <summary>/// Creates #VmaAllocator object.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateAllocator")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateAllocator([NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocatorCreateInfo*")] VmaAllocatorCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocator")] [NativeName(NativeNameType.Type, "VmaAllocator*")] ref VmaAllocator pAllocator)
		{
			fixed (VmaAllocator* ppAllocator = &pAllocator)
			{
				int ret = VmaCreateAllocatorNative(pCreateInfo, (VmaAllocator*)ppAllocator);
				return ret;
			}
		}

		/// <summary>
		/// Destroys allocator object.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaDestroyAllocator")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaDestroyAllocator")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaDestroyAllocatorNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator);

		/// <summary>/// Destroys allocator object.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaDestroyAllocator")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaDestroyAllocator([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator)
		{
			VmaDestroyAllocatorNative(allocator);
		}

		/// <summary>
		/// <br/>
		/// It might be useful if you want to keep just the #VmaAllocator handle and fetch other required handles to<br/>
		/// `VkPhysicalDevice`, `VkDevice` etc. every time using this function.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaGetAllocatorInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaGetAllocatorInfo")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaGetAllocatorInfoNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pAllocatorInfo")] [NativeName(NativeNameType.Type, "VmaAllocatorInfo*")] VmaAllocatorInfo* pAllocatorInfo);

		/// <summary>/// <br/>/// It might be useful if you want to keep just the #VmaAllocator handle and fetch other required handles to<br/>/// `VkPhysicalDevice`, `VkDevice` etc. every time using this function.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetAllocatorInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetAllocatorInfo([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pAllocatorInfo")] [NativeName(NativeNameType.Type, "VmaAllocatorInfo*")] VmaAllocatorInfo* pAllocatorInfo)
		{
			VmaGetAllocatorInfoNative(allocator, pAllocatorInfo);
		}

		/// <summary>/// <br/>/// It might be useful if you want to keep just the #VmaAllocator handle and fetch other required handles to<br/>/// `VkPhysicalDevice`, `VkDevice` etc. every time using this function.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetAllocatorInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetAllocatorInfo([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pAllocatorInfo")] [NativeName(NativeNameType.Type, "VmaAllocatorInfo*")] ref VmaAllocatorInfo pAllocatorInfo)
		{
			fixed (VmaAllocatorInfo* ppAllocatorInfo = &pAllocatorInfo)
			{
				VmaGetAllocatorInfoNative(allocator, (VmaAllocatorInfo*)ppAllocatorInfo);
			}
		}

		/// <summary>
		/// PhysicalDeviceProperties are fetched from physicalDevice by the allocator.<br/>
		/// You can access it here, without fetching it again on your own.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaGetPhysicalDeviceProperties")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaGetPhysicalDeviceProperties")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaGetPhysicalDevicePropertiesNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "ppPhysicalDeviceProperties")] [NativeName(NativeNameType.Type, "const VkPhysicalDeviceProperties**")] VkPhysicalDeviceProperties** ppPhysicalDeviceProperties);

		/// <summary>/// PhysicalDeviceProperties are fetched from physicalDevice by the allocator.<br/>/// You can access it here, without fetching it again on your own.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetPhysicalDeviceProperties")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetPhysicalDeviceProperties([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "ppPhysicalDeviceProperties")] [NativeName(NativeNameType.Type, "const VkPhysicalDeviceProperties**")] VkPhysicalDeviceProperties** ppPhysicalDeviceProperties)
		{
			VmaGetPhysicalDevicePropertiesNative(allocator, ppPhysicalDeviceProperties);
		}

		/// <summary>/// PhysicalDeviceProperties are fetched from physicalDevice by the allocator.<br/>/// You can access it here, without fetching it again on your own.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetPhysicalDeviceProperties")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetPhysicalDeviceProperties([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "ppPhysicalDeviceProperties")] [NativeName(NativeNameType.Type, "const VkPhysicalDeviceProperties**")] ref VkPhysicalDeviceProperties* ppPhysicalDeviceProperties)
		{
			fixed (VkPhysicalDeviceProperties** pppPhysicalDeviceProperties = &ppPhysicalDeviceProperties)
			{
				VmaGetPhysicalDevicePropertiesNative(allocator, (VkPhysicalDeviceProperties**)pppPhysicalDeviceProperties);
			}
		}

		/// <summary>
		/// PhysicalDeviceMemoryProperties are fetched from physicalDevice by the allocator.<br/>
		/// You can access it here, without fetching it again on your own.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaGetMemoryProperties")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaGetMemoryProperties")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaGetMemoryPropertiesNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "ppPhysicalDeviceMemoryProperties")] [NativeName(NativeNameType.Type, "const VkPhysicalDeviceMemoryProperties**")] VkPhysicalDeviceMemoryProperties** ppPhysicalDeviceMemoryProperties);

		/// <summary>/// PhysicalDeviceMemoryProperties are fetched from physicalDevice by the allocator.<br/>/// You can access it here, without fetching it again on your own.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetMemoryProperties")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetMemoryProperties([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "ppPhysicalDeviceMemoryProperties")] [NativeName(NativeNameType.Type, "const VkPhysicalDeviceMemoryProperties**")] VkPhysicalDeviceMemoryProperties** ppPhysicalDeviceMemoryProperties)
		{
			VmaGetMemoryPropertiesNative(allocator, ppPhysicalDeviceMemoryProperties);
		}

		/// <summary>/// PhysicalDeviceMemoryProperties are fetched from physicalDevice by the allocator.<br/>/// You can access it here, without fetching it again on your own.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetMemoryProperties")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetMemoryProperties([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "ppPhysicalDeviceMemoryProperties")] [NativeName(NativeNameType.Type, "const VkPhysicalDeviceMemoryProperties**")] ref VkPhysicalDeviceMemoryProperties* ppPhysicalDeviceMemoryProperties)
		{
			fixed (VkPhysicalDeviceMemoryProperties** pppPhysicalDeviceMemoryProperties = &ppPhysicalDeviceMemoryProperties)
			{
				VmaGetMemoryPropertiesNative(allocator, (VkPhysicalDeviceMemoryProperties**)pppPhysicalDeviceMemoryProperties);
			}
		}

		/// <summary>
		/// This is just a convenience function. Same information can be obtained using<br/>
		/// vmaGetMemoryProperties().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaGetMemoryTypeProperties")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaGetMemoryTypeProperties")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaGetMemoryTypePropertiesNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "memoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint memoryTypeIndex, [NativeName(NativeNameType.Param, "pFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags*")] VkMemoryPropertyFlags* pFlags);

		/// <summary>/// This is just a convenience function. Same information can be obtained using<br/>/// vmaGetMemoryProperties().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetMemoryTypeProperties")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetMemoryTypeProperties([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "memoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint memoryTypeIndex, [NativeName(NativeNameType.Param, "pFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags*")] VkMemoryPropertyFlags* pFlags)
		{
			VmaGetMemoryTypePropertiesNative(allocator, memoryTypeIndex, pFlags);
		}

		/// <summary>/// This is just a convenience function. Same information can be obtained using<br/>/// vmaGetMemoryProperties().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetMemoryTypeProperties")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetMemoryTypeProperties([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "memoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint memoryTypeIndex, [NativeName(NativeNameType.Param, "pFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags*")] ref VkMemoryPropertyFlags pFlags)
		{
			fixed (VkMemoryPropertyFlags* ppFlags = &pFlags)
			{
				VmaGetMemoryTypePropertiesNative(allocator, memoryTypeIndex, (VkMemoryPropertyFlags*)ppFlags);
			}
		}

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaSetCurrentFrameIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaSetCurrentFrameIndex")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaSetCurrentFrameIndexNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "frameIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint frameIndex);

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaSetCurrentFrameIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaSetCurrentFrameIndex([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "frameIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint frameIndex)
		{
			VmaSetCurrentFrameIndexNative(allocator, frameIndex);
		}

		/// <summary>
		/// <br/>
		/// This function is called "calculate" not "get" because it has to traverse all<br/>
		/// internal data structures, so it may be quite slow. Use it for debugging purposes.<br/>
		/// For faster but more brief statistics suitable to be called every frame or every allocation,<br/>
		/// use vmaGetHeapBudgets().<br/>
		/// Note that when using allocator from multiple threads, returned information may immediately<br/>
		/// become outdated.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaCalculateStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaCalculateStatistics")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaCalculateStatisticsNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pStats")] [NativeName(NativeNameType.Type, "VmaTotalStatistics*")] VmaTotalStatistics* pStats);

		/// <summary>/// <br/>/// This function is called "calculate" not "get" because it has to traverse all<br/>/// internal data structures, so it may be quite slow. Use it for debugging purposes.<br/>/// For faster but more brief statistics suitable to be called every frame or every allocation,<br/>/// use vmaGetHeapBudgets().<br/>/// Note that when using allocator from multiple threads, returned information may immediately<br/>/// become outdated.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCalculateStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaCalculateStatistics([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pStats")] [NativeName(NativeNameType.Type, "VmaTotalStatistics*")] VmaTotalStatistics* pStats)
		{
			VmaCalculateStatisticsNative(allocator, pStats);
		}

		/// <summary>/// <br/>/// This function is called "calculate" not "get" because it has to traverse all<br/>/// internal data structures, so it may be quite slow. Use it for debugging purposes.<br/>/// For faster but more brief statistics suitable to be called every frame or every allocation,<br/>/// use vmaGetHeapBudgets().<br/>/// Note that when using allocator from multiple threads, returned information may immediately<br/>/// become outdated.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCalculateStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaCalculateStatistics([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pStats")] [NativeName(NativeNameType.Type, "VmaTotalStatistics*")] ref VmaTotalStatistics pStats)
		{
			fixed (VmaTotalStatistics* ppStats = &pStats)
			{
				VmaCalculateStatisticsNative(allocator, (VmaTotalStatistics*)ppStats);
			}
		}

		/// <summary>
		/// <br/>
		/// This function is called "get" not "calculate" because it is very fast, suitable to be called<br/>
		/// every frame or every allocation. For more detailed statistics use vmaCalculateStatistics().<br/>
		/// Note that when using allocator from multiple threads, returned information may immediately<br/>
		/// become outdated.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaGetHeapBudgets")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaGetHeapBudgets")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaGetHeapBudgetsNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBudgets")] [NativeName(NativeNameType.Type, "VmaBudget*")] VmaBudget* pBudgets);

		/// <summary>/// <br/>/// This function is called "get" not "calculate" because it is very fast, suitable to be called<br/>/// every frame or every allocation. For more detailed statistics use vmaCalculateStatistics().<br/>/// Note that when using allocator from multiple threads, returned information may immediately<br/>/// become outdated.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetHeapBudgets")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetHeapBudgets([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBudgets")] [NativeName(NativeNameType.Type, "VmaBudget*")] VmaBudget* pBudgets)
		{
			VmaGetHeapBudgetsNative(allocator, pBudgets);
		}

		/// <summary>/// <br/>/// This function is called "get" not "calculate" because it is very fast, suitable to be called<br/>/// every frame or every allocation. For more detailed statistics use vmaCalculateStatistics().<br/>/// Note that when using allocator from multiple threads, returned information may immediately<br/>/// become outdated.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetHeapBudgets")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetHeapBudgets([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBudgets")] [NativeName(NativeNameType.Type, "VmaBudget*")] ref VmaBudget pBudgets)
		{
			fixed (VmaBudget* ppBudgets = &pBudgets)
			{
				VmaGetHeapBudgetsNative(allocator, (VmaBudget*)ppBudgets);
			}
		}

		/// <summary>
		/// This algorithm tries to find a memory type that:<br/>
		/// - Is allowed by memoryTypeBits.<br/>
		/// - Contains all the flags from pAllocationCreateInfo->requiredFlags.<br/>
		/// - Matches intended usage.<br/>
		/// - Has as many flags from pAllocationCreateInfo->preferredFlags as possible.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndex")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaFindMemoryTypeIndex")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaFindMemoryTypeIndexNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "memoryTypeBits")] [NativeName(NativeNameType.Type, "uint32_t")] uint memoryTypeBits, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pMemoryTypeIndex);

		/// <summary>/// This algorithm tries to find a memory type that:<br/>/// - Is allowed by memoryTypeBits.<br/>/// - Contains all the flags from pAllocationCreateInfo->requiredFlags.<br/>/// - Matches intended usage.<br/>/// - Has as many flags from pAllocationCreateInfo->preferredFlags as possible.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndex")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFindMemoryTypeIndex([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "memoryTypeBits")] [NativeName(NativeNameType.Type, "uint32_t")] uint memoryTypeBits, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pMemoryTypeIndex)
		{
			int ret = VmaFindMemoryTypeIndexNative(allocator, memoryTypeBits, pAllocationCreateInfo, pMemoryTypeIndex);
			return ret;
		}

		/// <summary>/// This algorithm tries to find a memory type that:<br/>/// - Is allowed by memoryTypeBits.<br/>/// - Contains all the flags from pAllocationCreateInfo->requiredFlags.<br/>/// - Matches intended usage.<br/>/// - Has as many flags from pAllocationCreateInfo->preferredFlags as possible.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndex")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFindMemoryTypeIndex([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "memoryTypeBits")] [NativeName(NativeNameType.Type, "uint32_t")] uint memoryTypeBits, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pMemoryTypeIndex)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				int ret = VmaFindMemoryTypeIndexNative(allocator, memoryTypeBits, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pMemoryTypeIndex);
				return ret;
			}
		}

		/// <summary>/// This algorithm tries to find a memory type that:<br/>/// - Is allowed by memoryTypeBits.<br/>/// - Contains all the flags from pAllocationCreateInfo->requiredFlags.<br/>/// - Matches intended usage.<br/>/// - Has as many flags from pAllocationCreateInfo->preferredFlags as possible.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndex")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFindMemoryTypeIndex([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "memoryTypeBits")] [NativeName(NativeNameType.Type, "uint32_t")] uint memoryTypeBits, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pMemoryTypeIndex)
		{
			fixed (uint* ppMemoryTypeIndex = &pMemoryTypeIndex)
			{
				int ret = VmaFindMemoryTypeIndexNative(allocator, memoryTypeBits, pAllocationCreateInfo, (uint*)ppMemoryTypeIndex);
				return ret;
			}
		}

		/// <summary>/// This algorithm tries to find a memory type that:<br/>/// - Is allowed by memoryTypeBits.<br/>/// - Contains all the flags from pAllocationCreateInfo->requiredFlags.<br/>/// - Matches intended usage.<br/>/// - Has as many flags from pAllocationCreateInfo->preferredFlags as possible.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndex")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFindMemoryTypeIndex([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "memoryTypeBits")] [NativeName(NativeNameType.Type, "uint32_t")] uint memoryTypeBits, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pMemoryTypeIndex)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (uint* ppMemoryTypeIndex = &pMemoryTypeIndex)
				{
					int ret = VmaFindMemoryTypeIndexNative(allocator, memoryTypeBits, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (uint*)ppMemoryTypeIndex);
					return ret;
				}
			}
		}

		/// <summary>
		/// It can be useful e.g. to determine value to be used as VmaPoolCreateInfo::memoryTypeIndex.<br/>
		/// It internally creates a temporary, dummy buffer that never has memory bound.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndexForBufferInfo")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaFindMemoryTypeIndexForBufferInfo")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaFindMemoryTypeIndexForBufferInfoNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pMemoryTypeIndex);

		/// <summary>/// It can be useful e.g. to determine value to be used as VmaPoolCreateInfo::memoryTypeIndex.<br/>/// It internally creates a temporary, dummy buffer that never has memory bound.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndexForBufferInfo")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFindMemoryTypeIndexForBufferInfo([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pMemoryTypeIndex)
		{
			int ret = VmaFindMemoryTypeIndexForBufferInfoNative(allocator, pBufferCreateInfo, pAllocationCreateInfo, pMemoryTypeIndex);
			return ret;
		}

		/// <summary>/// It can be useful e.g. to determine value to be used as VmaPoolCreateInfo::memoryTypeIndex.<br/>/// It internally creates a temporary, dummy buffer that never has memory bound.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndexForBufferInfo")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFindMemoryTypeIndexForBufferInfo([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pMemoryTypeIndex)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				int ret = VmaFindMemoryTypeIndexForBufferInfoNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, pAllocationCreateInfo, pMemoryTypeIndex);
				return ret;
			}
		}

		/// <summary>/// It can be useful e.g. to determine value to be used as VmaPoolCreateInfo::memoryTypeIndex.<br/>/// It internally creates a temporary, dummy buffer that never has memory bound.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndexForBufferInfo")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFindMemoryTypeIndexForBufferInfo([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pMemoryTypeIndex)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				int ret = VmaFindMemoryTypeIndexForBufferInfoNative(allocator, pBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pMemoryTypeIndex);
				return ret;
			}
		}

		/// <summary>/// It can be useful e.g. to determine value to be used as VmaPoolCreateInfo::memoryTypeIndex.<br/>/// It internally creates a temporary, dummy buffer that never has memory bound.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndexForBufferInfo")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFindMemoryTypeIndexForBufferInfo([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pMemoryTypeIndex)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					int ret = VmaFindMemoryTypeIndexForBufferInfoNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pMemoryTypeIndex);
					return ret;
				}
			}
		}

		/// <summary>/// It can be useful e.g. to determine value to be used as VmaPoolCreateInfo::memoryTypeIndex.<br/>/// It internally creates a temporary, dummy buffer that never has memory bound.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndexForBufferInfo")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFindMemoryTypeIndexForBufferInfo([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pMemoryTypeIndex)
		{
			fixed (uint* ppMemoryTypeIndex = &pMemoryTypeIndex)
			{
				int ret = VmaFindMemoryTypeIndexForBufferInfoNative(allocator, pBufferCreateInfo, pAllocationCreateInfo, (uint*)ppMemoryTypeIndex);
				return ret;
			}
		}

		/// <summary>/// It can be useful e.g. to determine value to be used as VmaPoolCreateInfo::memoryTypeIndex.<br/>/// It internally creates a temporary, dummy buffer that never has memory bound.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndexForBufferInfo")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFindMemoryTypeIndexForBufferInfo([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pMemoryTypeIndex)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (uint* ppMemoryTypeIndex = &pMemoryTypeIndex)
				{
					int ret = VmaFindMemoryTypeIndexForBufferInfoNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, pAllocationCreateInfo, (uint*)ppMemoryTypeIndex);
					return ret;
				}
			}
		}

		/// <summary>/// It can be useful e.g. to determine value to be used as VmaPoolCreateInfo::memoryTypeIndex.<br/>/// It internally creates a temporary, dummy buffer that never has memory bound.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndexForBufferInfo")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFindMemoryTypeIndexForBufferInfo([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pMemoryTypeIndex)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (uint* ppMemoryTypeIndex = &pMemoryTypeIndex)
				{
					int ret = VmaFindMemoryTypeIndexForBufferInfoNative(allocator, pBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (uint*)ppMemoryTypeIndex);
					return ret;
				}
			}
		}

		/// <summary>/// It can be useful e.g. to determine value to be used as VmaPoolCreateInfo::memoryTypeIndex.<br/>/// It internally creates a temporary, dummy buffer that never has memory bound.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndexForBufferInfo")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFindMemoryTypeIndexForBufferInfo([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pMemoryTypeIndex)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (uint* ppMemoryTypeIndex = &pMemoryTypeIndex)
					{
						int ret = VmaFindMemoryTypeIndexForBufferInfoNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (uint*)ppMemoryTypeIndex);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// It can be useful e.g. to determine value to be used as VmaPoolCreateInfo::memoryTypeIndex.<br/>
		/// It internally creates a temporary, dummy image that never has memory bound.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndexForImageInfo")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaFindMemoryTypeIndexForImageInfo")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaFindMemoryTypeIndexForImageInfoNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pMemoryTypeIndex);

		/// <summary>/// It can be useful e.g. to determine value to be used as VmaPoolCreateInfo::memoryTypeIndex.<br/>/// It internally creates a temporary, dummy image that never has memory bound.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndexForImageInfo")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFindMemoryTypeIndexForImageInfo([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pMemoryTypeIndex)
		{
			int ret = VmaFindMemoryTypeIndexForImageInfoNative(allocator, pImageCreateInfo, pAllocationCreateInfo, pMemoryTypeIndex);
			return ret;
		}

		/// <summary>/// It can be useful e.g. to determine value to be used as VmaPoolCreateInfo::memoryTypeIndex.<br/>/// It internally creates a temporary, dummy image that never has memory bound.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndexForImageInfo")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFindMemoryTypeIndexForImageInfo([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pMemoryTypeIndex)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				int ret = VmaFindMemoryTypeIndexForImageInfoNative(allocator, (VkImageCreateInfo*)ppImageCreateInfo, pAllocationCreateInfo, pMemoryTypeIndex);
				return ret;
			}
		}

		/// <summary>/// It can be useful e.g. to determine value to be used as VmaPoolCreateInfo::memoryTypeIndex.<br/>/// It internally creates a temporary, dummy image that never has memory bound.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndexForImageInfo")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFindMemoryTypeIndexForImageInfo([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pMemoryTypeIndex)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				int ret = VmaFindMemoryTypeIndexForImageInfoNative(allocator, pImageCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pMemoryTypeIndex);
				return ret;
			}
		}

		/// <summary>/// It can be useful e.g. to determine value to be used as VmaPoolCreateInfo::memoryTypeIndex.<br/>/// It internally creates a temporary, dummy image that never has memory bound.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndexForImageInfo")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFindMemoryTypeIndexForImageInfo([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pMemoryTypeIndex)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					int ret = VmaFindMemoryTypeIndexForImageInfoNative(allocator, (VkImageCreateInfo*)ppImageCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pMemoryTypeIndex);
					return ret;
				}
			}
		}

		/// <summary>/// It can be useful e.g. to determine value to be used as VmaPoolCreateInfo::memoryTypeIndex.<br/>/// It internally creates a temporary, dummy image that never has memory bound.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndexForImageInfo")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFindMemoryTypeIndexForImageInfo([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pMemoryTypeIndex)
		{
			fixed (uint* ppMemoryTypeIndex = &pMemoryTypeIndex)
			{
				int ret = VmaFindMemoryTypeIndexForImageInfoNative(allocator, pImageCreateInfo, pAllocationCreateInfo, (uint*)ppMemoryTypeIndex);
				return ret;
			}
		}

		/// <summary>/// It can be useful e.g. to determine value to be used as VmaPoolCreateInfo::memoryTypeIndex.<br/>/// It internally creates a temporary, dummy image that never has memory bound.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndexForImageInfo")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFindMemoryTypeIndexForImageInfo([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pMemoryTypeIndex)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				fixed (uint* ppMemoryTypeIndex = &pMemoryTypeIndex)
				{
					int ret = VmaFindMemoryTypeIndexForImageInfoNative(allocator, (VkImageCreateInfo*)ppImageCreateInfo, pAllocationCreateInfo, (uint*)ppMemoryTypeIndex);
					return ret;
				}
			}
		}

		/// <summary>/// It can be useful e.g. to determine value to be used as VmaPoolCreateInfo::memoryTypeIndex.<br/>/// It internally creates a temporary, dummy image that never has memory bound.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndexForImageInfo")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFindMemoryTypeIndexForImageInfo([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pMemoryTypeIndex)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (uint* ppMemoryTypeIndex = &pMemoryTypeIndex)
				{
					int ret = VmaFindMemoryTypeIndexForImageInfoNative(allocator, pImageCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (uint*)ppMemoryTypeIndex);
					return ret;
				}
			}
		}

		/// <summary>/// It can be useful e.g. to determine value to be used as VmaPoolCreateInfo::memoryTypeIndex.<br/>/// It internally creates a temporary, dummy image that never has memory bound.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFindMemoryTypeIndexForImageInfo")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFindMemoryTypeIndexForImageInfo([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pMemoryTypeIndex")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pMemoryTypeIndex)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (uint* ppMemoryTypeIndex = &pMemoryTypeIndex)
					{
						int ret = VmaFindMemoryTypeIndexForImageInfoNative(allocator, (VkImageCreateInfo*)ppImageCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (uint*)ppMemoryTypeIndex);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaCreatePool")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaCreatePool")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaCreatePoolNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaPoolCreateInfo*")] VmaPoolCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pPool")] [NativeName(NativeNameType.Type, "VmaPool*")] VmaPool* pPool);

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreatePool")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreatePool([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaPoolCreateInfo*")] VmaPoolCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pPool")] [NativeName(NativeNameType.Type, "VmaPool*")] VmaPool* pPool)
		{
			int ret = VmaCreatePoolNative(allocator, pCreateInfo, pPool);
			return ret;
		}

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreatePool")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreatePool([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaPoolCreateInfo*")] ref VmaPoolCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pPool")] [NativeName(NativeNameType.Type, "VmaPool*")] VmaPool* pPool)
		{
			fixed (VmaPoolCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				int ret = VmaCreatePoolNative(allocator, (VmaPoolCreateInfo*)ppCreateInfo, pPool);
				return ret;
			}
		}

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreatePool")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreatePool([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaPoolCreateInfo*")] VmaPoolCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pPool")] [NativeName(NativeNameType.Type, "VmaPool*")] ref VmaPool pPool)
		{
			fixed (VmaPool* ppPool = &pPool)
			{
				int ret = VmaCreatePoolNative(allocator, pCreateInfo, (VmaPool*)ppPool);
				return ret;
			}
		}

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreatePool")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreatePool([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaPoolCreateInfo*")] ref VmaPoolCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pPool")] [NativeName(NativeNameType.Type, "VmaPool*")] ref VmaPool pPool)
		{
			fixed (VmaPoolCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				fixed (VmaPool* ppPool = &pPool)
				{
					int ret = VmaCreatePoolNative(allocator, (VmaPoolCreateInfo*)ppCreateInfo, (VmaPool*)ppPool);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaDestroyPool")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaDestroyPool")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaDestroyPoolNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pool")] [NativeName(NativeNameType.Type, "VmaPool")] VmaPool pool);

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaDestroyPool")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaDestroyPool([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pool")] [NativeName(NativeNameType.Type, "VmaPool")] VmaPool pool)
		{
			VmaDestroyPoolNative(allocator, pool);
		}

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaGetPoolStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaGetPoolStatistics")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaGetPoolStatisticsNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pool")] [NativeName(NativeNameType.Type, "VmaPool")] VmaPool pool, [NativeName(NativeNameType.Param, "pPoolStats")] [NativeName(NativeNameType.Type, "VmaStatistics*")] VmaStatistics* pPoolStats);

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetPoolStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetPoolStatistics([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pool")] [NativeName(NativeNameType.Type, "VmaPool")] VmaPool pool, [NativeName(NativeNameType.Param, "pPoolStats")] [NativeName(NativeNameType.Type, "VmaStatistics*")] VmaStatistics* pPoolStats)
		{
			VmaGetPoolStatisticsNative(allocator, pool, pPoolStats);
		}

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetPoolStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetPoolStatistics([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pool")] [NativeName(NativeNameType.Type, "VmaPool")] VmaPool pool, [NativeName(NativeNameType.Param, "pPoolStats")] [NativeName(NativeNameType.Type, "VmaStatistics*")] ref VmaStatistics pPoolStats)
		{
			fixed (VmaStatistics* ppPoolStats = &pPoolStats)
			{
				VmaGetPoolStatisticsNative(allocator, pool, (VmaStatistics*)ppPoolStats);
			}
		}

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaCalculatePoolStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaCalculatePoolStatistics")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaCalculatePoolStatisticsNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pool")] [NativeName(NativeNameType.Type, "VmaPool")] VmaPool pool, [NativeName(NativeNameType.Param, "pPoolStats")] [NativeName(NativeNameType.Type, "VmaDetailedStatistics*")] VmaDetailedStatistics* pPoolStats);

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCalculatePoolStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaCalculatePoolStatistics([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pool")] [NativeName(NativeNameType.Type, "VmaPool")] VmaPool pool, [NativeName(NativeNameType.Param, "pPoolStats")] [NativeName(NativeNameType.Type, "VmaDetailedStatistics*")] VmaDetailedStatistics* pPoolStats)
		{
			VmaCalculatePoolStatisticsNative(allocator, pool, pPoolStats);
		}

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCalculatePoolStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaCalculatePoolStatistics([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pool")] [NativeName(NativeNameType.Type, "VmaPool")] VmaPool pool, [NativeName(NativeNameType.Param, "pPoolStats")] [NativeName(NativeNameType.Type, "VmaDetailedStatistics*")] ref VmaDetailedStatistics pPoolStats)
		{
			fixed (VmaDetailedStatistics* ppPoolStats = &pPoolStats)
			{
				VmaCalculatePoolStatisticsNative(allocator, pool, (VmaDetailedStatistics*)ppPoolStats);
			}
		}

		/// <summary>
		/// <br/>
		/// Corruption detection is enabled only when `VMA_DEBUG_DETECT_CORRUPTION` macro is defined to nonzero,<br/>
		/// `VMA_DEBUG_MARGIN` is defined to nonzero and the pool is created in memory type that is<br/>
		/// `HOST_VISIBLE` and `HOST_COHERENT`. For more information, see [Corruption detection](<br/>
		/// Possible return values:<br/>
		/// - `VK_ERROR_FEATURE_NOT_PRESENT` - corruption detection is not enabled for specified pool.<br/>
		/// - `VK_SUCCESS` - corruption detection has been performed and succeeded.<br/>
		/// - `VK_ERROR_UNKNOWN` - corruption detection has been performed and found memory corruptions around one of the allocations.<br/>
		/// `VMA_ASSERT` is also fired in that case.<br/>
		/// - Other value: Error returned by Vulkan, e.g. memory mapping failure.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaCheckPoolCorruption")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaCheckPoolCorruption")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaCheckPoolCorruptionNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pool")] [NativeName(NativeNameType.Type, "VmaPool")] VmaPool pool);

		/// <summary>/// <br/>/// Corruption detection is enabled only when `VMA_DEBUG_DETECT_CORRUPTION` macro is defined to nonzero,<br/>/// `VMA_DEBUG_MARGIN` is defined to nonzero and the pool is created in memory type that is<br/>/// `HOST_VISIBLE` and `HOST_COHERENT`. For more information, see [Corruption detection](<br/>/// Possible return values:<br/>/// - `VK_ERROR_FEATURE_NOT_PRESENT` - corruption detection is not enabled for specified pool.<br/>/// - `VK_SUCCESS` - corruption detection has been performed and succeeded.<br/>/// - `VK_ERROR_UNKNOWN` - corruption detection has been performed and found memory corruptions around one of the allocations.<br/>/// `VMA_ASSERT` is also fired in that case.<br/>/// - Other value: Error returned by Vulkan, e.g. memory mapping failure.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCheckPoolCorruption")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCheckPoolCorruption([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pool")] [NativeName(NativeNameType.Type, "VmaPool")] VmaPool pool)
		{
			int ret = VmaCheckPoolCorruptionNative(allocator, pool);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// After the call `ppName` is either null or points to an internally-owned null-terminated string<br/>
		/// containing name of the pool that was previously set. The pointer becomes invalid when the pool is<br/>
		/// destroyed or its name is changed using vmaSetPoolName().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaGetPoolName")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaGetPoolName")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaGetPoolNameNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pool")] [NativeName(NativeNameType.Type, "VmaPool")] VmaPool pool, [NativeName(NativeNameType.Param, "ppName")] [NativeName(NativeNameType.Type, "const char**")] byte** ppName);

		/// <summary>/// <br/>/// After the call `ppName` is either null or points to an internally-owned null-terminated string<br/>/// containing name of the pool that was previously set. The pointer becomes invalid when the pool is<br/>/// destroyed or its name is changed using vmaSetPoolName().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetPoolName")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetPoolName([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pool")] [NativeName(NativeNameType.Type, "VmaPool")] VmaPool pool, [NativeName(NativeNameType.Param, "ppName")] [NativeName(NativeNameType.Type, "const char**")] byte** ppName)
		{
			VmaGetPoolNameNative(allocator, pool, ppName);
		}

		/// <summary>/// <br/>/// After the call `ppName` is either null or points to an internally-owned null-terminated string<br/>/// containing name of the pool that was previously set. The pointer becomes invalid when the pool is<br/>/// destroyed or its name is changed using vmaSetPoolName().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetPoolName")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetPoolName([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pool")] [NativeName(NativeNameType.Type, "VmaPool")] VmaPool pool, [NativeName(NativeNameType.Param, "ppName")] [NativeName(NativeNameType.Type, "const char**")] ref byte* ppName)
		{
			fixed (byte** pppName = &ppName)
			{
				VmaGetPoolNameNative(allocator, pool, (byte**)pppName);
			}
		}

		/// <summary>
		/// <br/>
		/// `pName` can be either null or pointer to a null-terminated string with new name for the pool.<br/>
		/// Function makes internal copy of the string, so it can be changed or freed immediately after this call.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaSetPoolName")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaSetPoolName")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaSetPoolNameNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pool")] [NativeName(NativeNameType.Type, "VmaPool")] VmaPool pool, [NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "const char*")] byte* pName);

		/// <summary>/// <br/>/// `pName` can be either null or pointer to a null-terminated string with new name for the pool.<br/>/// Function makes internal copy of the string, so it can be changed or freed immediately after this call.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaSetPoolName")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaSetPoolName([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pool")] [NativeName(NativeNameType.Type, "VmaPool")] VmaPool pool, [NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "const char*")] byte* pName)
		{
			VmaSetPoolNameNative(allocator, pool, pName);
		}

		/// <summary>/// <br/>/// `pName` can be either null or pointer to a null-terminated string with new name for the pool.<br/>/// Function makes internal copy of the string, so it can be changed or freed immediately after this call.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaSetPoolName")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaSetPoolName([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pool")] [NativeName(NativeNameType.Type, "VmaPool")] VmaPool pool, [NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "const char*")] ref byte pName)
		{
			fixed (byte* ppName = &pName)
			{
				VmaSetPoolNameNative(allocator, pool, (byte*)ppName);
			}
		}

		/// <summary>/// <br/>/// `pName` can be either null or pointer to a null-terminated string with new name for the pool.<br/>/// Function makes internal copy of the string, so it can be changed or freed immediately after this call.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaSetPoolName")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaSetPoolName([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pool")] [NativeName(NativeNameType.Type, "VmaPool")] VmaPool pool, [NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "const char*")] string pName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			VmaSetPoolNameNative(allocator, pool, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// <br/>
		/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>
		/// It is recommended to use vmaAllocateMemoryForBuffer(), vmaAllocateMemoryForImage(),<br/>
		/// vmaCreateBuffer(), vmaCreateImage() instead whenever possible.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaAllocateMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaAllocateMemory")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaAllocateMemoryNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo);

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// It is recommended to use vmaAllocateMemoryForBuffer(), vmaAllocateMemoryForImage(),<br/>/// vmaCreateBuffer(), vmaCreateImage() instead whenever possible.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			int ret = VmaAllocateMemoryNative(allocator, pVkMemoryRequirements, pCreateInfo, pAllocation, pAllocationInfo);
			return ret;
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// It is recommended to use vmaAllocateMemoryForBuffer(), vmaAllocateMemoryForImage(),<br/>/// vmaCreateBuffer(), vmaCreateImage() instead whenever possible.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				int ret = VmaAllocateMemoryNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, pCreateInfo, pAllocation, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// It is recommended to use vmaAllocateMemoryForBuffer(), vmaAllocateMemoryForImage(),<br/>/// vmaCreateBuffer(), vmaCreateImage() instead whenever possible.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				int ret = VmaAllocateMemoryNative(allocator, pVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, pAllocation, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// It is recommended to use vmaAllocateMemoryForBuffer(), vmaAllocateMemoryForImage(),<br/>/// vmaCreateBuffer(), vmaCreateImage() instead whenever possible.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
				{
					int ret = VmaAllocateMemoryNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, pAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// It is recommended to use vmaAllocateMemoryForBuffer(), vmaAllocateMemoryForImage(),<br/>/// vmaCreateBuffer(), vmaCreateImage() instead whenever possible.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocation* ppAllocation = &pAllocation)
			{
				int ret = VmaAllocateMemoryNative(allocator, pVkMemoryRequirements, pCreateInfo, (VmaAllocation*)ppAllocation, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// It is recommended to use vmaAllocateMemoryForBuffer(), vmaAllocateMemoryForImage(),<br/>/// vmaCreateBuffer(), vmaCreateImage() instead whenever possible.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					int ret = VmaAllocateMemoryNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, pCreateInfo, (VmaAllocation*)ppAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// It is recommended to use vmaAllocateMemoryForBuffer(), vmaAllocateMemoryForImage(),<br/>/// vmaCreateBuffer(), vmaCreateImage() instead whenever possible.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					int ret = VmaAllocateMemoryNative(allocator, pVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, (VmaAllocation*)ppAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// It is recommended to use vmaAllocateMemoryForBuffer(), vmaAllocateMemoryForImage(),<br/>/// vmaCreateBuffer(), vmaCreateImage() instead whenever possible.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
				{
					fixed (VmaAllocation* ppAllocation = &pAllocation)
					{
						int ret = VmaAllocateMemoryNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, (VmaAllocation*)ppAllocation, pAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// It is recommended to use vmaAllocateMemoryForBuffer(), vmaAllocateMemoryForImage(),<br/>/// vmaCreateBuffer(), vmaCreateImage() instead whenever possible.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
			{
				int ret = VmaAllocateMemoryNative(allocator, pVkMemoryRequirements, pCreateInfo, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// It is recommended to use vmaAllocateMemoryForBuffer(), vmaAllocateMemoryForImage(),<br/>/// vmaCreateBuffer(), vmaCreateImage() instead whenever possible.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					int ret = VmaAllocateMemoryNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, pCreateInfo, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// It is recommended to use vmaAllocateMemoryForBuffer(), vmaAllocateMemoryForImage(),<br/>/// vmaCreateBuffer(), vmaCreateImage() instead whenever possible.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					int ret = VmaAllocateMemoryNative(allocator, pVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// It is recommended to use vmaAllocateMemoryForBuffer(), vmaAllocateMemoryForImage(),<br/>/// vmaCreateBuffer(), vmaCreateImage() instead whenever possible.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						int ret = VmaAllocateMemoryNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// It is recommended to use vmaAllocateMemoryForBuffer(), vmaAllocateMemoryForImage(),<br/>/// vmaCreateBuffer(), vmaCreateImage() instead whenever possible.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocation* ppAllocation = &pAllocation)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					int ret = VmaAllocateMemoryNative(allocator, pVkMemoryRequirements, pCreateInfo, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// It is recommended to use vmaAllocateMemoryForBuffer(), vmaAllocateMemoryForImage(),<br/>/// vmaCreateBuffer(), vmaCreateImage() instead whenever possible.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						int ret = VmaAllocateMemoryNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, pCreateInfo, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// It is recommended to use vmaAllocateMemoryForBuffer(), vmaAllocateMemoryForImage(),<br/>/// vmaCreateBuffer(), vmaCreateImage() instead whenever possible.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						int ret = VmaAllocateMemoryNative(allocator, pVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// It is recommended to use vmaAllocateMemoryForBuffer(), vmaAllocateMemoryForImage(),<br/>/// vmaCreateBuffer(), vmaCreateImage() instead whenever possible.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
				{
					fixed (VmaAllocation* ppAllocation = &pAllocation)
					{
						fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
						{
							int ret = VmaAllocateMemoryNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>
		/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>
		/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>
		/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>
		/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>
		/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>
		/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaAllocateMemoryPages")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaAllocateMemoryPagesNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] ulong allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo);

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] ulong allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			int ret = VmaAllocateMemoryPagesNative(allocator, pVkMemoryRequirements, pCreateInfo, allocationCount, pAllocations, pAllocationInfo);
			return ret;
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] ulong allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				int ret = VmaAllocateMemoryPagesNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, pCreateInfo, allocationCount, pAllocations, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] ulong allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				int ret = VmaAllocateMemoryPagesNative(allocator, pVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, allocationCount, pAllocations, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] ulong allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
				{
					int ret = VmaAllocateMemoryPagesNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, allocationCount, pAllocations, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] nuint allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			int ret = VmaAllocateMemoryPagesNative(allocator, pVkMemoryRequirements, pCreateInfo, allocationCount, pAllocations, pAllocationInfo);
			return ret;
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] nuint allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				int ret = VmaAllocateMemoryPagesNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, pCreateInfo, allocationCount, pAllocations, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] nuint allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				int ret = VmaAllocateMemoryPagesNative(allocator, pVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, allocationCount, pAllocations, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] nuint allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
				{
					int ret = VmaAllocateMemoryPagesNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, allocationCount, pAllocations, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] ulong allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocation* ppAllocations = &pAllocations)
			{
				int ret = VmaAllocateMemoryPagesNative(allocator, pVkMemoryRequirements, pCreateInfo, allocationCount, (VmaAllocation*)ppAllocations, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] ulong allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocation* ppAllocations = &pAllocations)
				{
					int ret = VmaAllocateMemoryPagesNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, pCreateInfo, allocationCount, (VmaAllocation*)ppAllocations, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] ulong allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				fixed (VmaAllocation* ppAllocations = &pAllocations)
				{
					int ret = VmaAllocateMemoryPagesNative(allocator, pVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, allocationCount, (VmaAllocation*)ppAllocations, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] ulong allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
				{
					fixed (VmaAllocation* ppAllocations = &pAllocations)
					{
						int ret = VmaAllocateMemoryPagesNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, allocationCount, (VmaAllocation*)ppAllocations, pAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] nuint allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocation* ppAllocations = &pAllocations)
			{
				int ret = VmaAllocateMemoryPagesNative(allocator, pVkMemoryRequirements, pCreateInfo, allocationCount, (VmaAllocation*)ppAllocations, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] nuint allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocation* ppAllocations = &pAllocations)
				{
					int ret = VmaAllocateMemoryPagesNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, pCreateInfo, allocationCount, (VmaAllocation*)ppAllocations, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] nuint allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				fixed (VmaAllocation* ppAllocations = &pAllocations)
				{
					int ret = VmaAllocateMemoryPagesNative(allocator, pVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, allocationCount, (VmaAllocation*)ppAllocations, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] nuint allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
				{
					fixed (VmaAllocation* ppAllocations = &pAllocations)
					{
						int ret = VmaAllocateMemoryPagesNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, allocationCount, (VmaAllocation*)ppAllocations, pAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] ulong allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
			{
				int ret = VmaAllocateMemoryPagesNative(allocator, pVkMemoryRequirements, pCreateInfo, allocationCount, pAllocations, (VmaAllocationInfo*)ppAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] ulong allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					int ret = VmaAllocateMemoryPagesNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, pCreateInfo, allocationCount, pAllocations, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] ulong allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					int ret = VmaAllocateMemoryPagesNative(allocator, pVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, allocationCount, pAllocations, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] ulong allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						int ret = VmaAllocateMemoryPagesNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, allocationCount, pAllocations, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] nuint allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
			{
				int ret = VmaAllocateMemoryPagesNative(allocator, pVkMemoryRequirements, pCreateInfo, allocationCount, pAllocations, (VmaAllocationInfo*)ppAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] nuint allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					int ret = VmaAllocateMemoryPagesNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, pCreateInfo, allocationCount, pAllocations, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] nuint allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					int ret = VmaAllocateMemoryPagesNative(allocator, pVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, allocationCount, pAllocations, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] nuint allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						int ret = VmaAllocateMemoryPagesNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, allocationCount, pAllocations, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] ulong allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocation* ppAllocations = &pAllocations)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					int ret = VmaAllocateMemoryPagesNative(allocator, pVkMemoryRequirements, pCreateInfo, allocationCount, (VmaAllocation*)ppAllocations, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] ulong allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocation* ppAllocations = &pAllocations)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						int ret = VmaAllocateMemoryPagesNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, pCreateInfo, allocationCount, (VmaAllocation*)ppAllocations, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] ulong allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				fixed (VmaAllocation* ppAllocations = &pAllocations)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						int ret = VmaAllocateMemoryPagesNative(allocator, pVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, allocationCount, (VmaAllocation*)ppAllocations, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] ulong allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
				{
					fixed (VmaAllocation* ppAllocations = &pAllocations)
					{
						fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
						{
							int ret = VmaAllocateMemoryPagesNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, allocationCount, (VmaAllocation*)ppAllocations, (VmaAllocationInfo*)ppAllocationInfo);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] nuint allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocation* ppAllocations = &pAllocations)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					int ret = VmaAllocateMemoryPagesNative(allocator, pVkMemoryRequirements, pCreateInfo, allocationCount, (VmaAllocation*)ppAllocations, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] nuint allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocation* ppAllocations = &pAllocations)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						int ret = VmaAllocateMemoryPagesNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, pCreateInfo, allocationCount, (VmaAllocation*)ppAllocations, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] VkMemoryRequirements* pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] nuint allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				fixed (VmaAllocation* ppAllocations = &pAllocations)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						int ret = VmaAllocateMemoryPagesNative(allocator, pVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, allocationCount, (VmaAllocation*)ppAllocations, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// You should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().<br/>/// Word "pages" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.<br/>/// It is just a general purpose allocation function able to make multiple allocations at once.<br/>/// It may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.<br/>/// All allocations are made using same parameters. All of them are created out of the same memory pool and type.<br/>/// If any allocation fails, all allocations already made within this function call are also freed, so that when<br/>/// returned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryPages")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pVkMemoryRequirements")] [NativeName(NativeNameType.Type, "const VkMemoryRequirements*")] ref VkMemoryRequirements pVkMemoryRequirements, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] nuint allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocations, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkMemoryRequirements* ppVkMemoryRequirements = &pVkMemoryRequirements)
			{
				fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
				{
					fixed (VmaAllocation* ppAllocations = &pAllocations)
					{
						fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
						{
							int ret = VmaAllocateMemoryPagesNative(allocator, (VkMemoryRequirements*)ppVkMemoryRequirements, (VmaAllocationCreateInfo*)ppCreateInfo, allocationCount, (VmaAllocation*)ppAllocations, (VmaAllocationInfo*)ppAllocationInfo);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// It only creates #VmaAllocation. To bind the memory to the buffer, use vmaBindBufferMemory().<br/>
		/// This is a special-purpose function. In most cases you should use vmaCreateBuffer().<br/>
		/// You must free the allocation using vmaFreeMemory() when no longer needed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaAllocateMemoryForBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaAllocateMemoryForBuffer")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaAllocateMemoryForBufferNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "VkBuffer")] VkBuffer buffer, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo);

		/// <summary>/// <br/>/// It only creates #VmaAllocation. To bind the memory to the buffer, use vmaBindBufferMemory().<br/>/// This is a special-purpose function. In most cases you should use vmaCreateBuffer().<br/>/// You must free the allocation using vmaFreeMemory() when no longer needed.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryForBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryForBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "VkBuffer")] VkBuffer buffer, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			int ret = VmaAllocateMemoryForBufferNative(allocator, buffer, pCreateInfo, pAllocation, pAllocationInfo);
			return ret;
		}

		/// <summary>/// <br/>/// It only creates #VmaAllocation. To bind the memory to the buffer, use vmaBindBufferMemory().<br/>/// This is a special-purpose function. In most cases you should use vmaCreateBuffer().<br/>/// You must free the allocation using vmaFreeMemory() when no longer needed.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryForBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryForBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "VkBuffer")] VkBuffer buffer, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				int ret = VmaAllocateMemoryForBufferNative(allocator, buffer, (VmaAllocationCreateInfo*)ppCreateInfo, pAllocation, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// It only creates #VmaAllocation. To bind the memory to the buffer, use vmaBindBufferMemory().<br/>/// This is a special-purpose function. In most cases you should use vmaCreateBuffer().<br/>/// You must free the allocation using vmaFreeMemory() when no longer needed.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryForBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryForBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "VkBuffer")] VkBuffer buffer, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocation* ppAllocation = &pAllocation)
			{
				int ret = VmaAllocateMemoryForBufferNative(allocator, buffer, pCreateInfo, (VmaAllocation*)ppAllocation, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// It only creates #VmaAllocation. To bind the memory to the buffer, use vmaBindBufferMemory().<br/>/// This is a special-purpose function. In most cases you should use vmaCreateBuffer().<br/>/// You must free the allocation using vmaFreeMemory() when no longer needed.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryForBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryForBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "VkBuffer")] VkBuffer buffer, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					int ret = VmaAllocateMemoryForBufferNative(allocator, buffer, (VmaAllocationCreateInfo*)ppCreateInfo, (VmaAllocation*)ppAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// It only creates #VmaAllocation. To bind the memory to the buffer, use vmaBindBufferMemory().<br/>/// This is a special-purpose function. In most cases you should use vmaCreateBuffer().<br/>/// You must free the allocation using vmaFreeMemory() when no longer needed.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryForBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryForBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "VkBuffer")] VkBuffer buffer, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
			{
				int ret = VmaAllocateMemoryForBufferNative(allocator, buffer, pCreateInfo, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// It only creates #VmaAllocation. To bind the memory to the buffer, use vmaBindBufferMemory().<br/>/// This is a special-purpose function. In most cases you should use vmaCreateBuffer().<br/>/// You must free the allocation using vmaFreeMemory() when no longer needed.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryForBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryForBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "VkBuffer")] VkBuffer buffer, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					int ret = VmaAllocateMemoryForBufferNative(allocator, buffer, (VmaAllocationCreateInfo*)ppCreateInfo, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// It only creates #VmaAllocation. To bind the memory to the buffer, use vmaBindBufferMemory().<br/>/// This is a special-purpose function. In most cases you should use vmaCreateBuffer().<br/>/// You must free the allocation using vmaFreeMemory() when no longer needed.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryForBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryForBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "VkBuffer")] VkBuffer buffer, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocation* ppAllocation = &pAllocation)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					int ret = VmaAllocateMemoryForBufferNative(allocator, buffer, pCreateInfo, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// It only creates #VmaAllocation. To bind the memory to the buffer, use vmaBindBufferMemory().<br/>/// This is a special-purpose function. In most cases you should use vmaCreateBuffer().<br/>/// You must free the allocation using vmaFreeMemory() when no longer needed.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryForBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryForBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "VkBuffer")] VkBuffer buffer, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						int ret = VmaAllocateMemoryForBufferNative(allocator, buffer, (VmaAllocationCreateInfo*)ppCreateInfo, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// It only creates #VmaAllocation. To bind the memory to the buffer, use vmaBindImageMemory().<br/>
		/// This is a special-purpose function. In most cases you should use vmaCreateImage().<br/>
		/// You must free the allocation using vmaFreeMemory() when no longer needed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaAllocateMemoryForImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaAllocateMemoryForImage")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaAllocateMemoryForImageNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "VkImage")] VkImage image, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo);

		/// <summary>/// <br/>/// It only creates #VmaAllocation. To bind the memory to the buffer, use vmaBindImageMemory().<br/>/// This is a special-purpose function. In most cases you should use vmaCreateImage().<br/>/// You must free the allocation using vmaFreeMemory() when no longer needed.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryForImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryForImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "VkImage")] VkImage image, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			int ret = VmaAllocateMemoryForImageNative(allocator, image, pCreateInfo, pAllocation, pAllocationInfo);
			return ret;
		}

		/// <summary>/// <br/>/// It only creates #VmaAllocation. To bind the memory to the buffer, use vmaBindImageMemory().<br/>/// This is a special-purpose function. In most cases you should use vmaCreateImage().<br/>/// You must free the allocation using vmaFreeMemory() when no longer needed.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryForImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryForImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "VkImage")] VkImage image, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				int ret = VmaAllocateMemoryForImageNative(allocator, image, (VmaAllocationCreateInfo*)ppCreateInfo, pAllocation, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// It only creates #VmaAllocation. To bind the memory to the buffer, use vmaBindImageMemory().<br/>/// This is a special-purpose function. In most cases you should use vmaCreateImage().<br/>/// You must free the allocation using vmaFreeMemory() when no longer needed.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryForImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryForImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "VkImage")] VkImage image, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocation* ppAllocation = &pAllocation)
			{
				int ret = VmaAllocateMemoryForImageNative(allocator, image, pCreateInfo, (VmaAllocation*)ppAllocation, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// It only creates #VmaAllocation. To bind the memory to the buffer, use vmaBindImageMemory().<br/>/// This is a special-purpose function. In most cases you should use vmaCreateImage().<br/>/// You must free the allocation using vmaFreeMemory() when no longer needed.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryForImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryForImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "VkImage")] VkImage image, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					int ret = VmaAllocateMemoryForImageNative(allocator, image, (VmaAllocationCreateInfo*)ppCreateInfo, (VmaAllocation*)ppAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// It only creates #VmaAllocation. To bind the memory to the buffer, use vmaBindImageMemory().<br/>/// This is a special-purpose function. In most cases you should use vmaCreateImage().<br/>/// You must free the allocation using vmaFreeMemory() when no longer needed.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryForImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryForImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "VkImage")] VkImage image, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
			{
				int ret = VmaAllocateMemoryForImageNative(allocator, image, pCreateInfo, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// It only creates #VmaAllocation. To bind the memory to the buffer, use vmaBindImageMemory().<br/>/// This is a special-purpose function. In most cases you should use vmaCreateImage().<br/>/// You must free the allocation using vmaFreeMemory() when no longer needed.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryForImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryForImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "VkImage")] VkImage image, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					int ret = VmaAllocateMemoryForImageNative(allocator, image, (VmaAllocationCreateInfo*)ppCreateInfo, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// It only creates #VmaAllocation. To bind the memory to the buffer, use vmaBindImageMemory().<br/>/// This is a special-purpose function. In most cases you should use vmaCreateImage().<br/>/// You must free the allocation using vmaFreeMemory() when no longer needed.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryForImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryForImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "VkImage")] VkImage image, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocation* ppAllocation = &pAllocation)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					int ret = VmaAllocateMemoryForImageNative(allocator, image, pCreateInfo, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// It only creates #VmaAllocation. To bind the memory to the buffer, use vmaBindImageMemory().<br/>/// This is a special-purpose function. In most cases you should use vmaCreateImage().<br/>/// You must free the allocation using vmaFreeMemory() when no longer needed.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaAllocateMemoryForImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaAllocateMemoryForImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "VkImage")] VkImage image, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						int ret = VmaAllocateMemoryForImageNative(allocator, image, (VmaAllocationCreateInfo*)ppCreateInfo, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// Passing `VK_NULL_HANDLE` as `allocation` is valid. Such function call is just skipped.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaFreeMemory")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaFreeMemoryNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "const VmaAllocation")] VmaAllocation allocation);

		/// <summary>/// <br/>/// Passing `VK_NULL_HANDLE` as `allocation` is valid. Such function call is just skipped.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaFreeMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "const VmaAllocation")] VmaAllocation allocation)
		{
			VmaFreeMemoryNative(allocator, allocation);
		}

		/// <summary>
		/// <br/>
		/// Word "pages" is just a suggestion to use this function to free pieces of memory used for sparse binding.<br/>
		/// It is just a general purpose function to free memory and destroy allocations made using e.g. vmaAllocateMemory(),<br/>
		/// vmaAllocateMemoryPages() and other functions.<br/>
		/// It may be internally optimized to be more efficient than calling vmaFreeMemory() `allocationCount` times.<br/>
		/// Allocations in `pAllocations` array can come from any memory pools and types.<br/>
		/// Passing `VK_NULL_HANDLE` as elements of `pAllocations` array is valid. Such entries are just skipped.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaFreeMemoryPages")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaFreeMemoryPages")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaFreeMemoryPagesNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] ulong allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] VmaAllocation* pAllocations);

		/// <summary>/// <br/>/// Word "pages" is just a suggestion to use this function to free pieces of memory used for sparse binding.<br/>/// It is just a general purpose function to free memory and destroy allocations made using e.g. vmaAllocateMemory(),<br/>/// vmaAllocateMemoryPages() and other functions.<br/>/// It may be internally optimized to be more efficient than calling vmaFreeMemory() `allocationCount` times.<br/>/// Allocations in `pAllocations` array can come from any memory pools and types.<br/>/// Passing `VK_NULL_HANDLE` as elements of `pAllocations` array is valid. Such entries are just skipped.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFreeMemoryPages")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaFreeMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] ulong allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] VmaAllocation* pAllocations)
		{
			VmaFreeMemoryPagesNative(allocator, allocationCount, pAllocations);
		}

		/// <summary>/// <br/>/// Word "pages" is just a suggestion to use this function to free pieces of memory used for sparse binding.<br/>/// It is just a general purpose function to free memory and destroy allocations made using e.g. vmaAllocateMemory(),<br/>/// vmaAllocateMemoryPages() and other functions.<br/>/// It may be internally optimized to be more efficient than calling vmaFreeMemory() `allocationCount` times.<br/>/// Allocations in `pAllocations` array can come from any memory pools and types.<br/>/// Passing `VK_NULL_HANDLE` as elements of `pAllocations` array is valid. Such entries are just skipped.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFreeMemoryPages")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaFreeMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] nuint allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] VmaAllocation* pAllocations)
		{
			VmaFreeMemoryPagesNative(allocator, allocationCount, pAllocations);
		}

		/// <summary>/// <br/>/// Word "pages" is just a suggestion to use this function to free pieces of memory used for sparse binding.<br/>/// It is just a general purpose function to free memory and destroy allocations made using e.g. vmaAllocateMemory(),<br/>/// vmaAllocateMemoryPages() and other functions.<br/>/// It may be internally optimized to be more efficient than calling vmaFreeMemory() `allocationCount` times.<br/>/// Allocations in `pAllocations` array can come from any memory pools and types.<br/>/// Passing `VK_NULL_HANDLE` as elements of `pAllocations` array is valid. Such entries are just skipped.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFreeMemoryPages")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaFreeMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] ulong allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] ref VmaAllocation pAllocations)
		{
			fixed (VmaAllocation* ppAllocations = &pAllocations)
			{
				VmaFreeMemoryPagesNative(allocator, allocationCount, (VmaAllocation*)ppAllocations);
			}
		}

		/// <summary>/// <br/>/// Word "pages" is just a suggestion to use this function to free pieces of memory used for sparse binding.<br/>/// It is just a general purpose function to free memory and destroy allocations made using e.g. vmaAllocateMemory(),<br/>/// vmaAllocateMemoryPages() and other functions.<br/>/// It may be internally optimized to be more efficient than calling vmaFreeMemory() `allocationCount` times.<br/>/// Allocations in `pAllocations` array can come from any memory pools and types.<br/>/// Passing `VK_NULL_HANDLE` as elements of `pAllocations` array is valid. Such entries are just skipped.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFreeMemoryPages")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaFreeMemoryPages([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "size_t")] nuint allocationCount, [NativeName(NativeNameType.Param, "pAllocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] ref VmaAllocation pAllocations)
		{
			fixed (VmaAllocation* ppAllocations = &pAllocations)
			{
				VmaFreeMemoryPagesNative(allocator, allocationCount, (VmaAllocation*)ppAllocations);
			}
		}

		/// <summary>
		/// <br/>
		/// Current parameters of given allocation are returned in `pAllocationInfo`.<br/>
		/// Although this function doesn't lock any mutex, so it should be quite efficient,<br/>
		/// you should avoid calling it too often.<br/>
		/// You can retrieve same VmaAllocationInfo structure while creating your resource, from function<br/>
		/// vmaCreateBuffer(), vmaCreateImage(). You can remember it if you are sure parameters don't change<br/>
		/// (e.g. due to defragmentation).<br/>
		/// There is also a new function vmaGetAllocationInfo2() that offers extended information<br/>
		/// about the allocation, returned using new structure #VmaAllocationInfo2.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaGetAllocationInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaGetAllocationInfo")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaGetAllocationInfoNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo);

		/// <summary>/// <br/>/// Current parameters of given allocation are returned in `pAllocationInfo`.<br/>/// Although this function doesn't lock any mutex, so it should be quite efficient,<br/>/// you should avoid calling it too often.<br/>/// You can retrieve same VmaAllocationInfo structure while creating your resource, from function<br/>/// vmaCreateBuffer(), vmaCreateImage(). You can remember it if you are sure parameters don't change<br/>/// (e.g. due to defragmentation).<br/>/// There is also a new function vmaGetAllocationInfo2() that offers extended information<br/>/// about the allocation, returned using new structure #VmaAllocationInfo2.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetAllocationInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetAllocationInfo([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			VmaGetAllocationInfoNative(allocator, allocation, pAllocationInfo);
		}

		/// <summary>/// <br/>/// Current parameters of given allocation are returned in `pAllocationInfo`.<br/>/// Although this function doesn't lock any mutex, so it should be quite efficient,<br/>/// you should avoid calling it too often.<br/>/// You can retrieve same VmaAllocationInfo structure while creating your resource, from function<br/>/// vmaCreateBuffer(), vmaCreateImage(). You can remember it if you are sure parameters don't change<br/>/// (e.g. due to defragmentation).<br/>/// There is also a new function vmaGetAllocationInfo2() that offers extended information<br/>/// about the allocation, returned using new structure #VmaAllocationInfo2.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetAllocationInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetAllocationInfo([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
			{
				VmaGetAllocationInfoNative(allocator, allocation, (VmaAllocationInfo*)ppAllocationInfo);
			}
		}

		/// <summary>
		/// <br/>
		/// Current parameters of given allocation are returned in `pAllocationInfo`.<br/>
		/// Extended parameters in structure #VmaAllocationInfo2 include memory block size<br/>
		/// and a flag telling whether the allocation has dedicated memory.<br/>
		/// It can be useful e.g. for interop with OpenGL.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaGetAllocationInfo2")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaGetAllocationInfo2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaGetAllocationInfo2Native([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo2*")] VmaAllocationInfo2* pAllocationInfo);

		/// <summary>/// <br/>/// Current parameters of given allocation are returned in `pAllocationInfo`.<br/>/// Extended parameters in structure #VmaAllocationInfo2 include memory block size<br/>/// and a flag telling whether the allocation has dedicated memory.<br/>/// It can be useful e.g. for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetAllocationInfo2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetAllocationInfo2([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo2*")] VmaAllocationInfo2* pAllocationInfo)
		{
			VmaGetAllocationInfo2Native(allocator, allocation, pAllocationInfo);
		}

		/// <summary>/// <br/>/// Current parameters of given allocation are returned in `pAllocationInfo`.<br/>/// Extended parameters in structure #VmaAllocationInfo2 include memory block size<br/>/// and a flag telling whether the allocation has dedicated memory.<br/>/// It can be useful e.g. for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetAllocationInfo2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetAllocationInfo2([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo2*")] ref VmaAllocationInfo2 pAllocationInfo)
		{
			fixed (VmaAllocationInfo2* ppAllocationInfo = &pAllocationInfo)
			{
				VmaGetAllocationInfo2Native(allocator, allocation, (VmaAllocationInfo2*)ppAllocationInfo);
			}
		}

		/// <summary>
		/// <br/>
		/// The value of pointer `pUserData` is copied to allocation's `pUserData`.<br/>
		/// It is opaque, so you can use it however you want - e.g.<br/>
		/// as a pointer, ordinal number or some handle to you own data.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaSetAllocationUserData")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaSetAllocationUserData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaSetAllocationUserDataNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pUserData")] [NativeName(NativeNameType.Type, "void*")] void* pUserData);

		/// <summary>/// <br/>/// The value of pointer `pUserData` is copied to allocation's `pUserData`.<br/>/// It is opaque, so you can use it however you want - e.g.<br/>/// as a pointer, ordinal number or some handle to you own data.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaSetAllocationUserData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaSetAllocationUserData([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pUserData")] [NativeName(NativeNameType.Type, "void*")] void* pUserData)
		{
			VmaSetAllocationUserDataNative(allocator, allocation, pUserData);
		}

		/// <summary>
		/// <br/>
		/// `pName` must be either null, or pointer to a null-terminated string. The function<br/>
		/// makes local copy of the string and sets it as allocation's `pName`. String<br/>
		/// passed as pName doesn't need to be valid for whole lifetime of the allocation -<br/>
		/// you can free it after this call. String previously pointed by allocation's<br/>
		/// `pName` is freed from memory.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaSetAllocationName")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaSetAllocationName")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaSetAllocationNameNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "const char*")] byte* pName);

		/// <summary>/// <br/>/// `pName` must be either null, or pointer to a null-terminated string. The function<br/>/// makes local copy of the string and sets it as allocation's `pName`. String<br/>/// passed as pName doesn't need to be valid for whole lifetime of the allocation -<br/>/// you can free it after this call. String previously pointed by allocation's<br/>/// `pName` is freed from memory.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaSetAllocationName")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaSetAllocationName([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "const char*")] byte* pName)
		{
			VmaSetAllocationNameNative(allocator, allocation, pName);
		}

		/// <summary>/// <br/>/// `pName` must be either null, or pointer to a null-terminated string. The function<br/>/// makes local copy of the string and sets it as allocation's `pName`. String<br/>/// passed as pName doesn't need to be valid for whole lifetime of the allocation -<br/>/// you can free it after this call. String previously pointed by allocation's<br/>/// `pName` is freed from memory.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaSetAllocationName")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaSetAllocationName([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "const char*")] ref byte pName)
		{
			fixed (byte* ppName = &pName)
			{
				VmaSetAllocationNameNative(allocator, allocation, (byte*)ppName);
			}
		}

		/// <summary>/// <br/>/// `pName` must be either null, or pointer to a null-terminated string. The function<br/>/// makes local copy of the string and sets it as allocation's `pName`. String<br/>/// passed as pName doesn't need to be valid for whole lifetime of the allocation -<br/>/// you can free it after this call. String previously pointed by allocation's<br/>/// `pName` is freed from memory.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaSetAllocationName")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaSetAllocationName([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "const char*")] string pName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			VmaSetAllocationNameNative(allocator, allocation, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// This is just a convenience function. Same information can be obtained using<br/>
		/// vmaGetAllocationInfo() + vmaGetMemoryProperties().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaGetAllocationMemoryProperties")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaGetAllocationMemoryProperties")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaGetAllocationMemoryPropertiesNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags*")] VkMemoryPropertyFlags* pFlags);

		/// <summary>/// This is just a convenience function. Same information can be obtained using<br/>/// vmaGetAllocationInfo() + vmaGetMemoryProperties().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetAllocationMemoryProperties")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetAllocationMemoryProperties([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags*")] VkMemoryPropertyFlags* pFlags)
		{
			VmaGetAllocationMemoryPropertiesNative(allocator, allocation, pFlags);
		}

		/// <summary>/// This is just a convenience function. Same information can be obtained using<br/>/// vmaGetAllocationInfo() + vmaGetMemoryProperties().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetAllocationMemoryProperties")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetAllocationMemoryProperties([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags*")] ref VkMemoryPropertyFlags pFlags)
		{
			fixed (VkMemoryPropertyFlags* ppFlags = &pFlags)
			{
				VmaGetAllocationMemoryPropertiesNative(allocator, allocation, (VkMemoryPropertyFlags*)ppFlags);
			}
		}

		/// <summary>
		/// <br/>
		/// Maps memory represented by given allocation to make it accessible to CPU code.<br/>
		/// When succeeded, `*ppData` contains pointer to first byte of this memory.<br/>
		/// Mapping is internally reference-counted and synchronized, so despite raw Vulkan<br/>
		/// function `vkMapMemory()` cannot be used to map same block of `VkDeviceMemory`<br/>
		/// multiple times simultaneously, it is safe to call this function on allocations<br/>
		/// assigned to the same memory block. Actual Vulkan memory will be mapped on first<br/>
		/// mapping and unmapped on last unmapping.<br/>
		/// If the function succeeded, you must call vmaUnmapMemory() to unmap the<br/>
		/// allocation when mapping is no longer needed or before freeing the allocation, at<br/>
		/// the latest.<br/>
		/// It also safe to call this function multiple times on the same allocation. You<br/>
		/// must call vmaUnmapMemory() same number of times as you called vmaMapMemory().<br/>
		/// It is also safe to call this function on allocation created with<br/>
		/// #VMA_ALLOCATION_CREATE_MAPPED_BIT flag. Its memory stays mapped all the time.<br/>
		/// You must still call vmaUnmapMemory() same number of times as you called<br/>
		/// vmaMapMemory(). You must not call vmaUnmapMemory() additional time to free the<br/>
		/// "0-th" mapping made automatically due to #VMA_ALLOCATION_CREATE_MAPPED_BIT flag.<br/>
		/// This function fails when used on allocation made in memory type that is not<br/>
		/// `HOST_VISIBLE`.<br/>
		/// This function doesn't automatically flush or invalidate caches.<br/>
		/// If the allocation is made from a memory types that is not `HOST_COHERENT`,<br/>
		/// you also need to use vmaInvalidateAllocation() / vmaFlushAllocation(), as required by Vulkan specification.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaMapMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaMapMemory")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaMapMemoryNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "ppData")] [NativeName(NativeNameType.Type, "void**")] void** ppData);

		/// <summary>/// <br/>/// Maps memory represented by given allocation to make it accessible to CPU code.<br/>/// When succeeded, `*ppData` contains pointer to first byte of this memory.<br/>/// Mapping is internally reference-counted and synchronized, so despite raw Vulkan<br/>/// function `vkMapMemory()` cannot be used to map same block of `VkDeviceMemory`<br/>/// multiple times simultaneously, it is safe to call this function on allocations<br/>/// assigned to the same memory block. Actual Vulkan memory will be mapped on first<br/>/// mapping and unmapped on last unmapping.<br/>/// If the function succeeded, you must call vmaUnmapMemory() to unmap the<br/>/// allocation when mapping is no longer needed or before freeing the allocation, at<br/>/// the latest.<br/>/// It also safe to call this function multiple times on the same allocation. You<br/>/// must call vmaUnmapMemory() same number of times as you called vmaMapMemory().<br/>/// It is also safe to call this function on allocation created with<br/>/// #VMA_ALLOCATION_CREATE_MAPPED_BIT flag. Its memory stays mapped all the time.<br/>/// You must still call vmaUnmapMemory() same number of times as you called<br/>/// vmaMapMemory(). You must not call vmaUnmapMemory() additional time to free the<br/>/// "0-th" mapping made automatically due to #VMA_ALLOCATION_CREATE_MAPPED_BIT flag.<br/>/// This function fails when used on allocation made in memory type that is not<br/>/// `HOST_VISIBLE`.<br/>/// This function doesn't automatically flush or invalidate caches.<br/>/// If the allocation is made from a memory types that is not `HOST_COHERENT`,<br/>/// you also need to use vmaInvalidateAllocation() / vmaFlushAllocation(), as required by Vulkan specification.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaMapMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaMapMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "ppData")] [NativeName(NativeNameType.Type, "void**")] void** ppData)
		{
			int ret = VmaMapMemoryNative(allocator, allocation, ppData);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// For details, see description of vmaMapMemory().<br/>
		/// This function doesn't automatically flush or invalidate caches.<br/>
		/// If the allocation is made from a memory types that is not `HOST_COHERENT`,<br/>
		/// you also need to use vmaInvalidateAllocation() / vmaFlushAllocation(), as required by Vulkan specification.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaUnmapMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaUnmapMemory")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaUnmapMemoryNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation);

		/// <summary>/// <br/>/// For details, see description of vmaMapMemory().<br/>/// This function doesn't automatically flush or invalidate caches.<br/>/// If the allocation is made from a memory types that is not `HOST_COHERENT`,<br/>/// you also need to use vmaInvalidateAllocation() / vmaFlushAllocation(), as required by Vulkan specification.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaUnmapMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaUnmapMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation)
		{
			VmaUnmapMemoryNative(allocator, allocation);
		}

		/// <summary>
		/// <br/>
		/// Calls `vkFlushMappedMemoryRanges()` for memory associated with given range of given allocation.<br/>
		/// It needs to be called after writing to a mapped memory for memory types that are not `HOST_COHERENT`.<br/>
		/// Unmap operation doesn't do that automatically.<br/>
		/// - `offset` must be relative to the beginning of allocation.<br/>
		/// - `size` can be `VK_WHOLE_SIZE`. It means all memory from `offset` the the end of given allocation.<br/>
		/// - `offset` and `size` don't have to be aligned.<br/>
		/// They are internally rounded down/up to multiply of `nonCoherentAtomSize`.<br/>
		/// - If `size` is 0, this call is ignored.<br/>
		/// - If memory type that the `allocation` belongs to is not `HOST_VISIBLE` or it is `HOST_COHERENT`,<br/>
		/// this call is ignored.<br/>
		/// Warning! `offset` and `size` are relative to the contents of given `allocation`.<br/>
		/// If you mean whole allocation, you can pass 0 and `VK_WHOLE_SIZE`, respectively.<br/>
		/// Do not pass allocation's offset as `offset`!!!<br/>
		/// This function returns the `VkResult` from `vkFlushMappedMemoryRanges` if it is<br/>
		/// called, otherwise `VK_SUCCESS`.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaFlushAllocation")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaFlushAllocation")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaFlushAllocationNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong offset, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong size);

		/// <summary>/// <br/>/// Calls `vkFlushMappedMemoryRanges()` for memory associated with given range of given allocation.<br/>/// It needs to be called after writing to a mapped memory for memory types that are not `HOST_COHERENT`.<br/>/// Unmap operation doesn't do that automatically.<br/>/// - `offset` must be relative to the beginning of allocation.<br/>/// - `size` can be `VK_WHOLE_SIZE`. It means all memory from `offset` the the end of given allocation.<br/>/// - `offset` and `size` don't have to be aligned.<br/>/// They are internally rounded down/up to multiply of `nonCoherentAtomSize`.<br/>/// - If `size` is 0, this call is ignored.<br/>/// - If memory type that the `allocation` belongs to is not `HOST_VISIBLE` or it is `HOST_COHERENT`,<br/>/// this call is ignored.<br/>/// Warning! `offset` and `size` are relative to the contents of given `allocation`.<br/>/// If you mean whole allocation, you can pass 0 and `VK_WHOLE_SIZE`, respectively.<br/>/// Do not pass allocation's offset as `offset`!!!<br/>/// This function returns the `VkResult` from `vkFlushMappedMemoryRanges` if it is<br/>/// called, otherwise `VK_SUCCESS`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFlushAllocation")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFlushAllocation([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong offset, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong size)
		{
			int ret = VmaFlushAllocationNative(allocator, allocation, offset, size);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// Calls `vkInvalidateMappedMemoryRanges()` for memory associated with given range of given allocation.<br/>
		/// It needs to be called before reading from a mapped memory for memory types that are not `HOST_COHERENT`.<br/>
		/// Map operation doesn't do that automatically.<br/>
		/// - `offset` must be relative to the beginning of allocation.<br/>
		/// - `size` can be `VK_WHOLE_SIZE`. It means all memory from `offset` the the end of given allocation.<br/>
		/// - `offset` and `size` don't have to be aligned.<br/>
		/// They are internally rounded down/up to multiply of `nonCoherentAtomSize`.<br/>
		/// - If `size` is 0, this call is ignored.<br/>
		/// - If memory type that the `allocation` belongs to is not `HOST_VISIBLE` or it is `HOST_COHERENT`,<br/>
		/// this call is ignored.<br/>
		/// Warning! `offset` and `size` are relative to the contents of given `allocation`.<br/>
		/// If you mean whole allocation, you can pass 0 and `VK_WHOLE_SIZE`, respectively.<br/>
		/// Do not pass allocation's offset as `offset`!!!<br/>
		/// This function returns the `VkResult` from `vkInvalidateMappedMemoryRanges` if<br/>
		/// it is called, otherwise `VK_SUCCESS`.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaInvalidateAllocation")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaInvalidateAllocation")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaInvalidateAllocationNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong offset, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong size);

		/// <summary>/// <br/>/// Calls `vkInvalidateMappedMemoryRanges()` for memory associated with given range of given allocation.<br/>/// It needs to be called before reading from a mapped memory for memory types that are not `HOST_COHERENT`.<br/>/// Map operation doesn't do that automatically.<br/>/// - `offset` must be relative to the beginning of allocation.<br/>/// - `size` can be `VK_WHOLE_SIZE`. It means all memory from `offset` the the end of given allocation.<br/>/// - `offset` and `size` don't have to be aligned.<br/>/// They are internally rounded down/up to multiply of `nonCoherentAtomSize`.<br/>/// - If `size` is 0, this call is ignored.<br/>/// - If memory type that the `allocation` belongs to is not `HOST_VISIBLE` or it is `HOST_COHERENT`,<br/>/// this call is ignored.<br/>/// Warning! `offset` and `size` are relative to the contents of given `allocation`.<br/>/// If you mean whole allocation, you can pass 0 and `VK_WHOLE_SIZE`, respectively.<br/>/// Do not pass allocation's offset as `offset`!!!<br/>/// This function returns the `VkResult` from `vkInvalidateMappedMemoryRanges` if<br/>/// it is called, otherwise `VK_SUCCESS`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaInvalidateAllocation")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaInvalidateAllocation([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong offset, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong size)
		{
			int ret = VmaInvalidateAllocationNative(allocator, allocation, offset, size);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// Calls `vkFlushMappedMemoryRanges()` for memory associated with given ranges of given allocations.<br/>
		/// For more information, see documentation of vmaFlushAllocation().<br/>
		/// This function returns the `VkResult` from `vkFlushMappedMemoryRanges` if it is<br/>
		/// called, otherwise `VK_SUCCESS`.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaFlushAllocations")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaFlushAllocations")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaFlushAllocationsNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "uint32_t")] uint allocationCount, [NativeName(NativeNameType.Param, "allocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] VmaAllocation* allocations, [NativeName(NativeNameType.Param, "offsets")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ulong* offsets, [NativeName(NativeNameType.Param, "sizes")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ulong* sizes);

		/// <summary>/// <br/>/// Calls `vkFlushMappedMemoryRanges()` for memory associated with given ranges of given allocations.<br/>/// For more information, see documentation of vmaFlushAllocation().<br/>/// This function returns the `VkResult` from `vkFlushMappedMemoryRanges` if it is<br/>/// called, otherwise `VK_SUCCESS`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFlushAllocations")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFlushAllocations([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "uint32_t")] uint allocationCount, [NativeName(NativeNameType.Param, "allocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] VmaAllocation* allocations, [NativeName(NativeNameType.Param, "offsets")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ulong* offsets, [NativeName(NativeNameType.Param, "sizes")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ulong* sizes)
		{
			int ret = VmaFlushAllocationsNative(allocator, allocationCount, allocations, offsets, sizes);
			return ret;
		}

		/// <summary>/// <br/>/// Calls `vkFlushMappedMemoryRanges()` for memory associated with given ranges of given allocations.<br/>/// For more information, see documentation of vmaFlushAllocation().<br/>/// This function returns the `VkResult` from `vkFlushMappedMemoryRanges` if it is<br/>/// called, otherwise `VK_SUCCESS`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFlushAllocations")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFlushAllocations([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "uint32_t")] uint allocationCount, [NativeName(NativeNameType.Param, "allocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] ref VmaAllocation allocations, [NativeName(NativeNameType.Param, "offsets")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ulong* offsets, [NativeName(NativeNameType.Param, "sizes")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ulong* sizes)
		{
			fixed (VmaAllocation* pallocations = &allocations)
			{
				int ret = VmaFlushAllocationsNative(allocator, allocationCount, (VmaAllocation*)pallocations, offsets, sizes);
				return ret;
			}
		}

		/// <summary>/// <br/>/// Calls `vkFlushMappedMemoryRanges()` for memory associated with given ranges of given allocations.<br/>/// For more information, see documentation of vmaFlushAllocation().<br/>/// This function returns the `VkResult` from `vkFlushMappedMemoryRanges` if it is<br/>/// called, otherwise `VK_SUCCESS`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFlushAllocations")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFlushAllocations([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "uint32_t")] uint allocationCount, [NativeName(NativeNameType.Param, "allocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] VmaAllocation* allocations, [NativeName(NativeNameType.Param, "offsets")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ref ulong offsets, [NativeName(NativeNameType.Param, "sizes")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ulong* sizes)
		{
			fixed (ulong* poffsets = &offsets)
			{
				int ret = VmaFlushAllocationsNative(allocator, allocationCount, allocations, (ulong*)poffsets, sizes);
				return ret;
			}
		}

		/// <summary>/// <br/>/// Calls `vkFlushMappedMemoryRanges()` for memory associated with given ranges of given allocations.<br/>/// For more information, see documentation of vmaFlushAllocation().<br/>/// This function returns the `VkResult` from `vkFlushMappedMemoryRanges` if it is<br/>/// called, otherwise `VK_SUCCESS`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFlushAllocations")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFlushAllocations([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "uint32_t")] uint allocationCount, [NativeName(NativeNameType.Param, "allocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] ref VmaAllocation allocations, [NativeName(NativeNameType.Param, "offsets")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ref ulong offsets, [NativeName(NativeNameType.Param, "sizes")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ulong* sizes)
		{
			fixed (VmaAllocation* pallocations = &allocations)
			{
				fixed (ulong* poffsets = &offsets)
				{
					int ret = VmaFlushAllocationsNative(allocator, allocationCount, (VmaAllocation*)pallocations, (ulong*)poffsets, sizes);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// Calls `vkFlushMappedMemoryRanges()` for memory associated with given ranges of given allocations.<br/>/// For more information, see documentation of vmaFlushAllocation().<br/>/// This function returns the `VkResult` from `vkFlushMappedMemoryRanges` if it is<br/>/// called, otherwise `VK_SUCCESS`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFlushAllocations")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFlushAllocations([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "uint32_t")] uint allocationCount, [NativeName(NativeNameType.Param, "allocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] VmaAllocation* allocations, [NativeName(NativeNameType.Param, "offsets")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ulong* offsets, [NativeName(NativeNameType.Param, "sizes")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ref ulong sizes)
		{
			fixed (ulong* psizes = &sizes)
			{
				int ret = VmaFlushAllocationsNative(allocator, allocationCount, allocations, offsets, (ulong*)psizes);
				return ret;
			}
		}

		/// <summary>/// <br/>/// Calls `vkFlushMappedMemoryRanges()` for memory associated with given ranges of given allocations.<br/>/// For more information, see documentation of vmaFlushAllocation().<br/>/// This function returns the `VkResult` from `vkFlushMappedMemoryRanges` if it is<br/>/// called, otherwise `VK_SUCCESS`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFlushAllocations")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFlushAllocations([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "uint32_t")] uint allocationCount, [NativeName(NativeNameType.Param, "allocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] ref VmaAllocation allocations, [NativeName(NativeNameType.Param, "offsets")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ulong* offsets, [NativeName(NativeNameType.Param, "sizes")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ref ulong sizes)
		{
			fixed (VmaAllocation* pallocations = &allocations)
			{
				fixed (ulong* psizes = &sizes)
				{
					int ret = VmaFlushAllocationsNative(allocator, allocationCount, (VmaAllocation*)pallocations, offsets, (ulong*)psizes);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// Calls `vkFlushMappedMemoryRanges()` for memory associated with given ranges of given allocations.<br/>/// For more information, see documentation of vmaFlushAllocation().<br/>/// This function returns the `VkResult` from `vkFlushMappedMemoryRanges` if it is<br/>/// called, otherwise `VK_SUCCESS`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFlushAllocations")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFlushAllocations([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "uint32_t")] uint allocationCount, [NativeName(NativeNameType.Param, "allocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] VmaAllocation* allocations, [NativeName(NativeNameType.Param, "offsets")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ref ulong offsets, [NativeName(NativeNameType.Param, "sizes")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ref ulong sizes)
		{
			fixed (ulong* poffsets = &offsets)
			{
				fixed (ulong* psizes = &sizes)
				{
					int ret = VmaFlushAllocationsNative(allocator, allocationCount, allocations, (ulong*)poffsets, (ulong*)psizes);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// Calls `vkFlushMappedMemoryRanges()` for memory associated with given ranges of given allocations.<br/>/// For more information, see documentation of vmaFlushAllocation().<br/>/// This function returns the `VkResult` from `vkFlushMappedMemoryRanges` if it is<br/>/// called, otherwise `VK_SUCCESS`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaFlushAllocations")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaFlushAllocations([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "uint32_t")] uint allocationCount, [NativeName(NativeNameType.Param, "allocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] ref VmaAllocation allocations, [NativeName(NativeNameType.Param, "offsets")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ref ulong offsets, [NativeName(NativeNameType.Param, "sizes")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ref ulong sizes)
		{
			fixed (VmaAllocation* pallocations = &allocations)
			{
				fixed (ulong* poffsets = &offsets)
				{
					fixed (ulong* psizes = &sizes)
					{
						int ret = VmaFlushAllocationsNative(allocator, allocationCount, (VmaAllocation*)pallocations, (ulong*)poffsets, (ulong*)psizes);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// Calls `vkInvalidateMappedMemoryRanges()` for memory associated with given ranges of given allocations.<br/>
		/// For more information, see documentation of vmaInvalidateAllocation().<br/>
		/// This function returns the `VkResult` from `vkInvalidateMappedMemoryRanges` if it is<br/>
		/// called, otherwise `VK_SUCCESS`.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaInvalidateAllocations")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaInvalidateAllocations")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaInvalidateAllocationsNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "uint32_t")] uint allocationCount, [NativeName(NativeNameType.Param, "allocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] VmaAllocation* allocations, [NativeName(NativeNameType.Param, "offsets")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ulong* offsets, [NativeName(NativeNameType.Param, "sizes")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ulong* sizes);

		/// <summary>/// <br/>/// Calls `vkInvalidateMappedMemoryRanges()` for memory associated with given ranges of given allocations.<br/>/// For more information, see documentation of vmaInvalidateAllocation().<br/>/// This function returns the `VkResult` from `vkInvalidateMappedMemoryRanges` if it is<br/>/// called, otherwise `VK_SUCCESS`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaInvalidateAllocations")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaInvalidateAllocations([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "uint32_t")] uint allocationCount, [NativeName(NativeNameType.Param, "allocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] VmaAllocation* allocations, [NativeName(NativeNameType.Param, "offsets")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ulong* offsets, [NativeName(NativeNameType.Param, "sizes")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ulong* sizes)
		{
			int ret = VmaInvalidateAllocationsNative(allocator, allocationCount, allocations, offsets, sizes);
			return ret;
		}

		/// <summary>/// <br/>/// Calls `vkInvalidateMappedMemoryRanges()` for memory associated with given ranges of given allocations.<br/>/// For more information, see documentation of vmaInvalidateAllocation().<br/>/// This function returns the `VkResult` from `vkInvalidateMappedMemoryRanges` if it is<br/>/// called, otherwise `VK_SUCCESS`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaInvalidateAllocations")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaInvalidateAllocations([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "uint32_t")] uint allocationCount, [NativeName(NativeNameType.Param, "allocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] ref VmaAllocation allocations, [NativeName(NativeNameType.Param, "offsets")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ulong* offsets, [NativeName(NativeNameType.Param, "sizes")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ulong* sizes)
		{
			fixed (VmaAllocation* pallocations = &allocations)
			{
				int ret = VmaInvalidateAllocationsNative(allocator, allocationCount, (VmaAllocation*)pallocations, offsets, sizes);
				return ret;
			}
		}

		/// <summary>/// <br/>/// Calls `vkInvalidateMappedMemoryRanges()` for memory associated with given ranges of given allocations.<br/>/// For more information, see documentation of vmaInvalidateAllocation().<br/>/// This function returns the `VkResult` from `vkInvalidateMappedMemoryRanges` if it is<br/>/// called, otherwise `VK_SUCCESS`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaInvalidateAllocations")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaInvalidateAllocations([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "uint32_t")] uint allocationCount, [NativeName(NativeNameType.Param, "allocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] VmaAllocation* allocations, [NativeName(NativeNameType.Param, "offsets")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ref ulong offsets, [NativeName(NativeNameType.Param, "sizes")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ulong* sizes)
		{
			fixed (ulong* poffsets = &offsets)
			{
				int ret = VmaInvalidateAllocationsNative(allocator, allocationCount, allocations, (ulong*)poffsets, sizes);
				return ret;
			}
		}

		/// <summary>/// <br/>/// Calls `vkInvalidateMappedMemoryRanges()` for memory associated with given ranges of given allocations.<br/>/// For more information, see documentation of vmaInvalidateAllocation().<br/>/// This function returns the `VkResult` from `vkInvalidateMappedMemoryRanges` if it is<br/>/// called, otherwise `VK_SUCCESS`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaInvalidateAllocations")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaInvalidateAllocations([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "uint32_t")] uint allocationCount, [NativeName(NativeNameType.Param, "allocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] ref VmaAllocation allocations, [NativeName(NativeNameType.Param, "offsets")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ref ulong offsets, [NativeName(NativeNameType.Param, "sizes")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ulong* sizes)
		{
			fixed (VmaAllocation* pallocations = &allocations)
			{
				fixed (ulong* poffsets = &offsets)
				{
					int ret = VmaInvalidateAllocationsNative(allocator, allocationCount, (VmaAllocation*)pallocations, (ulong*)poffsets, sizes);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// Calls `vkInvalidateMappedMemoryRanges()` for memory associated with given ranges of given allocations.<br/>/// For more information, see documentation of vmaInvalidateAllocation().<br/>/// This function returns the `VkResult` from `vkInvalidateMappedMemoryRanges` if it is<br/>/// called, otherwise `VK_SUCCESS`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaInvalidateAllocations")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaInvalidateAllocations([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "uint32_t")] uint allocationCount, [NativeName(NativeNameType.Param, "allocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] VmaAllocation* allocations, [NativeName(NativeNameType.Param, "offsets")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ulong* offsets, [NativeName(NativeNameType.Param, "sizes")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ref ulong sizes)
		{
			fixed (ulong* psizes = &sizes)
			{
				int ret = VmaInvalidateAllocationsNative(allocator, allocationCount, allocations, offsets, (ulong*)psizes);
				return ret;
			}
		}

		/// <summary>/// <br/>/// Calls `vkInvalidateMappedMemoryRanges()` for memory associated with given ranges of given allocations.<br/>/// For more information, see documentation of vmaInvalidateAllocation().<br/>/// This function returns the `VkResult` from `vkInvalidateMappedMemoryRanges` if it is<br/>/// called, otherwise `VK_SUCCESS`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaInvalidateAllocations")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaInvalidateAllocations([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "uint32_t")] uint allocationCount, [NativeName(NativeNameType.Param, "allocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] ref VmaAllocation allocations, [NativeName(NativeNameType.Param, "offsets")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ulong* offsets, [NativeName(NativeNameType.Param, "sizes")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ref ulong sizes)
		{
			fixed (VmaAllocation* pallocations = &allocations)
			{
				fixed (ulong* psizes = &sizes)
				{
					int ret = VmaInvalidateAllocationsNative(allocator, allocationCount, (VmaAllocation*)pallocations, offsets, (ulong*)psizes);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// Calls `vkInvalidateMappedMemoryRanges()` for memory associated with given ranges of given allocations.<br/>/// For more information, see documentation of vmaInvalidateAllocation().<br/>/// This function returns the `VkResult` from `vkInvalidateMappedMemoryRanges` if it is<br/>/// called, otherwise `VK_SUCCESS`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaInvalidateAllocations")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaInvalidateAllocations([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "uint32_t")] uint allocationCount, [NativeName(NativeNameType.Param, "allocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] VmaAllocation* allocations, [NativeName(NativeNameType.Param, "offsets")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ref ulong offsets, [NativeName(NativeNameType.Param, "sizes")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ref ulong sizes)
		{
			fixed (ulong* poffsets = &offsets)
			{
				fixed (ulong* psizes = &sizes)
				{
					int ret = VmaInvalidateAllocationsNative(allocator, allocationCount, allocations, (ulong*)poffsets, (ulong*)psizes);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// Calls `vkInvalidateMappedMemoryRanges()` for memory associated with given ranges of given allocations.<br/>/// For more information, see documentation of vmaInvalidateAllocation().<br/>/// This function returns the `VkResult` from `vkInvalidateMappedMemoryRanges` if it is<br/>/// called, otherwise `VK_SUCCESS`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaInvalidateAllocations")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaInvalidateAllocations([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocationCount")] [NativeName(NativeNameType.Type, "uint32_t")] uint allocationCount, [NativeName(NativeNameType.Param, "allocations")] [NativeName(NativeNameType.Type, "const VmaAllocation*")] ref VmaAllocation allocations, [NativeName(NativeNameType.Param, "offsets")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ref ulong offsets, [NativeName(NativeNameType.Param, "sizes")] [NativeName(NativeNameType.Type, "const VkDeviceSize*")] ref ulong sizes)
		{
			fixed (VmaAllocation* pallocations = &allocations)
			{
				fixed (ulong* poffsets = &offsets)
				{
					fixed (ulong* psizes = &sizes)
					{
						int ret = VmaInvalidateAllocationsNative(allocator, allocationCount, (VmaAllocation*)pallocations, (ulong*)poffsets, (ulong*)psizes);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// This is a convenience function that allows to copy data from a host pointer to an allocation easily.<br/>
		/// Same behavior can be achieved by calling vmaMapMemory(), `memcpy()`, vmaUnmapMemory(), vmaFlushAllocation().<br/>
		/// This function can be called only for allocations created in a memory type that has `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` flag.<br/>
		/// It can be ensured e.g. by using #VMA_MEMORY_USAGE_AUTO and #VMA_ALLOCATION_CREATE_HOST_ACCESS_SEQUENTIAL_WRITE_BIT or<br/>
		/// #VMA_ALLOCATION_CREATE_HOST_ACCESS_RANDOM_BIT.<br/>
		/// Otherwise, the function will fail and generate a Validation Layers error.<br/>
		/// `dstAllocationLocalOffset` is relative to the contents of given `dstAllocation`.<br/>
		/// If you mean whole allocation, you should pass 0.<br/>
		/// Do not pass allocation's offset within device memory block this parameter!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaCopyMemoryToAllocation")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaCopyMemoryToAllocation")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaCopyMemoryToAllocationNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pSrcHostPointer")] [NativeName(NativeNameType.Type, "const void*")] void* pSrcHostPointer, [NativeName(NativeNameType.Param, "dstAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation dstAllocation, [NativeName(NativeNameType.Param, "dstAllocationLocalOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong dstAllocationLocalOffset, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong size);

		/// <summary>/// <br/>/// This is a convenience function that allows to copy data from a host pointer to an allocation easily.<br/>/// Same behavior can be achieved by calling vmaMapMemory(), `memcpy()`, vmaUnmapMemory(), vmaFlushAllocation().<br/>/// This function can be called only for allocations created in a memory type that has `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` flag.<br/>/// It can be ensured e.g. by using #VMA_MEMORY_USAGE_AUTO and #VMA_ALLOCATION_CREATE_HOST_ACCESS_SEQUENTIAL_WRITE_BIT or<br/>/// #VMA_ALLOCATION_CREATE_HOST_ACCESS_RANDOM_BIT.<br/>/// Otherwise, the function will fail and generate a Validation Layers error.<br/>/// `dstAllocationLocalOffset` is relative to the contents of given `dstAllocation`.<br/>/// If you mean whole allocation, you should pass 0.<br/>/// Do not pass allocation's offset within device memory block this parameter!<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCopyMemoryToAllocation")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCopyMemoryToAllocation([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pSrcHostPointer")] [NativeName(NativeNameType.Type, "const void*")] void* pSrcHostPointer, [NativeName(NativeNameType.Param, "dstAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation dstAllocation, [NativeName(NativeNameType.Param, "dstAllocationLocalOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong dstAllocationLocalOffset, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong size)
		{
			int ret = VmaCopyMemoryToAllocationNative(allocator, pSrcHostPointer, dstAllocation, dstAllocationLocalOffset, size);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// This is a convenience function that allows to copy data from an allocation to a host pointer easily.<br/>
		/// Same behavior can be achieved by calling vmaInvalidateAllocation(), vmaMapMemory(), `memcpy()`, vmaUnmapMemory().<br/>
		/// This function should be called only for allocations created in a memory type that has `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT`<br/>
		/// and `VK_MEMORY_PROPERTY_HOST_CACHED_BIT` flag.<br/>
		/// It can be ensured e.g. by using #VMA_MEMORY_USAGE_AUTO and #VMA_ALLOCATION_CREATE_HOST_ACCESS_RANDOM_BIT.<br/>
		/// Otherwise, the function may fail and generate a Validation Layers error.<br/>
		/// It may also work very slowly when reading from an uncached memory.<br/>
		/// `srcAllocationLocalOffset` is relative to the contents of given `srcAllocation`.<br/>
		/// If you mean whole allocation, you should pass 0.<br/>
		/// Do not pass allocation's offset within device memory block as this parameter!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaCopyAllocationToMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaCopyAllocationToMemory")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaCopyAllocationToMemoryNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "srcAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation srcAllocation, [NativeName(NativeNameType.Param, "srcAllocationLocalOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong srcAllocationLocalOffset, [NativeName(NativeNameType.Param, "pDstHostPointer")] [NativeName(NativeNameType.Type, "void*")] void* pDstHostPointer, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong size);

		/// <summary>/// <br/>/// This is a convenience function that allows to copy data from an allocation to a host pointer easily.<br/>/// Same behavior can be achieved by calling vmaInvalidateAllocation(), vmaMapMemory(), `memcpy()`, vmaUnmapMemory().<br/>/// This function should be called only for allocations created in a memory type that has `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT`<br/>/// and `VK_MEMORY_PROPERTY_HOST_CACHED_BIT` flag.<br/>/// It can be ensured e.g. by using #VMA_MEMORY_USAGE_AUTO and #VMA_ALLOCATION_CREATE_HOST_ACCESS_RANDOM_BIT.<br/>/// Otherwise, the function may fail and generate a Validation Layers error.<br/>/// It may also work very slowly when reading from an uncached memory.<br/>/// `srcAllocationLocalOffset` is relative to the contents of given `srcAllocation`.<br/>/// If you mean whole allocation, you should pass 0.<br/>/// Do not pass allocation's offset within device memory block as this parameter!<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCopyAllocationToMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCopyAllocationToMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "srcAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation srcAllocation, [NativeName(NativeNameType.Param, "srcAllocationLocalOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong srcAllocationLocalOffset, [NativeName(NativeNameType.Param, "pDstHostPointer")] [NativeName(NativeNameType.Type, "void*")] void* pDstHostPointer, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong size)
		{
			int ret = VmaCopyAllocationToMemoryNative(allocator, srcAllocation, srcAllocationLocalOffset, pDstHostPointer, size);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// Corruption detection is enabled only when `VMA_DEBUG_DETECT_CORRUPTION` macro is defined to nonzero,<br/>
		/// `VMA_DEBUG_MARGIN` is defined to nonzero and only for memory types that are<br/>
		/// `HOST_VISIBLE` and `HOST_COHERENT`. For more information, see [Corruption detection](<br/>
		/// Possible return values:<br/>
		/// - `VK_ERROR_FEATURE_NOT_PRESENT` - corruption detection is not enabled for any of specified memory types.<br/>
		/// - `VK_SUCCESS` - corruption detection has been performed and succeeded.<br/>
		/// - `VK_ERROR_UNKNOWN` - corruption detection has been performed and found memory corruptions around one of the allocations.<br/>
		/// `VMA_ASSERT` is also fired in that case.<br/>
		/// - Other value: Error returned by Vulkan, e.g. memory mapping failure.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaCheckCorruption")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaCheckCorruption")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaCheckCorruptionNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "memoryTypeBits")] [NativeName(NativeNameType.Type, "uint32_t")] uint memoryTypeBits);

		/// <summary>/// <br/>/// Corruption detection is enabled only when `VMA_DEBUG_DETECT_CORRUPTION` macro is defined to nonzero,<br/>/// `VMA_DEBUG_MARGIN` is defined to nonzero and only for memory types that are<br/>/// `HOST_VISIBLE` and `HOST_COHERENT`. For more information, see [Corruption detection](<br/>/// Possible return values:<br/>/// - `VK_ERROR_FEATURE_NOT_PRESENT` - corruption detection is not enabled for any of specified memory types.<br/>/// - `VK_SUCCESS` - corruption detection has been performed and succeeded.<br/>/// - `VK_ERROR_UNKNOWN` - corruption detection has been performed and found memory corruptions around one of the allocations.<br/>/// `VMA_ASSERT` is also fired in that case.<br/>/// - Other value: Error returned by Vulkan, e.g. memory mapping failure.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCheckCorruption")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCheckCorruption([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "memoryTypeBits")] [NativeName(NativeNameType.Type, "uint32_t")] uint memoryTypeBits)
		{
			int ret = VmaCheckCorruptionNative(allocator, memoryTypeBits);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// For more information about defragmentation, see documentation chapter:<br/>
		/// [Defragmentation](<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaBeginDefragmentation")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaBeginDefragmentation")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaBeginDefragmentationNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pInfo")] [NativeName(NativeNameType.Type, "const VmaDefragmentationInfo*")] VmaDefragmentationInfo* pInfo, [NativeName(NativeNameType.Param, "pContext")] [NativeName(NativeNameType.Type, "VmaDefragmentationContext*")] VmaDefragmentationContext* pContext);

		/// <summary>/// <br/>/// For more information about defragmentation, see documentation chapter:<br/>/// [Defragmentation](<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaBeginDefragmentation")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaBeginDefragmentation([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pInfo")] [NativeName(NativeNameType.Type, "const VmaDefragmentationInfo*")] VmaDefragmentationInfo* pInfo, [NativeName(NativeNameType.Param, "pContext")] [NativeName(NativeNameType.Type, "VmaDefragmentationContext*")] VmaDefragmentationContext* pContext)
		{
			int ret = VmaBeginDefragmentationNative(allocator, pInfo, pContext);
			return ret;
		}

		/// <summary>/// <br/>/// For more information about defragmentation, see documentation chapter:<br/>/// [Defragmentation](<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaBeginDefragmentation")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaBeginDefragmentation([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pInfo")] [NativeName(NativeNameType.Type, "const VmaDefragmentationInfo*")] ref VmaDefragmentationInfo pInfo, [NativeName(NativeNameType.Param, "pContext")] [NativeName(NativeNameType.Type, "VmaDefragmentationContext*")] VmaDefragmentationContext* pContext)
		{
			fixed (VmaDefragmentationInfo* ppInfo = &pInfo)
			{
				int ret = VmaBeginDefragmentationNative(allocator, (VmaDefragmentationInfo*)ppInfo, pContext);
				return ret;
			}
		}

		/// <summary>/// <br/>/// For more information about defragmentation, see documentation chapter:<br/>/// [Defragmentation](<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaBeginDefragmentation")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaBeginDefragmentation([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pInfo")] [NativeName(NativeNameType.Type, "const VmaDefragmentationInfo*")] VmaDefragmentationInfo* pInfo, [NativeName(NativeNameType.Param, "pContext")] [NativeName(NativeNameType.Type, "VmaDefragmentationContext*")] ref VmaDefragmentationContext pContext)
		{
			fixed (VmaDefragmentationContext* ppContext = &pContext)
			{
				int ret = VmaBeginDefragmentationNative(allocator, pInfo, (VmaDefragmentationContext*)ppContext);
				return ret;
			}
		}

		/// <summary>/// <br/>/// For more information about defragmentation, see documentation chapter:<br/>/// [Defragmentation](<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaBeginDefragmentation")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaBeginDefragmentation([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pInfo")] [NativeName(NativeNameType.Type, "const VmaDefragmentationInfo*")] ref VmaDefragmentationInfo pInfo, [NativeName(NativeNameType.Param, "pContext")] [NativeName(NativeNameType.Type, "VmaDefragmentationContext*")] ref VmaDefragmentationContext pContext)
		{
			fixed (VmaDefragmentationInfo* ppInfo = &pInfo)
			{
				fixed (VmaDefragmentationContext* ppContext = &pContext)
				{
					int ret = VmaBeginDefragmentationNative(allocator, (VmaDefragmentationInfo*)ppInfo, (VmaDefragmentationContext*)ppContext);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// Use this function to finish defragmentation started by vmaBeginDefragmentation().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaEndDefragmentation")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaEndDefragmentation")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaEndDefragmentationNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "VmaDefragmentationContext")] VmaDefragmentationContext context, [NativeName(NativeNameType.Param, "pStats")] [NativeName(NativeNameType.Type, "VmaDefragmentationStats*")] VmaDefragmentationStats* pStats);

		/// <summary>/// <br/>/// Use this function to finish defragmentation started by vmaBeginDefragmentation().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaEndDefragmentation")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaEndDefragmentation([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "VmaDefragmentationContext")] VmaDefragmentationContext context, [NativeName(NativeNameType.Param, "pStats")] [NativeName(NativeNameType.Type, "VmaDefragmentationStats*")] VmaDefragmentationStats* pStats)
		{
			VmaEndDefragmentationNative(allocator, context, pStats);
		}

		/// <summary>/// <br/>/// Use this function to finish defragmentation started by vmaBeginDefragmentation().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaEndDefragmentation")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaEndDefragmentation([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "VmaDefragmentationContext")] VmaDefragmentationContext context, [NativeName(NativeNameType.Param, "pStats")] [NativeName(NativeNameType.Type, "VmaDefragmentationStats*")] ref VmaDefragmentationStats pStats)
		{
			fixed (VmaDefragmentationStats* ppStats = &pStats)
			{
				VmaEndDefragmentationNative(allocator, context, (VmaDefragmentationStats*)ppStats);
			}
		}

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaBeginDefragmentationPass")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaBeginDefragmentationPass")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaBeginDefragmentationPassNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "VmaDefragmentationContext")] VmaDefragmentationContext context, [NativeName(NativeNameType.Param, "pPassInfo")] [NativeName(NativeNameType.Type, "VmaDefragmentationPassMoveInfo*")] VmaDefragmentationPassMoveInfo* pPassInfo);

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaBeginDefragmentationPass")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaBeginDefragmentationPass([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "VmaDefragmentationContext")] VmaDefragmentationContext context, [NativeName(NativeNameType.Param, "pPassInfo")] [NativeName(NativeNameType.Type, "VmaDefragmentationPassMoveInfo*")] VmaDefragmentationPassMoveInfo* pPassInfo)
		{
			int ret = VmaBeginDefragmentationPassNative(allocator, context, pPassInfo);
			return ret;
		}

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaBeginDefragmentationPass")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaBeginDefragmentationPass([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "VmaDefragmentationContext")] VmaDefragmentationContext context, [NativeName(NativeNameType.Param, "pPassInfo")] [NativeName(NativeNameType.Type, "VmaDefragmentationPassMoveInfo*")] ref VmaDefragmentationPassMoveInfo pPassInfo)
		{
			fixed (VmaDefragmentationPassMoveInfo* ppPassInfo = &pPassInfo)
			{
				int ret = VmaBeginDefragmentationPassNative(allocator, context, (VmaDefragmentationPassMoveInfo*)ppPassInfo);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// Returns `VK_SUCCESS` if no more moves are possible or `VK_INCOMPLETE` if more defragmentations are possible.<br/>
		/// Ends incremental defragmentation pass and commits all defragmentation moves from `pPassInfo`.<br/>
		/// After this call:<br/>
		/// - Allocations at `pPassInfo[i].srcAllocation` that had `pPassInfo[i].operation ==` #VMA_DEFRAGMENTATION_MOVE_OPERATION_COPY<br/>
		/// (which is the default) will be pointing to the new destination place.<br/>
		/// - Allocation at `pPassInfo[i].srcAllocation` that had `pPassInfo[i].operation ==` #VMA_DEFRAGMENTATION_MOVE_OPERATION_DESTROY<br/>
		/// will be freed.<br/>
		/// If no more moves are possible you can end whole defragmentation.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaEndDefragmentationPass")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaEndDefragmentationPass")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaEndDefragmentationPassNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "VmaDefragmentationContext")] VmaDefragmentationContext context, [NativeName(NativeNameType.Param, "pPassInfo")] [NativeName(NativeNameType.Type, "VmaDefragmentationPassMoveInfo*")] VmaDefragmentationPassMoveInfo* pPassInfo);

		/// <summary>/// <br/>/// Returns `VK_SUCCESS` if no more moves are possible or `VK_INCOMPLETE` if more defragmentations are possible.<br/>/// Ends incremental defragmentation pass and commits all defragmentation moves from `pPassInfo`.<br/>/// After this call:<br/>/// - Allocations at `pPassInfo[i].srcAllocation` that had `pPassInfo[i].operation ==` #VMA_DEFRAGMENTATION_MOVE_OPERATION_COPY<br/>/// (which is the default) will be pointing to the new destination place.<br/>/// - Allocation at `pPassInfo[i].srcAllocation` that had `pPassInfo[i].operation ==` #VMA_DEFRAGMENTATION_MOVE_OPERATION_DESTROY<br/>/// will be freed.<br/>/// If no more moves are possible you can end whole defragmentation.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaEndDefragmentationPass")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaEndDefragmentationPass([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "VmaDefragmentationContext")] VmaDefragmentationContext context, [NativeName(NativeNameType.Param, "pPassInfo")] [NativeName(NativeNameType.Type, "VmaDefragmentationPassMoveInfo*")] VmaDefragmentationPassMoveInfo* pPassInfo)
		{
			int ret = VmaEndDefragmentationPassNative(allocator, context, pPassInfo);
			return ret;
		}

		/// <summary>/// <br/>/// Returns `VK_SUCCESS` if no more moves are possible or `VK_INCOMPLETE` if more defragmentations are possible.<br/>/// Ends incremental defragmentation pass and commits all defragmentation moves from `pPassInfo`.<br/>/// After this call:<br/>/// - Allocations at `pPassInfo[i].srcAllocation` that had `pPassInfo[i].operation ==` #VMA_DEFRAGMENTATION_MOVE_OPERATION_COPY<br/>/// (which is the default) will be pointing to the new destination place.<br/>/// - Allocation at `pPassInfo[i].srcAllocation` that had `pPassInfo[i].operation ==` #VMA_DEFRAGMENTATION_MOVE_OPERATION_DESTROY<br/>/// will be freed.<br/>/// If no more moves are possible you can end whole defragmentation.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaEndDefragmentationPass")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaEndDefragmentationPass([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "VmaDefragmentationContext")] VmaDefragmentationContext context, [NativeName(NativeNameType.Param, "pPassInfo")] [NativeName(NativeNameType.Type, "VmaDefragmentationPassMoveInfo*")] ref VmaDefragmentationPassMoveInfo pPassInfo)
		{
			fixed (VmaDefragmentationPassMoveInfo* ppPassInfo = &pPassInfo)
			{
				int ret = VmaEndDefragmentationPassNative(allocator, context, (VmaDefragmentationPassMoveInfo*)ppPassInfo);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// Binds specified buffer to region of memory represented by specified allocation.<br/>
		/// Gets `VkDeviceMemory` handle and offset from the allocation.<br/>
		/// If you want to create a buffer, allocate memory for it and bind them together separately,<br/>
		/// you should use this function for binding instead of standard `vkBindBufferMemory()`,<br/>
		/// because it ensures proper synchronization so that when a `VkDeviceMemory` object is used by multiple<br/>
		/// allocations, calls to `vkBind*Memory()` or `vkMapMemory()` won't happen from multiple threads simultaneously<br/>
		/// (which is illegal in Vulkan).<br/>
		/// It is recommended to use function vmaCreateBuffer() instead of this one.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaBindBufferMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaBindBufferMemory")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaBindBufferMemoryNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "VkBuffer")] VkBuffer buffer);

		/// <summary>/// <br/>/// Binds specified buffer to region of memory represented by specified allocation.<br/>/// Gets `VkDeviceMemory` handle and offset from the allocation.<br/>/// If you want to create a buffer, allocate memory for it and bind them together separately,<br/>/// you should use this function for binding instead of standard `vkBindBufferMemory()`,<br/>/// because it ensures proper synchronization so that when a `VkDeviceMemory` object is used by multiple<br/>/// allocations, calls to `vkBind*Memory()` or `vkMapMemory()` won't happen from multiple threads simultaneously<br/>/// (which is illegal in Vulkan).<br/>/// It is recommended to use function vmaCreateBuffer() instead of this one.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaBindBufferMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaBindBufferMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "VkBuffer")] VkBuffer buffer)
		{
			int ret = VmaBindBufferMemoryNative(allocator, allocation, buffer);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// This function is similar to vmaBindBufferMemory(), but it provides additional parameters.<br/>
		/// If `pNext` is not null, #VmaAllocator object must have been created with #VMA_ALLOCATOR_CREATE_KHR_BIND_MEMORY2_BIT flag<br/>
		/// or with VmaAllocatorCreateInfo::vulkanApiVersion `>= VK_API_VERSION_1_1`. Otherwise the call fails.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaBindBufferMemory2")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaBindBufferMemory2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaBindBufferMemory2Native([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "allocationLocalOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong allocationLocalOffset, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "VkBuffer")] VkBuffer buffer, [NativeName(NativeNameType.Param, "pNext")] [NativeName(NativeNameType.Type, "const void*")] void* pNext);

		/// <summary>/// <br/>/// This function is similar to vmaBindBufferMemory(), but it provides additional parameters.<br/>/// If `pNext` is not null, #VmaAllocator object must have been created with #VMA_ALLOCATOR_CREATE_KHR_BIND_MEMORY2_BIT flag<br/>/// or with VmaAllocatorCreateInfo::vulkanApiVersion `>= VK_API_VERSION_1_1`. Otherwise the call fails.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaBindBufferMemory2")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaBindBufferMemory2([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "allocationLocalOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong allocationLocalOffset, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "VkBuffer")] VkBuffer buffer, [NativeName(NativeNameType.Param, "pNext")] [NativeName(NativeNameType.Type, "const void*")] void* pNext)
		{
			int ret = VmaBindBufferMemory2Native(allocator, allocation, allocationLocalOffset, buffer, pNext);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// Binds specified image to region of memory represented by specified allocation.<br/>
		/// Gets `VkDeviceMemory` handle and offset from the allocation.<br/>
		/// If you want to create an image, allocate memory for it and bind them together separately,<br/>
		/// you should use this function for binding instead of standard `vkBindImageMemory()`,<br/>
		/// because it ensures proper synchronization so that when a `VkDeviceMemory` object is used by multiple<br/>
		/// allocations, calls to `vkBind*Memory()` or `vkMapMemory()` won't happen from multiple threads simultaneously<br/>
		/// (which is illegal in Vulkan).<br/>
		/// It is recommended to use function vmaCreateImage() instead of this one.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaBindImageMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaBindImageMemory")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaBindImageMemoryNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "VkImage")] VkImage image);

		/// <summary>/// <br/>/// Binds specified image to region of memory represented by specified allocation.<br/>/// Gets `VkDeviceMemory` handle and offset from the allocation.<br/>/// If you want to create an image, allocate memory for it and bind them together separately,<br/>/// you should use this function for binding instead of standard `vkBindImageMemory()`,<br/>/// because it ensures proper synchronization so that when a `VkDeviceMemory` object is used by multiple<br/>/// allocations, calls to `vkBind*Memory()` or `vkMapMemory()` won't happen from multiple threads simultaneously<br/>/// (which is illegal in Vulkan).<br/>/// It is recommended to use function vmaCreateImage() instead of this one.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaBindImageMemory")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaBindImageMemory([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "VkImage")] VkImage image)
		{
			int ret = VmaBindImageMemoryNative(allocator, allocation, image);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// This function is similar to vmaBindImageMemory(), but it provides additional parameters.<br/>
		/// If `pNext` is not null, #VmaAllocator object must have been created with #VMA_ALLOCATOR_CREATE_KHR_BIND_MEMORY2_BIT flag<br/>
		/// or with VmaAllocatorCreateInfo::vulkanApiVersion `>= VK_API_VERSION_1_1`. Otherwise the call fails.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaBindImageMemory2")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaBindImageMemory2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaBindImageMemory2Native([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "allocationLocalOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong allocationLocalOffset, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "VkImage")] VkImage image, [NativeName(NativeNameType.Param, "pNext")] [NativeName(NativeNameType.Type, "const void*")] void* pNext);

		/// <summary>/// <br/>/// This function is similar to vmaBindImageMemory(), but it provides additional parameters.<br/>/// If `pNext` is not null, #VmaAllocator object must have been created with #VMA_ALLOCATOR_CREATE_KHR_BIND_MEMORY2_BIT flag<br/>/// or with VmaAllocatorCreateInfo::vulkanApiVersion `>= VK_API_VERSION_1_1`. Otherwise the call fails.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaBindImageMemory2")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaBindImageMemory2([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "allocationLocalOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong allocationLocalOffset, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "VkImage")] VkImage image, [NativeName(NativeNameType.Param, "pNext")] [NativeName(NativeNameType.Type, "const void*")] void* pNext)
		{
			int ret = VmaBindImageMemory2Native(allocator, allocation, allocationLocalOffset, image, pNext);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// This function automatically:<br/>
		/// -# Creates buffer.<br/>
		/// -# Allocates appropriate memory for it.<br/>
		/// -# Binds the buffer with the memory.<br/>
		/// If any of these operations fail, buffer and allocation are not created,<br/>
		/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>
		/// If the function succeeded, you must destroy both buffer and allocation when you<br/>
		/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>
		/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>
		/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>
		/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>
		/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>
		/// and if dedicated allocation is possible<br/>
		/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>
		/// allocation for this buffer, just like when using<br/>
		/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaCreateBuffer")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaCreateBufferNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo);

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			int ret = VmaCreateBufferNative(allocator, pBufferCreateInfo, pAllocationCreateInfo, pBuffer, pAllocation, pAllocationInfo);
			return ret;
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				int ret = VmaCreateBufferNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, pAllocationCreateInfo, pBuffer, pAllocation, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				int ret = VmaCreateBufferNative(allocator, pBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pBuffer, pAllocation, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					int ret = VmaCreateBufferNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pBuffer, pAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkBuffer* ppBuffer = &pBuffer)
			{
				int ret = VmaCreateBufferNative(allocator, pBufferCreateInfo, pAllocationCreateInfo, (VkBuffer*)ppBuffer, pAllocation, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VkBuffer* ppBuffer = &pBuffer)
				{
					int ret = VmaCreateBufferNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, pAllocationCreateInfo, (VkBuffer*)ppBuffer, pAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VkBuffer* ppBuffer = &pBuffer)
				{
					int ret = VmaCreateBufferNative(allocator, pBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (VkBuffer*)ppBuffer, pAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VkBuffer* ppBuffer = &pBuffer)
					{
						int ret = VmaCreateBufferNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (VkBuffer*)ppBuffer, pAllocation, pAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocation* ppAllocation = &pAllocation)
			{
				int ret = VmaCreateBufferNative(allocator, pBufferCreateInfo, pAllocationCreateInfo, pBuffer, (VmaAllocation*)ppAllocation, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					int ret = VmaCreateBufferNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, pAllocationCreateInfo, pBuffer, (VmaAllocation*)ppAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					int ret = VmaCreateBufferNative(allocator, pBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pBuffer, (VmaAllocation*)ppAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VmaAllocation* ppAllocation = &pAllocation)
					{
						int ret = VmaCreateBufferNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pBuffer, (VmaAllocation*)ppAllocation, pAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkBuffer* ppBuffer = &pBuffer)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					int ret = VmaCreateBufferNative(allocator, pBufferCreateInfo, pAllocationCreateInfo, (VkBuffer*)ppBuffer, (VmaAllocation*)ppAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VkBuffer* ppBuffer = &pBuffer)
				{
					fixed (VmaAllocation* ppAllocation = &pAllocation)
					{
						int ret = VmaCreateBufferNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, pAllocationCreateInfo, (VkBuffer*)ppBuffer, (VmaAllocation*)ppAllocation, pAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VkBuffer* ppBuffer = &pBuffer)
				{
					fixed (VmaAllocation* ppAllocation = &pAllocation)
					{
						int ret = VmaCreateBufferNative(allocator, pBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (VkBuffer*)ppBuffer, (VmaAllocation*)ppAllocation, pAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VkBuffer* ppBuffer = &pBuffer)
					{
						fixed (VmaAllocation* ppAllocation = &pAllocation)
						{
							int ret = VmaCreateBufferNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (VkBuffer*)ppBuffer, (VmaAllocation*)ppAllocation, pAllocationInfo);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
			{
				int ret = VmaCreateBufferNative(allocator, pBufferCreateInfo, pAllocationCreateInfo, pBuffer, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					int ret = VmaCreateBufferNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, pAllocationCreateInfo, pBuffer, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					int ret = VmaCreateBufferNative(allocator, pBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pBuffer, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						int ret = VmaCreateBufferNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pBuffer, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkBuffer* ppBuffer = &pBuffer)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					int ret = VmaCreateBufferNative(allocator, pBufferCreateInfo, pAllocationCreateInfo, (VkBuffer*)ppBuffer, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VkBuffer* ppBuffer = &pBuffer)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						int ret = VmaCreateBufferNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, pAllocationCreateInfo, (VkBuffer*)ppBuffer, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VkBuffer* ppBuffer = &pBuffer)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						int ret = VmaCreateBufferNative(allocator, pBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (VkBuffer*)ppBuffer, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VkBuffer* ppBuffer = &pBuffer)
					{
						fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
						{
							int ret = VmaCreateBufferNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (VkBuffer*)ppBuffer, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocation* ppAllocation = &pAllocation)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					int ret = VmaCreateBufferNative(allocator, pBufferCreateInfo, pAllocationCreateInfo, pBuffer, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						int ret = VmaCreateBufferNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, pAllocationCreateInfo, pBuffer, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						int ret = VmaCreateBufferNative(allocator, pBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pBuffer, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VmaAllocation* ppAllocation = &pAllocation)
					{
						fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
						{
							int ret = VmaCreateBufferNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pBuffer, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkBuffer* ppBuffer = &pBuffer)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						int ret = VmaCreateBufferNative(allocator, pBufferCreateInfo, pAllocationCreateInfo, (VkBuffer*)ppBuffer, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VkBuffer* ppBuffer = &pBuffer)
				{
					fixed (VmaAllocation* ppAllocation = &pAllocation)
					{
						fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
						{
							int ret = VmaCreateBufferNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, pAllocationCreateInfo, (VkBuffer*)ppBuffer, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VkBuffer* ppBuffer = &pBuffer)
				{
					fixed (VmaAllocation* ppAllocation = &pAllocation)
					{
						fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
						{
							int ret = VmaCreateBufferNative(allocator, pBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (VkBuffer*)ppBuffer, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Allocates appropriate memory for it.<br/>/// -# Binds the buffer with the memory.<br/>/// If any of these operations fail, buffer and allocation are not created,<br/>/// returned value is negative error code, `*pBuffer` and `*pAllocation` are null.<br/>/// If the function succeeded, you must destroy both buffer and allocation when you<br/>/// no longer need them using either convenience function vmaDestroyBuffer() or<br/>/// separately, using `vkDestroyBuffer()` and vmaFreeMemory().<br/>/// If #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,<br/>/// VK_KHR_dedicated_allocation extension is used internally to query driver whether<br/>/// it requires or prefers the new buffer to have dedicated allocation. If yes,<br/>/// and if dedicated allocation is possible<br/>/// (#VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated<br/>/// allocation for this buffer, just like when using<br/>/// #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VkBuffer* ppBuffer = &pBuffer)
					{
						fixed (VmaAllocation* ppAllocation = &pAllocation)
						{
							fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
							{
								int ret = VmaCreateBufferNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (VkBuffer*)ppBuffer, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>
		/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>
		/// for interop with OpenGL.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaCreateBufferWithAlignment")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int VmaCreateBufferWithAlignmentNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo);

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			int ret = VmaCreateBufferWithAlignmentNative(allocator, pBufferCreateInfo, pAllocationCreateInfo, minAlignment, pBuffer, pAllocation, pAllocationInfo);
			return ret;
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				int ret = VmaCreateBufferWithAlignmentNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, pAllocationCreateInfo, minAlignment, pBuffer, pAllocation, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				int ret = VmaCreateBufferWithAlignmentNative(allocator, pBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, minAlignment, pBuffer, pAllocation, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					int ret = VmaCreateBufferWithAlignmentNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, minAlignment, pBuffer, pAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkBuffer* ppBuffer = &pBuffer)
			{
				int ret = VmaCreateBufferWithAlignmentNative(allocator, pBufferCreateInfo, pAllocationCreateInfo, minAlignment, (VkBuffer*)ppBuffer, pAllocation, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VkBuffer* ppBuffer = &pBuffer)
				{
					int ret = VmaCreateBufferWithAlignmentNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, pAllocationCreateInfo, minAlignment, (VkBuffer*)ppBuffer, pAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static int VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VkBuffer* ppBuffer = &pBuffer)
				{
					int ret = VmaCreateBufferWithAlignmentNative(allocator, pBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, minAlignment, (VkBuffer*)ppBuffer, pAllocation, pAllocationInfo);
					return ret;
				}
			}
		}
	}
}
