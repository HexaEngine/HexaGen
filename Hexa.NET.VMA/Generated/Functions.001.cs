// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.Vulkan;

namespace Hexa.NET.VMA
{
	public unsafe partial class VMA
	{

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VkBuffer* ppBuffer = &pBuffer)
				{
					VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, pBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, minAlignment, (VkBuffer*)ppBuffer, pAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VkBuffer* ppBuffer = &pBuffer)
					{
						VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, minAlignment, (VkBuffer*)ppBuffer, pAllocation, pAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocation* ppAllocation = &pAllocation)
			{
				VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, pBufferCreateInfo, pAllocationCreateInfo, minAlignment, pBuffer, (VmaAllocation*)ppAllocation, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, pAllocationCreateInfo, minAlignment, pBuffer, (VmaAllocation*)ppAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, pBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, minAlignment, pBuffer, (VmaAllocation*)ppAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VmaAllocation* ppAllocation = &pAllocation)
					{
						VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, minAlignment, pBuffer, (VmaAllocation*)ppAllocation, pAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkBuffer* ppBuffer = &pBuffer)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, pBufferCreateInfo, pAllocationCreateInfo, minAlignment, (VkBuffer*)ppBuffer, (VmaAllocation*)ppAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VkBuffer* ppBuffer = &pBuffer)
				{
					fixed (VmaAllocation* ppAllocation = &pAllocation)
					{
						VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, pAllocationCreateInfo, minAlignment, (VkBuffer*)ppBuffer, (VmaAllocation*)ppAllocation, pAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VkBuffer* ppBuffer = &pBuffer)
				{
					fixed (VmaAllocation* ppAllocation = &pAllocation)
					{
						VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, pBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, minAlignment, (VkBuffer*)ppBuffer, (VmaAllocation*)ppAllocation, pAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VkBuffer* ppBuffer = &pBuffer)
					{
						fixed (VmaAllocation* ppAllocation = &pAllocation)
						{
							VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, minAlignment, (VkBuffer*)ppBuffer, (VmaAllocation*)ppAllocation, pAllocationInfo);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
			{
				VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, pBufferCreateInfo, pAllocationCreateInfo, minAlignment, pBuffer, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, pAllocationCreateInfo, minAlignment, pBuffer, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, pBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, minAlignment, pBuffer, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, minAlignment, pBuffer, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkBuffer* ppBuffer = &pBuffer)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, pBufferCreateInfo, pAllocationCreateInfo, minAlignment, (VkBuffer*)ppBuffer, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VkBuffer* ppBuffer = &pBuffer)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, pAllocationCreateInfo, minAlignment, (VkBuffer*)ppBuffer, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VkBuffer* ppBuffer = &pBuffer)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, pBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, minAlignment, (VkBuffer*)ppBuffer, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VkBuffer* ppBuffer = &pBuffer)
					{
						fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
						{
							VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, minAlignment, (VkBuffer*)ppBuffer, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocation* ppAllocation = &pAllocation)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, pBufferCreateInfo, pAllocationCreateInfo, minAlignment, pBuffer, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, pAllocationCreateInfo, minAlignment, pBuffer, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, pBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, minAlignment, pBuffer, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VmaAllocation* ppAllocation = &pAllocation)
					{
						fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
						{
							VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, minAlignment, pBuffer, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkBuffer* ppBuffer = &pBuffer)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, pBufferCreateInfo, pAllocationCreateInfo, minAlignment, (VkBuffer*)ppBuffer, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VkBuffer* ppBuffer = &pBuffer)
				{
					fixed (VmaAllocation* ppAllocation = &pAllocation)
					{
						fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
						{
							VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, pAllocationCreateInfo, minAlignment, (VkBuffer*)ppBuffer, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VkBuffer* ppBuffer = &pBuffer)
				{
					fixed (VmaAllocation* ppAllocation = &pAllocation)
					{
						fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
						{
							VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, pBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, minAlignment, (VkBuffer*)ppBuffer, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// <br/>/// Similar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,<br/>/// minimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.<br/>/// for interop with OpenGL.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateBufferWithAlignment")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateBufferWithAlignment([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "minAlignment")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong minAlignment, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VkBuffer* ppBuffer = &pBuffer)
					{
						fixed (VmaAllocation* ppAllocation = &pAllocation)
						{
							fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
							{
								VkResult ret = VmaCreateBufferWithAlignmentNative(allocator, (VkBufferCreateInfo*)ppBufferCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, minAlignment, (VkBuffer*)ppBuffer, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// This function automatically:<br/>
		/// -# Creates buffer.<br/>
		/// -# Binds the buffer with the supplied memory.<br/>
		/// If any of these operations fail, buffer is not created,<br/>
		/// returned value is negative error code and `*pBuffer` is null.<br/>
		/// If the function succeeded, you must destroy the buffer when you<br/>
		/// no longer need it using `vkDestroyBuffer()`. If you want to also destroy the corresponding<br/>
		/// allocation you can use convenience function vmaDestroyBuffer().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaCreateAliasingBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaCreateAliasingBuffer")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial VkResult VmaCreateAliasingBufferNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer);

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Binds the buffer with the supplied memory.<br/>/// If any of these operations fail, buffer is not created,<br/>/// returned value is negative error code and `*pBuffer` is null.<br/>/// If the function succeeded, you must destroy the buffer when you<br/>/// no longer need it using `vkDestroyBuffer()`. If you want to also destroy the corresponding<br/>/// allocation you can use convenience function vmaDestroyBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateAliasingBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateAliasingBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer)
		{
			VkResult ret = VmaCreateAliasingBufferNative(allocator, allocation, pBufferCreateInfo, pBuffer);
			return ret;
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Binds the buffer with the supplied memory.<br/>/// If any of these operations fail, buffer is not created,<br/>/// returned value is negative error code and `*pBuffer` is null.<br/>/// If the function succeeded, you must destroy the buffer when you<br/>/// no longer need it using `vkDestroyBuffer()`. If you want to also destroy the corresponding<br/>/// allocation you can use convenience function vmaDestroyBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateAliasingBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateAliasingBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				VkResult ret = VmaCreateAliasingBufferNative(allocator, allocation, (VkBufferCreateInfo*)ppBufferCreateInfo, pBuffer);
				return ret;
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Binds the buffer with the supplied memory.<br/>/// If any of these operations fail, buffer is not created,<br/>/// returned value is negative error code and `*pBuffer` is null.<br/>/// If the function succeeded, you must destroy the buffer when you<br/>/// no longer need it using `vkDestroyBuffer()`. If you want to also destroy the corresponding<br/>/// allocation you can use convenience function vmaDestroyBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateAliasingBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateAliasingBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer)
		{
			fixed (VkBuffer* ppBuffer = &pBuffer)
			{
				VkResult ret = VmaCreateAliasingBufferNative(allocator, allocation, pBufferCreateInfo, (VkBuffer*)ppBuffer);
				return ret;
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Binds the buffer with the supplied memory.<br/>/// If any of these operations fail, buffer is not created,<br/>/// returned value is negative error code and `*pBuffer` is null.<br/>/// If the function succeeded, you must destroy the buffer when you<br/>/// no longer need it using `vkDestroyBuffer()`. If you want to also destroy the corresponding<br/>/// allocation you can use convenience function vmaDestroyBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateAliasingBuffer")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateAliasingBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VkBuffer* ppBuffer = &pBuffer)
				{
					VkResult ret = VmaCreateAliasingBufferNative(allocator, allocation, (VkBufferCreateInfo*)ppBufferCreateInfo, (VkBuffer*)ppBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// This function automatically:<br/>
		/// -# Creates buffer.<br/>
		/// -# Binds the buffer with the supplied memory.<br/>
		/// If any of these operations fail, buffer is not created,<br/>
		/// returned value is negative error code and `*pBuffer` is null.<br/>
		/// If the function succeeded, you must destroy the buffer when you<br/>
		/// no longer need it using `vkDestroyBuffer()`. If you want to also destroy the corresponding<br/>
		/// allocation you can use convenience function vmaDestroyBuffer().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaCreateAliasingBuffer2")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaCreateAliasingBuffer2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial VkResult VmaCreateAliasingBuffer2Native([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "allocationLocalOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong allocationLocalOffset, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer);

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Binds the buffer with the supplied memory.<br/>/// If any of these operations fail, buffer is not created,<br/>/// returned value is negative error code and `*pBuffer` is null.<br/>/// If the function succeeded, you must destroy the buffer when you<br/>/// no longer need it using `vkDestroyBuffer()`. If you want to also destroy the corresponding<br/>/// allocation you can use convenience function vmaDestroyBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateAliasingBuffer2")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateAliasingBuffer2([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "allocationLocalOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong allocationLocalOffset, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer)
		{
			VkResult ret = VmaCreateAliasingBuffer2Native(allocator, allocation, allocationLocalOffset, pBufferCreateInfo, pBuffer);
			return ret;
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Binds the buffer with the supplied memory.<br/>/// If any of these operations fail, buffer is not created,<br/>/// returned value is negative error code and `*pBuffer` is null.<br/>/// If the function succeeded, you must destroy the buffer when you<br/>/// no longer need it using `vkDestroyBuffer()`. If you want to also destroy the corresponding<br/>/// allocation you can use convenience function vmaDestroyBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateAliasingBuffer2")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateAliasingBuffer2([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "allocationLocalOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong allocationLocalOffset, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] VkBuffer* pBuffer)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				VkResult ret = VmaCreateAliasingBuffer2Native(allocator, allocation, allocationLocalOffset, (VkBufferCreateInfo*)ppBufferCreateInfo, pBuffer);
				return ret;
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Binds the buffer with the supplied memory.<br/>/// If any of these operations fail, buffer is not created,<br/>/// returned value is negative error code and `*pBuffer` is null.<br/>/// If the function succeeded, you must destroy the buffer when you<br/>/// no longer need it using `vkDestroyBuffer()`. If you want to also destroy the corresponding<br/>/// allocation you can use convenience function vmaDestroyBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateAliasingBuffer2")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateAliasingBuffer2([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "allocationLocalOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong allocationLocalOffset, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] VkBufferCreateInfo* pBufferCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer)
		{
			fixed (VkBuffer* ppBuffer = &pBuffer)
			{
				VkResult ret = VmaCreateAliasingBuffer2Native(allocator, allocation, allocationLocalOffset, pBufferCreateInfo, (VkBuffer*)ppBuffer);
				return ret;
			}
		}

		/// <summary>/// <br/>/// This function automatically:<br/>/// -# Creates buffer.<br/>/// -# Binds the buffer with the supplied memory.<br/>/// If any of these operations fail, buffer is not created,<br/>/// returned value is negative error code and `*pBuffer` is null.<br/>/// If the function succeeded, you must destroy the buffer when you<br/>/// no longer need it using `vkDestroyBuffer()`. If you want to also destroy the corresponding<br/>/// allocation you can use convenience function vmaDestroyBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateAliasingBuffer2")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateAliasingBuffer2([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "allocationLocalOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong allocationLocalOffset, [NativeName(NativeNameType.Param, "pBufferCreateInfo")] [NativeName(NativeNameType.Type, "const VkBufferCreateInfo*")] ref VkBufferCreateInfo pBufferCreateInfo, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "VkBuffer*")] ref VkBuffer pBuffer)
		{
			fixed (VkBufferCreateInfo* ppBufferCreateInfo = &pBufferCreateInfo)
			{
				fixed (VkBuffer* ppBuffer = &pBuffer)
				{
					VkResult ret = VmaCreateAliasingBuffer2Native(allocator, allocation, allocationLocalOffset, (VkBufferCreateInfo*)ppBufferCreateInfo, (VkBuffer*)ppBuffer);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// This is just a convenience function equivalent to:<br/>
		/// It is safe to pass null as buffer and/or allocation.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaDestroyBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaDestroyBuffer")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaDestroyBufferNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "VkBuffer")] VkBuffer buffer, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation);

		/// <summary>/// <br/>/// This is just a convenience function equivalent to:<br/>/// It is safe to pass null as buffer and/or allocation.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaDestroyBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaDestroyBuffer([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "VkBuffer")] VkBuffer buffer, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation)
		{
			VmaDestroyBufferNative(allocator, buffer, allocation);
		}

		/// <summary>
		/// Function similar to vmaCreateBuffer().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaCreateImage")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial VkResult VmaCreateImageNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo);

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			VkResult ret = VmaCreateImageNative(allocator, pImageCreateInfo, pAllocationCreateInfo, pImage, pAllocation, pAllocationInfo);
			return ret;
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				VkResult ret = VmaCreateImageNative(allocator, (VkImageCreateInfo*)ppImageCreateInfo, pAllocationCreateInfo, pImage, pAllocation, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				VkResult ret = VmaCreateImageNative(allocator, pImageCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pImage, pAllocation, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					VkResult ret = VmaCreateImageNative(allocator, (VkImageCreateInfo*)ppImageCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pImage, pAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] ref VkImage pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkImage* ppImage = &pImage)
			{
				VkResult ret = VmaCreateImageNative(allocator, pImageCreateInfo, pAllocationCreateInfo, (VkImage*)ppImage, pAllocation, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] ref VkImage pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				fixed (VkImage* ppImage = &pImage)
				{
					VkResult ret = VmaCreateImageNative(allocator, (VkImageCreateInfo*)ppImageCreateInfo, pAllocationCreateInfo, (VkImage*)ppImage, pAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] ref VkImage pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VkImage* ppImage = &pImage)
				{
					VkResult ret = VmaCreateImageNative(allocator, pImageCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (VkImage*)ppImage, pAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] ref VkImage pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VkImage* ppImage = &pImage)
					{
						VkResult ret = VmaCreateImageNative(allocator, (VkImageCreateInfo*)ppImageCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (VkImage*)ppImage, pAllocation, pAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocation* ppAllocation = &pAllocation)
			{
				VkResult ret = VmaCreateImageNative(allocator, pImageCreateInfo, pAllocationCreateInfo, pImage, (VmaAllocation*)ppAllocation, pAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					VkResult ret = VmaCreateImageNative(allocator, (VkImageCreateInfo*)ppImageCreateInfo, pAllocationCreateInfo, pImage, (VmaAllocation*)ppAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					VkResult ret = VmaCreateImageNative(allocator, pImageCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pImage, (VmaAllocation*)ppAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VmaAllocation* ppAllocation = &pAllocation)
					{
						VkResult ret = VmaCreateImageNative(allocator, (VkImageCreateInfo*)ppImageCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pImage, (VmaAllocation*)ppAllocation, pAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] ref VkImage pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkImage* ppImage = &pImage)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					VkResult ret = VmaCreateImageNative(allocator, pImageCreateInfo, pAllocationCreateInfo, (VkImage*)ppImage, (VmaAllocation*)ppAllocation, pAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] ref VkImage pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				fixed (VkImage* ppImage = &pImage)
				{
					fixed (VmaAllocation* ppAllocation = &pAllocation)
					{
						VkResult ret = VmaCreateImageNative(allocator, (VkImageCreateInfo*)ppImageCreateInfo, pAllocationCreateInfo, (VkImage*)ppImage, (VmaAllocation*)ppAllocation, pAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] ref VkImage pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VkImage* ppImage = &pImage)
				{
					fixed (VmaAllocation* ppAllocation = &pAllocation)
					{
						VkResult ret = VmaCreateImageNative(allocator, pImageCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (VkImage*)ppImage, (VmaAllocation*)ppAllocation, pAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] ref VkImage pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] VmaAllocationInfo* pAllocationInfo)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VkImage* ppImage = &pImage)
					{
						fixed (VmaAllocation* ppAllocation = &pAllocation)
						{
							VkResult ret = VmaCreateImageNative(allocator, (VkImageCreateInfo*)ppImageCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (VkImage*)ppImage, (VmaAllocation*)ppAllocation, pAllocationInfo);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
			{
				VkResult ret = VmaCreateImageNative(allocator, pImageCreateInfo, pAllocationCreateInfo, pImage, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
				return ret;
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					VkResult ret = VmaCreateImageNative(allocator, (VkImageCreateInfo*)ppImageCreateInfo, pAllocationCreateInfo, pImage, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					VkResult ret = VmaCreateImageNative(allocator, pImageCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pImage, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						VkResult ret = VmaCreateImageNative(allocator, (VkImageCreateInfo*)ppImageCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pImage, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] ref VkImage pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkImage* ppImage = &pImage)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					VkResult ret = VmaCreateImageNative(allocator, pImageCreateInfo, pAllocationCreateInfo, (VkImage*)ppImage, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] ref VkImage pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				fixed (VkImage* ppImage = &pImage)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						VkResult ret = VmaCreateImageNative(allocator, (VkImageCreateInfo*)ppImageCreateInfo, pAllocationCreateInfo, (VkImage*)ppImage, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] ref VkImage pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VkImage* ppImage = &pImage)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						VkResult ret = VmaCreateImageNative(allocator, pImageCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (VkImage*)ppImage, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] ref VkImage pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] VmaAllocation* pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VkImage* ppImage = &pImage)
					{
						fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
						{
							VkResult ret = VmaCreateImageNative(allocator, (VkImageCreateInfo*)ppImageCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (VkImage*)ppImage, pAllocation, (VmaAllocationInfo*)ppAllocationInfo);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocation* ppAllocation = &pAllocation)
			{
				fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
				{
					VkResult ret = VmaCreateImageNative(allocator, pImageCreateInfo, pAllocationCreateInfo, pImage, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
					return ret;
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						VkResult ret = VmaCreateImageNative(allocator, (VkImageCreateInfo*)ppImageCreateInfo, pAllocationCreateInfo, pImage, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						VkResult ret = VmaCreateImageNative(allocator, pImageCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pImage, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VmaAllocation* ppAllocation = &pAllocation)
					{
						fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
						{
							VkResult ret = VmaCreateImageNative(allocator, (VkImageCreateInfo*)ppImageCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, pImage, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] ref VkImage pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkImage* ppImage = &pImage)
			{
				fixed (VmaAllocation* ppAllocation = &pAllocation)
				{
					fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
					{
						VkResult ret = VmaCreateImageNative(allocator, pImageCreateInfo, pAllocationCreateInfo, (VkImage*)ppImage, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] VmaAllocationCreateInfo* pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] ref VkImage pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				fixed (VkImage* ppImage = &pImage)
				{
					fixed (VmaAllocation* ppAllocation = &pAllocation)
					{
						fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
						{
							VkResult ret = VmaCreateImageNative(allocator, (VkImageCreateInfo*)ppImageCreateInfo, pAllocationCreateInfo, (VkImage*)ppImage, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] ref VkImage pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
			{
				fixed (VkImage* ppImage = &pImage)
				{
					fixed (VmaAllocation* ppAllocation = &pAllocation)
					{
						fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
						{
							VkResult ret = VmaCreateImageNative(allocator, pImageCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (VkImage*)ppImage, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Function similar to vmaCreateBuffer().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pAllocationCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo*")] ref VmaAllocationCreateInfo pAllocationCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] ref VkImage pImage, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaAllocation*")] ref VmaAllocation pAllocation, [NativeName(NativeNameType.Param, "pAllocationInfo")] [NativeName(NativeNameType.Type, "VmaAllocationInfo*")] ref VmaAllocationInfo pAllocationInfo)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				fixed (VmaAllocationCreateInfo* ppAllocationCreateInfo = &pAllocationCreateInfo)
				{
					fixed (VkImage* ppImage = &pImage)
					{
						fixed (VmaAllocation* ppAllocation = &pAllocation)
						{
							fixed (VmaAllocationInfo* ppAllocationInfo = &pAllocationInfo)
							{
								VkResult ret = VmaCreateImageNative(allocator, (VkImageCreateInfo*)ppImageCreateInfo, (VmaAllocationCreateInfo*)ppAllocationCreateInfo, (VkImage*)ppImage, (VmaAllocation*)ppAllocation, (VmaAllocationInfo*)ppAllocationInfo);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Function similar to vmaCreateAliasingBuffer() but for images.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaCreateAliasingImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaCreateAliasingImage")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial VkResult VmaCreateAliasingImageNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage);

		/// <summary>/// Function similar to vmaCreateAliasingBuffer() but for images.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateAliasingImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateAliasingImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage)
		{
			VkResult ret = VmaCreateAliasingImageNative(allocator, allocation, pImageCreateInfo, pImage);
			return ret;
		}

		/// <summary>/// Function similar to vmaCreateAliasingBuffer() but for images.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateAliasingImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateAliasingImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				VkResult ret = VmaCreateAliasingImageNative(allocator, allocation, (VkImageCreateInfo*)ppImageCreateInfo, pImage);
				return ret;
			}
		}

		/// <summary>/// Function similar to vmaCreateAliasingBuffer() but for images.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateAliasingImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateAliasingImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] ref VkImage pImage)
		{
			fixed (VkImage* ppImage = &pImage)
			{
				VkResult ret = VmaCreateAliasingImageNative(allocator, allocation, pImageCreateInfo, (VkImage*)ppImage);
				return ret;
			}
		}

		/// <summary>/// Function similar to vmaCreateAliasingBuffer() but for images.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateAliasingImage")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateAliasingImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] ref VkImage pImage)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				fixed (VkImage* ppImage = &pImage)
				{
					VkResult ret = VmaCreateAliasingImageNative(allocator, allocation, (VkImageCreateInfo*)ppImageCreateInfo, (VkImage*)ppImage);
					return ret;
				}
			}
		}

		/// <summary>
		/// Function similar to vmaCreateAliasingBuffer2() but for images.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaCreateAliasingImage2")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaCreateAliasingImage2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial VkResult VmaCreateAliasingImage2Native([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "allocationLocalOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong allocationLocalOffset, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage);

		/// <summary>/// Function similar to vmaCreateAliasingBuffer2() but for images.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateAliasingImage2")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateAliasingImage2([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "allocationLocalOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong allocationLocalOffset, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage)
		{
			VkResult ret = VmaCreateAliasingImage2Native(allocator, allocation, allocationLocalOffset, pImageCreateInfo, pImage);
			return ret;
		}

		/// <summary>/// Function similar to vmaCreateAliasingBuffer2() but for images.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateAliasingImage2")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateAliasingImage2([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "allocationLocalOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong allocationLocalOffset, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] VkImage* pImage)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				VkResult ret = VmaCreateAliasingImage2Native(allocator, allocation, allocationLocalOffset, (VkImageCreateInfo*)ppImageCreateInfo, pImage);
				return ret;
			}
		}

		/// <summary>/// Function similar to vmaCreateAliasingBuffer2() but for images.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateAliasingImage2")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateAliasingImage2([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "allocationLocalOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong allocationLocalOffset, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] VkImageCreateInfo* pImageCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] ref VkImage pImage)
		{
			fixed (VkImage* ppImage = &pImage)
			{
				VkResult ret = VmaCreateAliasingImage2Native(allocator, allocation, allocationLocalOffset, pImageCreateInfo, (VkImage*)ppImage);
				return ret;
			}
		}

		/// <summary>/// Function similar to vmaCreateAliasingBuffer2() but for images.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateAliasingImage2")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateAliasingImage2([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation, [NativeName(NativeNameType.Param, "allocationLocalOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong allocationLocalOffset, [NativeName(NativeNameType.Param, "pImageCreateInfo")] [NativeName(NativeNameType.Type, "const VkImageCreateInfo*")] ref VkImageCreateInfo pImageCreateInfo, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "VkImage*")] ref VkImage pImage)
		{
			fixed (VkImageCreateInfo* ppImageCreateInfo = &pImageCreateInfo)
			{
				fixed (VkImage* ppImage = &pImage)
				{
					VkResult ret = VmaCreateAliasingImage2Native(allocator, allocation, allocationLocalOffset, (VkImageCreateInfo*)ppImageCreateInfo, (VkImage*)ppImage);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// This is just a convenience function equivalent to:<br/>
		/// It is safe to pass null as image and/or allocation.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaDestroyImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaDestroyImage")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaDestroyImageNative([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "VkImage")] VkImage image, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation);

		/// <summary>/// <br/>/// This is just a convenience function equivalent to:<br/>/// It is safe to pass null as image and/or allocation.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaDestroyImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaDestroyImage([NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator allocator, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "VkImage")] VkImage image, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaAllocation")] VmaAllocation allocation)
		{
			VmaDestroyImageNative(allocator, image, allocation);
		}

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaCreateVirtualBlock")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaCreateVirtualBlock")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial VkResult VmaCreateVirtualBlockNative([NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaVirtualBlockCreateInfo*")] VmaVirtualBlockCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pVirtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock*")] VmaVirtualBlock* pVirtualBlock);

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateVirtualBlock")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateVirtualBlock([NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaVirtualBlockCreateInfo*")] VmaVirtualBlockCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pVirtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock*")] VmaVirtualBlock* pVirtualBlock)
		{
			VkResult ret = VmaCreateVirtualBlockNative(pCreateInfo, pVirtualBlock);
			return ret;
		}

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateVirtualBlock")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateVirtualBlock([NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaVirtualBlockCreateInfo*")] ref VmaVirtualBlockCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pVirtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock*")] VmaVirtualBlock* pVirtualBlock)
		{
			fixed (VmaVirtualBlockCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				VkResult ret = VmaCreateVirtualBlockNative((VmaVirtualBlockCreateInfo*)ppCreateInfo, pVirtualBlock);
				return ret;
			}
		}

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateVirtualBlock")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateVirtualBlock([NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaVirtualBlockCreateInfo*")] VmaVirtualBlockCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pVirtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock*")] ref VmaVirtualBlock pVirtualBlock)
		{
			fixed (VmaVirtualBlock* ppVirtualBlock = &pVirtualBlock)
			{
				VkResult ret = VmaCreateVirtualBlockNative(pCreateInfo, (VmaVirtualBlock*)ppVirtualBlock);
				return ret;
			}
		}

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCreateVirtualBlock")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaCreateVirtualBlock([NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaVirtualBlockCreateInfo*")] ref VmaVirtualBlockCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pVirtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock*")] ref VmaVirtualBlock pVirtualBlock)
		{
			fixed (VmaVirtualBlockCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				fixed (VmaVirtualBlock* ppVirtualBlock = &pVirtualBlock)
				{
					VkResult ret = VmaCreateVirtualBlockNative((VmaVirtualBlockCreateInfo*)ppCreateInfo, (VmaVirtualBlock*)ppVirtualBlock);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// Please note that you should consciously handle virtual allocations that could remain unfreed in the block.<br/>
		/// You should either free them individually using vmaVirtualFree() or call vmaClearVirtualBlock()<br/>
		/// if you are sure this is what you want. If you do neither, an assert is called.<br/>
		/// If you keep pointers to some additional metadata associated with your virtual allocations in their `pUserData`,<br/>
		/// don't forget to free them.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaDestroyVirtualBlock")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaDestroyVirtualBlock")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaDestroyVirtualBlockNative([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock);

		/// <summary>/// <br/>/// Please note that you should consciously handle virtual allocations that could remain unfreed in the block.<br/>/// You should either free them individually using vmaVirtualFree() or call vmaClearVirtualBlock()<br/>/// if you are sure this is what you want. If you do neither, an assert is called.<br/>/// If you keep pointers to some additional metadata associated with your virtual allocations in their `pUserData`,<br/>/// don't forget to free them.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaDestroyVirtualBlock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaDestroyVirtualBlock([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock)
		{
			VmaDestroyVirtualBlockNative(virtualBlock);
		}

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaIsVirtualBlockEmpty")]
		[return: NativeName(NativeNameType.Type, "VkBool32")]
		[LibraryImport(LibName, EntryPoint = "vmaIsVirtualBlockEmpty")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint VmaIsVirtualBlockEmptyNative([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock);

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaIsVirtualBlockEmpty")]
		[return: NativeName(NativeNameType.Type, "VkBool32")]
		public static uint VmaIsVirtualBlockEmpty([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock)
		{
			uint ret = VmaIsVirtualBlockEmptyNative(virtualBlock);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaGetVirtualAllocationInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaGetVirtualAllocationInfo")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaGetVirtualAllocationInfoNative([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaVirtualAllocation")] VmaVirtualAllocation allocation, [NativeName(NativeNameType.Param, "pVirtualAllocInfo")] [NativeName(NativeNameType.Type, "VmaVirtualAllocationInfo*")] VmaVirtualAllocationInfo* pVirtualAllocInfo);

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetVirtualAllocationInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetVirtualAllocationInfo([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaVirtualAllocation")] VmaVirtualAllocation allocation, [NativeName(NativeNameType.Param, "pVirtualAllocInfo")] [NativeName(NativeNameType.Type, "VmaVirtualAllocationInfo*")] VmaVirtualAllocationInfo* pVirtualAllocInfo)
		{
			VmaGetVirtualAllocationInfoNative(virtualBlock, allocation, pVirtualAllocInfo);
		}

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetVirtualAllocationInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetVirtualAllocationInfo([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaVirtualAllocation")] VmaVirtualAllocation allocation, [NativeName(NativeNameType.Param, "pVirtualAllocInfo")] [NativeName(NativeNameType.Type, "VmaVirtualAllocationInfo*")] ref VmaVirtualAllocationInfo pVirtualAllocInfo)
		{
			fixed (VmaVirtualAllocationInfo* ppVirtualAllocInfo = &pVirtualAllocInfo)
			{
				VmaGetVirtualAllocationInfoNative(virtualBlock, allocation, (VmaVirtualAllocationInfo*)ppVirtualAllocInfo);
			}
		}

		/// <summary>
		/// <br/>
		/// If the allocation fails due to not enough free space available, `VK_ERROR_OUT_OF_DEVICE_MEMORY` is returned<br/>
		/// (despite the function doesn't ever allocate actual GPU memory).<br/>
		/// `pAllocation` is then set to `VK_NULL_HANDLE` and `pOffset`, if not null, it set to `UINT64_MAX`.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaVirtualAllocate")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		[LibraryImport(LibName, EntryPoint = "vmaVirtualAllocate")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial VkResult VmaVirtualAllocateNative([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaVirtualAllocationCreateInfo*")] VmaVirtualAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaVirtualAllocation*")] VmaVirtualAllocation* pAllocation, [NativeName(NativeNameType.Param, "pOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize*")] ulong* pOffset);

		/// <summary>/// <br/>/// If the allocation fails due to not enough free space available, `VK_ERROR_OUT_OF_DEVICE_MEMORY` is returned<br/>/// (despite the function doesn't ever allocate actual GPU memory).<br/>/// `pAllocation` is then set to `VK_NULL_HANDLE` and `pOffset`, if not null, it set to `UINT64_MAX`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaVirtualAllocate")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaVirtualAllocate([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaVirtualAllocationCreateInfo*")] VmaVirtualAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaVirtualAllocation*")] VmaVirtualAllocation* pAllocation, [NativeName(NativeNameType.Param, "pOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize*")] ulong* pOffset)
		{
			VkResult ret = VmaVirtualAllocateNative(virtualBlock, pCreateInfo, pAllocation, pOffset);
			return ret;
		}

		/// <summary>/// <br/>/// If the allocation fails due to not enough free space available, `VK_ERROR_OUT_OF_DEVICE_MEMORY` is returned<br/>/// (despite the function doesn't ever allocate actual GPU memory).<br/>/// `pAllocation` is then set to `VK_NULL_HANDLE` and `pOffset`, if not null, it set to `UINT64_MAX`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaVirtualAllocate")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaVirtualAllocate([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaVirtualAllocationCreateInfo*")] ref VmaVirtualAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaVirtualAllocation*")] VmaVirtualAllocation* pAllocation, [NativeName(NativeNameType.Param, "pOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize*")] ulong* pOffset)
		{
			fixed (VmaVirtualAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				VkResult ret = VmaVirtualAllocateNative(virtualBlock, (VmaVirtualAllocationCreateInfo*)ppCreateInfo, pAllocation, pOffset);
				return ret;
			}
		}

		/// <summary>/// <br/>/// If the allocation fails due to not enough free space available, `VK_ERROR_OUT_OF_DEVICE_MEMORY` is returned<br/>/// (despite the function doesn't ever allocate actual GPU memory).<br/>/// `pAllocation` is then set to `VK_NULL_HANDLE` and `pOffset`, if not null, it set to `UINT64_MAX`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaVirtualAllocate")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaVirtualAllocate([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaVirtualAllocationCreateInfo*")] VmaVirtualAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaVirtualAllocation*")] ref VmaVirtualAllocation pAllocation, [NativeName(NativeNameType.Param, "pOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize*")] ulong* pOffset)
		{
			fixed (VmaVirtualAllocation* ppAllocation = &pAllocation)
			{
				VkResult ret = VmaVirtualAllocateNative(virtualBlock, pCreateInfo, (VmaVirtualAllocation*)ppAllocation, pOffset);
				return ret;
			}
		}

		/// <summary>/// <br/>/// If the allocation fails due to not enough free space available, `VK_ERROR_OUT_OF_DEVICE_MEMORY` is returned<br/>/// (despite the function doesn't ever allocate actual GPU memory).<br/>/// `pAllocation` is then set to `VK_NULL_HANDLE` and `pOffset`, if not null, it set to `UINT64_MAX`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaVirtualAllocate")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaVirtualAllocate([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaVirtualAllocationCreateInfo*")] ref VmaVirtualAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaVirtualAllocation*")] ref VmaVirtualAllocation pAllocation, [NativeName(NativeNameType.Param, "pOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize*")] ulong* pOffset)
		{
			fixed (VmaVirtualAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				fixed (VmaVirtualAllocation* ppAllocation = &pAllocation)
				{
					VkResult ret = VmaVirtualAllocateNative(virtualBlock, (VmaVirtualAllocationCreateInfo*)ppCreateInfo, (VmaVirtualAllocation*)ppAllocation, pOffset);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// If the allocation fails due to not enough free space available, `VK_ERROR_OUT_OF_DEVICE_MEMORY` is returned<br/>/// (despite the function doesn't ever allocate actual GPU memory).<br/>/// `pAllocation` is then set to `VK_NULL_HANDLE` and `pOffset`, if not null, it set to `UINT64_MAX`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaVirtualAllocate")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaVirtualAllocate([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaVirtualAllocationCreateInfo*")] VmaVirtualAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaVirtualAllocation*")] VmaVirtualAllocation* pAllocation, [NativeName(NativeNameType.Param, "pOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize*")] ref ulong pOffset)
		{
			fixed (ulong* ppOffset = &pOffset)
			{
				VkResult ret = VmaVirtualAllocateNative(virtualBlock, pCreateInfo, pAllocation, (ulong*)ppOffset);
				return ret;
			}
		}

		/// <summary>/// <br/>/// If the allocation fails due to not enough free space available, `VK_ERROR_OUT_OF_DEVICE_MEMORY` is returned<br/>/// (despite the function doesn't ever allocate actual GPU memory).<br/>/// `pAllocation` is then set to `VK_NULL_HANDLE` and `pOffset`, if not null, it set to `UINT64_MAX`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaVirtualAllocate")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaVirtualAllocate([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaVirtualAllocationCreateInfo*")] ref VmaVirtualAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaVirtualAllocation*")] VmaVirtualAllocation* pAllocation, [NativeName(NativeNameType.Param, "pOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize*")] ref ulong pOffset)
		{
			fixed (VmaVirtualAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				fixed (ulong* ppOffset = &pOffset)
				{
					VkResult ret = VmaVirtualAllocateNative(virtualBlock, (VmaVirtualAllocationCreateInfo*)ppCreateInfo, pAllocation, (ulong*)ppOffset);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// If the allocation fails due to not enough free space available, `VK_ERROR_OUT_OF_DEVICE_MEMORY` is returned<br/>/// (despite the function doesn't ever allocate actual GPU memory).<br/>/// `pAllocation` is then set to `VK_NULL_HANDLE` and `pOffset`, if not null, it set to `UINT64_MAX`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaVirtualAllocate")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaVirtualAllocate([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaVirtualAllocationCreateInfo*")] VmaVirtualAllocationCreateInfo* pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaVirtualAllocation*")] ref VmaVirtualAllocation pAllocation, [NativeName(NativeNameType.Param, "pOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize*")] ref ulong pOffset)
		{
			fixed (VmaVirtualAllocation* ppAllocation = &pAllocation)
			{
				fixed (ulong* ppOffset = &pOffset)
				{
					VkResult ret = VmaVirtualAllocateNative(virtualBlock, pCreateInfo, (VmaVirtualAllocation*)ppAllocation, (ulong*)ppOffset);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// If the allocation fails due to not enough free space available, `VK_ERROR_OUT_OF_DEVICE_MEMORY` is returned<br/>/// (despite the function doesn't ever allocate actual GPU memory).<br/>/// `pAllocation` is then set to `VK_NULL_HANDLE` and `pOffset`, if not null, it set to `UINT64_MAX`.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaVirtualAllocate")]
		[return: NativeName(NativeNameType.Type, "VkResult")]
		public static VkResult VmaVirtualAllocate([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "pCreateInfo")] [NativeName(NativeNameType.Type, "const VmaVirtualAllocationCreateInfo*")] ref VmaVirtualAllocationCreateInfo pCreateInfo, [NativeName(NativeNameType.Param, "pAllocation")] [NativeName(NativeNameType.Type, "VmaVirtualAllocation*")] ref VmaVirtualAllocation pAllocation, [NativeName(NativeNameType.Param, "pOffset")] [NativeName(NativeNameType.Type, "VkDeviceSize*")] ref ulong pOffset)
		{
			fixed (VmaVirtualAllocationCreateInfo* ppCreateInfo = &pCreateInfo)
			{
				fixed (VmaVirtualAllocation* ppAllocation = &pAllocation)
				{
					fixed (ulong* ppOffset = &pOffset)
					{
						VkResult ret = VmaVirtualAllocateNative(virtualBlock, (VmaVirtualAllocationCreateInfo*)ppCreateInfo, (VmaVirtualAllocation*)ppAllocation, (ulong*)ppOffset);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// It is correct to call this function with `allocation == VK_NULL_HANDLE` - it does nothing.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaVirtualFree")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaVirtualFree")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaVirtualFreeNative([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaVirtualAllocation")] VmaVirtualAllocation allocation);

		/// <summary>/// <br/>/// It is correct to call this function with `allocation == VK_NULL_HANDLE` - it does nothing.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaVirtualFree")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaVirtualFree([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaVirtualAllocation")] VmaVirtualAllocation allocation)
		{
			VmaVirtualFreeNative(virtualBlock, allocation);
		}

		/// <summary>
		/// <br/>
		/// You must either call this function or free each virtual allocation individually with vmaVirtualFree()<br/>
		/// before destroying a virtual block. Otherwise, an assert is called.<br/>
		/// If you keep pointer to some additional metadata associated with your virtual allocation in its `pUserData`,<br/>
		/// don't forget to free it as well.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaClearVirtualBlock")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaClearVirtualBlock")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaClearVirtualBlockNative([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock);

		/// <summary>/// <br/>/// You must either call this function or free each virtual allocation individually with vmaVirtualFree()<br/>/// before destroying a virtual block. Otherwise, an assert is called.<br/>/// If you keep pointer to some additional metadata associated with your virtual allocation in its `pUserData`,<br/>/// don't forget to free it as well.<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaClearVirtualBlock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaClearVirtualBlock([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock)
		{
			VmaClearVirtualBlockNative(virtualBlock);
		}

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaSetVirtualAllocationUserData")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaSetVirtualAllocationUserData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaSetVirtualAllocationUserDataNative([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaVirtualAllocation")] VmaVirtualAllocation allocation, [NativeName(NativeNameType.Param, "pUserData")] [NativeName(NativeNameType.Type, "void*")] void* pUserData);

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaSetVirtualAllocationUserData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaSetVirtualAllocationUserData([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "allocation")] [NativeName(NativeNameType.Type, "VmaVirtualAllocation")] VmaVirtualAllocation allocation, [NativeName(NativeNameType.Param, "pUserData")] [NativeName(NativeNameType.Type, "void*")] void* pUserData)
		{
			VmaSetVirtualAllocationUserDataNative(virtualBlock, allocation, pUserData);
		}

		/// <summary>
		/// <br/>
		/// This function is fast to call. For more detailed statistics, see vmaCalculateVirtualBlockStatistics().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaGetVirtualBlockStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaGetVirtualBlockStatistics")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaGetVirtualBlockStatisticsNative([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "pStats")] [NativeName(NativeNameType.Type, "VmaStatistics*")] VmaStatistics* pStats);

		/// <summary>/// <br/>/// This function is fast to call. For more detailed statistics, see vmaCalculateVirtualBlockStatistics().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetVirtualBlockStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetVirtualBlockStatistics([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "pStats")] [NativeName(NativeNameType.Type, "VmaStatistics*")] VmaStatistics* pStats)
		{
			VmaGetVirtualBlockStatisticsNative(virtualBlock, pStats);
		}

		/// <summary>/// <br/>/// This function is fast to call. For more detailed statistics, see vmaCalculateVirtualBlockStatistics().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaGetVirtualBlockStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaGetVirtualBlockStatistics([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "pStats")] [NativeName(NativeNameType.Type, "VmaStatistics*")] ref VmaStatistics pStats)
		{
			fixed (VmaStatistics* ppStats = &pStats)
			{
				VmaGetVirtualBlockStatisticsNative(virtualBlock, (VmaStatistics*)ppStats);
			}
		}

		/// <summary>
		/// <br/>
		/// This function is slow to call. Use for debugging purposes.<br/>
		/// For less detailed statistics, see vmaGetVirtualBlockStatistics().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "vmaCalculateVirtualBlockStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vmaCalculateVirtualBlockStatistics")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaCalculateVirtualBlockStatisticsNative([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "pStats")] [NativeName(NativeNameType.Type, "VmaDetailedStatistics*")] VmaDetailedStatistics* pStats);

		/// <summary>/// <br/>/// This function is slow to call. Use for debugging purposes.<br/>/// For less detailed statistics, see vmaGetVirtualBlockStatistics().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCalculateVirtualBlockStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaCalculateVirtualBlockStatistics([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "pStats")] [NativeName(NativeNameType.Type, "VmaDetailedStatistics*")] VmaDetailedStatistics* pStats)
		{
			VmaCalculateVirtualBlockStatisticsNative(virtualBlock, pStats);
		}

		/// <summary>/// <br/>/// This function is slow to call. Use for debugging purposes.<br/>/// For less detailed statistics, see vmaGetVirtualBlockStatistics().<br/>/// </summary>		[NativeName(NativeNameType.Func, "vmaCalculateVirtualBlockStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaCalculateVirtualBlockStatistics([NativeName(NativeNameType.Param, "virtualBlock")] [NativeName(NativeNameType.Type, "VmaVirtualBlock")] VmaVirtualBlock virtualBlock, [NativeName(NativeNameType.Param, "pStats")] [NativeName(NativeNameType.Type, "VmaDetailedStatistics*")] ref VmaDetailedStatistics pStats)
		{
			fixed (VmaDetailedStatistics* ppStats = &pStats)
			{
				VmaCalculateVirtualBlockStatisticsNative(virtualBlock, (VmaDetailedStatistics*)ppStats);
			}
		}

		[NativeName(NativeNameType.Func, "vma_aligned_alloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		[LibraryImport(LibName, EntryPoint = "vma_aligned_alloc")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void* VmaAlignedAllocNative([NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] ulong alignment, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size);

		[NativeName(NativeNameType.Func, "vma_aligned_alloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* VmaAlignedAlloc([NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] ulong alignment, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size)
		{
			void* ret = VmaAlignedAllocNative(alignment, size);
			return ret;
		}

		[NativeName(NativeNameType.Func, "vma_aligned_alloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* VmaAlignedAlloc([NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] nuint alignment, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size)
		{
			void* ret = VmaAlignedAllocNative(alignment, size);
			return ret;
		}

		[NativeName(NativeNameType.Func, "vma_aligned_alloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* VmaAlignedAlloc([NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] ulong alignment, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			void* ret = VmaAlignedAllocNative(alignment, size);
			return ret;
		}

		[NativeName(NativeNameType.Func, "vma_aligned_alloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* VmaAlignedAlloc([NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] nuint alignment, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			void* ret = VmaAlignedAllocNative(alignment, size);
			return ret;
		}

		[NativeName(NativeNameType.Func, "vma_aligned_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "vma_aligned_free")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaAlignedFreeNative([NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void*")] void* ptr);

		[NativeName(NativeNameType.Func, "vma_aligned_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaAlignedFree([NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void*")] void* ptr)
		{
			VmaAlignedFreeNative(ptr);
		}

		[NativeName(NativeNameType.Func, "VmaWriteMagicValue")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "VmaWriteMagicValue")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaWriteMagicValueNative([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong offset);

		[NativeName(NativeNameType.Func, "VmaWriteMagicValue")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaWriteMagicValue([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong offset)
		{
			VmaWriteMagicValueNative(pData, offset);
		}

		[NativeName(NativeNameType.Func, "VmaValidateMagicValue")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[LibraryImport(LibName, EntryPoint = "VmaValidateMagicValue")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte VmaValidateMagicValueNative([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const void*")] void* pData, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong offset);

		[NativeName(NativeNameType.Func, "VmaValidateMagicValue")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool VmaValidateMagicValue([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const void*")] void* pData, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong offset)
		{
			byte ret = VmaValidateMagicValueNative(pData, offset);
			return ret != 0;
		}

		/// <summary>
		/// Fills structure with parameters of an example buffer to be used for transfers<br/>
		/// during GPU memory defragmentation.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "VmaFillGpuDefragmentationBufferCreateInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "VmaFillGpuDefragmentationBufferCreateInfo")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaFillGpuDefragmentationBufferCreateInfoNative([NativeName(NativeNameType.Param, "outBufCreateInfo")] [NativeName(NativeNameType.Type, "VkBufferCreateInfo&")] VkBufferCreateInfo* outBufCreateInfo);

		/// <summary>/// Fills structure with parameters of an example buffer to be used for transfers<br/>/// during GPU memory defragmentation.<br/>/// </summary>		[NativeName(NativeNameType.Func, "VmaFillGpuDefragmentationBufferCreateInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaFillGpuDefragmentationBufferCreateInfo([NativeName(NativeNameType.Param, "outBufCreateInfo")] [NativeName(NativeNameType.Type, "VkBufferCreateInfo&")] VkBufferCreateInfo* outBufCreateInfo)
		{
			VmaFillGpuDefragmentationBufferCreateInfoNative(outBufCreateInfo);
		}

		/// <summary>/// Fills structure with parameters of an example buffer to be used for transfers<br/>/// during GPU memory defragmentation.<br/>/// </summary>		[NativeName(NativeNameType.Func, "VmaFillGpuDefragmentationBufferCreateInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaFillGpuDefragmentationBufferCreateInfo([NativeName(NativeNameType.Param, "outBufCreateInfo")] [NativeName(NativeNameType.Type, "VkBufferCreateInfo&")] ref VkBufferCreateInfo outBufCreateInfo)
		{
			fixed (VkBufferCreateInfo* poutBufCreateInfo = &outBufCreateInfo)
			{
				VmaFillGpuDefragmentationBufferCreateInfoNative((VkBufferCreateInfo*)poutBufCreateInfo);
			}
		}

		[NativeName(NativeNameType.Func, "swap")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "swap")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SwapNative([NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage&")] VmaBufferImageUsage* lhs, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage&")] VmaBufferImageUsage* rhs);

		[NativeName(NativeNameType.Func, "swap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Swap([NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage&")] VmaBufferImageUsage* lhs, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage&")] VmaBufferImageUsage* rhs)
		{
			SwapNative(lhs, rhs);
		}

		[NativeName(NativeNameType.Func, "swap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Swap([NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage&")] ref VmaBufferImageUsage lhs, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage&")] VmaBufferImageUsage* rhs)
		{
			fixed (VmaBufferImageUsage* plhs = &lhs)
			{
				SwapNative((VmaBufferImageUsage*)plhs, rhs);
			}
		}

		[NativeName(NativeNameType.Func, "swap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Swap([NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage&")] VmaBufferImageUsage* lhs, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage&")] ref VmaBufferImageUsage rhs)
		{
			fixed (VmaBufferImageUsage* prhs = &rhs)
			{
				SwapNative(lhs, (VmaBufferImageUsage*)prhs);
			}
		}

		[NativeName(NativeNameType.Func, "swap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Swap([NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage&")] ref VmaBufferImageUsage lhs, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage&")] ref VmaBufferImageUsage rhs)
		{
			fixed (VmaBufferImageUsage* plhs = &lhs)
			{
				fixed (VmaBufferImageUsage* prhs = &rhs)
				{
					SwapNative((VmaBufferImageUsage*)plhs, (VmaBufferImageUsage*)prhs);
				}
			}
		}

		/// <summary>
		/// This is the main algorithm that guides the selection of a memory type best for an allocation -<br/>
		/// converts usage to required/preferred/not preferred flags.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "FindMemoryPreferences")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[LibraryImport(LibName, EntryPoint = "FindMemoryPreferences")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte FindMemoryPreferencesNative([NativeName(NativeNameType.Param, "isIntegratedGPU")] [NativeName(NativeNameType.Type, "bool")] byte isIntegratedGPU, [NativeName(NativeNameType.Param, "allocCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo&")] VmaAllocationCreateInfo* allocCreateInfo, [NativeName(NativeNameType.Param, "bufImgUsage")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage")] VmaBufferImageUsage bufImgUsage, [NativeName(NativeNameType.Param, "outRequiredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outRequiredFlags, [NativeName(NativeNameType.Param, "outPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outPreferredFlags, [NativeName(NativeNameType.Param, "outNotPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outNotPreferredFlags);

		/// <summary>/// This is the main algorithm that guides the selection of a memory type best for an allocation -<br/>/// converts usage to required/preferred/not preferred flags.<br/>/// </summary>		[NativeName(NativeNameType.Func, "FindMemoryPreferences")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool FindMemoryPreferences([NativeName(NativeNameType.Param, "isIntegratedGPU")] [NativeName(NativeNameType.Type, "bool")] bool isIntegratedGPU, [NativeName(NativeNameType.Param, "allocCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo&")] VmaAllocationCreateInfo* allocCreateInfo, [NativeName(NativeNameType.Param, "bufImgUsage")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage")] VmaBufferImageUsage bufImgUsage, [NativeName(NativeNameType.Param, "outRequiredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outRequiredFlags, [NativeName(NativeNameType.Param, "outPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outPreferredFlags, [NativeName(NativeNameType.Param, "outNotPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outNotPreferredFlags)
		{
			byte ret = FindMemoryPreferencesNative(isIntegratedGPU ? (byte)1 : (byte)0, allocCreateInfo, bufImgUsage, outRequiredFlags, outPreferredFlags, outNotPreferredFlags);
			return ret != 0;
		}

		/// <summary>/// This is the main algorithm that guides the selection of a memory type best for an allocation -<br/>/// converts usage to required/preferred/not preferred flags.<br/>/// </summary>		[NativeName(NativeNameType.Func, "FindMemoryPreferences")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool FindMemoryPreferences([NativeName(NativeNameType.Param, "isIntegratedGPU")] [NativeName(NativeNameType.Type, "bool")] bool isIntegratedGPU, [NativeName(NativeNameType.Param, "allocCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo&")] ref VmaAllocationCreateInfo allocCreateInfo, [NativeName(NativeNameType.Param, "bufImgUsage")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage")] VmaBufferImageUsage bufImgUsage, [NativeName(NativeNameType.Param, "outRequiredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outRequiredFlags, [NativeName(NativeNameType.Param, "outPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outPreferredFlags, [NativeName(NativeNameType.Param, "outNotPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outNotPreferredFlags)
		{
			fixed (VmaAllocationCreateInfo* pallocCreateInfo = &allocCreateInfo)
			{
				byte ret = FindMemoryPreferencesNative(isIntegratedGPU ? (byte)1 : (byte)0, (VmaAllocationCreateInfo*)pallocCreateInfo, bufImgUsage, outRequiredFlags, outPreferredFlags, outNotPreferredFlags);
				return ret != 0;
			}
		}

		/// <summary>/// This is the main algorithm that guides the selection of a memory type best for an allocation -<br/>/// converts usage to required/preferred/not preferred flags.<br/>/// </summary>		[NativeName(NativeNameType.Func, "FindMemoryPreferences")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool FindMemoryPreferences([NativeName(NativeNameType.Param, "isIntegratedGPU")] [NativeName(NativeNameType.Type, "bool")] bool isIntegratedGPU, [NativeName(NativeNameType.Param, "allocCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo&")] VmaAllocationCreateInfo* allocCreateInfo, [NativeName(NativeNameType.Param, "bufImgUsage")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage")] VmaBufferImageUsage bufImgUsage, [NativeName(NativeNameType.Param, "outRequiredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outRequiredFlags, [NativeName(NativeNameType.Param, "outPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outPreferredFlags, [NativeName(NativeNameType.Param, "outNotPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outNotPreferredFlags)
		{
			fixed (uint* poutRequiredFlags = &outRequiredFlags)
			{
				byte ret = FindMemoryPreferencesNative(isIntegratedGPU ? (byte)1 : (byte)0, allocCreateInfo, bufImgUsage, (uint*)poutRequiredFlags, outPreferredFlags, outNotPreferredFlags);
				return ret != 0;
			}
		}

		/// <summary>/// This is the main algorithm that guides the selection of a memory type best for an allocation -<br/>/// converts usage to required/preferred/not preferred flags.<br/>/// </summary>		[NativeName(NativeNameType.Func, "FindMemoryPreferences")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool FindMemoryPreferences([NativeName(NativeNameType.Param, "isIntegratedGPU")] [NativeName(NativeNameType.Type, "bool")] bool isIntegratedGPU, [NativeName(NativeNameType.Param, "allocCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo&")] ref VmaAllocationCreateInfo allocCreateInfo, [NativeName(NativeNameType.Param, "bufImgUsage")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage")] VmaBufferImageUsage bufImgUsage, [NativeName(NativeNameType.Param, "outRequiredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outRequiredFlags, [NativeName(NativeNameType.Param, "outPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outPreferredFlags, [NativeName(NativeNameType.Param, "outNotPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outNotPreferredFlags)
		{
			fixed (VmaAllocationCreateInfo* pallocCreateInfo = &allocCreateInfo)
			{
				fixed (uint* poutRequiredFlags = &outRequiredFlags)
				{
					byte ret = FindMemoryPreferencesNative(isIntegratedGPU ? (byte)1 : (byte)0, (VmaAllocationCreateInfo*)pallocCreateInfo, bufImgUsage, (uint*)poutRequiredFlags, outPreferredFlags, outNotPreferredFlags);
					return ret != 0;
				}
			}
		}

		/// <summary>/// This is the main algorithm that guides the selection of a memory type best for an allocation -<br/>/// converts usage to required/preferred/not preferred flags.<br/>/// </summary>		[NativeName(NativeNameType.Func, "FindMemoryPreferences")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool FindMemoryPreferences([NativeName(NativeNameType.Param, "isIntegratedGPU")] [NativeName(NativeNameType.Type, "bool")] bool isIntegratedGPU, [NativeName(NativeNameType.Param, "allocCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo&")] VmaAllocationCreateInfo* allocCreateInfo, [NativeName(NativeNameType.Param, "bufImgUsage")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage")] VmaBufferImageUsage bufImgUsage, [NativeName(NativeNameType.Param, "outRequiredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outRequiredFlags, [NativeName(NativeNameType.Param, "outPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outPreferredFlags, [NativeName(NativeNameType.Param, "outNotPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outNotPreferredFlags)
		{
			fixed (uint* poutPreferredFlags = &outPreferredFlags)
			{
				byte ret = FindMemoryPreferencesNative(isIntegratedGPU ? (byte)1 : (byte)0, allocCreateInfo, bufImgUsage, outRequiredFlags, (uint*)poutPreferredFlags, outNotPreferredFlags);
				return ret != 0;
			}
		}

		/// <summary>/// This is the main algorithm that guides the selection of a memory type best for an allocation -<br/>/// converts usage to required/preferred/not preferred flags.<br/>/// </summary>		[NativeName(NativeNameType.Func, "FindMemoryPreferences")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool FindMemoryPreferences([NativeName(NativeNameType.Param, "isIntegratedGPU")] [NativeName(NativeNameType.Type, "bool")] bool isIntegratedGPU, [NativeName(NativeNameType.Param, "allocCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo&")] ref VmaAllocationCreateInfo allocCreateInfo, [NativeName(NativeNameType.Param, "bufImgUsage")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage")] VmaBufferImageUsage bufImgUsage, [NativeName(NativeNameType.Param, "outRequiredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outRequiredFlags, [NativeName(NativeNameType.Param, "outPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outPreferredFlags, [NativeName(NativeNameType.Param, "outNotPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outNotPreferredFlags)
		{
			fixed (VmaAllocationCreateInfo* pallocCreateInfo = &allocCreateInfo)
			{
				fixed (uint* poutPreferredFlags = &outPreferredFlags)
				{
					byte ret = FindMemoryPreferencesNative(isIntegratedGPU ? (byte)1 : (byte)0, (VmaAllocationCreateInfo*)pallocCreateInfo, bufImgUsage, outRequiredFlags, (uint*)poutPreferredFlags, outNotPreferredFlags);
					return ret != 0;
				}
			}
		}

		/// <summary>/// This is the main algorithm that guides the selection of a memory type best for an allocation -<br/>/// converts usage to required/preferred/not preferred flags.<br/>/// </summary>		[NativeName(NativeNameType.Func, "FindMemoryPreferences")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool FindMemoryPreferences([NativeName(NativeNameType.Param, "isIntegratedGPU")] [NativeName(NativeNameType.Type, "bool")] bool isIntegratedGPU, [NativeName(NativeNameType.Param, "allocCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo&")] VmaAllocationCreateInfo* allocCreateInfo, [NativeName(NativeNameType.Param, "bufImgUsage")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage")] VmaBufferImageUsage bufImgUsage, [NativeName(NativeNameType.Param, "outRequiredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outRequiredFlags, [NativeName(NativeNameType.Param, "outPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outPreferredFlags, [NativeName(NativeNameType.Param, "outNotPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outNotPreferredFlags)
		{
			fixed (uint* poutRequiredFlags = &outRequiredFlags)
			{
				fixed (uint* poutPreferredFlags = &outPreferredFlags)
				{
					byte ret = FindMemoryPreferencesNative(isIntegratedGPU ? (byte)1 : (byte)0, allocCreateInfo, bufImgUsage, (uint*)poutRequiredFlags, (uint*)poutPreferredFlags, outNotPreferredFlags);
					return ret != 0;
				}
			}
		}

		/// <summary>/// This is the main algorithm that guides the selection of a memory type best for an allocation -<br/>/// converts usage to required/preferred/not preferred flags.<br/>/// </summary>		[NativeName(NativeNameType.Func, "FindMemoryPreferences")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool FindMemoryPreferences([NativeName(NativeNameType.Param, "isIntegratedGPU")] [NativeName(NativeNameType.Type, "bool")] bool isIntegratedGPU, [NativeName(NativeNameType.Param, "allocCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo&")] ref VmaAllocationCreateInfo allocCreateInfo, [NativeName(NativeNameType.Param, "bufImgUsage")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage")] VmaBufferImageUsage bufImgUsage, [NativeName(NativeNameType.Param, "outRequiredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outRequiredFlags, [NativeName(NativeNameType.Param, "outPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outPreferredFlags, [NativeName(NativeNameType.Param, "outNotPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outNotPreferredFlags)
		{
			fixed (VmaAllocationCreateInfo* pallocCreateInfo = &allocCreateInfo)
			{
				fixed (uint* poutRequiredFlags = &outRequiredFlags)
				{
					fixed (uint* poutPreferredFlags = &outPreferredFlags)
					{
						byte ret = FindMemoryPreferencesNative(isIntegratedGPU ? (byte)1 : (byte)0, (VmaAllocationCreateInfo*)pallocCreateInfo, bufImgUsage, (uint*)poutRequiredFlags, (uint*)poutPreferredFlags, outNotPreferredFlags);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>/// This is the main algorithm that guides the selection of a memory type best for an allocation -<br/>/// converts usage to required/preferred/not preferred flags.<br/>/// </summary>		[NativeName(NativeNameType.Func, "FindMemoryPreferences")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool FindMemoryPreferences([NativeName(NativeNameType.Param, "isIntegratedGPU")] [NativeName(NativeNameType.Type, "bool")] bool isIntegratedGPU, [NativeName(NativeNameType.Param, "allocCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo&")] VmaAllocationCreateInfo* allocCreateInfo, [NativeName(NativeNameType.Param, "bufImgUsage")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage")] VmaBufferImageUsage bufImgUsage, [NativeName(NativeNameType.Param, "outRequiredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outRequiredFlags, [NativeName(NativeNameType.Param, "outPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outPreferredFlags, [NativeName(NativeNameType.Param, "outNotPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outNotPreferredFlags)
		{
			fixed (uint* poutNotPreferredFlags = &outNotPreferredFlags)
			{
				byte ret = FindMemoryPreferencesNative(isIntegratedGPU ? (byte)1 : (byte)0, allocCreateInfo, bufImgUsage, outRequiredFlags, outPreferredFlags, (uint*)poutNotPreferredFlags);
				return ret != 0;
			}
		}

		/// <summary>/// This is the main algorithm that guides the selection of a memory type best for an allocation -<br/>/// converts usage to required/preferred/not preferred flags.<br/>/// </summary>		[NativeName(NativeNameType.Func, "FindMemoryPreferences")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool FindMemoryPreferences([NativeName(NativeNameType.Param, "isIntegratedGPU")] [NativeName(NativeNameType.Type, "bool")] bool isIntegratedGPU, [NativeName(NativeNameType.Param, "allocCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo&")] ref VmaAllocationCreateInfo allocCreateInfo, [NativeName(NativeNameType.Param, "bufImgUsage")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage")] VmaBufferImageUsage bufImgUsage, [NativeName(NativeNameType.Param, "outRequiredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outRequiredFlags, [NativeName(NativeNameType.Param, "outPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outPreferredFlags, [NativeName(NativeNameType.Param, "outNotPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outNotPreferredFlags)
		{
			fixed (VmaAllocationCreateInfo* pallocCreateInfo = &allocCreateInfo)
			{
				fixed (uint* poutNotPreferredFlags = &outNotPreferredFlags)
				{
					byte ret = FindMemoryPreferencesNative(isIntegratedGPU ? (byte)1 : (byte)0, (VmaAllocationCreateInfo*)pallocCreateInfo, bufImgUsage, outRequiredFlags, outPreferredFlags, (uint*)poutNotPreferredFlags);
					return ret != 0;
				}
			}
		}

		/// <summary>/// This is the main algorithm that guides the selection of a memory type best for an allocation -<br/>/// converts usage to required/preferred/not preferred flags.<br/>/// </summary>		[NativeName(NativeNameType.Func, "FindMemoryPreferences")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool FindMemoryPreferences([NativeName(NativeNameType.Param, "isIntegratedGPU")] [NativeName(NativeNameType.Type, "bool")] bool isIntegratedGPU, [NativeName(NativeNameType.Param, "allocCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo&")] VmaAllocationCreateInfo* allocCreateInfo, [NativeName(NativeNameType.Param, "bufImgUsage")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage")] VmaBufferImageUsage bufImgUsage, [NativeName(NativeNameType.Param, "outRequiredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outRequiredFlags, [NativeName(NativeNameType.Param, "outPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outPreferredFlags, [NativeName(NativeNameType.Param, "outNotPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outNotPreferredFlags)
		{
			fixed (uint* poutRequiredFlags = &outRequiredFlags)
			{
				fixed (uint* poutNotPreferredFlags = &outNotPreferredFlags)
				{
					byte ret = FindMemoryPreferencesNative(isIntegratedGPU ? (byte)1 : (byte)0, allocCreateInfo, bufImgUsage, (uint*)poutRequiredFlags, outPreferredFlags, (uint*)poutNotPreferredFlags);
					return ret != 0;
				}
			}
		}

		/// <summary>/// This is the main algorithm that guides the selection of a memory type best for an allocation -<br/>/// converts usage to required/preferred/not preferred flags.<br/>/// </summary>		[NativeName(NativeNameType.Func, "FindMemoryPreferences")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool FindMemoryPreferences([NativeName(NativeNameType.Param, "isIntegratedGPU")] [NativeName(NativeNameType.Type, "bool")] bool isIntegratedGPU, [NativeName(NativeNameType.Param, "allocCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo&")] ref VmaAllocationCreateInfo allocCreateInfo, [NativeName(NativeNameType.Param, "bufImgUsage")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage")] VmaBufferImageUsage bufImgUsage, [NativeName(NativeNameType.Param, "outRequiredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outRequiredFlags, [NativeName(NativeNameType.Param, "outPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outPreferredFlags, [NativeName(NativeNameType.Param, "outNotPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outNotPreferredFlags)
		{
			fixed (VmaAllocationCreateInfo* pallocCreateInfo = &allocCreateInfo)
			{
				fixed (uint* poutRequiredFlags = &outRequiredFlags)
				{
					fixed (uint* poutNotPreferredFlags = &outNotPreferredFlags)
					{
						byte ret = FindMemoryPreferencesNative(isIntegratedGPU ? (byte)1 : (byte)0, (VmaAllocationCreateInfo*)pallocCreateInfo, bufImgUsage, (uint*)poutRequiredFlags, outPreferredFlags, (uint*)poutNotPreferredFlags);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>/// This is the main algorithm that guides the selection of a memory type best for an allocation -<br/>/// converts usage to required/preferred/not preferred flags.<br/>/// </summary>		[NativeName(NativeNameType.Func, "FindMemoryPreferences")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool FindMemoryPreferences([NativeName(NativeNameType.Param, "isIntegratedGPU")] [NativeName(NativeNameType.Type, "bool")] bool isIntegratedGPU, [NativeName(NativeNameType.Param, "allocCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo&")] VmaAllocationCreateInfo* allocCreateInfo, [NativeName(NativeNameType.Param, "bufImgUsage")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage")] VmaBufferImageUsage bufImgUsage, [NativeName(NativeNameType.Param, "outRequiredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outRequiredFlags, [NativeName(NativeNameType.Param, "outPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outPreferredFlags, [NativeName(NativeNameType.Param, "outNotPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outNotPreferredFlags)
		{
			fixed (uint* poutPreferredFlags = &outPreferredFlags)
			{
				fixed (uint* poutNotPreferredFlags = &outNotPreferredFlags)
				{
					byte ret = FindMemoryPreferencesNative(isIntegratedGPU ? (byte)1 : (byte)0, allocCreateInfo, bufImgUsage, outRequiredFlags, (uint*)poutPreferredFlags, (uint*)poutNotPreferredFlags);
					return ret != 0;
				}
			}
		}

		/// <summary>/// This is the main algorithm that guides the selection of a memory type best for an allocation -<br/>/// converts usage to required/preferred/not preferred flags.<br/>/// </summary>		[NativeName(NativeNameType.Func, "FindMemoryPreferences")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool FindMemoryPreferences([NativeName(NativeNameType.Param, "isIntegratedGPU")] [NativeName(NativeNameType.Type, "bool")] bool isIntegratedGPU, [NativeName(NativeNameType.Param, "allocCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo&")] ref VmaAllocationCreateInfo allocCreateInfo, [NativeName(NativeNameType.Param, "bufImgUsage")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage")] VmaBufferImageUsage bufImgUsage, [NativeName(NativeNameType.Param, "outRequiredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] uint* outRequiredFlags, [NativeName(NativeNameType.Param, "outPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outPreferredFlags, [NativeName(NativeNameType.Param, "outNotPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outNotPreferredFlags)
		{
			fixed (VmaAllocationCreateInfo* pallocCreateInfo = &allocCreateInfo)
			{
				fixed (uint* poutPreferredFlags = &outPreferredFlags)
				{
					fixed (uint* poutNotPreferredFlags = &outNotPreferredFlags)
					{
						byte ret = FindMemoryPreferencesNative(isIntegratedGPU ? (byte)1 : (byte)0, (VmaAllocationCreateInfo*)pallocCreateInfo, bufImgUsage, outRequiredFlags, (uint*)poutPreferredFlags, (uint*)poutNotPreferredFlags);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>/// This is the main algorithm that guides the selection of a memory type best for an allocation -<br/>/// converts usage to required/preferred/not preferred flags.<br/>/// </summary>		[NativeName(NativeNameType.Func, "FindMemoryPreferences")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool FindMemoryPreferences([NativeName(NativeNameType.Param, "isIntegratedGPU")] [NativeName(NativeNameType.Type, "bool")] bool isIntegratedGPU, [NativeName(NativeNameType.Param, "allocCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo&")] VmaAllocationCreateInfo* allocCreateInfo, [NativeName(NativeNameType.Param, "bufImgUsage")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage")] VmaBufferImageUsage bufImgUsage, [NativeName(NativeNameType.Param, "outRequiredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outRequiredFlags, [NativeName(NativeNameType.Param, "outPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outPreferredFlags, [NativeName(NativeNameType.Param, "outNotPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outNotPreferredFlags)
		{
			fixed (uint* poutRequiredFlags = &outRequiredFlags)
			{
				fixed (uint* poutPreferredFlags = &outPreferredFlags)
				{
					fixed (uint* poutNotPreferredFlags = &outNotPreferredFlags)
					{
						byte ret = FindMemoryPreferencesNative(isIntegratedGPU ? (byte)1 : (byte)0, allocCreateInfo, bufImgUsage, (uint*)poutRequiredFlags, (uint*)poutPreferredFlags, (uint*)poutNotPreferredFlags);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>/// This is the main algorithm that guides the selection of a memory type best for an allocation -<br/>/// converts usage to required/preferred/not preferred flags.<br/>/// </summary>		[NativeName(NativeNameType.Func, "FindMemoryPreferences")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool FindMemoryPreferences([NativeName(NativeNameType.Param, "isIntegratedGPU")] [NativeName(NativeNameType.Type, "bool")] bool isIntegratedGPU, [NativeName(NativeNameType.Param, "allocCreateInfo")] [NativeName(NativeNameType.Type, "const VmaAllocationCreateInfo&")] ref VmaAllocationCreateInfo allocCreateInfo, [NativeName(NativeNameType.Param, "bufImgUsage")] [NativeName(NativeNameType.Type, "VmaBufferImageUsage")] VmaBufferImageUsage bufImgUsage, [NativeName(NativeNameType.Param, "outRequiredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outRequiredFlags, [NativeName(NativeNameType.Param, "outPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outPreferredFlags, [NativeName(NativeNameType.Param, "outNotPreferredFlags")] [NativeName(NativeNameType.Type, "VkMemoryPropertyFlags&")] ref uint outNotPreferredFlags)
		{
			fixed (VmaAllocationCreateInfo* pallocCreateInfo = &allocCreateInfo)
			{
				fixed (uint* poutRequiredFlags = &outRequiredFlags)
				{
					fixed (uint* poutPreferredFlags = &outPreferredFlags)
					{
						fixed (uint* poutNotPreferredFlags = &outNotPreferredFlags)
						{
							byte ret = FindMemoryPreferencesNative(isIntegratedGPU ? (byte)1 : (byte)0, (VmaAllocationCreateInfo*)pallocCreateInfo, bufImgUsage, (uint*)poutRequiredFlags, (uint*)poutPreferredFlags, (uint*)poutNotPreferredFlags);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// /////////////////////////////////////////////////////////////////////////////<br/>
		/// Memory allocation<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "VmaMalloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		[LibraryImport(LibName, EntryPoint = "VmaMalloc")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void* VmaMallocNative([NativeName(NativeNameType.Param, "pAllocationCallbacks")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] VkAllocationCallbacks* pAllocationCallbacks, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] ulong alignment);

		/// <summary>/// /////////////////////////////////////////////////////////////////////////////<br/>/// Memory allocation<br/>/// </summary>		[NativeName(NativeNameType.Func, "VmaMalloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* VmaMalloc([NativeName(NativeNameType.Param, "pAllocationCallbacks")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] VkAllocationCallbacks* pAllocationCallbacks, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] ulong alignment)
		{
			void* ret = VmaMallocNative(pAllocationCallbacks, size, alignment);
			return ret;
		}

		/// <summary>/// /////////////////////////////////////////////////////////////////////////////<br/>/// Memory allocation<br/>/// </summary>		[NativeName(NativeNameType.Func, "VmaMalloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* VmaMalloc([NativeName(NativeNameType.Param, "pAllocationCallbacks")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] ref VkAllocationCallbacks pAllocationCallbacks, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] ulong alignment)
		{
			fixed (VkAllocationCallbacks* ppAllocationCallbacks = &pAllocationCallbacks)
			{
				void* ret = VmaMallocNative((VkAllocationCallbacks*)ppAllocationCallbacks, size, alignment);
				return ret;
			}
		}

		/// <summary>/// /////////////////////////////////////////////////////////////////////////////<br/>/// Memory allocation<br/>/// </summary>		[NativeName(NativeNameType.Func, "VmaMalloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* VmaMalloc([NativeName(NativeNameType.Param, "pAllocationCallbacks")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] VkAllocationCallbacks* pAllocationCallbacks, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] ulong alignment)
		{
			void* ret = VmaMallocNative(pAllocationCallbacks, size, alignment);
			return ret;
		}

		/// <summary>/// /////////////////////////////////////////////////////////////////////////////<br/>/// Memory allocation<br/>/// </summary>		[NativeName(NativeNameType.Func, "VmaMalloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* VmaMalloc([NativeName(NativeNameType.Param, "pAllocationCallbacks")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] ref VkAllocationCallbacks pAllocationCallbacks, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] ulong alignment)
		{
			fixed (VkAllocationCallbacks* ppAllocationCallbacks = &pAllocationCallbacks)
			{
				void* ret = VmaMallocNative((VkAllocationCallbacks*)ppAllocationCallbacks, size, alignment);
				return ret;
			}
		}

		/// <summary>/// /////////////////////////////////////////////////////////////////////////////<br/>/// Memory allocation<br/>/// </summary>		[NativeName(NativeNameType.Func, "VmaMalloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* VmaMalloc([NativeName(NativeNameType.Param, "pAllocationCallbacks")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] VkAllocationCallbacks* pAllocationCallbacks, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] nuint alignment)
		{
			void* ret = VmaMallocNative(pAllocationCallbacks, size, alignment);
			return ret;
		}

		/// <summary>/// /////////////////////////////////////////////////////////////////////////////<br/>/// Memory allocation<br/>/// </summary>		[NativeName(NativeNameType.Func, "VmaMalloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* VmaMalloc([NativeName(NativeNameType.Param, "pAllocationCallbacks")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] ref VkAllocationCallbacks pAllocationCallbacks, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] nuint alignment)
		{
			fixed (VkAllocationCallbacks* ppAllocationCallbacks = &pAllocationCallbacks)
			{
				void* ret = VmaMallocNative((VkAllocationCallbacks*)ppAllocationCallbacks, size, alignment);
				return ret;
			}
		}

		/// <summary>/// /////////////////////////////////////////////////////////////////////////////<br/>/// Memory allocation<br/>/// </summary>		[NativeName(NativeNameType.Func, "VmaMalloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* VmaMalloc([NativeName(NativeNameType.Param, "pAllocationCallbacks")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] VkAllocationCallbacks* pAllocationCallbacks, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] nuint alignment)
		{
			void* ret = VmaMallocNative(pAllocationCallbacks, size, alignment);
			return ret;
		}

		/// <summary>/// /////////////////////////////////////////////////////////////////////////////<br/>/// Memory allocation<br/>/// </summary>		[NativeName(NativeNameType.Func, "VmaMalloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* VmaMalloc([NativeName(NativeNameType.Param, "pAllocationCallbacks")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] ref VkAllocationCallbacks pAllocationCallbacks, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] nuint alignment)
		{
			fixed (VkAllocationCallbacks* ppAllocationCallbacks = &pAllocationCallbacks)
			{
				void* ret = VmaMallocNative((VkAllocationCallbacks*)ppAllocationCallbacks, size, alignment);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "VmaFree")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "VmaFree")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaFreeNative([NativeName(NativeNameType.Param, "pAllocationCallbacks")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] VkAllocationCallbacks* pAllocationCallbacks, [NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void*")] void* ptr);

		[NativeName(NativeNameType.Func, "VmaFree")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaFree([NativeName(NativeNameType.Param, "pAllocationCallbacks")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] VkAllocationCallbacks* pAllocationCallbacks, [NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void*")] void* ptr)
		{
			VmaFreeNative(pAllocationCallbacks, ptr);
		}

		[NativeName(NativeNameType.Func, "VmaFree")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaFree([NativeName(NativeNameType.Param, "pAllocationCallbacks")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] ref VkAllocationCallbacks pAllocationCallbacks, [NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void*")] void* ptr)
		{
			fixed (VkAllocationCallbacks* ppAllocationCallbacks = &pAllocationCallbacks)
			{
				VmaFreeNative((VkAllocationCallbacks*)ppAllocationCallbacks, ptr);
			}
		}

		[NativeName(NativeNameType.Func, "VmaCreateStringCopy")]
		[return: NativeName(NativeNameType.Type, "char*")]
		[LibraryImport(LibName, EntryPoint = "VmaCreateStringCopy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* VmaCreateStringCopyNative([NativeName(NativeNameType.Param, "allocs")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] VkAllocationCallbacks* allocs, [NativeName(NativeNameType.Param, "srcStr")] [NativeName(NativeNameType.Type, "const char*")] byte* srcStr);

		[NativeName(NativeNameType.Func, "VmaCreateStringCopy")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* VmaCreateStringCopy([NativeName(NativeNameType.Param, "allocs")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] VkAllocationCallbacks* allocs, [NativeName(NativeNameType.Param, "srcStr")] [NativeName(NativeNameType.Type, "const char*")] byte* srcStr)
		{
			byte* ret = VmaCreateStringCopyNative(allocs, srcStr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "VmaCreateStringCopy")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string VmaCreateStringCopyS([NativeName(NativeNameType.Param, "allocs")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] VkAllocationCallbacks* allocs, [NativeName(NativeNameType.Param, "srcStr")] [NativeName(NativeNameType.Type, "const char*")] byte* srcStr)
		{
			string ret = Utils.DecodeStringUTF8(VmaCreateStringCopyNative(allocs, srcStr));
			return ret;
		}

		[NativeName(NativeNameType.Func, "VmaCreateStringCopy")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* VmaCreateStringCopy([NativeName(NativeNameType.Param, "allocs")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] ref VkAllocationCallbacks allocs, [NativeName(NativeNameType.Param, "srcStr")] [NativeName(NativeNameType.Type, "const char*")] byte* srcStr)
		{
			fixed (VkAllocationCallbacks* pallocs = &allocs)
			{
				byte* ret = VmaCreateStringCopyNative((VkAllocationCallbacks*)pallocs, srcStr);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "VmaCreateStringCopy")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string VmaCreateStringCopyS([NativeName(NativeNameType.Param, "allocs")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] ref VkAllocationCallbacks allocs, [NativeName(NativeNameType.Param, "srcStr")] [NativeName(NativeNameType.Type, "const char*")] byte* srcStr)
		{
			fixed (VkAllocationCallbacks* pallocs = &allocs)
			{
				string ret = Utils.DecodeStringUTF8(VmaCreateStringCopyNative((VkAllocationCallbacks*)pallocs, srcStr));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "VmaCreateStringCopy")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* VmaCreateStringCopy([NativeName(NativeNameType.Param, "allocs")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] VkAllocationCallbacks* allocs, [NativeName(NativeNameType.Param, "srcStr")] [NativeName(NativeNameType.Type, "const char*")] ref byte srcStr)
		{
			fixed (byte* psrcStr = &srcStr)
			{
				byte* ret = VmaCreateStringCopyNative(allocs, (byte*)psrcStr);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "VmaCreateStringCopy")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string VmaCreateStringCopyS([NativeName(NativeNameType.Param, "allocs")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] VkAllocationCallbacks* allocs, [NativeName(NativeNameType.Param, "srcStr")] [NativeName(NativeNameType.Type, "const char*")] ref byte srcStr)
		{
			fixed (byte* psrcStr = &srcStr)
			{
				string ret = Utils.DecodeStringUTF8(VmaCreateStringCopyNative(allocs, (byte*)psrcStr));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "VmaCreateStringCopy")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* VmaCreateStringCopy([NativeName(NativeNameType.Param, "allocs")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] VkAllocationCallbacks* allocs, [NativeName(NativeNameType.Param, "srcStr")] [NativeName(NativeNameType.Type, "const char*")] string srcStr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (srcStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(srcStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(srcStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = VmaCreateStringCopyNative(allocs, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "VmaCreateStringCopy")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string VmaCreateStringCopyS([NativeName(NativeNameType.Param, "allocs")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] VkAllocationCallbacks* allocs, [NativeName(NativeNameType.Param, "srcStr")] [NativeName(NativeNameType.Type, "const char*")] string srcStr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (srcStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(srcStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(srcStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(VmaCreateStringCopyNative(allocs, pStr0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "VmaCreateStringCopy")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* VmaCreateStringCopy([NativeName(NativeNameType.Param, "allocs")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] ref VkAllocationCallbacks allocs, [NativeName(NativeNameType.Param, "srcStr")] [NativeName(NativeNameType.Type, "const char*")] ref byte srcStr)
		{
			fixed (VkAllocationCallbacks* pallocs = &allocs)
			{
				fixed (byte* psrcStr = &srcStr)
				{
					byte* ret = VmaCreateStringCopyNative((VkAllocationCallbacks*)pallocs, (byte*)psrcStr);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "VmaCreateStringCopy")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string VmaCreateStringCopyS([NativeName(NativeNameType.Param, "allocs")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] ref VkAllocationCallbacks allocs, [NativeName(NativeNameType.Param, "srcStr")] [NativeName(NativeNameType.Type, "const char*")] ref byte srcStr)
		{
			fixed (VkAllocationCallbacks* pallocs = &allocs)
			{
				fixed (byte* psrcStr = &srcStr)
				{
					string ret = Utils.DecodeStringUTF8(VmaCreateStringCopyNative((VkAllocationCallbacks*)pallocs, (byte*)psrcStr));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "VmaCreateStringCopy")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* VmaCreateStringCopy([NativeName(NativeNameType.Param, "allocs")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] ref VkAllocationCallbacks allocs, [NativeName(NativeNameType.Param, "srcStr")] [NativeName(NativeNameType.Type, "const char*")] string srcStr)
		{
			fixed (VkAllocationCallbacks* pallocs = &allocs)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (srcStr != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(srcStr);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(srcStr, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = VmaCreateStringCopyNative((VkAllocationCallbacks*)pallocs, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "VmaCreateStringCopy")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string VmaCreateStringCopyS([NativeName(NativeNameType.Param, "allocs")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] ref VkAllocationCallbacks allocs, [NativeName(NativeNameType.Param, "srcStr")] [NativeName(NativeNameType.Type, "const char*")] string srcStr)
		{
			fixed (VkAllocationCallbacks* pallocs = &allocs)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (srcStr != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(srcStr);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(srcStr, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(VmaCreateStringCopyNative((VkAllocationCallbacks*)pallocs, pStr0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "VmaFreeString")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "VmaFreeString")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaFreeStringNative([NativeName(NativeNameType.Param, "allocs")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] VkAllocationCallbacks* allocs, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char*")] byte* str);

		[NativeName(NativeNameType.Func, "VmaFreeString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaFreeString([NativeName(NativeNameType.Param, "allocs")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] VkAllocationCallbacks* allocs, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char*")] byte* str)
		{
			VmaFreeStringNative(allocs, str);
		}

		[NativeName(NativeNameType.Func, "VmaFreeString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaFreeString([NativeName(NativeNameType.Param, "allocs")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] ref VkAllocationCallbacks allocs, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char*")] byte* str)
		{
			fixed (VkAllocationCallbacks* pallocs = &allocs)
			{
				VmaFreeStringNative((VkAllocationCallbacks*)pallocs, str);
			}
		}

		[NativeName(NativeNameType.Func, "VmaFreeString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaFreeString([NativeName(NativeNameType.Param, "allocs")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] VkAllocationCallbacks* allocs, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char*")] ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				VmaFreeStringNative(allocs, (byte*)pstr);
			}
		}

		[NativeName(NativeNameType.Func, "VmaFreeString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaFreeString([NativeName(NativeNameType.Param, "allocs")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] VkAllocationCallbacks* allocs, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char*")] ref string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			VmaFreeStringNative(allocs, pStr0);
			str = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[NativeName(NativeNameType.Func, "VmaFreeString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaFreeString([NativeName(NativeNameType.Param, "allocs")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] ref VkAllocationCallbacks allocs, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char*")] ref byte str)
		{
			fixed (VkAllocationCallbacks* pallocs = &allocs)
			{
				fixed (byte* pstr = &str)
				{
					VmaFreeStringNative((VkAllocationCallbacks*)pallocs, (byte*)pstr);
				}
			}
		}

		[NativeName(NativeNameType.Func, "VmaFreeString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaFreeString([NativeName(NativeNameType.Param, "allocs")] [NativeName(NativeNameType.Type, "const VkAllocationCallbacks*")] ref VkAllocationCallbacks allocs, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char*")] ref string str)
		{
			fixed (VkAllocationCallbacks* pallocs = &allocs)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				VmaFreeStringNative((VkAllocationCallbacks*)pallocs, pStr0);
				str = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[NativeName(NativeNameType.Func, "VmaClearStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "VmaClearStatistics")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaClearStatisticsNative([NativeName(NativeNameType.Param, "outStats")] [NativeName(NativeNameType.Type, "VmaStatistics&")] VmaStatistics* outStats);

		[NativeName(NativeNameType.Func, "VmaClearStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaClearStatistics([NativeName(NativeNameType.Param, "outStats")] [NativeName(NativeNameType.Type, "VmaStatistics&")] VmaStatistics* outStats)
		{
			VmaClearStatisticsNative(outStats);
		}

		[NativeName(NativeNameType.Func, "VmaClearStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaClearStatistics([NativeName(NativeNameType.Param, "outStats")] [NativeName(NativeNameType.Type, "VmaStatistics&")] ref VmaStatistics outStats)
		{
			fixed (VmaStatistics* poutStats = &outStats)
			{
				VmaClearStatisticsNative((VmaStatistics*)poutStats);
			}
		}

		[NativeName(NativeNameType.Func, "VmaAddStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "VmaAddStatistics")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaAddStatisticsNative([NativeName(NativeNameType.Param, "inoutStats")] [NativeName(NativeNameType.Type, "VmaStatistics&")] VmaStatistics* inoutStats, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const VmaStatistics&")] VmaStatistics* src);

		[NativeName(NativeNameType.Func, "VmaAddStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaAddStatistics([NativeName(NativeNameType.Param, "inoutStats")] [NativeName(NativeNameType.Type, "VmaStatistics&")] VmaStatistics* inoutStats, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const VmaStatistics&")] VmaStatistics* src)
		{
			VmaAddStatisticsNative(inoutStats, src);
		}

		[NativeName(NativeNameType.Func, "VmaAddStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaAddStatistics([NativeName(NativeNameType.Param, "inoutStats")] [NativeName(NativeNameType.Type, "VmaStatistics&")] ref VmaStatistics inoutStats, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const VmaStatistics&")] VmaStatistics* src)
		{
			fixed (VmaStatistics* pinoutStats = &inoutStats)
			{
				VmaAddStatisticsNative((VmaStatistics*)pinoutStats, src);
			}
		}

		[NativeName(NativeNameType.Func, "VmaAddStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaAddStatistics([NativeName(NativeNameType.Param, "inoutStats")] [NativeName(NativeNameType.Type, "VmaStatistics&")] VmaStatistics* inoutStats, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const VmaStatistics&")] ref VmaStatistics src)
		{
			fixed (VmaStatistics* psrc = &src)
			{
				VmaAddStatisticsNative(inoutStats, (VmaStatistics*)psrc);
			}
		}

		[NativeName(NativeNameType.Func, "VmaAddStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaAddStatistics([NativeName(NativeNameType.Param, "inoutStats")] [NativeName(NativeNameType.Type, "VmaStatistics&")] ref VmaStatistics inoutStats, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const VmaStatistics&")] ref VmaStatistics src)
		{
			fixed (VmaStatistics* pinoutStats = &inoutStats)
			{
				fixed (VmaStatistics* psrc = &src)
				{
					VmaAddStatisticsNative((VmaStatistics*)pinoutStats, (VmaStatistics*)psrc);
				}
			}
		}

		[NativeName(NativeNameType.Func, "VmaClearDetailedStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "VmaClearDetailedStatistics")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaClearDetailedStatisticsNative([NativeName(NativeNameType.Param, "outStats")] [NativeName(NativeNameType.Type, "VmaDetailedStatistics&")] VmaDetailedStatistics* outStats);

		[NativeName(NativeNameType.Func, "VmaClearDetailedStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaClearDetailedStatistics([NativeName(NativeNameType.Param, "outStats")] [NativeName(NativeNameType.Type, "VmaDetailedStatistics&")] VmaDetailedStatistics* outStats)
		{
			VmaClearDetailedStatisticsNative(outStats);
		}

		[NativeName(NativeNameType.Func, "VmaClearDetailedStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaClearDetailedStatistics([NativeName(NativeNameType.Param, "outStats")] [NativeName(NativeNameType.Type, "VmaDetailedStatistics&")] ref VmaDetailedStatistics outStats)
		{
			fixed (VmaDetailedStatistics* poutStats = &outStats)
			{
				VmaClearDetailedStatisticsNative((VmaDetailedStatistics*)poutStats);
			}
		}

		[NativeName(NativeNameType.Func, "VmaAddDetailedStatisticsAllocation")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "VmaAddDetailedStatisticsAllocation")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaAddDetailedStatisticsAllocationNative([NativeName(NativeNameType.Param, "inoutStats")] [NativeName(NativeNameType.Type, "VmaDetailedStatistics&")] VmaDetailedStatistics* inoutStats, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong size);

		[NativeName(NativeNameType.Func, "VmaAddDetailedStatisticsAllocation")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaAddDetailedStatisticsAllocation([NativeName(NativeNameType.Param, "inoutStats")] [NativeName(NativeNameType.Type, "VmaDetailedStatistics&")] VmaDetailedStatistics* inoutStats, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong size)
		{
			VmaAddDetailedStatisticsAllocationNative(inoutStats, size);
		}

		[NativeName(NativeNameType.Func, "VmaAddDetailedStatisticsAllocation")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaAddDetailedStatisticsAllocation([NativeName(NativeNameType.Param, "inoutStats")] [NativeName(NativeNameType.Type, "VmaDetailedStatistics&")] ref VmaDetailedStatistics inoutStats, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong size)
		{
			fixed (VmaDetailedStatistics* pinoutStats = &inoutStats)
			{
				VmaAddDetailedStatisticsAllocationNative((VmaDetailedStatistics*)pinoutStats, size);
			}
		}

		[NativeName(NativeNameType.Func, "VmaAddDetailedStatisticsUnusedRange")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "VmaAddDetailedStatisticsUnusedRange")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaAddDetailedStatisticsUnusedRangeNative([NativeName(NativeNameType.Param, "inoutStats")] [NativeName(NativeNameType.Type, "VmaDetailedStatistics&")] VmaDetailedStatistics* inoutStats, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong size);

		[NativeName(NativeNameType.Func, "VmaAddDetailedStatisticsUnusedRange")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaAddDetailedStatisticsUnusedRange([NativeName(NativeNameType.Param, "inoutStats")] [NativeName(NativeNameType.Type, "VmaDetailedStatistics&")] VmaDetailedStatistics* inoutStats, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong size)
		{
			VmaAddDetailedStatisticsUnusedRangeNative(inoutStats, size);
		}

		[NativeName(NativeNameType.Func, "VmaAddDetailedStatisticsUnusedRange")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaAddDetailedStatisticsUnusedRange([NativeName(NativeNameType.Param, "inoutStats")] [NativeName(NativeNameType.Type, "VmaDetailedStatistics&")] ref VmaDetailedStatistics inoutStats, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "VkDeviceSize")] ulong size)
		{
			fixed (VmaDetailedStatistics* pinoutStats = &inoutStats)
			{
				VmaAddDetailedStatisticsUnusedRangeNative((VmaDetailedStatistics*)pinoutStats, size);
			}
		}

		[NativeName(NativeNameType.Func, "VmaAddDetailedStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "VmaAddDetailedStatistics")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaAddDetailedStatisticsNative([NativeName(NativeNameType.Param, "inoutStats")] [NativeName(NativeNameType.Type, "VmaDetailedStatistics&")] VmaDetailedStatistics* inoutStats, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const VmaDetailedStatistics&")] VmaDetailedStatistics* src);

		[NativeName(NativeNameType.Func, "VmaAddDetailedStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaAddDetailedStatistics([NativeName(NativeNameType.Param, "inoutStats")] [NativeName(NativeNameType.Type, "VmaDetailedStatistics&")] VmaDetailedStatistics* inoutStats, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const VmaDetailedStatistics&")] VmaDetailedStatistics* src)
		{
			VmaAddDetailedStatisticsNative(inoutStats, src);
		}

		[NativeName(NativeNameType.Func, "VmaAddDetailedStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaAddDetailedStatistics([NativeName(NativeNameType.Param, "inoutStats")] [NativeName(NativeNameType.Type, "VmaDetailedStatistics&")] ref VmaDetailedStatistics inoutStats, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const VmaDetailedStatistics&")] VmaDetailedStatistics* src)
		{
			fixed (VmaDetailedStatistics* pinoutStats = &inoutStats)
			{
				VmaAddDetailedStatisticsNative((VmaDetailedStatistics*)pinoutStats, src);
			}
		}

		[NativeName(NativeNameType.Func, "VmaAddDetailedStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaAddDetailedStatistics([NativeName(NativeNameType.Param, "inoutStats")] [NativeName(NativeNameType.Type, "VmaDetailedStatistics&")] VmaDetailedStatistics* inoutStats, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const VmaDetailedStatistics&")] ref VmaDetailedStatistics src)
		{
			fixed (VmaDetailedStatistics* psrc = &src)
			{
				VmaAddDetailedStatisticsNative(inoutStats, (VmaDetailedStatistics*)psrc);
			}
		}

		[NativeName(NativeNameType.Func, "VmaAddDetailedStatistics")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaAddDetailedStatistics([NativeName(NativeNameType.Param, "inoutStats")] [NativeName(NativeNameType.Type, "VmaDetailedStatistics&")] ref VmaDetailedStatistics inoutStats, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const VmaDetailedStatistics&")] ref VmaDetailedStatistics src)
		{
			fixed (VmaDetailedStatistics* pinoutStats = &inoutStats)
			{
				fixed (VmaDetailedStatistics* psrc = &src)
				{
					VmaAddDetailedStatisticsNative((VmaDetailedStatistics*)pinoutStats, (VmaDetailedStatistics*)psrc);
				}
			}
		}

		[NativeName(NativeNameType.Func, "VmaMalloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		[LibraryImport(LibName, EntryPoint = "VmaMalloc")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void* VmaMallocNative([NativeName(NativeNameType.Param, "hAllocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator hAllocator, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] ulong alignment);

		/// <summary>/// /////////////////////////////////////////////////////////////////////////////<br/>/// Memory allocation<br/>/// </summary>		[NativeName(NativeNameType.Func, "VmaMalloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* VmaMalloc([NativeName(NativeNameType.Param, "hAllocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator hAllocator, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] ulong alignment)
		{
			void* ret = VmaMallocNative(hAllocator, size, alignment);
			return ret;
		}

		/// <summary>/// /////////////////////////////////////////////////////////////////////////////<br/>/// Memory allocation<br/>/// </summary>		[NativeName(NativeNameType.Func, "VmaMalloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* VmaMalloc([NativeName(NativeNameType.Param, "hAllocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator hAllocator, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] ulong alignment)
		{
			void* ret = VmaMallocNative(hAllocator, size, alignment);
			return ret;
		}

		/// <summary>/// /////////////////////////////////////////////////////////////////////////////<br/>/// Memory allocation<br/>/// </summary>		[NativeName(NativeNameType.Func, "VmaMalloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* VmaMalloc([NativeName(NativeNameType.Param, "hAllocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator hAllocator, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] nuint alignment)
		{
			void* ret = VmaMallocNative(hAllocator, size, alignment);
			return ret;
		}

		/// <summary>/// /////////////////////////////////////////////////////////////////////////////<br/>/// Memory allocation<br/>/// </summary>		[NativeName(NativeNameType.Func, "VmaMalloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* VmaMalloc([NativeName(NativeNameType.Param, "hAllocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator hAllocator, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] nuint alignment)
		{
			void* ret = VmaMallocNative(hAllocator, size, alignment);
			return ret;
		}

		[NativeName(NativeNameType.Func, "VmaFree")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "VmaFree")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void VmaFreeNative([NativeName(NativeNameType.Param, "hAllocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator hAllocator, [NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void*")] void* ptr);

		[NativeName(NativeNameType.Func, "VmaFree")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VmaFree([NativeName(NativeNameType.Param, "hAllocator")] [NativeName(NativeNameType.Type, "VmaAllocator")] VmaAllocator hAllocator, [NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void*")] void* ptr)
		{
			VmaFreeNative(hAllocator, ptr);
		}

	}
}
