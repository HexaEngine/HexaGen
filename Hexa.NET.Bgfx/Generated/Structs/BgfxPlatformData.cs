// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Bgfx
{
	/// <summary>
	/// Platform data.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "bgfx_platform_data_s")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct BgfxPlatformData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ndt")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* Ndt;

		/// <summary>
		/// Native window handle. If `NULL`, bgfx will create a headless<br/>
		/// context/device, provided the rendering API supports it.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "nwh")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* Nwh;

		/// <summary>
		/// GL context, D3D device, or Vulkan device. If `NULL`, bgfx<br/>
		/// will create context/device.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "context")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* Context;

		/// <summary>
		/// GL back-buffer, or D3D render target view. If `NULL` bgfx will<br/>
		/// create back-buffer color surface.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "backBuffer")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* BackBuffer;

		/// <summary>
		/// Backbuffer depth/stencil. If `NULL`, bgfx will create a back-buffer<br/>
		/// depth/stencil surface.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "backBufferDS")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* BackBufferDS;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "bgfx_native_window_handle_type_t")]
		public BgfxNativeWindowHandleType Type;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe BgfxPlatformData(void* ndt = default, void* nwh = default, void* context = default, void* backBuffer = default, void* backBufferDS = default, BgfxNativeWindowHandleType type = default)
		{
			Ndt = ndt;
			Nwh = nwh;
			Context = context;
			BackBuffer = backBuffer;
			BackBufferDS = backBufferDS;
			Type = type;
		}


	}

}
