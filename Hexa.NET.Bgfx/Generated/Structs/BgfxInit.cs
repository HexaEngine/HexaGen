// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Bgfx
{
	/// <summary>
	/// Initialization parameters used by `bgfx::init`.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "bgfx_init_s")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct BgfxInit
	{
		/// <summary>
		/// Select rendering backend. When set to RendererType::Count<br/>
		/// a default rendering backend will be selected appropriate to the platform.<br/>
		/// See: `bgfx::RendererType`<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "bgfx_renderer_type_t")]
		public BgfxRendererType Type;

		/// <summary>
		/// Vendor PCI ID. If set to `BGFX_PCI_ID_NONE`, discrete and integrated<br/>
		/// GPUs will be prioritised.<br/>
		/// - `BGFX_PCI_ID_NONE` - Autoselect adapter.<br/>
		/// - `BGFX_PCI_ID_SOFTWARE_RASTERIZER` - Software rasterizer.<br/>
		/// - `BGFX_PCI_ID_AMD` - AMD adapter.<br/>
		/// - `BGFX_PCI_ID_APPLE` - Apple adapter.<br/>
		/// - `BGFX_PCI_ID_INTEL` - Intel adapter.<br/>
		/// - `BGFX_PCI_ID_NVIDIA` - NVIDIA adapter.<br/>
		/// - `BGFX_PCI_ID_MICROSOFT` - Microsoft adapter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "vendorId")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort VendorId;

		/// <summary>
		/// Device ID. If set to 0 it will select first device, or device with<br/>
		/// matching ID.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "deviceId")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort DeviceId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "capabilities")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong Capabilities;

		/// <summary>
		/// Capabilities initialization mask (default: UINT64_MAX). <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "debug")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Debug;

		/// <summary>
		/// Enable device for debugging.             <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "profile")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Profile;

		/// <summary>
		/// Enable device for profiling.             <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "platformData")]
		[NativeName(NativeNameType.Type, "bgfx_platform_data_t")]
		public BgfxPlatformData PlatformData;

		/// <summary>
		/// Platform data.                           <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "resolution")]
		[NativeName(NativeNameType.Type, "bgfx_resolution_t")]
		public BgfxResolution Resolution;

		/// <summary>
		/// Backbuffer resolution and reset parameters. See: `bgfx::Resolution`. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "limits")]
		[NativeName(NativeNameType.Type, "bgfx_init_limits_t")]
		public BgfxInitLimits Limits;

		/// <summary>
		/// Provide application specific callback interface.<br/>
		/// See: `bgfx::CallbackI`<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "callback")]
		[NativeName(NativeNameType.Type, "bgfx_callback_interface_t*")]
		public unsafe BgfxCallbackInterface* Callback;

		/// <summary>
		/// Custom allocator. When a custom allocator is not<br/>
		/// specified, bgfx uses the CRT allocator. Bgfx assumes<br/>
		/// custom allocator is thread safe.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "allocator")]
		[NativeName(NativeNameType.Type, "bgfx_allocator_interface_t*")]
		public unsafe BgfxAllocatorInterface* Allocator;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe BgfxInit(BgfxRendererType type = default, ushort vendorId = default, ushort deviceId = default, ulong capabilities = default, bool debug = default, bool profile = default, BgfxPlatformData platformData = default, BgfxResolution resolution = default, BgfxInitLimits limits = default, BgfxCallbackInterface* callback = default, BgfxAllocatorInterface* allocator = default)
		{
			Type = type;
			VendorId = vendorId;
			DeviceId = deviceId;
			Capabilities = capabilities;
			Debug = debug ? (byte)1 : (byte)0;
			Profile = profile ? (byte)1 : (byte)0;
			PlatformData = platformData;
			Resolution = resolution;
			Limits = limits;
			Callback = callback;
			Allocator = allocator;
		}


	}

}
