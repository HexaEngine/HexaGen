// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Bgfx
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "bgfx_interface_vtbl")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct BgfxInterfaceVtbl
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "attachment_init")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_attachment_t* _this, bgfx_texture_handle_t _handle, bgfx_access_t _access, uint16_t _layer, uint16_t _numLayers, uint16_t _mip, uint8_t _resolve)*")]
		public unsafe void* AttachmentInit;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "vertex_layout_begin")]
		[NativeName(NativeNameType.Type, "bgfx_vertex_layout_t* (*)(bgfx_vertex_layout_t* _this, bgfx_renderer_type_t _rendererType)*")]
		public unsafe void* VertexLayoutBegin;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "vertex_layout_add")]
		[NativeName(NativeNameType.Type, "bgfx_vertex_layout_t* (*)(bgfx_vertex_layout_t* _this, bgfx_attrib_t _attrib, uint8_t _num, bgfx_attrib_type_t _type, bool _normalized, bool _asInt)*")]
		public unsafe void* VertexLayoutAdd;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "vertex_layout_decode")]
		[NativeName(NativeNameType.Type, "void (*)(const bgfx_vertex_layout_t* _this, bgfx_attrib_t _attrib, uint8_t* _num, bgfx_attrib_type_t* _type, bool* _normalized, bool* _asInt)*")]
		public unsafe void* VertexLayoutDecode;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "vertex_layout_has")]
		[NativeName(NativeNameType.Type, "bool (*)(const bgfx_vertex_layout_t* _this, bgfx_attrib_t _attrib)*")]
		public unsafe void* VertexLayoutHas;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "vertex_layout_skip")]
		[NativeName(NativeNameType.Type, "bgfx_vertex_layout_t* (*)(bgfx_vertex_layout_t* _this, uint8_t _num)*")]
		public unsafe void* VertexLayoutSkip;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "vertex_layout_end")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_vertex_layout_t* _this)*")]
		public unsafe void* VertexLayoutEnd;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "vertex_pack")]
		[NativeName(NativeNameType.Type, "void (*)(const float[4] _input, bool _inputNormalized, bgfx_attrib_t _attr, const bgfx_vertex_layout_t* _layout, void* _data, uint32_t _index)*")]
		public unsafe void* VertexPack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "vertex_unpack")]
		[NativeName(NativeNameType.Type, "void (*)(float[4] _output, bgfx_attrib_t _attr, const bgfx_vertex_layout_t* _layout, const void* _data, uint32_t _index)*")]
		public unsafe void* VertexUnpack;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "vertex_convert")]
		[NativeName(NativeNameType.Type, "void (*)(const bgfx_vertex_layout_t* _dstLayout, void* _dstData, const bgfx_vertex_layout_t* _srcLayout, const void* _srcData, uint32_t _num)*")]
		public unsafe void* VertexConvert;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "weld_vertices")]
		[NativeName(NativeNameType.Type, "uint32_t (*)(void* _output, const bgfx_vertex_layout_t* _layout, const void* _data, uint32_t _num, bool _index32, float _epsilon)*")]
		public unsafe void* WeldVertices;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "topology_convert")]
		[NativeName(NativeNameType.Type, "uint32_t (*)(bgfx_topology_convert_t _conversion, void* _dst, uint32_t _dstSize, const void* _indices, uint32_t _numIndices, bool _index32)*")]
		public unsafe void* TopologyConvert;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "topology_sort_tri_list")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_topology_sort_t _sort, void* _dst, uint32_t _dstSize, const float[3] _dir, const float[3] _pos, const void* _vertices, uint32_t _stride, const void* _indices, uint32_t _numIndices, bool _index32)*")]
		public unsafe void* TopologySortTriList;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "get_supported_renderers")]
		[NativeName(NativeNameType.Type, "uint8_t (*)(uint8_t _max, bgfx_renderer_type_t* _enum)*")]
		public unsafe void* GetSupportedRenderers;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "get_renderer_name")]
		[NativeName(NativeNameType.Type, "const char* (*)(bgfx_renderer_type_t _type)*")]
		public unsafe void* GetRendererName;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "init_ctor")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_init_t* _init)*")]
		public unsafe void* InitCtor;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "init")]
		[NativeName(NativeNameType.Type, "bool (*)(const bgfx_init_t* _init)*")]
		public unsafe void* Init;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "shutdown")]
		[NativeName(NativeNameType.Type, "void (*)()*")]
		public unsafe void* Shutdown;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "reset")]
		[NativeName(NativeNameType.Type, "void (*)(uint32_t _width, uint32_t _height, uint32_t _flags, bgfx_texture_format_t _format)*")]
		public unsafe void* Reset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "frame")]
		[NativeName(NativeNameType.Type, "uint32_t (*)(bool _capture)*")]
		public unsafe void* Frame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "get_renderer_type")]
		[NativeName(NativeNameType.Type, "bgfx_renderer_type_t (*)()*")]
		public unsafe void* GetRendererType;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "get_caps")]
		[NativeName(NativeNameType.Type, "const bgfx_caps_t* (*)()*")]
		public unsafe void* GetCaps;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "get_stats")]
		[NativeName(NativeNameType.Type, "const bgfx_stats_t* (*)()*")]
		public unsafe void* GetStats;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "alloc")]
		[NativeName(NativeNameType.Type, "const bgfx_memory_t* (*)(uint32_t _size)*")]
		public unsafe void* Alloc;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "copy")]
		[NativeName(NativeNameType.Type, "const bgfx_memory_t* (*)(const void* _data, uint32_t _size)*")]
		public unsafe void* Copy;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "make_ref")]
		[NativeName(NativeNameType.Type, "const bgfx_memory_t* (*)(const void* _data, uint32_t _size)*")]
		public unsafe void* MakeRef;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "make_ref_release")]
		[NativeName(NativeNameType.Type, "const bgfx_memory_t* (*)(const void* _data, uint32_t _size, bgfx_release_fn_t _releaseFn, void* _userData)*")]
		public unsafe void* MakeRefRelease;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_debug")]
		[NativeName(NativeNameType.Type, "void (*)(uint32_t _debug)*")]
		public unsafe void* SetDebug;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "dbg_text_clear")]
		[NativeName(NativeNameType.Type, "void (*)(uint8_t _attr, bool _small)*")]
		public unsafe void* DbgTextClear;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "dbg_text_printf")]
		[NativeName(NativeNameType.Type, "void (*)(uint16_t _x, uint16_t _y, uint8_t _attr, const char* _format)*")]
		public unsafe void* DbgTextPrintf;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "dbg_text_vprintf")]
		[NativeName(NativeNameType.Type, "void (*)(uint16_t _x, uint16_t _y, uint8_t _attr, const char* _format, va_list _argList)*")]
		public unsafe void* DbgTextVprintf;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "dbg_text_image")]
		[NativeName(NativeNameType.Type, "void (*)(uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height, const void* _data, uint16_t _pitch)*")]
		public unsafe void* DbgTextImage;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_index_buffer")]
		[NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t (*)(const bgfx_memory_t* _mem, uint16_t _flags)*")]
		public unsafe void* CreateIndexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_index_buffer_name")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_index_buffer_handle_t _handle, const char* _name, int32_t _len)*")]
		public unsafe void* SetIndexBufferName;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "destroy_index_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_index_buffer_handle_t _handle)*")]
		public unsafe void* DestroyIndexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_vertex_layout")]
		[NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t (*)(const bgfx_vertex_layout_t* _layout)*")]
		public unsafe void* CreateVertexLayout;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "destroy_vertex_layout")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_vertex_layout_handle_t _layoutHandle)*")]
		public unsafe void* DestroyVertexLayout;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_vertex_buffer")]
		[NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t (*)(const bgfx_memory_t* _mem, const bgfx_vertex_layout_t* _layout, uint16_t _flags)*")]
		public unsafe void* CreateVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_vertex_buffer_name")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_vertex_buffer_handle_t _handle, const char* _name, int32_t _len)*")]
		public unsafe void* SetVertexBufferName;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "destroy_vertex_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_vertex_buffer_handle_t _handle)*")]
		public unsafe void* DestroyVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_dynamic_index_buffer")]
		[NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t (*)(uint32_t _num, uint16_t _flags)*")]
		public unsafe void* CreateDynamicIndexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_dynamic_index_buffer_mem")]
		[NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t (*)(const bgfx_memory_t* _mem, uint16_t _flags)*")]
		public unsafe void* CreateDynamicIndexBufferMem;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "update_dynamic_index_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_dynamic_index_buffer_handle_t _handle, uint32_t _startIndex, const bgfx_memory_t* _mem)*")]
		public unsafe void* UpdateDynamicIndexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "destroy_dynamic_index_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_dynamic_index_buffer_handle_t _handle)*")]
		public unsafe void* DestroyDynamicIndexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_dynamic_vertex_buffer")]
		[NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t (*)(uint32_t _num, const bgfx_vertex_layout_t* _layout, uint16_t _flags)*")]
		public unsafe void* CreateDynamicVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_dynamic_vertex_buffer_mem")]
		[NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t (*)(const bgfx_memory_t* _mem, const bgfx_vertex_layout_t* _layout, uint16_t _flags)*")]
		public unsafe void* CreateDynamicVertexBufferMem;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "update_dynamic_vertex_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_dynamic_vertex_buffer_handle_t _handle, uint32_t _startVertex, const bgfx_memory_t* _mem)*")]
		public unsafe void* UpdateDynamicVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "destroy_dynamic_vertex_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_dynamic_vertex_buffer_handle_t _handle)*")]
		public unsafe void* DestroyDynamicVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "get_avail_transient_index_buffer")]
		[NativeName(NativeNameType.Type, "uint32_t (*)(uint32_t _num, bool _index32)*")]
		public unsafe void* GetAvailTransientIndexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "get_avail_transient_vertex_buffer")]
		[NativeName(NativeNameType.Type, "uint32_t (*)(uint32_t _num, const bgfx_vertex_layout_t* _layout)*")]
		public unsafe void* GetAvailTransientVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "get_avail_instance_data_buffer")]
		[NativeName(NativeNameType.Type, "uint32_t (*)(uint32_t _num, uint16_t _stride)*")]
		public unsafe void* GetAvailInstanceDataBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "alloc_transient_index_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_transient_index_buffer_t* _tib, uint32_t _num, bool _index32)*")]
		public unsafe void* AllocTransientIndexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "alloc_transient_vertex_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_transient_vertex_buffer_t* _tvb, uint32_t _num, const bgfx_vertex_layout_t* _layout)*")]
		public unsafe void* AllocTransientVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "alloc_transient_buffers")]
		[NativeName(NativeNameType.Type, "bool (*)(bgfx_transient_vertex_buffer_t* _tvb, const bgfx_vertex_layout_t* _layout, uint32_t _numVertices, bgfx_transient_index_buffer_t* _tib, uint32_t _numIndices, bool _index32)*")]
		public unsafe void* AllocTransientBuffers;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "alloc_instance_data_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_instance_data_buffer_t* _idb, uint32_t _num, uint16_t _stride)*")]
		public unsafe void* AllocInstanceDataBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_indirect_buffer")]
		[NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t (*)(uint32_t _num)*")]
		public unsafe void* CreateIndirectBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "destroy_indirect_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_indirect_buffer_handle_t _handle)*")]
		public unsafe void* DestroyIndirectBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_shader")]
		[NativeName(NativeNameType.Type, "bgfx_shader_handle_t (*)(const bgfx_memory_t* _mem)*")]
		public unsafe void* CreateShader;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "get_shader_uniforms")]
		[NativeName(NativeNameType.Type, "uint16_t (*)(bgfx_shader_handle_t _handle, bgfx_uniform_handle_t* _uniforms, uint16_t _max)*")]
		public unsafe void* GetShaderUniforms;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_shader_name")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_shader_handle_t _handle, const char* _name, int32_t _len)*")]
		public unsafe void* SetShaderName;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "destroy_shader")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_shader_handle_t _handle)*")]
		public unsafe void* DestroyShader;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_program")]
		[NativeName(NativeNameType.Type, "bgfx_program_handle_t (*)(bgfx_shader_handle_t _vsh, bgfx_shader_handle_t _fsh, bool _destroyShaders)*")]
		public unsafe void* CreateProgram;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_compute_program")]
		[NativeName(NativeNameType.Type, "bgfx_program_handle_t (*)(bgfx_shader_handle_t _csh, bool _destroyShaders)*")]
		public unsafe void* CreateComputeProgram;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "destroy_program")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_program_handle_t _handle)*")]
		public unsafe void* DestroyProgram;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "is_texture_valid")]
		[NativeName(NativeNameType.Type, "bool (*)(uint16_t _depth, bool _cubeMap, uint16_t _numLayers, bgfx_texture_format_t _format, uint64_t _flags)*")]
		public unsafe void* IsTextureValid;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "is_frame_buffer_valid")]
		[NativeName(NativeNameType.Type, "bool (*)(uint8_t _num, const bgfx_attachment_t* _attachment)*")]
		public unsafe void* IsFrameBufferValid;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "calc_texture_size")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_texture_info_t* _info, uint16_t _width, uint16_t _height, uint16_t _depth, bool _cubeMap, bool _hasMips, uint16_t _numLayers, bgfx_texture_format_t _format)*")]
		public unsafe void* CalcTextureSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_texture")]
		[NativeName(NativeNameType.Type, "bgfx_texture_handle_t (*)(const bgfx_memory_t* _mem, uint64_t _flags, uint8_t _skip, bgfx_texture_info_t* _info)*")]
		public unsafe void* CreateTexture;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_texture_2d")]
		[NativeName(NativeNameType.Type, "bgfx_texture_handle_t (*)(uint16_t _width, uint16_t _height, bool _hasMips, uint16_t _numLayers, bgfx_texture_format_t _format, uint64_t _flags, const bgfx_memory_t* _mem)*")]
		public unsafe void* CreateTexture2d;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_texture_2d_scaled")]
		[NativeName(NativeNameType.Type, "bgfx_texture_handle_t (*)(bgfx_backbuffer_ratio_t _ratio, bool _hasMips, uint16_t _numLayers, bgfx_texture_format_t _format, uint64_t _flags)*")]
		public unsafe void* CreateTexture2dScaled;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_texture_3d")]
		[NativeName(NativeNameType.Type, "bgfx_texture_handle_t (*)(uint16_t _width, uint16_t _height, uint16_t _depth, bool _hasMips, bgfx_texture_format_t _format, uint64_t _flags, const bgfx_memory_t* _mem)*")]
		public unsafe void* CreateTexture3d;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_texture_cube")]
		[NativeName(NativeNameType.Type, "bgfx_texture_handle_t (*)(uint16_t _size, bool _hasMips, uint16_t _numLayers, bgfx_texture_format_t _format, uint64_t _flags, const bgfx_memory_t* _mem)*")]
		public unsafe void* CreateTextureCube;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "update_texture_2d")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_texture_handle_t _handle, uint16_t _layer, uint8_t _mip, uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height, const bgfx_memory_t* _mem, uint16_t _pitch)*")]
		public unsafe void* UpdateTexture2d;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "update_texture_3d")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_texture_handle_t _handle, uint8_t _mip, uint16_t _x, uint16_t _y, uint16_t _z, uint16_t _width, uint16_t _height, uint16_t _depth, const bgfx_memory_t* _mem)*")]
		public unsafe void* UpdateTexture3d;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "update_texture_cube")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_texture_handle_t _handle, uint16_t _layer, uint8_t _side, uint8_t _mip, uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height, const bgfx_memory_t* _mem, uint16_t _pitch)*")]
		public unsafe void* UpdateTextureCube;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "read_texture")]
		[NativeName(NativeNameType.Type, "uint32_t (*)(bgfx_texture_handle_t _handle, void* _data, uint8_t _mip)*")]
		public unsafe void* ReadTexture;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_texture_name")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_texture_handle_t _handle, const char* _name, int32_t _len)*")]
		public unsafe void* SetTextureName;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "get_direct_access_ptr")]
		[NativeName(NativeNameType.Type, "void* (*)(bgfx_texture_handle_t _handle)*")]
		public unsafe void* GetDirectAccessPtr;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "destroy_texture")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_texture_handle_t _handle)*")]
		public unsafe void* DestroyTexture;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_frame_buffer")]
		[NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t (*)(uint16_t _width, uint16_t _height, bgfx_texture_format_t _format, uint64_t _textureFlags)*")]
		public unsafe void* CreateFrameBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_frame_buffer_scaled")]
		[NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t (*)(bgfx_backbuffer_ratio_t _ratio, bgfx_texture_format_t _format, uint64_t _textureFlags)*")]
		public unsafe void* CreateFrameBufferScaled;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_frame_buffer_from_handles")]
		[NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t (*)(uint8_t _num, const bgfx_texture_handle_t* _handles, bool _destroyTexture)*")]
		public unsafe void* CreateFrameBufferFromHandles;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_frame_buffer_from_attachment")]
		[NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t (*)(uint8_t _num, const bgfx_attachment_t* _attachment, bool _destroyTexture)*")]
		public unsafe void* CreateFrameBufferFromAttachment;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_frame_buffer_from_nwh")]
		[NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t (*)(void* _nwh, uint16_t _width, uint16_t _height, bgfx_texture_format_t _format, bgfx_texture_format_t _depthFormat)*")]
		public unsafe void* CreateFrameBufferFromNwh;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_frame_buffer_name")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_frame_buffer_handle_t _handle, const char* _name, int32_t _len)*")]
		public unsafe void* SetFrameBufferName;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "get_texture")]
		[NativeName(NativeNameType.Type, "bgfx_texture_handle_t (*)(bgfx_frame_buffer_handle_t _handle, uint8_t _attachment)*")]
		public unsafe void* GetTexture;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "destroy_frame_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_frame_buffer_handle_t _handle)*")]
		public unsafe void* DestroyFrameBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_uniform")]
		[NativeName(NativeNameType.Type, "bgfx_uniform_handle_t (*)(const char* _name, bgfx_uniform_type_t _type, uint16_t _num)*")]
		public unsafe void* CreateUniform;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "get_uniform_info")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_uniform_handle_t _handle, bgfx_uniform_info_t* _info)*")]
		public unsafe void* GetUniformInfo;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "destroy_uniform")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_uniform_handle_t _handle)*")]
		public unsafe void* DestroyUniform;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "create_occlusion_query")]
		[NativeName(NativeNameType.Type, "bgfx_occlusion_query_handle_t (*)()*")]
		public unsafe void* CreateOcclusionQuery;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "get_result")]
		[NativeName(NativeNameType.Type, "bgfx_occlusion_query_result_t (*)(bgfx_occlusion_query_handle_t _handle, int32_t* _result)*")]
		public unsafe void* GetResult;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "destroy_occlusion_query")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_occlusion_query_handle_t _handle)*")]
		public unsafe void* DestroyOcclusionQuery;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_palette_color")]
		[NativeName(NativeNameType.Type, "void (*)(uint8_t _index, const float[4] _rgba)*")]
		public unsafe void* SetPaletteColor;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_palette_color_rgba8")]
		[NativeName(NativeNameType.Type, "void (*)(uint8_t _index, uint32_t _rgba)*")]
		public unsafe void* SetPaletteColorRgba8;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_view_name")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_view_id_t _id, const char* _name, int32_t _len)*")]
		public unsafe void* SetViewName;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_view_rect")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_view_id_t _id, uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height)*")]
		public unsafe void* SetViewRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_view_rect_ratio")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_view_id_t _id, uint16_t _x, uint16_t _y, bgfx_backbuffer_ratio_t _ratio)*")]
		public unsafe void* SetViewRectRatio;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_view_scissor")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_view_id_t _id, uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height)*")]
		public unsafe void* SetViewScissor;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_view_clear")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_view_id_t _id, uint16_t _flags, uint32_t _rgba, float _depth, uint8_t _stencil)*")]
		public unsafe void* SetViewClear;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_view_clear_mrt")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_view_id_t _id, uint16_t _flags, float _depth, uint8_t _stencil, uint8_t _c0, uint8_t _c1, uint8_t _c2, uint8_t _c3, uint8_t _c4, uint8_t _c5, uint8_t _c6, uint8_t _c7)*")]
		public unsafe void* SetViewClearMrt;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_view_mode")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_view_id_t _id, bgfx_view_mode_t _mode)*")]
		public unsafe void* SetViewMode;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_view_frame_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_view_id_t _id, bgfx_frame_buffer_handle_t _handle)*")]
		public unsafe void* SetViewFrameBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_view_transform")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_view_id_t _id, const void* _view, const void* _proj)*")]
		public unsafe void* SetViewTransform;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_view_order")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_view_id_t _id, uint16_t _num, const bgfx_view_id_t* _order)*")]
		public unsafe void* SetViewOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "reset_view")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_view_id_t _id)*")]
		public unsafe void* ResetView;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_begin")]
		[NativeName(NativeNameType.Type, "bgfx_encoder_t* (*)(bool _forThread)*")]
		public unsafe void* EncoderBegin;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_end")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _encoder)*")]
		public unsafe void* EncoderEnd;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_marker")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, const char* _name, int32_t _len)*")]
		public unsafe void* EncoderSetMarker;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_state")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, uint64_t _state, uint32_t _rgba)*")]
		public unsafe void* EncoderSetState;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_condition")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, bgfx_occlusion_query_handle_t _handle, bool _visible)*")]
		public unsafe void* EncoderSetCondition;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_stencil")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, uint32_t _fstencil, uint32_t _bstencil)*")]
		public unsafe void* EncoderSetStencil;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_scissor")]
		[NativeName(NativeNameType.Type, "uint16_t (*)(bgfx_encoder_t* _this, uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height)*")]
		public unsafe void* EncoderSetScissor;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_scissor_cached")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, uint16_t _cache)*")]
		public unsafe void* EncoderSetScissorCached;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_transform")]
		[NativeName(NativeNameType.Type, "uint32_t (*)(bgfx_encoder_t* _this, const void* _mtx, uint16_t _num)*")]
		public unsafe void* EncoderSetTransform;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_transform_cached")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, uint32_t _cache, uint16_t _num)*")]
		public unsafe void* EncoderSetTransformCached;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_alloc_transform")]
		[NativeName(NativeNameType.Type, "uint32_t (*)(bgfx_encoder_t* _this, bgfx_transform_t* _transform, uint16_t _num)*")]
		public unsafe void* EncoderAllocTransform;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_uniform")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, bgfx_uniform_handle_t _handle, const void* _value, uint16_t _num)*")]
		public unsafe void* EncoderSetUniform;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_index_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, bgfx_index_buffer_handle_t _handle, uint32_t _firstIndex, uint32_t _numIndices)*")]
		public unsafe void* EncoderSetIndexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_dynamic_index_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, bgfx_dynamic_index_buffer_handle_t _handle, uint32_t _firstIndex, uint32_t _numIndices)*")]
		public unsafe void* EncoderSetDynamicIndexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_transient_index_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, const bgfx_transient_index_buffer_t* _tib, uint32_t _firstIndex, uint32_t _numIndices)*")]
		public unsafe void* EncoderSetTransientIndexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_vertex_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, uint8_t _stream, bgfx_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _numVertices)*")]
		public unsafe void* EncoderSetVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_vertex_buffer_with_layout")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, uint8_t _stream, bgfx_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _numVertices, bgfx_vertex_layout_handle_t _layoutHandle)*")]
		public unsafe void* EncoderSetVertexBufferWithLayout;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_dynamic_vertex_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, uint8_t _stream, bgfx_dynamic_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _numVertices)*")]
		public unsafe void* EncoderSetDynamicVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_dynamic_vertex_buffer_with_layout")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, uint8_t _stream, bgfx_dynamic_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _numVertices, bgfx_vertex_layout_handle_t _layoutHandle)*")]
		public unsafe void* EncoderSetDynamicVertexBufferWithLayout;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_transient_vertex_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, uint8_t _stream, const bgfx_transient_vertex_buffer_t* _tvb, uint32_t _startVertex, uint32_t _numVertices)*")]
		public unsafe void* EncoderSetTransientVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_transient_vertex_buffer_with_layout")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, uint8_t _stream, const bgfx_transient_vertex_buffer_t* _tvb, uint32_t _startVertex, uint32_t _numVertices, bgfx_vertex_layout_handle_t _layoutHandle)*")]
		public unsafe void* EncoderSetTransientVertexBufferWithLayout;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_vertex_count")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, uint32_t _numVertices)*")]
		public unsafe void* EncoderSetVertexCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_instance_data_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, const bgfx_instance_data_buffer_t* _idb, uint32_t _start, uint32_t _num)*")]
		public unsafe void* EncoderSetInstanceDataBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_instance_data_from_vertex_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, bgfx_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _num)*")]
		public unsafe void* EncoderSetInstanceDataFromVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_instance_data_from_dynamic_vertex_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, bgfx_dynamic_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _num)*")]
		public unsafe void* EncoderSetInstanceDataFromDynamicVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_instance_count")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, uint32_t _numInstances)*")]
		public unsafe void* EncoderSetInstanceCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_texture")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, uint8_t _stage, bgfx_uniform_handle_t _sampler, bgfx_texture_handle_t _handle, uint32_t _flags)*")]
		public unsafe void* EncoderSetTexture;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_touch")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, bgfx_view_id_t _id)*")]
		public unsafe void* EncoderTouch;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_submit")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, bgfx_view_id_t _id, bgfx_program_handle_t _program, uint32_t _depth, uint8_t _flags)*")]
		public unsafe void* EncoderSubmit;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_submit_occlusion_query")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, bgfx_view_id_t _id, bgfx_program_handle_t _program, bgfx_occlusion_query_handle_t _occlusionQuery, uint32_t _depth, uint8_t _flags)*")]
		public unsafe void* EncoderSubmitOcclusionQuery;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_submit_indirect")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, bgfx_view_id_t _id, bgfx_program_handle_t _program, bgfx_indirect_buffer_handle_t _indirectHandle, uint32_t _start, uint32_t _num, uint32_t _depth, uint8_t _flags)*")]
		public unsafe void* EncoderSubmitIndirect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_submit_indirect_count")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, bgfx_view_id_t _id, bgfx_program_handle_t _program, bgfx_indirect_buffer_handle_t _indirectHandle, uint32_t _start, bgfx_index_buffer_handle_t _numHandle, uint32_t _numIndex, uint32_t _numMax, uint32_t _depth, uint8_t _flags)*")]
		public unsafe void* EncoderSubmitIndirectCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_compute_index_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, uint8_t _stage, bgfx_index_buffer_handle_t _handle, bgfx_access_t _access)*")]
		public unsafe void* EncoderSetComputeIndexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_compute_vertex_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, uint8_t _stage, bgfx_vertex_buffer_handle_t _handle, bgfx_access_t _access)*")]
		public unsafe void* EncoderSetComputeVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_compute_dynamic_index_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, uint8_t _stage, bgfx_dynamic_index_buffer_handle_t _handle, bgfx_access_t _access)*")]
		public unsafe void* EncoderSetComputeDynamicIndexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_compute_dynamic_vertex_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, uint8_t _stage, bgfx_dynamic_vertex_buffer_handle_t _handle, bgfx_access_t _access)*")]
		public unsafe void* EncoderSetComputeDynamicVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_compute_indirect_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, uint8_t _stage, bgfx_indirect_buffer_handle_t _handle, bgfx_access_t _access)*")]
		public unsafe void* EncoderSetComputeIndirectBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_set_image")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, uint8_t _stage, bgfx_texture_handle_t _handle, uint8_t _mip, bgfx_access_t _access, bgfx_texture_format_t _format)*")]
		public unsafe void* EncoderSetImage;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_dispatch")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, bgfx_view_id_t _id, bgfx_program_handle_t _program, uint32_t _numX, uint32_t _numY, uint32_t _numZ, uint8_t _flags)*")]
		public unsafe void* EncoderDispatch;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_dispatch_indirect")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, bgfx_view_id_t _id, bgfx_program_handle_t _program, bgfx_indirect_buffer_handle_t _indirectHandle, uint32_t _start, uint32_t _num, uint8_t _flags)*")]
		public unsafe void* EncoderDispatchIndirect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_discard")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, uint8_t _flags)*")]
		public unsafe void* EncoderDiscard;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "encoder_blit")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_encoder_t* _this, bgfx_view_id_t _id, bgfx_texture_handle_t _dst, uint8_t _dstMip, uint16_t _dstX, uint16_t _dstY, uint16_t _dstZ, bgfx_texture_handle_t _src, uint8_t _srcMip, uint16_t _srcX, uint16_t _srcY, uint16_t _srcZ, uint16_t _width, uint16_t _height, uint16_t _depth)*")]
		public unsafe void* EncoderBlit;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "request_screen_shot")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_frame_buffer_handle_t _handle, const char* _filePath)*")]
		public unsafe void* RequestScreenShot;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "render_frame")]
		[NativeName(NativeNameType.Type, "bgfx_render_frame_t (*)(int32_t _msecs)*")]
		public unsafe void* RenderFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_platform_data")]
		[NativeName(NativeNameType.Type, "void (*)(const bgfx_platform_data_t* _data)*")]
		public unsafe void* SetPlatformData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "get_internal_data")]
		[NativeName(NativeNameType.Type, "const bgfx_internal_data_t* (*)()*")]
		public unsafe void* GetInternalData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "override_internal_texture_ptr")]
		[NativeName(NativeNameType.Type, "uintptr_t (*)(bgfx_texture_handle_t _handle, uintptr_t _ptr)*")]
		public unsafe void* OverrideInternalTexturePtr;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "override_internal_texture")]
		[NativeName(NativeNameType.Type, "uintptr_t (*)(bgfx_texture_handle_t _handle, uint16_t _width, uint16_t _height, uint8_t _numMips, bgfx_texture_format_t _format, uint64_t _flags)*")]
		public unsafe void* OverrideInternalTexture;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_marker")]
		[NativeName(NativeNameType.Type, "void (*)(const char* _name, int32_t _len)*")]
		public unsafe void* SetMarker;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_state")]
		[NativeName(NativeNameType.Type, "void (*)(uint64_t _state, uint32_t _rgba)*")]
		public unsafe void* SetState;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_condition")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_occlusion_query_handle_t _handle, bool _visible)*")]
		public unsafe void* SetCondition;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_stencil")]
		[NativeName(NativeNameType.Type, "void (*)(uint32_t _fstencil, uint32_t _bstencil)*")]
		public unsafe void* SetStencil;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_scissor")]
		[NativeName(NativeNameType.Type, "uint16_t (*)(uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height)*")]
		public unsafe void* SetScissor;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_scissor_cached")]
		[NativeName(NativeNameType.Type, "void (*)(uint16_t _cache)*")]
		public unsafe void* SetScissorCached;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_transform")]
		[NativeName(NativeNameType.Type, "uint32_t (*)(const void* _mtx, uint16_t _num)*")]
		public unsafe void* SetTransform;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_transform_cached")]
		[NativeName(NativeNameType.Type, "void (*)(uint32_t _cache, uint16_t _num)*")]
		public unsafe void* SetTransformCached;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "alloc_transform")]
		[NativeName(NativeNameType.Type, "uint32_t (*)(bgfx_transform_t* _transform, uint16_t _num)*")]
		public unsafe void* AllocTransform;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_uniform")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_uniform_handle_t _handle, const void* _value, uint16_t _num)*")]
		public unsafe void* SetUniform;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_index_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_index_buffer_handle_t _handle, uint32_t _firstIndex, uint32_t _numIndices)*")]
		public unsafe void* SetIndexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_dynamic_index_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_dynamic_index_buffer_handle_t _handle, uint32_t _firstIndex, uint32_t _numIndices)*")]
		public unsafe void* SetDynamicIndexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_transient_index_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(const bgfx_transient_index_buffer_t* _tib, uint32_t _firstIndex, uint32_t _numIndices)*")]
		public unsafe void* SetTransientIndexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_vertex_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(uint8_t _stream, bgfx_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _numVertices)*")]
		public unsafe void* SetVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_vertex_buffer_with_layout")]
		[NativeName(NativeNameType.Type, "void (*)(uint8_t _stream, bgfx_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _numVertices, bgfx_vertex_layout_handle_t _layoutHandle)*")]
		public unsafe void* SetVertexBufferWithLayout;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_dynamic_vertex_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(uint8_t _stream, bgfx_dynamic_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _numVertices)*")]
		public unsafe void* SetDynamicVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_dynamic_vertex_buffer_with_layout")]
		[NativeName(NativeNameType.Type, "void (*)(uint8_t _stream, bgfx_dynamic_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _numVertices, bgfx_vertex_layout_handle_t _layoutHandle)*")]
		public unsafe void* SetDynamicVertexBufferWithLayout;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_transient_vertex_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(uint8_t _stream, const bgfx_transient_vertex_buffer_t* _tvb, uint32_t _startVertex, uint32_t _numVertices)*")]
		public unsafe void* SetTransientVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_transient_vertex_buffer_with_layout")]
		[NativeName(NativeNameType.Type, "void (*)(uint8_t _stream, const bgfx_transient_vertex_buffer_t* _tvb, uint32_t _startVertex, uint32_t _numVertices, bgfx_vertex_layout_handle_t _layoutHandle)*")]
		public unsafe void* SetTransientVertexBufferWithLayout;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_vertex_count")]
		[NativeName(NativeNameType.Type, "void (*)(uint32_t _numVertices)*")]
		public unsafe void* SetVertexCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_instance_data_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(const bgfx_instance_data_buffer_t* _idb, uint32_t _start, uint32_t _num)*")]
		public unsafe void* SetInstanceDataBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_instance_data_from_vertex_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _num)*")]
		public unsafe void* SetInstanceDataFromVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_instance_data_from_dynamic_vertex_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_dynamic_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _num)*")]
		public unsafe void* SetInstanceDataFromDynamicVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_instance_count")]
		[NativeName(NativeNameType.Type, "void (*)(uint32_t _numInstances)*")]
		public unsafe void* SetInstanceCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_texture")]
		[NativeName(NativeNameType.Type, "void (*)(uint8_t _stage, bgfx_uniform_handle_t _sampler, bgfx_texture_handle_t _handle, uint32_t _flags)*")]
		public unsafe void* SetTexture;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "touch")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_view_id_t _id)*")]
		public unsafe void* Touch;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "submit")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_view_id_t _id, bgfx_program_handle_t _program, uint32_t _depth, uint8_t _flags)*")]
		public unsafe void* Submit;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "submit_occlusion_query")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_view_id_t _id, bgfx_program_handle_t _program, bgfx_occlusion_query_handle_t _occlusionQuery, uint32_t _depth, uint8_t _flags)*")]
		public unsafe void* SubmitOcclusionQuery;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "submit_indirect")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_view_id_t _id, bgfx_program_handle_t _program, bgfx_indirect_buffer_handle_t _indirectHandle, uint32_t _start, uint32_t _num, uint32_t _depth, uint8_t _flags)*")]
		public unsafe void* SubmitIndirect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "submit_indirect_count")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_view_id_t _id, bgfx_program_handle_t _program, bgfx_indirect_buffer_handle_t _indirectHandle, uint32_t _start, bgfx_index_buffer_handle_t _numHandle, uint32_t _numIndex, uint32_t _numMax, uint32_t _depth, uint8_t _flags)*")]
		public unsafe void* SubmitIndirectCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_compute_index_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(uint8_t _stage, bgfx_index_buffer_handle_t _handle, bgfx_access_t _access)*")]
		public unsafe void* SetComputeIndexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_compute_vertex_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(uint8_t _stage, bgfx_vertex_buffer_handle_t _handle, bgfx_access_t _access)*")]
		public unsafe void* SetComputeVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_compute_dynamic_index_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(uint8_t _stage, bgfx_dynamic_index_buffer_handle_t _handle, bgfx_access_t _access)*")]
		public unsafe void* SetComputeDynamicIndexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_compute_dynamic_vertex_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(uint8_t _stage, bgfx_dynamic_vertex_buffer_handle_t _handle, bgfx_access_t _access)*")]
		public unsafe void* SetComputeDynamicVertexBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_compute_indirect_buffer")]
		[NativeName(NativeNameType.Type, "void (*)(uint8_t _stage, bgfx_indirect_buffer_handle_t _handle, bgfx_access_t _access)*")]
		public unsafe void* SetComputeIndirectBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "set_image")]
		[NativeName(NativeNameType.Type, "void (*)(uint8_t _stage, bgfx_texture_handle_t _handle, uint8_t _mip, bgfx_access_t _access, bgfx_texture_format_t _format)*")]
		public unsafe void* SetImage;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "dispatch")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_view_id_t _id, bgfx_program_handle_t _program, uint32_t _numX, uint32_t _numY, uint32_t _numZ, uint8_t _flags)*")]
		public unsafe void* Dispatch;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "dispatch_indirect")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_view_id_t _id, bgfx_program_handle_t _program, bgfx_indirect_buffer_handle_t _indirectHandle, uint32_t _start, uint32_t _num, uint8_t _flags)*")]
		public unsafe void* DispatchIndirect;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "discard")]
		[NativeName(NativeNameType.Type, "void (*)(uint8_t _flags)*")]
		public unsafe void* Discard;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "blit")]
		[NativeName(NativeNameType.Type, "void (*)(bgfx_view_id_t _id, bgfx_texture_handle_t _dst, uint8_t _dstMip, uint16_t _dstX, uint16_t _dstY, uint16_t _dstZ, bgfx_texture_handle_t _src, uint8_t _srcMip, uint16_t _srcX, uint16_t _srcY, uint16_t _srcZ, uint16_t _width, uint16_t _height, uint16_t _depth)*")]
		public unsafe void* Blit;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe BgfxInterfaceVtbl(delegate*<BgfxAttachment*, BgfxTextureHandle, BgfxAccess, ushort, ushort, ushort, byte, void> attachmentInit = default, delegate*<BgfxVertexLayout*, BgfxRendererType, BgfxVertexLayout*> vertexLayoutBegin = default, delegate*<BgfxVertexLayout*, BgfxAttrib, byte, BgfxAttribType, byte, byte, BgfxVertexLayout*> vertexLayoutAdd = default, delegate*<BgfxVertexLayout*, BgfxAttrib, byte*, BgfxAttribType*, bool*, bool*, void> vertexLayoutDecode = default, delegate*<BgfxVertexLayout*, BgfxAttrib, bool> vertexLayoutHas = default, delegate*<BgfxVertexLayout*, byte, BgfxVertexLayout*> vertexLayoutSkip = default, delegate*<BgfxVertexLayout*, void> vertexLayoutEnd = default, delegate*<float*, byte, BgfxAttrib, BgfxVertexLayout*, void*, uint, void> vertexPack = default, delegate*<float*, BgfxAttrib, BgfxVertexLayout*, void*, uint, void> vertexUnpack = default, delegate*<BgfxVertexLayout*, void*, BgfxVertexLayout*, void*, uint, void> vertexConvert = default, delegate*<void*, BgfxVertexLayout*, void*, uint, byte, float, uint> weldVertices = default, delegate*<BgfxTopologyConvert, void*, uint, void*, uint, byte, uint> topologyConvert = default, delegate*<BgfxTopologySort, void*, uint, float*, float*, void*, uint, void*, uint, byte, void> topologySortTriList = default, delegate*<byte, BgfxRendererType*, byte> getSupportedRenderers = default, delegate*<BgfxRendererType, byte*> getRendererName = default, delegate*<BgfxInit*, void> initCtor = default, delegate*<BgfxInit*, bool> init = default, delegate*<void> shutdown = default, delegate*<uint, uint, uint, BgfxTextureFormat, void> reset = default, delegate*<byte, uint> frame = default, delegate*<BgfxRendererType> getRendererType = default, delegate*<BgfxCaps*> getCaps = default, delegate*<BgfxStats*> getStats = default, delegate*<uint, BgfxMemory*> alloc = default, delegate*<void*, uint, BgfxMemory*> copy = default, delegate*<void*, uint, BgfxMemory*> makeRef = default, delegate*<void*, uint, delegate*<void*, void*, void>, void*, BgfxMemory*> makeRefRelease = default, delegate*<uint, void> setDebug = default, delegate*<byte, byte, void> dbgTextClear = default, delegate*<ushort, ushort, byte, byte*, void> dbgTextPrintf = default, delegate*<ushort, ushort, byte, byte*, nint, void> dbgTextVprintf = default, delegate*<ushort, ushort, ushort, ushort, void*, ushort, void> dbgTextImage = default, delegate*<BgfxMemory*, ushort, BgfxIndexBufferHandle> createIndexBuffer = default, delegate*<BgfxIndexBufferHandle, byte*, int, void> setIndexBufferName = default, delegate*<BgfxIndexBufferHandle, void> destroyIndexBuffer = default, delegate*<BgfxVertexLayout*, BgfxVertexLayoutHandle> createVertexLayout = default, delegate*<BgfxVertexLayoutHandle, void> destroyVertexLayout = default, delegate*<BgfxMemory*, BgfxVertexLayout*, ushort, BgfxVertexBufferHandle> createVertexBuffer = default, delegate*<BgfxVertexBufferHandle, byte*, int, void> setVertexBufferName = default, delegate*<BgfxVertexBufferHandle, void> destroyVertexBuffer = default, delegate*<uint, ushort, BgfxDynamicIndexBufferHandle> createDynamicIndexBuffer = default, delegate*<BgfxMemory*, ushort, BgfxDynamicIndexBufferHandle> createDynamicIndexBufferMem = default, delegate*<BgfxDynamicIndexBufferHandle, uint, BgfxMemory*, void> updateDynamicIndexBuffer = default, delegate*<BgfxDynamicIndexBufferHandle, void> destroyDynamicIndexBuffer = default, delegate*<uint, BgfxVertexLayout*, ushort, BgfxDynamicVertexBufferHandle> createDynamicVertexBuffer = default, delegate*<BgfxMemory*, BgfxVertexLayout*, ushort, BgfxDynamicVertexBufferHandle> createDynamicVertexBufferMem = default, delegate*<BgfxDynamicVertexBufferHandle, uint, BgfxMemory*, void> updateDynamicVertexBuffer = default, delegate*<BgfxDynamicVertexBufferHandle, void> destroyDynamicVertexBuffer = default, delegate*<uint, byte, uint> getAvailTransientIndexBuffer = default, delegate*<uint, BgfxVertexLayout*, uint> getAvailTransientVertexBuffer = default, delegate*<uint, ushort, uint> getAvailInstanceDataBuffer = default, delegate*<BgfxTransientIndexBuffer*, uint, byte, void> allocTransientIndexBuffer = default, delegate*<BgfxTransientVertexBuffer*, uint, BgfxVertexLayout*, void> allocTransientVertexBuffer = default, delegate*<BgfxTransientVertexBuffer*, BgfxVertexLayout*, uint, BgfxTransientIndexBuffer*, uint, byte, bool> allocTransientBuffers = default, delegate*<BgfxInstanceDataBuffer*, uint, ushort, void> allocInstanceDataBuffer = default, delegate*<uint, BgfxIndirectBufferHandle> createIndirectBuffer = default, delegate*<BgfxIndirectBufferHandle, void> destroyIndirectBuffer = default, delegate*<BgfxMemory*, BgfxShaderHandle> createShader = default, delegate*<BgfxShaderHandle, BgfxUniformHandle*, ushort, ushort> getShaderUniforms = default, delegate*<BgfxShaderHandle, byte*, int, void> setShaderName = default, delegate*<BgfxShaderHandle, void> destroyShader = default, delegate*<BgfxShaderHandle, BgfxShaderHandle, byte, BgfxProgramHandle> createProgram = default, delegate*<BgfxShaderHandle, byte, BgfxProgramHandle> createComputeProgram = default, delegate*<BgfxProgramHandle, void> destroyProgram = default, delegate*<ushort, byte, ushort, BgfxTextureFormat, ulong, bool> isTextureValid = default, delegate*<byte, BgfxAttachment*, bool> isFrameBufferValid = default, delegate*<BgfxTextureInfo*, ushort, ushort, ushort, byte, byte, ushort, BgfxTextureFormat, void> calcTextureSize = default, delegate*<BgfxMemory*, ulong, byte, BgfxTextureInfo*, BgfxTextureHandle> createTexture = default, delegate*<ushort, ushort, byte, ushort, BgfxTextureFormat, ulong, BgfxMemory*, BgfxTextureHandle> createTexture2d = default, delegate*<BgfxBackbufferRatio, byte, ushort, BgfxTextureFormat, ulong, BgfxTextureHandle> createTexture2dScaled = default, delegate*<ushort, ushort, ushort, byte, BgfxTextureFormat, ulong, BgfxMemory*, BgfxTextureHandle> createTexture3d = default, delegate*<ushort, byte, ushort, BgfxTextureFormat, ulong, BgfxMemory*, BgfxTextureHandle> createTextureCube = default, delegate*<BgfxTextureHandle, ushort, byte, ushort, ushort, ushort, ushort, BgfxMemory*, ushort, void> updateTexture2d = default, delegate*<BgfxTextureHandle, byte, ushort, ushort, ushort, ushort, ushort, ushort, BgfxMemory*, void> updateTexture3d = default, delegate*<BgfxTextureHandle, ushort, byte, byte, ushort, ushort, ushort, ushort, BgfxMemory*, ushort, void> updateTextureCube = default, delegate*<BgfxTextureHandle, void*, byte, uint> readTexture = default, delegate*<BgfxTextureHandle, byte*, int, void> setTextureName = default, delegate*<BgfxTextureHandle, void*> getDirectAccessPtr = default, delegate*<BgfxTextureHandle, void> destroyTexture = default, delegate*<ushort, ushort, BgfxTextureFormat, ulong, BgfxFrameBufferHandle> createFrameBuffer = default, delegate*<BgfxBackbufferRatio, BgfxTextureFormat, ulong, BgfxFrameBufferHandle> createFrameBufferScaled = default, delegate*<byte, BgfxTextureHandle*, byte, BgfxFrameBufferHandle> createFrameBufferFromHandles = default, delegate*<byte, BgfxAttachment*, byte, BgfxFrameBufferHandle> createFrameBufferFromAttachment = default, delegate*<void*, ushort, ushort, BgfxTextureFormat, BgfxTextureFormat, BgfxFrameBufferHandle> createFrameBufferFromNwh = default, delegate*<BgfxFrameBufferHandle, byte*, int, void> setFrameBufferName = default, delegate*<BgfxFrameBufferHandle, byte, BgfxTextureHandle> getTexture = default, delegate*<BgfxFrameBufferHandle, void> destroyFrameBuffer = default, delegate*<byte*, BgfxUniformType, ushort, BgfxUniformHandle> createUniform = default, delegate*<BgfxUniformHandle, BgfxUniformInfo*, void> getUniformInfo = default, delegate*<BgfxUniformHandle, void> destroyUniform = default, delegate*<BgfxOcclusionQueryHandle> createOcclusionQuery = default, delegate*<BgfxOcclusionQueryHandle, int*, BgfxOcclusionQueryResult> getResult = default, delegate*<BgfxOcclusionQueryHandle, void> destroyOcclusionQuery = default, delegate*<byte, float*, void> setPaletteColor = default, delegate*<byte, uint, void> setPaletteColorrgba8 = default, delegate*<ushort, byte*, int, void> setViewName = default, delegate*<ushort, ushort, ushort, ushort, ushort, void> setViewRect = default, delegate*<ushort, ushort, ushort, BgfxBackbufferRatio, void> setViewRectRatio = default, delegate*<ushort, ushort, ushort, ushort, ushort, void> setViewScissor = default, delegate*<ushort, ushort, uint, float, byte, void> setViewClear = default, delegate*<ushort, ushort, float, byte, byte, byte, byte, byte, byte, byte, byte, byte, void> setViewClearMrt = default, delegate*<ushort, BgfxViewMode, void> setViewMode = default, delegate*<ushort, BgfxFrameBufferHandle, void> setViewFrameBuffer = default, delegate*<ushort, void*, void*, void> setViewTransform = default, delegate*<ushort, ushort, ushort*, void> setViewOrder = default, delegate*<ushort, void> resetView = default, delegate*<byte, BgfxEncoder*> encoderBegin = default, delegate*<BgfxEncoder*, void> encoderEnd = default, delegate*<BgfxEncoder*, byte*, int, void> encoderSetMarker = default, delegate*<BgfxEncoder*, ulong, uint, void> encoderSetState = default, delegate*<BgfxEncoder*, BgfxOcclusionQueryHandle, byte, void> encoderSetCondition = default, delegate*<BgfxEncoder*, uint, uint, void> encoderSetStencil = default, delegate*<BgfxEncoder*, ushort, ushort, ushort, ushort, ushort> encoderSetScissor = default, delegate*<BgfxEncoder*, ushort, void> encoderSetScissorCached = default, delegate*<BgfxEncoder*, void*, ushort, uint> encoderSetTransform = default, delegate*<BgfxEncoder*, uint, ushort, void> encoderSetTransformCached = default, delegate*<BgfxEncoder*, BgfxTransform*, ushort, uint> encoderAllocTransform = default, delegate*<BgfxEncoder*, BgfxUniformHandle, void*, ushort, void> encoderSetUniform = default, delegate*<BgfxEncoder*, BgfxIndexBufferHandle, uint, uint, void> encoderSetIndexBuffer = default, delegate*<BgfxEncoder*, BgfxDynamicIndexBufferHandle, uint, uint, void> encoderSetDynamicIndexBuffer = default, delegate*<BgfxEncoder*, BgfxTransientIndexBuffer*, uint, uint, void> encoderSetTransientIndexBuffer = default, delegate*<BgfxEncoder*, byte, BgfxVertexBufferHandle, uint, uint, void> encoderSetVertexBuffer = default, delegate*<BgfxEncoder*, byte, BgfxVertexBufferHandle, uint, uint, BgfxVertexLayoutHandle, void> encoderSetVertexBufferWithLayout = default, delegate*<BgfxEncoder*, byte, BgfxDynamicVertexBufferHandle, uint, uint, void> encoderSetDynamicVertexBuffer = default, delegate*<BgfxEncoder*, byte, BgfxDynamicVertexBufferHandle, uint, uint, BgfxVertexLayoutHandle, void> encoderSetDynamicVertexBufferWithLayout = default, delegate*<BgfxEncoder*, byte, BgfxTransientVertexBuffer*, uint, uint, void> encoderSetTransientVertexBuffer = default, delegate*<BgfxEncoder*, byte, BgfxTransientVertexBuffer*, uint, uint, BgfxVertexLayoutHandle, void> encoderSetTransientVertexBufferWithLayout = default, delegate*<BgfxEncoder*, uint, void> encoderSetVertexCount = default, delegate*<BgfxEncoder*, BgfxInstanceDataBuffer*, uint, uint, void> encoderSetInstanceDataBuffer = default, delegate*<BgfxEncoder*, BgfxVertexBufferHandle, uint, uint, void> encoderSetInstanceDataFromVertexBuffer = default, delegate*<BgfxEncoder*, BgfxDynamicVertexBufferHandle, uint, uint, void> encoderSetInstanceDataFromDynamicVertexBuffer = default, delegate*<BgfxEncoder*, uint, void> encoderSetInstanceCount = default, delegate*<BgfxEncoder*, byte, BgfxUniformHandle, BgfxTextureHandle, uint, void> encoderSetTexture = default, delegate*<BgfxEncoder*, ushort, void> encoderTouch = default, delegate*<BgfxEncoder*, ushort, BgfxProgramHandle, uint, byte, void> encoderSubmit = default, delegate*<BgfxEncoder*, ushort, BgfxProgramHandle, BgfxOcclusionQueryHandle, uint, byte, void> encoderSubmitOcclusionQuery = default, delegate*<BgfxEncoder*, ushort, BgfxProgramHandle, BgfxIndirectBufferHandle, uint, uint, uint, byte, void> encoderSubmitIndirect = default, delegate*<BgfxEncoder*, ushort, BgfxProgramHandle, BgfxIndirectBufferHandle, uint, BgfxIndexBufferHandle, uint, uint, uint, byte, void> encoderSubmitIndirectCount = default, delegate*<BgfxEncoder*, byte, BgfxIndexBufferHandle, BgfxAccess, void> encoderSetComputeIndexBuffer = default, delegate*<BgfxEncoder*, byte, BgfxVertexBufferHandle, BgfxAccess, void> encoderSetComputeVertexBuffer = default, delegate*<BgfxEncoder*, byte, BgfxDynamicIndexBufferHandle, BgfxAccess, void> encoderSetComputeDynamicIndexBuffer = default, delegate*<BgfxEncoder*, byte, BgfxDynamicVertexBufferHandle, BgfxAccess, void> encoderSetComputeDynamicVertexBuffer = default, delegate*<BgfxEncoder*, byte, BgfxIndirectBufferHandle, BgfxAccess, void> encoderSetComputeIndirectBuffer = default, delegate*<BgfxEncoder*, byte, BgfxTextureHandle, byte, BgfxAccess, BgfxTextureFormat, void> encoderSetImage = default, delegate*<BgfxEncoder*, ushort, BgfxProgramHandle, uint, uint, uint, byte, void> encoderDispatch = default, delegate*<BgfxEncoder*, ushort, BgfxProgramHandle, BgfxIndirectBufferHandle, uint, uint, byte, void> encoderDispatchIndirect = default, delegate*<BgfxEncoder*, byte, void> encoderDiscard = default, delegate*<BgfxEncoder*, ushort, BgfxTextureHandle, byte, ushort, ushort, ushort, BgfxTextureHandle, byte, ushort, ushort, ushort, ushort, ushort, ushort, void> encoderBlit = default, delegate*<BgfxFrameBufferHandle, byte*, void> requestScreenShot = default, delegate*<int, BgfxRenderFrame> renderFrame = default, delegate*<BgfxPlatformData*, void> setPlatformData = default, delegate*<BgfxInternalData*> getInternalData = default, delegate*<BgfxTextureHandle, ulong, ulong> overrideInternalTexturePtr = default, delegate*<BgfxTextureHandle, ushort, ushort, byte, BgfxTextureFormat, ulong, ulong> overrideInternalTexture = default, delegate*<byte*, int, void> setMarker = default, delegate*<ulong, uint, void> setState = default, delegate*<BgfxOcclusionQueryHandle, byte, void> setCondition = default, delegate*<uint, uint, void> setStencil = default, delegate*<ushort, ushort, ushort, ushort, ushort> setScissor = default, delegate*<ushort, void> setScissorCached = default, delegate*<void*, ushort, uint> setTransform = default, delegate*<uint, ushort, void> setTransformCached = default, delegate*<BgfxTransform*, ushort, uint> allocTransform = default, delegate*<BgfxUniformHandle, void*, ushort, void> setUniform = default, delegate*<BgfxIndexBufferHandle, uint, uint, void> setIndexBuffer = default, delegate*<BgfxDynamicIndexBufferHandle, uint, uint, void> setDynamicIndexBuffer = default, delegate*<BgfxTransientIndexBuffer*, uint, uint, void> setTransientIndexBuffer = default, delegate*<byte, BgfxVertexBufferHandle, uint, uint, void> setVertexBuffer = default, delegate*<byte, BgfxVertexBufferHandle, uint, uint, BgfxVertexLayoutHandle, void> setVertexBufferWithLayout = default, delegate*<byte, BgfxDynamicVertexBufferHandle, uint, uint, void> setDynamicVertexBuffer = default, delegate*<byte, BgfxDynamicVertexBufferHandle, uint, uint, BgfxVertexLayoutHandle, void> setDynamicVertexBufferWithLayout = default, delegate*<byte, BgfxTransientVertexBuffer*, uint, uint, void> setTransientVertexBuffer = default, delegate*<byte, BgfxTransientVertexBuffer*, uint, uint, BgfxVertexLayoutHandle, void> setTransientVertexBufferWithLayout = default, delegate*<uint, void> setVertexCount = default, delegate*<BgfxInstanceDataBuffer*, uint, uint, void> setInstanceDataBuffer = default, delegate*<BgfxVertexBufferHandle, uint, uint, void> setInstanceDataFromVertexBuffer = default, delegate*<BgfxDynamicVertexBufferHandle, uint, uint, void> setInstanceDataFromDynamicVertexBuffer = default, delegate*<uint, void> setInstanceCount = default, delegate*<byte, BgfxUniformHandle, BgfxTextureHandle, uint, void> setTexture = default, delegate*<ushort, void> touch = default, delegate*<ushort, BgfxProgramHandle, uint, byte, void> submit = default, delegate*<ushort, BgfxProgramHandle, BgfxOcclusionQueryHandle, uint, byte, void> submitOcclusionQuery = default, delegate*<ushort, BgfxProgramHandle, BgfxIndirectBufferHandle, uint, uint, uint, byte, void> submitIndirect = default, delegate*<ushort, BgfxProgramHandle, BgfxIndirectBufferHandle, uint, BgfxIndexBufferHandle, uint, uint, uint, byte, void> submitIndirectCount = default, delegate*<byte, BgfxIndexBufferHandle, BgfxAccess, void> setComputeIndexBuffer = default, delegate*<byte, BgfxVertexBufferHandle, BgfxAccess, void> setComputeVertexBuffer = default, delegate*<byte, BgfxDynamicIndexBufferHandle, BgfxAccess, void> setComputeDynamicIndexBuffer = default, delegate*<byte, BgfxDynamicVertexBufferHandle, BgfxAccess, void> setComputeDynamicVertexBuffer = default, delegate*<byte, BgfxIndirectBufferHandle, BgfxAccess, void> setComputeIndirectBuffer = default, delegate*<byte, BgfxTextureHandle, byte, BgfxAccess, BgfxTextureFormat, void> setImage = default, delegate*<ushort, BgfxProgramHandle, uint, uint, uint, byte, void> dispatch = default, delegate*<ushort, BgfxProgramHandle, BgfxIndirectBufferHandle, uint, uint, byte, void> dispatchIndirect = default, delegate*<byte, void> discard = default, delegate*<ushort, BgfxTextureHandle, byte, ushort, ushort, ushort, BgfxTextureHandle, byte, ushort, ushort, ushort, ushort, ushort, ushort, void> blit = default)
		{
			AttachmentInit = (void*)attachmentInit;
			VertexLayoutBegin = (void*)vertexLayoutBegin;
			VertexLayoutAdd = (void*)vertexLayoutAdd;
			VertexLayoutDecode = (void*)vertexLayoutDecode;
			VertexLayoutHas = (void*)vertexLayoutHas;
			VertexLayoutSkip = (void*)vertexLayoutSkip;
			VertexLayoutEnd = (void*)vertexLayoutEnd;
			VertexPack = (void*)vertexPack;
			VertexUnpack = (void*)vertexUnpack;
			VertexConvert = (void*)vertexConvert;
			WeldVertices = (void*)weldVertices;
			TopologyConvert = (void*)topologyConvert;
			TopologySortTriList = (void*)topologySortTriList;
			GetSupportedRenderers = (void*)getSupportedRenderers;
			GetRendererName = (void*)getRendererName;
			InitCtor = (void*)initCtor;
			Init = (void*)init;
			Shutdown = (void*)shutdown;
			Reset = (void*)reset;
			Frame = (void*)frame;
			GetRendererType = (void*)getRendererType;
			GetCaps = (void*)getCaps;
			GetStats = (void*)getStats;
			Alloc = (void*)alloc;
			Copy = (void*)copy;
			MakeRef = (void*)makeRef;
			MakeRefRelease = (void*)makeRefRelease;
			SetDebug = (void*)setDebug;
			DbgTextClear = (void*)dbgTextClear;
			DbgTextPrintf = (void*)dbgTextPrintf;
			DbgTextVprintf = (void*)dbgTextVprintf;
			DbgTextImage = (void*)dbgTextImage;
			CreateIndexBuffer = (void*)createIndexBuffer;
			SetIndexBufferName = (void*)setIndexBufferName;
			DestroyIndexBuffer = (void*)destroyIndexBuffer;
			CreateVertexLayout = (void*)createVertexLayout;
			DestroyVertexLayout = (void*)destroyVertexLayout;
			CreateVertexBuffer = (void*)createVertexBuffer;
			SetVertexBufferName = (void*)setVertexBufferName;
			DestroyVertexBuffer = (void*)destroyVertexBuffer;
			CreateDynamicIndexBuffer = (void*)createDynamicIndexBuffer;
			CreateDynamicIndexBufferMem = (void*)createDynamicIndexBufferMem;
			UpdateDynamicIndexBuffer = (void*)updateDynamicIndexBuffer;
			DestroyDynamicIndexBuffer = (void*)destroyDynamicIndexBuffer;
			CreateDynamicVertexBuffer = (void*)createDynamicVertexBuffer;
			CreateDynamicVertexBufferMem = (void*)createDynamicVertexBufferMem;
			UpdateDynamicVertexBuffer = (void*)updateDynamicVertexBuffer;
			DestroyDynamicVertexBuffer = (void*)destroyDynamicVertexBuffer;
			GetAvailTransientIndexBuffer = (void*)getAvailTransientIndexBuffer;
			GetAvailTransientVertexBuffer = (void*)getAvailTransientVertexBuffer;
			GetAvailInstanceDataBuffer = (void*)getAvailInstanceDataBuffer;
			AllocTransientIndexBuffer = (void*)allocTransientIndexBuffer;
			AllocTransientVertexBuffer = (void*)allocTransientVertexBuffer;
			AllocTransientBuffers = (void*)allocTransientBuffers;
			AllocInstanceDataBuffer = (void*)allocInstanceDataBuffer;
			CreateIndirectBuffer = (void*)createIndirectBuffer;
			DestroyIndirectBuffer = (void*)destroyIndirectBuffer;
			CreateShader = (void*)createShader;
			GetShaderUniforms = (void*)getShaderUniforms;
			SetShaderName = (void*)setShaderName;
			DestroyShader = (void*)destroyShader;
			CreateProgram = (void*)createProgram;
			CreateComputeProgram = (void*)createComputeProgram;
			DestroyProgram = (void*)destroyProgram;
			IsTextureValid = (void*)isTextureValid;
			IsFrameBufferValid = (void*)isFrameBufferValid;
			CalcTextureSize = (void*)calcTextureSize;
			CreateTexture = (void*)createTexture;
			CreateTexture2d = (void*)createTexture2d;
			CreateTexture2dScaled = (void*)createTexture2dScaled;
			CreateTexture3d = (void*)createTexture3d;
			CreateTextureCube = (void*)createTextureCube;
			UpdateTexture2d = (void*)updateTexture2d;
			UpdateTexture3d = (void*)updateTexture3d;
			UpdateTextureCube = (void*)updateTextureCube;
			ReadTexture = (void*)readTexture;
			SetTextureName = (void*)setTextureName;
			GetDirectAccessPtr = (void*)getDirectAccessPtr;
			DestroyTexture = (void*)destroyTexture;
			CreateFrameBuffer = (void*)createFrameBuffer;
			CreateFrameBufferScaled = (void*)createFrameBufferScaled;
			CreateFrameBufferFromHandles = (void*)createFrameBufferFromHandles;
			CreateFrameBufferFromAttachment = (void*)createFrameBufferFromAttachment;
			CreateFrameBufferFromNwh = (void*)createFrameBufferFromNwh;
			SetFrameBufferName = (void*)setFrameBufferName;
			GetTexture = (void*)getTexture;
			DestroyFrameBuffer = (void*)destroyFrameBuffer;
			CreateUniform = (void*)createUniform;
			GetUniformInfo = (void*)getUniformInfo;
			DestroyUniform = (void*)destroyUniform;
			CreateOcclusionQuery = (void*)createOcclusionQuery;
			GetResult = (void*)getResult;
			DestroyOcclusionQuery = (void*)destroyOcclusionQuery;
			SetPaletteColor = (void*)setPaletteColor;
			SetPaletteColorRgba8 = (void*)setPaletteColorrgba8;
			SetViewName = (void*)setViewName;
			SetViewRect = (void*)setViewRect;
			SetViewRectRatio = (void*)setViewRectRatio;
			SetViewScissor = (void*)setViewScissor;
			SetViewClear = (void*)setViewClear;
			SetViewClearMrt = (void*)setViewClearMrt;
			SetViewMode = (void*)setViewMode;
			SetViewFrameBuffer = (void*)setViewFrameBuffer;
			SetViewTransform = (void*)setViewTransform;
			SetViewOrder = (void*)setViewOrder;
			ResetView = (void*)resetView;
			EncoderBegin = (void*)encoderBegin;
			EncoderEnd = (void*)encoderEnd;
			EncoderSetMarker = (void*)encoderSetMarker;
			EncoderSetState = (void*)encoderSetState;
			EncoderSetCondition = (void*)encoderSetCondition;
			EncoderSetStencil = (void*)encoderSetStencil;
			EncoderSetScissor = (void*)encoderSetScissor;
			EncoderSetScissorCached = (void*)encoderSetScissorCached;
			EncoderSetTransform = (void*)encoderSetTransform;
			EncoderSetTransformCached = (void*)encoderSetTransformCached;
			EncoderAllocTransform = (void*)encoderAllocTransform;
			EncoderSetUniform = (void*)encoderSetUniform;
			EncoderSetIndexBuffer = (void*)encoderSetIndexBuffer;
			EncoderSetDynamicIndexBuffer = (void*)encoderSetDynamicIndexBuffer;
			EncoderSetTransientIndexBuffer = (void*)encoderSetTransientIndexBuffer;
			EncoderSetVertexBuffer = (void*)encoderSetVertexBuffer;
			EncoderSetVertexBufferWithLayout = (void*)encoderSetVertexBufferWithLayout;
			EncoderSetDynamicVertexBuffer = (void*)encoderSetDynamicVertexBuffer;
			EncoderSetDynamicVertexBufferWithLayout = (void*)encoderSetDynamicVertexBufferWithLayout;
			EncoderSetTransientVertexBuffer = (void*)encoderSetTransientVertexBuffer;
			EncoderSetTransientVertexBufferWithLayout = (void*)encoderSetTransientVertexBufferWithLayout;
			EncoderSetVertexCount = (void*)encoderSetVertexCount;
			EncoderSetInstanceDataBuffer = (void*)encoderSetInstanceDataBuffer;
			EncoderSetInstanceDataFromVertexBuffer = (void*)encoderSetInstanceDataFromVertexBuffer;
			EncoderSetInstanceDataFromDynamicVertexBuffer = (void*)encoderSetInstanceDataFromDynamicVertexBuffer;
			EncoderSetInstanceCount = (void*)encoderSetInstanceCount;
			EncoderSetTexture = (void*)encoderSetTexture;
			EncoderTouch = (void*)encoderTouch;
			EncoderSubmit = (void*)encoderSubmit;
			EncoderSubmitOcclusionQuery = (void*)encoderSubmitOcclusionQuery;
			EncoderSubmitIndirect = (void*)encoderSubmitIndirect;
			EncoderSubmitIndirectCount = (void*)encoderSubmitIndirectCount;
			EncoderSetComputeIndexBuffer = (void*)encoderSetComputeIndexBuffer;
			EncoderSetComputeVertexBuffer = (void*)encoderSetComputeVertexBuffer;
			EncoderSetComputeDynamicIndexBuffer = (void*)encoderSetComputeDynamicIndexBuffer;
			EncoderSetComputeDynamicVertexBuffer = (void*)encoderSetComputeDynamicVertexBuffer;
			EncoderSetComputeIndirectBuffer = (void*)encoderSetComputeIndirectBuffer;
			EncoderSetImage = (void*)encoderSetImage;
			EncoderDispatch = (void*)encoderDispatch;
			EncoderDispatchIndirect = (void*)encoderDispatchIndirect;
			EncoderDiscard = (void*)encoderDiscard;
			EncoderBlit = (void*)encoderBlit;
			RequestScreenShot = (void*)requestScreenShot;
			RenderFrame = (void*)renderFrame;
			SetPlatformData = (void*)setPlatformData;
			GetInternalData = (void*)getInternalData;
			OverrideInternalTexturePtr = (void*)overrideInternalTexturePtr;
			OverrideInternalTexture = (void*)overrideInternalTexture;
			SetMarker = (void*)setMarker;
			SetState = (void*)setState;
			SetCondition = (void*)setCondition;
			SetStencil = (void*)setStencil;
			SetScissor = (void*)setScissor;
			SetScissorCached = (void*)setScissorCached;
			SetTransform = (void*)setTransform;
			SetTransformCached = (void*)setTransformCached;
			AllocTransform = (void*)allocTransform;
			SetUniform = (void*)setUniform;
			SetIndexBuffer = (void*)setIndexBuffer;
			SetDynamicIndexBuffer = (void*)setDynamicIndexBuffer;
			SetTransientIndexBuffer = (void*)setTransientIndexBuffer;
			SetVertexBuffer = (void*)setVertexBuffer;
			SetVertexBufferWithLayout = (void*)setVertexBufferWithLayout;
			SetDynamicVertexBuffer = (void*)setDynamicVertexBuffer;
			SetDynamicVertexBufferWithLayout = (void*)setDynamicVertexBufferWithLayout;
			SetTransientVertexBuffer = (void*)setTransientVertexBuffer;
			SetTransientVertexBufferWithLayout = (void*)setTransientVertexBufferWithLayout;
			SetVertexCount = (void*)setVertexCount;
			SetInstanceDataBuffer = (void*)setInstanceDataBuffer;
			SetInstanceDataFromVertexBuffer = (void*)setInstanceDataFromVertexBuffer;
			SetInstanceDataFromDynamicVertexBuffer = (void*)setInstanceDataFromDynamicVertexBuffer;
			SetInstanceCount = (void*)setInstanceCount;
			SetTexture = (void*)setTexture;
			Touch = (void*)touch;
			Submit = (void*)submit;
			SubmitOcclusionQuery = (void*)submitOcclusionQuery;
			SubmitIndirect = (void*)submitIndirect;
			SubmitIndirectCount = (void*)submitIndirectCount;
			SetComputeIndexBuffer = (void*)setComputeIndexBuffer;
			SetComputeVertexBuffer = (void*)setComputeVertexBuffer;
			SetComputeDynamicIndexBuffer = (void*)setComputeDynamicIndexBuffer;
			SetComputeDynamicVertexBuffer = (void*)setComputeDynamicVertexBuffer;
			SetComputeIndirectBuffer = (void*)setComputeIndirectBuffer;
			SetImage = (void*)setImage;
			Dispatch = (void*)dispatch;
			DispatchIndirect = (void*)dispatchIndirect;
			Discard = (void*)discard;
			Blit = (void*)blit;
		}


	}

}
