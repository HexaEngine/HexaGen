// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Bgfx
{
	/// <summary>
	/// Renderer statistics data.<br/>
	/// <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "bgfx_stats_s")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct BgfxStats
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "cpuTimeFrame")]
		[NativeName(NativeNameType.Type, "int64_t")]
		public long CpuTimeFrame;

		/// <summary>
		/// CPU time between two `bgfx::frame` calls. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cpuTimeBegin")]
		[NativeName(NativeNameType.Type, "int64_t")]
		public long CpuTimeBegin;

		/// <summary>
		/// Render thread CPU submit begin time.     <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cpuTimeEnd")]
		[NativeName(NativeNameType.Type, "int64_t")]
		public long CpuTimeEnd;

		/// <summary>
		/// Render thread CPU submit end time.       <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cpuTimerFreq")]
		[NativeName(NativeNameType.Type, "int64_t")]
		public long CpuTimerFreq;

		/// <summary>
		/// CPU timer frequency. Timestamps-per-second <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "gpuTimeBegin")]
		[NativeName(NativeNameType.Type, "int64_t")]
		public long GpuTimeBegin;

		/// <summary>
		/// GPU frame begin time.                    <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "gpuTimeEnd")]
		[NativeName(NativeNameType.Type, "int64_t")]
		public long GpuTimeEnd;

		/// <summary>
		/// GPU frame end time.                      <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "gpuTimerFreq")]
		[NativeName(NativeNameType.Type, "int64_t")]
		public long GpuTimerFreq;

		/// <summary>
		/// GPU timer frequency.                     <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "waitRender")]
		[NativeName(NativeNameType.Type, "int64_t")]
		public long WaitRender;

		/// <summary>
		/// Time spent waiting for render backend thread to finish issuing draw commands to underlying graphics API. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "waitSubmit")]
		[NativeName(NativeNameType.Type, "int64_t")]
		public long WaitSubmit;

		/// <summary>
		/// Time spent waiting for submit thread to advance to next frame. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "numDraw")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NumDraw;

		/// <summary>
		/// Number of draw calls submitted.          <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "numCompute")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NumCompute;

		/// <summary>
		/// Number of compute calls submitted.       <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "numBlit")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NumBlit;

		/// <summary>
		/// Number of blit calls submitted.          <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "maxGpuLatency")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxGpuLatency;

		/// <summary>
		/// GPU driver latency.                      <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "gpuFrameNum")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint GpuFrameNum;

		/// <summary>
		/// Frame which generated gpuTimeBegin, gpuTimeEnd. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "numDynamicIndexBuffers")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort NumDynamicIndexBuffers;

		/// <summary>
		/// Number of used dynamic index buffers.    <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "numDynamicVertexBuffers")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort NumDynamicVertexBuffers;

		/// <summary>
		/// Number of used dynamic vertex buffers.   <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "numFrameBuffers")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort NumFrameBuffers;

		/// <summary>
		/// Number of used frame buffers.            <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "numIndexBuffers")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort NumIndexBuffers;

		/// <summary>
		/// Number of used index buffers.            <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "numOcclusionQueries")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort NumOcclusionQueries;

		/// <summary>
		/// Number of used occlusion queries.        <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "numPrograms")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort NumPrograms;

		/// <summary>
		/// Number of used programs.                 <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "numShaders")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort NumShaders;

		/// <summary>
		/// Number of used shaders.                  <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "numTextures")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort NumTextures;

		/// <summary>
		/// Number of used textures.                 <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "numUniforms")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort NumUniforms;

		/// <summary>
		/// Number of used uniforms.                 <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "numVertexBuffers")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort NumVertexBuffers;

		/// <summary>
		/// Number of used vertex buffers.           <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "numVertexLayouts")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort NumVertexLayouts;

		/// <summary>
		/// Number of used vertex layouts.           <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "textureMemoryUsed")]
		[NativeName(NativeNameType.Type, "int64_t")]
		public long TextureMemoryUsed;

		/// <summary>
		/// Estimate of texture memory used.         <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "rtMemoryUsed")]
		[NativeName(NativeNameType.Type, "int64_t")]
		public long RtMemoryUsed;

		/// <summary>
		/// Estimate of render target memory used.   <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "transientVbUsed")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int TransientVbUsed;

		/// <summary>
		/// Amount of transient vertex buffer used.  <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "transientIbUsed")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int TransientIbUsed;

		/// <summary>
		/// Amount of transient index buffer used.   <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "numPrims")]
		[NativeName(NativeNameType.Type, "uint32_t[5]")]
		public uint NumPrims_0;
		public uint NumPrims_1;
		public uint NumPrims_2;
		public uint NumPrims_3;
		public uint NumPrims_4;

		/// <summary>
		/// Number of primitives rendered.           <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "gpuMemoryMax")]
		[NativeName(NativeNameType.Type, "int64_t")]
		public long GpuMemoryMax;

		/// <summary>
		/// Maximum available GPU memory for application. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "gpuMemoryUsed")]
		[NativeName(NativeNameType.Type, "int64_t")]
		public long GpuMemoryUsed;

		/// <summary>
		/// Amount of GPU memory used by the application. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "width")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort Width;

		/// <summary>
		/// Backbuffer width in pixels.              <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "height")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort Height;

		/// <summary>
		/// Backbuffer height in pixels.             <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "textWidth")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort TextWidth;

		/// <summary>
		/// Debug text width in characters.          <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "textHeight")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort TextHeight;

		/// <summary>
		/// Debug text height in characters.         <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "numViews")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort NumViews;

		/// <summary>
		/// Number of view stats.                    <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "viewStats")]
		[NativeName(NativeNameType.Type, "bgfx_view_stats_t*")]
		public unsafe BgfxViewStats* ViewStats;

		/// <summary>
		/// Array of View stats.                     <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "numEncoders")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumEncoders;

		/// <summary>
		/// Number of encoders used during frame.    <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "encoderStats")]
		[NativeName(NativeNameType.Type, "bgfx_encoder_stats_t*")]
		public unsafe BgfxEncoderStats* EncoderStats;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe BgfxStats(long cpuTimeFrame = default, long cpuTimeBegin = default, long cpuTimeEnd = default, long cpuTimerFreq = default, long gpuTimeBegin = default, long gpuTimeEnd = default, long gpuTimerFreq = default, long waitRender = default, long waitSubmit = default, uint numDraw = default, uint numCompute = default, uint numBlit = default, uint maxGpuLatency = default, uint gpuFrameNum = default, ushort numDynamicIndexBuffers = default, ushort numDynamicVertexBuffers = default, ushort numFrameBuffers = default, ushort numIndexBuffers = default, ushort numOcclusionQueries = default, ushort numPrograms = default, ushort numShaders = default, ushort numTextures = default, ushort numUniforms = default, ushort numVertexBuffers = default, ushort numVertexLayouts = default, long textureMemoryUsed = default, long rtMemoryUsed = default, int transientVbUsed = default, int transientIbUsed = default, uint* numPrims = default, long gpuMemoryMax = default, long gpuMemoryUsed = default, ushort width = default, ushort height = default, ushort textWidth = default, ushort textHeight = default, ushort numViews = default, BgfxViewStats* viewStats = default, byte numEncoders = default, BgfxEncoderStats* encoderStats = default)
		{
			CpuTimeFrame = cpuTimeFrame;
			CpuTimeBegin = cpuTimeBegin;
			CpuTimeEnd = cpuTimeEnd;
			CpuTimerFreq = cpuTimerFreq;
			GpuTimeBegin = gpuTimeBegin;
			GpuTimeEnd = gpuTimeEnd;
			GpuTimerFreq = gpuTimerFreq;
			WaitRender = waitRender;
			WaitSubmit = waitSubmit;
			NumDraw = numDraw;
			NumCompute = numCompute;
			NumBlit = numBlit;
			MaxGpuLatency = maxGpuLatency;
			GpuFrameNum = gpuFrameNum;
			NumDynamicIndexBuffers = numDynamicIndexBuffers;
			NumDynamicVertexBuffers = numDynamicVertexBuffers;
			NumFrameBuffers = numFrameBuffers;
			NumIndexBuffers = numIndexBuffers;
			NumOcclusionQueries = numOcclusionQueries;
			NumPrograms = numPrograms;
			NumShaders = numShaders;
			NumTextures = numTextures;
			NumUniforms = numUniforms;
			NumVertexBuffers = numVertexBuffers;
			NumVertexLayouts = numVertexLayouts;
			TextureMemoryUsed = textureMemoryUsed;
			RtMemoryUsed = rtMemoryUsed;
			TransientVbUsed = transientVbUsed;
			TransientIbUsed = transientIbUsed;
			if (numPrims != default(uint*))
			{
				NumPrims_0 = numPrims[0];
				NumPrims_1 = numPrims[1];
				NumPrims_2 = numPrims[2];
				NumPrims_3 = numPrims[3];
				NumPrims_4 = numPrims[4];
			}
			GpuMemoryMax = gpuMemoryMax;
			GpuMemoryUsed = gpuMemoryUsed;
			Width = width;
			Height = height;
			TextWidth = textWidth;
			TextHeight = textHeight;
			NumViews = numViews;
			ViewStats = viewStats;
			NumEncoders = numEncoders;
			EncoderStats = encoderStats;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe BgfxStats(long cpuTimeFrame = default, long cpuTimeBegin = default, long cpuTimeEnd = default, long cpuTimerFreq = default, long gpuTimeBegin = default, long gpuTimeEnd = default, long gpuTimerFreq = default, long waitRender = default, long waitSubmit = default, uint numDraw = default, uint numCompute = default, uint numBlit = default, uint maxGpuLatency = default, uint gpuFrameNum = default, ushort numDynamicIndexBuffers = default, ushort numDynamicVertexBuffers = default, ushort numFrameBuffers = default, ushort numIndexBuffers = default, ushort numOcclusionQueries = default, ushort numPrograms = default, ushort numShaders = default, ushort numTextures = default, ushort numUniforms = default, ushort numVertexBuffers = default, ushort numVertexLayouts = default, long textureMemoryUsed = default, long rtMemoryUsed = default, int transientVbUsed = default, int transientIbUsed = default, Span<uint> numPrims = default, long gpuMemoryMax = default, long gpuMemoryUsed = default, ushort width = default, ushort height = default, ushort textWidth = default, ushort textHeight = default, ushort numViews = default, BgfxViewStats* viewStats = default, byte numEncoders = default, BgfxEncoderStats* encoderStats = default)
		{
			CpuTimeFrame = cpuTimeFrame;
			CpuTimeBegin = cpuTimeBegin;
			CpuTimeEnd = cpuTimeEnd;
			CpuTimerFreq = cpuTimerFreq;
			GpuTimeBegin = gpuTimeBegin;
			GpuTimeEnd = gpuTimeEnd;
			GpuTimerFreq = gpuTimerFreq;
			WaitRender = waitRender;
			WaitSubmit = waitSubmit;
			NumDraw = numDraw;
			NumCompute = numCompute;
			NumBlit = numBlit;
			MaxGpuLatency = maxGpuLatency;
			GpuFrameNum = gpuFrameNum;
			NumDynamicIndexBuffers = numDynamicIndexBuffers;
			NumDynamicVertexBuffers = numDynamicVertexBuffers;
			NumFrameBuffers = numFrameBuffers;
			NumIndexBuffers = numIndexBuffers;
			NumOcclusionQueries = numOcclusionQueries;
			NumPrograms = numPrograms;
			NumShaders = numShaders;
			NumTextures = numTextures;
			NumUniforms = numUniforms;
			NumVertexBuffers = numVertexBuffers;
			NumVertexLayouts = numVertexLayouts;
			TextureMemoryUsed = textureMemoryUsed;
			RtMemoryUsed = rtMemoryUsed;
			TransientVbUsed = transientVbUsed;
			TransientIbUsed = transientIbUsed;
			if (numPrims != default(Span<uint>))
			{
				NumPrims_0 = numPrims[0];
				NumPrims_1 = numPrims[1];
				NumPrims_2 = numPrims[2];
				NumPrims_3 = numPrims[3];
				NumPrims_4 = numPrims[4];
			}
			GpuMemoryMax = gpuMemoryMax;
			GpuMemoryUsed = gpuMemoryUsed;
			Width = width;
			Height = height;
			TextWidth = textWidth;
			TextHeight = textHeight;
			NumViews = numViews;
			ViewStats = viewStats;
			NumEncoders = numEncoders;
			EncoderStats = encoderStats;
		}


	}

}
