// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Bgfx
{
	public unsafe partial class Bgfx
	{

		/// <summary>
		/// End submitting draw calls from thread.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_end")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderEnd([NativeName(NativeNameType.Param, "_encoder")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder encoder)
		{
			fixed (BgfxEncoder* pencoder = &encoder)
			{
				BgfxEncoderEndNative((BgfxEncoder*)pencoder);
			}
		}

		/// <summary>
		/// Sets a debug marker. This allows you to group graphics calls together for easy browsing in<br/>
		/// graphics debugging tools.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_marker")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetMarkerNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, byte*, int, void>)vt[108])(@this, name, len);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, void>)vt[108])((nint)@this, (nint)name, len);
			#endif
		}

		/// <summary>
		/// Sets a debug marker. This allows you to group graphics calls together for easy browsing in<br/>
		/// graphics debugging tools.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_marker")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetMarker([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			BgfxEncoderSetMarkerNative(@this, name, len);
		}

		/// <summary>
		/// Sets a debug marker. This allows you to group graphics calls together for easy browsing in<br/>
		/// graphics debugging tools.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_marker")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetMarker([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetMarkerNative((BgfxEncoder*)pthis, name, len);
			}
		}

		/// <summary>
		/// Sets a debug marker. This allows you to group graphics calls together for easy browsing in<br/>
		/// graphics debugging tools.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_marker")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetMarker([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			fixed (byte* pname = &name)
			{
				BgfxEncoderSetMarkerNative(@this, (byte*)pname, len);
			}
		}

		/// <summary>
		/// Sets a debug marker. This allows you to group graphics calls together for easy browsing in<br/>
		/// graphics debugging tools.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_marker")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetMarker([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			fixed (byte* pname = name)
			{
				BgfxEncoderSetMarkerNative(@this, (byte*)pname, len);
			}
		}

		/// <summary>
		/// Sets a debug marker. This allows you to group graphics calls together for easy browsing in<br/>
		/// graphics debugging tools.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_marker")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetMarker([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] string name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			BgfxEncoderSetMarkerNative(@this, pStr0, len);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Sets a debug marker. This allows you to group graphics calls together for easy browsing in<br/>
		/// graphics debugging tools.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_marker")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetMarker([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				fixed (byte* pname = &name)
				{
					BgfxEncoderSetMarkerNative((BgfxEncoder*)pthis, (byte*)pname, len);
				}
			}
		}

		/// <summary>
		/// Sets a debug marker. This allows you to group graphics calls together for easy browsing in<br/>
		/// graphics debugging tools.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_marker")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetMarker([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				fixed (byte* pname = name)
				{
					BgfxEncoderSetMarkerNative((BgfxEncoder*)pthis, (byte*)pname, len);
				}
			}
		}

		/// <summary>
		/// Sets a debug marker. This allows you to group graphics calls together for easy browsing in<br/>
		/// graphics debugging tools.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_marker")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetMarker([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] string name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (name != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(name);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				BgfxEncoderSetMarkerNative((BgfxEncoder*)pthis, pStr0, len);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// Set render states for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_state")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetStateNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_state")] [NativeName(NativeNameType.Type, "uint64_t")] ulong state, [NativeName(NativeNameType.Param, "_rgba")] [NativeName(NativeNameType.Type, "uint32_t")] uint rgba)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, ulong, uint, void>)vt[109])(@this, state, rgba);
			#else
			((delegate* unmanaged[Cdecl]<nint, ulong, uint, void>)vt[109])((nint)@this, state, rgba);
			#endif
		}

		/// <summary>
		/// Set render states for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_state")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetState([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_state")] [NativeName(NativeNameType.Type, "uint64_t")] ulong state, [NativeName(NativeNameType.Param, "_rgba")] [NativeName(NativeNameType.Type, "uint32_t")] uint rgba)
		{
			BgfxEncoderSetStateNative(@this, state, rgba);
		}

		/// <summary>
		/// Set render states for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_state")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetState([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_state")] [NativeName(NativeNameType.Type, "uint64_t")] ulong state, [NativeName(NativeNameType.Param, "_rgba")] [NativeName(NativeNameType.Type, "uint32_t")] uint rgba)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetStateNative((BgfxEncoder*)pthis, state, rgba);
			}
		}

		/// <summary>
		/// Set condition for rendering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_condition")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetConditionNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_occlusion_query_handle_t")] BgfxOcclusionQueryHandle handle, [NativeName(NativeNameType.Param, "_visible")] [NativeName(NativeNameType.Type, "bool")] byte visible)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, BgfxOcclusionQueryHandle, byte, void>)vt[110])(@this, handle, visible);
			#else
			((delegate* unmanaged[Cdecl]<nint, BgfxOcclusionQueryHandle, byte, void>)vt[110])((nint)@this, handle, visible);
			#endif
		}

		/// <summary>
		/// Set condition for rendering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_condition")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetCondition([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_occlusion_query_handle_t")] BgfxOcclusionQueryHandle handle, [NativeName(NativeNameType.Param, "_visible")] [NativeName(NativeNameType.Type, "bool")] bool visible)
		{
			BgfxEncoderSetConditionNative(@this, handle, visible ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Set condition for rendering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_condition")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetCondition([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_occlusion_query_handle_t")] BgfxOcclusionQueryHandle handle, [NativeName(NativeNameType.Param, "_visible")] [NativeName(NativeNameType.Type, "bool")] bool visible)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetConditionNative((BgfxEncoder*)pthis, handle, visible ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// Set stencil test state.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_stencil")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetStencilNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_fstencil")] [NativeName(NativeNameType.Type, "uint32_t")] uint fstencil, [NativeName(NativeNameType.Param, "_bstencil")] [NativeName(NativeNameType.Type, "uint32_t")] uint bstencil)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, uint, uint, void>)vt[111])(@this, fstencil, bstencil);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, uint, void>)vt[111])((nint)@this, fstencil, bstencil);
			#endif
		}

		/// <summary>
		/// Set stencil test state.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_stencil")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetStencil([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_fstencil")] [NativeName(NativeNameType.Type, "uint32_t")] uint fstencil, [NativeName(NativeNameType.Param, "_bstencil")] [NativeName(NativeNameType.Type, "uint32_t")] uint bstencil)
		{
			BgfxEncoderSetStencilNative(@this, fstencil, bstencil);
		}

		/// <summary>
		/// Set stencil test state.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_stencil")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetStencil([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_fstencil")] [NativeName(NativeNameType.Type, "uint32_t")] uint fstencil, [NativeName(NativeNameType.Param, "_bstencil")] [NativeName(NativeNameType.Type, "uint32_t")] uint bstencil)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetStencilNative((BgfxEncoder*)pthis, fstencil, bstencil);
			}
		}

		/// <summary>
		/// Set scissor for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_scissor")]
		[return: NativeName(NativeNameType.Type, "uint16_t")]
		internal static ushort BgfxEncoderSetScissorNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxEncoder*, ushort, ushort, ushort, ushort, ushort>)vt[112])(@this, x, y, width, height);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort, ushort, ushort, ushort, ushort>)vt[112])((nint)@this, x, y, width, height);
			#endif
		}

		/// <summary>
		/// Set scissor for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_scissor")]
		[return: NativeName(NativeNameType.Type, "uint16_t")]
		public static ushort BgfxEncoderSetScissor([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height)
		{
			ushort ret = BgfxEncoderSetScissorNative(@this, x, y, width, height);
			return ret;
		}

		/// <summary>
		/// Set scissor for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_scissor")]
		[return: NativeName(NativeNameType.Type, "uint16_t")]
		public static ushort BgfxEncoderSetScissor([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				ushort ret = BgfxEncoderSetScissorNative((BgfxEncoder*)pthis, x, y, width, height);
				return ret;
			}
		}

		/// <summary>
		/// Set scissor from cache for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_scissor_cached")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetScissorCachedNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_cache")] [NativeName(NativeNameType.Type, "uint16_t")] ushort cache)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, ushort, void>)vt[113])(@this, cache);
			#else
			((delegate* unmanaged[Cdecl]<nint, ushort, void>)vt[113])((nint)@this, cache);
			#endif
		}

		/// <summary>
		/// Set scissor from cache for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_scissor_cached")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetScissorCached([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_cache")] [NativeName(NativeNameType.Type, "uint16_t")] ushort cache)
		{
			BgfxEncoderSetScissorCachedNative(@this, cache);
		}

		/// <summary>
		/// Set scissor from cache for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_scissor_cached")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetScissorCached([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_cache")] [NativeName(NativeNameType.Type, "uint16_t")] ushort cache)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetScissorCachedNative((BgfxEncoder*)pthis, cache);
			}
		}

		/// <summary>
		/// Set model matrix for draw primitive. If it is not called,<br/>
		/// the model will be rendered with an identity model matrix.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transform")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		internal static uint BgfxEncoderSetTransformNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_mtx")] [NativeName(NativeNameType.Type, "const void*")] void* mtx, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxEncoder*, void*, ushort, uint>)vt[114])(@this, mtx, num);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, ushort, uint>)vt[114])((nint)@this, (nint)mtx, num);
			#endif
		}

		/// <summary>
		/// Set model matrix for draw primitive. If it is not called,<br/>
		/// the model will be rendered with an identity model matrix.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transform")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint BgfxEncoderSetTransform([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_mtx")] [NativeName(NativeNameType.Type, "const void*")] void* mtx, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			uint ret = BgfxEncoderSetTransformNative(@this, mtx, num);
			return ret;
		}

		/// <summary>
		/// Set model matrix for draw primitive. If it is not called,<br/>
		/// the model will be rendered with an identity model matrix.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transform")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint BgfxEncoderSetTransform([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_mtx")] [NativeName(NativeNameType.Type, "const void*")] void* mtx, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				uint ret = BgfxEncoderSetTransformNative((BgfxEncoder*)pthis, mtx, num);
				return ret;
			}
		}

		/// <summary>
		/// Set model matrix from matrix cache for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transform_cached")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetTransformCachedNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_cache")] [NativeName(NativeNameType.Type, "uint32_t")] uint cache, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, uint, ushort, void>)vt[115])(@this, cache, num);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, ushort, void>)vt[115])((nint)@this, cache, num);
			#endif
		}

		/// <summary>
		/// Set model matrix from matrix cache for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transform_cached")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetTransformCached([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_cache")] [NativeName(NativeNameType.Type, "uint32_t")] uint cache, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			BgfxEncoderSetTransformCachedNative(@this, cache, num);
		}

		/// <summary>
		/// Set model matrix from matrix cache for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transform_cached")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetTransformCached([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_cache")] [NativeName(NativeNameType.Type, "uint32_t")] uint cache, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetTransformCachedNative((BgfxEncoder*)pthis, cache, num);
			}
		}

		/// <summary>
		/// Reserve matrices in internal matrix cache.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_alloc_transform")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		internal static uint BgfxEncoderAllocTransformNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_transform")] [NativeName(NativeNameType.Type, "bgfx_transform_t*")] BgfxTransform* transform, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxEncoder*, BgfxTransform*, ushort, uint>)vt[116])(@this, transform, num);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, ushort, uint>)vt[116])((nint)@this, (nint)transform, num);
			#endif
		}

		/// <summary>
		/// Reserve matrices in internal matrix cache.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_alloc_transform")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint BgfxEncoderAllocTransform([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_transform")] [NativeName(NativeNameType.Type, "bgfx_transform_t*")] BgfxTransform* transform, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			uint ret = BgfxEncoderAllocTransformNative(@this, transform, num);
			return ret;
		}

		/// <summary>
		/// Reserve matrices in internal matrix cache.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_alloc_transform")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint BgfxEncoderAllocTransform([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_transform")] [NativeName(NativeNameType.Type, "bgfx_transform_t*")] BgfxTransform* transform, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				uint ret = BgfxEncoderAllocTransformNative((BgfxEncoder*)pthis, transform, num);
				return ret;
			}
		}

		/// <summary>
		/// Reserve matrices in internal matrix cache.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_alloc_transform")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint BgfxEncoderAllocTransform([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_transform")] [NativeName(NativeNameType.Type, "bgfx_transform_t*")] ref BgfxTransform transform, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			fixed (BgfxTransform* ptransform = &transform)
			{
				uint ret = BgfxEncoderAllocTransformNative(@this, (BgfxTransform*)ptransform, num);
				return ret;
			}
		}

		/// <summary>
		/// Reserve matrices in internal matrix cache.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_alloc_transform")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint BgfxEncoderAllocTransform([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_transform")] [NativeName(NativeNameType.Type, "bgfx_transform_t*")] ref BgfxTransform transform, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				fixed (BgfxTransform* ptransform = &transform)
				{
					uint ret = BgfxEncoderAllocTransformNative((BgfxEncoder*)pthis, (BgfxTransform*)ptransform, num);
					return ret;
				}
			}
		}

		/// <summary>
		/// Set shader uniform parameter for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_uniform")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetUniformNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_uniform_handle_t")] BgfxUniformHandle handle, [NativeName(NativeNameType.Param, "_value")] [NativeName(NativeNameType.Type, "const void*")] void* value, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, BgfxUniformHandle, void*, ushort, void>)vt[117])(@this, handle, value, num);
			#else
			((delegate* unmanaged[Cdecl]<nint, BgfxUniformHandle, nint, ushort, void>)vt[117])((nint)@this, handle, (nint)value, num);
			#endif
		}

		/// <summary>
		/// Set shader uniform parameter for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_uniform")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetUniform([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_uniform_handle_t")] BgfxUniformHandle handle, [NativeName(NativeNameType.Param, "_value")] [NativeName(NativeNameType.Type, "const void*")] void* value, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			BgfxEncoderSetUniformNative(@this, handle, value, num);
		}

		/// <summary>
		/// Set shader uniform parameter for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_uniform")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetUniform([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_uniform_handle_t")] BgfxUniformHandle handle, [NativeName(NativeNameType.Param, "_value")] [NativeName(NativeNameType.Type, "const void*")] void* value, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetUniformNative((BgfxEncoder*)pthis, handle, value, num);
			}
		}

		/// <summary>
		/// Set index buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetIndexBufferNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_firstIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint firstIndex, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, BgfxIndexBufferHandle, uint, uint, void>)vt[118])(@this, handle, firstIndex, numIndices);
			#else
			((delegate* unmanaged[Cdecl]<nint, BgfxIndexBufferHandle, uint, uint, void>)vt[118])((nint)@this, handle, firstIndex, numIndices);
			#endif
		}

		/// <summary>
		/// Set index buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetIndexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_firstIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint firstIndex, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices)
		{
			BgfxEncoderSetIndexBufferNative(@this, handle, firstIndex, numIndices);
		}

		/// <summary>
		/// Set index buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetIndexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_firstIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint firstIndex, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetIndexBufferNative((BgfxEncoder*)pthis, handle, firstIndex, numIndices);
			}
		}

		/// <summary>
		/// Set index buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_dynamic_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetDynamicIndexBufferNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t")] BgfxDynamicIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_firstIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint firstIndex, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, BgfxDynamicIndexBufferHandle, uint, uint, void>)vt[119])(@this, handle, firstIndex, numIndices);
			#else
			((delegate* unmanaged[Cdecl]<nint, BgfxDynamicIndexBufferHandle, uint, uint, void>)vt[119])((nint)@this, handle, firstIndex, numIndices);
			#endif
		}

		/// <summary>
		/// Set index buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_dynamic_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetDynamicIndexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t")] BgfxDynamicIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_firstIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint firstIndex, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices)
		{
			BgfxEncoderSetDynamicIndexBufferNative(@this, handle, firstIndex, numIndices);
		}

		/// <summary>
		/// Set index buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_dynamic_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetDynamicIndexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t")] BgfxDynamicIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_firstIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint firstIndex, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetDynamicIndexBufferNative((BgfxEncoder*)pthis, handle, firstIndex, numIndices);
			}
		}

		/// <summary>
		/// Set index buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transient_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetTransientIndexBufferNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_tib")] [NativeName(NativeNameType.Type, "const bgfx_transient_index_buffer_t*")] BgfxTransientIndexBuffer* tib, [NativeName(NativeNameType.Param, "_firstIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint firstIndex, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, BgfxTransientIndexBuffer*, uint, uint, void>)vt[120])(@this, tib, firstIndex, numIndices);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, uint, uint, void>)vt[120])((nint)@this, (nint)tib, firstIndex, numIndices);
			#endif
		}

		/// <summary>
		/// Set index buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transient_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetTransientIndexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_tib")] [NativeName(NativeNameType.Type, "const bgfx_transient_index_buffer_t*")] BgfxTransientIndexBuffer* tib, [NativeName(NativeNameType.Param, "_firstIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint firstIndex, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices)
		{
			BgfxEncoderSetTransientIndexBufferNative(@this, tib, firstIndex, numIndices);
		}

		/// <summary>
		/// Set index buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transient_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetTransientIndexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_tib")] [NativeName(NativeNameType.Type, "const bgfx_transient_index_buffer_t*")] BgfxTransientIndexBuffer* tib, [NativeName(NativeNameType.Param, "_firstIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint firstIndex, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetTransientIndexBufferNative((BgfxEncoder*)pthis, tib, firstIndex, numIndices);
			}
		}

		/// <summary>
		/// Set index buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transient_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetTransientIndexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_tib")] [NativeName(NativeNameType.Type, "const bgfx_transient_index_buffer_t*")] ref BgfxTransientIndexBuffer tib, [NativeName(NativeNameType.Param, "_firstIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint firstIndex, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices)
		{
			fixed (BgfxTransientIndexBuffer* ptib = &tib)
			{
				BgfxEncoderSetTransientIndexBufferNative(@this, (BgfxTransientIndexBuffer*)ptib, firstIndex, numIndices);
			}
		}

		/// <summary>
		/// Set index buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transient_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetTransientIndexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_tib")] [NativeName(NativeNameType.Type, "const bgfx_transient_index_buffer_t*")] ref BgfxTransientIndexBuffer tib, [NativeName(NativeNameType.Param, "_firstIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint firstIndex, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				fixed (BgfxTransientIndexBuffer* ptib = &tib)
				{
					BgfxEncoderSetTransientIndexBufferNative((BgfxEncoder*)pthis, (BgfxTransientIndexBuffer*)ptib, firstIndex, numIndices);
				}
			}
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetVertexBufferNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, byte, BgfxVertexBufferHandle, uint, uint, void>)vt[121])(@this, stream, handle, startVertex, numVertices);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, BgfxVertexBufferHandle, uint, uint, void>)vt[121])((nint)@this, stream, handle, startVertex, numVertices);
			#endif
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetVertexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			BgfxEncoderSetVertexBufferNative(@this, stream, handle, startVertex, numVertices);
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetVertexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetVertexBufferNative((BgfxEncoder*)pthis, stream, handle, startVertex, numVertices);
			}
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_vertex_buffer_with_layout")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetVertexBufferWithLayoutNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_layoutHandle")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")] BgfxVertexLayoutHandle layoutHandle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, byte, BgfxVertexBufferHandle, uint, uint, BgfxVertexLayoutHandle, void>)vt[122])(@this, stream, handle, startVertex, numVertices, layoutHandle);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, BgfxVertexBufferHandle, uint, uint, BgfxVertexLayoutHandle, void>)vt[122])((nint)@this, stream, handle, startVertex, numVertices, layoutHandle);
			#endif
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_vertex_buffer_with_layout")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetVertexBufferWithLayout([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_layoutHandle")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")] BgfxVertexLayoutHandle layoutHandle)
		{
			BgfxEncoderSetVertexBufferWithLayoutNative(@this, stream, handle, startVertex, numVertices, layoutHandle);
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_vertex_buffer_with_layout")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetVertexBufferWithLayout([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_layoutHandle")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")] BgfxVertexLayoutHandle layoutHandle)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetVertexBufferWithLayoutNative((BgfxEncoder*)pthis, stream, handle, startVertex, numVertices, layoutHandle);
			}
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetDynamicVertexBufferNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, byte, BgfxDynamicVertexBufferHandle, uint, uint, void>)vt[123])(@this, stream, handle, startVertex, numVertices);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, BgfxDynamicVertexBufferHandle, uint, uint, void>)vt[123])((nint)@this, stream, handle, startVertex, numVertices);
			#endif
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetDynamicVertexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			BgfxEncoderSetDynamicVertexBufferNative(@this, stream, handle, startVertex, numVertices);
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetDynamicVertexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetDynamicVertexBufferNative((BgfxEncoder*)pthis, stream, handle, startVertex, numVertices);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_dynamic_vertex_buffer_with_layout")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetDynamicVertexBufferWithLayoutNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_layoutHandle")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")] BgfxVertexLayoutHandle layoutHandle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, byte, BgfxDynamicVertexBufferHandle, uint, uint, BgfxVertexLayoutHandle, void>)vt[124])(@this, stream, handle, startVertex, numVertices, layoutHandle);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, BgfxDynamicVertexBufferHandle, uint, uint, BgfxVertexLayoutHandle, void>)vt[124])((nint)@this, stream, handle, startVertex, numVertices, layoutHandle);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_dynamic_vertex_buffer_with_layout")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetDynamicVertexBufferWithLayout([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_layoutHandle")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")] BgfxVertexLayoutHandle layoutHandle)
		{
			BgfxEncoderSetDynamicVertexBufferWithLayoutNative(@this, stream, handle, startVertex, numVertices, layoutHandle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_dynamic_vertex_buffer_with_layout")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetDynamicVertexBufferWithLayout([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_layoutHandle")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")] BgfxVertexLayoutHandle layoutHandle)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetDynamicVertexBufferWithLayoutNative((BgfxEncoder*)pthis, stream, handle, startVertex, numVertices, layoutHandle);
			}
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transient_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetTransientVertexBufferNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "const bgfx_transient_vertex_buffer_t*")] BgfxTransientVertexBuffer* tvb, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, byte, BgfxTransientVertexBuffer*, uint, uint, void>)vt[125])(@this, stream, tvb, startVertex, numVertices);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, nint, uint, uint, void>)vt[125])((nint)@this, stream, (nint)tvb, startVertex, numVertices);
			#endif
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transient_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetTransientVertexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "const bgfx_transient_vertex_buffer_t*")] BgfxTransientVertexBuffer* tvb, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			BgfxEncoderSetTransientVertexBufferNative(@this, stream, tvb, startVertex, numVertices);
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transient_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetTransientVertexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "const bgfx_transient_vertex_buffer_t*")] BgfxTransientVertexBuffer* tvb, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetTransientVertexBufferNative((BgfxEncoder*)pthis, stream, tvb, startVertex, numVertices);
			}
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transient_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetTransientVertexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "const bgfx_transient_vertex_buffer_t*")] ref BgfxTransientVertexBuffer tvb, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			fixed (BgfxTransientVertexBuffer* ptvb = &tvb)
			{
				BgfxEncoderSetTransientVertexBufferNative(@this, stream, (BgfxTransientVertexBuffer*)ptvb, startVertex, numVertices);
			}
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transient_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetTransientVertexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "const bgfx_transient_vertex_buffer_t*")] ref BgfxTransientVertexBuffer tvb, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				fixed (BgfxTransientVertexBuffer* ptvb = &tvb)
				{
					BgfxEncoderSetTransientVertexBufferNative((BgfxEncoder*)pthis, stream, (BgfxTransientVertexBuffer*)ptvb, startVertex, numVertices);
				}
			}
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transient_vertex_buffer_with_layout")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetTransientVertexBufferWithLayoutNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "const bgfx_transient_vertex_buffer_t*")] BgfxTransientVertexBuffer* tvb, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_layoutHandle")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")] BgfxVertexLayoutHandle layoutHandle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, byte, BgfxTransientVertexBuffer*, uint, uint, BgfxVertexLayoutHandle, void>)vt[126])(@this, stream, tvb, startVertex, numVertices, layoutHandle);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, nint, uint, uint, BgfxVertexLayoutHandle, void>)vt[126])((nint)@this, stream, (nint)tvb, startVertex, numVertices, layoutHandle);
			#endif
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transient_vertex_buffer_with_layout")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetTransientVertexBufferWithLayout([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "const bgfx_transient_vertex_buffer_t*")] BgfxTransientVertexBuffer* tvb, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_layoutHandle")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")] BgfxVertexLayoutHandle layoutHandle)
		{
			BgfxEncoderSetTransientVertexBufferWithLayoutNative(@this, stream, tvb, startVertex, numVertices, layoutHandle);
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transient_vertex_buffer_with_layout")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetTransientVertexBufferWithLayout([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "const bgfx_transient_vertex_buffer_t*")] BgfxTransientVertexBuffer* tvb, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_layoutHandle")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")] BgfxVertexLayoutHandle layoutHandle)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetTransientVertexBufferWithLayoutNative((BgfxEncoder*)pthis, stream, tvb, startVertex, numVertices, layoutHandle);
			}
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transient_vertex_buffer_with_layout")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetTransientVertexBufferWithLayout([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "const bgfx_transient_vertex_buffer_t*")] ref BgfxTransientVertexBuffer tvb, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_layoutHandle")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")] BgfxVertexLayoutHandle layoutHandle)
		{
			fixed (BgfxTransientVertexBuffer* ptvb = &tvb)
			{
				BgfxEncoderSetTransientVertexBufferWithLayoutNative(@this, stream, (BgfxTransientVertexBuffer*)ptvb, startVertex, numVertices, layoutHandle);
			}
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_transient_vertex_buffer_with_layout")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetTransientVertexBufferWithLayout([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "const bgfx_transient_vertex_buffer_t*")] ref BgfxTransientVertexBuffer tvb, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_layoutHandle")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")] BgfxVertexLayoutHandle layoutHandle)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				fixed (BgfxTransientVertexBuffer* ptvb = &tvb)
				{
					BgfxEncoderSetTransientVertexBufferWithLayoutNative((BgfxEncoder*)pthis, stream, (BgfxTransientVertexBuffer*)ptvb, startVertex, numVertices, layoutHandle);
				}
			}
		}

		/// <summary>
		/// Set number of vertices for auto generated vertices use in conjunction<br/>
		/// with gl_VertexID.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_vertex_count")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetVertexCountNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, uint, void>)vt[127])(@this, numVertices);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, void>)vt[127])((nint)@this, numVertices);
			#endif
		}

		/// <summary>
		/// Set number of vertices for auto generated vertices use in conjunction<br/>
		/// with gl_VertexID.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_vertex_count")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetVertexCount([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			BgfxEncoderSetVertexCountNative(@this, numVertices);
		}

		/// <summary>
		/// Set number of vertices for auto generated vertices use in conjunction<br/>
		/// with gl_VertexID.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_vertex_count")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetVertexCount([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetVertexCountNative((BgfxEncoder*)pthis, numVertices);
			}
		}

		/// <summary>
		/// Set instance data buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_instance_data_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetInstanceDataBufferNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_idb")] [NativeName(NativeNameType.Type, "const bgfx_instance_data_buffer_t*")] BgfxInstanceDataBuffer* idb, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, BgfxInstanceDataBuffer*, uint, uint, void>)vt[128])(@this, idb, start, num);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, uint, uint, void>)vt[128])((nint)@this, (nint)idb, start, num);
			#endif
		}

		/// <summary>
		/// Set instance data buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_instance_data_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetInstanceDataBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_idb")] [NativeName(NativeNameType.Type, "const bgfx_instance_data_buffer_t*")] BgfxInstanceDataBuffer* idb, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			BgfxEncoderSetInstanceDataBufferNative(@this, idb, start, num);
		}

		/// <summary>
		/// Set instance data buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_instance_data_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetInstanceDataBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_idb")] [NativeName(NativeNameType.Type, "const bgfx_instance_data_buffer_t*")] BgfxInstanceDataBuffer* idb, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetInstanceDataBufferNative((BgfxEncoder*)pthis, idb, start, num);
			}
		}

		/// <summary>
		/// Set instance data buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_instance_data_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetInstanceDataBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_idb")] [NativeName(NativeNameType.Type, "const bgfx_instance_data_buffer_t*")] ref BgfxInstanceDataBuffer idb, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			fixed (BgfxInstanceDataBuffer* pidb = &idb)
			{
				BgfxEncoderSetInstanceDataBufferNative(@this, (BgfxInstanceDataBuffer*)pidb, start, num);
			}
		}

		/// <summary>
		/// Set instance data buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_instance_data_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetInstanceDataBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_idb")] [NativeName(NativeNameType.Type, "const bgfx_instance_data_buffer_t*")] ref BgfxInstanceDataBuffer idb, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				fixed (BgfxInstanceDataBuffer* pidb = &idb)
				{
					BgfxEncoderSetInstanceDataBufferNative((BgfxEncoder*)pthis, (BgfxInstanceDataBuffer*)pidb, start, num);
				}
			}
		}

		/// <summary>
		/// Set instance data buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_instance_data_from_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetInstanceDataFromVertexBufferNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, BgfxVertexBufferHandle, uint, uint, void>)vt[129])(@this, handle, startVertex, num);
			#else
			((delegate* unmanaged[Cdecl]<nint, BgfxVertexBufferHandle, uint, uint, void>)vt[129])((nint)@this, handle, startVertex, num);
			#endif
		}

		/// <summary>
		/// Set instance data buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_instance_data_from_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetInstanceDataFromVertexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			BgfxEncoderSetInstanceDataFromVertexBufferNative(@this, handle, startVertex, num);
		}

		/// <summary>
		/// Set instance data buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_instance_data_from_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetInstanceDataFromVertexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetInstanceDataFromVertexBufferNative((BgfxEncoder*)pthis, handle, startVertex, num);
			}
		}

		/// <summary>
		/// Set instance data buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_instance_data_from_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetInstanceDataFromDynamicVertexBufferNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, BgfxDynamicVertexBufferHandle, uint, uint, void>)vt[130])(@this, handle, startVertex, num);
			#else
			((delegate* unmanaged[Cdecl]<nint, BgfxDynamicVertexBufferHandle, uint, uint, void>)vt[130])((nint)@this, handle, startVertex, num);
			#endif
		}

		/// <summary>
		/// Set instance data buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_instance_data_from_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetInstanceDataFromDynamicVertexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			BgfxEncoderSetInstanceDataFromDynamicVertexBufferNative(@this, handle, startVertex, num);
		}

		/// <summary>
		/// Set instance data buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_instance_data_from_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetInstanceDataFromDynamicVertexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetInstanceDataFromDynamicVertexBufferNative((BgfxEncoder*)pthis, handle, startVertex, num);
			}
		}

		/// <summary>
		/// Set number of instances for auto generated instances use in conjunction<br/>
		/// with gl_InstanceID.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_instance_count")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetInstanceCountNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_numInstances")] [NativeName(NativeNameType.Type, "uint32_t")] uint numInstances)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, uint, void>)vt[131])(@this, numInstances);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, void>)vt[131])((nint)@this, numInstances);
			#endif
		}

		/// <summary>
		/// Set number of instances for auto generated instances use in conjunction<br/>
		/// with gl_InstanceID.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_instance_count")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetInstanceCount([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_numInstances")] [NativeName(NativeNameType.Type, "uint32_t")] uint numInstances)
		{
			BgfxEncoderSetInstanceCountNative(@this, numInstances);
		}

		/// <summary>
		/// Set number of instances for auto generated instances use in conjunction<br/>
		/// with gl_InstanceID.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_instance_count")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetInstanceCount([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_numInstances")] [NativeName(NativeNameType.Type, "uint32_t")] uint numInstances)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetInstanceCountNative((BgfxEncoder*)pthis, numInstances);
			}
		}

		/// <summary>
		/// Set texture stage for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_texture")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetTextureNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_sampler")] [NativeName(NativeNameType.Type, "bgfx_uniform_handle_t")] BgfxUniformHandle sampler, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint32_t")] uint flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, byte, BgfxUniformHandle, BgfxTextureHandle, uint, void>)vt[132])(@this, stage, sampler, handle, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, BgfxUniformHandle, BgfxTextureHandle, uint, void>)vt[132])((nint)@this, stage, sampler, handle, flags);
			#endif
		}

		/// <summary>
		/// Set texture stage for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_texture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetTexture([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_sampler")] [NativeName(NativeNameType.Type, "bgfx_uniform_handle_t")] BgfxUniformHandle sampler, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint32_t")] uint flags)
		{
			BgfxEncoderSetTextureNative(@this, stage, sampler, handle, flags);
		}

		/// <summary>
		/// Set texture stage for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_texture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetTexture([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_sampler")] [NativeName(NativeNameType.Type, "bgfx_uniform_handle_t")] BgfxUniformHandle sampler, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint32_t")] uint flags)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetTextureNative((BgfxEncoder*)pthis, stage, sampler, handle, flags);
			}
		}

		/// <summary>
		/// Submit an empty primitive for rendering. Uniforms and draw state<br/>
		/// will be applied but no geometry will be submitted. Useful in cases<br/>
		/// when no other draw/compute primitive is submitted to view, but it's<br/>
		/// desired to execute clear view.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_touch")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderTouchNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, ushort, void>)vt[133])(@this, id);
			#else
			((delegate* unmanaged[Cdecl]<nint, ushort, void>)vt[133])((nint)@this, id);
			#endif
		}

		/// <summary>
		/// Submit an empty primitive for rendering. Uniforms and draw state<br/>
		/// will be applied but no geometry will be submitted. Useful in cases<br/>
		/// when no other draw/compute primitive is submitted to view, but it's<br/>
		/// desired to execute clear view.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_touch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderTouch([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id)
		{
			BgfxEncoderTouchNative(@this, id);
		}

		/// <summary>
		/// Submit an empty primitive for rendering. Uniforms and draw state<br/>
		/// will be applied but no geometry will be submitted. Useful in cases<br/>
		/// when no other draw/compute primitive is submitted to view, but it's<br/>
		/// desired to execute clear view.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_touch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderTouch([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderTouchNative((BgfxEncoder*)pthis, id);
			}
		}

		/// <summary>
		/// Submit primitive for rendering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_submit")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSubmitNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint32_t")] uint depth, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, ushort, BgfxProgramHandle, uint, byte, void>)vt[134])(@this, id, program, depth, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, ushort, BgfxProgramHandle, uint, byte, void>)vt[134])((nint)@this, id, program, depth, flags);
			#endif
		}

		/// <summary>
		/// Submit primitive for rendering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_submit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSubmit([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint32_t")] uint depth, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			BgfxEncoderSubmitNative(@this, id, program, depth, flags);
		}

		/// <summary>
		/// Submit primitive for rendering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_submit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSubmit([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint32_t")] uint depth, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSubmitNative((BgfxEncoder*)pthis, id, program, depth, flags);
			}
		}

		/// <summary>
		/// Submit primitive with occlusion query for rendering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_submit_occlusion_query")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSubmitOcclusionQueryNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_occlusionQuery")] [NativeName(NativeNameType.Type, "bgfx_occlusion_query_handle_t")] BgfxOcclusionQueryHandle occlusionQuery, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint32_t")] uint depth, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, ushort, BgfxProgramHandle, BgfxOcclusionQueryHandle, uint, byte, void>)vt[135])(@this, id, program, occlusionQuery, depth, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, ushort, BgfxProgramHandle, BgfxOcclusionQueryHandle, uint, byte, void>)vt[135])((nint)@this, id, program, occlusionQuery, depth, flags);
			#endif
		}

		/// <summary>
		/// Submit primitive with occlusion query for rendering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_submit_occlusion_query")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSubmitOcclusionQuery([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_occlusionQuery")] [NativeName(NativeNameType.Type, "bgfx_occlusion_query_handle_t")] BgfxOcclusionQueryHandle occlusionQuery, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint32_t")] uint depth, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			BgfxEncoderSubmitOcclusionQueryNative(@this, id, program, occlusionQuery, depth, flags);
		}

		/// <summary>
		/// Submit primitive with occlusion query for rendering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_submit_occlusion_query")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSubmitOcclusionQuery([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_occlusionQuery")] [NativeName(NativeNameType.Type, "bgfx_occlusion_query_handle_t")] BgfxOcclusionQueryHandle occlusionQuery, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint32_t")] uint depth, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSubmitOcclusionQueryNative((BgfxEncoder*)pthis, id, program, occlusionQuery, depth, flags);
			}
		}

		/// <summary>
		/// Submit primitive for rendering with index and instance data info from<br/>
		/// indirect buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_submit_indirect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSubmitIndirectNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_indirectHandle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle indirectHandle, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint32_t")] uint depth, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, ushort, BgfxProgramHandle, BgfxIndirectBufferHandle, uint, uint, uint, byte, void>)vt[136])(@this, id, program, indirectHandle, start, num, depth, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, ushort, BgfxProgramHandle, BgfxIndirectBufferHandle, uint, uint, uint, byte, void>)vt[136])((nint)@this, id, program, indirectHandle, start, num, depth, flags);
			#endif
		}

		/// <summary>
		/// Submit primitive for rendering with index and instance data info from<br/>
		/// indirect buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_submit_indirect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSubmitIndirect([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_indirectHandle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle indirectHandle, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint32_t")] uint depth, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			BgfxEncoderSubmitIndirectNative(@this, id, program, indirectHandle, start, num, depth, flags);
		}

		/// <summary>
		/// Submit primitive for rendering with index and instance data info from<br/>
		/// indirect buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_submit_indirect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSubmitIndirect([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_indirectHandle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle indirectHandle, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint32_t")] uint depth, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSubmitIndirectNative((BgfxEncoder*)pthis, id, program, indirectHandle, start, num, depth, flags);
			}
		}

		/// <summary>
		/// Submit primitive for rendering with index and instance data info and<br/>
		/// draw count from indirect buffers.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_submit_indirect_count")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSubmitIndirectCountNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_indirectHandle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle indirectHandle, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_numHandle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle numHandle, [NativeName(NativeNameType.Param, "_numIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndex, [NativeName(NativeNameType.Param, "_numMax")] [NativeName(NativeNameType.Type, "uint32_t")] uint numMax, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint32_t")] uint depth, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, ushort, BgfxProgramHandle, BgfxIndirectBufferHandle, uint, BgfxIndexBufferHandle, uint, uint, uint, byte, void>)vt[137])(@this, id, program, indirectHandle, start, numHandle, numIndex, numMax, depth, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, ushort, BgfxProgramHandle, BgfxIndirectBufferHandle, uint, BgfxIndexBufferHandle, uint, uint, uint, byte, void>)vt[137])((nint)@this, id, program, indirectHandle, start, numHandle, numIndex, numMax, depth, flags);
			#endif
		}

		/// <summary>
		/// Submit primitive for rendering with index and instance data info and<br/>
		/// draw count from indirect buffers.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_submit_indirect_count")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSubmitIndirectCount([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_indirectHandle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle indirectHandle, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_numHandle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle numHandle, [NativeName(NativeNameType.Param, "_numIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndex, [NativeName(NativeNameType.Param, "_numMax")] [NativeName(NativeNameType.Type, "uint32_t")] uint numMax, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint32_t")] uint depth, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			BgfxEncoderSubmitIndirectCountNative(@this, id, program, indirectHandle, start, numHandle, numIndex, numMax, depth, flags);
		}

		/// <summary>
		/// Submit primitive for rendering with index and instance data info and<br/>
		/// draw count from indirect buffers.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_submit_indirect_count")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSubmitIndirectCount([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_indirectHandle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle indirectHandle, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_numHandle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle numHandle, [NativeName(NativeNameType.Param, "_numIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndex, [NativeName(NativeNameType.Param, "_numMax")] [NativeName(NativeNameType.Type, "uint32_t")] uint numMax, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint32_t")] uint depth, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSubmitIndirectCountNative((BgfxEncoder*)pthis, id, program, indirectHandle, start, numHandle, numIndex, numMax, depth, flags);
			}
		}

		/// <summary>
		/// Set compute index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_compute_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetComputeIndexBufferNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, byte, BgfxIndexBufferHandle, BgfxAccess, void>)vt[138])(@this, stage, handle, access);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, BgfxIndexBufferHandle, BgfxAccess, void>)vt[138])((nint)@this, stage, handle, access);
			#endif
		}

		/// <summary>
		/// Set compute index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_compute_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetComputeIndexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			BgfxEncoderSetComputeIndexBufferNative(@this, stage, handle, access);
		}

		/// <summary>
		/// Set compute index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_compute_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetComputeIndexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetComputeIndexBufferNative((BgfxEncoder*)pthis, stage, handle, access);
			}
		}

		/// <summary>
		/// Set compute vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_compute_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetComputeVertexBufferNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, byte, BgfxVertexBufferHandle, BgfxAccess, void>)vt[139])(@this, stage, handle, access);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, BgfxVertexBufferHandle, BgfxAccess, void>)vt[139])((nint)@this, stage, handle, access);
			#endif
		}

		/// <summary>
		/// Set compute vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_compute_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetComputeVertexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			BgfxEncoderSetComputeVertexBufferNative(@this, stage, handle, access);
		}

		/// <summary>
		/// Set compute vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_compute_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetComputeVertexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetComputeVertexBufferNative((BgfxEncoder*)pthis, stage, handle, access);
			}
		}

		/// <summary>
		/// Set compute dynamic index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_compute_dynamic_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetComputeDynamicIndexBufferNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t")] BgfxDynamicIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, byte, BgfxDynamicIndexBufferHandle, BgfxAccess, void>)vt[140])(@this, stage, handle, access);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, BgfxDynamicIndexBufferHandle, BgfxAccess, void>)vt[140])((nint)@this, stage, handle, access);
			#endif
		}

		/// <summary>
		/// Set compute dynamic index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_compute_dynamic_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetComputeDynamicIndexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t")] BgfxDynamicIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			BgfxEncoderSetComputeDynamicIndexBufferNative(@this, stage, handle, access);
		}

		/// <summary>
		/// Set compute dynamic index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_compute_dynamic_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetComputeDynamicIndexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t")] BgfxDynamicIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetComputeDynamicIndexBufferNative((BgfxEncoder*)pthis, stage, handle, access);
			}
		}

		/// <summary>
		/// Set compute dynamic vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_compute_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetComputeDynamicVertexBufferNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, byte, BgfxDynamicVertexBufferHandle, BgfxAccess, void>)vt[141])(@this, stage, handle, access);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, BgfxDynamicVertexBufferHandle, BgfxAccess, void>)vt[141])((nint)@this, stage, handle, access);
			#endif
		}

		/// <summary>
		/// Set compute dynamic vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_compute_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetComputeDynamicVertexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			BgfxEncoderSetComputeDynamicVertexBufferNative(@this, stage, handle, access);
		}

		/// <summary>
		/// Set compute dynamic vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_compute_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetComputeDynamicVertexBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetComputeDynamicVertexBufferNative((BgfxEncoder*)pthis, stage, handle, access);
			}
		}

		/// <summary>
		/// Set compute indirect buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_compute_indirect_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetComputeIndirectBufferNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, byte, BgfxIndirectBufferHandle, BgfxAccess, void>)vt[142])(@this, stage, handle, access);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, BgfxIndirectBufferHandle, BgfxAccess, void>)vt[142])((nint)@this, stage, handle, access);
			#endif
		}

		/// <summary>
		/// Set compute indirect buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_compute_indirect_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetComputeIndirectBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			BgfxEncoderSetComputeIndirectBufferNative(@this, stage, handle, access);
		}

		/// <summary>
		/// Set compute indirect buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_compute_indirect_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetComputeIndirectBuffer([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetComputeIndirectBufferNative((BgfxEncoder*)pthis, stage, handle, access);
			}
		}

		/// <summary>
		/// Set compute image from texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_image")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderSetImageNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_mip")] [NativeName(NativeNameType.Type, "uint8_t")] byte mip, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, byte, BgfxTextureHandle, byte, BgfxAccess, BgfxTextureFormat, void>)vt[143])(@this, stage, handle, mip, access, format);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, BgfxTextureHandle, byte, BgfxAccess, BgfxTextureFormat, void>)vt[143])((nint)@this, stage, handle, mip, access, format);
			#endif
		}

		/// <summary>
		/// Set compute image from texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_image")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetImage([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_mip")] [NativeName(NativeNameType.Type, "uint8_t")] byte mip, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format)
		{
			BgfxEncoderSetImageNative(@this, stage, handle, mip, access, format);
		}

		/// <summary>
		/// Set compute image from texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_set_image")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderSetImage([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_mip")] [NativeName(NativeNameType.Type, "uint8_t")] byte mip, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderSetImageNative((BgfxEncoder*)pthis, stage, handle, mip, access, format);
			}
		}

		/// <summary>
		/// Dispatch compute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_dispatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderDispatchNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_numX")] [NativeName(NativeNameType.Type, "uint32_t")] uint numX, [NativeName(NativeNameType.Param, "_numY")] [NativeName(NativeNameType.Type, "uint32_t")] uint numY, [NativeName(NativeNameType.Param, "_numZ")] [NativeName(NativeNameType.Type, "uint32_t")] uint numZ, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, ushort, BgfxProgramHandle, uint, uint, uint, byte, void>)vt[144])(@this, id, program, numX, numY, numZ, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, ushort, BgfxProgramHandle, uint, uint, uint, byte, void>)vt[144])((nint)@this, id, program, numX, numY, numZ, flags);
			#endif
		}

		/// <summary>
		/// Dispatch compute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_dispatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderDispatch([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_numX")] [NativeName(NativeNameType.Type, "uint32_t")] uint numX, [NativeName(NativeNameType.Param, "_numY")] [NativeName(NativeNameType.Type, "uint32_t")] uint numY, [NativeName(NativeNameType.Param, "_numZ")] [NativeName(NativeNameType.Type, "uint32_t")] uint numZ, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			BgfxEncoderDispatchNative(@this, id, program, numX, numY, numZ, flags);
		}

		/// <summary>
		/// Dispatch compute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_dispatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderDispatch([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_numX")] [NativeName(NativeNameType.Type, "uint32_t")] uint numX, [NativeName(NativeNameType.Param, "_numY")] [NativeName(NativeNameType.Type, "uint32_t")] uint numY, [NativeName(NativeNameType.Param, "_numZ")] [NativeName(NativeNameType.Type, "uint32_t")] uint numZ, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderDispatchNative((BgfxEncoder*)pthis, id, program, numX, numY, numZ, flags);
			}
		}

		/// <summary>
		/// Dispatch compute indirect.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_dispatch_indirect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderDispatchIndirectNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_indirectHandle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle indirectHandle, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, ushort, BgfxProgramHandle, BgfxIndirectBufferHandle, uint, uint, byte, void>)vt[145])(@this, id, program, indirectHandle, start, num, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, ushort, BgfxProgramHandle, BgfxIndirectBufferHandle, uint, uint, byte, void>)vt[145])((nint)@this, id, program, indirectHandle, start, num, flags);
			#endif
		}

		/// <summary>
		/// Dispatch compute indirect.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_dispatch_indirect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderDispatchIndirect([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_indirectHandle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle indirectHandle, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			BgfxEncoderDispatchIndirectNative(@this, id, program, indirectHandle, start, num, flags);
		}

		/// <summary>
		/// Dispatch compute indirect.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_dispatch_indirect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderDispatchIndirect([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_indirectHandle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle indirectHandle, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderDispatchIndirectNative((BgfxEncoder*)pthis, id, program, indirectHandle, start, num, flags);
			}
		}

		/// <summary>
		/// Discard previously set state for draw or compute call.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_discard")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderDiscardNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, byte, void>)vt[146])(@this, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, void>)vt[146])((nint)@this, flags);
			#endif
		}

		/// <summary>
		/// Discard previously set state for draw or compute call.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_discard")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderDiscard([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			BgfxEncoderDiscardNative(@this, flags);
		}

		/// <summary>
		/// Discard previously set state for draw or compute call.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_discard")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderDiscard([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderDiscardNative((BgfxEncoder*)pthis, flags);
			}
		}

		/// <summary>
		/// Blit 2D texture region between two 2D textures.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_blit")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderBlitNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_dst")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle dst, [NativeName(NativeNameType.Param, "_dstMip")] [NativeName(NativeNameType.Type, "uint8_t")] byte dstMip, [NativeName(NativeNameType.Param, "_dstX")] [NativeName(NativeNameType.Type, "uint16_t")] ushort dstX, [NativeName(NativeNameType.Param, "_dstY")] [NativeName(NativeNameType.Type, "uint16_t")] ushort dstY, [NativeName(NativeNameType.Param, "_dstZ")] [NativeName(NativeNameType.Type, "uint16_t")] ushort dstZ, [NativeName(NativeNameType.Param, "_src")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle src, [NativeName(NativeNameType.Param, "_srcMip")] [NativeName(NativeNameType.Type, "uint8_t")] byte srcMip, [NativeName(NativeNameType.Param, "_srcX")] [NativeName(NativeNameType.Type, "uint16_t")] ushort srcX, [NativeName(NativeNameType.Param, "_srcY")] [NativeName(NativeNameType.Type, "uint16_t")] ushort srcY, [NativeName(NativeNameType.Param, "_srcZ")] [NativeName(NativeNameType.Type, "uint16_t")] ushort srcZ, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint16_t")] ushort depth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, ushort, BgfxTextureHandle, byte, ushort, ushort, ushort, BgfxTextureHandle, byte, ushort, ushort, ushort, ushort, ushort, ushort, void>)vt[147])(@this, id, dst, dstMip, dstX, dstY, dstZ, src, srcMip, srcX, srcY, srcZ, width, height, depth);
			#else
			((delegate* unmanaged[Cdecl]<nint, ushort, BgfxTextureHandle, byte, ushort, ushort, ushort, BgfxTextureHandle, byte, ushort, ushort, ushort, ushort, ushort, ushort, void>)vt[147])((nint)@this, id, dst, dstMip, dstX, dstY, dstZ, src, srcMip, srcX, srcY, srcZ, width, height, depth);
			#endif
		}

		/// <summary>
		/// Blit 2D texture region between two 2D textures.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_blit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderBlit([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_dst")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle dst, [NativeName(NativeNameType.Param, "_dstMip")] [NativeName(NativeNameType.Type, "uint8_t")] byte dstMip, [NativeName(NativeNameType.Param, "_dstX")] [NativeName(NativeNameType.Type, "uint16_t")] ushort dstX, [NativeName(NativeNameType.Param, "_dstY")] [NativeName(NativeNameType.Type, "uint16_t")] ushort dstY, [NativeName(NativeNameType.Param, "_dstZ")] [NativeName(NativeNameType.Type, "uint16_t")] ushort dstZ, [NativeName(NativeNameType.Param, "_src")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle src, [NativeName(NativeNameType.Param, "_srcMip")] [NativeName(NativeNameType.Type, "uint8_t")] byte srcMip, [NativeName(NativeNameType.Param, "_srcX")] [NativeName(NativeNameType.Type, "uint16_t")] ushort srcX, [NativeName(NativeNameType.Param, "_srcY")] [NativeName(NativeNameType.Type, "uint16_t")] ushort srcY, [NativeName(NativeNameType.Param, "_srcZ")] [NativeName(NativeNameType.Type, "uint16_t")] ushort srcZ, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint16_t")] ushort depth)
		{
			BgfxEncoderBlitNative(@this, id, dst, dstMip, dstX, dstY, dstZ, src, srcMip, srcX, srcY, srcZ, width, height, depth);
		}

		/// <summary>
		/// Blit 2D texture region between two 2D textures.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_blit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderBlit([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] ref BgfxEncoder @this, [NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_dst")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle dst, [NativeName(NativeNameType.Param, "_dstMip")] [NativeName(NativeNameType.Type, "uint8_t")] byte dstMip, [NativeName(NativeNameType.Param, "_dstX")] [NativeName(NativeNameType.Type, "uint16_t")] ushort dstX, [NativeName(NativeNameType.Param, "_dstY")] [NativeName(NativeNameType.Type, "uint16_t")] ushort dstY, [NativeName(NativeNameType.Param, "_dstZ")] [NativeName(NativeNameType.Type, "uint16_t")] ushort dstZ, [NativeName(NativeNameType.Param, "_src")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle src, [NativeName(NativeNameType.Param, "_srcMip")] [NativeName(NativeNameType.Type, "uint8_t")] byte srcMip, [NativeName(NativeNameType.Param, "_srcX")] [NativeName(NativeNameType.Type, "uint16_t")] ushort srcX, [NativeName(NativeNameType.Param, "_srcY")] [NativeName(NativeNameType.Type, "uint16_t")] ushort srcY, [NativeName(NativeNameType.Param, "_srcZ")] [NativeName(NativeNameType.Type, "uint16_t")] ushort srcZ, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint16_t")] ushort depth)
		{
			fixed (BgfxEncoder* pthis = &@this)
			{
				BgfxEncoderBlitNative((BgfxEncoder*)pthis, id, dst, dstMip, dstX, dstY, dstZ, src, srcMip, srcX, srcY, srcZ, width, height, depth);
			}
		}

		/// <summary>
		/// Request screen shot of window back buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_request_screen_shot")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxRequestScreenShotNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")] BgfxFrameBufferHandle handle, [NativeName(NativeNameType.Param, "_filePath")] [NativeName(NativeNameType.Type, "const char*")] byte* filePath)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxFrameBufferHandle, byte*, void>)vt[148])(handle, filePath);
			#else
			((delegate* unmanaged[Cdecl]<BgfxFrameBufferHandle, nint, void>)vt[148])(handle, (nint)filePath);
			#endif
		}

		/// <summary>
		/// Request screen shot of window back buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_request_screen_shot")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxRequestScreenShot([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")] BgfxFrameBufferHandle handle, [NativeName(NativeNameType.Param, "_filePath")] [NativeName(NativeNameType.Type, "const char*")] byte* filePath)
		{
			BgfxRequestScreenShotNative(handle, filePath);
		}

		/// <summary>
		/// Request screen shot of window back buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_request_screen_shot")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxRequestScreenShot([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")] BgfxFrameBufferHandle handle, [NativeName(NativeNameType.Param, "_filePath")] [NativeName(NativeNameType.Type, "const char*")] ref byte filePath)
		{
			fixed (byte* pfilePath = &filePath)
			{
				BgfxRequestScreenShotNative(handle, (byte*)pfilePath);
			}
		}

		/// <summary>
		/// Request screen shot of window back buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_request_screen_shot")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxRequestScreenShot([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")] BgfxFrameBufferHandle handle, [NativeName(NativeNameType.Param, "_filePath")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filePath)
		{
			fixed (byte* pfilePath = filePath)
			{
				BgfxRequestScreenShotNative(handle, (byte*)pfilePath);
			}
		}

		/// <summary>
		/// Request screen shot of window back buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_request_screen_shot")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxRequestScreenShot([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")] BgfxFrameBufferHandle handle, [NativeName(NativeNameType.Param, "_filePath")] [NativeName(NativeNameType.Type, "const char*")] string filePath)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filePath != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filePath);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filePath, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			BgfxRequestScreenShotNative(handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Render frame.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_render_frame")]
		[return: NativeName(NativeNameType.Type, "bgfx_render_frame_t")]
		internal static BgfxRenderFrame BgfxRenderFrameNative([NativeName(NativeNameType.Param, "_msecs")] [NativeName(NativeNameType.Type, "int32_t")] int msecs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, BgfxRenderFrame>)vt[149])(msecs);
			#else
			return (BgfxRenderFrame)((delegate* unmanaged[Cdecl]<int, BgfxRenderFrame>)vt[149])(msecs);
			#endif
		}

		/// <summary>
		/// Render frame.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_render_frame")]
		[return: NativeName(NativeNameType.Type, "bgfx_render_frame_t")]
		public static BgfxRenderFrame BgfxRenderFrame([NativeName(NativeNameType.Param, "_msecs")] [NativeName(NativeNameType.Type, "int32_t")] int msecs)
		{
			BgfxRenderFrame ret = BgfxRenderFrameNative(msecs);
			return ret;
		}

		/// <summary>
		/// Set platform data.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_platform_data")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetPlatformDataNative([NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const bgfx_platform_data_t*")] BgfxPlatformData* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxPlatformData*, void>)vt[150])(data);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[150])((nint)data);
			#endif
		}

		/// <summary>
		/// Set platform data.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_platform_data")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetPlatformData([NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const bgfx_platform_data_t*")] BgfxPlatformData* data)
		{
			BgfxSetPlatformDataNative(data);
		}

		/// <summary>
		/// Set platform data.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_platform_data")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetPlatformData([NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const bgfx_platform_data_t*")] ref BgfxPlatformData data)
		{
			fixed (BgfxPlatformData* pdata = &data)
			{
				BgfxSetPlatformDataNative((BgfxPlatformData*)pdata);
			}
		}

		/// <summary>
		/// Get internal data for interop.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_internal_data")]
		[return: NativeName(NativeNameType.Type, "const bgfx_internal_data_t*")]
		internal static BgfxInternalData* BgfxGetInternalDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxInternalData*>)vt[151])();
			#else
			return (BgfxInternalData*)((delegate* unmanaged[Cdecl]<nint>)vt[151])();
			#endif
		}

		/// <summary>
		/// Get internal data for interop.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_internal_data")]
		[return: NativeName(NativeNameType.Type, "const bgfx_internal_data_t*")]
		public static BgfxInternalData* BgfxGetInternalData()
		{
			BgfxInternalData* ret = BgfxGetInternalDataNative();
			return ret;
		}

		/// <summary>
		/// Override internal texture with externally created texture. Previously<br/>
		/// created internal texture will released.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_override_internal_texture_ptr")]
		[return: NativeName(NativeNameType.Type, "uintptr_t")]
		internal static ulong BgfxOverrideInternalTexturePtrNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_ptr")] [NativeName(NativeNameType.Type, "uintptr_t")] ulong ptr)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxTextureHandle, ulong, ulong>)vt[152])(handle, ptr);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<BgfxTextureHandle, ulong, ulong>)vt[152])(handle, ptr);
			#endif
		}

		/// <summary>
		/// Override internal texture with externally created texture. Previously<br/>
		/// created internal texture will released.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_override_internal_texture_ptr")]
		[return: NativeName(NativeNameType.Type, "uintptr_t")]
		public static ulong BgfxOverrideInternalTexturePtr([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_ptr")] [NativeName(NativeNameType.Type, "uintptr_t")] ulong ptr)
		{
			ulong ret = BgfxOverrideInternalTexturePtrNative(handle, ptr);
			return ret;
		}

		/// <summary>
		/// Override internal texture with externally created texture. Previously<br/>
		/// created internal texture will released.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_override_internal_texture_ptr")]
		[return: NativeName(NativeNameType.Type, "uintptr_t")]
		public static ulong BgfxOverrideInternalTexturePtr([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_ptr")] [NativeName(NativeNameType.Type, "uintptr_t")] nuint ptr)
		{
			ulong ret = BgfxOverrideInternalTexturePtrNative(handle, ptr);
			return ret;
		}

		/// <summary>
		/// Override internal texture by creating new texture. Previously created<br/>
		/// internal texture will released.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_override_internal_texture")]
		[return: NativeName(NativeNameType.Type, "uintptr_t")]
		internal static ulong BgfxOverrideInternalTextureNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_numMips")] [NativeName(NativeNameType.Type, "uint8_t")] byte numMips, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxTextureHandle, ushort, ushort, byte, BgfxTextureFormat, ulong, ulong>)vt[153])(handle, width, height, numMips, format, flags);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<BgfxTextureHandle, ushort, ushort, byte, BgfxTextureFormat, ulong, ulong>)vt[153])(handle, width, height, numMips, format, flags);
			#endif
		}

		/// <summary>
		/// Override internal texture by creating new texture. Previously created<br/>
		/// internal texture will released.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_override_internal_texture")]
		[return: NativeName(NativeNameType.Type, "uintptr_t")]
		public static ulong BgfxOverrideInternalTexture([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_numMips")] [NativeName(NativeNameType.Type, "uint8_t")] byte numMips, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong flags)
		{
			ulong ret = BgfxOverrideInternalTextureNative(handle, width, height, numMips, format, flags);
			return ret;
		}

		/// <summary>
		/// Sets a debug marker. This allows you to group graphics calls together for easy browsing in<br/>
		/// graphics debugging tools.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_marker")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetMarkerNative([NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, int, void>)vt[154])(name, len);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[154])((nint)name, len);
			#endif
		}

		/// <summary>
		/// Sets a debug marker. This allows you to group graphics calls together for easy browsing in<br/>
		/// graphics debugging tools.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_marker")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetMarker([NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			BgfxSetMarkerNative(name, len);
		}

		/// <summary>
		/// Sets a debug marker. This allows you to group graphics calls together for easy browsing in<br/>
		/// graphics debugging tools.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_marker")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetMarker([NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			fixed (byte* pname = &name)
			{
				BgfxSetMarkerNative((byte*)pname, len);
			}
		}

		/// <summary>
		/// Sets a debug marker. This allows you to group graphics calls together for easy browsing in<br/>
		/// graphics debugging tools.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_marker")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetMarker([NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			fixed (byte* pname = name)
			{
				BgfxSetMarkerNative((byte*)pname, len);
			}
		}

		/// <summary>
		/// Sets a debug marker. This allows you to group graphics calls together for easy browsing in<br/>
		/// graphics debugging tools.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_marker")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetMarker([NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] string name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			BgfxSetMarkerNative(pStr0, len);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Set render states for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_state")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetStateNative([NativeName(NativeNameType.Param, "_state")] [NativeName(NativeNameType.Type, "uint64_t")] ulong state, [NativeName(NativeNameType.Param, "_rgba")] [NativeName(NativeNameType.Type, "uint32_t")] uint rgba)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ulong, uint, void>)vt[155])(state, rgba);
			#else
			((delegate* unmanaged[Cdecl]<ulong, uint, void>)vt[155])(state, rgba);
			#endif
		}

		/// <summary>
		/// Set render states for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_state")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetState([NativeName(NativeNameType.Param, "_state")] [NativeName(NativeNameType.Type, "uint64_t")] ulong state, [NativeName(NativeNameType.Param, "_rgba")] [NativeName(NativeNameType.Type, "uint32_t")] uint rgba)
		{
			BgfxSetStateNative(state, rgba);
		}

		/// <summary>
		/// Set condition for rendering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_condition")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetConditionNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_occlusion_query_handle_t")] BgfxOcclusionQueryHandle handle, [NativeName(NativeNameType.Param, "_visible")] [NativeName(NativeNameType.Type, "bool")] byte visible)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxOcclusionQueryHandle, byte, void>)vt[156])(handle, visible);
			#else
			((delegate* unmanaged[Cdecl]<BgfxOcclusionQueryHandle, byte, void>)vt[156])(handle, visible);
			#endif
		}

		/// <summary>
		/// Set condition for rendering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_condition")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetCondition([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_occlusion_query_handle_t")] BgfxOcclusionQueryHandle handle, [NativeName(NativeNameType.Param, "_visible")] [NativeName(NativeNameType.Type, "bool")] bool visible)
		{
			BgfxSetConditionNative(handle, visible ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Set stencil test state.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_stencil")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetStencilNative([NativeName(NativeNameType.Param, "_fstencil")] [NativeName(NativeNameType.Type, "uint32_t")] uint fstencil, [NativeName(NativeNameType.Param, "_bstencil")] [NativeName(NativeNameType.Type, "uint32_t")] uint bstencil)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, void>)vt[157])(fstencil, bstencil);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, void>)vt[157])(fstencil, bstencil);
			#endif
		}

		/// <summary>
		/// Set stencil test state.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_stencil")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetStencil([NativeName(NativeNameType.Param, "_fstencil")] [NativeName(NativeNameType.Type, "uint32_t")] uint fstencil, [NativeName(NativeNameType.Param, "_bstencil")] [NativeName(NativeNameType.Type, "uint32_t")] uint bstencil)
		{
			BgfxSetStencilNative(fstencil, bstencil);
		}

		/// <summary>
		/// Set scissor for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_scissor")]
		[return: NativeName(NativeNameType.Type, "uint16_t")]
		internal static ushort BgfxSetScissorNative([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ushort, ushort, ushort, ushort, ushort>)vt[158])(x, y, width, height);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<ushort, ushort, ushort, ushort, ushort>)vt[158])(x, y, width, height);
			#endif
		}

		/// <summary>
		/// Set scissor for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_scissor")]
		[return: NativeName(NativeNameType.Type, "uint16_t")]
		public static ushort BgfxSetScissor([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height)
		{
			ushort ret = BgfxSetScissorNative(x, y, width, height);
			return ret;
		}

		/// <summary>
		/// Set scissor from cache for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_scissor_cached")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetScissorCachedNative([NativeName(NativeNameType.Param, "_cache")] [NativeName(NativeNameType.Type, "uint16_t")] ushort cache)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, void>)vt[159])(cache);
			#else
			((delegate* unmanaged[Cdecl]<ushort, void>)vt[159])(cache);
			#endif
		}

		/// <summary>
		/// Set scissor from cache for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_scissor_cached")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetScissorCached([NativeName(NativeNameType.Param, "_cache")] [NativeName(NativeNameType.Type, "uint16_t")] ushort cache)
		{
			BgfxSetScissorCachedNative(cache);
		}

		/// <summary>
		/// Set model matrix for draw primitive. If it is not called,<br/>
		/// the model will be rendered with an identity model matrix.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_transform")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		internal static uint BgfxSetTransformNative([NativeName(NativeNameType.Param, "_mtx")] [NativeName(NativeNameType.Type, "const void*")] void* mtx, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, ushort, uint>)vt[160])(mtx, num);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, ushort, uint>)vt[160])((nint)mtx, num);
			#endif
		}

		/// <summary>
		/// Set model matrix for draw primitive. If it is not called,<br/>
		/// the model will be rendered with an identity model matrix.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_transform")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint BgfxSetTransform([NativeName(NativeNameType.Param, "_mtx")] [NativeName(NativeNameType.Type, "const void*")] void* mtx, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			uint ret = BgfxSetTransformNative(mtx, num);
			return ret;
		}

		/// <summary>
		/// Set model matrix from matrix cache for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_transform_cached")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetTransformCachedNative([NativeName(NativeNameType.Param, "_cache")] [NativeName(NativeNameType.Type, "uint32_t")] uint cache, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ushort, void>)vt[161])(cache, num);
			#else
			((delegate* unmanaged[Cdecl]<uint, ushort, void>)vt[161])(cache, num);
			#endif
		}

		/// <summary>
		/// Set model matrix from matrix cache for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_transform_cached")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetTransformCached([NativeName(NativeNameType.Param, "_cache")] [NativeName(NativeNameType.Type, "uint32_t")] uint cache, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			BgfxSetTransformCachedNative(cache, num);
		}

		/// <summary>
		/// Reserve matrices in internal matrix cache.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_transform")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		internal static uint BgfxAllocTransformNative([NativeName(NativeNameType.Param, "_transform")] [NativeName(NativeNameType.Type, "bgfx_transform_t*")] BgfxTransform* transform, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxTransform*, ushort, uint>)vt[162])(transform, num);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, ushort, uint>)vt[162])((nint)transform, num);
			#endif
		}

		/// <summary>
		/// Reserve matrices in internal matrix cache.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_transform")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint BgfxAllocTransform([NativeName(NativeNameType.Param, "_transform")] [NativeName(NativeNameType.Type, "bgfx_transform_t*")] BgfxTransform* transform, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			uint ret = BgfxAllocTransformNative(transform, num);
			return ret;
		}

		/// <summary>
		/// Reserve matrices in internal matrix cache.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_transform")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint BgfxAllocTransform([NativeName(NativeNameType.Param, "_transform")] [NativeName(NativeNameType.Type, "bgfx_transform_t*")] ref BgfxTransform transform, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			fixed (BgfxTransform* ptransform = &transform)
			{
				uint ret = BgfxAllocTransformNative((BgfxTransform*)ptransform, num);
				return ret;
			}
		}

		/// <summary>
		/// Set shader uniform parameter for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_uniform")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetUniformNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_uniform_handle_t")] BgfxUniformHandle handle, [NativeName(NativeNameType.Param, "_value")] [NativeName(NativeNameType.Type, "const void*")] void* value, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxUniformHandle, void*, ushort, void>)vt[163])(handle, value, num);
			#else
			((delegate* unmanaged[Cdecl]<BgfxUniformHandle, nint, ushort, void>)vt[163])(handle, (nint)value, num);
			#endif
		}

		/// <summary>
		/// Set shader uniform parameter for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_uniform")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetUniform([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_uniform_handle_t")] BgfxUniformHandle handle, [NativeName(NativeNameType.Param, "_value")] [NativeName(NativeNameType.Type, "const void*")] void* value, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			BgfxSetUniformNative(handle, value, num);
		}

		/// <summary>
		/// Set index buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetIndexBufferNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_firstIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint firstIndex, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxIndexBufferHandle, uint, uint, void>)vt[164])(handle, firstIndex, numIndices);
			#else
			((delegate* unmanaged[Cdecl]<BgfxIndexBufferHandle, uint, uint, void>)vt[164])(handle, firstIndex, numIndices);
			#endif
		}

		/// <summary>
		/// Set index buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetIndexBuffer([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_firstIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint firstIndex, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices)
		{
			BgfxSetIndexBufferNative(handle, firstIndex, numIndices);
		}

		/// <summary>
		/// Set index buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_dynamic_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetDynamicIndexBufferNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t")] BgfxDynamicIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_firstIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint firstIndex, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxDynamicIndexBufferHandle, uint, uint, void>)vt[165])(handle, firstIndex, numIndices);
			#else
			((delegate* unmanaged[Cdecl]<BgfxDynamicIndexBufferHandle, uint, uint, void>)vt[165])(handle, firstIndex, numIndices);
			#endif
		}

		/// <summary>
		/// Set index buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_dynamic_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetDynamicIndexBuffer([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t")] BgfxDynamicIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_firstIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint firstIndex, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices)
		{
			BgfxSetDynamicIndexBufferNative(handle, firstIndex, numIndices);
		}

		/// <summary>
		/// Set index buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_transient_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetTransientIndexBufferNative([NativeName(NativeNameType.Param, "_tib")] [NativeName(NativeNameType.Type, "const bgfx_transient_index_buffer_t*")] BgfxTransientIndexBuffer* tib, [NativeName(NativeNameType.Param, "_firstIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint firstIndex, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxTransientIndexBuffer*, uint, uint, void>)vt[166])(tib, firstIndex, numIndices);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, uint, void>)vt[166])((nint)tib, firstIndex, numIndices);
			#endif
		}

		/// <summary>
		/// Set index buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_transient_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetTransientIndexBuffer([NativeName(NativeNameType.Param, "_tib")] [NativeName(NativeNameType.Type, "const bgfx_transient_index_buffer_t*")] BgfxTransientIndexBuffer* tib, [NativeName(NativeNameType.Param, "_firstIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint firstIndex, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices)
		{
			BgfxSetTransientIndexBufferNative(tib, firstIndex, numIndices);
		}

		/// <summary>
		/// Set index buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_transient_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetTransientIndexBuffer([NativeName(NativeNameType.Param, "_tib")] [NativeName(NativeNameType.Type, "const bgfx_transient_index_buffer_t*")] ref BgfxTransientIndexBuffer tib, [NativeName(NativeNameType.Param, "_firstIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint firstIndex, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices)
		{
			fixed (BgfxTransientIndexBuffer* ptib = &tib)
			{
				BgfxSetTransientIndexBufferNative((BgfxTransientIndexBuffer*)ptib, firstIndex, numIndices);
			}
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetVertexBufferNative([NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, BgfxVertexBufferHandle, uint, uint, void>)vt[167])(stream, handle, startVertex, numVertices);
			#else
			((delegate* unmanaged[Cdecl]<byte, BgfxVertexBufferHandle, uint, uint, void>)vt[167])(stream, handle, startVertex, numVertices);
			#endif
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetVertexBuffer([NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			BgfxSetVertexBufferNative(stream, handle, startVertex, numVertices);
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_vertex_buffer_with_layout")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetVertexBufferWithLayoutNative([NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_layoutHandle")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")] BgfxVertexLayoutHandle layoutHandle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, BgfxVertexBufferHandle, uint, uint, BgfxVertexLayoutHandle, void>)vt[168])(stream, handle, startVertex, numVertices, layoutHandle);
			#else
			((delegate* unmanaged[Cdecl]<byte, BgfxVertexBufferHandle, uint, uint, BgfxVertexLayoutHandle, void>)vt[168])(stream, handle, startVertex, numVertices, layoutHandle);
			#endif
		}
	}
}
