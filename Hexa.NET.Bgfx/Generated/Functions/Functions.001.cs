// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Bgfx
{
	public unsafe partial class Bgfx
	{

		/// <summary>
		/// Create dynamic vertex buffer and initialize it.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_dynamic_vertex_buffer_mem")]
		[return: NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")]
		public static BgfxDynamicVertexBufferHandle BgfxCreateDynamicVertexBufferMem([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] ref BgfxMemory mem, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			fixed (BgfxMemory* pmem = &mem)
			{
				BgfxDynamicVertexBufferHandle ret = BgfxCreateDynamicVertexBufferMemNative((BgfxMemory*)pmem, layout, flags);
				return ret;
			}
		}

		/// <summary>
		/// Create dynamic vertex buffer and initialize it.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_dynamic_vertex_buffer_mem")]
		[return: NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")]
		public static BgfxDynamicVertexBufferHandle BgfxCreateDynamicVertexBufferMem([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			fixed (BgfxVertexLayout* playout = &layout)
			{
				BgfxDynamicVertexBufferHandle ret = BgfxCreateDynamicVertexBufferMemNative(mem, (BgfxVertexLayout*)playout, flags);
				return ret;
			}
		}

		/// <summary>
		/// Create dynamic vertex buffer and initialize it.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_dynamic_vertex_buffer_mem")]
		[return: NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")]
		public static BgfxDynamicVertexBufferHandle BgfxCreateDynamicVertexBufferMem([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] ref BgfxMemory mem, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			fixed (BgfxMemory* pmem = &mem)
			{
				fixed (BgfxVertexLayout* playout = &layout)
				{
					BgfxDynamicVertexBufferHandle ret = BgfxCreateDynamicVertexBufferMemNative((BgfxMemory*)pmem, (BgfxVertexLayout*)playout, flags);
					return ret;
				}
			}
		}

		/// <summary>
		/// Update dynamic vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_update_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxUpdateDynamicVertexBufferNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxDynamicVertexBufferHandle, uint, BgfxMemory*, void>)vt[46])(handle, startVertex, mem);
			#else
			((delegate* unmanaged[Cdecl]<BgfxDynamicVertexBufferHandle, uint, nint, void>)vt[46])(handle, startVertex, (nint)mem);
			#endif
		}

		/// <summary>
		/// Update dynamic vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_update_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxUpdateDynamicVertexBuffer([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem)
		{
			BgfxUpdateDynamicVertexBufferNative(handle, startVertex, mem);
		}

		/// <summary>
		/// Update dynamic vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_update_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxUpdateDynamicVertexBuffer([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] ref BgfxMemory mem)
		{
			fixed (BgfxMemory* pmem = &mem)
			{
				BgfxUpdateDynamicVertexBufferNative(handle, startVertex, (BgfxMemory*)pmem);
			}
		}

		/// <summary>
		/// Destroy dynamic vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxDestroyDynamicVertexBufferNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxDynamicVertexBufferHandle, void>)vt[47])(handle);
			#else
			((delegate* unmanaged[Cdecl]<BgfxDynamicVertexBufferHandle, void>)vt[47])(handle);
			#endif
		}

		/// <summary>
		/// Destroy dynamic vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDestroyDynamicVertexBuffer([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle)
		{
			BgfxDestroyDynamicVertexBufferNative(handle);
		}

		/// <summary>
		/// Returns number of requested or maximum available indices.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_avail_transient_index_buffer")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		internal static uint BgfxGetAvailTransientIndexBufferNative([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] byte index32)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte, uint>)vt[48])(num, index32);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, byte, uint>)vt[48])(num, index32);
			#endif
		}

		/// <summary>
		/// Returns number of requested or maximum available indices.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_avail_transient_index_buffer")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint BgfxGetAvailTransientIndexBuffer([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32)
		{
			uint ret = BgfxGetAvailTransientIndexBufferNative(num, index32 ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// Returns number of requested or maximum available vertices.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_avail_transient_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		internal static uint BgfxGetAvailTransientVertexBufferNative([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, BgfxVertexLayout*, uint>)vt[49])(num, layout);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, nint, uint>)vt[49])(num, (nint)layout);
			#endif
		}

		/// <summary>
		/// Returns number of requested or maximum available vertices.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_avail_transient_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint BgfxGetAvailTransientVertexBuffer([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout)
		{
			uint ret = BgfxGetAvailTransientVertexBufferNative(num, layout);
			return ret;
		}

		/// <summary>
		/// Returns number of requested or maximum available vertices.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_avail_transient_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint BgfxGetAvailTransientVertexBuffer([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout)
		{
			fixed (BgfxVertexLayout* playout = &layout)
			{
				uint ret = BgfxGetAvailTransientVertexBufferNative(num, (BgfxVertexLayout*)playout);
				return ret;
			}
		}

		/// <summary>
		/// Returns number of requested or maximum available instance buffer slots.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_avail_instance_data_buffer")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		internal static uint BgfxGetAvailInstanceDataBufferNative([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_stride")] [NativeName(NativeNameType.Type, "uint16_t")] ushort stride)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ushort, uint>)vt[50])(num, stride);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, ushort, uint>)vt[50])(num, stride);
			#endif
		}

		/// <summary>
		/// Returns number of requested or maximum available instance buffer slots.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_avail_instance_data_buffer")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint BgfxGetAvailInstanceDataBuffer([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_stride")] [NativeName(NativeNameType.Type, "uint16_t")] ushort stride)
		{
			uint ret = BgfxGetAvailInstanceDataBufferNative(num, stride);
			return ret;
		}

		/// <summary>
		/// Allocate transient index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_transient_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxAllocTransientIndexBufferNative([NativeName(NativeNameType.Param, "_tib")] [NativeName(NativeNameType.Type, "bgfx_transient_index_buffer_t*")] BgfxTransientIndexBuffer* tib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] byte index32)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxTransientIndexBuffer*, uint, byte, void>)vt[51])(tib, num, index32);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, byte, void>)vt[51])((nint)tib, num, index32);
			#endif
		}

		/// <summary>
		/// Allocate transient index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_transient_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxAllocTransientIndexBuffer([NativeName(NativeNameType.Param, "_tib")] [NativeName(NativeNameType.Type, "bgfx_transient_index_buffer_t*")] BgfxTransientIndexBuffer* tib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32)
		{
			BgfxAllocTransientIndexBufferNative(tib, num, index32 ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Allocate transient index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_transient_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxAllocTransientIndexBuffer([NativeName(NativeNameType.Param, "_tib")] [NativeName(NativeNameType.Type, "bgfx_transient_index_buffer_t*")] ref BgfxTransientIndexBuffer tib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32)
		{
			fixed (BgfxTransientIndexBuffer* ptib = &tib)
			{
				BgfxAllocTransientIndexBufferNative((BgfxTransientIndexBuffer*)ptib, num, index32 ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// Allocate transient vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_transient_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxAllocTransientVertexBufferNative([NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "bgfx_transient_vertex_buffer_t*")] BgfxTransientVertexBuffer* tvb, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxTransientVertexBuffer*, uint, BgfxVertexLayout*, void>)vt[52])(tvb, num, layout);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, nint, void>)vt[52])((nint)tvb, num, (nint)layout);
			#endif
		}

		/// <summary>
		/// Allocate transient vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_transient_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxAllocTransientVertexBuffer([NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "bgfx_transient_vertex_buffer_t*")] BgfxTransientVertexBuffer* tvb, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout)
		{
			BgfxAllocTransientVertexBufferNative(tvb, num, layout);
		}

		/// <summary>
		/// Allocate transient vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_transient_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxAllocTransientVertexBuffer([NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "bgfx_transient_vertex_buffer_t*")] ref BgfxTransientVertexBuffer tvb, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout)
		{
			fixed (BgfxTransientVertexBuffer* ptvb = &tvb)
			{
				BgfxAllocTransientVertexBufferNative((BgfxTransientVertexBuffer*)ptvb, num, layout);
			}
		}

		/// <summary>
		/// Allocate transient vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_transient_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxAllocTransientVertexBuffer([NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "bgfx_transient_vertex_buffer_t*")] BgfxTransientVertexBuffer* tvb, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout)
		{
			fixed (BgfxVertexLayout* playout = &layout)
			{
				BgfxAllocTransientVertexBufferNative(tvb, num, (BgfxVertexLayout*)playout);
			}
		}

		/// <summary>
		/// Allocate transient vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_transient_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxAllocTransientVertexBuffer([NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "bgfx_transient_vertex_buffer_t*")] ref BgfxTransientVertexBuffer tvb, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout)
		{
			fixed (BgfxTransientVertexBuffer* ptvb = &tvb)
			{
				fixed (BgfxVertexLayout* playout = &layout)
				{
					BgfxAllocTransientVertexBufferNative((BgfxTransientVertexBuffer*)ptvb, num, (BgfxVertexLayout*)playout);
				}
			}
		}

		/// <summary>
		/// Check for required space and allocate transient vertex and index<br/>
		/// buffers. If both space requirements are satisfied function returns<br/>
		/// true.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_transient_buffers")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BgfxAllocTransientBuffersNative([NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "bgfx_transient_vertex_buffer_t*")] BgfxTransientVertexBuffer* tvb, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_tib")] [NativeName(NativeNameType.Type, "bgfx_transient_index_buffer_t*")] BgfxTransientIndexBuffer* tib, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] byte index32)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxTransientVertexBuffer*, BgfxVertexLayout*, uint, BgfxTransientIndexBuffer*, uint, byte, byte>)vt[53])(tvb, layout, numVertices, tib, numIndices, index32);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, uint, nint, uint, byte, byte>)vt[53])((nint)tvb, (nint)layout, numVertices, (nint)tib, numIndices, index32);
			#endif
		}

		/// <summary>
		/// Check for required space and allocate transient vertex and index<br/>
		/// buffers. If both space requirements are satisfied function returns<br/>
		/// true.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_transient_buffers")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BgfxAllocTransientBuffers([NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "bgfx_transient_vertex_buffer_t*")] BgfxTransientVertexBuffer* tvb, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_tib")] [NativeName(NativeNameType.Type, "bgfx_transient_index_buffer_t*")] BgfxTransientIndexBuffer* tib, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32)
		{
			byte ret = BgfxAllocTransientBuffersNative(tvb, layout, numVertices, tib, numIndices, index32 ? (byte)1 : (byte)0);
			return ret != 0;
		}

		/// <summary>
		/// Check for required space and allocate transient vertex and index<br/>
		/// buffers. If both space requirements are satisfied function returns<br/>
		/// true.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_transient_buffers")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BgfxAllocTransientBuffers([NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "bgfx_transient_vertex_buffer_t*")] ref BgfxTransientVertexBuffer tvb, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_tib")] [NativeName(NativeNameType.Type, "bgfx_transient_index_buffer_t*")] BgfxTransientIndexBuffer* tib, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32)
		{
			fixed (BgfxTransientVertexBuffer* ptvb = &tvb)
			{
				byte ret = BgfxAllocTransientBuffersNative((BgfxTransientVertexBuffer*)ptvb, layout, numVertices, tib, numIndices, index32 ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// Check for required space and allocate transient vertex and index<br/>
		/// buffers. If both space requirements are satisfied function returns<br/>
		/// true.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_transient_buffers")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BgfxAllocTransientBuffers([NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "bgfx_transient_vertex_buffer_t*")] BgfxTransientVertexBuffer* tvb, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_tib")] [NativeName(NativeNameType.Type, "bgfx_transient_index_buffer_t*")] BgfxTransientIndexBuffer* tib, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32)
		{
			fixed (BgfxVertexLayout* playout = &layout)
			{
				byte ret = BgfxAllocTransientBuffersNative(tvb, (BgfxVertexLayout*)playout, numVertices, tib, numIndices, index32 ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// Check for required space and allocate transient vertex and index<br/>
		/// buffers. If both space requirements are satisfied function returns<br/>
		/// true.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_transient_buffers")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BgfxAllocTransientBuffers([NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "bgfx_transient_vertex_buffer_t*")] ref BgfxTransientVertexBuffer tvb, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_tib")] [NativeName(NativeNameType.Type, "bgfx_transient_index_buffer_t*")] BgfxTransientIndexBuffer* tib, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32)
		{
			fixed (BgfxTransientVertexBuffer* ptvb = &tvb)
			{
				fixed (BgfxVertexLayout* playout = &layout)
				{
					byte ret = BgfxAllocTransientBuffersNative((BgfxTransientVertexBuffer*)ptvb, (BgfxVertexLayout*)playout, numVertices, tib, numIndices, index32 ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Check for required space and allocate transient vertex and index<br/>
		/// buffers. If both space requirements are satisfied function returns<br/>
		/// true.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_transient_buffers")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BgfxAllocTransientBuffers([NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "bgfx_transient_vertex_buffer_t*")] BgfxTransientVertexBuffer* tvb, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_tib")] [NativeName(NativeNameType.Type, "bgfx_transient_index_buffer_t*")] ref BgfxTransientIndexBuffer tib, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32)
		{
			fixed (BgfxTransientIndexBuffer* ptib = &tib)
			{
				byte ret = BgfxAllocTransientBuffersNative(tvb, layout, numVertices, (BgfxTransientIndexBuffer*)ptib, numIndices, index32 ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// Check for required space and allocate transient vertex and index<br/>
		/// buffers. If both space requirements are satisfied function returns<br/>
		/// true.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_transient_buffers")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BgfxAllocTransientBuffers([NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "bgfx_transient_vertex_buffer_t*")] ref BgfxTransientVertexBuffer tvb, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_tib")] [NativeName(NativeNameType.Type, "bgfx_transient_index_buffer_t*")] ref BgfxTransientIndexBuffer tib, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32)
		{
			fixed (BgfxTransientVertexBuffer* ptvb = &tvb)
			{
				fixed (BgfxTransientIndexBuffer* ptib = &tib)
				{
					byte ret = BgfxAllocTransientBuffersNative((BgfxTransientVertexBuffer*)ptvb, layout, numVertices, (BgfxTransientIndexBuffer*)ptib, numIndices, index32 ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Check for required space and allocate transient vertex and index<br/>
		/// buffers. If both space requirements are satisfied function returns<br/>
		/// true.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_transient_buffers")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BgfxAllocTransientBuffers([NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "bgfx_transient_vertex_buffer_t*")] BgfxTransientVertexBuffer* tvb, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_tib")] [NativeName(NativeNameType.Type, "bgfx_transient_index_buffer_t*")] ref BgfxTransientIndexBuffer tib, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32)
		{
			fixed (BgfxVertexLayout* playout = &layout)
			{
				fixed (BgfxTransientIndexBuffer* ptib = &tib)
				{
					byte ret = BgfxAllocTransientBuffersNative(tvb, (BgfxVertexLayout*)playout, numVertices, (BgfxTransientIndexBuffer*)ptib, numIndices, index32 ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Check for required space and allocate transient vertex and index<br/>
		/// buffers. If both space requirements are satisfied function returns<br/>
		/// true.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_transient_buffers")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BgfxAllocTransientBuffers([NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "bgfx_transient_vertex_buffer_t*")] ref BgfxTransientVertexBuffer tvb, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_tib")] [NativeName(NativeNameType.Type, "bgfx_transient_index_buffer_t*")] ref BgfxTransientIndexBuffer tib, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32)
		{
			fixed (BgfxTransientVertexBuffer* ptvb = &tvb)
			{
				fixed (BgfxVertexLayout* playout = &layout)
				{
					fixed (BgfxTransientIndexBuffer* ptib = &tib)
					{
						byte ret = BgfxAllocTransientBuffersNative((BgfxTransientVertexBuffer*)ptvb, (BgfxVertexLayout*)playout, numVertices, (BgfxTransientIndexBuffer*)ptib, numIndices, index32 ? (byte)1 : (byte)0);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Allocate instance data buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_instance_data_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxAllocInstanceDataBufferNative([NativeName(NativeNameType.Param, "_idb")] [NativeName(NativeNameType.Type, "bgfx_instance_data_buffer_t*")] BgfxInstanceDataBuffer* idb, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_stride")] [NativeName(NativeNameType.Type, "uint16_t")] ushort stride)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxInstanceDataBuffer*, uint, ushort, void>)vt[54])(idb, num, stride);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, ushort, void>)vt[54])((nint)idb, num, stride);
			#endif
		}

		/// <summary>
		/// Allocate instance data buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_instance_data_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxAllocInstanceDataBuffer([NativeName(NativeNameType.Param, "_idb")] [NativeName(NativeNameType.Type, "bgfx_instance_data_buffer_t*")] BgfxInstanceDataBuffer* idb, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_stride")] [NativeName(NativeNameType.Type, "uint16_t")] ushort stride)
		{
			BgfxAllocInstanceDataBufferNative(idb, num, stride);
		}

		/// <summary>
		/// Allocate instance data buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc_instance_data_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxAllocInstanceDataBuffer([NativeName(NativeNameType.Param, "_idb")] [NativeName(NativeNameType.Type, "bgfx_instance_data_buffer_t*")] ref BgfxInstanceDataBuffer idb, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_stride")] [NativeName(NativeNameType.Type, "uint16_t")] ushort stride)
		{
			fixed (BgfxInstanceDataBuffer* pidb = &idb)
			{
				BgfxAllocInstanceDataBufferNative((BgfxInstanceDataBuffer*)pidb, num, stride);
			}
		}

		/// <summary>
		/// Create draw indirect buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_indirect_buffer")]
		[return: NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")]
		internal static BgfxIndirectBufferHandle BgfxCreateIndirectBufferNative([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, BgfxIndirectBufferHandle>)vt[55])(num);
			#else
			return (BgfxIndirectBufferHandle)((delegate* unmanaged[Cdecl]<uint, BgfxIndirectBufferHandle>)vt[55])(num);
			#endif
		}

		/// <summary>
		/// Create draw indirect buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_indirect_buffer")]
		[return: NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")]
		public static BgfxIndirectBufferHandle BgfxCreateIndirectBuffer([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			BgfxIndirectBufferHandle ret = BgfxCreateIndirectBufferNative(num);
			return ret;
		}

		/// <summary>
		/// Destroy draw indirect buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_indirect_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxDestroyIndirectBufferNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle handle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxIndirectBufferHandle, void>)vt[56])(handle);
			#else
			((delegate* unmanaged[Cdecl]<BgfxIndirectBufferHandle, void>)vt[56])(handle);
			#endif
		}

		/// <summary>
		/// Destroy draw indirect buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_indirect_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDestroyIndirectBuffer([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle handle)
		{
			BgfxDestroyIndirectBufferNative(handle);
		}

		/// <summary>
		/// Create shader from memory buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_shader")]
		[return: NativeName(NativeNameType.Type, "bgfx_shader_handle_t")]
		internal static BgfxShaderHandle BgfxCreateShaderNative([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxMemory*, BgfxShaderHandle>)vt[57])(mem);
			#else
			return (BgfxShaderHandle)((delegate* unmanaged[Cdecl]<nint, BgfxShaderHandle>)vt[57])((nint)mem);
			#endif
		}

		/// <summary>
		/// Create shader from memory buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_shader")]
		[return: NativeName(NativeNameType.Type, "bgfx_shader_handle_t")]
		public static BgfxShaderHandle BgfxCreateShader([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem)
		{
			BgfxShaderHandle ret = BgfxCreateShaderNative(mem);
			return ret;
		}

		/// <summary>
		/// Create shader from memory buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_shader")]
		[return: NativeName(NativeNameType.Type, "bgfx_shader_handle_t")]
		public static BgfxShaderHandle BgfxCreateShader([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] ref BgfxMemory mem)
		{
			fixed (BgfxMemory* pmem = &mem)
			{
				BgfxShaderHandle ret = BgfxCreateShaderNative((BgfxMemory*)pmem);
				return ret;
			}
		}

		/// <summary>
		/// Returns the number of uniforms and uniform handles used inside a shader.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_shader_uniforms")]
		[return: NativeName(NativeNameType.Type, "uint16_t")]
		internal static ushort BgfxGetShaderUniformsNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_shader_handle_t")] BgfxShaderHandle handle, [NativeName(NativeNameType.Param, "_uniforms")] [NativeName(NativeNameType.Type, "bgfx_uniform_handle_t*")] BgfxUniformHandle* uniforms, [NativeName(NativeNameType.Param, "_max")] [NativeName(NativeNameType.Type, "uint16_t")] ushort max)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxShaderHandle, BgfxUniformHandle*, ushort, ushort>)vt[58])(handle, uniforms, max);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<BgfxShaderHandle, nint, ushort, ushort>)vt[58])(handle, (nint)uniforms, max);
			#endif
		}

		/// <summary>
		/// Returns the number of uniforms and uniform handles used inside a shader.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_shader_uniforms")]
		[return: NativeName(NativeNameType.Type, "uint16_t")]
		public static ushort BgfxGetShaderUniforms([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_shader_handle_t")] BgfxShaderHandle handle, [NativeName(NativeNameType.Param, "_uniforms")] [NativeName(NativeNameType.Type, "bgfx_uniform_handle_t*")] BgfxUniformHandle* uniforms, [NativeName(NativeNameType.Param, "_max")] [NativeName(NativeNameType.Type, "uint16_t")] ushort max)
		{
			ushort ret = BgfxGetShaderUniformsNative(handle, uniforms, max);
			return ret;
		}

		/// <summary>
		/// Returns the number of uniforms and uniform handles used inside a shader.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_shader_uniforms")]
		[return: NativeName(NativeNameType.Type, "uint16_t")]
		public static ushort BgfxGetShaderUniforms([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_shader_handle_t")] BgfxShaderHandle handle, [NativeName(NativeNameType.Param, "_uniforms")] [NativeName(NativeNameType.Type, "bgfx_uniform_handle_t*")] ref BgfxUniformHandle uniforms, [NativeName(NativeNameType.Param, "_max")] [NativeName(NativeNameType.Type, "uint16_t")] ushort max)
		{
			fixed (BgfxUniformHandle* puniforms = &uniforms)
			{
				ushort ret = BgfxGetShaderUniformsNative(handle, (BgfxUniformHandle*)puniforms, max);
				return ret;
			}
		}

		/// <summary>
		/// Set shader debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_shader_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetShaderNameNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_shader_handle_t")] BgfxShaderHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxShaderHandle, byte*, int, void>)vt[59])(handle, name, len);
			#else
			((delegate* unmanaged[Cdecl]<BgfxShaderHandle, nint, int, void>)vt[59])(handle, (nint)name, len);
			#endif
		}

		/// <summary>
		/// Set shader debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_shader_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetShaderName([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_shader_handle_t")] BgfxShaderHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			BgfxSetShaderNameNative(handle, name, len);
		}

		/// <summary>
		/// Set shader debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_shader_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetShaderName([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_shader_handle_t")] BgfxShaderHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			fixed (byte* pname = &name)
			{
				BgfxSetShaderNameNative(handle, (byte*)pname, len);
			}
		}

		/// <summary>
		/// Set shader debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_shader_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetShaderName([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_shader_handle_t")] BgfxShaderHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			fixed (byte* pname = name)
			{
				BgfxSetShaderNameNative(handle, (byte*)pname, len);
			}
		}

		/// <summary>
		/// Set shader debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_shader_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetShaderName([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_shader_handle_t")] BgfxShaderHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] string name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			BgfxSetShaderNameNative(handle, pStr0, len);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Destroy shader.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_shader")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxDestroyShaderNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_shader_handle_t")] BgfxShaderHandle handle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxShaderHandle, void>)vt[60])(handle);
			#else
			((delegate* unmanaged[Cdecl]<BgfxShaderHandle, void>)vt[60])(handle);
			#endif
		}

		/// <summary>
		/// Destroy shader.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_shader")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDestroyShader([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_shader_handle_t")] BgfxShaderHandle handle)
		{
			BgfxDestroyShaderNative(handle);
		}

		/// <summary>
		/// Create program with vertex and fragment shaders.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_program")]
		[return: NativeName(NativeNameType.Type, "bgfx_program_handle_t")]
		internal static BgfxProgramHandle BgfxCreateProgramNative([NativeName(NativeNameType.Param, "_vsh")] [NativeName(NativeNameType.Type, "bgfx_shader_handle_t")] BgfxShaderHandle vsh, [NativeName(NativeNameType.Param, "_fsh")] [NativeName(NativeNameType.Type, "bgfx_shader_handle_t")] BgfxShaderHandle fsh, [NativeName(NativeNameType.Param, "_destroyShaders")] [NativeName(NativeNameType.Type, "bool")] byte destroyShaders)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxShaderHandle, BgfxShaderHandle, byte, BgfxProgramHandle>)vt[61])(vsh, fsh, destroyShaders);
			#else
			return (BgfxProgramHandle)((delegate* unmanaged[Cdecl]<BgfxShaderHandle, BgfxShaderHandle, byte, BgfxProgramHandle>)vt[61])(vsh, fsh, destroyShaders);
			#endif
		}

		/// <summary>
		/// Create program with vertex and fragment shaders.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_program")]
		[return: NativeName(NativeNameType.Type, "bgfx_program_handle_t")]
		public static BgfxProgramHandle BgfxCreateProgram([NativeName(NativeNameType.Param, "_vsh")] [NativeName(NativeNameType.Type, "bgfx_shader_handle_t")] BgfxShaderHandle vsh, [NativeName(NativeNameType.Param, "_fsh")] [NativeName(NativeNameType.Type, "bgfx_shader_handle_t")] BgfxShaderHandle fsh, [NativeName(NativeNameType.Param, "_destroyShaders")] [NativeName(NativeNameType.Type, "bool")] bool destroyShaders)
		{
			BgfxProgramHandle ret = BgfxCreateProgramNative(vsh, fsh, destroyShaders ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// Create program with compute shader.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_compute_program")]
		[return: NativeName(NativeNameType.Type, "bgfx_program_handle_t")]
		internal static BgfxProgramHandle BgfxCreateComputeProgramNative([NativeName(NativeNameType.Param, "_csh")] [NativeName(NativeNameType.Type, "bgfx_shader_handle_t")] BgfxShaderHandle csh, [NativeName(NativeNameType.Param, "_destroyShaders")] [NativeName(NativeNameType.Type, "bool")] byte destroyShaders)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxShaderHandle, byte, BgfxProgramHandle>)vt[62])(csh, destroyShaders);
			#else
			return (BgfxProgramHandle)((delegate* unmanaged[Cdecl]<BgfxShaderHandle, byte, BgfxProgramHandle>)vt[62])(csh, destroyShaders);
			#endif
		}

		/// <summary>
		/// Create program with compute shader.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_compute_program")]
		[return: NativeName(NativeNameType.Type, "bgfx_program_handle_t")]
		public static BgfxProgramHandle BgfxCreateComputeProgram([NativeName(NativeNameType.Param, "_csh")] [NativeName(NativeNameType.Type, "bgfx_shader_handle_t")] BgfxShaderHandle csh, [NativeName(NativeNameType.Param, "_destroyShaders")] [NativeName(NativeNameType.Type, "bool")] bool destroyShaders)
		{
			BgfxProgramHandle ret = BgfxCreateComputeProgramNative(csh, destroyShaders ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// Destroy program.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_program")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxDestroyProgramNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle handle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxProgramHandle, void>)vt[63])(handle);
			#else
			((delegate* unmanaged[Cdecl]<BgfxProgramHandle, void>)vt[63])(handle);
			#endif
		}

		/// <summary>
		/// Destroy program.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_program")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDestroyProgram([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle handle)
		{
			BgfxDestroyProgramNative(handle);
		}

		/// <summary>
		/// Validate texture parameters.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_is_texture_valid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BgfxIsTextureValidNative([NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint16_t")] ushort depth, [NativeName(NativeNameType.Param, "_cubeMap")] [NativeName(NativeNameType.Type, "bool")] byte cubeMap, [NativeName(NativeNameType.Param, "_numLayers")] [NativeName(NativeNameType.Type, "uint16_t")] ushort numLayers, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ushort, byte, ushort, BgfxTextureFormat, ulong, byte>)vt[64])(depth, cubeMap, numLayers, format, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ushort, byte, ushort, BgfxTextureFormat, ulong, byte>)vt[64])(depth, cubeMap, numLayers, format, flags);
			#endif
		}

		/// <summary>
		/// Validate texture parameters.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_is_texture_valid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BgfxIsTextureValid([NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint16_t")] ushort depth, [NativeName(NativeNameType.Param, "_cubeMap")] [NativeName(NativeNameType.Type, "bool")] bool cubeMap, [NativeName(NativeNameType.Param, "_numLayers")] [NativeName(NativeNameType.Type, "uint16_t")] ushort numLayers, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong flags)
		{
			byte ret = BgfxIsTextureValidNative(depth, cubeMap ? (byte)1 : (byte)0, numLayers, format, flags);
			return ret != 0;
		}

		/// <summary>
		/// Validate frame buffer parameters.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_is_frame_buffer_valid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BgfxIsFrameBufferValidNative([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t")] byte num, [NativeName(NativeNameType.Param, "_attachment")] [NativeName(NativeNameType.Type, "const bgfx_attachment_t*")] BgfxAttachment* attachment)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte, BgfxAttachment*, byte>)vt[65])(num, attachment);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte, nint, byte>)vt[65])(num, (nint)attachment);
			#endif
		}

		/// <summary>
		/// Validate frame buffer parameters.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_is_frame_buffer_valid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BgfxIsFrameBufferValid([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t")] byte num, [NativeName(NativeNameType.Param, "_attachment")] [NativeName(NativeNameType.Type, "const bgfx_attachment_t*")] BgfxAttachment* attachment)
		{
			byte ret = BgfxIsFrameBufferValidNative(num, attachment);
			return ret != 0;
		}

		/// <summary>
		/// Validate frame buffer parameters.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_is_frame_buffer_valid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BgfxIsFrameBufferValid([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t")] byte num, [NativeName(NativeNameType.Param, "_attachment")] [NativeName(NativeNameType.Type, "const bgfx_attachment_t*")] ref BgfxAttachment attachment)
		{
			fixed (BgfxAttachment* pattachment = &attachment)
			{
				byte ret = BgfxIsFrameBufferValidNative(num, (BgfxAttachment*)pattachment);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate amount of memory required for texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_calc_texture_size")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxCalcTextureSizeNative([NativeName(NativeNameType.Param, "_info")] [NativeName(NativeNameType.Type, "bgfx_texture_info_t*")] BgfxTextureInfo* info, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint16_t")] ushort depth, [NativeName(NativeNameType.Param, "_cubeMap")] [NativeName(NativeNameType.Type, "bool")] byte cubeMap, [NativeName(NativeNameType.Param, "_hasMips")] [NativeName(NativeNameType.Type, "bool")] byte hasMips, [NativeName(NativeNameType.Param, "_numLayers")] [NativeName(NativeNameType.Type, "uint16_t")] ushort numLayers, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxTextureInfo*, ushort, ushort, ushort, byte, byte, ushort, BgfxTextureFormat, void>)vt[66])(info, width, height, depth, cubeMap, hasMips, numLayers, format);
			#else
			((delegate* unmanaged[Cdecl]<nint, ushort, ushort, ushort, byte, byte, ushort, BgfxTextureFormat, void>)vt[66])((nint)info, width, height, depth, cubeMap, hasMips, numLayers, format);
			#endif
		}

		/// <summary>
		/// Calculate amount of memory required for texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_calc_texture_size")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxCalcTextureSize([NativeName(NativeNameType.Param, "_info")] [NativeName(NativeNameType.Type, "bgfx_texture_info_t*")] BgfxTextureInfo* info, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint16_t")] ushort depth, [NativeName(NativeNameType.Param, "_cubeMap")] [NativeName(NativeNameType.Type, "bool")] bool cubeMap, [NativeName(NativeNameType.Param, "_hasMips")] [NativeName(NativeNameType.Type, "bool")] bool hasMips, [NativeName(NativeNameType.Param, "_numLayers")] [NativeName(NativeNameType.Type, "uint16_t")] ushort numLayers, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format)
		{
			BgfxCalcTextureSizeNative(info, width, height, depth, cubeMap ? (byte)1 : (byte)0, hasMips ? (byte)1 : (byte)0, numLayers, format);
		}

		/// <summary>
		/// Calculate amount of memory required for texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_calc_texture_size")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxCalcTextureSize([NativeName(NativeNameType.Param, "_info")] [NativeName(NativeNameType.Type, "bgfx_texture_info_t*")] ref BgfxTextureInfo info, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint16_t")] ushort depth, [NativeName(NativeNameType.Param, "_cubeMap")] [NativeName(NativeNameType.Type, "bool")] bool cubeMap, [NativeName(NativeNameType.Param, "_hasMips")] [NativeName(NativeNameType.Type, "bool")] bool hasMips, [NativeName(NativeNameType.Param, "_numLayers")] [NativeName(NativeNameType.Type, "uint16_t")] ushort numLayers, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format)
		{
			fixed (BgfxTextureInfo* pinfo = &info)
			{
				BgfxCalcTextureSizeNative((BgfxTextureInfo*)pinfo, width, height, depth, cubeMap ? (byte)1 : (byte)0, hasMips ? (byte)1 : (byte)0, numLayers, format);
			}
		}

		/// <summary>
		/// Create texture from memory buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_texture")]
		[return: NativeName(NativeNameType.Type, "bgfx_texture_handle_t")]
		internal static BgfxTextureHandle BgfxCreateTextureNative([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong flags, [NativeName(NativeNameType.Param, "_skip")] [NativeName(NativeNameType.Type, "uint8_t")] byte skip, [NativeName(NativeNameType.Param, "_info")] [NativeName(NativeNameType.Type, "bgfx_texture_info_t*")] BgfxTextureInfo* info)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxMemory*, ulong, byte, BgfxTextureInfo*, BgfxTextureHandle>)vt[67])(mem, flags, skip, info);
			#else
			return (BgfxTextureHandle)((delegate* unmanaged[Cdecl]<nint, ulong, byte, nint, BgfxTextureHandle>)vt[67])((nint)mem, flags, skip, (nint)info);
			#endif
		}

		/// <summary>
		/// Create texture from memory buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_texture")]
		[return: NativeName(NativeNameType.Type, "bgfx_texture_handle_t")]
		public static BgfxTextureHandle BgfxCreateTexture([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong flags, [NativeName(NativeNameType.Param, "_skip")] [NativeName(NativeNameType.Type, "uint8_t")] byte skip, [NativeName(NativeNameType.Param, "_info")] [NativeName(NativeNameType.Type, "bgfx_texture_info_t*")] BgfxTextureInfo* info)
		{
			BgfxTextureHandle ret = BgfxCreateTextureNative(mem, flags, skip, info);
			return ret;
		}

		/// <summary>
		/// Create texture from memory buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_texture")]
		[return: NativeName(NativeNameType.Type, "bgfx_texture_handle_t")]
		public static BgfxTextureHandle BgfxCreateTexture([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] ref BgfxMemory mem, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong flags, [NativeName(NativeNameType.Param, "_skip")] [NativeName(NativeNameType.Type, "uint8_t")] byte skip, [NativeName(NativeNameType.Param, "_info")] [NativeName(NativeNameType.Type, "bgfx_texture_info_t*")] BgfxTextureInfo* info)
		{
			fixed (BgfxMemory* pmem = &mem)
			{
				BgfxTextureHandle ret = BgfxCreateTextureNative((BgfxMemory*)pmem, flags, skip, info);
				return ret;
			}
		}

		/// <summary>
		/// Create texture from memory buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_texture")]
		[return: NativeName(NativeNameType.Type, "bgfx_texture_handle_t")]
		public static BgfxTextureHandle BgfxCreateTexture([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong flags, [NativeName(NativeNameType.Param, "_skip")] [NativeName(NativeNameType.Type, "uint8_t")] byte skip, [NativeName(NativeNameType.Param, "_info")] [NativeName(NativeNameType.Type, "bgfx_texture_info_t*")] ref BgfxTextureInfo info)
		{
			fixed (BgfxTextureInfo* pinfo = &info)
			{
				BgfxTextureHandle ret = BgfxCreateTextureNative(mem, flags, skip, (BgfxTextureInfo*)pinfo);
				return ret;
			}
		}

		/// <summary>
		/// Create texture from memory buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_texture")]
		[return: NativeName(NativeNameType.Type, "bgfx_texture_handle_t")]
		public static BgfxTextureHandle BgfxCreateTexture([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] ref BgfxMemory mem, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong flags, [NativeName(NativeNameType.Param, "_skip")] [NativeName(NativeNameType.Type, "uint8_t")] byte skip, [NativeName(NativeNameType.Param, "_info")] [NativeName(NativeNameType.Type, "bgfx_texture_info_t*")] ref BgfxTextureInfo info)
		{
			fixed (BgfxMemory* pmem = &mem)
			{
				fixed (BgfxTextureInfo* pinfo = &info)
				{
					BgfxTextureHandle ret = BgfxCreateTextureNative((BgfxMemory*)pmem, flags, skip, (BgfxTextureInfo*)pinfo);
					return ret;
				}
			}
		}

		/// <summary>
		/// Create 2D texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_texture_2d")]
		[return: NativeName(NativeNameType.Type, "bgfx_texture_handle_t")]
		internal static BgfxTextureHandle BgfxCreateTexture2DNative([NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_hasMips")] [NativeName(NativeNameType.Type, "bool")] byte hasMips, [NativeName(NativeNameType.Param, "_numLayers")] [NativeName(NativeNameType.Type, "uint16_t")] ushort numLayers, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong flags, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ushort, ushort, byte, ushort, BgfxTextureFormat, ulong, BgfxMemory*, BgfxTextureHandle>)vt[68])(width, height, hasMips, numLayers, format, flags, mem);
			#else
			return (BgfxTextureHandle)((delegate* unmanaged[Cdecl]<ushort, ushort, byte, ushort, BgfxTextureFormat, ulong, nint, BgfxTextureHandle>)vt[68])(width, height, hasMips, numLayers, format, flags, (nint)mem);
			#endif
		}

		/// <summary>
		/// Create 2D texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_texture_2d")]
		[return: NativeName(NativeNameType.Type, "bgfx_texture_handle_t")]
		public static BgfxTextureHandle BgfxCreateTexture2D([NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_hasMips")] [NativeName(NativeNameType.Type, "bool")] bool hasMips, [NativeName(NativeNameType.Param, "_numLayers")] [NativeName(NativeNameType.Type, "uint16_t")] ushort numLayers, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong flags, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem)
		{
			BgfxTextureHandle ret = BgfxCreateTexture2DNative(width, height, hasMips ? (byte)1 : (byte)0, numLayers, format, flags, mem);
			return ret;
		}

		/// <summary>
		/// Create 2D texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_texture_2d")]
		[return: NativeName(NativeNameType.Type, "bgfx_texture_handle_t")]
		public static BgfxTextureHandle BgfxCreateTexture2D([NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_hasMips")] [NativeName(NativeNameType.Type, "bool")] bool hasMips, [NativeName(NativeNameType.Param, "_numLayers")] [NativeName(NativeNameType.Type, "uint16_t")] ushort numLayers, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong flags, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] ref BgfxMemory mem)
		{
			fixed (BgfxMemory* pmem = &mem)
			{
				BgfxTextureHandle ret = BgfxCreateTexture2DNative(width, height, hasMips ? (byte)1 : (byte)0, numLayers, format, flags, (BgfxMemory*)pmem);
				return ret;
			}
		}

		/// <summary>
		/// Create texture with size based on back-buffer ratio. Texture will maintain ratio<br/>
		/// if back buffer resolution changes.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_texture_2d_scaled")]
		[return: NativeName(NativeNameType.Type, "bgfx_texture_handle_t")]
		internal static BgfxTextureHandle BgfxCreateTexture2DScaledNative([NativeName(NativeNameType.Param, "_ratio")] [NativeName(NativeNameType.Type, "bgfx_backbuffer_ratio_t")] BgfxBackbufferRatio ratio, [NativeName(NativeNameType.Param, "_hasMips")] [NativeName(NativeNameType.Type, "bool")] byte hasMips, [NativeName(NativeNameType.Param, "_numLayers")] [NativeName(NativeNameType.Type, "uint16_t")] ushort numLayers, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxBackbufferRatio, byte, ushort, BgfxTextureFormat, ulong, BgfxTextureHandle>)vt[69])(ratio, hasMips, numLayers, format, flags);
			#else
			return (BgfxTextureHandle)((delegate* unmanaged[Cdecl]<BgfxBackbufferRatio, byte, ushort, BgfxTextureFormat, ulong, BgfxTextureHandle>)vt[69])(ratio, hasMips, numLayers, format, flags);
			#endif
		}

		/// <summary>
		/// Create texture with size based on back-buffer ratio. Texture will maintain ratio<br/>
		/// if back buffer resolution changes.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_texture_2d_scaled")]
		[return: NativeName(NativeNameType.Type, "bgfx_texture_handle_t")]
		public static BgfxTextureHandle BgfxCreateTexture2DScaled([NativeName(NativeNameType.Param, "_ratio")] [NativeName(NativeNameType.Type, "bgfx_backbuffer_ratio_t")] BgfxBackbufferRatio ratio, [NativeName(NativeNameType.Param, "_hasMips")] [NativeName(NativeNameType.Type, "bool")] bool hasMips, [NativeName(NativeNameType.Param, "_numLayers")] [NativeName(NativeNameType.Type, "uint16_t")] ushort numLayers, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong flags)
		{
			BgfxTextureHandle ret = BgfxCreateTexture2DScaledNative(ratio, hasMips ? (byte)1 : (byte)0, numLayers, format, flags);
			return ret;
		}

		/// <summary>
		/// Create 3D texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_texture_3d")]
		[return: NativeName(NativeNameType.Type, "bgfx_texture_handle_t")]
		internal static BgfxTextureHandle BgfxCreateTexture3DNative([NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint16_t")] ushort depth, [NativeName(NativeNameType.Param, "_hasMips")] [NativeName(NativeNameType.Type, "bool")] byte hasMips, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong flags, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ushort, ushort, ushort, byte, BgfxTextureFormat, ulong, BgfxMemory*, BgfxTextureHandle>)vt[70])(width, height, depth, hasMips, format, flags, mem);
			#else
			return (BgfxTextureHandle)((delegate* unmanaged[Cdecl]<ushort, ushort, ushort, byte, BgfxTextureFormat, ulong, nint, BgfxTextureHandle>)vt[70])(width, height, depth, hasMips, format, flags, (nint)mem);
			#endif
		}

		/// <summary>
		/// Create 3D texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_texture_3d")]
		[return: NativeName(NativeNameType.Type, "bgfx_texture_handle_t")]
		public static BgfxTextureHandle BgfxCreateTexture3D([NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint16_t")] ushort depth, [NativeName(NativeNameType.Param, "_hasMips")] [NativeName(NativeNameType.Type, "bool")] bool hasMips, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong flags, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem)
		{
			BgfxTextureHandle ret = BgfxCreateTexture3DNative(width, height, depth, hasMips ? (byte)1 : (byte)0, format, flags, mem);
			return ret;
		}

		/// <summary>
		/// Create 3D texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_texture_3d")]
		[return: NativeName(NativeNameType.Type, "bgfx_texture_handle_t")]
		public static BgfxTextureHandle BgfxCreateTexture3D([NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint16_t")] ushort depth, [NativeName(NativeNameType.Param, "_hasMips")] [NativeName(NativeNameType.Type, "bool")] bool hasMips, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong flags, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] ref BgfxMemory mem)
		{
			fixed (BgfxMemory* pmem = &mem)
			{
				BgfxTextureHandle ret = BgfxCreateTexture3DNative(width, height, depth, hasMips ? (byte)1 : (byte)0, format, flags, (BgfxMemory*)pmem);
				return ret;
			}
		}

		/// <summary>
		/// Create Cube texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_texture_cube")]
		[return: NativeName(NativeNameType.Type, "bgfx_texture_handle_t")]
		internal static BgfxTextureHandle BgfxCreateTextureCubeNative([NativeName(NativeNameType.Param, "_size")] [NativeName(NativeNameType.Type, "uint16_t")] ushort size, [NativeName(NativeNameType.Param, "_hasMips")] [NativeName(NativeNameType.Type, "bool")] byte hasMips, [NativeName(NativeNameType.Param, "_numLayers")] [NativeName(NativeNameType.Type, "uint16_t")] ushort numLayers, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong flags, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ushort, byte, ushort, BgfxTextureFormat, ulong, BgfxMemory*, BgfxTextureHandle>)vt[71])(size, hasMips, numLayers, format, flags, mem);
			#else
			return (BgfxTextureHandle)((delegate* unmanaged[Cdecl]<ushort, byte, ushort, BgfxTextureFormat, ulong, nint, BgfxTextureHandle>)vt[71])(size, hasMips, numLayers, format, flags, (nint)mem);
			#endif
		}

		/// <summary>
		/// Create Cube texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_texture_cube")]
		[return: NativeName(NativeNameType.Type, "bgfx_texture_handle_t")]
		public static BgfxTextureHandle BgfxCreateTextureCube([NativeName(NativeNameType.Param, "_size")] [NativeName(NativeNameType.Type, "uint16_t")] ushort size, [NativeName(NativeNameType.Param, "_hasMips")] [NativeName(NativeNameType.Type, "bool")] bool hasMips, [NativeName(NativeNameType.Param, "_numLayers")] [NativeName(NativeNameType.Type, "uint16_t")] ushort numLayers, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong flags, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem)
		{
			BgfxTextureHandle ret = BgfxCreateTextureCubeNative(size, hasMips ? (byte)1 : (byte)0, numLayers, format, flags, mem);
			return ret;
		}

		/// <summary>
		/// Create Cube texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_texture_cube")]
		[return: NativeName(NativeNameType.Type, "bgfx_texture_handle_t")]
		public static BgfxTextureHandle BgfxCreateTextureCube([NativeName(NativeNameType.Param, "_size")] [NativeName(NativeNameType.Type, "uint16_t")] ushort size, [NativeName(NativeNameType.Param, "_hasMips")] [NativeName(NativeNameType.Type, "bool")] bool hasMips, [NativeName(NativeNameType.Param, "_numLayers")] [NativeName(NativeNameType.Type, "uint16_t")] ushort numLayers, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong flags, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] ref BgfxMemory mem)
		{
			fixed (BgfxMemory* pmem = &mem)
			{
				BgfxTextureHandle ret = BgfxCreateTextureCubeNative(size, hasMips ? (byte)1 : (byte)0, numLayers, format, flags, (BgfxMemory*)pmem);
				return ret;
			}
		}

		/// <summary>
		/// Update 2D texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_update_texture_2d")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxUpdateTexture2DNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_layer")] [NativeName(NativeNameType.Type, "uint16_t")] ushort layer, [NativeName(NativeNameType.Param, "_mip")] [NativeName(NativeNameType.Type, "uint8_t")] byte mip, [NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem, [NativeName(NativeNameType.Param, "_pitch")] [NativeName(NativeNameType.Type, "uint16_t")] ushort pitch)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxTextureHandle, ushort, byte, ushort, ushort, ushort, ushort, BgfxMemory*, ushort, void>)vt[72])(handle, layer, mip, x, y, width, height, mem, pitch);
			#else
			((delegate* unmanaged[Cdecl]<BgfxTextureHandle, ushort, byte, ushort, ushort, ushort, ushort, nint, ushort, void>)vt[72])(handle, layer, mip, x, y, width, height, (nint)mem, pitch);
			#endif
		}

		/// <summary>
		/// Update 2D texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_update_texture_2d")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxUpdateTexture2D([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_layer")] [NativeName(NativeNameType.Type, "uint16_t")] ushort layer, [NativeName(NativeNameType.Param, "_mip")] [NativeName(NativeNameType.Type, "uint8_t")] byte mip, [NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem, [NativeName(NativeNameType.Param, "_pitch")] [NativeName(NativeNameType.Type, "uint16_t")] ushort pitch)
		{
			BgfxUpdateTexture2DNative(handle, layer, mip, x, y, width, height, mem, pitch);
		}

		/// <summary>
		/// Update 2D texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_update_texture_2d")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxUpdateTexture2D([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_layer")] [NativeName(NativeNameType.Type, "uint16_t")] ushort layer, [NativeName(NativeNameType.Param, "_mip")] [NativeName(NativeNameType.Type, "uint8_t")] byte mip, [NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] ref BgfxMemory mem, [NativeName(NativeNameType.Param, "_pitch")] [NativeName(NativeNameType.Type, "uint16_t")] ushort pitch)
		{
			fixed (BgfxMemory* pmem = &mem)
			{
				BgfxUpdateTexture2DNative(handle, layer, mip, x, y, width, height, (BgfxMemory*)pmem, pitch);
			}
		}

		/// <summary>
		/// Update 3D texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_update_texture_3d")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxUpdateTexture3DNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_mip")] [NativeName(NativeNameType.Type, "uint8_t")] byte mip, [NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_z")] [NativeName(NativeNameType.Type, "uint16_t")] ushort z, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint16_t")] ushort depth, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxTextureHandle, byte, ushort, ushort, ushort, ushort, ushort, ushort, BgfxMemory*, void>)vt[73])(handle, mip, x, y, z, width, height, depth, mem);
			#else
			((delegate* unmanaged[Cdecl]<BgfxTextureHandle, byte, ushort, ushort, ushort, ushort, ushort, ushort, nint, void>)vt[73])(handle, mip, x, y, z, width, height, depth, (nint)mem);
			#endif
		}

		/// <summary>
		/// Update 3D texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_update_texture_3d")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxUpdateTexture3D([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_mip")] [NativeName(NativeNameType.Type, "uint8_t")] byte mip, [NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_z")] [NativeName(NativeNameType.Type, "uint16_t")] ushort z, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint16_t")] ushort depth, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem)
		{
			BgfxUpdateTexture3DNative(handle, mip, x, y, z, width, height, depth, mem);
		}

		/// <summary>
		/// Update 3D texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_update_texture_3d")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxUpdateTexture3D([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_mip")] [NativeName(NativeNameType.Type, "uint8_t")] byte mip, [NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_z")] [NativeName(NativeNameType.Type, "uint16_t")] ushort z, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint16_t")] ushort depth, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] ref BgfxMemory mem)
		{
			fixed (BgfxMemory* pmem = &mem)
			{
				BgfxUpdateTexture3DNative(handle, mip, x, y, z, width, height, depth, (BgfxMemory*)pmem);
			}
		}

		/// <summary>
		/// Update Cube texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_update_texture_cube")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxUpdateTextureCubeNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_layer")] [NativeName(NativeNameType.Type, "uint16_t")] ushort layer, [NativeName(NativeNameType.Param, "_side")] [NativeName(NativeNameType.Type, "uint8_t")] byte side, [NativeName(NativeNameType.Param, "_mip")] [NativeName(NativeNameType.Type, "uint8_t")] byte mip, [NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem, [NativeName(NativeNameType.Param, "_pitch")] [NativeName(NativeNameType.Type, "uint16_t")] ushort pitch)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxTextureHandle, ushort, byte, byte, ushort, ushort, ushort, ushort, BgfxMemory*, ushort, void>)vt[74])(handle, layer, side, mip, x, y, width, height, mem, pitch);
			#else
			((delegate* unmanaged[Cdecl]<BgfxTextureHandle, ushort, byte, byte, ushort, ushort, ushort, ushort, nint, ushort, void>)vt[74])(handle, layer, side, mip, x, y, width, height, (nint)mem, pitch);
			#endif
		}

		/// <summary>
		/// Update Cube texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_update_texture_cube")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxUpdateTextureCube([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_layer")] [NativeName(NativeNameType.Type, "uint16_t")] ushort layer, [NativeName(NativeNameType.Param, "_side")] [NativeName(NativeNameType.Type, "uint8_t")] byte side, [NativeName(NativeNameType.Param, "_mip")] [NativeName(NativeNameType.Type, "uint8_t")] byte mip, [NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem, [NativeName(NativeNameType.Param, "_pitch")] [NativeName(NativeNameType.Type, "uint16_t")] ushort pitch)
		{
			BgfxUpdateTextureCubeNative(handle, layer, side, mip, x, y, width, height, mem, pitch);
		}

		/// <summary>
		/// Update Cube texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_update_texture_cube")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxUpdateTextureCube([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_layer")] [NativeName(NativeNameType.Type, "uint16_t")] ushort layer, [NativeName(NativeNameType.Param, "_side")] [NativeName(NativeNameType.Type, "uint8_t")] byte side, [NativeName(NativeNameType.Param, "_mip")] [NativeName(NativeNameType.Type, "uint8_t")] byte mip, [NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] ref BgfxMemory mem, [NativeName(NativeNameType.Param, "_pitch")] [NativeName(NativeNameType.Type, "uint16_t")] ushort pitch)
		{
			fixed (BgfxMemory* pmem = &mem)
			{
				BgfxUpdateTextureCubeNative(handle, layer, side, mip, x, y, width, height, (BgfxMemory*)pmem, pitch);
			}
		}

		/// <summary>
		/// Read back texture content.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_read_texture")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		internal static uint BgfxReadTextureNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "_mip")] [NativeName(NativeNameType.Type, "uint8_t")] byte mip)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxTextureHandle, void*, byte, uint>)vt[75])(handle, data, mip);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<BgfxTextureHandle, nint, byte, uint>)vt[75])(handle, (nint)data, mip);
			#endif
		}

		/// <summary>
		/// Read back texture content.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_read_texture")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint BgfxReadTexture([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "_mip")] [NativeName(NativeNameType.Type, "uint8_t")] byte mip)
		{
			uint ret = BgfxReadTextureNative(handle, data, mip);
			return ret;
		}

		/// <summary>
		/// Set texture debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_texture_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetTextureNameNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxTextureHandle, byte*, int, void>)vt[76])(handle, name, len);
			#else
			((delegate* unmanaged[Cdecl]<BgfxTextureHandle, nint, int, void>)vt[76])(handle, (nint)name, len);
			#endif
		}

		/// <summary>
		/// Set texture debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_texture_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetTextureName([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			BgfxSetTextureNameNative(handle, name, len);
		}

		/// <summary>
		/// Set texture debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_texture_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetTextureName([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			fixed (byte* pname = &name)
			{
				BgfxSetTextureNameNative(handle, (byte*)pname, len);
			}
		}

		/// <summary>
		/// Set texture debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_texture_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetTextureName([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			fixed (byte* pname = name)
			{
				BgfxSetTextureNameNative(handle, (byte*)pname, len);
			}
		}

		/// <summary>
		/// Set texture debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_texture_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetTextureName([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] string name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			BgfxSetTextureNameNative(handle, pStr0, len);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Returns texture direct access pointer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_direct_access_ptr")]
		[return: NativeName(NativeNameType.Type, "void*")]
		internal static void* BgfxGetDirectAccessPtrNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxTextureHandle, void*>)vt[77])(handle);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<BgfxTextureHandle, nint>)vt[77])(handle);
			#endif
		}

		/// <summary>
		/// Returns texture direct access pointer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_direct_access_ptr")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* BgfxGetDirectAccessPtr([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle)
		{
			void* ret = BgfxGetDirectAccessPtrNative(handle);
			return ret;
		}

		/// <summary>
		/// Destroy texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_texture")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxDestroyTextureNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxTextureHandle, void>)vt[78])(handle);
			#else
			((delegate* unmanaged[Cdecl]<BgfxTextureHandle, void>)vt[78])(handle);
			#endif
		}

		/// <summary>
		/// Destroy texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_texture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDestroyTexture([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle)
		{
			BgfxDestroyTextureNative(handle);
		}

		/// <summary>
		/// Create frame buffer (simple).<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_frame_buffer")]
		[return: NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")]
		internal static BgfxFrameBufferHandle BgfxCreateFrameBufferNative([NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_textureFlags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong textureFlags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ushort, ushort, BgfxTextureFormat, ulong, BgfxFrameBufferHandle>)vt[79])(width, height, format, textureFlags);
			#else
			return (BgfxFrameBufferHandle)((delegate* unmanaged[Cdecl]<ushort, ushort, BgfxTextureFormat, ulong, BgfxFrameBufferHandle>)vt[79])(width, height, format, textureFlags);
			#endif
		}

		/// <summary>
		/// Create frame buffer (simple).<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_frame_buffer")]
		[return: NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")]
		public static BgfxFrameBufferHandle BgfxCreateFrameBuffer([NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_textureFlags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong textureFlags)
		{
			BgfxFrameBufferHandle ret = BgfxCreateFrameBufferNative(width, height, format, textureFlags);
			return ret;
		}

		/// <summary>
		/// Create frame buffer with size based on back-buffer ratio. Frame buffer will maintain ratio<br/>
		/// if back buffer resolution changes.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_frame_buffer_scaled")]
		[return: NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")]
		internal static BgfxFrameBufferHandle BgfxCreateFrameBufferScaledNative([NativeName(NativeNameType.Param, "_ratio")] [NativeName(NativeNameType.Type, "bgfx_backbuffer_ratio_t")] BgfxBackbufferRatio ratio, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_textureFlags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong textureFlags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxBackbufferRatio, BgfxTextureFormat, ulong, BgfxFrameBufferHandle>)vt[80])(ratio, format, textureFlags);
			#else
			return (BgfxFrameBufferHandle)((delegate* unmanaged[Cdecl]<BgfxBackbufferRatio, BgfxTextureFormat, ulong, BgfxFrameBufferHandle>)vt[80])(ratio, format, textureFlags);
			#endif
		}

		/// <summary>
		/// Create frame buffer with size based on back-buffer ratio. Frame buffer will maintain ratio<br/>
		/// if back buffer resolution changes.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_frame_buffer_scaled")]
		[return: NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")]
		public static BgfxFrameBufferHandle BgfxCreateFrameBufferScaled([NativeName(NativeNameType.Param, "_ratio")] [NativeName(NativeNameType.Type, "bgfx_backbuffer_ratio_t")] BgfxBackbufferRatio ratio, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_textureFlags")] [NativeName(NativeNameType.Type, "uint64_t")] ulong textureFlags)
		{
			BgfxFrameBufferHandle ret = BgfxCreateFrameBufferScaledNative(ratio, format, textureFlags);
			return ret;
		}

		/// <summary>
		/// Create MRT frame buffer from texture handles (simple).<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_frame_buffer_from_handles")]
		[return: NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")]
		internal static BgfxFrameBufferHandle BgfxCreateFrameBufferFromHandlesNative([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t")] byte num, [NativeName(NativeNameType.Param, "_handles")] [NativeName(NativeNameType.Type, "const bgfx_texture_handle_t*")] BgfxTextureHandle* handles, [NativeName(NativeNameType.Param, "_destroyTexture")] [NativeName(NativeNameType.Type, "bool")] byte destroyTexture)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte, BgfxTextureHandle*, byte, BgfxFrameBufferHandle>)vt[81])(num, handles, destroyTexture);
			#else
			return (BgfxFrameBufferHandle)((delegate* unmanaged[Cdecl]<byte, nint, byte, BgfxFrameBufferHandle>)vt[81])(num, (nint)handles, destroyTexture);
			#endif
		}

		/// <summary>
		/// Create MRT frame buffer from texture handles (simple).<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_frame_buffer_from_handles")]
		[return: NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")]
		public static BgfxFrameBufferHandle BgfxCreateFrameBufferFromHandles([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t")] byte num, [NativeName(NativeNameType.Param, "_handles")] [NativeName(NativeNameType.Type, "const bgfx_texture_handle_t*")] BgfxTextureHandle* handles, [NativeName(NativeNameType.Param, "_destroyTexture")] [NativeName(NativeNameType.Type, "bool")] bool destroyTexture)
		{
			BgfxFrameBufferHandle ret = BgfxCreateFrameBufferFromHandlesNative(num, handles, destroyTexture ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// Create MRT frame buffer from texture handles (simple).<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_frame_buffer_from_handles")]
		[return: NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")]
		public static BgfxFrameBufferHandle BgfxCreateFrameBufferFromHandles([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t")] byte num, [NativeName(NativeNameType.Param, "_handles")] [NativeName(NativeNameType.Type, "const bgfx_texture_handle_t*")] ref BgfxTextureHandle handles, [NativeName(NativeNameType.Param, "_destroyTexture")] [NativeName(NativeNameType.Type, "bool")] bool destroyTexture)
		{
			fixed (BgfxTextureHandle* phandles = &handles)
			{
				BgfxFrameBufferHandle ret = BgfxCreateFrameBufferFromHandlesNative(num, (BgfxTextureHandle*)phandles, destroyTexture ? (byte)1 : (byte)0);
				return ret;
			}
		}

		/// <summary>
		/// Create MRT frame buffer from texture handles with specific layer and<br/>
		/// mip level.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_frame_buffer_from_attachment")]
		[return: NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")]
		internal static BgfxFrameBufferHandle BgfxCreateFrameBufferFromAttachmentNative([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t")] byte num, [NativeName(NativeNameType.Param, "_attachment")] [NativeName(NativeNameType.Type, "const bgfx_attachment_t*")] BgfxAttachment* attachment, [NativeName(NativeNameType.Param, "_destroyTexture")] [NativeName(NativeNameType.Type, "bool")] byte destroyTexture)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte, BgfxAttachment*, byte, BgfxFrameBufferHandle>)vt[82])(num, attachment, destroyTexture);
			#else
			return (BgfxFrameBufferHandle)((delegate* unmanaged[Cdecl]<byte, nint, byte, BgfxFrameBufferHandle>)vt[82])(num, (nint)attachment, destroyTexture);
			#endif
		}

		/// <summary>
		/// Create MRT frame buffer from texture handles with specific layer and<br/>
		/// mip level.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_frame_buffer_from_attachment")]
		[return: NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")]
		public static BgfxFrameBufferHandle BgfxCreateFrameBufferFromAttachment([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t")] byte num, [NativeName(NativeNameType.Param, "_attachment")] [NativeName(NativeNameType.Type, "const bgfx_attachment_t*")] BgfxAttachment* attachment, [NativeName(NativeNameType.Param, "_destroyTexture")] [NativeName(NativeNameType.Type, "bool")] bool destroyTexture)
		{
			BgfxFrameBufferHandle ret = BgfxCreateFrameBufferFromAttachmentNative(num, attachment, destroyTexture ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// Create MRT frame buffer from texture handles with specific layer and<br/>
		/// mip level.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_frame_buffer_from_attachment")]
		[return: NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")]
		public static BgfxFrameBufferHandle BgfxCreateFrameBufferFromAttachment([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t")] byte num, [NativeName(NativeNameType.Param, "_attachment")] [NativeName(NativeNameType.Type, "const bgfx_attachment_t*")] ref BgfxAttachment attachment, [NativeName(NativeNameType.Param, "_destroyTexture")] [NativeName(NativeNameType.Type, "bool")] bool destroyTexture)
		{
			fixed (BgfxAttachment* pattachment = &attachment)
			{
				BgfxFrameBufferHandle ret = BgfxCreateFrameBufferFromAttachmentNative(num, (BgfxAttachment*)pattachment, destroyTexture ? (byte)1 : (byte)0);
				return ret;
			}
		}

		/// <summary>
		/// Create frame buffer for multiple window rendering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_frame_buffer_from_nwh")]
		[return: NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")]
		internal static BgfxFrameBufferHandle BgfxCreateFrameBufferFromNwhNative([NativeName(NativeNameType.Param, "_nwh")] [NativeName(NativeNameType.Type, "void*")] void* nwh, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_depthFormat")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat depthFormat)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, ushort, ushort, BgfxTextureFormat, BgfxTextureFormat, BgfxFrameBufferHandle>)vt[83])(nwh, width, height, format, depthFormat);
			#else
			return (BgfxFrameBufferHandle)((delegate* unmanaged[Cdecl]<nint, ushort, ushort, BgfxTextureFormat, BgfxTextureFormat, BgfxFrameBufferHandle>)vt[83])((nint)nwh, width, height, format, depthFormat);
			#endif
		}

		/// <summary>
		/// Create frame buffer for multiple window rendering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_frame_buffer_from_nwh")]
		[return: NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")]
		public static BgfxFrameBufferHandle BgfxCreateFrameBufferFromNwh([NativeName(NativeNameType.Param, "_nwh")] [NativeName(NativeNameType.Type, "void*")] void* nwh, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format, [NativeName(NativeNameType.Param, "_depthFormat")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat depthFormat)
		{
			BgfxFrameBufferHandle ret = BgfxCreateFrameBufferFromNwhNative(nwh, width, height, format, depthFormat);
			return ret;
		}

		/// <summary>
		/// Set frame buffer debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_frame_buffer_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetFrameBufferNameNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")] BgfxFrameBufferHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxFrameBufferHandle, byte*, int, void>)vt[84])(handle, name, len);
			#else
			((delegate* unmanaged[Cdecl]<BgfxFrameBufferHandle, nint, int, void>)vt[84])(handle, (nint)name, len);
			#endif
		}

		/// <summary>
		/// Set frame buffer debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_frame_buffer_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetFrameBufferName([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")] BgfxFrameBufferHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			BgfxSetFrameBufferNameNative(handle, name, len);
		}

		/// <summary>
		/// Set frame buffer debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_frame_buffer_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetFrameBufferName([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")] BgfxFrameBufferHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			fixed (byte* pname = &name)
			{
				BgfxSetFrameBufferNameNative(handle, (byte*)pname, len);
			}
		}

		/// <summary>
		/// Set frame buffer debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_frame_buffer_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetFrameBufferName([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")] BgfxFrameBufferHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			fixed (byte* pname = name)
			{
				BgfxSetFrameBufferNameNative(handle, (byte*)pname, len);
			}
		}

		/// <summary>
		/// Set frame buffer debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_frame_buffer_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetFrameBufferName([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")] BgfxFrameBufferHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] string name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			BgfxSetFrameBufferNameNative(handle, pStr0, len);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Obtain texture handle of frame buffer attachment.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_texture")]
		[return: NativeName(NativeNameType.Type, "bgfx_texture_handle_t")]
		internal static BgfxTextureHandle BgfxGetTextureNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")] BgfxFrameBufferHandle handle, [NativeName(NativeNameType.Param, "_attachment")] [NativeName(NativeNameType.Type, "uint8_t")] byte attachment)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxFrameBufferHandle, byte, BgfxTextureHandle>)vt[85])(handle, attachment);
			#else
			return (BgfxTextureHandle)((delegate* unmanaged[Cdecl]<BgfxFrameBufferHandle, byte, BgfxTextureHandle>)vt[85])(handle, attachment);
			#endif
		}

		/// <summary>
		/// Obtain texture handle of frame buffer attachment.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_texture")]
		[return: NativeName(NativeNameType.Type, "bgfx_texture_handle_t")]
		public static BgfxTextureHandle BgfxGetTexture([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")] BgfxFrameBufferHandle handle, [NativeName(NativeNameType.Param, "_attachment")] [NativeName(NativeNameType.Type, "uint8_t")] byte attachment)
		{
			BgfxTextureHandle ret = BgfxGetTextureNative(handle, attachment);
			return ret;
		}

		/// <summary>
		/// Destroy frame buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_frame_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxDestroyFrameBufferNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")] BgfxFrameBufferHandle handle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxFrameBufferHandle, void>)vt[86])(handle);
			#else
			((delegate* unmanaged[Cdecl]<BgfxFrameBufferHandle, void>)vt[86])(handle);
			#endif
		}

		/// <summary>
		/// Destroy frame buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_frame_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDestroyFrameBuffer([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")] BgfxFrameBufferHandle handle)
		{
			BgfxDestroyFrameBufferNative(handle);
		}

		/// <summary>
		/// Create shader uniform parameter.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_uniform")]
		[return: NativeName(NativeNameType.Type, "bgfx_uniform_handle_t")]
		internal static BgfxUniformHandle BgfxCreateUniformNative([NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_uniform_type_t")] BgfxUniformType type, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, BgfxUniformType, ushort, BgfxUniformHandle>)vt[87])(name, type, num);
			#else
			return (BgfxUniformHandle)((delegate* unmanaged[Cdecl]<nint, BgfxUniformType, ushort, BgfxUniformHandle>)vt[87])((nint)name, type, num);
			#endif
		}

		/// <summary>
		/// Create shader uniform parameter.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_uniform")]
		[return: NativeName(NativeNameType.Type, "bgfx_uniform_handle_t")]
		public static BgfxUniformHandle BgfxCreateUniform([NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_uniform_type_t")] BgfxUniformType type, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			BgfxUniformHandle ret = BgfxCreateUniformNative(name, type, num);
			return ret;
		}

		/// <summary>
		/// Create shader uniform parameter.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_uniform")]
		[return: NativeName(NativeNameType.Type, "bgfx_uniform_handle_t")]
		public static BgfxUniformHandle BgfxCreateUniform([NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_uniform_type_t")] BgfxUniformType type, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			fixed (byte* pname = &name)
			{
				BgfxUniformHandle ret = BgfxCreateUniformNative((byte*)pname, type, num);
				return ret;
			}
		}

		/// <summary>
		/// Create shader uniform parameter.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_uniform")]
		[return: NativeName(NativeNameType.Type, "bgfx_uniform_handle_t")]
		public static BgfxUniformHandle BgfxCreateUniform([NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_uniform_type_t")] BgfxUniformType type, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			fixed (byte* pname = name)
			{
				BgfxUniformHandle ret = BgfxCreateUniformNative((byte*)pname, type, num);
				return ret;
			}
		}

		/// <summary>
		/// Create shader uniform parameter.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_uniform")]
		[return: NativeName(NativeNameType.Type, "bgfx_uniform_handle_t")]
		public static BgfxUniformHandle BgfxCreateUniform([NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] string name, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_uniform_type_t")] BgfxUniformType type, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			BgfxUniformHandle ret = BgfxCreateUniformNative(pStr0, type, num);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Retrieve uniform info.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_uniform_info")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxGetUniformInfoNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_uniform_handle_t")] BgfxUniformHandle handle, [NativeName(NativeNameType.Param, "_info")] [NativeName(NativeNameType.Type, "bgfx_uniform_info_t*")] BgfxUniformInfo* info)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxUniformHandle, BgfxUniformInfo*, void>)vt[88])(handle, info);
			#else
			((delegate* unmanaged[Cdecl]<BgfxUniformHandle, nint, void>)vt[88])(handle, (nint)info);
			#endif
		}

		/// <summary>
		/// Retrieve uniform info.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_uniform_info")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxGetUniformInfo([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_uniform_handle_t")] BgfxUniformHandle handle, [NativeName(NativeNameType.Param, "_info")] [NativeName(NativeNameType.Type, "bgfx_uniform_info_t*")] BgfxUniformInfo* info)
		{
			BgfxGetUniformInfoNative(handle, info);
		}

		/// <summary>
		/// Retrieve uniform info.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_uniform_info")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxGetUniformInfo([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_uniform_handle_t")] BgfxUniformHandle handle, [NativeName(NativeNameType.Param, "_info")] [NativeName(NativeNameType.Type, "bgfx_uniform_info_t*")] ref BgfxUniformInfo info)
		{
			fixed (BgfxUniformInfo* pinfo = &info)
			{
				BgfxGetUniformInfoNative(handle, (BgfxUniformInfo*)pinfo);
			}
		}

		/// <summary>
		/// Destroy shader uniform parameter.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_uniform")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxDestroyUniformNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_uniform_handle_t")] BgfxUniformHandle handle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxUniformHandle, void>)vt[89])(handle);
			#else
			((delegate* unmanaged[Cdecl]<BgfxUniformHandle, void>)vt[89])(handle);
			#endif
		}

		/// <summary>
		/// Destroy shader uniform parameter.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_uniform")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDestroyUniform([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_uniform_handle_t")] BgfxUniformHandle handle)
		{
			BgfxDestroyUniformNative(handle);
		}

		/// <summary>
		/// Create occlusion query.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_occlusion_query")]
		[return: NativeName(NativeNameType.Type, "bgfx_occlusion_query_handle_t")]
		internal static BgfxOcclusionQueryHandle BgfxCreateOcclusionQueryNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxOcclusionQueryHandle>)vt[90])();
			#else
			return (BgfxOcclusionQueryHandle)((delegate* unmanaged[Cdecl]<BgfxOcclusionQueryHandle>)vt[90])();
			#endif
		}

		/// <summary>
		/// Create occlusion query.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_occlusion_query")]
		[return: NativeName(NativeNameType.Type, "bgfx_occlusion_query_handle_t")]
		public static BgfxOcclusionQueryHandle BgfxCreateOcclusionQuery()
		{
			BgfxOcclusionQueryHandle ret = BgfxCreateOcclusionQueryNative();
			return ret;
		}

		/// <summary>
		/// Retrieve occlusion query result from previous frame.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_result")]
		[return: NativeName(NativeNameType.Type, "bgfx_occlusion_query_result_t")]
		internal static BgfxOcclusionQueryResult BgfxGetResultNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_occlusion_query_handle_t")] BgfxOcclusionQueryHandle handle, [NativeName(NativeNameType.Param, "_result")] [NativeName(NativeNameType.Type, "int32_t*")] int* result)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxOcclusionQueryHandle, int*, BgfxOcclusionQueryResult>)vt[91])(handle, result);
			#else
			return (BgfxOcclusionQueryResult)((delegate* unmanaged[Cdecl]<BgfxOcclusionQueryHandle, nint, BgfxOcclusionQueryResult>)vt[91])(handle, (nint)result);
			#endif
		}

		/// <summary>
		/// Retrieve occlusion query result from previous frame.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_result")]
		[return: NativeName(NativeNameType.Type, "bgfx_occlusion_query_result_t")]
		public static BgfxOcclusionQueryResult BgfxGetResult([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_occlusion_query_handle_t")] BgfxOcclusionQueryHandle handle, [NativeName(NativeNameType.Param, "_result")] [NativeName(NativeNameType.Type, "int32_t*")] int* result)
		{
			BgfxOcclusionQueryResult ret = BgfxGetResultNative(handle, result);
			return ret;
		}

		/// <summary>
		/// Retrieve occlusion query result from previous frame.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_result")]
		[return: NativeName(NativeNameType.Type, "bgfx_occlusion_query_result_t")]
		public static BgfxOcclusionQueryResult BgfxGetResult([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_occlusion_query_handle_t")] BgfxOcclusionQueryHandle handle, [NativeName(NativeNameType.Param, "_result")] [NativeName(NativeNameType.Type, "int32_t*")] ref int result)
		{
			fixed (int* presult = &result)
			{
				BgfxOcclusionQueryResult ret = BgfxGetResultNative(handle, (int*)presult);
				return ret;
			}
		}

		/// <summary>
		/// Destroy occlusion query.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_occlusion_query")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxDestroyOcclusionQueryNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_occlusion_query_handle_t")] BgfxOcclusionQueryHandle handle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxOcclusionQueryHandle, void>)vt[92])(handle);
			#else
			((delegate* unmanaged[Cdecl]<BgfxOcclusionQueryHandle, void>)vt[92])(handle);
			#endif
		}

		/// <summary>
		/// Destroy occlusion query.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_occlusion_query")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDestroyOcclusionQuery([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_occlusion_query_handle_t")] BgfxOcclusionQueryHandle handle)
		{
			BgfxDestroyOcclusionQueryNative(handle);
		}

		/// <summary>
		/// Set palette color value.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_palette_color")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetPaletteColorNative([NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint8_t")] byte index, [NativeName(NativeNameType.Param, "_rgba")] [NativeName(NativeNameType.Type, "const float[4]")] float* rgba)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, float*, void>)vt[93])(index, rgba);
			#else
			((delegate* unmanaged[Cdecl]<byte, nint, void>)vt[93])(index, (nint)rgba);
			#endif
		}

		/// <summary>
		/// Set palette color value.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_palette_color")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetPaletteColor([NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint8_t")] byte index, [NativeName(NativeNameType.Param, "_rgba")] [NativeName(NativeNameType.Type, "const float[4]")] float* rgba)
		{
			BgfxSetPaletteColorNative(index, rgba);
		}

		/// <summary>
		/// Set palette color value.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_palette_color")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetPaletteColor([NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint8_t")] byte index, [NativeName(NativeNameType.Param, "_rgba")] [NativeName(NativeNameType.Type, "const float[4]")] ref float rgba)
		{
			fixed (float* prgba = &rgba)
			{
				BgfxSetPaletteColorNative(index, (float*)prgba);
			}
		}

		/// <summary>
		/// Set palette color value.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_palette_color")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetPaletteColor([NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint8_t")] byte index, [NativeName(NativeNameType.Param, "_rgba")] [NativeName(NativeNameType.Type, "const float[4]")] ReadOnlySpan<float> rgba)
		{
			fixed (float* prgba = rgba)
			{
				BgfxSetPaletteColorNative(index, (float*)prgba);
			}
		}

		/// <summary>
		/// Set palette color value.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_palette_color_rgba8")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetPaletteColorRgba8Native([NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint8_t")] byte index, [NativeName(NativeNameType.Param, "_rgba")] [NativeName(NativeNameType.Type, "uint32_t")] uint rgba)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, uint, void>)vt[94])(index, rgba);
			#else
			((delegate* unmanaged[Cdecl]<byte, uint, void>)vt[94])(index, rgba);
			#endif
		}

		/// <summary>
		/// Set palette color value.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_palette_color_rgba8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetPaletteColorRgba8([NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint8_t")] byte index, [NativeName(NativeNameType.Param, "_rgba")] [NativeName(NativeNameType.Type, "uint32_t")] uint rgba)
		{
			BgfxSetPaletteColorRgba8Native(index, rgba);
		}

		/// <summary>
		/// Set view name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetViewNameNative([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, byte*, int, void>)vt[95])(id, name, len);
			#else
			((delegate* unmanaged[Cdecl]<ushort, nint, int, void>)vt[95])(id, (nint)name, len);
			#endif
		}

		/// <summary>
		/// Set view name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetViewName([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			BgfxSetViewNameNative(id, name, len);
		}

		/// <summary>
		/// Set view name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetViewName([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			fixed (byte* pname = &name)
			{
				BgfxSetViewNameNative(id, (byte*)pname, len);
			}
		}

		/// <summary>
		/// Set view name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetViewName([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			fixed (byte* pname = name)
			{
				BgfxSetViewNameNative(id, (byte*)pname, len);
			}
		}

		/// <summary>
		/// Set view name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetViewName([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] string name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			BgfxSetViewNameNative(id, pStr0, len);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Set view rectangle. Draw primitive outside view will be clipped.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_rect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetViewRectNative([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, ushort, ushort, ushort, ushort, void>)vt[96])(id, x, y, width, height);
			#else
			((delegate* unmanaged[Cdecl]<ushort, ushort, ushort, ushort, ushort, void>)vt[96])(id, x, y, width, height);
			#endif
		}

		/// <summary>
		/// Set view rectangle. Draw primitive outside view will be clipped.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_rect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetViewRect([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height)
		{
			BgfxSetViewRectNative(id, x, y, width, height);
		}

		/// <summary>
		/// Set view rectangle. Draw primitive outside view will be clipped.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_rect_ratio")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetViewRectRatioNative([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_ratio")] [NativeName(NativeNameType.Type, "bgfx_backbuffer_ratio_t")] BgfxBackbufferRatio ratio)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, ushort, ushort, BgfxBackbufferRatio, void>)vt[97])(id, x, y, ratio);
			#else
			((delegate* unmanaged[Cdecl]<ushort, ushort, ushort, BgfxBackbufferRatio, void>)vt[97])(id, x, y, ratio);
			#endif
		}

		/// <summary>
		/// Set view rectangle. Draw primitive outside view will be clipped.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_rect_ratio")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetViewRectRatio([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_ratio")] [NativeName(NativeNameType.Type, "bgfx_backbuffer_ratio_t")] BgfxBackbufferRatio ratio)
		{
			BgfxSetViewRectRatioNative(id, x, y, ratio);
		}

		/// <summary>
		/// Set view scissor. Draw primitive outside view will be clipped. When<br/>
		/// _x, _y, _width and _height are set to 0, scissor will be disabled.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_scissor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetViewScissorNative([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, ushort, ushort, ushort, ushort, void>)vt[98])(id, x, y, width, height);
			#else
			((delegate* unmanaged[Cdecl]<ushort, ushort, ushort, ushort, ushort, void>)vt[98])(id, x, y, width, height);
			#endif
		}

		/// <summary>
		/// Set view scissor. Draw primitive outside view will be clipped. When<br/>
		/// _x, _y, _width and _height are set to 0, scissor will be disabled.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_scissor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetViewScissor([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height)
		{
			BgfxSetViewScissorNative(id, x, y, width, height);
		}

		/// <summary>
		/// Set view clear flags.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetViewClearNative([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags, [NativeName(NativeNameType.Param, "_rgba")] [NativeName(NativeNameType.Type, "uint32_t")] uint rgba, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "float")] float depth, [NativeName(NativeNameType.Param, "_stencil")] [NativeName(NativeNameType.Type, "uint8_t")] byte stencil)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, ushort, uint, float, byte, void>)vt[99])(id, flags, rgba, depth, stencil);
			#else
			((delegate* unmanaged[Cdecl]<ushort, ushort, uint, float, byte, void>)vt[99])(id, flags, rgba, depth, stencil);
			#endif
		}

		/// <summary>
		/// Set view clear flags.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetViewClear([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags, [NativeName(NativeNameType.Param, "_rgba")] [NativeName(NativeNameType.Type, "uint32_t")] uint rgba, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "float")] float depth, [NativeName(NativeNameType.Param, "_stencil")] [NativeName(NativeNameType.Type, "uint8_t")] byte stencil)
		{
			BgfxSetViewClearNative(id, flags, rgba, depth, stencil);
		}

		/// <summary>
		/// Set view clear flags with different clear color for each<br/>
		/// frame buffer texture. `bgfx::setPaletteColor` must be used to set up a<br/>
		/// clear color palette.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_clear_mrt")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetViewClearMrtNative([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "float")] float depth, [NativeName(NativeNameType.Param, "_stencil")] [NativeName(NativeNameType.Type, "uint8_t")] byte stencil, [NativeName(NativeNameType.Param, "_c0")] [NativeName(NativeNameType.Type, "uint8_t")] byte c0, [NativeName(NativeNameType.Param, "_c1")] [NativeName(NativeNameType.Type, "uint8_t")] byte c1, [NativeName(NativeNameType.Param, "_c2")] [NativeName(NativeNameType.Type, "uint8_t")] byte c2, [NativeName(NativeNameType.Param, "_c3")] [NativeName(NativeNameType.Type, "uint8_t")] byte c3, [NativeName(NativeNameType.Param, "_c4")] [NativeName(NativeNameType.Type, "uint8_t")] byte c4, [NativeName(NativeNameType.Param, "_c5")] [NativeName(NativeNameType.Type, "uint8_t")] byte c5, [NativeName(NativeNameType.Param, "_c6")] [NativeName(NativeNameType.Type, "uint8_t")] byte c6, [NativeName(NativeNameType.Param, "_c7")] [NativeName(NativeNameType.Type, "uint8_t")] byte c7)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, ushort, float, byte, byte, byte, byte, byte, byte, byte, byte, byte, void>)vt[100])(id, flags, depth, stencil, c0, c1, c2, c3, c4, c5, c6, c7);
			#else
			((delegate* unmanaged[Cdecl]<ushort, ushort, float, byte, byte, byte, byte, byte, byte, byte, byte, byte, void>)vt[100])(id, flags, depth, stencil, c0, c1, c2, c3, c4, c5, c6, c7);
			#endif
		}

		/// <summary>
		/// Set view clear flags with different clear color for each<br/>
		/// frame buffer texture. `bgfx::setPaletteColor` must be used to set up a<br/>
		/// clear color palette.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_clear_mrt")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetViewClearMrt([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "float")] float depth, [NativeName(NativeNameType.Param, "_stencil")] [NativeName(NativeNameType.Type, "uint8_t")] byte stencil, [NativeName(NativeNameType.Param, "_c0")] [NativeName(NativeNameType.Type, "uint8_t")] byte c0, [NativeName(NativeNameType.Param, "_c1")] [NativeName(NativeNameType.Type, "uint8_t")] byte c1, [NativeName(NativeNameType.Param, "_c2")] [NativeName(NativeNameType.Type, "uint8_t")] byte c2, [NativeName(NativeNameType.Param, "_c3")] [NativeName(NativeNameType.Type, "uint8_t")] byte c3, [NativeName(NativeNameType.Param, "_c4")] [NativeName(NativeNameType.Type, "uint8_t")] byte c4, [NativeName(NativeNameType.Param, "_c5")] [NativeName(NativeNameType.Type, "uint8_t")] byte c5, [NativeName(NativeNameType.Param, "_c6")] [NativeName(NativeNameType.Type, "uint8_t")] byte c6, [NativeName(NativeNameType.Param, "_c7")] [NativeName(NativeNameType.Type, "uint8_t")] byte c7)
		{
			BgfxSetViewClearMrtNative(id, flags, depth, stencil, c0, c1, c2, c3, c4, c5, c6, c7);
		}

		/// <summary>
		/// Set view sorting mode.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_mode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetViewModeNative([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_mode")] [NativeName(NativeNameType.Type, "bgfx_view_mode_t")] BgfxViewMode mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, BgfxViewMode, void>)vt[101])(id, mode);
			#else
			((delegate* unmanaged[Cdecl]<ushort, BgfxViewMode, void>)vt[101])(id, mode);
			#endif
		}

		/// <summary>
		/// Set view sorting mode.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_mode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetViewMode([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_mode")] [NativeName(NativeNameType.Type, "bgfx_view_mode_t")] BgfxViewMode mode)
		{
			BgfxSetViewModeNative(id, mode);
		}

		/// <summary>
		/// Set view frame buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_frame_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetViewFrameBufferNative([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")] BgfxFrameBufferHandle handle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, BgfxFrameBufferHandle, void>)vt[102])(id, handle);
			#else
			((delegate* unmanaged[Cdecl]<ushort, BgfxFrameBufferHandle, void>)vt[102])(id, handle);
			#endif
		}

		/// <summary>
		/// Set view frame buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_frame_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetViewFrameBuffer([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_frame_buffer_handle_t")] BgfxFrameBufferHandle handle)
		{
			BgfxSetViewFrameBufferNative(id, handle);
		}

		/// <summary>
		/// Set view's view matrix and projection matrix,<br/>
		/// all draw primitives in this view will use these two matrices.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_transform")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetViewTransformNative([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_view")] [NativeName(NativeNameType.Type, "const void*")] void* view, [NativeName(NativeNameType.Param, "_proj")] [NativeName(NativeNameType.Type, "const void*")] void* proj)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, void*, void*, void>)vt[103])(id, view, proj);
			#else
			((delegate* unmanaged[Cdecl]<ushort, nint, nint, void>)vt[103])(id, (nint)view, (nint)proj);
			#endif
		}

		/// <summary>
		/// Set view's view matrix and projection matrix,<br/>
		/// all draw primitives in this view will use these two matrices.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_transform")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetViewTransform([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_view")] [NativeName(NativeNameType.Type, "const void*")] void* view, [NativeName(NativeNameType.Param, "_proj")] [NativeName(NativeNameType.Type, "const void*")] void* proj)
		{
			BgfxSetViewTransformNative(id, view, proj);
		}

		/// <summary>
		/// Post submit view reordering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_order")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetViewOrderNative([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num, [NativeName(NativeNameType.Param, "_order")] [NativeName(NativeNameType.Type, "const bgfx_view_id_t*")] ushort* order)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, ushort, ushort*, void>)vt[104])(id, num, order);
			#else
			((delegate* unmanaged[Cdecl]<ushort, ushort, nint, void>)vt[104])(id, num, (nint)order);
			#endif
		}

		/// <summary>
		/// Post submit view reordering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_order")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetViewOrder([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num, [NativeName(NativeNameType.Param, "_order")] [NativeName(NativeNameType.Type, "const bgfx_view_id_t*")] ushort* order)
		{
			BgfxSetViewOrderNative(id, num, order);
		}

		/// <summary>
		/// Post submit view reordering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_view_order")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetViewOrder([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint16_t")] ushort num, [NativeName(NativeNameType.Param, "_order")] [NativeName(NativeNameType.Type, "const bgfx_view_id_t*")] ref ushort order)
		{
			fixed (ushort* porder = &order)
			{
				BgfxSetViewOrderNative(id, num, (ushort*)porder);
			}
		}

		/// <summary>
		/// Reset all view settings to default.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_reset_view")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxResetViewNative([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, void>)vt[105])(id);
			#else
			((delegate* unmanaged[Cdecl]<ushort, void>)vt[105])(id);
			#endif
		}

		/// <summary>
		/// Reset all view settings to default.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_reset_view")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxResetView([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id)
		{
			BgfxResetViewNative(id);
		}

		/// <summary>
		/// Begin submitting draw calls from thread.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_begin")]
		[return: NativeName(NativeNameType.Type, "bgfx_encoder_t*")]
		internal static BgfxEncoder* BgfxEncoderBeginNative([NativeName(NativeNameType.Param, "_forThread")] [NativeName(NativeNameType.Type, "bool")] byte forThread)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte, BgfxEncoder*>)vt[106])(forThread);
			#else
			return (BgfxEncoder*)((delegate* unmanaged[Cdecl]<byte, nint>)vt[106])(forThread);
			#endif
		}

		/// <summary>
		/// Begin submitting draw calls from thread.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_begin")]
		[return: NativeName(NativeNameType.Type, "bgfx_encoder_t*")]
		public static BgfxEncoder* BgfxEncoderBegin([NativeName(NativeNameType.Param, "_forThread")] [NativeName(NativeNameType.Type, "bool")] bool forThread)
		{
			BgfxEncoder* ret = BgfxEncoderBeginNative(forThread ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// End submitting draw calls from thread.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_end")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxEncoderEndNative([NativeName(NativeNameType.Param, "_encoder")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* encoder)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxEncoder*, void>)vt[107])(encoder);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[107])((nint)encoder);
			#endif
		}

		/// <summary>
		/// End submitting draw calls from thread.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_encoder_end")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxEncoderEnd([NativeName(NativeNameType.Param, "_encoder")] [NativeName(NativeNameType.Type, "bgfx_encoder_t*")] BgfxEncoder* encoder)
		{
			BgfxEncoderEndNative(encoder);
		}
	}
}
