// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Bgfx
{
	public unsafe partial class Bgfx
	{

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_vertex_buffer_with_layout")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetVertexBufferWithLayout([NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_layoutHandle")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")] BgfxVertexLayoutHandle layoutHandle)
		{
			BgfxSetVertexBufferWithLayoutNative(stream, handle, startVertex, numVertices, layoutHandle);
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetDynamicVertexBufferNative([NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, BgfxDynamicVertexBufferHandle, uint, uint, void>)vt[169])(stream, handle, startVertex, numVertices);
			#else
			((delegate* unmanaged[Cdecl]<byte, BgfxDynamicVertexBufferHandle, uint, uint, void>)vt[169])(stream, handle, startVertex, numVertices);
			#endif
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetDynamicVertexBuffer([NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			BgfxSetDynamicVertexBufferNative(stream, handle, startVertex, numVertices);
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_dynamic_vertex_buffer_with_layout")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetDynamicVertexBufferWithLayoutNative([NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_layoutHandle")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")] BgfxVertexLayoutHandle layoutHandle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, BgfxDynamicVertexBufferHandle, uint, uint, BgfxVertexLayoutHandle, void>)vt[170])(stream, handle, startVertex, numVertices, layoutHandle);
			#else
			((delegate* unmanaged[Cdecl]<byte, BgfxDynamicVertexBufferHandle, uint, uint, BgfxVertexLayoutHandle, void>)vt[170])(stream, handle, startVertex, numVertices, layoutHandle);
			#endif
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_dynamic_vertex_buffer_with_layout")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetDynamicVertexBufferWithLayout([NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_layoutHandle")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")] BgfxVertexLayoutHandle layoutHandle)
		{
			BgfxSetDynamicVertexBufferWithLayoutNative(stream, handle, startVertex, numVertices, layoutHandle);
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_transient_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetTransientVertexBufferNative([NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "const bgfx_transient_vertex_buffer_t*")] BgfxTransientVertexBuffer* tvb, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, BgfxTransientVertexBuffer*, uint, uint, void>)vt[171])(stream, tvb, startVertex, numVertices);
			#else
			((delegate* unmanaged[Cdecl]<byte, nint, uint, uint, void>)vt[171])(stream, (nint)tvb, startVertex, numVertices);
			#endif
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_transient_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetTransientVertexBuffer([NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "const bgfx_transient_vertex_buffer_t*")] BgfxTransientVertexBuffer* tvb, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			BgfxSetTransientVertexBufferNative(stream, tvb, startVertex, numVertices);
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_transient_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetTransientVertexBuffer([NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "const bgfx_transient_vertex_buffer_t*")] ref BgfxTransientVertexBuffer tvb, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			fixed (BgfxTransientVertexBuffer* ptvb = &tvb)
			{
				BgfxSetTransientVertexBufferNative(stream, (BgfxTransientVertexBuffer*)ptvb, startVertex, numVertices);
			}
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_transient_vertex_buffer_with_layout")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetTransientVertexBufferWithLayoutNative([NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "const bgfx_transient_vertex_buffer_t*")] BgfxTransientVertexBuffer* tvb, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_layoutHandle")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")] BgfxVertexLayoutHandle layoutHandle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, BgfxTransientVertexBuffer*, uint, uint, BgfxVertexLayoutHandle, void>)vt[172])(stream, tvb, startVertex, numVertices, layoutHandle);
			#else
			((delegate* unmanaged[Cdecl]<byte, nint, uint, uint, BgfxVertexLayoutHandle, void>)vt[172])(stream, (nint)tvb, startVertex, numVertices, layoutHandle);
			#endif
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_transient_vertex_buffer_with_layout")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetTransientVertexBufferWithLayout([NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "const bgfx_transient_vertex_buffer_t*")] BgfxTransientVertexBuffer* tvb, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_layoutHandle")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")] BgfxVertexLayoutHandle layoutHandle)
		{
			BgfxSetTransientVertexBufferWithLayoutNative(stream, tvb, startVertex, numVertices, layoutHandle);
		}

		/// <summary>
		/// Set vertex buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_transient_vertex_buffer_with_layout")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetTransientVertexBufferWithLayout([NativeName(NativeNameType.Param, "_stream")] [NativeName(NativeNameType.Type, "uint8_t")] byte stream, [NativeName(NativeNameType.Param, "_tvb")] [NativeName(NativeNameType.Type, "const bgfx_transient_vertex_buffer_t*")] ref BgfxTransientVertexBuffer tvb, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices, [NativeName(NativeNameType.Param, "_layoutHandle")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")] BgfxVertexLayoutHandle layoutHandle)
		{
			fixed (BgfxTransientVertexBuffer* ptvb = &tvb)
			{
				BgfxSetTransientVertexBufferWithLayoutNative(stream, (BgfxTransientVertexBuffer*)ptvb, startVertex, numVertices, layoutHandle);
			}
		}

		/// <summary>
		/// Set number of vertices for auto generated vertices use in conjunction<br/>
		/// with gl_VertexID.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_vertex_count")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetVertexCountNative([NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[173])(numVertices);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[173])(numVertices);
			#endif
		}

		/// <summary>
		/// Set number of vertices for auto generated vertices use in conjunction<br/>
		/// with gl_VertexID.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_vertex_count")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetVertexCount([NativeName(NativeNameType.Param, "_numVertices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numVertices)
		{
			BgfxSetVertexCountNative(numVertices);
		}

		/// <summary>
		/// Set instance data buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_instance_data_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetInstanceDataBufferNative([NativeName(NativeNameType.Param, "_idb")] [NativeName(NativeNameType.Type, "const bgfx_instance_data_buffer_t*")] BgfxInstanceDataBuffer* idb, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxInstanceDataBuffer*, uint, uint, void>)vt[174])(idb, start, num);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, uint, void>)vt[174])((nint)idb, start, num);
			#endif
		}

		/// <summary>
		/// Set instance data buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_instance_data_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetInstanceDataBuffer([NativeName(NativeNameType.Param, "_idb")] [NativeName(NativeNameType.Type, "const bgfx_instance_data_buffer_t*")] BgfxInstanceDataBuffer* idb, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			BgfxSetInstanceDataBufferNative(idb, start, num);
		}

		/// <summary>
		/// Set instance data buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_instance_data_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetInstanceDataBuffer([NativeName(NativeNameType.Param, "_idb")] [NativeName(NativeNameType.Type, "const bgfx_instance_data_buffer_t*")] ref BgfxInstanceDataBuffer idb, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			fixed (BgfxInstanceDataBuffer* pidb = &idb)
			{
				BgfxSetInstanceDataBufferNative((BgfxInstanceDataBuffer*)pidb, start, num);
			}
		}

		/// <summary>
		/// Set instance data buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_instance_data_from_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetInstanceDataFromVertexBufferNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxVertexBufferHandle, uint, uint, void>)vt[175])(handle, startVertex, num);
			#else
			((delegate* unmanaged[Cdecl]<BgfxVertexBufferHandle, uint, uint, void>)vt[175])(handle, startVertex, num);
			#endif
		}

		/// <summary>
		/// Set instance data buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_instance_data_from_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetInstanceDataFromVertexBuffer([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			BgfxSetInstanceDataFromVertexBufferNative(handle, startVertex, num);
		}

		/// <summary>
		/// Set instance data buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_instance_data_from_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetInstanceDataFromDynamicVertexBufferNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxDynamicVertexBufferHandle, uint, uint, void>)vt[176])(handle, startVertex, num);
			#else
			((delegate* unmanaged[Cdecl]<BgfxDynamicVertexBufferHandle, uint, uint, void>)vt[176])(handle, startVertex, num);
			#endif
		}

		/// <summary>
		/// Set instance data buffer for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_instance_data_from_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetInstanceDataFromDynamicVertexBuffer([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_startVertex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startVertex, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			BgfxSetInstanceDataFromDynamicVertexBufferNative(handle, startVertex, num);
		}

		/// <summary>
		/// Set number of instances for auto generated instances use in conjunction<br/>
		/// with gl_InstanceID.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_instance_count")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetInstanceCountNative([NativeName(NativeNameType.Param, "_numInstances")] [NativeName(NativeNameType.Type, "uint32_t")] uint numInstances)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[177])(numInstances);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[177])(numInstances);
			#endif
		}

		/// <summary>
		/// Set number of instances for auto generated instances use in conjunction<br/>
		/// with gl_InstanceID.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_instance_count")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetInstanceCount([NativeName(NativeNameType.Param, "_numInstances")] [NativeName(NativeNameType.Type, "uint32_t")] uint numInstances)
		{
			BgfxSetInstanceCountNative(numInstances);
		}

		/// <summary>
		/// Set texture stage for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_texture")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetTextureNative([NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_sampler")] [NativeName(NativeNameType.Type, "bgfx_uniform_handle_t")] BgfxUniformHandle sampler, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint32_t")] uint flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, BgfxUniformHandle, BgfxTextureHandle, uint, void>)vt[178])(stage, sampler, handle, flags);
			#else
			((delegate* unmanaged[Cdecl]<byte, BgfxUniformHandle, BgfxTextureHandle, uint, void>)vt[178])(stage, sampler, handle, flags);
			#endif
		}

		/// <summary>
		/// Set texture stage for draw primitive.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_texture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetTexture([NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_sampler")] [NativeName(NativeNameType.Type, "bgfx_uniform_handle_t")] BgfxUniformHandle sampler, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint32_t")] uint flags)
		{
			BgfxSetTextureNative(stage, sampler, handle, flags);
		}

		/// <summary>
		/// Submit an empty primitive for rendering. Uniforms and draw state<br/>
		/// will be applied but no geometry will be submitted.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_touch")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxTouchNative([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, void>)vt[179])(id);
			#else
			((delegate* unmanaged[Cdecl]<ushort, void>)vt[179])(id);
			#endif
		}

		/// <summary>
		/// Submit an empty primitive for rendering. Uniforms and draw state<br/>
		/// will be applied but no geometry will be submitted.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_touch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxTouch([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id)
		{
			BgfxTouchNative(id);
		}

		/// <summary>
		/// Submit primitive for rendering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_submit")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSubmitNative([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint32_t")] uint depth, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, BgfxProgramHandle, uint, byte, void>)vt[180])(id, program, depth, flags);
			#else
			((delegate* unmanaged[Cdecl]<ushort, BgfxProgramHandle, uint, byte, void>)vt[180])(id, program, depth, flags);
			#endif
		}

		/// <summary>
		/// Submit primitive for rendering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_submit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSubmit([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint32_t")] uint depth, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			BgfxSubmitNative(id, program, depth, flags);
		}

		/// <summary>
		/// Submit primitive with occlusion query for rendering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_submit_occlusion_query")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSubmitOcclusionQueryNative([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_occlusionQuery")] [NativeName(NativeNameType.Type, "bgfx_occlusion_query_handle_t")] BgfxOcclusionQueryHandle occlusionQuery, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint32_t")] uint depth, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, BgfxProgramHandle, BgfxOcclusionQueryHandle, uint, byte, void>)vt[181])(id, program, occlusionQuery, depth, flags);
			#else
			((delegate* unmanaged[Cdecl]<ushort, BgfxProgramHandle, BgfxOcclusionQueryHandle, uint, byte, void>)vt[181])(id, program, occlusionQuery, depth, flags);
			#endif
		}

		/// <summary>
		/// Submit primitive with occlusion query for rendering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_submit_occlusion_query")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSubmitOcclusionQuery([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_occlusionQuery")] [NativeName(NativeNameType.Type, "bgfx_occlusion_query_handle_t")] BgfxOcclusionQueryHandle occlusionQuery, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint32_t")] uint depth, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			BgfxSubmitOcclusionQueryNative(id, program, occlusionQuery, depth, flags);
		}

		/// <summary>
		/// Submit primitive for rendering with index and instance data info from<br/>
		/// indirect buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_submit_indirect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSubmitIndirectNative([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_indirectHandle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle indirectHandle, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint32_t")] uint depth, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, BgfxProgramHandle, BgfxIndirectBufferHandle, uint, uint, uint, byte, void>)vt[182])(id, program, indirectHandle, start, num, depth, flags);
			#else
			((delegate* unmanaged[Cdecl]<ushort, BgfxProgramHandle, BgfxIndirectBufferHandle, uint, uint, uint, byte, void>)vt[182])(id, program, indirectHandle, start, num, depth, flags);
			#endif
		}

		/// <summary>
		/// Submit primitive for rendering with index and instance data info from<br/>
		/// indirect buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_submit_indirect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSubmitIndirect([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_indirectHandle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle indirectHandle, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint32_t")] uint depth, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			BgfxSubmitIndirectNative(id, program, indirectHandle, start, num, depth, flags);
		}

		/// <summary>
		/// Submit primitive for rendering with index and instance data info and<br/>
		/// draw count from indirect buffers.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_submit_indirect_count")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSubmitIndirectCountNative([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_indirectHandle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle indirectHandle, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_numHandle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle numHandle, [NativeName(NativeNameType.Param, "_numIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndex, [NativeName(NativeNameType.Param, "_numMax")] [NativeName(NativeNameType.Type, "uint32_t")] uint numMax, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint32_t")] uint depth, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, BgfxProgramHandle, BgfxIndirectBufferHandle, uint, BgfxIndexBufferHandle, uint, uint, uint, byte, void>)vt[183])(id, program, indirectHandle, start, numHandle, numIndex, numMax, depth, flags);
			#else
			((delegate* unmanaged[Cdecl]<ushort, BgfxProgramHandle, BgfxIndirectBufferHandle, uint, BgfxIndexBufferHandle, uint, uint, uint, byte, void>)vt[183])(id, program, indirectHandle, start, numHandle, numIndex, numMax, depth, flags);
			#endif
		}

		/// <summary>
		/// Submit primitive for rendering with index and instance data info and<br/>
		/// draw count from indirect buffers.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_submit_indirect_count")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSubmitIndirectCount([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_indirectHandle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle indirectHandle, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_numHandle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle numHandle, [NativeName(NativeNameType.Param, "_numIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndex, [NativeName(NativeNameType.Param, "_numMax")] [NativeName(NativeNameType.Type, "uint32_t")] uint numMax, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint32_t")] uint depth, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			BgfxSubmitIndirectCountNative(id, program, indirectHandle, start, numHandle, numIndex, numMax, depth, flags);
		}

		/// <summary>
		/// Set compute index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_compute_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetComputeIndexBufferNative([NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, BgfxIndexBufferHandle, BgfxAccess, void>)vt[184])(stage, handle, access);
			#else
			((delegate* unmanaged[Cdecl]<byte, BgfxIndexBufferHandle, BgfxAccess, void>)vt[184])(stage, handle, access);
			#endif
		}

		/// <summary>
		/// Set compute index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_compute_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetComputeIndexBuffer([NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			BgfxSetComputeIndexBufferNative(stage, handle, access);
		}

		/// <summary>
		/// Set compute vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_compute_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetComputeVertexBufferNative([NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, BgfxVertexBufferHandle, BgfxAccess, void>)vt[185])(stage, handle, access);
			#else
			((delegate* unmanaged[Cdecl]<byte, BgfxVertexBufferHandle, BgfxAccess, void>)vt[185])(stage, handle, access);
			#endif
		}

		/// <summary>
		/// Set compute vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_compute_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetComputeVertexBuffer([NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			BgfxSetComputeVertexBufferNative(stage, handle, access);
		}

		/// <summary>
		/// Set compute dynamic index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_compute_dynamic_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetComputeDynamicIndexBufferNative([NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t")] BgfxDynamicIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, BgfxDynamicIndexBufferHandle, BgfxAccess, void>)vt[186])(stage, handle, access);
			#else
			((delegate* unmanaged[Cdecl]<byte, BgfxDynamicIndexBufferHandle, BgfxAccess, void>)vt[186])(stage, handle, access);
			#endif
		}

		/// <summary>
		/// Set compute dynamic index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_compute_dynamic_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetComputeDynamicIndexBuffer([NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t")] BgfxDynamicIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			BgfxSetComputeDynamicIndexBufferNative(stage, handle, access);
		}

		/// <summary>
		/// Set compute dynamic vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_compute_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetComputeDynamicVertexBufferNative([NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, BgfxDynamicVertexBufferHandle, BgfxAccess, void>)vt[187])(stage, handle, access);
			#else
			((delegate* unmanaged[Cdecl]<byte, BgfxDynamicVertexBufferHandle, BgfxAccess, void>)vt[187])(stage, handle, access);
			#endif
		}

		/// <summary>
		/// Set compute dynamic vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_compute_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetComputeDynamicVertexBuffer([NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")] BgfxDynamicVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			BgfxSetComputeDynamicVertexBufferNative(stage, handle, access);
		}

		/// <summary>
		/// Set compute indirect buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_compute_indirect_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetComputeIndirectBufferNative([NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, BgfxIndirectBufferHandle, BgfxAccess, void>)vt[188])(stage, handle, access);
			#else
			((delegate* unmanaged[Cdecl]<byte, BgfxIndirectBufferHandle, BgfxAccess, void>)vt[188])(stage, handle, access);
			#endif
		}

		/// <summary>
		/// Set compute indirect buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_compute_indirect_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetComputeIndirectBuffer([NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access)
		{
			BgfxSetComputeIndirectBufferNative(stage, handle, access);
		}

		/// <summary>
		/// Set compute image from texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_image")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetImageNative([NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_mip")] [NativeName(NativeNameType.Type, "uint8_t")] byte mip, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, BgfxTextureHandle, byte, BgfxAccess, BgfxTextureFormat, void>)vt[189])(stage, handle, mip, access, format);
			#else
			((delegate* unmanaged[Cdecl]<byte, BgfxTextureHandle, byte, BgfxAccess, BgfxTextureFormat, void>)vt[189])(stage, handle, mip, access, format);
			#endif
		}

		/// <summary>
		/// Set compute image from texture.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_image")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetImage([NativeName(NativeNameType.Param, "_stage")] [NativeName(NativeNameType.Type, "uint8_t")] byte stage, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_mip")] [NativeName(NativeNameType.Type, "uint8_t")] byte mip, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format)
		{
			BgfxSetImageNative(stage, handle, mip, access, format);
		}

		/// <summary>
		/// Dispatch compute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_dispatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxDispatchNative([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_numX")] [NativeName(NativeNameType.Type, "uint32_t")] uint numX, [NativeName(NativeNameType.Param, "_numY")] [NativeName(NativeNameType.Type, "uint32_t")] uint numY, [NativeName(NativeNameType.Param, "_numZ")] [NativeName(NativeNameType.Type, "uint32_t")] uint numZ, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, BgfxProgramHandle, uint, uint, uint, byte, void>)vt[190])(id, program, numX, numY, numZ, flags);
			#else
			((delegate* unmanaged[Cdecl]<ushort, BgfxProgramHandle, uint, uint, uint, byte, void>)vt[190])(id, program, numX, numY, numZ, flags);
			#endif
		}

		/// <summary>
		/// Dispatch compute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_dispatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDispatch([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_numX")] [NativeName(NativeNameType.Type, "uint32_t")] uint numX, [NativeName(NativeNameType.Param, "_numY")] [NativeName(NativeNameType.Type, "uint32_t")] uint numY, [NativeName(NativeNameType.Param, "_numZ")] [NativeName(NativeNameType.Type, "uint32_t")] uint numZ, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			BgfxDispatchNative(id, program, numX, numY, numZ, flags);
		}

		/// <summary>
		/// Dispatch compute indirect.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_dispatch_indirect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxDispatchIndirectNative([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_indirectHandle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle indirectHandle, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, BgfxProgramHandle, BgfxIndirectBufferHandle, uint, uint, byte, void>)vt[191])(id, program, indirectHandle, start, num, flags);
			#else
			((delegate* unmanaged[Cdecl]<ushort, BgfxProgramHandle, BgfxIndirectBufferHandle, uint, uint, byte, void>)vt[191])(id, program, indirectHandle, start, num, flags);
			#endif
		}

		/// <summary>
		/// Dispatch compute indirect.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_dispatch_indirect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDispatchIndirect([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_program")] [NativeName(NativeNameType.Type, "bgfx_program_handle_t")] BgfxProgramHandle program, [NativeName(NativeNameType.Param, "_indirectHandle")] [NativeName(NativeNameType.Type, "bgfx_indirect_buffer_handle_t")] BgfxIndirectBufferHandle indirectHandle, [NativeName(NativeNameType.Param, "_start")] [NativeName(NativeNameType.Type, "uint32_t")] uint start, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			BgfxDispatchIndirectNative(id, program, indirectHandle, start, num, flags);
		}

		/// <summary>
		/// Discard previously set state for draw or compute call.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_discard")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxDiscardNative([NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, void>)vt[192])(flags);
			#else
			((delegate* unmanaged[Cdecl]<byte, void>)vt[192])(flags);
			#endif
		}

		/// <summary>
		/// Discard previously set state for draw or compute call.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_discard")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDiscard([NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags)
		{
			BgfxDiscardNative(flags);
		}

		/// <summary>
		/// Blit 2D texture region between two 2D textures.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_blit")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxBlitNative([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_dst")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle dst, [NativeName(NativeNameType.Param, "_dstMip")] [NativeName(NativeNameType.Type, "uint8_t")] byte dstMip, [NativeName(NativeNameType.Param, "_dstX")] [NativeName(NativeNameType.Type, "uint16_t")] ushort dstX, [NativeName(NativeNameType.Param, "_dstY")] [NativeName(NativeNameType.Type, "uint16_t")] ushort dstY, [NativeName(NativeNameType.Param, "_dstZ")] [NativeName(NativeNameType.Type, "uint16_t")] ushort dstZ, [NativeName(NativeNameType.Param, "_src")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle src, [NativeName(NativeNameType.Param, "_srcMip")] [NativeName(NativeNameType.Type, "uint8_t")] byte srcMip, [NativeName(NativeNameType.Param, "_srcX")] [NativeName(NativeNameType.Type, "uint16_t")] ushort srcX, [NativeName(NativeNameType.Param, "_srcY")] [NativeName(NativeNameType.Type, "uint16_t")] ushort srcY, [NativeName(NativeNameType.Param, "_srcZ")] [NativeName(NativeNameType.Type, "uint16_t")] ushort srcZ, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint16_t")] ushort depth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, BgfxTextureHandle, byte, ushort, ushort, ushort, BgfxTextureHandle, byte, ushort, ushort, ushort, ushort, ushort, ushort, void>)vt[193])(id, dst, dstMip, dstX, dstY, dstZ, src, srcMip, srcX, srcY, srcZ, width, height, depth);
			#else
			((delegate* unmanaged[Cdecl]<ushort, BgfxTextureHandle, byte, ushort, ushort, ushort, BgfxTextureHandle, byte, ushort, ushort, ushort, ushort, ushort, ushort, void>)vt[193])(id, dst, dstMip, dstX, dstY, dstZ, src, srcMip, srcX, srcY, srcZ, width, height, depth);
			#endif
		}

		/// <summary>
		/// Blit 2D texture region between two 2D textures.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_blit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxBlit([NativeName(NativeNameType.Param, "_id")] [NativeName(NativeNameType.Type, "bgfx_view_id_t")] ushort id, [NativeName(NativeNameType.Param, "_dst")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle dst, [NativeName(NativeNameType.Param, "_dstMip")] [NativeName(NativeNameType.Type, "uint8_t")] byte dstMip, [NativeName(NativeNameType.Param, "_dstX")] [NativeName(NativeNameType.Type, "uint16_t")] ushort dstX, [NativeName(NativeNameType.Param, "_dstY")] [NativeName(NativeNameType.Type, "uint16_t")] ushort dstY, [NativeName(NativeNameType.Param, "_dstZ")] [NativeName(NativeNameType.Type, "uint16_t")] ushort dstZ, [NativeName(NativeNameType.Param, "_src")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle src, [NativeName(NativeNameType.Param, "_srcMip")] [NativeName(NativeNameType.Type, "uint8_t")] byte srcMip, [NativeName(NativeNameType.Param, "_srcX")] [NativeName(NativeNameType.Type, "uint16_t")] ushort srcX, [NativeName(NativeNameType.Param, "_srcY")] [NativeName(NativeNameType.Type, "uint16_t")] ushort srcY, [NativeName(NativeNameType.Param, "_srcZ")] [NativeName(NativeNameType.Type, "uint16_t")] ushort srcZ, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_depth")] [NativeName(NativeNameType.Type, "uint16_t")] ushort depth)
		{
			BgfxBlitNative(id, dst, dstMip, dstX, dstY, dstZ, src, srcMip, srcX, srcY, srcZ, width, height, depth);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_interface")]
		[return: NativeName(NativeNameType.Type, "bgfx_interface_vtbl_t*")]
		internal static BgfxInterfaceVtbl* BgfxGetInterfaceNative([NativeName(NativeNameType.Param, "_version")] [NativeName(NativeNameType.Type, "uint32_t")] uint version)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, BgfxInterfaceVtbl*>)vt[194])(version);
			#else
			return (BgfxInterfaceVtbl*)((delegate* unmanaged[Cdecl]<uint, nint>)vt[194])(version);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_interface")]
		[return: NativeName(NativeNameType.Type, "bgfx_interface_vtbl_t*")]
		public static BgfxInterfaceVtbl* BgfxGetInterface([NativeName(NativeNameType.Param, "_version")] [NativeName(NativeNameType.Type, "uint32_t")] uint version)
		{
			BgfxInterfaceVtbl* ret = BgfxGetInterfaceNative(version);
			return ret;
		}

	}
}
