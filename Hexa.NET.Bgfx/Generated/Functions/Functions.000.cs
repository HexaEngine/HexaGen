// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Bgfx
{
	public unsafe partial class Bgfx
	{
		/// <summary>
		/// Init attachment.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_attachment_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxAttachmentInitNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_attachment_t*")] BgfxAttachment* @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access, [NativeName(NativeNameType.Param, "_layer")] [NativeName(NativeNameType.Type, "uint16_t")] ushort layer, [NativeName(NativeNameType.Param, "_numLayers")] [NativeName(NativeNameType.Type, "uint16_t")] ushort numLayers, [NativeName(NativeNameType.Param, "_mip")] [NativeName(NativeNameType.Type, "uint16_t")] ushort mip, [NativeName(NativeNameType.Param, "_resolve")] [NativeName(NativeNameType.Type, "uint8_t")] byte resolve)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxAttachment*, BgfxTextureHandle, BgfxAccess, ushort, ushort, ushort, byte, void>)vt[0])(@this, handle, access, layer, numLayers, mip, resolve);
			#else
			((delegate* unmanaged[Cdecl]<nint, BgfxTextureHandle, BgfxAccess, ushort, ushort, ushort, byte, void>)vt[0])((nint)@this, handle, access, layer, numLayers, mip, resolve);
			#endif
		}

		/// <summary>
		/// Init attachment.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_attachment_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxAttachmentInit([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_attachment_t*")] BgfxAttachment* @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access, [NativeName(NativeNameType.Param, "_layer")] [NativeName(NativeNameType.Type, "uint16_t")] ushort layer, [NativeName(NativeNameType.Param, "_numLayers")] [NativeName(NativeNameType.Type, "uint16_t")] ushort numLayers, [NativeName(NativeNameType.Param, "_mip")] [NativeName(NativeNameType.Type, "uint16_t")] ushort mip, [NativeName(NativeNameType.Param, "_resolve")] [NativeName(NativeNameType.Type, "uint8_t")] byte resolve)
		{
			BgfxAttachmentInitNative(@this, handle, access, layer, numLayers, mip, resolve);
		}

		/// <summary>
		/// Init attachment.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_attachment_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxAttachmentInit([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_attachment_t*")] ref BgfxAttachment @this, [NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_texture_handle_t")] BgfxTextureHandle handle, [NativeName(NativeNameType.Param, "_access")] [NativeName(NativeNameType.Type, "bgfx_access_t")] BgfxAccess access, [NativeName(NativeNameType.Param, "_layer")] [NativeName(NativeNameType.Type, "uint16_t")] ushort layer, [NativeName(NativeNameType.Param, "_numLayers")] [NativeName(NativeNameType.Type, "uint16_t")] ushort numLayers, [NativeName(NativeNameType.Param, "_mip")] [NativeName(NativeNameType.Type, "uint16_t")] ushort mip, [NativeName(NativeNameType.Param, "_resolve")] [NativeName(NativeNameType.Type, "uint8_t")] byte resolve)
		{
			fixed (BgfxAttachment* pthis = &@this)
			{
				BgfxAttachmentInitNative((BgfxAttachment*)pthis, handle, access, layer, numLayers, mip, resolve);
			}
		}

		/// <summary>
		/// Start VertexLayout.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_begin")]
		[return: NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")]
		internal static BgfxVertexLayout* BgfxVertexLayoutBeginNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_rendererType")] [NativeName(NativeNameType.Type, "bgfx_renderer_type_t")] BgfxRendererType rendererType)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxVertexLayout*, BgfxRendererType, BgfxVertexLayout*>)vt[1])(@this, rendererType);
			#else
			return (BgfxVertexLayout*)((delegate* unmanaged[Cdecl]<nint, BgfxRendererType, nint>)vt[1])((nint)@this, rendererType);
			#endif
		}

		/// <summary>
		/// Start VertexLayout.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_begin")]
		[return: NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")]
		public static BgfxVertexLayout* BgfxVertexLayoutBegin([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_rendererType")] [NativeName(NativeNameType.Type, "bgfx_renderer_type_t")] BgfxRendererType rendererType)
		{
			BgfxVertexLayout* ret = BgfxVertexLayoutBeginNative(@this, rendererType);
			return ret;
		}

		/// <summary>
		/// Start VertexLayout.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_begin")]
		[return: NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")]
		public static BgfxVertexLayout* BgfxVertexLayoutBegin([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this, [NativeName(NativeNameType.Param, "_rendererType")] [NativeName(NativeNameType.Type, "bgfx_renderer_type_t")] BgfxRendererType rendererType)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				BgfxVertexLayout* ret = BgfxVertexLayoutBeginNative((BgfxVertexLayout*)pthis, rendererType);
				return ret;
			}
		}

		/// <summary>
		/// Add attribute to VertexLayout.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_add")]
		[return: NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")]
		internal static BgfxVertexLayout* BgfxVertexLayoutAddNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t")] byte num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t")] BgfxAttribType type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool")] byte normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool")] byte asInt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxVertexLayout*, BgfxAttrib, byte, BgfxAttribType, byte, byte, BgfxVertexLayout*>)vt[2])(@this, attrib, num, type, normalized, asInt);
			#else
			return (BgfxVertexLayout*)((delegate* unmanaged[Cdecl]<nint, BgfxAttrib, byte, BgfxAttribType, byte, byte, nint>)vt[2])((nint)@this, attrib, num, type, normalized, asInt);
			#endif
		}

		/// <summary>
		/// Add attribute to VertexLayout.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_add")]
		[return: NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")]
		public static BgfxVertexLayout* BgfxVertexLayoutAdd([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t")] byte num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t")] BgfxAttribType type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool")] bool normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool")] bool asInt)
		{
			BgfxVertexLayout* ret = BgfxVertexLayoutAddNative(@this, attrib, num, type, normalized ? (byte)1 : (byte)0, asInt ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// Add attribute to VertexLayout.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_add")]
		[return: NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")]
		public static BgfxVertexLayout* BgfxVertexLayoutAdd([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t")] byte num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t")] BgfxAttribType type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool")] bool normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool")] bool asInt)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				BgfxVertexLayout* ret = BgfxVertexLayoutAddNative((BgfxVertexLayout*)pthis, attrib, num, type, normalized ? (byte)1 : (byte)0, asInt ? (byte)1 : (byte)0);
				return ret;
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxVertexLayoutDecodeNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] byte* num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] BgfxAttribType* type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] bool* normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] bool* asInt)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxVertexLayout*, BgfxAttrib, byte*, BgfxAttribType*, bool*, bool*, void>)vt[3])(@this, attrib, num, type, normalized, asInt);
			#else
			((delegate* unmanaged[Cdecl]<nint, BgfxAttrib, nint, nint, nint, nint, void>)vt[3])((nint)@this, attrib, (nint)num, (nint)type, (nint)normalized, (nint)asInt);
			#endif
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] byte* num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] BgfxAttribType* type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] bool* normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] bool* asInt)
		{
			BgfxVertexLayoutDecodeNative(@this, attrib, num, type, normalized, asInt);
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] byte* num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] BgfxAttribType* type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] bool* normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] bool* asInt)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				BgfxVertexLayoutDecodeNative((BgfxVertexLayout*)pthis, attrib, num, type, normalized, asInt);
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] ref byte num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] BgfxAttribType* type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] bool* normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] bool* asInt)
		{
			fixed (byte* pnum = &num)
			{
				BgfxVertexLayoutDecodeNative(@this, attrib, (byte*)pnum, type, normalized, asInt);
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] ref byte num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] BgfxAttribType* type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] bool* normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] bool* asInt)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				fixed (byte* pnum = &num)
				{
					BgfxVertexLayoutDecodeNative((BgfxVertexLayout*)pthis, attrib, (byte*)pnum, type, normalized, asInt);
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] byte* num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] ref BgfxAttribType type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] bool* normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] bool* asInt)
		{
			fixed (BgfxAttribType* ptype = &type)
			{
				BgfxVertexLayoutDecodeNative(@this, attrib, num, (BgfxAttribType*)ptype, normalized, asInt);
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] byte* num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] ref BgfxAttribType type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] bool* normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] bool* asInt)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				fixed (BgfxAttribType* ptype = &type)
				{
					BgfxVertexLayoutDecodeNative((BgfxVertexLayout*)pthis, attrib, num, (BgfxAttribType*)ptype, normalized, asInt);
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] ref byte num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] ref BgfxAttribType type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] bool* normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] bool* asInt)
		{
			fixed (byte* pnum = &num)
			{
				fixed (BgfxAttribType* ptype = &type)
				{
					BgfxVertexLayoutDecodeNative(@this, attrib, (byte*)pnum, (BgfxAttribType*)ptype, normalized, asInt);
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] ref byte num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] ref BgfxAttribType type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] bool* normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] bool* asInt)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				fixed (byte* pnum = &num)
				{
					fixed (BgfxAttribType* ptype = &type)
					{
						BgfxVertexLayoutDecodeNative((BgfxVertexLayout*)pthis, attrib, (byte*)pnum, (BgfxAttribType*)ptype, normalized, asInt);
					}
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] byte* num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] BgfxAttribType* type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] ref bool normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] bool* asInt)
		{
			fixed (bool* pnormalized = &normalized)
			{
				BgfxVertexLayoutDecodeNative(@this, attrib, num, type, (bool*)pnormalized, asInt);
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] byte* num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] BgfxAttribType* type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] ref bool normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] bool* asInt)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				fixed (bool* pnormalized = &normalized)
				{
					BgfxVertexLayoutDecodeNative((BgfxVertexLayout*)pthis, attrib, num, type, (bool*)pnormalized, asInt);
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] ref byte num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] BgfxAttribType* type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] ref bool normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] bool* asInt)
		{
			fixed (byte* pnum = &num)
			{
				fixed (bool* pnormalized = &normalized)
				{
					BgfxVertexLayoutDecodeNative(@this, attrib, (byte*)pnum, type, (bool*)pnormalized, asInt);
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] ref byte num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] BgfxAttribType* type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] ref bool normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] bool* asInt)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				fixed (byte* pnum = &num)
				{
					fixed (bool* pnormalized = &normalized)
					{
						BgfxVertexLayoutDecodeNative((BgfxVertexLayout*)pthis, attrib, (byte*)pnum, type, (bool*)pnormalized, asInt);
					}
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] byte* num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] ref BgfxAttribType type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] ref bool normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] bool* asInt)
		{
			fixed (BgfxAttribType* ptype = &type)
			{
				fixed (bool* pnormalized = &normalized)
				{
					BgfxVertexLayoutDecodeNative(@this, attrib, num, (BgfxAttribType*)ptype, (bool*)pnormalized, asInt);
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] byte* num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] ref BgfxAttribType type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] ref bool normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] bool* asInt)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				fixed (BgfxAttribType* ptype = &type)
				{
					fixed (bool* pnormalized = &normalized)
					{
						BgfxVertexLayoutDecodeNative((BgfxVertexLayout*)pthis, attrib, num, (BgfxAttribType*)ptype, (bool*)pnormalized, asInt);
					}
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] ref byte num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] ref BgfxAttribType type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] ref bool normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] bool* asInt)
		{
			fixed (byte* pnum = &num)
			{
				fixed (BgfxAttribType* ptype = &type)
				{
					fixed (bool* pnormalized = &normalized)
					{
						BgfxVertexLayoutDecodeNative(@this, attrib, (byte*)pnum, (BgfxAttribType*)ptype, (bool*)pnormalized, asInt);
					}
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] ref byte num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] ref BgfxAttribType type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] ref bool normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] bool* asInt)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				fixed (byte* pnum = &num)
				{
					fixed (BgfxAttribType* ptype = &type)
					{
						fixed (bool* pnormalized = &normalized)
						{
							BgfxVertexLayoutDecodeNative((BgfxVertexLayout*)pthis, attrib, (byte*)pnum, (BgfxAttribType*)ptype, (bool*)pnormalized, asInt);
						}
					}
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] byte* num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] BgfxAttribType* type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] bool* normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] ref bool asInt)
		{
			fixed (bool* pasInt = &asInt)
			{
				BgfxVertexLayoutDecodeNative(@this, attrib, num, type, normalized, (bool*)pasInt);
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] byte* num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] BgfxAttribType* type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] bool* normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] ref bool asInt)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				fixed (bool* pasInt = &asInt)
				{
					BgfxVertexLayoutDecodeNative((BgfxVertexLayout*)pthis, attrib, num, type, normalized, (bool*)pasInt);
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] ref byte num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] BgfxAttribType* type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] bool* normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] ref bool asInt)
		{
			fixed (byte* pnum = &num)
			{
				fixed (bool* pasInt = &asInt)
				{
					BgfxVertexLayoutDecodeNative(@this, attrib, (byte*)pnum, type, normalized, (bool*)pasInt);
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] ref byte num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] BgfxAttribType* type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] bool* normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] ref bool asInt)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				fixed (byte* pnum = &num)
				{
					fixed (bool* pasInt = &asInt)
					{
						BgfxVertexLayoutDecodeNative((BgfxVertexLayout*)pthis, attrib, (byte*)pnum, type, normalized, (bool*)pasInt);
					}
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] byte* num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] ref BgfxAttribType type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] bool* normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] ref bool asInt)
		{
			fixed (BgfxAttribType* ptype = &type)
			{
				fixed (bool* pasInt = &asInt)
				{
					BgfxVertexLayoutDecodeNative(@this, attrib, num, (BgfxAttribType*)ptype, normalized, (bool*)pasInt);
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] byte* num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] ref BgfxAttribType type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] bool* normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] ref bool asInt)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				fixed (BgfxAttribType* ptype = &type)
				{
					fixed (bool* pasInt = &asInt)
					{
						BgfxVertexLayoutDecodeNative((BgfxVertexLayout*)pthis, attrib, num, (BgfxAttribType*)ptype, normalized, (bool*)pasInt);
					}
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] ref byte num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] ref BgfxAttribType type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] bool* normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] ref bool asInt)
		{
			fixed (byte* pnum = &num)
			{
				fixed (BgfxAttribType* ptype = &type)
				{
					fixed (bool* pasInt = &asInt)
					{
						BgfxVertexLayoutDecodeNative(@this, attrib, (byte*)pnum, (BgfxAttribType*)ptype, normalized, (bool*)pasInt);
					}
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] ref byte num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] ref BgfxAttribType type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] bool* normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] ref bool asInt)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				fixed (byte* pnum = &num)
				{
					fixed (BgfxAttribType* ptype = &type)
					{
						fixed (bool* pasInt = &asInt)
						{
							BgfxVertexLayoutDecodeNative((BgfxVertexLayout*)pthis, attrib, (byte*)pnum, (BgfxAttribType*)ptype, normalized, (bool*)pasInt);
						}
					}
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] byte* num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] BgfxAttribType* type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] ref bool normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] ref bool asInt)
		{
			fixed (bool* pnormalized = &normalized)
			{
				fixed (bool* pasInt = &asInt)
				{
					BgfxVertexLayoutDecodeNative(@this, attrib, num, type, (bool*)pnormalized, (bool*)pasInt);
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] byte* num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] BgfxAttribType* type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] ref bool normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] ref bool asInt)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				fixed (bool* pnormalized = &normalized)
				{
					fixed (bool* pasInt = &asInt)
					{
						BgfxVertexLayoutDecodeNative((BgfxVertexLayout*)pthis, attrib, num, type, (bool*)pnormalized, (bool*)pasInt);
					}
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] ref byte num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] BgfxAttribType* type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] ref bool normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] ref bool asInt)
		{
			fixed (byte* pnum = &num)
			{
				fixed (bool* pnormalized = &normalized)
				{
					fixed (bool* pasInt = &asInt)
					{
						BgfxVertexLayoutDecodeNative(@this, attrib, (byte*)pnum, type, (bool*)pnormalized, (bool*)pasInt);
					}
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] ref byte num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] BgfxAttribType* type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] ref bool normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] ref bool asInt)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				fixed (byte* pnum = &num)
				{
					fixed (bool* pnormalized = &normalized)
					{
						fixed (bool* pasInt = &asInt)
						{
							BgfxVertexLayoutDecodeNative((BgfxVertexLayout*)pthis, attrib, (byte*)pnum, type, (bool*)pnormalized, (bool*)pasInt);
						}
					}
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] byte* num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] ref BgfxAttribType type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] ref bool normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] ref bool asInt)
		{
			fixed (BgfxAttribType* ptype = &type)
			{
				fixed (bool* pnormalized = &normalized)
				{
					fixed (bool* pasInt = &asInt)
					{
						BgfxVertexLayoutDecodeNative(@this, attrib, num, (BgfxAttribType*)ptype, (bool*)pnormalized, (bool*)pasInt);
					}
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] byte* num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] ref BgfxAttribType type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] ref bool normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] ref bool asInt)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				fixed (BgfxAttribType* ptype = &type)
				{
					fixed (bool* pnormalized = &normalized)
					{
						fixed (bool* pasInt = &asInt)
						{
							BgfxVertexLayoutDecodeNative((BgfxVertexLayout*)pthis, attrib, num, (BgfxAttribType*)ptype, (bool*)pnormalized, (bool*)pasInt);
						}
					}
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] ref byte num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] ref BgfxAttribType type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] ref bool normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] ref bool asInt)
		{
			fixed (byte* pnum = &num)
			{
				fixed (BgfxAttribType* ptype = &type)
				{
					fixed (bool* pnormalized = &normalized)
					{
						fixed (bool* pasInt = &asInt)
						{
							BgfxVertexLayoutDecodeNative(@this, attrib, (byte*)pnum, (BgfxAttribType*)ptype, (bool*)pnormalized, (bool*)pasInt);
						}
					}
				}
			}
		}

		/// <summary>
		/// Decode attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_decode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutDecode([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t*")] ref byte num, [NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_attrib_type_t*")] ref BgfxAttribType type, [NativeName(NativeNameType.Param, "_normalized")] [NativeName(NativeNameType.Type, "bool*")] ref bool normalized, [NativeName(NativeNameType.Param, "_asInt")] [NativeName(NativeNameType.Type, "bool*")] ref bool asInt)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				fixed (byte* pnum = &num)
				{
					fixed (BgfxAttribType* ptype = &type)
					{
						fixed (bool* pnormalized = &normalized)
						{
							fixed (bool* pasInt = &asInt)
							{
								BgfxVertexLayoutDecodeNative((BgfxVertexLayout*)pthis, attrib, (byte*)pnum, (BgfxAttribType*)ptype, (bool*)pnormalized, (bool*)pasInt);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Returns `true` if VertexLayout contains attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_has")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BgfxVertexLayoutHasNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxVertexLayout*, BgfxAttrib, byte>)vt[4])(@this, attrib);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, BgfxAttrib, byte>)vt[4])((nint)@this, attrib);
			#endif
		}

		/// <summary>
		/// Returns `true` if VertexLayout contains attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_has")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BgfxVertexLayoutHas([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib)
		{
			byte ret = BgfxVertexLayoutHasNative(@this, attrib);
			return ret != 0;
		}

		/// <summary>
		/// Returns `true` if VertexLayout contains attribute.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_has")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BgfxVertexLayoutHas([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this, [NativeName(NativeNameType.Param, "_attrib")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attrib)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				byte ret = BgfxVertexLayoutHasNative((BgfxVertexLayout*)pthis, attrib);
				return ret != 0;
			}
		}

		/// <summary>
		/// Skip `_num` bytes in vertex stream.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_skip")]
		[return: NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")]
		internal static BgfxVertexLayout* BgfxVertexLayoutSkipNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t")] byte num)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxVertexLayout*, byte, BgfxVertexLayout*>)vt[5])(@this, num);
			#else
			return (BgfxVertexLayout*)((delegate* unmanaged[Cdecl]<nint, byte, nint>)vt[5])((nint)@this, num);
			#endif
		}

		/// <summary>
		/// Skip `_num` bytes in vertex stream.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_skip")]
		[return: NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")]
		public static BgfxVertexLayout* BgfxVertexLayoutSkip([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")] BgfxVertexLayout* @this, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t")] byte num)
		{
			BgfxVertexLayout* ret = BgfxVertexLayoutSkipNative(@this, num);
			return ret;
		}

		/// <summary>
		/// Skip `_num` bytes in vertex stream.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_skip")]
		[return: NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")]
		public static BgfxVertexLayout* BgfxVertexLayoutSkip([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint8_t")] byte num)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				BgfxVertexLayout* ret = BgfxVertexLayoutSkipNative((BgfxVertexLayout*)pthis, num);
				return ret;
			}
		}

		/// <summary>
		/// End VertexLayout.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_end")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxVertexLayoutEndNative([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")] BgfxVertexLayout* @this)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxVertexLayout*, void>)vt[6])(@this);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[6])((nint)@this);
			#endif
		}

		/// <summary>
		/// End VertexLayout.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_end")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutEnd([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")] BgfxVertexLayout* @this)
		{
			BgfxVertexLayoutEndNative(@this);
		}

		/// <summary>
		/// End VertexLayout.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_layout_end")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexLayoutEnd([NativeName(NativeNameType.Param, "_this")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_t*")] ref BgfxVertexLayout @this)
		{
			fixed (BgfxVertexLayout* pthis = &@this)
			{
				BgfxVertexLayoutEndNative((BgfxVertexLayout*)pthis);
			}
		}

		/// <summary>
		/// Pack vertex attribute into vertex stream format.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_pack")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxVertexPackNative([NativeName(NativeNameType.Param, "_input")] [NativeName(NativeNameType.Type, "const float[4]")] float* input, [NativeName(NativeNameType.Param, "_inputNormalized")] [NativeName(NativeNameType.Type, "bool")] byte inputNormalized, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attr, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, byte, BgfxAttrib, BgfxVertexLayout*, void*, uint, void>)vt[7])(input, inputNormalized, attr, layout, data, index);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, BgfxAttrib, nint, nint, uint, void>)vt[7])((nint)input, inputNormalized, attr, (nint)layout, (nint)data, index);
			#endif
		}

		/// <summary>
		/// Pack vertex attribute into vertex stream format.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_pack")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexPack([NativeName(NativeNameType.Param, "_input")] [NativeName(NativeNameType.Type, "const float[4]")] float* input, [NativeName(NativeNameType.Param, "_inputNormalized")] [NativeName(NativeNameType.Type, "bool")] bool inputNormalized, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attr, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index)
		{
			BgfxVertexPackNative(input, inputNormalized ? (byte)1 : (byte)0, attr, layout, data, index);
		}

		/// <summary>
		/// Pack vertex attribute into vertex stream format.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_pack")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexPack([NativeName(NativeNameType.Param, "_input")] [NativeName(NativeNameType.Type, "const float[4]")] ref float input, [NativeName(NativeNameType.Param, "_inputNormalized")] [NativeName(NativeNameType.Type, "bool")] bool inputNormalized, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attr, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index)
		{
			fixed (float* pinput = &input)
			{
				BgfxVertexPackNative((float*)pinput, inputNormalized ? (byte)1 : (byte)0, attr, layout, data, index);
			}
		}

		/// <summary>
		/// Pack vertex attribute into vertex stream format.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_pack")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexPack([NativeName(NativeNameType.Param, "_input")] [NativeName(NativeNameType.Type, "const float[4]")] ReadOnlySpan<float> input, [NativeName(NativeNameType.Param, "_inputNormalized")] [NativeName(NativeNameType.Type, "bool")] bool inputNormalized, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attr, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index)
		{
			fixed (float* pinput = input)
			{
				BgfxVertexPackNative((float*)pinput, inputNormalized ? (byte)1 : (byte)0, attr, layout, data, index);
			}
		}

		/// <summary>
		/// Pack vertex attribute into vertex stream format.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_pack")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexPack([NativeName(NativeNameType.Param, "_input")] [NativeName(NativeNameType.Type, "const float[4]")] float* input, [NativeName(NativeNameType.Param, "_inputNormalized")] [NativeName(NativeNameType.Type, "bool")] bool inputNormalized, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attr, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index)
		{
			fixed (BgfxVertexLayout* playout = &layout)
			{
				BgfxVertexPackNative(input, inputNormalized ? (byte)1 : (byte)0, attr, (BgfxVertexLayout*)playout, data, index);
			}
		}

		/// <summary>
		/// Pack vertex attribute into vertex stream format.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_pack")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexPack([NativeName(NativeNameType.Param, "_input")] [NativeName(NativeNameType.Type, "const float[4]")] ref float input, [NativeName(NativeNameType.Param, "_inputNormalized")] [NativeName(NativeNameType.Type, "bool")] bool inputNormalized, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attr, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index)
		{
			fixed (float* pinput = &input)
			{
				fixed (BgfxVertexLayout* playout = &layout)
				{
					BgfxVertexPackNative((float*)pinput, inputNormalized ? (byte)1 : (byte)0, attr, (BgfxVertexLayout*)playout, data, index);
				}
			}
		}

		/// <summary>
		/// Pack vertex attribute into vertex stream format.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_pack")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexPack([NativeName(NativeNameType.Param, "_input")] [NativeName(NativeNameType.Type, "const float[4]")] ReadOnlySpan<float> input, [NativeName(NativeNameType.Param, "_inputNormalized")] [NativeName(NativeNameType.Type, "bool")] bool inputNormalized, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attr, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index)
		{
			fixed (float* pinput = input)
			{
				fixed (BgfxVertexLayout* playout = &layout)
				{
					BgfxVertexPackNative((float*)pinput, inputNormalized ? (byte)1 : (byte)0, attr, (BgfxVertexLayout*)playout, data, index);
				}
			}
		}

		/// <summary>
		/// Unpack vertex attribute from vertex stream format.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_unpack")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxVertexUnpackNative([NativeName(NativeNameType.Param, "_output")] [NativeName(NativeNameType.Type, "float[4]")] float* output, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attr, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, BgfxAttrib, BgfxVertexLayout*, void*, uint, void>)vt[8])(output, attr, layout, data, index);
			#else
			((delegate* unmanaged[Cdecl]<nint, BgfxAttrib, nint, nint, uint, void>)vt[8])((nint)output, attr, (nint)layout, (nint)data, index);
			#endif
		}

		/// <summary>
		/// Unpack vertex attribute from vertex stream format.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_unpack")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static float BgfxVertexUnpack([NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attr, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index)
		{
			float ret;
			BgfxVertexUnpackNative(&ret, attr, layout, data, index);
			return ret;
		}

		/// <summary>
		/// Unpack vertex attribute from vertex stream format.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_unpack")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexUnpack([NativeName(NativeNameType.Param, "_output")] [NativeName(NativeNameType.Type, "float[4]")] float* output, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attr, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index)
		{
			BgfxVertexUnpackNative(output, attr, layout, data, index);
		}

		/// <summary>
		/// Unpack vertex attribute from vertex stream format.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_unpack")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexUnpack([NativeName(NativeNameType.Param, "_output")] [NativeName(NativeNameType.Type, "float[4]")] ref float output, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attr, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index)
		{
			fixed (float* poutput = &output)
			{
				BgfxVertexUnpackNative((float*)poutput, attr, layout, data, index);
			}
		}

		/// <summary>
		/// Unpack vertex attribute from vertex stream format.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_unpack")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexUnpack([NativeName(NativeNameType.Param, "_output")] [NativeName(NativeNameType.Type, "float[4]")] ReadOnlySpan<float> output, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attr, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index)
		{
			fixed (float* poutput = output)
			{
				BgfxVertexUnpackNative((float*)poutput, attr, layout, data, index);
			}
		}

		/// <summary>
		/// Unpack vertex attribute from vertex stream format.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_unpack")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static float BgfxVertexUnpack([NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attr, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index)
		{
			fixed (BgfxVertexLayout* playout = &layout)
			{
				float ret;
				BgfxVertexUnpackNative(&ret, attr, (BgfxAttrib)playout, data, index);
				return ret;
			}
		}

		/// <summary>
		/// Unpack vertex attribute from vertex stream format.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_unpack")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexUnpack([NativeName(NativeNameType.Param, "_output")] [NativeName(NativeNameType.Type, "float[4]")] float* output, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attr, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index)
		{
			fixed (BgfxVertexLayout* playout = &layout)
			{
				BgfxVertexUnpackNative(output, attr, (BgfxVertexLayout*)playout, data, index);
			}
		}

		/// <summary>
		/// Unpack vertex attribute from vertex stream format.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_unpack")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexUnpack([NativeName(NativeNameType.Param, "_output")] [NativeName(NativeNameType.Type, "float[4]")] ref float output, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attr, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index)
		{
			fixed (float* poutput = &output)
			{
				fixed (BgfxVertexLayout* playout = &layout)
				{
					BgfxVertexUnpackNative((float*)poutput, attr, (BgfxVertexLayout*)playout, data, index);
				}
			}
		}

		/// <summary>
		/// Unpack vertex attribute from vertex stream format.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_unpack")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexUnpack([NativeName(NativeNameType.Param, "_output")] [NativeName(NativeNameType.Type, "float[4]")] ReadOnlySpan<float> output, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "bgfx_attrib_t")] BgfxAttrib attr, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "_index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index)
		{
			fixed (float* poutput = output)
			{
				fixed (BgfxVertexLayout* playout = &layout)
				{
					BgfxVertexUnpackNative((float*)poutput, attr, (BgfxVertexLayout*)playout, data, index);
				}
			}
		}

		/// <summary>
		/// Converts vertex stream data from one vertex stream format to another.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_convert")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxVertexConvertNative([NativeName(NativeNameType.Param, "_dstLayout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* dstLayout, [NativeName(NativeNameType.Param, "_dstData")] [NativeName(NativeNameType.Type, "void*")] void* dstData, [NativeName(NativeNameType.Param, "_srcLayout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* srcLayout, [NativeName(NativeNameType.Param, "_srcData")] [NativeName(NativeNameType.Type, "const void*")] void* srcData, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxVertexLayout*, void*, BgfxVertexLayout*, void*, uint, void>)vt[9])(dstLayout, dstData, srcLayout, srcData, num);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, uint, void>)vt[9])((nint)dstLayout, (nint)dstData, (nint)srcLayout, (nint)srcData, num);
			#endif
		}

		/// <summary>
		/// Converts vertex stream data from one vertex stream format to another.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_convert")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexConvert([NativeName(NativeNameType.Param, "_dstLayout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* dstLayout, [NativeName(NativeNameType.Param, "_dstData")] [NativeName(NativeNameType.Type, "void*")] void* dstData, [NativeName(NativeNameType.Param, "_srcLayout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* srcLayout, [NativeName(NativeNameType.Param, "_srcData")] [NativeName(NativeNameType.Type, "const void*")] void* srcData, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			BgfxVertexConvertNative(dstLayout, dstData, srcLayout, srcData, num);
		}

		/// <summary>
		/// Converts vertex stream data from one vertex stream format to another.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_convert")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexConvert([NativeName(NativeNameType.Param, "_dstLayout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout dstLayout, [NativeName(NativeNameType.Param, "_dstData")] [NativeName(NativeNameType.Type, "void*")] void* dstData, [NativeName(NativeNameType.Param, "_srcLayout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* srcLayout, [NativeName(NativeNameType.Param, "_srcData")] [NativeName(NativeNameType.Type, "const void*")] void* srcData, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			fixed (BgfxVertexLayout* pdstLayout = &dstLayout)
			{
				BgfxVertexConvertNative((BgfxVertexLayout*)pdstLayout, dstData, srcLayout, srcData, num);
			}
		}

		/// <summary>
		/// Converts vertex stream data from one vertex stream format to another.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_convert")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexConvert([NativeName(NativeNameType.Param, "_dstLayout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* dstLayout, [NativeName(NativeNameType.Param, "_dstData")] [NativeName(NativeNameType.Type, "void*")] void* dstData, [NativeName(NativeNameType.Param, "_srcLayout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout srcLayout, [NativeName(NativeNameType.Param, "_srcData")] [NativeName(NativeNameType.Type, "const void*")] void* srcData, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			fixed (BgfxVertexLayout* psrcLayout = &srcLayout)
			{
				BgfxVertexConvertNative(dstLayout, dstData, (BgfxVertexLayout*)psrcLayout, srcData, num);
			}
		}

		/// <summary>
		/// Converts vertex stream data from one vertex stream format to another.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_vertex_convert")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxVertexConvert([NativeName(NativeNameType.Param, "_dstLayout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout dstLayout, [NativeName(NativeNameType.Param, "_dstData")] [NativeName(NativeNameType.Type, "void*")] void* dstData, [NativeName(NativeNameType.Param, "_srcLayout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout srcLayout, [NativeName(NativeNameType.Param, "_srcData")] [NativeName(NativeNameType.Type, "const void*")] void* srcData, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num)
		{
			fixed (BgfxVertexLayout* pdstLayout = &dstLayout)
			{
				fixed (BgfxVertexLayout* psrcLayout = &srcLayout)
				{
					BgfxVertexConvertNative((BgfxVertexLayout*)pdstLayout, dstData, (BgfxVertexLayout*)psrcLayout, srcData, num);
				}
			}
		}

		/// <summary>
		/// Weld vertices.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_weld_vertices")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		internal static uint BgfxWeldVerticesNative([NativeName(NativeNameType.Param, "_output")] [NativeName(NativeNameType.Type, "void*")] void* output, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] byte index32, [NativeName(NativeNameType.Param, "_epsilon")] [NativeName(NativeNameType.Type, "float")] float epsilon)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, BgfxVertexLayout*, void*, uint, byte, float, uint>)vt[10])(output, layout, data, num, index32, epsilon);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, nint, uint, byte, float, uint>)vt[10])((nint)output, (nint)layout, (nint)data, num, index32, epsilon);
			#endif
		}

		/// <summary>
		/// Weld vertices.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_weld_vertices")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint BgfxWeldVertices([NativeName(NativeNameType.Param, "_output")] [NativeName(NativeNameType.Type, "void*")] void* output, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32, [NativeName(NativeNameType.Param, "_epsilon")] [NativeName(NativeNameType.Type, "float")] float epsilon)
		{
			uint ret = BgfxWeldVerticesNative(output, layout, data, num, index32 ? (byte)1 : (byte)0, epsilon);
			return ret;
		}

		/// <summary>
		/// Weld vertices.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_weld_vertices")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint BgfxWeldVertices([NativeName(NativeNameType.Param, "_output")] [NativeName(NativeNameType.Type, "void*")] void* output, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32, [NativeName(NativeNameType.Param, "_epsilon")] [NativeName(NativeNameType.Type, "float")] float epsilon)
		{
			fixed (BgfxVertexLayout* playout = &layout)
			{
				uint ret = BgfxWeldVerticesNative(output, (BgfxVertexLayout*)playout, data, num, index32 ? (byte)1 : (byte)0, epsilon);
				return ret;
			}
		}

		/// <summary>
		/// Convert index buffer for use with different primitive topologies.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_topology_convert")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		internal static uint BgfxTopologyConvertNative([NativeName(NativeNameType.Param, "_conversion")] [NativeName(NativeNameType.Type, "bgfx_topology_convert_t")] BgfxTopologyConvert conversion, [NativeName(NativeNameType.Param, "_dst")] [NativeName(NativeNameType.Type, "void*")] void* dst, [NativeName(NativeNameType.Param, "_dstSize")] [NativeName(NativeNameType.Type, "uint32_t")] uint dstSize, [NativeName(NativeNameType.Param, "_indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] byte index32)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxTopologyConvert, void*, uint, void*, uint, byte, uint>)vt[11])(conversion, dst, dstSize, indices, numIndices, index32);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<BgfxTopologyConvert, nint, uint, nint, uint, byte, uint>)vt[11])(conversion, (nint)dst, dstSize, (nint)indices, numIndices, index32);
			#endif
		}

		/// <summary>
		/// Convert index buffer for use with different primitive topologies.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_topology_convert")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint BgfxTopologyConvert([NativeName(NativeNameType.Param, "_conversion")] [NativeName(NativeNameType.Type, "bgfx_topology_convert_t")] BgfxTopologyConvert conversion, [NativeName(NativeNameType.Param, "_dst")] [NativeName(NativeNameType.Type, "void*")] void* dst, [NativeName(NativeNameType.Param, "_dstSize")] [NativeName(NativeNameType.Type, "uint32_t")] uint dstSize, [NativeName(NativeNameType.Param, "_indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32)
		{
			uint ret = BgfxTopologyConvertNative(conversion, dst, dstSize, indices, numIndices, index32 ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// Sort indices.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_topology_sort_tri_list")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxTopologySortTriListNative([NativeName(NativeNameType.Param, "_sort")] [NativeName(NativeNameType.Type, "bgfx_topology_sort_t")] BgfxTopologySort sort, [NativeName(NativeNameType.Param, "_dst")] [NativeName(NativeNameType.Type, "void*")] void* dst, [NativeName(NativeNameType.Param, "_dstSize")] [NativeName(NativeNameType.Type, "uint32_t")] uint dstSize, [NativeName(NativeNameType.Param, "_dir")] [NativeName(NativeNameType.Type, "const float[3]")] float* dir, [NativeName(NativeNameType.Param, "_pos")] [NativeName(NativeNameType.Type, "const float[3]")] float* pos, [NativeName(NativeNameType.Param, "_vertices")] [NativeName(NativeNameType.Type, "const void*")] void* vertices, [NativeName(NativeNameType.Param, "_stride")] [NativeName(NativeNameType.Type, "uint32_t")] uint stride, [NativeName(NativeNameType.Param, "_indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] byte index32)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxTopologySort, void*, uint, float*, float*, void*, uint, void*, uint, byte, void>)vt[12])(sort, dst, dstSize, dir, pos, vertices, stride, indices, numIndices, index32);
			#else
			((delegate* unmanaged[Cdecl]<BgfxTopologySort, nint, uint, nint, nint, nint, uint, nint, uint, byte, void>)vt[12])(sort, (nint)dst, dstSize, (nint)dir, (nint)pos, (nint)vertices, stride, (nint)indices, numIndices, index32);
			#endif
		}

		/// <summary>
		/// Sort indices.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_topology_sort_tri_list")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxTopologySortTriList([NativeName(NativeNameType.Param, "_sort")] [NativeName(NativeNameType.Type, "bgfx_topology_sort_t")] BgfxTopologySort sort, [NativeName(NativeNameType.Param, "_dst")] [NativeName(NativeNameType.Type, "void*")] void* dst, [NativeName(NativeNameType.Param, "_dstSize")] [NativeName(NativeNameType.Type, "uint32_t")] uint dstSize, [NativeName(NativeNameType.Param, "_dir")] [NativeName(NativeNameType.Type, "const float[3]")] float* dir, [NativeName(NativeNameType.Param, "_pos")] [NativeName(NativeNameType.Type, "const float[3]")] float* pos, [NativeName(NativeNameType.Param, "_vertices")] [NativeName(NativeNameType.Type, "const void*")] void* vertices, [NativeName(NativeNameType.Param, "_stride")] [NativeName(NativeNameType.Type, "uint32_t")] uint stride, [NativeName(NativeNameType.Param, "_indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32)
		{
			BgfxTopologySortTriListNative(sort, dst, dstSize, dir, pos, vertices, stride, indices, numIndices, index32 ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Sort indices.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_topology_sort_tri_list")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxTopologySortTriList([NativeName(NativeNameType.Param, "_sort")] [NativeName(NativeNameType.Type, "bgfx_topology_sort_t")] BgfxTopologySort sort, [NativeName(NativeNameType.Param, "_dst")] [NativeName(NativeNameType.Type, "void*")] void* dst, [NativeName(NativeNameType.Param, "_dstSize")] [NativeName(NativeNameType.Type, "uint32_t")] uint dstSize, [NativeName(NativeNameType.Param, "_dir")] [NativeName(NativeNameType.Type, "const float[3]")] ref float dir, [NativeName(NativeNameType.Param, "_pos")] [NativeName(NativeNameType.Type, "const float[3]")] float* pos, [NativeName(NativeNameType.Param, "_vertices")] [NativeName(NativeNameType.Type, "const void*")] void* vertices, [NativeName(NativeNameType.Param, "_stride")] [NativeName(NativeNameType.Type, "uint32_t")] uint stride, [NativeName(NativeNameType.Param, "_indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32)
		{
			fixed (float* pdir = &dir)
			{
				BgfxTopologySortTriListNative(sort, dst, dstSize, (float*)pdir, pos, vertices, stride, indices, numIndices, index32 ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// Sort indices.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_topology_sort_tri_list")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxTopologySortTriList([NativeName(NativeNameType.Param, "_sort")] [NativeName(NativeNameType.Type, "bgfx_topology_sort_t")] BgfxTopologySort sort, [NativeName(NativeNameType.Param, "_dst")] [NativeName(NativeNameType.Type, "void*")] void* dst, [NativeName(NativeNameType.Param, "_dstSize")] [NativeName(NativeNameType.Type, "uint32_t")] uint dstSize, [NativeName(NativeNameType.Param, "_dir")] [NativeName(NativeNameType.Type, "const float[3]")] ReadOnlySpan<float> dir, [NativeName(NativeNameType.Param, "_pos")] [NativeName(NativeNameType.Type, "const float[3]")] float* pos, [NativeName(NativeNameType.Param, "_vertices")] [NativeName(NativeNameType.Type, "const void*")] void* vertices, [NativeName(NativeNameType.Param, "_stride")] [NativeName(NativeNameType.Type, "uint32_t")] uint stride, [NativeName(NativeNameType.Param, "_indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32)
		{
			fixed (float* pdir = dir)
			{
				BgfxTopologySortTriListNative(sort, dst, dstSize, (float*)pdir, pos, vertices, stride, indices, numIndices, index32 ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// Sort indices.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_topology_sort_tri_list")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxTopologySortTriList([NativeName(NativeNameType.Param, "_sort")] [NativeName(NativeNameType.Type, "bgfx_topology_sort_t")] BgfxTopologySort sort, [NativeName(NativeNameType.Param, "_dst")] [NativeName(NativeNameType.Type, "void*")] void* dst, [NativeName(NativeNameType.Param, "_dstSize")] [NativeName(NativeNameType.Type, "uint32_t")] uint dstSize, [NativeName(NativeNameType.Param, "_dir")] [NativeName(NativeNameType.Type, "const float[3]")] float* dir, [NativeName(NativeNameType.Param, "_pos")] [NativeName(NativeNameType.Type, "const float[3]")] ref float pos, [NativeName(NativeNameType.Param, "_vertices")] [NativeName(NativeNameType.Type, "const void*")] void* vertices, [NativeName(NativeNameType.Param, "_stride")] [NativeName(NativeNameType.Type, "uint32_t")] uint stride, [NativeName(NativeNameType.Param, "_indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32)
		{
			fixed (float* ppos = &pos)
			{
				BgfxTopologySortTriListNative(sort, dst, dstSize, dir, (float*)ppos, vertices, stride, indices, numIndices, index32 ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// Sort indices.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_topology_sort_tri_list")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxTopologySortTriList([NativeName(NativeNameType.Param, "_sort")] [NativeName(NativeNameType.Type, "bgfx_topology_sort_t")] BgfxTopologySort sort, [NativeName(NativeNameType.Param, "_dst")] [NativeName(NativeNameType.Type, "void*")] void* dst, [NativeName(NativeNameType.Param, "_dstSize")] [NativeName(NativeNameType.Type, "uint32_t")] uint dstSize, [NativeName(NativeNameType.Param, "_dir")] [NativeName(NativeNameType.Type, "const float[3]")] float* dir, [NativeName(NativeNameType.Param, "_pos")] [NativeName(NativeNameType.Type, "const float[3]")] ReadOnlySpan<float> pos, [NativeName(NativeNameType.Param, "_vertices")] [NativeName(NativeNameType.Type, "const void*")] void* vertices, [NativeName(NativeNameType.Param, "_stride")] [NativeName(NativeNameType.Type, "uint32_t")] uint stride, [NativeName(NativeNameType.Param, "_indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32)
		{
			fixed (float* ppos = pos)
			{
				BgfxTopologySortTriListNative(sort, dst, dstSize, dir, (float*)ppos, vertices, stride, indices, numIndices, index32 ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// Sort indices.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_topology_sort_tri_list")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxTopologySortTriList([NativeName(NativeNameType.Param, "_sort")] [NativeName(NativeNameType.Type, "bgfx_topology_sort_t")] BgfxTopologySort sort, [NativeName(NativeNameType.Param, "_dst")] [NativeName(NativeNameType.Type, "void*")] void* dst, [NativeName(NativeNameType.Param, "_dstSize")] [NativeName(NativeNameType.Type, "uint32_t")] uint dstSize, [NativeName(NativeNameType.Param, "_dir")] [NativeName(NativeNameType.Type, "const float[3]")] ref float dir, [NativeName(NativeNameType.Param, "_pos")] [NativeName(NativeNameType.Type, "const float[3]")] ref float pos, [NativeName(NativeNameType.Param, "_vertices")] [NativeName(NativeNameType.Type, "const void*")] void* vertices, [NativeName(NativeNameType.Param, "_stride")] [NativeName(NativeNameType.Type, "uint32_t")] uint stride, [NativeName(NativeNameType.Param, "_indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32)
		{
			fixed (float* pdir = &dir)
			{
				fixed (float* ppos = &pos)
				{
					BgfxTopologySortTriListNative(sort, dst, dstSize, (float*)pdir, (float*)ppos, vertices, stride, indices, numIndices, index32 ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// Sort indices.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_topology_sort_tri_list")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxTopologySortTriList([NativeName(NativeNameType.Param, "_sort")] [NativeName(NativeNameType.Type, "bgfx_topology_sort_t")] BgfxTopologySort sort, [NativeName(NativeNameType.Param, "_dst")] [NativeName(NativeNameType.Type, "void*")] void* dst, [NativeName(NativeNameType.Param, "_dstSize")] [NativeName(NativeNameType.Type, "uint32_t")] uint dstSize, [NativeName(NativeNameType.Param, "_dir")] [NativeName(NativeNameType.Type, "const float[3]")] ReadOnlySpan<float> dir, [NativeName(NativeNameType.Param, "_pos")] [NativeName(NativeNameType.Type, "const float[3]")] ReadOnlySpan<float> pos, [NativeName(NativeNameType.Param, "_vertices")] [NativeName(NativeNameType.Type, "const void*")] void* vertices, [NativeName(NativeNameType.Param, "_stride")] [NativeName(NativeNameType.Type, "uint32_t")] uint stride, [NativeName(NativeNameType.Param, "_indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "_numIndices")] [NativeName(NativeNameType.Type, "uint32_t")] uint numIndices, [NativeName(NativeNameType.Param, "_index32")] [NativeName(NativeNameType.Type, "bool")] bool index32)
		{
			fixed (float* pdir = dir)
			{
				fixed (float* ppos = pos)
				{
					BgfxTopologySortTriListNative(sort, dst, dstSize, (float*)pdir, (float*)ppos, vertices, stride, indices, numIndices, index32 ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// Returns supported backend API renderers.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_supported_renderers")]
		[return: NativeName(NativeNameType.Type, "uint8_t")]
		internal static byte BgfxGetSupportedRenderersNative([NativeName(NativeNameType.Param, "_max")] [NativeName(NativeNameType.Type, "uint8_t")] byte max, [NativeName(NativeNameType.Param, "_enum")] [NativeName(NativeNameType.Type, "bgfx_renderer_type_t*")] BgfxRendererType* @enum)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte, BgfxRendererType*, byte>)vt[13])(max, @enum);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte, nint, byte>)vt[13])(max, (nint)@enum);
			#endif
		}

		/// <summary>
		/// Returns supported backend API renderers.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_supported_renderers")]
		[return: NativeName(NativeNameType.Type, "uint8_t")]
		public static byte BgfxGetSupportedRenderers([NativeName(NativeNameType.Param, "_max")] [NativeName(NativeNameType.Type, "uint8_t")] byte max, [NativeName(NativeNameType.Param, "_enum")] [NativeName(NativeNameType.Type, "bgfx_renderer_type_t*")] BgfxRendererType* @enum)
		{
			byte ret = BgfxGetSupportedRenderersNative(max, @enum);
			return ret;
		}

		/// <summary>
		/// Returns supported backend API renderers.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_supported_renderers")]
		[return: NativeName(NativeNameType.Type, "uint8_t")]
		public static byte BgfxGetSupportedRenderers([NativeName(NativeNameType.Param, "_max")] [NativeName(NativeNameType.Type, "uint8_t")] byte max, [NativeName(NativeNameType.Param, "_enum")] [NativeName(NativeNameType.Type, "bgfx_renderer_type_t*")] ref BgfxRendererType @enum)
		{
			fixed (BgfxRendererType* penum = &@enum)
			{
				byte ret = BgfxGetSupportedRenderersNative(max, (BgfxRendererType*)penum);
				return ret;
			}
		}

		/// <summary>
		/// Returns name of renderer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_renderer_name")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* BgfxGetRendererNameNative([NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_renderer_type_t")] BgfxRendererType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxRendererType, byte*>)vt[14])(type);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<BgfxRendererType, nint>)vt[14])(type);
			#endif
		}

		/// <summary>
		/// Returns name of renderer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_renderer_name")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* BgfxGetRendererName([NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_renderer_type_t")] BgfxRendererType type)
		{
			byte* ret = BgfxGetRendererNameNative(type);
			return ret;
		}

		/// <summary>
		/// Returns name of renderer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_renderer_name")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string BgfxGetRendererNameS([NativeName(NativeNameType.Param, "_type")] [NativeName(NativeNameType.Type, "bgfx_renderer_type_t")] BgfxRendererType type)
		{
			string ret = Utils.DecodeStringUTF8(BgfxGetRendererNameNative(type));
			return ret;
		}

		/// <summary>
		/// Fill bgfx::Init struct with default values, before using it to initialize the library.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_init_ctor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxInitCtorNative([NativeName(NativeNameType.Param, "_init")] [NativeName(NativeNameType.Type, "bgfx_init_t*")] BgfxInit* init)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxInit*, void>)vt[15])(init);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[15])((nint)init);
			#endif
		}

		/// <summary>
		/// Fill bgfx::Init struct with default values, before using it to initialize the library.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_init_ctor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxInitCtor([NativeName(NativeNameType.Param, "_init")] [NativeName(NativeNameType.Type, "bgfx_init_t*")] BgfxInit* init)
		{
			BgfxInitCtorNative(init);
		}

		/// <summary>
		/// Fill bgfx::Init struct with default values, before using it to initialize the library.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_init_ctor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxInitCtor([NativeName(NativeNameType.Param, "_init")] [NativeName(NativeNameType.Type, "bgfx_init_t*")] ref BgfxInit init)
		{
			fixed (BgfxInit* pinit = &init)
			{
				BgfxInitCtorNative((BgfxInit*)pinit);
			}
		}

		/// <summary>
		/// Initialize the bgfx library.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_init")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BgfxInitNative([NativeName(NativeNameType.Param, "_init")] [NativeName(NativeNameType.Type, "const bgfx_init_t*")] BgfxInit* init)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxInit*, byte>)vt[16])(init);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[16])((nint)init);
			#endif
		}

		/// <summary>
		/// Initialize the bgfx library.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_init")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BgfxInit([NativeName(NativeNameType.Param, "_init")] [NativeName(NativeNameType.Type, "const bgfx_init_t*")] BgfxInit* init)
		{
			byte ret = BgfxInitNative(init);
			return ret != 0;
		}

		/// <summary>
		/// Initialize the bgfx library.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_init")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BgfxInit([NativeName(NativeNameType.Param, "_init")] [NativeName(NativeNameType.Type, "const bgfx_init_t*")] ref BgfxInit init)
		{
			fixed (BgfxInit* pinit = &init)
			{
				byte ret = BgfxInitNative((BgfxInit*)pinit);
				return ret != 0;
			}
		}

		/// <summary>
		/// Shutdown bgfx library.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_shutdown")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxShutdownNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[17])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[17])();
			#endif
		}

		/// <summary>
		/// Shutdown bgfx library.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_shutdown")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxShutdown()
		{
			BgfxShutdownNative();
		}

		/// <summary>
		/// Reset graphic settings and back-buffer size.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_reset")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxResetNative([NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint32_t")] uint width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint32_t")] uint height, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint32_t")] uint flags, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, BgfxTextureFormat, void>)vt[18])(width, height, flags, format);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, BgfxTextureFormat, void>)vt[18])(width, height, flags, format);
			#endif
		}

		/// <summary>
		/// Reset graphic settings and back-buffer size.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_reset")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxReset([NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint32_t")] uint width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint32_t")] uint height, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint32_t")] uint flags, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "bgfx_texture_format_t")] BgfxTextureFormat format)
		{
			BgfxResetNative(width, height, flags, format);
		}

		/// <summary>
		/// Advance to next frame. When using multithreaded renderer, this call<br/>
		/// just swaps internal buffers, kicks render thread, and returns. In<br/>
		/// singlethreaded renderer this call does frame rendering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_frame")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		internal static uint BgfxFrameNative([NativeName(NativeNameType.Param, "_capture")] [NativeName(NativeNameType.Type, "bool")] byte capture)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte, uint>)vt[19])(capture);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<byte, uint>)vt[19])(capture);
			#endif
		}

		/// <summary>
		/// Advance to next frame. When using multithreaded renderer, this call<br/>
		/// just swaps internal buffers, kicks render thread, and returns. In<br/>
		/// singlethreaded renderer this call does frame rendering.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_frame")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint BgfxFrame([NativeName(NativeNameType.Param, "_capture")] [NativeName(NativeNameType.Type, "bool")] bool capture)
		{
			uint ret = BgfxFrameNative(capture ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// Returns current renderer backend API type.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_renderer_type")]
		[return: NativeName(NativeNameType.Type, "bgfx_renderer_type_t")]
		internal static BgfxRendererType BgfxGetRendererTypeNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxRendererType>)vt[20])();
			#else
			return (BgfxRendererType)((delegate* unmanaged[Cdecl]<BgfxRendererType>)vt[20])();
			#endif
		}

		/// <summary>
		/// Returns current renderer backend API type.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_renderer_type")]
		[return: NativeName(NativeNameType.Type, "bgfx_renderer_type_t")]
		public static BgfxRendererType BgfxGetRendererType()
		{
			BgfxRendererType ret = BgfxGetRendererTypeNative();
			return ret;
		}

		/// <summary>
		/// Returns renderer capabilities.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_caps")]
		[return: NativeName(NativeNameType.Type, "const bgfx_caps_t*")]
		internal static BgfxCaps* BgfxGetCapsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxCaps*>)vt[21])();
			#else
			return (BgfxCaps*)((delegate* unmanaged[Cdecl]<nint>)vt[21])();
			#endif
		}

		/// <summary>
		/// Returns renderer capabilities.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_caps")]
		[return: NativeName(NativeNameType.Type, "const bgfx_caps_t*")]
		public static BgfxCaps* BgfxGetCaps()
		{
			BgfxCaps* ret = BgfxGetCapsNative();
			return ret;
		}

		/// <summary>
		/// Returns performance counters.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_stats")]
		[return: NativeName(NativeNameType.Type, "const bgfx_stats_t*")]
		internal static BgfxStats* BgfxGetStatsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxStats*>)vt[22])();
			#else
			return (BgfxStats*)((delegate* unmanaged[Cdecl]<nint>)vt[22])();
			#endif
		}

		/// <summary>
		/// Returns performance counters.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_get_stats")]
		[return: NativeName(NativeNameType.Type, "const bgfx_stats_t*")]
		public static BgfxStats* BgfxGetStats()
		{
			BgfxStats* ret = BgfxGetStatsNative();
			return ret;
		}

		/// <summary>
		/// Allocate buffer to pass to bgfx calls. Data will be freed inside bgfx.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc")]
		[return: NativeName(NativeNameType.Type, "const bgfx_memory_t*")]
		internal static BgfxMemory* BgfxAllocNative([NativeName(NativeNameType.Param, "_size")] [NativeName(NativeNameType.Type, "uint32_t")] uint size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, BgfxMemory*>)vt[23])(size);
			#else
			return (BgfxMemory*)((delegate* unmanaged[Cdecl]<uint, nint>)vt[23])(size);
			#endif
		}

		/// <summary>
		/// Allocate buffer to pass to bgfx calls. Data will be freed inside bgfx.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_alloc")]
		[return: NativeName(NativeNameType.Type, "const bgfx_memory_t*")]
		public static BgfxMemory* BgfxAlloc([NativeName(NativeNameType.Param, "_size")] [NativeName(NativeNameType.Type, "uint32_t")] uint size)
		{
			BgfxMemory* ret = BgfxAllocNative(size);
			return ret;
		}

		/// <summary>
		/// Allocate buffer and copy data into it. Data will be freed inside bgfx.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_copy")]
		[return: NativeName(NativeNameType.Type, "const bgfx_memory_t*")]
		internal static BgfxMemory* BgfxCopyNative([NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "_size")] [NativeName(NativeNameType.Type, "uint32_t")] uint size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, uint, BgfxMemory*>)vt[24])(data, size);
			#else
			return (BgfxMemory*)((delegate* unmanaged[Cdecl]<nint, uint, nint>)vt[24])((nint)data, size);
			#endif
		}

		/// <summary>
		/// Allocate buffer and copy data into it. Data will be freed inside bgfx.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_copy")]
		[return: NativeName(NativeNameType.Type, "const bgfx_memory_t*")]
		public static BgfxMemory* BgfxCopy([NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "_size")] [NativeName(NativeNameType.Type, "uint32_t")] uint size)
		{
			BgfxMemory* ret = BgfxCopyNative(data, size);
			return ret;
		}

		/// <summary>
		/// Make reference to data to pass to bgfx. Unlike `bgfx::alloc`, this call<br/>
		/// doesn't allocate memory for data. It just copies the _data pointer. You<br/>
		/// can pass `ReleaseFn` function pointer to release this memory after it's<br/>
		/// consumed, otherwise you must make sure _data is available for at least 2<br/>
		/// `bgfx::frame` calls. `ReleaseFn` function must be able to be called<br/>
		/// from any thread.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_make_ref")]
		[return: NativeName(NativeNameType.Type, "const bgfx_memory_t*")]
		internal static BgfxMemory* BgfxMakeRefNative([NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "_size")] [NativeName(NativeNameType.Type, "uint32_t")] uint size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, uint, BgfxMemory*>)vt[25])(data, size);
			#else
			return (BgfxMemory*)((delegate* unmanaged[Cdecl]<nint, uint, nint>)vt[25])((nint)data, size);
			#endif
		}

		/// <summary>
		/// Make reference to data to pass to bgfx. Unlike `bgfx::alloc`, this call<br/>
		/// doesn't allocate memory for data. It just copies the _data pointer. You<br/>
		/// can pass `ReleaseFn` function pointer to release this memory after it's<br/>
		/// consumed, otherwise you must make sure _data is available for at least 2<br/>
		/// `bgfx::frame` calls. `ReleaseFn` function must be able to be called<br/>
		/// from any thread.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_make_ref")]
		[return: NativeName(NativeNameType.Type, "const bgfx_memory_t*")]
		public static BgfxMemory* BgfxMakeRef([NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "_size")] [NativeName(NativeNameType.Type, "uint32_t")] uint size)
		{
			BgfxMemory* ret = BgfxMakeRefNative(data, size);
			return ret;
		}

		/// <summary>
		/// Make reference to data to pass to bgfx. Unlike `bgfx::alloc`, this call<br/>
		/// doesn't allocate memory for data. It just copies the _data pointer. You<br/>
		/// can pass `ReleaseFn` function pointer to release this memory after it's<br/>
		/// consumed, otherwise you must make sure _data is available for at least 2<br/>
		/// `bgfx::frame` calls. `ReleaseFn` function must be able to be called<br/>
		/// from any thread.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_make_ref_release")]
		[return: NativeName(NativeNameType.Type, "const bgfx_memory_t*")]
		internal static BgfxMemory* BgfxMakeRefReleaseNative([NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "_size")] [NativeName(NativeNameType.Type, "uint32_t")] uint size, [NativeName(NativeNameType.Param, "_releaseFn")] [NativeName(NativeNameType.Type, "bgfx_release_fn_t")] BgfxReleaseFnT releaseFn, [NativeName(NativeNameType.Param, "_userData")] [NativeName(NativeNameType.Type, "void*")] void* userData)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, uint, delegate*<void*, void*, void>, void*, BgfxMemory*>)vt[26])(data, size, (delegate*<void*, void*, void>)Utils.GetFunctionPointerForDelegate(releaseFn), userData);
			#else
			return (BgfxMemory*)((delegate* unmanaged[Cdecl]<nint, uint, nint, nint, nint>)vt[26])((nint)data, size, (nint)Utils.GetFunctionPointerForDelegate(releaseFn), (nint)userData);
			#endif
		}

		/// <summary>
		/// Make reference to data to pass to bgfx. Unlike `bgfx::alloc`, this call<br/>
		/// doesn't allocate memory for data. It just copies the _data pointer. You<br/>
		/// can pass `ReleaseFn` function pointer to release this memory after it's<br/>
		/// consumed, otherwise you must make sure _data is available for at least 2<br/>
		/// `bgfx::frame` calls. `ReleaseFn` function must be able to be called<br/>
		/// from any thread.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_make_ref_release")]
		[return: NativeName(NativeNameType.Type, "const bgfx_memory_t*")]
		public static BgfxMemory* BgfxMakeRefRelease([NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "_size")] [NativeName(NativeNameType.Type, "uint32_t")] uint size, [NativeName(NativeNameType.Param, "_releaseFn")] [NativeName(NativeNameType.Type, "bgfx_release_fn_t")] BgfxReleaseFnT releaseFn, [NativeName(NativeNameType.Param, "_userData")] [NativeName(NativeNameType.Type, "void*")] void* userData)
		{
			BgfxMemory* ret = BgfxMakeRefReleaseNative(data, size, releaseFn, userData);
			return ret;
		}

		/// <summary>
		/// Set debug flags.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_debug")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetDebugNative([NativeName(NativeNameType.Param, "_debug")] [NativeName(NativeNameType.Type, "uint32_t")] uint debug)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[27])(debug);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[27])(debug);
			#endif
		}

		/// <summary>
		/// Set debug flags.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_debug")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetDebug([NativeName(NativeNameType.Param, "_debug")] [NativeName(NativeNameType.Type, "uint32_t")] uint debug)
		{
			BgfxSetDebugNative(debug);
		}

		/// <summary>
		/// Clear internal debug text buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_dbg_text_clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxDbgTextClearNative([NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "uint8_t")] byte attr, [NativeName(NativeNameType.Param, "_small")] [NativeName(NativeNameType.Type, "bool")] byte small)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, byte, void>)vt[28])(attr, small);
			#else
			((delegate* unmanaged[Cdecl]<byte, byte, void>)vt[28])(attr, small);
			#endif
		}

		/// <summary>
		/// Clear internal debug text buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_dbg_text_clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDbgTextClear([NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "uint8_t")] byte attr, [NativeName(NativeNameType.Param, "_small")] [NativeName(NativeNameType.Type, "bool")] bool small)
		{
			BgfxDbgTextClearNative(attr, small ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Print formatted data to internal debug text character-buffer (VGA-compatible text mode).<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_dbg_text_printf")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxDbgTextPrintfNative([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "uint8_t")] byte attr, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, ushort, byte, byte*, void>)vt[29])(x, y, attr, format);
			#else
			((delegate* unmanaged[Cdecl]<ushort, ushort, byte, nint, void>)vt[29])(x, y, attr, (nint)format);
			#endif
		}

		/// <summary>
		/// Print formatted data to internal debug text character-buffer (VGA-compatible text mode).<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_dbg_text_printf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDbgTextPrintf([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "uint8_t")] byte attr, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			BgfxDbgTextPrintfNative(x, y, attr, format);
		}

		/// <summary>
		/// Print formatted data to internal debug text character-buffer (VGA-compatible text mode).<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_dbg_text_printf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDbgTextPrintf([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "uint8_t")] byte attr, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				BgfxDbgTextPrintfNative(x, y, attr, (byte*)pformat);
			}
		}

		/// <summary>
		/// Print formatted data to internal debug text character-buffer (VGA-compatible text mode).<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_dbg_text_printf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDbgTextPrintf([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "uint8_t")] byte attr, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format)
		{
			fixed (byte* pformat = format)
			{
				BgfxDbgTextPrintfNative(x, y, attr, (byte*)pformat);
			}
		}

		/// <summary>
		/// Print formatted data to internal debug text character-buffer (VGA-compatible text mode).<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_dbg_text_printf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDbgTextPrintf([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "uint8_t")] byte attr, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "const char*")] string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			BgfxDbgTextPrintfNative(x, y, attr, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Print formatted data from variable argument list to internal debug text character-buffer (VGA-compatible text mode).<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_dbg_text_vprintf")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxDbgTextVprintfNative([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "uint8_t")] byte attr, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "_argList")] [NativeName(NativeNameType.Type, "va_list")] nint argList)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, ushort, byte, byte*, nint, void>)vt[30])(x, y, attr, format, argList);
			#else
			((delegate* unmanaged[Cdecl]<ushort, ushort, byte, nint, nint, void>)vt[30])(x, y, attr, (nint)format, argList);
			#endif
		}

		/// <summary>
		/// Print formatted data from variable argument list to internal debug text character-buffer (VGA-compatible text mode).<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_dbg_text_vprintf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDbgTextVprintf([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "uint8_t")] byte attr, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "_argList")] [NativeName(NativeNameType.Type, "va_list")] nint argList)
		{
			BgfxDbgTextVprintfNative(x, y, attr, format, argList);
		}

		/// <summary>
		/// Print formatted data from variable argument list to internal debug text character-buffer (VGA-compatible text mode).<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_dbg_text_vprintf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDbgTextVprintf([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "uint8_t")] byte attr, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "_argList")] [NativeName(NativeNameType.Type, "va_list")] nint argList)
		{
			fixed (byte* pformat = &format)
			{
				BgfxDbgTextVprintfNative(x, y, attr, (byte*)pformat, argList);
			}
		}

		/// <summary>
		/// Print formatted data from variable argument list to internal debug text character-buffer (VGA-compatible text mode).<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_dbg_text_vprintf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDbgTextVprintf([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "uint8_t")] byte attr, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "_argList")] [NativeName(NativeNameType.Type, "va_list")] nint argList)
		{
			fixed (byte* pformat = format)
			{
				BgfxDbgTextVprintfNative(x, y, attr, (byte*)pformat, argList);
			}
		}

		/// <summary>
		/// Print formatted data from variable argument list to internal debug text character-buffer (VGA-compatible text mode).<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_dbg_text_vprintf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDbgTextVprintf([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_attr")] [NativeName(NativeNameType.Type, "uint8_t")] byte attr, [NativeName(NativeNameType.Param, "_format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "_argList")] [NativeName(NativeNameType.Type, "va_list")] nint argList)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			BgfxDbgTextVprintfNative(x, y, attr, pStr0, argList);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Draw image into internal debug text buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_dbg_text_image")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxDbgTextImageNative([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "_pitch")] [NativeName(NativeNameType.Type, "uint16_t")] ushort pitch)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, ushort, ushort, ushort, void*, ushort, void>)vt[31])(x, y, width, height, data, pitch);
			#else
			((delegate* unmanaged[Cdecl]<ushort, ushort, ushort, ushort, nint, ushort, void>)vt[31])(x, y, width, height, (nint)data, pitch);
			#endif
		}

		/// <summary>
		/// Draw image into internal debug text buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_dbg_text_image")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDbgTextImage([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "uint16_t")] ushort x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "uint16_t")] ushort y, [NativeName(NativeNameType.Param, "_width")] [NativeName(NativeNameType.Type, "uint16_t")] ushort width, [NativeName(NativeNameType.Param, "_height")] [NativeName(NativeNameType.Type, "uint16_t")] ushort height, [NativeName(NativeNameType.Param, "_data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "_pitch")] [NativeName(NativeNameType.Type, "uint16_t")] ushort pitch)
		{
			BgfxDbgTextImageNative(x, y, width, height, data, pitch);
		}

		/// <summary>
		/// Create static index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_index_buffer")]
		[return: NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")]
		internal static BgfxIndexBufferHandle BgfxCreateIndexBufferNative([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxMemory*, ushort, BgfxIndexBufferHandle>)vt[32])(mem, flags);
			#else
			return (BgfxIndexBufferHandle)((delegate* unmanaged[Cdecl]<nint, ushort, BgfxIndexBufferHandle>)vt[32])((nint)mem, flags);
			#endif
		}

		/// <summary>
		/// Create static index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_index_buffer")]
		[return: NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")]
		public static BgfxIndexBufferHandle BgfxCreateIndexBuffer([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			BgfxIndexBufferHandle ret = BgfxCreateIndexBufferNative(mem, flags);
			return ret;
		}

		/// <summary>
		/// Create static index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_index_buffer")]
		[return: NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")]
		public static BgfxIndexBufferHandle BgfxCreateIndexBuffer([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] ref BgfxMemory mem, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			fixed (BgfxMemory* pmem = &mem)
			{
				BgfxIndexBufferHandle ret = BgfxCreateIndexBufferNative((BgfxMemory*)pmem, flags);
				return ret;
			}
		}

		/// <summary>
		/// Set static index buffer debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_index_buffer_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetIndexBufferNameNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxIndexBufferHandle, byte*, int, void>)vt[33])(handle, name, len);
			#else
			((delegate* unmanaged[Cdecl]<BgfxIndexBufferHandle, nint, int, void>)vt[33])(handle, (nint)name, len);
			#endif
		}

		/// <summary>
		/// Set static index buffer debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_index_buffer_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetIndexBufferName([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			BgfxSetIndexBufferNameNative(handle, name, len);
		}

		/// <summary>
		/// Set static index buffer debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_index_buffer_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetIndexBufferName([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			fixed (byte* pname = &name)
			{
				BgfxSetIndexBufferNameNative(handle, (byte*)pname, len);
			}
		}

		/// <summary>
		/// Set static index buffer debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_index_buffer_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetIndexBufferName([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			fixed (byte* pname = name)
			{
				BgfxSetIndexBufferNameNative(handle, (byte*)pname, len);
			}
		}

		/// <summary>
		/// Set static index buffer debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_index_buffer_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetIndexBufferName([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] string name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			BgfxSetIndexBufferNameNative(handle, pStr0, len);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Destroy static index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxDestroyIndexBufferNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle handle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxIndexBufferHandle, void>)vt[34])(handle);
			#else
			((delegate* unmanaged[Cdecl]<BgfxIndexBufferHandle, void>)vt[34])(handle);
			#endif
		}

		/// <summary>
		/// Destroy static index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDestroyIndexBuffer([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_index_buffer_handle_t")] BgfxIndexBufferHandle handle)
		{
			BgfxDestroyIndexBufferNative(handle);
		}

		/// <summary>
		/// Create vertex layout.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_vertex_layout")]
		[return: NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")]
		internal static BgfxVertexLayoutHandle BgfxCreateVertexLayoutNative([NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxVertexLayout*, BgfxVertexLayoutHandle>)vt[35])(layout);
			#else
			return (BgfxVertexLayoutHandle)((delegate* unmanaged[Cdecl]<nint, BgfxVertexLayoutHandle>)vt[35])((nint)layout);
			#endif
		}

		/// <summary>
		/// Create vertex layout.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_vertex_layout")]
		[return: NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")]
		public static BgfxVertexLayoutHandle BgfxCreateVertexLayout([NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout)
		{
			BgfxVertexLayoutHandle ret = BgfxCreateVertexLayoutNative(layout);
			return ret;
		}

		/// <summary>
		/// Create vertex layout.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_vertex_layout")]
		[return: NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")]
		public static BgfxVertexLayoutHandle BgfxCreateVertexLayout([NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout)
		{
			fixed (BgfxVertexLayout* playout = &layout)
			{
				BgfxVertexLayoutHandle ret = BgfxCreateVertexLayoutNative((BgfxVertexLayout*)playout);
				return ret;
			}
		}

		/// <summary>
		/// Destroy vertex layout.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_vertex_layout")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxDestroyVertexLayoutNative([NativeName(NativeNameType.Param, "_layoutHandle")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")] BgfxVertexLayoutHandle layoutHandle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxVertexLayoutHandle, void>)vt[36])(layoutHandle);
			#else
			((delegate* unmanaged[Cdecl]<BgfxVertexLayoutHandle, void>)vt[36])(layoutHandle);
			#endif
		}

		/// <summary>
		/// Destroy vertex layout.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_vertex_layout")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDestroyVertexLayout([NativeName(NativeNameType.Param, "_layoutHandle")] [NativeName(NativeNameType.Type, "bgfx_vertex_layout_handle_t")] BgfxVertexLayoutHandle layoutHandle)
		{
			BgfxDestroyVertexLayoutNative(layoutHandle);
		}

		/// <summary>
		/// Create static vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")]
		internal static BgfxVertexBufferHandle BgfxCreateVertexBufferNative([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxMemory*, BgfxVertexLayout*, ushort, BgfxVertexBufferHandle>)vt[37])(mem, layout, flags);
			#else
			return (BgfxVertexBufferHandle)((delegate* unmanaged[Cdecl]<nint, nint, ushort, BgfxVertexBufferHandle>)vt[37])((nint)mem, (nint)layout, flags);
			#endif
		}

		/// <summary>
		/// Create static vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")]
		public static BgfxVertexBufferHandle BgfxCreateVertexBuffer([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			BgfxVertexBufferHandle ret = BgfxCreateVertexBufferNative(mem, layout, flags);
			return ret;
		}

		/// <summary>
		/// Create static vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")]
		public static BgfxVertexBufferHandle BgfxCreateVertexBuffer([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] ref BgfxMemory mem, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			fixed (BgfxMemory* pmem = &mem)
			{
				BgfxVertexBufferHandle ret = BgfxCreateVertexBufferNative((BgfxMemory*)pmem, layout, flags);
				return ret;
			}
		}

		/// <summary>
		/// Create static vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")]
		public static BgfxVertexBufferHandle BgfxCreateVertexBuffer([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			fixed (BgfxVertexLayout* playout = &layout)
			{
				BgfxVertexBufferHandle ret = BgfxCreateVertexBufferNative(mem, (BgfxVertexLayout*)playout, flags);
				return ret;
			}
		}

		/// <summary>
		/// Create static vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")]
		public static BgfxVertexBufferHandle BgfxCreateVertexBuffer([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] ref BgfxMemory mem, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			fixed (BgfxMemory* pmem = &mem)
			{
				fixed (BgfxVertexLayout* playout = &layout)
				{
					BgfxVertexBufferHandle ret = BgfxCreateVertexBufferNative((BgfxMemory*)pmem, (BgfxVertexLayout*)playout, flags);
					return ret;
				}
			}
		}

		/// <summary>
		/// Set static vertex buffer debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_vertex_buffer_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxSetVertexBufferNameNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxVertexBufferHandle, byte*, int, void>)vt[38])(handle, name, len);
			#else
			((delegate* unmanaged[Cdecl]<BgfxVertexBufferHandle, nint, int, void>)vt[38])(handle, (nint)name, len);
			#endif
		}

		/// <summary>
		/// Set static vertex buffer debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_vertex_buffer_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetVertexBufferName([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			BgfxSetVertexBufferNameNative(handle, name, len);
		}

		/// <summary>
		/// Set static vertex buffer debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_vertex_buffer_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetVertexBufferName([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			fixed (byte* pname = &name)
			{
				BgfxSetVertexBufferNameNative(handle, (byte*)pname, len);
			}
		}

		/// <summary>
		/// Set static vertex buffer debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_vertex_buffer_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetVertexBufferName([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			fixed (byte* pname = name)
			{
				BgfxSetVertexBufferNameNative(handle, (byte*)pname, len);
			}
		}

		/// <summary>
		/// Set static vertex buffer debug name.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_set_vertex_buffer_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxSetVertexBufferName([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle, [NativeName(NativeNameType.Param, "_name")] [NativeName(NativeNameType.Type, "const char*")] string name, [NativeName(NativeNameType.Param, "_len")] [NativeName(NativeNameType.Type, "int32_t")] int len)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			BgfxSetVertexBufferNameNative(handle, pStr0, len);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Destroy static vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxDestroyVertexBufferNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxVertexBufferHandle, void>)vt[39])(handle);
			#else
			((delegate* unmanaged[Cdecl]<BgfxVertexBufferHandle, void>)vt[39])(handle);
			#endif
		}

		/// <summary>
		/// Destroy static vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDestroyVertexBuffer([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_vertex_buffer_handle_t")] BgfxVertexBufferHandle handle)
		{
			BgfxDestroyVertexBufferNative(handle);
		}

		/// <summary>
		/// Create empty dynamic index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_dynamic_index_buffer")]
		[return: NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t")]
		internal static BgfxDynamicIndexBufferHandle BgfxCreateDynamicIndexBufferNative([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ushort, BgfxDynamicIndexBufferHandle>)vt[40])(num, flags);
			#else
			return (BgfxDynamicIndexBufferHandle)((delegate* unmanaged[Cdecl]<uint, ushort, BgfxDynamicIndexBufferHandle>)vt[40])(num, flags);
			#endif
		}

		/// <summary>
		/// Create empty dynamic index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_dynamic_index_buffer")]
		[return: NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t")]
		public static BgfxDynamicIndexBufferHandle BgfxCreateDynamicIndexBuffer([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			BgfxDynamicIndexBufferHandle ret = BgfxCreateDynamicIndexBufferNative(num, flags);
			return ret;
		}

		/// <summary>
		/// Create a dynamic index buffer and initialize it.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_dynamic_index_buffer_mem")]
		[return: NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t")]
		internal static BgfxDynamicIndexBufferHandle BgfxCreateDynamicIndexBufferMemNative([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxMemory*, ushort, BgfxDynamicIndexBufferHandle>)vt[41])(mem, flags);
			#else
			return (BgfxDynamicIndexBufferHandle)((delegate* unmanaged[Cdecl]<nint, ushort, BgfxDynamicIndexBufferHandle>)vt[41])((nint)mem, flags);
			#endif
		}

		/// <summary>
		/// Create a dynamic index buffer and initialize it.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_dynamic_index_buffer_mem")]
		[return: NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t")]
		public static BgfxDynamicIndexBufferHandle BgfxCreateDynamicIndexBufferMem([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			BgfxDynamicIndexBufferHandle ret = BgfxCreateDynamicIndexBufferMemNative(mem, flags);
			return ret;
		}

		/// <summary>
		/// Create a dynamic index buffer and initialize it.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_dynamic_index_buffer_mem")]
		[return: NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t")]
		public static BgfxDynamicIndexBufferHandle BgfxCreateDynamicIndexBufferMem([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] ref BgfxMemory mem, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			fixed (BgfxMemory* pmem = &mem)
			{
				BgfxDynamicIndexBufferHandle ret = BgfxCreateDynamicIndexBufferMemNative((BgfxMemory*)pmem, flags);
				return ret;
			}
		}

		/// <summary>
		/// Update dynamic index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_update_dynamic_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxUpdateDynamicIndexBufferNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t")] BgfxDynamicIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_startIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startIndex, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxDynamicIndexBufferHandle, uint, BgfxMemory*, void>)vt[42])(handle, startIndex, mem);
			#else
			((delegate* unmanaged[Cdecl]<BgfxDynamicIndexBufferHandle, uint, nint, void>)vt[42])(handle, startIndex, (nint)mem);
			#endif
		}

		/// <summary>
		/// Update dynamic index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_update_dynamic_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxUpdateDynamicIndexBuffer([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t")] BgfxDynamicIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_startIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startIndex, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem)
		{
			BgfxUpdateDynamicIndexBufferNative(handle, startIndex, mem);
		}

		/// <summary>
		/// Update dynamic index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_update_dynamic_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxUpdateDynamicIndexBuffer([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t")] BgfxDynamicIndexBufferHandle handle, [NativeName(NativeNameType.Param, "_startIndex")] [NativeName(NativeNameType.Type, "uint32_t")] uint startIndex, [NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] ref BgfxMemory mem)
		{
			fixed (BgfxMemory* pmem = &mem)
			{
				BgfxUpdateDynamicIndexBufferNative(handle, startIndex, (BgfxMemory*)pmem);
			}
		}

		/// <summary>
		/// Destroy dynamic index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_dynamic_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BgfxDestroyDynamicIndexBufferNative([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t")] BgfxDynamicIndexBufferHandle handle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<BgfxDynamicIndexBufferHandle, void>)vt[43])(handle);
			#else
			((delegate* unmanaged[Cdecl]<BgfxDynamicIndexBufferHandle, void>)vt[43])(handle);
			#endif
		}

		/// <summary>
		/// Destroy dynamic index buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_destroy_dynamic_index_buffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BgfxDestroyDynamicIndexBuffer([NativeName(NativeNameType.Param, "_handle")] [NativeName(NativeNameType.Type, "bgfx_dynamic_index_buffer_handle_t")] BgfxDynamicIndexBufferHandle handle)
		{
			BgfxDestroyDynamicIndexBufferNative(handle);
		}

		/// <summary>
		/// Create empty dynamic vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")]
		internal static BgfxDynamicVertexBufferHandle BgfxCreateDynamicVertexBufferNative([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, BgfxVertexLayout*, ushort, BgfxDynamicVertexBufferHandle>)vt[44])(num, layout, flags);
			#else
			return (BgfxDynamicVertexBufferHandle)((delegate* unmanaged[Cdecl]<uint, nint, ushort, BgfxDynamicVertexBufferHandle>)vt[44])(num, (nint)layout, flags);
			#endif
		}

		/// <summary>
		/// Create empty dynamic vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")]
		public static BgfxDynamicVertexBufferHandle BgfxCreateDynamicVertexBuffer([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			BgfxDynamicVertexBufferHandle ret = BgfxCreateDynamicVertexBufferNative(num, layout, flags);
			return ret;
		}

		/// <summary>
		/// Create empty dynamic vertex buffer.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_dynamic_vertex_buffer")]
		[return: NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")]
		public static BgfxDynamicVertexBufferHandle BgfxCreateDynamicVertexBuffer([NativeName(NativeNameType.Param, "_num")] [NativeName(NativeNameType.Type, "uint32_t")] uint num, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] ref BgfxVertexLayout layout, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			fixed (BgfxVertexLayout* playout = &layout)
			{
				BgfxDynamicVertexBufferHandle ret = BgfxCreateDynamicVertexBufferNative(num, (BgfxVertexLayout*)playout, flags);
				return ret;
			}
		}

		/// <summary>
		/// Create dynamic vertex buffer and initialize it.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_dynamic_vertex_buffer_mem")]
		[return: NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")]
		internal static BgfxDynamicVertexBufferHandle BgfxCreateDynamicVertexBufferMemNative([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<BgfxMemory*, BgfxVertexLayout*, ushort, BgfxDynamicVertexBufferHandle>)vt[45])(mem, layout, flags);
			#else
			return (BgfxDynamicVertexBufferHandle)((delegate* unmanaged[Cdecl]<nint, nint, ushort, BgfxDynamicVertexBufferHandle>)vt[45])((nint)mem, (nint)layout, flags);
			#endif
		}

		/// <summary>
		/// Create dynamic vertex buffer and initialize it.<br/>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "bgfx_create_dynamic_vertex_buffer_mem")]
		[return: NativeName(NativeNameType.Type, "bgfx_dynamic_vertex_buffer_handle_t")]
		public static BgfxDynamicVertexBufferHandle BgfxCreateDynamicVertexBufferMem([NativeName(NativeNameType.Param, "_mem")] [NativeName(NativeNameType.Type, "const bgfx_memory_t*")] BgfxMemory* mem, [NativeName(NativeNameType.Param, "_layout")] [NativeName(NativeNameType.Type, "const bgfx_vertex_layout_t*")] BgfxVertexLayout* layout, [NativeName(NativeNameType.Param, "_flags")] [NativeName(NativeNameType.Type, "uint16_t")] ushort flags)
		{
			BgfxDynamicVertexBufferHandle ret = BgfxCreateDynamicVertexBufferMemNative(mem, layout, flags);
			return ret;
		}
	}
}
