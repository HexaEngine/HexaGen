// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D11
{

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryProtectionOutput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Output")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_QUERY_OUTPUT")]
		public D3D11AuthenticatedQueryOutput Output;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ProtectionFlags")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_PROTECTION_FLAGS")]
		public D3D11AuthenticatedProtectionFlags ProtectionFlags;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedQueryProtectionOutput(D3D11AuthenticatedQueryOutput output = default, D3D11AuthenticatedProtectionFlags protectionflags = default)
		{
			Output = output;
			ProtectionFlags = protectionflags;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryChannelTypeOutput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Output")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_QUERY_OUTPUT")]
		public D3D11AuthenticatedQueryOutput Output;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ChannelType")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_CHANNEL_TYPE")]
		public D3D11AuthenticatedChannelType ChannelType;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedQueryChannelTypeOutput(D3D11AuthenticatedQueryOutput output = default, D3D11AuthenticatedChannelType channelType = default)
		{
			Output = output;
			ChannelType = channelType;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryDeviceHandleOutput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Output")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_QUERY_OUTPUT")]
		public D3D11AuthenticatedQueryOutput Output;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DeviceHandle")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint DeviceHandle;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedQueryDeviceHandleOutput(D3D11AuthenticatedQueryOutput output = default, nint deviceHandle = default)
		{
			Output = output;
			DeviceHandle = deviceHandle;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryCryptoSessionInput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Input")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_QUERY_INPUT")]
		public D3D11AuthenticatedQueryInput Input;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DecoderHandle")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint DecoderHandle;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedQueryCryptoSessionInput(D3D11AuthenticatedQueryInput input = default, nint decoderHandle = default)
		{
			Input = input;
			DecoderHandle = decoderHandle;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryCryptoSessionOutput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Output")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_QUERY_OUTPUT")]
		public D3D11AuthenticatedQueryOutput Output;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DecoderHandle")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint DecoderHandle;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CryptoSessionHandle")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint CryptoSessionHandle;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DeviceHandle")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint DeviceHandle;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedQueryCryptoSessionOutput(D3D11AuthenticatedQueryOutput output = default, nint decoderHandle = default, nint cryptoSessionHandle = default, nint deviceHandle = default)
		{
			Output = output;
			DecoderHandle = decoderHandle;
			CryptoSessionHandle = cryptoSessionHandle;
			DeviceHandle = deviceHandle;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryRestrictedSharedResourceProcessCountOutput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Output")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_QUERY_OUTPUT")]
		public D3D11AuthenticatedQueryOutput Output;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RestrictedSharedResourceProcessCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint RestrictedSharedResourceProcessCount;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedQueryRestrictedSharedResourceProcessCountOutput(D3D11AuthenticatedQueryOutput output = default, uint restrictedSharedResourceProcessCount = default)
		{
			Output = output;
			RestrictedSharedResourceProcessCount = restrictedSharedResourceProcessCount;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryRestrictedSharedResourceProcessInput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Input")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_QUERY_INPUT")]
		public D3D11AuthenticatedQueryInput Input;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ProcessIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ProcessIndex;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedQueryRestrictedSharedResourceProcessInput(D3D11AuthenticatedQueryInput input = default, uint processIndex = default)
		{
			Input = input;
			ProcessIndex = processIndex;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryRestrictedSharedResourceProcessOutput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Output")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_QUERY_OUTPUT")]
		public D3D11AuthenticatedQueryOutput Output;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ProcessIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ProcessIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ProcessIdentifier")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE")]
		public D3D11AuthenticatedProcessIdentifierType ProcessIdentifier;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ProcessHandle")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint ProcessHandle;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedQueryRestrictedSharedResourceProcessOutput(D3D11AuthenticatedQueryOutput output = default, uint processIndex = default, D3D11AuthenticatedProcessIdentifierType processIdentifier = default, nint processHandle = default)
		{
			Output = output;
			ProcessIndex = processIndex;
			ProcessIdentifier = processIdentifier;
			ProcessHandle = processHandle;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryUnrestrictedProtectedSharedResourceCountOutput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Output")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_QUERY_OUTPUT")]
		public D3D11AuthenticatedQueryOutput Output;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "UnrestrictedProtectedSharedResourceCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint UnrestrictedProtectedSharedResourceCount;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedQueryUnrestrictedProtectedSharedResourceCountOutput(D3D11AuthenticatedQueryOutput output = default, uint unrestrictedProtectedSharedResourceCount = default)
		{
			Output = output;
			UnrestrictedProtectedSharedResourceCount = unrestrictedProtectedSharedResourceCount;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryOutputIdCountInput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Input")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_QUERY_INPUT")]
		public D3D11AuthenticatedQueryInput Input;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DeviceHandle")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint DeviceHandle;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CryptoSessionHandle")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint CryptoSessionHandle;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedQueryOutputIdCountInput(D3D11AuthenticatedQueryInput input = default, nint deviceHandle = default, nint cryptoSessionHandle = default)
		{
			Input = input;
			DeviceHandle = deviceHandle;
			CryptoSessionHandle = cryptoSessionHandle;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryOutputIdCountOutput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Output")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_QUERY_OUTPUT")]
		public D3D11AuthenticatedQueryOutput Output;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DeviceHandle")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint DeviceHandle;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CryptoSessionHandle")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint CryptoSessionHandle;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OutputIDCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint OutputIDCount;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedQueryOutputIdCountOutput(D3D11AuthenticatedQueryOutput output = default, nint deviceHandle = default, nint cryptoSessionHandle = default, uint outputIdCount = default)
		{
			Output = output;
			DeviceHandle = deviceHandle;
			CryptoSessionHandle = cryptoSessionHandle;
			OutputIDCount = outputIdCount;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryOutputIdInput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Input")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_QUERY_INPUT")]
		public D3D11AuthenticatedQueryInput Input;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DeviceHandle")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint DeviceHandle;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CryptoSessionHandle")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint CryptoSessionHandle;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OutputIDIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint OutputIDIndex;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedQueryOutputIdInput(D3D11AuthenticatedQueryInput input = default, nint deviceHandle = default, nint cryptoSessionHandle = default, uint outputIdIndex = default)
		{
			Input = input;
			DeviceHandle = deviceHandle;
			CryptoSessionHandle = cryptoSessionHandle;
			OutputIDIndex = outputIdIndex;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryOutputIdOutput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Output")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_QUERY_OUTPUT")]
		public D3D11AuthenticatedQueryOutput Output;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DeviceHandle")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint DeviceHandle;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CryptoSessionHandle")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint CryptoSessionHandle;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OutputIDIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint OutputIDIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OutputID")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong OutputID;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedQueryOutputIdOutput(D3D11AuthenticatedQueryOutput output = default, nint deviceHandle = default, nint cryptoSessionHandle = default, uint outputIdIndex = default, ulong outputId = default)
		{
			Output = output;
			DeviceHandle = deviceHandle;
			CryptoSessionHandle = cryptoSessionHandle;
			OutputIDIndex = outputIdIndex;
			OutputID = outputId;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryAcessibilityOutput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Output")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_QUERY_OUTPUT")]
		public D3D11AuthenticatedQueryOutput Output;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BusType")]
		[NativeName(NativeNameType.Type, "D3D11_BUS_TYPE")]
		public D3D11BusType BusType;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AccessibleInContiguousBlocks")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int AccessibleInContiguousBlocks;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AccessibleInNonContiguousBlocks")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int AccessibleInNonContiguousBlocks;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedQueryAcessibilityOutput(D3D11AuthenticatedQueryOutput output = default, D3D11BusType busType = default, int accessibleInContiguousBlocks = default, int accessibleInNonContiguousBlocks = default)
		{
			Output = output;
			BusType = busType;
			AccessibleInContiguousBlocks = accessibleInContiguousBlocks;
			AccessibleInNonContiguousBlocks = accessibleInNonContiguousBlocks;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryAccessibilityEncryptionGuidCountOutput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Output")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_QUERY_OUTPUT")]
		public D3D11AuthenticatedQueryOutput Output;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EncryptionGuidCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint EncryptionGuidCount;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedQueryAccessibilityEncryptionGuidCountOutput(D3D11AuthenticatedQueryOutput output = default, uint encryptionGuidCount = default)
		{
			Output = output;
			EncryptionGuidCount = encryptionGuidCount;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryAccessibilityEncryptionGuidInput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Input")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_QUERY_INPUT")]
		public D3D11AuthenticatedQueryInput Input;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EncryptionGuidIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint EncryptionGuidIndex;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedQueryAccessibilityEncryptionGuidInput(D3D11AuthenticatedQueryInput input = default, uint encryptionGuidIndex = default)
		{
			Input = input;
			EncryptionGuidIndex = encryptionGuidIndex;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryAccessibilityEncryptionGuidOutput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Output")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_QUERY_OUTPUT")]
		public D3D11AuthenticatedQueryOutput Output;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EncryptionGuidIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint EncryptionGuidIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EncryptionGuid")]
		[NativeName(NativeNameType.Type, "GUID")]
		public Guid EncryptionGuid;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedQueryAccessibilityEncryptionGuidOutput(D3D11AuthenticatedQueryOutput output = default, uint encryptionGuidIndex = default, Guid encryptionGuid = default)
		{
			Output = output;
			EncryptionGuidIndex = encryptionGuidIndex;
			EncryptionGuid = encryptionGuid;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryCurrentAccessibilityEncryptionOutput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Output")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_QUERY_OUTPUT")]
		public D3D11AuthenticatedQueryOutput Output;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EncryptionGuid")]
		[NativeName(NativeNameType.Type, "GUID")]
		public Guid EncryptionGuid;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedQueryCurrentAccessibilityEncryptionOutput(D3D11AuthenticatedQueryOutput output = default, Guid encryptionGuid = default)
		{
			Output = output;
			EncryptionGuid = encryptionGuid;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_CONFIGURE_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedConfigureInput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "omac")]
		[NativeName(NativeNameType.Type, "D3D11_OMAC")]
		public D3D11Omac Omac;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigureType")]
		[NativeName(NativeNameType.Type, "GUID")]
		public Guid ConfigureType;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "hChannel")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint HChannel;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SequenceNumber")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SequenceNumber;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedConfigureInput(D3D11Omac omac = default, Guid configureType = default, nint hChannel = default, uint sequenceNumber = default)
		{
			Omac = omac;
			ConfigureType = configureType;
			HChannel = hChannel;
			SequenceNumber = sequenceNumber;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedConfigureInitializeInput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Parameters")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_CONFIGURE_INPUT")]
		public D3D11AuthenticatedConfigureInput Parameters;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "StartSequenceQuery")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StartSequenceQuery;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "StartSequenceConfigure")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StartSequenceConfigure;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedConfigureInitializeInput(D3D11AuthenticatedConfigureInput parameters = default, uint startSequenceQuery = default, uint startSequenceConfigure = default)
		{
			Parameters = parameters;
			StartSequenceQuery = startSequenceQuery;
			StartSequenceConfigure = startSequenceConfigure;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedConfigureProtectionInput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Parameters")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_CONFIGURE_INPUT")]
		public D3D11AuthenticatedConfigureInput Parameters;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Protections")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_PROTECTION_FLAGS")]
		public D3D11AuthenticatedProtectionFlags Protections;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedConfigureProtectionInput(D3D11AuthenticatedConfigureInput parameters = default, D3D11AuthenticatedProtectionFlags protections = default)
		{
			Parameters = parameters;
			Protections = protections;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedConfigureCryptoSessionInput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Parameters")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_CONFIGURE_INPUT")]
		public D3D11AuthenticatedConfigureInput Parameters;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DecoderHandle")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint DecoderHandle;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CryptoSessionHandle")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint CryptoSessionHandle;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DeviceHandle")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint DeviceHandle;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedConfigureCryptoSessionInput(D3D11AuthenticatedConfigureInput parameters = default, nint decoderHandle = default, nint cryptoSessionHandle = default, nint deviceHandle = default)
		{
			Parameters = parameters;
			DecoderHandle = decoderHandle;
			CryptoSessionHandle = cryptoSessionHandle;
			DeviceHandle = deviceHandle;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedConfigureSharedResourceInput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Parameters")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_CONFIGURE_INPUT")]
		public D3D11AuthenticatedConfigureInput Parameters;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ProcessType")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE")]
		public D3D11AuthenticatedProcessIdentifierType ProcessType;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ProcessHandle")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint ProcessHandle;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AllowAccess")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int AllowAccess;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedConfigureSharedResourceInput(D3D11AuthenticatedConfigureInput parameters = default, D3D11AuthenticatedProcessIdentifierType processType = default, nint processHandle = default, int allowAccess = default)
		{
			Parameters = parameters;
			ProcessType = processType;
			ProcessHandle = processHandle;
			AllowAccess = allowAccess;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedConfigureAccessibleEncryptionInput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Parameters")]
		[NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_CONFIGURE_INPUT")]
		public D3D11AuthenticatedConfigureInput Parameters;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EncryptionGuid")]
		[NativeName(NativeNameType.Type, "GUID")]
		public Guid EncryptionGuid;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedConfigureAccessibleEncryptionInput(D3D11AuthenticatedConfigureInput parameters = default, Guid encryptionGuid = default)
		{
			Parameters = parameters;
			EncryptionGuid = encryptionGuid;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[Guid("79cf2233-7536-4948-9d36-1e4692dc5760")]
	[NativeName(NativeNameType.StructOrClass, "ID3D11Debug")]
	public partial struct ID3D11Debug : IComObject, IComObject<ID3D11Debug>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("79cf2233-7536-4948-9d36-1e4692dc5760");

		public unsafe ID3D11Debug (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, Guid*, void**, int>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "AddRef")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint AddRef() 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Release")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint Release() 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetFeatureMask")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetFeatureMask([NativeName(NativeNameType.Param, "Mask")] [NativeName(NativeNameType.Type, "UINT")] uint mask) 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, uint, int>)(LpVtbl[3]))(ptr, mask);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetFeatureMask")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetFeatureMask() 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, uint>)(LpVtbl[4]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetPresentPerRenderOpDelay")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetPresentPerRenderOpDelay([NativeName(NativeNameType.Param, "Milliseconds")] [NativeName(NativeNameType.Type, "UINT")] uint milliseconds) 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, uint, int>)(LpVtbl[5]))(ptr, milliseconds);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetPresentPerRenderOpDelay")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetPresentPerRenderOpDelay() 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, uint>)(LpVtbl[6]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetSwapChain")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetSwapChain([NativeName(NativeNameType.Param, "pSwapChain")] [NativeName(NativeNameType.Type, "IDXGISwapChain*")] IDXGISwapChain* pSwapChain) 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, IDXGISwapChain*, int>)(LpVtbl[7]))(ptr, pSwapChain);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetSwapChain")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetSwapChain([NativeName(NativeNameType.Param, "pSwapChain")] [NativeName(NativeNameType.Type, "IDXGISwapChain*")] ref IDXGISwapChain pSwapChain) 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGISwapChain* ppSwapChain = &pSwapChain)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, IDXGISwapChain*, int>)(LpVtbl[7]))(ptr, (IDXGISwapChain*)ppSwapChain);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetSwapChain")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetSwapChain([NativeName(NativeNameType.Param, "pSwapChain")] [NativeName(NativeNameType.Type, "IDXGISwapChain*")] ComPtr<IDXGISwapChain> pSwapChain) 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, IDXGISwapChain*, int>)(LpVtbl[7]))(ptr, (IDXGISwapChain*)pSwapChain.Handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetSwapChain")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetSwapChain([NativeName(NativeNameType.Param, "ppSwapChain")] [NativeName(NativeNameType.Type, "IDXGISwapChain**")] IDXGISwapChain** ppSwapChain) 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, IDXGISwapChain**, int>)(LpVtbl[8]))(ptr, ppSwapChain);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetSwapChain")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetSwapChain([NativeName(NativeNameType.Param, "ppSwapChain")] [NativeName(NativeNameType.Type, "IDXGISwapChain**")] ref IDXGISwapChain* ppSwapChain) 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, IDXGISwapChain**, int>)(LpVtbl[8]))(ptr, (IDXGISwapChain**)pppSwapChain);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetSwapChain")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetSwapChain([NativeName(NativeNameType.Param, "ppSwapChain")] [NativeName(NativeNameType.Type, "IDXGISwapChain**")] out ComPtr<IDXGISwapChain> ppSwapChain) 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppSwapChain = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, IDXGISwapChain**, int>)(LpVtbl[8]))(ptr, (IDXGISwapChain**)ppSwapChain.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ValidateContext")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int ValidateContext([NativeName(NativeNameType.Param, "pContext")] [NativeName(NativeNameType.Type, "ID3D11DeviceContext*")] ID3D11DeviceContext* pContext) 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, ID3D11DeviceContext*, int>)(LpVtbl[9]))(ptr, pContext);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ValidateContext")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int ValidateContext([NativeName(NativeNameType.Param, "pContext")] [NativeName(NativeNameType.Type, "ID3D11DeviceContext*")] ref ID3D11DeviceContext pContext) 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceContext* ppContext = &pContext)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, ID3D11DeviceContext*, int>)(LpVtbl[9]))(ptr, (ID3D11DeviceContext*)ppContext);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ValidateContext")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int ValidateContext([NativeName(NativeNameType.Param, "pContext")] [NativeName(NativeNameType.Type, "ID3D11DeviceContext*")] ComPtr<ID3D11DeviceContext> pContext) 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, ID3D11DeviceContext*, int>)(LpVtbl[9]))(ptr, (ID3D11DeviceContext*)pContext.Handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ReportLiveDeviceObjects")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int ReportLiveDeviceObjects([NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D11_RLDO_FLAGS")] D3D11RldoFlags flags) 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, D3D11RldoFlags, int>)(LpVtbl[10]))(ptr, flags);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ValidateContextForDispatch")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int ValidateContextForDispatch([NativeName(NativeNameType.Param, "pContext")] [NativeName(NativeNameType.Type, "ID3D11DeviceContext*")] ID3D11DeviceContext* pContext) 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, ID3D11DeviceContext*, int>)(LpVtbl[11]))(ptr, pContext);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ValidateContextForDispatch")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int ValidateContextForDispatch([NativeName(NativeNameType.Param, "pContext")] [NativeName(NativeNameType.Type, "ID3D11DeviceContext*")] ref ID3D11DeviceContext pContext) 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11DeviceContext* ppContext = &pContext)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, ID3D11DeviceContext*, int>)(LpVtbl[11]))(ptr, (ID3D11DeviceContext*)ppContext);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ValidateContextForDispatch")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int ValidateContextForDispatch([NativeName(NativeNameType.Param, "pContext")] [NativeName(NativeNameType.Type, "ID3D11DeviceContext*")] ComPtr<ID3D11DeviceContext> pContext) 
		{
			ID3D11Debug* ptr = (ID3D11Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11Debug*, ID3D11DeviceContext*, int>)(LpVtbl[11]))(ptr, (ID3D11DeviceContext*)pContext.Handle);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11Debug value)
		{
			return Unsafe.As<ID3D11Debug, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[Guid("1ef337e3-58e7-4f83-a692-db221f5ed47e")]
	[NativeName(NativeNameType.StructOrClass, "ID3D11SwitchToRef")]
	public partial struct ID3D11SwitchToRef : IComObject, IComObject<ID3D11SwitchToRef>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("1ef337e3-58e7-4f83-a692-db221f5ed47e");

		public unsafe ID3D11SwitchToRef (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11SwitchToRef* ptr = (ID3D11SwitchToRef*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11SwitchToRef*, Guid*, void**, int>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11SwitchToRef* ptr = (ID3D11SwitchToRef*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11SwitchToRef*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11SwitchToRef* ptr = (ID3D11SwitchToRef*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11SwitchToRef*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11SwitchToRef* ptr = (ID3D11SwitchToRef*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11SwitchToRef*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "AddRef")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint AddRef() 
		{
			ID3D11SwitchToRef* ptr = (ID3D11SwitchToRef*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11SwitchToRef*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Release")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint Release() 
		{
			ID3D11SwitchToRef* ptr = (ID3D11SwitchToRef*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11SwitchToRef*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetUseRef")]
		[return: NativeName(NativeNameType.Type, "BOOL")]
		public readonly unsafe int SetUseRef([NativeName(NativeNameType.Param, "UseRef")] [NativeName(NativeNameType.Type, "BOOL")] int useRef) 
		{
			ID3D11SwitchToRef* ptr = (ID3D11SwitchToRef*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11SwitchToRef*, int, int>)(LpVtbl[3]))(ptr, useRef);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetUseRef")]
		[return: NativeName(NativeNameType.Type, "BOOL")]
		public readonly unsafe int GetUseRef() 
		{
			ID3D11SwitchToRef* ptr = (ID3D11SwitchToRef*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11SwitchToRef*, int>)(LpVtbl[4]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11SwitchToRef value)
		{
			return Unsafe.As<ID3D11SwitchToRef, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[Guid("1911c771-1587-413e-a7e0-fb26c3de0268")]
	[NativeName(NativeNameType.StructOrClass, "ID3D11TracingDevice")]
	public partial struct ID3D11TracingDevice : IComObject, IComObject<ID3D11TracingDevice>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("1911c771-1587-413e-a7e0-fb26c3de0268");

		public unsafe ID3D11TracingDevice (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11TracingDevice* ptr = (ID3D11TracingDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, Guid*, void**, int>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11TracingDevice* ptr = (ID3D11TracingDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11TracingDevice* ptr = (ID3D11TracingDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11TracingDevice* ptr = (ID3D11TracingDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "AddRef")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint AddRef() 
		{
			ID3D11TracingDevice* ptr = (ID3D11TracingDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Release")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint Release() 
		{
			ID3D11TracingDevice* ptr = (ID3D11TracingDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetShaderTrackingOptionsByType")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetShaderTrackingOptionsByType([NativeName(NativeNameType.Param, "ResourceTypeFlags")] [NativeName(NativeNameType.Type, "UINT")] uint resourceTypeFlags, [NativeName(NativeNameType.Param, "Options")] [NativeName(NativeNameType.Type, "UINT")] uint options) 
		{
			ID3D11TracingDevice* ptr = (ID3D11TracingDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, uint, uint, int>)(LpVtbl[3]))(ptr, resourceTypeFlags, options);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetShaderTrackingOptions")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetShaderTrackingOptions([NativeName(NativeNameType.Param, "pShader")] [NativeName(NativeNameType.Type, "IUnknown*")] IUnknown* pShader, [NativeName(NativeNameType.Param, "Options")] [NativeName(NativeNameType.Type, "UINT")] uint options) 
		{
			ID3D11TracingDevice* ptr = (ID3D11TracingDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, IUnknown*, uint, int>)(LpVtbl[4]))(ptr, pShader, options);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetShaderTrackingOptions")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetShaderTrackingOptions([NativeName(NativeNameType.Param, "pShader")] [NativeName(NativeNameType.Type, "IUnknown*")] ref IUnknown pShader, [NativeName(NativeNameType.Param, "Options")] [NativeName(NativeNameType.Type, "UINT")] uint options) 
		{
			ID3D11TracingDevice* ptr = (ID3D11TracingDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppShader = &pShader)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, IUnknown*, uint, int>)(LpVtbl[4]))(ptr, (IUnknown*)ppShader, options);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetShaderTrackingOptions")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetShaderTrackingOptions([NativeName(NativeNameType.Param, "pShader")] [NativeName(NativeNameType.Type, "IUnknown*")] ComPtr<IUnknown> pShader, [NativeName(NativeNameType.Param, "Options")] [NativeName(NativeNameType.Type, "UINT")] uint options) 
		{
			ID3D11TracingDevice* ptr = (ID3D11TracingDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11TracingDevice*, IUnknown*, uint, int>)(LpVtbl[4]))(ptr, (IUnknown*)pShader.Handle, options);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11TracingDevice value)
		{
			return Unsafe.As<ID3D11TracingDevice, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[Guid("193dacdf-0db2-4c05-a55c-ef06cac56fd9")]
	[NativeName(NativeNameType.StructOrClass, "ID3D11RefTrackingOptions")]
	public partial struct ID3D11RefTrackingOptions : IComObject, IComObject<ID3D11RefTrackingOptions>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("193dacdf-0db2-4c05-a55c-ef06cac56fd9");

		public unsafe ID3D11RefTrackingOptions (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11RefTrackingOptions* ptr = (ID3D11RefTrackingOptions*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11RefTrackingOptions*, Guid*, void**, int>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11RefTrackingOptions* ptr = (ID3D11RefTrackingOptions*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11RefTrackingOptions*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11RefTrackingOptions* ptr = (ID3D11RefTrackingOptions*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11RefTrackingOptions*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11RefTrackingOptions* ptr = (ID3D11RefTrackingOptions*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11RefTrackingOptions*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "AddRef")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint AddRef() 
		{
			ID3D11RefTrackingOptions* ptr = (ID3D11RefTrackingOptions*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11RefTrackingOptions*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Release")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint Release() 
		{
			ID3D11RefTrackingOptions* ptr = (ID3D11RefTrackingOptions*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11RefTrackingOptions*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetTrackingOptions")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetTrackingOptions([NativeName(NativeNameType.Param, "uOptions")] [NativeName(NativeNameType.Type, "UINT")] uint uOptions) 
		{
			ID3D11RefTrackingOptions* ptr = (ID3D11RefTrackingOptions*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11RefTrackingOptions*, uint, int>)(LpVtbl[3]))(ptr, uOptions);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11RefTrackingOptions value)
		{
			return Unsafe.As<ID3D11RefTrackingOptions, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[Guid("03916615-c644-418c-9bf4-75db5be63ca0")]
	[NativeName(NativeNameType.StructOrClass, "ID3D11RefDefaultTrackingOptions")]
	public partial struct ID3D11RefDefaultTrackingOptions : IComObject, IComObject<ID3D11RefDefaultTrackingOptions>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("03916615-c644-418c-9bf4-75db5be63ca0");

		public unsafe ID3D11RefDefaultTrackingOptions (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11RefDefaultTrackingOptions* ptr = (ID3D11RefDefaultTrackingOptions*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11RefDefaultTrackingOptions*, Guid*, void**, int>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11RefDefaultTrackingOptions* ptr = (ID3D11RefDefaultTrackingOptions*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11RefDefaultTrackingOptions*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11RefDefaultTrackingOptions* ptr = (ID3D11RefDefaultTrackingOptions*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11RefDefaultTrackingOptions*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11RefDefaultTrackingOptions* ptr = (ID3D11RefDefaultTrackingOptions*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11RefDefaultTrackingOptions*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "AddRef")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint AddRef() 
		{
			ID3D11RefDefaultTrackingOptions* ptr = (ID3D11RefDefaultTrackingOptions*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11RefDefaultTrackingOptions*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Release")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint Release() 
		{
			ID3D11RefDefaultTrackingOptions* ptr = (ID3D11RefDefaultTrackingOptions*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11RefDefaultTrackingOptions*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetTrackingOptions")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetTrackingOptions([NativeName(NativeNameType.Param, "ResourceTypeFlags")] [NativeName(NativeNameType.Type, "UINT")] uint resourceTypeFlags, [NativeName(NativeNameType.Param, "Options")] [NativeName(NativeNameType.Type, "UINT")] uint options) 
		{
			ID3D11RefDefaultTrackingOptions* ptr = (ID3D11RefDefaultTrackingOptions*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11RefDefaultTrackingOptions*, uint, uint, int>)(LpVtbl[3]))(ptr, resourceTypeFlags, options);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11RefDefaultTrackingOptions value)
		{
			return Unsafe.As<ID3D11RefDefaultTrackingOptions, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[Guid("6543dbb6-1b48-42f5-ab82-e97ec74326f6")]
	[NativeName(NativeNameType.StructOrClass, "ID3D11InfoQueue")]
	public partial struct ID3D11InfoQueue : IComObject, IComObject<ID3D11InfoQueue>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("6543dbb6-1b48-42f5-ab82-e97ec74326f6");

		public unsafe ID3D11InfoQueue (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, Guid*, void**, int>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "AddRef")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint AddRef() 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Release")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint Release() 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetMessageCountLimit")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetMessageCountLimit([NativeName(NativeNameType.Param, "MessageCountLimit")] [NativeName(NativeNameType.Type, "UINT64")] ulong messageCountLimit) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong, int>)(LpVtbl[3]))(ptr, messageCountLimit);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ClearStoredMessages")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearStoredMessages() 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, void>)(LpVtbl[4]))(ptr);
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMessageA")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetMessageA([NativeName(NativeNameType.Param, "MessageIndex")] [NativeName(NativeNameType.Type, "UINT64")] ulong messageIndex, [NativeName(NativeNameType.Param, "pMessage")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE*")] D3D11Message* pMessage, [NativeName(NativeNameType.Param, "pMessageByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pMessageByteLength) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong, D3D11Message*, nuint*, int>)(LpVtbl[5]))(ptr, messageIndex, pMessage, pMessageByteLength);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMessageA")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetMessageA([NativeName(NativeNameType.Param, "MessageIndex")] [NativeName(NativeNameType.Type, "UINT64")] ulong messageIndex, [NativeName(NativeNameType.Param, "pMessage")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE*")] ref D3D11Message pMessage, [NativeName(NativeNameType.Param, "pMessageByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pMessageByteLength) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Message* ppMessage = &pMessage)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong, D3D11Message*, nuint*, int>)(LpVtbl[5]))(ptr, messageIndex, (D3D11Message*)ppMessage, pMessageByteLength);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMessageA")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetMessageA([NativeName(NativeNameType.Param, "MessageIndex")] [NativeName(NativeNameType.Type, "UINT64")] ulong messageIndex, [NativeName(NativeNameType.Param, "pMessage")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE*")] D3D11Message* pMessage, [NativeName(NativeNameType.Param, "pMessageByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pMessageByteLength) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nuint* ppMessageByteLength = &pMessageByteLength)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong, D3D11Message*, nuint*, int>)(LpVtbl[5]))(ptr, messageIndex, pMessage, (nuint*)ppMessageByteLength);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMessageA")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetMessageA([NativeName(NativeNameType.Param, "MessageIndex")] [NativeName(NativeNameType.Type, "UINT64")] ulong messageIndex, [NativeName(NativeNameType.Param, "pMessage")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE*")] ref D3D11Message pMessage, [NativeName(NativeNameType.Param, "pMessageByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pMessageByteLength) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11Message* ppMessage = &pMessage)
			{
				fixed (nuint* ppMessageByteLength = &pMessageByteLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong, D3D11Message*, nuint*, int>)(LpVtbl[5]))(ptr, messageIndex, (D3D11Message*)ppMessage, (nuint*)ppMessageByteLength);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetNumMessagesAllowedByStorageFilter")]
		[return: NativeName(NativeNameType.Type, "UINT64")]
		public readonly unsafe ulong GetNumMessagesAllowedByStorageFilter() 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong>)(LpVtbl[6]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetNumMessagesDeniedByStorageFilter")]
		[return: NativeName(NativeNameType.Type, "UINT64")]
		public readonly unsafe ulong GetNumMessagesDeniedByStorageFilter() 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong>)(LpVtbl[7]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetNumStoredMessages")]
		[return: NativeName(NativeNameType.Type, "UINT64")]
		public readonly unsafe ulong GetNumStoredMessages() 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong>)(LpVtbl[8]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetNumStoredMessagesAllowedByRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "UINT64")]
		public readonly unsafe ulong GetNumStoredMessagesAllowedByRetrievalFilter() 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong>)(LpVtbl[9]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetNumMessagesDiscardedByMessageCountLimit")]
		[return: NativeName(NativeNameType.Type, "UINT64")]
		public readonly unsafe ulong GetNumMessagesDiscardedByMessageCountLimit() 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong>)(LpVtbl[10]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMessageCountLimit")]
		[return: NativeName(NativeNameType.Type, "UINT64")]
		public readonly unsafe ulong GetMessageCountLimit() 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, ulong>)(LpVtbl[11]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "AddStorageFilterEntries")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int AddStorageFilterEntries([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] D3D11InfoQueueFilter* pFilter) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, int>)(LpVtbl[12]))(ptr, pFilter);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "AddStorageFilterEntries")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int AddStorageFilterEntries([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] ref D3D11InfoQueueFilter pFilter) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, int>)(LpVtbl[12]))(ptr, (D3D11InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetStorageFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] D3D11InfoQueueFilter* pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pFilterByteLength) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, int>)(LpVtbl[13]))(ptr, pFilter, pFilterByteLength);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetStorageFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] ref D3D11InfoQueueFilter pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pFilterByteLength) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, int>)(LpVtbl[13]))(ptr, (D3D11InfoQueueFilter*)ppFilter, pFilterByteLength);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetStorageFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] D3D11InfoQueueFilter* pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pFilterByteLength) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nuint* ppFilterByteLength = &pFilterByteLength)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, int>)(LpVtbl[13]))(ptr, pFilter, (nuint*)ppFilterByteLength);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetStorageFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] ref D3D11InfoQueueFilter pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pFilterByteLength) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				fixed (nuint* ppFilterByteLength = &pFilterByteLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, int>)(LpVtbl[13]))(ptr, (D3D11InfoQueueFilter*)ppFilter, (nuint*)ppFilterByteLength);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ClearStorageFilter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearStorageFilter() 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, void>)(LpVtbl[14]))(ptr);
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "PushEmptyStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int PushEmptyStorageFilter() 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, int>)(LpVtbl[15]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "PushCopyOfStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int PushCopyOfStorageFilter() 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, int>)(LpVtbl[16]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "PushStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int PushStorageFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] D3D11InfoQueueFilter* pFilter) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, int>)(LpVtbl[17]))(ptr, pFilter);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "PushStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int PushStorageFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] ref D3D11InfoQueueFilter pFilter) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, int>)(LpVtbl[17]))(ptr, (D3D11InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "PopStorageFilter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void PopStorageFilter() 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, void>)(LpVtbl[18]))(ptr);
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetStorageFilterStackSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetStorageFilterStackSize() 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, uint>)(LpVtbl[19]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "AddRetrievalFilterEntries")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int AddRetrievalFilterEntries([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] D3D11InfoQueueFilter* pFilter) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, int>)(LpVtbl[20]))(ptr, pFilter);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "AddRetrievalFilterEntries")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int AddRetrievalFilterEntries([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] ref D3D11InfoQueueFilter pFilter) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, int>)(LpVtbl[20]))(ptr, (D3D11InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetRetrievalFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] D3D11InfoQueueFilter* pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pFilterByteLength) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, int>)(LpVtbl[21]))(ptr, pFilter, pFilterByteLength);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetRetrievalFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] ref D3D11InfoQueueFilter pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pFilterByteLength) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, int>)(LpVtbl[21]))(ptr, (D3D11InfoQueueFilter*)ppFilter, pFilterByteLength);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetRetrievalFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] D3D11InfoQueueFilter* pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pFilterByteLength) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nuint* ppFilterByteLength = &pFilterByteLength)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, int>)(LpVtbl[21]))(ptr, pFilter, (nuint*)ppFilterByteLength);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetRetrievalFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] ref D3D11InfoQueueFilter pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pFilterByteLength) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				fixed (nuint* ppFilterByteLength = &pFilterByteLength)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, nuint*, int>)(LpVtbl[21]))(ptr, (D3D11InfoQueueFilter*)ppFilter, (nuint*)ppFilterByteLength);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ClearRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearRetrievalFilter() 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, void>)(LpVtbl[22]))(ptr);
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "PushEmptyRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int PushEmptyRetrievalFilter() 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, int>)(LpVtbl[23]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "PushCopyOfRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int PushCopyOfRetrievalFilter() 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, int>)(LpVtbl[24]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "PushRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int PushRetrievalFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] D3D11InfoQueueFilter* pFilter) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, int>)(LpVtbl[25]))(ptr, pFilter);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "PushRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int PushRetrievalFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER*")] ref D3D11InfoQueueFilter pFilter) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11InfoQueueFilter* ppFilter = &pFilter)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11InfoQueueFilter*, int>)(LpVtbl[25]))(ptr, (D3D11InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "PopRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void PopRetrievalFilter() 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, void>)(LpVtbl[26]))(ptr);
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetRetrievalFilterStackSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetRetrievalFilterStackSize() 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, uint>)(LpVtbl[27]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "AddMessage")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int AddMessage([NativeName(NativeNameType.Param, "Category")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_CATEGORY")] D3D11MessageCategory category, [NativeName(NativeNameType.Param, "Severity")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_SEVERITY")] D3D11MessageSeverity severity, [NativeName(NativeNameType.Param, "ID")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_ID")] D3D11MessageId id, [NativeName(NativeNameType.Param, "pDescription")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pDescription) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageCategory, D3D11MessageSeverity, D3D11MessageId, byte*, int>)(LpVtbl[28]))(ptr, category, severity, id, pDescription);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "AddApplicationMessage")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int AddApplicationMessage([NativeName(NativeNameType.Param, "Severity")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_SEVERITY")] D3D11MessageSeverity severity, [NativeName(NativeNameType.Param, "pDescription")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pDescription) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageSeverity, byte*, int>)(LpVtbl[29]))(ptr, severity, pDescription);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetBreakOnCategory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetBreakOnCategory([NativeName(NativeNameType.Param, "Category")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_CATEGORY")] D3D11MessageCategory category, [NativeName(NativeNameType.Param, "bEnable")] [NativeName(NativeNameType.Type, "BOOL")] int bEnable) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageCategory, int, int>)(LpVtbl[30]))(ptr, category, bEnable);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetBreakOnSeverity")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetBreakOnSeverity([NativeName(NativeNameType.Param, "Severity")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_SEVERITY")] D3D11MessageSeverity severity, [NativeName(NativeNameType.Param, "bEnable")] [NativeName(NativeNameType.Type, "BOOL")] int bEnable) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageSeverity, int, int>)(LpVtbl[31]))(ptr, severity, bEnable);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetBreakOnID")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetBreakOnID([NativeName(NativeNameType.Param, "ID")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_ID")] D3D11MessageId id, [NativeName(NativeNameType.Param, "bEnable")] [NativeName(NativeNameType.Type, "BOOL")] int bEnable) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageId, int, int>)(LpVtbl[32]))(ptr, id, bEnable);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetBreakOnCategory")]
		[return: NativeName(NativeNameType.Type, "BOOL")]
		public readonly unsafe int GetBreakOnCategory([NativeName(NativeNameType.Param, "Category")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_CATEGORY")] D3D11MessageCategory category) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageCategory, int>)(LpVtbl[33]))(ptr, category);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetBreakOnSeverity")]
		[return: NativeName(NativeNameType.Type, "BOOL")]
		public readonly unsafe int GetBreakOnSeverity([NativeName(NativeNameType.Param, "Severity")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_SEVERITY")] D3D11MessageSeverity severity) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageSeverity, int>)(LpVtbl[34]))(ptr, severity);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetBreakOnID")]
		[return: NativeName(NativeNameType.Type, "BOOL")]
		public readonly unsafe int GetBreakOnID([NativeName(NativeNameType.Param, "ID")] [NativeName(NativeNameType.Type, "D3D11_MESSAGE_ID")] D3D11MessageId id) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, D3D11MessageId, int>)(LpVtbl[35]))(ptr, id);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetMuteDebugOutput")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetMuteDebugOutput([NativeName(NativeNameType.Param, "bMute")] [NativeName(NativeNameType.Type, "BOOL")] int bMute) 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, int, void>)(LpVtbl[36]))(ptr, bMute);
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMuteDebugOutput")]
		[return: NativeName(NativeNameType.Type, "BOOL")]
		public readonly unsafe int GetMuteDebugOutput() 
		{
			ID3D11InfoQueue* ptr = (ID3D11InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11InfoQueue*, int>)(LpVtbl[37]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11InfoQueue value)
		{
			return Unsafe.As<ID3D11InfoQueue, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_MESSAGE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Message
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Category")]
		[NativeName(NativeNameType.Type, "D3D11_MESSAGE_CATEGORY")]
		public D3D11MessageCategory Category;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Severity")]
		[NativeName(NativeNameType.Type, "D3D11_MESSAGE_SEVERITY")]
		public D3D11MessageSeverity Severity;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "D3D11_MESSAGE_ID")]
		public D3D11MessageId ID;

		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pDescription")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* PDescription;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DescriptionByteLength")]
		[NativeName(NativeNameType.Type, "SIZE_T")]
		public nuint DescriptionByteLength;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11Message(D3D11MessageCategory category = default, D3D11MessageSeverity severity = default, D3D11MessageId id = default, byte* pDescription = default, nuint descriptionByteLength = default)
		{
			Category = category;
			Severity = severity;
			ID = id;
			PDescription = pDescription;
			DescriptionByteLength = descriptionByteLength;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_INFO_QUEUE_FILTER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11InfoQueueFilter
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AllowList")]
		[NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER_DESC")]
		public D3D11InfoQueueFilterDesc AllowList;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DenyList")]
		[NativeName(NativeNameType.Type, "D3D11_INFO_QUEUE_FILTER_DESC")]
		public D3D11InfoQueueFilterDesc DenyList;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11InfoQueueFilter(D3D11InfoQueueFilterDesc allowList = default, D3D11InfoQueueFilterDesc denyList = default)
		{
			AllowList = allowList;
			DenyList = denyList;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_INFO_QUEUE_FILTER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11InfoQueueFilterDesc
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NumCategories")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumCategories;

		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pCategoryList")]
		[NativeName(NativeNameType.Type, "D3D11_MESSAGE_CATEGORY*")]
		public unsafe D3D11MessageCategory* PCategoryList;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NumSeverities")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumSeverities;

		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pSeverityList")]
		[NativeName(NativeNameType.Type, "D3D11_MESSAGE_SEVERITY*")]
		public unsafe D3D11MessageSeverity* PSeverityList;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NumIDs")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumIDs;

		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pIDList")]
		[NativeName(NativeNameType.Type, "D3D11_MESSAGE_ID*")]
		public unsafe D3D11MessageId* PIDList;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11InfoQueueFilterDesc(uint numCategories = default, D3D11MessageCategory* pCategoryList = default, uint numSeverities = default, D3D11MessageSeverity* pSeverityList = default, uint numIDs = default, D3D11MessageId* pIDList = default)
		{
			NumCategories = numCategories;
			PCategoryList = pCategoryList;
			NumSeverities = numSeverities;
			PSeverityList = pSeverityList;
			NumIDs = numIDs;
			PIDList = pIDList;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "_D3D11_SIGNATURE_PARAMETER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11SignatureParameterDesc
	{
		/// <summary>
		/// Name of the semantic<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SemanticName")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* SemanticName;

		/// <summary>
		/// Index of the semantic<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SemanticIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SemanticIndex;

		/// <summary>
		/// Number of member variables<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Register")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Register;

		/// <summary>
		/// A predefined system value, or D3D_NAME_UNDEFINED if not applicable<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SystemValueType")]
		[NativeName(NativeNameType.Type, "D3D_NAME")]
		public D3DName SystemValueType;

		/// <summary>
		/// Scalar type (e.g. uint, float, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ComponentType")]
		[NativeName(NativeNameType.Type, "D3D_REGISTER_COMPONENT_TYPE")]
		public D3DRegisterComponentType ComponentType;

		/// <summary>
		/// Mask to indicate which components of the register<br/>
		/// are used (combination of D3D10_COMPONENT_MASK values)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Mask")]
		[NativeName(NativeNameType.Type, "BYTE")]
		public byte Mask;

		/// <summary>
		/// Mask to indicate whether a given component is <br/>
		/// never written (if this is an output signature) or<br/>
		/// always read (if this is an input signature).<br/>
		/// (combination of D3D_MASK_* values)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ReadWriteMask")]
		[NativeName(NativeNameType.Type, "BYTE")]
		public byte ReadWriteMask;

		/// <summary>
		/// Stream index<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Stream")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Stream;

		/// <summary>
		/// Minimum desired interpolation precision<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MinPrecision")]
		[NativeName(NativeNameType.Type, "D3D_MIN_PRECISION")]
		public D3DMinPrecision MinPrecision;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11SignatureParameterDesc(byte* semanticName = default, uint semanticIndex = default, uint register = default, D3DName systemValueType = default, D3DRegisterComponentType componentType = default, byte mask = default, byte readWriteMask = default, uint stream = default, D3DMinPrecision minPrecision = default)
		{
			SemanticName = semanticName;
			SemanticIndex = semanticIndex;
			Register = register;
			SystemValueType = systemValueType;
			ComponentType = componentType;
			Mask = mask;
			ReadWriteMask = readWriteMask;
			Stream = stream;
			MinPrecision = minPrecision;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "_D3D11_SHADER_BUFFER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11ShaderBufferDesc
	{
		/// <summary>
		/// Name of the constant buffer<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* Name;

		/// <summary>
		/// Indicates type of buffer content<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D_CBUFFER_TYPE")]
		public D3DCbufferType Type;

		/// <summary>
		/// Number of member variables<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Variables")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Variables;

		/// <summary>
		/// Size of CB (in bytes)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Size;

		/// <summary>
		/// Buffer description flags<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "uFlags")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint UFlags;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11ShaderBufferDesc(byte* name = default, D3DCbufferType type = default, uint variables = default, uint size = default, uint uFlags = default)
		{
			Name = name;
			Type = type;
			Variables = variables;
			Size = size;
			UFlags = uFlags;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "_D3D11_SHADER_VARIABLE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11ShaderVariableDesc
	{
		/// <summary>
		/// Name of the variable<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* Name;

		/// <summary>
		/// Offset in constant buffer's backing store<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "StartOffset")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StartOffset;

		/// <summary>
		/// Size of variable (in bytes)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Size;

		/// <summary>
		/// Variable flags<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "uFlags")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint UFlags;

		/// <summary>
		/// Raw pointer to default value<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DefaultValue")]
		[NativeName(NativeNameType.Type, "LPVOID")]
		public unsafe void* DefaultValue;

		/// <summary>
		/// First texture index (or -1 if no textures used)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "StartTexture")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StartTexture;

		/// <summary>
		/// Number of texture slots possibly used.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureSize;

		/// <summary>
		/// First sampler index (or -1 if no textures used)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "StartSampler")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StartSampler;

		/// <summary>
		/// Number of sampler slots possibly used.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SamplerSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SamplerSize;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11ShaderVariableDesc(byte* name = default, uint startOffset = default, uint size = default, uint uFlags = default, void* defaultValue = default, uint startTexture = default, uint textureSize = default, uint startSampler = default, uint samplerSize = default)
		{
			Name = name;
			StartOffset = startOffset;
			Size = size;
			UFlags = uFlags;
			DefaultValue = defaultValue;
			StartTexture = startTexture;
			TextureSize = textureSize;
			StartSampler = startSampler;
			SamplerSize = samplerSize;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "_D3D11_SHADER_TYPE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11ShaderTypeDesc
	{
		/// <summary>
		/// Variable class (e.g. object, matrix, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Class")]
		[NativeName(NativeNameType.Type, "D3D_SHADER_VARIABLE_CLASS")]
		public D3DShaderVariableClass Class;

		/// <summary>
		/// Variable type (e.g. float, sampler, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D_SHADER_VARIABLE_TYPE")]
		public D3DShaderVariableType Type;

		/// <summary>
		/// Number of rows (for matrices, 1 for other numeric, 0 if not applicable)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Rows")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Rows;

		/// <summary>
		/// Number of columns (for vectors <br/>
		/// &<br/>
		/// matrices, 1 for other numeric, 0 if not applicable)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Columns")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Columns;

		/// <summary>
		/// Number of elements (0 if not an array)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Elements")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Elements;

		/// <summary>
		/// Number of members (0 if not a structure)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Members")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Members;

		/// <summary>
		/// Offset from the start of structure (0 if not a structure member)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Offset")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Offset;

		/// <summary>
		/// Name of type, can be NULL<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* Name;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11ShaderTypeDesc(D3DShaderVariableClass @class = default, D3DShaderVariableType type = default, uint rows = default, uint columns = default, uint elements = default, uint members = default, uint offset = default, byte* name = default)
		{
			Class = @class;
			Type = type;
			Rows = rows;
			Columns = columns;
			Elements = elements;
			Members = members;
			Offset = offset;
			Name = name;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "_D3D11_SHADER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11ShaderDesc
	{
		/// <summary>
		/// Shader version<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Version")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Version;

		/// <summary>
		/// Creator string<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Creator")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* Creator;

		/// <summary>
		/// Shader compilation/parse flags<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Flags;

		/// <summary>
		/// Number of constant buffers<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConstantBuffers")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ConstantBuffers;

		/// <summary>
		/// Number of bound resources<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BoundResources")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BoundResources;

		/// <summary>
		/// Number of parameters in the input signature<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InputParameters")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InputParameters;

		/// <summary>
		/// Number of parameters in the output signature<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OutputParameters")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint OutputParameters;

		/// <summary>
		/// Number of emitted instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InstructionCount;

		/// <summary>
		/// Number of temporary registers used <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TempRegisterCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TempRegisterCount;

		/// <summary>
		/// Number of temporary arrays used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TempArrayCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TempArrayCount;

		/// <summary>
		/// Number of constant defines <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DefCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DefCount;

		/// <summary>
		/// Number of declarations (input + output)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DclCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DclCount;

		/// <summary>
		/// Number of non-categorized texture instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureNormalInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureNormalInstructions;

		/// <summary>
		/// Number of texture load instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureLoadInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureLoadInstructions;

		/// <summary>
		/// Number of texture comparison instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureCompInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureCompInstructions;

		/// <summary>
		/// Number of texture bias instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureBiasInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureBiasInstructions;

		/// <summary>
		/// Number of texture gradient instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureGradientInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureGradientInstructions;

		/// <summary>
		/// Number of floating point arithmetic instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FloatInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FloatInstructionCount;

		/// <summary>
		/// Number of signed integer arithmetic instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IntInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint IntInstructionCount;

		/// <summary>
		/// Number of unsigned integer arithmetic instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "UintInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint UintInstructionCount;

		/// <summary>
		/// Number of static flow control instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "StaticFlowControlCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StaticFlowControlCount;

		/// <summary>
		/// Number of dynamic flow control instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DynamicFlowControlCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DynamicFlowControlCount;

		/// <summary>
		/// Number of macro instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MacroInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MacroInstructionCount;

		/// <summary>
		/// Number of array instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ArrayInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ArrayInstructionCount;

		/// <summary>
		/// Number of cut instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CutInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CutInstructionCount;

		/// <summary>
		/// Number of emit instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "EmitInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint EmitInstructionCount;

		/// <summary>
		/// Geometry shader output topology<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "GSOutputTopology")]
		[NativeName(NativeNameType.Type, "D3D_PRIMITIVE_TOPOLOGY")]
		public D3DPrimitiveTopology GSOutputTopology;

		/// <summary>
		/// Geometry shader maximum output vertex count<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "GSMaxOutputVertexCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint GSMaxOutputVertexCount;

		/// <summary>
		/// GS/HS input primitive<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InputPrimitive")]
		[NativeName(NativeNameType.Type, "D3D_PRIMITIVE")]
		public D3DPrimitive InputPrimitive;

		/// <summary>
		/// Number of parameters in the patch constant signature<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PatchConstantParameters")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PatchConstantParameters;

		/// <summary>
		/// Number of Geometry shader instances<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cGSInstanceCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CGSInstanceCount;

		/// <summary>
		/// Number of control points in the HS->DS stage<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cControlPoints")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CControlPoints;

		/// <summary>
		/// Primitive output by the tessellator<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HSOutputPrimitive")]
		[NativeName(NativeNameType.Type, "D3D_TESSELLATOR_OUTPUT_PRIMITIVE")]
		public D3DTessellatorOutputPrimitive HSOutputPrimitive;

		/// <summary>
		/// Partitioning mode of the tessellator<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HSPartitioning")]
		[NativeName(NativeNameType.Type, "D3D_TESSELLATOR_PARTITIONING")]
		public D3DTessellatorPartitioning HSPartitioning;

		/// <summary>
		/// Domain of the tessellator (quad, tri, isoline)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TessellatorDomain")]
		[NativeName(NativeNameType.Type, "D3D_TESSELLATOR_DOMAIN")]
		public D3DTessellatorDomain TessellatorDomain;

		/// <summary>
		/// Number of barrier instructions in a compute shader<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cBarrierInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CBarrierInstructions;

		/// <summary>
		/// Number of interlocked instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cInterlockedInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CInterlockedInstructions;

		/// <summary>
		/// Number of texture writes<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cTextureStoreInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CTextureStoreInstructions;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11ShaderDesc(uint version = default, byte* creator = default, uint flags = default, uint constantBuffers = default, uint boundResources = default, uint inputParameters = default, uint outputParameters = default, uint instructionCount = default, uint tempRegisterCount = default, uint tempArrayCount = default, uint defCount = default, uint dclCount = default, uint textureNormalInstructions = default, uint textureLoadInstructions = default, uint textureCompInstructions = default, uint textureBiasInstructions = default, uint textureGradientInstructions = default, uint floatInstructionCount = default, uint intInstructionCount = default, uint uintInstructionCount = default, uint staticFlowControlCount = default, uint dynamicFlowControlCount = default, uint macroInstructionCount = default, uint arrayInstructionCount = default, uint cutInstructionCount = default, uint emitInstructionCount = default, D3DPrimitiveTopology gsOutputTopology = default, uint gsMaxOutputVertexCount = default, D3DPrimitive inputPrimitive = default, uint patchConstantParameters = default, uint cGSInstanceCount = default, uint cControlPoints = default, D3DTessellatorOutputPrimitive hsOutputPrimitive = default, D3DTessellatorPartitioning hsPartitioning = default, D3DTessellatorDomain tessellatorDomain = default, uint cBarrierInstructions = default, uint cInterlockedInstructions = default, uint cTextureStoreInstructions = default)
		{
			Version = version;
			Creator = creator;
			Flags = flags;
			ConstantBuffers = constantBuffers;
			BoundResources = boundResources;
			InputParameters = inputParameters;
			OutputParameters = outputParameters;
			InstructionCount = instructionCount;
			TempRegisterCount = tempRegisterCount;
			TempArrayCount = tempArrayCount;
			DefCount = defCount;
			DclCount = dclCount;
			TextureNormalInstructions = textureNormalInstructions;
			TextureLoadInstructions = textureLoadInstructions;
			TextureCompInstructions = textureCompInstructions;
			TextureBiasInstructions = textureBiasInstructions;
			TextureGradientInstructions = textureGradientInstructions;
			FloatInstructionCount = floatInstructionCount;
			IntInstructionCount = intInstructionCount;
			UintInstructionCount = uintInstructionCount;
			StaticFlowControlCount = staticFlowControlCount;
			DynamicFlowControlCount = dynamicFlowControlCount;
			MacroInstructionCount = macroInstructionCount;
			ArrayInstructionCount = arrayInstructionCount;
			CutInstructionCount = cutInstructionCount;
			EmitInstructionCount = emitInstructionCount;
			GSOutputTopology = gsOutputTopology;
			GSMaxOutputVertexCount = gsMaxOutputVertexCount;
			InputPrimitive = inputPrimitive;
			PatchConstantParameters = patchConstantParameters;
			CGSInstanceCount = cGSInstanceCount;
			CControlPoints = cControlPoints;
			HSOutputPrimitive = hsOutputPrimitive;
			HSPartitioning = hsPartitioning;
			TessellatorDomain = tessellatorDomain;
			CBarrierInstructions = cBarrierInstructions;
			CInterlockedInstructions = cInterlockedInstructions;
			CTextureStoreInstructions = cTextureStoreInstructions;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "_D3D11_SHADER_INPUT_BIND_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11ShaderInputBindDesc
	{
		/// <summary>
		/// Name of the resource<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* Name;

		/// <summary>
		/// Type of resource (e.g. texture, cbuffer, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D_SHADER_INPUT_TYPE")]
		public D3DShaderInputType Type;

		/// <summary>
		/// Starting bind point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BindPoint")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BindPoint;

		/// <summary>
		/// Number of contiguous bind points (for arrays)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BindCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BindCount;

		/// <summary>
		/// Input binding flags<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "uFlags")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint UFlags;

		/// <summary>
		/// Return type (if texture)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ReturnType")]
		[NativeName(NativeNameType.Type, "D3D_RESOURCE_RETURN_TYPE")]
		public D3DResourceReturnType ReturnType;

		/// <summary>
		/// Dimension (if texture)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Dimension")]
		[NativeName(NativeNameType.Type, "D3D_SRV_DIMENSION")]
		public D3DSrvDimension Dimension;

		/// <summary>
		/// Number of samples (0 if not MS texture)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NumSamples")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumSamples;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11ShaderInputBindDesc(byte* name = default, D3DShaderInputType type = default, uint bindPoint = default, uint bindCount = default, uint uFlags = default, D3DResourceReturnType returnType = default, D3DSrvDimension dimension = default, uint numSamples = default)
		{
			Name = name;
			Type = type;
			BindPoint = bindPoint;
			BindCount = bindCount;
			UFlags = uFlags;
			ReturnType = returnType;
			Dimension = dimension;
			NumSamples = numSamples;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "_D3D11_LIBRARY_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11LibraryDesc
	{
		/// <summary>
		/// The name of the originator of the library.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Creator")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* Creator;

		/// <summary>
		/// Compilation flags.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Flags;

		/// <summary>
		/// Number of functions exported from the library.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FunctionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FunctionCount;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11LibraryDesc(byte* creator = default, uint flags = default, uint functionCount = default)
		{
			Creator = creator;
			Flags = flags;
			FunctionCount = functionCount;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "_D3D11_FUNCTION_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FunctionDesc
	{
		/// <summary>
		/// Shader version<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Version")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Version;

		/// <summary>
		/// Creator string<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Creator")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* Creator;

		/// <summary>
		/// Shader compilation/parse flags<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Flags;

		/// <summary>
		/// Number of constant buffers<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConstantBuffers")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ConstantBuffers;

		/// <summary>
		/// Number of bound resources<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BoundResources")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BoundResources;

		/// <summary>
		/// Number of emitted instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InstructionCount;

		/// <summary>
		/// Number of temporary registers used <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TempRegisterCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TempRegisterCount;

		/// <summary>
		/// Number of temporary arrays used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TempArrayCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TempArrayCount;

		/// <summary>
		/// Number of constant defines <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DefCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DefCount;

		/// <summary>
		/// Number of declarations (input + output)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DclCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DclCount;

		/// <summary>
		/// Number of non-categorized texture instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureNormalInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureNormalInstructions;

		/// <summary>
		/// Number of texture load instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureLoadInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureLoadInstructions;

		/// <summary>
		/// Number of texture comparison instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureCompInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureCompInstructions;

		/// <summary>
		/// Number of texture bias instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureBiasInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureBiasInstructions;

		/// <summary>
		/// Number of texture gradient instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureGradientInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureGradientInstructions;

		/// <summary>
		/// Number of floating point arithmetic instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FloatInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FloatInstructionCount;

		/// <summary>
		/// Number of signed integer arithmetic instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IntInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint IntInstructionCount;

		/// <summary>
		/// Number of unsigned integer arithmetic instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "UintInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint UintInstructionCount;

		/// <summary>
		/// Number of static flow control instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "StaticFlowControlCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StaticFlowControlCount;

		/// <summary>
		/// Number of dynamic flow control instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DynamicFlowControlCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DynamicFlowControlCount;

		/// <summary>
		/// Number of macro instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MacroInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MacroInstructionCount;

		/// <summary>
		/// Number of array instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ArrayInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ArrayInstructionCount;

		/// <summary>
		/// Number of mov instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MovInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MovInstructionCount;

		/// <summary>
		/// Number of movc instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MovcInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MovcInstructionCount;

		/// <summary>
		/// Number of type conversion instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConversionInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ConversionInstructionCount;

		/// <summary>
		/// Number of bitwise arithmetic instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BitwiseInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BitwiseInstructionCount;

		/// <summary>
		/// Min target of the function byte code<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MinFeatureLevel")]
		[NativeName(NativeNameType.Type, "D3D_FEATURE_LEVEL")]
		public D3DFeatureLevel MinFeatureLevel;

		/// <summary>
		/// Required feature flags<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RequiredFeatureFlags")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong RequiredFeatureFlags;

		/// <summary>
		/// Function name<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* Name;

		/// <summary>
		/// Number of logical parameters in the function signature (not including return)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FunctionParameterCount")]
		[NativeName(NativeNameType.Type, "INT")]
		public int FunctionParameterCount;

		/// <summary>
		/// TRUE, if function returns a value, false - it is a subroutine<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HasReturn")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int HasReturn;

		/// <summary>
		/// TRUE, if there is a 10L9 VS blob<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Has10Level9VertexShader")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int Has10Level9VertexShader;

		/// <summary>
		/// TRUE, if there is a 10L9 PS blob<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Has10Level9PixelShader")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int Has10Level9PixelShader;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FunctionDesc(uint version = default, byte* creator = default, uint flags = default, uint constantBuffers = default, uint boundResources = default, uint instructionCount = default, uint tempRegisterCount = default, uint tempArrayCount = default, uint defCount = default, uint dclCount = default, uint textureNormalInstructions = default, uint textureLoadInstructions = default, uint textureCompInstructions = default, uint textureBiasInstructions = default, uint textureGradientInstructions = default, uint floatInstructionCount = default, uint intInstructionCount = default, uint uintInstructionCount = default, uint staticFlowControlCount = default, uint dynamicFlowControlCount = default, uint macroInstructionCount = default, uint arrayInstructionCount = default, uint movInstructionCount = default, uint movcInstructionCount = default, uint conversionInstructionCount = default, uint bitwiseInstructionCount = default, D3DFeatureLevel minFeatureLevel = default, ulong requiredFeatureFlags = default, byte* name = default, int functionParameterCount = default, int hasReturn = default, int has10Level9VertexShader = default, int has10Level9PixelShader = default)
		{
			Version = version;
			Creator = creator;
			Flags = flags;
			ConstantBuffers = constantBuffers;
			BoundResources = boundResources;
			InstructionCount = instructionCount;
			TempRegisterCount = tempRegisterCount;
			TempArrayCount = tempArrayCount;
			DefCount = defCount;
			DclCount = dclCount;
			TextureNormalInstructions = textureNormalInstructions;
			TextureLoadInstructions = textureLoadInstructions;
			TextureCompInstructions = textureCompInstructions;
			TextureBiasInstructions = textureBiasInstructions;
			TextureGradientInstructions = textureGradientInstructions;
			FloatInstructionCount = floatInstructionCount;
			IntInstructionCount = intInstructionCount;
			UintInstructionCount = uintInstructionCount;
			StaticFlowControlCount = staticFlowControlCount;
			DynamicFlowControlCount = dynamicFlowControlCount;
			MacroInstructionCount = macroInstructionCount;
			ArrayInstructionCount = arrayInstructionCount;
			MovInstructionCount = movInstructionCount;
			MovcInstructionCount = movcInstructionCount;
			ConversionInstructionCount = conversionInstructionCount;
			BitwiseInstructionCount = bitwiseInstructionCount;
			MinFeatureLevel = minFeatureLevel;
			RequiredFeatureFlags = requiredFeatureFlags;
			Name = name;
			FunctionParameterCount = functionParameterCount;
			HasReturn = hasReturn;
			Has10Level9VertexShader = has10Level9VertexShader;
			Has10Level9PixelShader = has10Level9PixelShader;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "_D3D11_PARAMETER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11ParameterDesc
	{
		/// <summary>
		/// Parameter name.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* Name;

		/// <summary>
		/// Parameter semantic name (+index).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SemanticName")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* SemanticName;

		/// <summary>
		/// Element type.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D_SHADER_VARIABLE_TYPE")]
		public D3DShaderVariableType Type;

		/// <summary>
		/// Scalar/Vector/Matrix.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Class")]
		[NativeName(NativeNameType.Type, "D3D_SHADER_VARIABLE_CLASS")]
		public D3DShaderVariableClass Class;

		/// <summary>
		/// Rows are for matrix parameters.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Rows")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Rows;

		/// <summary>
		/// Components or Columns in matrix.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Columns")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Columns;

		/// <summary>
		/// Interpolation mode.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InterpolationMode")]
		[NativeName(NativeNameType.Type, "D3D_INTERPOLATION_MODE")]
		public D3DInterpolationMode InterpolationMode;

		/// <summary>
		/// Parameter modifiers.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D_PARAMETER_FLAGS")]
		public D3DParameterFlags Flags;

		/// <summary>
		/// The first input register for this parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FirstInRegister")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstInRegister;

		/// <summary>
		/// The first input register component for this parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FirstInComponent")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstInComponent;

		/// <summary>
		/// The first output register for this parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FirstOutRegister")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstOutRegister;

		/// <summary>
		/// The first output register component for this parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FirstOutComponent")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstOutComponent;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11ParameterDesc(byte* name = default, byte* semanticName = default, D3DShaderVariableType type = default, D3DShaderVariableClass @class = default, uint rows = default, uint columns = default, D3DInterpolationMode interpolationMode = default, D3DParameterFlags flags = default, uint firstInRegister = default, uint firstInComponent = default, uint firstOutRegister = default, uint firstOutComponent = default)
		{
			Name = name;
			SemanticName = semanticName;
			Type = type;
			Class = @class;
			Rows = rows;
			Columns = columns;
			InterpolationMode = interpolationMode;
			Flags = flags;
			FirstInRegister = firstInRegister;
			FirstInComponent = firstInComponent;
			FirstOutRegister = firstOutRegister;
			FirstOutComponent = firstOutComponent;
		}


	}

	/// <summary>
	/// {6E6FFA6A-9BAE-4613-A51E-91652D508C21}<br/>
	/// </summary>
	[Guid("6e6ffa6a-9bae-4613-a51e-91652d508c21")]
	[NativeName(NativeNameType.StructOrClass, "ID3D11ShaderReflectionType")]
	public partial struct ID3D11ShaderReflectionType : IComObject, IComObject<ID3D11ShaderReflectionType>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("6e6ffa6a-9bae-4613-a51e-91652d508c21");

		public unsafe ID3D11ShaderReflectionType (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_TYPE_DESC*")] D3D11ShaderTypeDesc* pDesc) 
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, D3D11ShaderTypeDesc*, int>)(*LpVtbl))(ptr, pDesc);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_TYPE_DESC*")] ref D3D11ShaderTypeDesc pDesc) 
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ShaderTypeDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, D3D11ShaderTypeDesc*, int>)(*LpVtbl))(ptr, (D3D11ShaderTypeDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMemberTypeByIndex")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")]
		public readonly unsafe ID3D11ShaderReflectionType* GetMemberTypeByIndex([NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index) 
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, uint, ID3D11ShaderReflectionType*>)(LpVtbl[1]))(ptr, index);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMemberTypeByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")]
		public readonly unsafe ID3D11ShaderReflectionType* GetMemberTypeByName([NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name) 
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, byte*, ID3D11ShaderReflectionType*>)(LpVtbl[2]))(ptr, name);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMemberTypeName")]
		[return: NativeName(NativeNameType.Type, "LPCSTR")]
		public readonly unsafe byte* GetMemberTypeName([NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index) 
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, uint, byte*>)(LpVtbl[3]))(ptr, index);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "IsEqual")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int IsEqual([NativeName(NativeNameType.Param, "pType")] [NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")] ID3D11ShaderReflectionType* pType) 
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, int>)(LpVtbl[4]))(ptr, pType);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "IsEqual")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int IsEqual([NativeName(NativeNameType.Param, "pType")] [NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")] ref ID3D11ShaderReflectionType pType) 
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderReflectionType* ppType = &pType)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, int>)(LpVtbl[4]))(ptr, (ID3D11ShaderReflectionType*)ppType);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "IsEqual")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int IsEqual([NativeName(NativeNameType.Param, "pType")] [NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")] ComPtr<ID3D11ShaderReflectionType> pType) 
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, int>)(LpVtbl[4]))(ptr, (ID3D11ShaderReflectionType*)pType.Handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetSubType")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")]
		public readonly unsafe ID3D11ShaderReflectionType* GetSubType() 
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*>)(LpVtbl[5]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetBaseClass")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")]
		public readonly unsafe ID3D11ShaderReflectionType* GetBaseClass() 
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*>)(LpVtbl[6]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetNumInterfaces")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetNumInterfaces() 
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, uint>)(LpVtbl[7]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetInterfaceByIndex")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")]
		public readonly unsafe ID3D11ShaderReflectionType* GetInterfaceByIndex([NativeName(NativeNameType.Param, "uIndex")] [NativeName(NativeNameType.Type, "UINT")] uint uIndex) 
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, uint, ID3D11ShaderReflectionType*>)(LpVtbl[8]))(ptr, uIndex);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "IsOfType")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int IsOfType([NativeName(NativeNameType.Param, "pType")] [NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")] ID3D11ShaderReflectionType* pType) 
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, int>)(LpVtbl[9]))(ptr, pType);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "IsOfType")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int IsOfType([NativeName(NativeNameType.Param, "pType")] [NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")] ref ID3D11ShaderReflectionType pType) 
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderReflectionType* ppType = &pType)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, int>)(LpVtbl[9]))(ptr, (ID3D11ShaderReflectionType*)ppType);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "IsOfType")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int IsOfType([NativeName(NativeNameType.Param, "pType")] [NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")] ComPtr<ID3D11ShaderReflectionType> pType) 
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, int>)(LpVtbl[9]))(ptr, (ID3D11ShaderReflectionType*)pType.Handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ImplementsInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int ImplementsInterface([NativeName(NativeNameType.Param, "pBase")] [NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")] ID3D11ShaderReflectionType* pBase) 
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, int>)(LpVtbl[10]))(ptr, pBase);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ImplementsInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int ImplementsInterface([NativeName(NativeNameType.Param, "pBase")] [NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")] ref ID3D11ShaderReflectionType pBase) 
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11ShaderReflectionType* ppBase = &pBase)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, int>)(LpVtbl[10]))(ptr, (ID3D11ShaderReflectionType*)ppBase);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "ImplementsInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int ImplementsInterface([NativeName(NativeNameType.Param, "pBase")] [NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")] ComPtr<ID3D11ShaderReflectionType> pBase) 
		{
			ID3D11ShaderReflectionType* ptr = (ID3D11ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionType*, ID3D11ShaderReflectionType*, int>)(LpVtbl[10]))(ptr, (ID3D11ShaderReflectionType*)pBase.Handle);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

	}

	/// <summary>
	/// {51F23923-F3E5-4BD1-91CB-606177D8DB4C}<br/>
	/// </summary>
	[Guid("51f23923-f3e5-4bd1-91cb-606177d8db4c")]
	[NativeName(NativeNameType.StructOrClass, "ID3D11ShaderReflectionVariable")]
	public partial struct ID3D11ShaderReflectionVariable : IComObject, IComObject<ID3D11ShaderReflectionVariable>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("51f23923-f3e5-4bd1-91cb-606177d8db4c");

		public unsafe ID3D11ShaderReflectionVariable (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_VARIABLE_DESC*")] D3D11ShaderVariableDesc* pDesc) 
		{
			ID3D11ShaderReflectionVariable* ptr = (ID3D11ShaderReflectionVariable*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionVariable*, D3D11ShaderVariableDesc*, int>)(*LpVtbl))(ptr, pDesc);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_VARIABLE_DESC*")] ref D3D11ShaderVariableDesc pDesc) 
		{
			ID3D11ShaderReflectionVariable* ptr = (ID3D11ShaderReflectionVariable*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ShaderVariableDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionVariable*, D3D11ShaderVariableDesc*, int>)(*LpVtbl))(ptr, (D3D11ShaderVariableDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetType")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionType*")]
		public readonly unsafe ID3D11ShaderReflectionType* GetType() 
		{
			ID3D11ShaderReflectionVariable* ptr = (ID3D11ShaderReflectionVariable*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionVariable*, ID3D11ShaderReflectionType*>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetBuffer")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionConstantBuffer*")]
		public readonly unsafe ID3D11ShaderReflectionConstantBuffer* GetBuffer() 
		{
			ID3D11ShaderReflectionVariable* ptr = (ID3D11ShaderReflectionVariable*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionVariable*, ID3D11ShaderReflectionConstantBuffer*>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetInterfaceSlot")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetInterfaceSlot([NativeName(NativeNameType.Param, "uArrayIndex")] [NativeName(NativeNameType.Type, "UINT")] uint uArrayIndex) 
		{
			ID3D11ShaderReflectionVariable* ptr = (ID3D11ShaderReflectionVariable*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionVariable*, uint, uint>)(LpVtbl[3]))(ptr, uArrayIndex);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

	}

	/// <summary>
	/// {EB62D63D-93DD-4318-8AE8-C6F83AD371B8}<br/>
	/// </summary>
	[Guid("eb62d63d-93dd-4318-8ae8-c6f83ad371b8")]
	[NativeName(NativeNameType.StructOrClass, "ID3D11ShaderReflectionConstantBuffer")]
	public partial struct ID3D11ShaderReflectionConstantBuffer : IComObject, IComObject<ID3D11ShaderReflectionConstantBuffer>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("eb62d63d-93dd-4318-8ae8-c6f83ad371b8");

		public unsafe ID3D11ShaderReflectionConstantBuffer (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_BUFFER_DESC*")] D3D11ShaderBufferDesc* pDesc) 
		{
			ID3D11ShaderReflectionConstantBuffer* ptr = (ID3D11ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionConstantBuffer*, D3D11ShaderBufferDesc*, int>)(*LpVtbl))(ptr, pDesc);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_BUFFER_DESC*")] ref D3D11ShaderBufferDesc pDesc) 
		{
			ID3D11ShaderReflectionConstantBuffer* ptr = (ID3D11ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ShaderBufferDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionConstantBuffer*, D3D11ShaderBufferDesc*, int>)(*LpVtbl))(ptr, (D3D11ShaderBufferDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetVariableByIndex")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionVariable*")]
		public readonly unsafe ID3D11ShaderReflectionVariable* GetVariableByIndex([NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index) 
		{
			ID3D11ShaderReflectionConstantBuffer* ptr = (ID3D11ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionConstantBuffer*, uint, ID3D11ShaderReflectionVariable*>)(LpVtbl[1]))(ptr, index);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetVariableByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionVariable*")]
		public readonly unsafe ID3D11ShaderReflectionVariable* GetVariableByName([NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name) 
		{
			ID3D11ShaderReflectionConstantBuffer* ptr = (ID3D11ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflectionConstantBuffer*, byte*, ID3D11ShaderReflectionVariable*>)(LpVtbl[2]))(ptr, name);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

	}

	/// <summary>
	/// 8d536ca1-0cca-4956-a837-786963755584<br/>
	/// </summary>
	[Guid("8d536ca1-0cca-4956-a837-786963755584")]
	[NativeName(NativeNameType.StructOrClass, "ID3D11ShaderReflection")]
	public partial struct ID3D11ShaderReflection : IComObject, IComObject<ID3D11ShaderReflection>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("8d536ca1-0cca-4956-a837-786963755584");

		public unsafe ID3D11ShaderReflection (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, int>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "AddRef")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint AddRef() 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Release")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint Release() 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppv) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (void** pppv = &ppv)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, int>)(LpVtbl[3]))(ptr, iid, (void**)pppv);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppv) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* piid = &iid)
			{
				fixed (void** pppv = &ppv)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, Guid*, void**, int>)(LpVtbl[3]))(ptr, (Guid*)piid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_DESC*")] D3D11ShaderDesc* pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, D3D11ShaderDesc*, int>)(LpVtbl[4]))(ptr, pDesc);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_DESC*")] ref D3D11ShaderDesc pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ShaderDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, D3D11ShaderDesc*, int>)(LpVtbl[4]))(ptr, (D3D11ShaderDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetConstantBufferByIndex")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionConstantBuffer*")]
		public readonly unsafe ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByIndex([NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, ID3D11ShaderReflectionConstantBuffer*>)(LpVtbl[5]))(ptr, index);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetConstantBufferByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionConstantBuffer*")]
		public readonly unsafe ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByName([NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionConstantBuffer*>)(LpVtbl[6]))(ptr, name);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetResourceBindingDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetResourceBindingDesc([NativeName(NativeNameType.Param, "ResourceIndex")] [NativeName(NativeNameType.Type, "UINT")] uint resourceIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_INPUT_BIND_DESC*")] D3D11ShaderInputBindDesc* pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11ShaderInputBindDesc*, int>)(LpVtbl[7]))(ptr, resourceIndex, pDesc);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetResourceBindingDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetResourceBindingDesc([NativeName(NativeNameType.Param, "ResourceIndex")] [NativeName(NativeNameType.Type, "UINT")] uint resourceIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_INPUT_BIND_DESC*")] ref D3D11ShaderInputBindDesc pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ShaderInputBindDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11ShaderInputBindDesc*, int>)(LpVtbl[7]))(ptr, resourceIndex, (D3D11ShaderInputBindDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetInputParameterDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetInputParameterDesc([NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint parameterIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SIGNATURE_PARAMETER_DESC*")] D3D11SignatureParameterDesc* pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11SignatureParameterDesc*, int>)(LpVtbl[8]))(ptr, parameterIndex, pDesc);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetInputParameterDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetInputParameterDesc([NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint parameterIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SIGNATURE_PARAMETER_DESC*")] ref D3D11SignatureParameterDesc pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SignatureParameterDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11SignatureParameterDesc*, int>)(LpVtbl[8]))(ptr, parameterIndex, (D3D11SignatureParameterDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetOutputParameterDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetOutputParameterDesc([NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint parameterIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SIGNATURE_PARAMETER_DESC*")] D3D11SignatureParameterDesc* pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11SignatureParameterDesc*, int>)(LpVtbl[9]))(ptr, parameterIndex, pDesc);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetOutputParameterDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetOutputParameterDesc([NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint parameterIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SIGNATURE_PARAMETER_DESC*")] ref D3D11SignatureParameterDesc pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SignatureParameterDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11SignatureParameterDesc*, int>)(LpVtbl[9]))(ptr, parameterIndex, (D3D11SignatureParameterDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetPatchConstantParameterDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPatchConstantParameterDesc([NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint parameterIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SIGNATURE_PARAMETER_DESC*")] D3D11SignatureParameterDesc* pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11SignatureParameterDesc*, int>)(LpVtbl[10]))(ptr, parameterIndex, pDesc);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetPatchConstantParameterDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetPatchConstantParameterDesc([NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint parameterIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SIGNATURE_PARAMETER_DESC*")] ref D3D11SignatureParameterDesc pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11SignatureParameterDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint, D3D11SignatureParameterDesc*, int>)(LpVtbl[10]))(ptr, parameterIndex, (D3D11SignatureParameterDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetVariableByName")]
		[return: NativeName(NativeNameType.Type, "ID3D11ShaderReflectionVariable*")]
		public readonly unsafe ID3D11ShaderReflectionVariable* GetVariableByName([NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, ID3D11ShaderReflectionVariable*>)(LpVtbl[11]))(ptr, name);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetResourceBindingDescByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetResourceBindingDescByName([NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_INPUT_BIND_DESC*")] D3D11ShaderInputBindDesc* pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, D3D11ShaderInputBindDesc*, int>)(LpVtbl[12]))(ptr, name, pDesc);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetResourceBindingDescByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetResourceBindingDescByName([NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_SHADER_INPUT_BIND_DESC*")] ref D3D11ShaderInputBindDesc pDesc) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ShaderInputBindDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, byte*, D3D11ShaderInputBindDesc*, int>)(LpVtbl[12]))(ptr, name, (D3D11ShaderInputBindDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMovInstructionCount")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetMovInstructionCount() 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[13]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMovcInstructionCount")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetMovcInstructionCount() 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[14]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetConversionInstructionCount")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetConversionInstructionCount() 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[15]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetBitwiseInstructionCount")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetBitwiseInstructionCount() 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[16]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetGSInputPrimitive")]
		[return: NativeName(NativeNameType.Type, "D3D_PRIMITIVE")]
		public readonly unsafe D3DPrimitive GetGSInputPrimitive() 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3DPrimitive ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, D3DPrimitive>)(LpVtbl[17]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "IsSampleFrequencyShader")]
		[return: NativeName(NativeNameType.Type, "BOOL")]
		public readonly unsafe int IsSampleFrequencyShader() 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, int>)(LpVtbl[18]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetNumInterfaceSlots")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetNumInterfaceSlots() 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint>)(LpVtbl[19]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMinFeatureLevel")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetMinFeatureLevel([NativeName(NativeNameType.Param, "pLevel")] [NativeName(NativeNameType.Type, "D3D_FEATURE_LEVEL*")] D3DFeatureLevel* pLevel) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, D3DFeatureLevel*, int>)(LpVtbl[20]))(ptr, pLevel);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetMinFeatureLevel")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetMinFeatureLevel([NativeName(NativeNameType.Param, "pLevel")] [NativeName(NativeNameType.Type, "D3D_FEATURE_LEVEL*")] ref D3DFeatureLevel pLevel) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3DFeatureLevel* ppLevel = &pLevel)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, D3DFeatureLevel*, int>)(LpVtbl[20]))(ptr, (D3DFeatureLevel*)ppLevel);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetThreadGroupSize([NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeZ) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[21]))(ptr, pSizeX, pSizeY, pSizeZ);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetThreadGroupSize([NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeZ) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeX = &pSizeX)
			{
				uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[21]))(ptr, (uint*)ppSizeX, pSizeY, pSizeZ);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetThreadGroupSize([NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeZ) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeY = &pSizeY)
			{
				uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[21]))(ptr, pSizeX, (uint*)ppSizeY, pSizeZ);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetThreadGroupSize([NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeZ) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeX = &pSizeX)
			{
				fixed (uint* ppSizeY = &pSizeY)
				{
					uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[21]))(ptr, (uint*)ppSizeX, (uint*)ppSizeY, pSizeZ);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetThreadGroupSize([NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeZ) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeZ = &pSizeZ)
			{
				uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[21]))(ptr, pSizeX, pSizeY, (uint*)ppSizeZ);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetThreadGroupSize([NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeZ) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeX = &pSizeX)
			{
				fixed (uint* ppSizeZ = &pSizeZ)
				{
					uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[21]))(ptr, (uint*)ppSizeX, pSizeY, (uint*)ppSizeZ);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetThreadGroupSize([NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeZ) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeY = &pSizeY)
			{
				fixed (uint* ppSizeZ = &pSizeZ)
				{
					uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[21]))(ptr, pSizeX, (uint*)ppSizeY, (uint*)ppSizeZ);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetThreadGroupSize([NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeZ) 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeX = &pSizeX)
			{
				fixed (uint* ppSizeY = &pSizeY)
				{
					fixed (uint* ppSizeZ = &pSizeZ)
					{
						uint ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[21]))(ptr, (uint*)ppSizeX, (uint*)ppSizeY, (uint*)ppSizeZ);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetRequiresFlags")]
		[return: NativeName(NativeNameType.Type, "UINT64")]
		public readonly unsafe ulong GetRequiresFlags() 
		{
			ID3D11ShaderReflection* ptr = (ID3D11ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D11ShaderReflection*, ulong>)(LpVtbl[22]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11ShaderReflection value)
		{
			return Unsafe.As<ID3D11ShaderReflection, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// {54384F1B-5B3E-4BB7-AE01-60BA3097CBB6}<br/>
	/// </summary>
	[Guid("54384f1b-5b3e-4bb7-ae01-60ba3097cbb6")]
	[NativeName(NativeNameType.StructOrClass, "ID3D11LibraryReflection")]
	public partial struct ID3D11LibraryReflection : IComObject, IComObject<ID3D11LibraryReflection>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("54384f1b-5b3e-4bb7-ae01-60ba3097cbb6");

		public unsafe ID3D11LibraryReflection (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11LibraryReflection* ptr = (ID3D11LibraryReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, Guid*, void**, int>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11LibraryReflection* ptr = (ID3D11LibraryReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11LibraryReflection* ptr = (ID3D11LibraryReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11LibraryReflection* ptr = (ID3D11LibraryReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "AddRef")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint AddRef() 
		{
			ID3D11LibraryReflection* ptr = (ID3D11LibraryReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Release")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint Release() 
		{
			ID3D11LibraryReflection* ptr = (ID3D11LibraryReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppv) 
		{
			ID3D11LibraryReflection* ptr = (ID3D11LibraryReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (void** pppv = &ppv)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, Guid*, void**, int>)(LpVtbl[3]))(ptr, iid, (void**)pppv);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppv) 
		{
			ID3D11LibraryReflection* ptr = (ID3D11LibraryReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* piid = &iid)
			{
				fixed (void** pppv = &ppv)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, Guid*, void**, int>)(LpVtbl[3]))(ptr, (Guid*)piid, (void**)pppv);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_LIBRARY_DESC*")] D3D11LibraryDesc* pDesc) 
		{
			ID3D11LibraryReflection* ptr = (ID3D11LibraryReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, D3D11LibraryDesc*, int>)(LpVtbl[4]))(ptr, pDesc);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D11_LIBRARY_DESC*")] ref D3D11LibraryDesc pDesc) 
		{
			ID3D11LibraryReflection* ptr = (ID3D11LibraryReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11LibraryDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, D3D11LibraryDesc*, int>)(LpVtbl[4]))(ptr, (D3D11LibraryDesc*)ppDesc);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetFunctionByIndex")]
		[return: NativeName(NativeNameType.Type, "ID3D11FunctionReflection*")]
		public readonly unsafe ID3D11FunctionReflection* GetFunctionByIndex([NativeName(NativeNameType.Param, "FunctionIndex")] [NativeName(NativeNameType.Type, "INT")] int functionIndex) 
		{
			ID3D11LibraryReflection* ptr = (ID3D11LibraryReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D11FunctionReflection* ret = ((delegate* unmanaged[Stdcall]<ID3D11LibraryReflection*, int, ID3D11FunctionReflection*>)(LpVtbl[5]))(ptr, functionIndex);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11LibraryReflection value)
		{
			return Unsafe.As<ID3D11LibraryReflection, IUnknown>(ref value);
		}

	}
}
