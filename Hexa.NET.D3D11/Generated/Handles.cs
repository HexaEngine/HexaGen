// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaEngine.DXGI;
using HexaEngine.D3DCommon;
using HexaGen.Runtime.COM;

namespace HexaEngine.D3D11
{
	[NativeName(NativeNameType.Typedef, "LPD3D11SHADERREFLECTIONTYPE")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LPD3D11SHADERREFLECTIONTYPE : IEquatable<LPD3D11SHADERREFLECTIONTYPE>
	{
		public LPD3D11SHADERREFLECTIONTYPE(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LPD3D11SHADERREFLECTIONTYPE Null => new LPD3D11SHADERREFLECTIONTYPE(0);
		public static implicit operator LPD3D11SHADERREFLECTIONTYPE(nint handle) => new LPD3D11SHADERREFLECTIONTYPE(handle);
		public static bool operator ==(LPD3D11SHADERREFLECTIONTYPE left, LPD3D11SHADERREFLECTIONTYPE right) => left.Handle == right.Handle;
		public static bool operator !=(LPD3D11SHADERREFLECTIONTYPE left, LPD3D11SHADERREFLECTIONTYPE right) => left.Handle != right.Handle;
		public static bool operator ==(LPD3D11SHADERREFLECTIONTYPE left, nint right) => left.Handle == right;
		public static bool operator !=(LPD3D11SHADERREFLECTIONTYPE left, nint right) => left.Handle != right;
		public bool Equals(LPD3D11SHADERREFLECTIONTYPE other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LPD3D11SHADERREFLECTIONTYPE handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LPD3D11SHADERREFLECTIONTYPE [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "LPD3D11SHADERREFLECTIONVARIABLE")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LPD3D11SHADERREFLECTIONVARIABLE : IEquatable<LPD3D11SHADERREFLECTIONVARIABLE>
	{
		public LPD3D11SHADERREFLECTIONVARIABLE(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LPD3D11SHADERREFLECTIONVARIABLE Null => new LPD3D11SHADERREFLECTIONVARIABLE(0);
		public static implicit operator LPD3D11SHADERREFLECTIONVARIABLE(nint handle) => new LPD3D11SHADERREFLECTIONVARIABLE(handle);
		public static bool operator ==(LPD3D11SHADERREFLECTIONVARIABLE left, LPD3D11SHADERREFLECTIONVARIABLE right) => left.Handle == right.Handle;
		public static bool operator !=(LPD3D11SHADERREFLECTIONVARIABLE left, LPD3D11SHADERREFLECTIONVARIABLE right) => left.Handle != right.Handle;
		public static bool operator ==(LPD3D11SHADERREFLECTIONVARIABLE left, nint right) => left.Handle == right;
		public static bool operator !=(LPD3D11SHADERREFLECTIONVARIABLE left, nint right) => left.Handle != right;
		public bool Equals(LPD3D11SHADERREFLECTIONVARIABLE other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LPD3D11SHADERREFLECTIONVARIABLE handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LPD3D11SHADERREFLECTIONVARIABLE [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "LPD3D11SHADERREFLECTIONCONSTANTBUFFER")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LPD3D11SHADERREFLECTIONCONSTANTBUFFER : IEquatable<LPD3D11SHADERREFLECTIONCONSTANTBUFFER>
	{
		public LPD3D11SHADERREFLECTIONCONSTANTBUFFER(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LPD3D11SHADERREFLECTIONCONSTANTBUFFER Null => new LPD3D11SHADERREFLECTIONCONSTANTBUFFER(0);
		public static implicit operator LPD3D11SHADERREFLECTIONCONSTANTBUFFER(nint handle) => new LPD3D11SHADERREFLECTIONCONSTANTBUFFER(handle);
		public static bool operator ==(LPD3D11SHADERREFLECTIONCONSTANTBUFFER left, LPD3D11SHADERREFLECTIONCONSTANTBUFFER right) => left.Handle == right.Handle;
		public static bool operator !=(LPD3D11SHADERREFLECTIONCONSTANTBUFFER left, LPD3D11SHADERREFLECTIONCONSTANTBUFFER right) => left.Handle != right.Handle;
		public static bool operator ==(LPD3D11SHADERREFLECTIONCONSTANTBUFFER left, nint right) => left.Handle == right;
		public static bool operator !=(LPD3D11SHADERREFLECTIONCONSTANTBUFFER left, nint right) => left.Handle != right;
		public bool Equals(LPD3D11SHADERREFLECTIONCONSTANTBUFFER other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LPD3D11SHADERREFLECTIONCONSTANTBUFFER handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LPD3D11SHADERREFLECTIONCONSTANTBUFFER [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "LPD3D11SHADERREFLECTION")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LPD3D11SHADERREFLECTION : IEquatable<LPD3D11SHADERREFLECTION>
	{
		public LPD3D11SHADERREFLECTION(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LPD3D11SHADERREFLECTION Null => new LPD3D11SHADERREFLECTION(0);
		public static implicit operator LPD3D11SHADERREFLECTION(nint handle) => new LPD3D11SHADERREFLECTION(handle);
		public static bool operator ==(LPD3D11SHADERREFLECTION left, LPD3D11SHADERREFLECTION right) => left.Handle == right.Handle;
		public static bool operator !=(LPD3D11SHADERREFLECTION left, LPD3D11SHADERREFLECTION right) => left.Handle != right.Handle;
		public static bool operator ==(LPD3D11SHADERREFLECTION left, nint right) => left.Handle == right;
		public static bool operator !=(LPD3D11SHADERREFLECTION left, nint right) => left.Handle != right;
		public bool Equals(LPD3D11SHADERREFLECTION other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LPD3D11SHADERREFLECTION handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LPD3D11SHADERREFLECTION [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "LPD3D11LIBRARYREFLECTION")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LPD3D11LIBRARYREFLECTION : IEquatable<LPD3D11LIBRARYREFLECTION>
	{
		public LPD3D11LIBRARYREFLECTION(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LPD3D11LIBRARYREFLECTION Null => new LPD3D11LIBRARYREFLECTION(0);
		public static implicit operator LPD3D11LIBRARYREFLECTION(nint handle) => new LPD3D11LIBRARYREFLECTION(handle);
		public static bool operator ==(LPD3D11LIBRARYREFLECTION left, LPD3D11LIBRARYREFLECTION right) => left.Handle == right.Handle;
		public static bool operator !=(LPD3D11LIBRARYREFLECTION left, LPD3D11LIBRARYREFLECTION right) => left.Handle != right.Handle;
		public static bool operator ==(LPD3D11LIBRARYREFLECTION left, nint right) => left.Handle == right;
		public static bool operator !=(LPD3D11LIBRARYREFLECTION left, nint right) => left.Handle != right;
		public bool Equals(LPD3D11LIBRARYREFLECTION other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LPD3D11LIBRARYREFLECTION handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LPD3D11LIBRARYREFLECTION [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "LPD3D11FUNCTIONREFLECTION")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LPD3D11FUNCTIONREFLECTION : IEquatable<LPD3D11FUNCTIONREFLECTION>
	{
		public LPD3D11FUNCTIONREFLECTION(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LPD3D11FUNCTIONREFLECTION Null => new LPD3D11FUNCTIONREFLECTION(0);
		public static implicit operator LPD3D11FUNCTIONREFLECTION(nint handle) => new LPD3D11FUNCTIONREFLECTION(handle);
		public static bool operator ==(LPD3D11FUNCTIONREFLECTION left, LPD3D11FUNCTIONREFLECTION right) => left.Handle == right.Handle;
		public static bool operator !=(LPD3D11FUNCTIONREFLECTION left, LPD3D11FUNCTIONREFLECTION right) => left.Handle != right.Handle;
		public static bool operator ==(LPD3D11FUNCTIONREFLECTION left, nint right) => left.Handle == right;
		public static bool operator !=(LPD3D11FUNCTIONREFLECTION left, nint right) => left.Handle != right;
		public bool Equals(LPD3D11FUNCTIONREFLECTION other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LPD3D11FUNCTIONREFLECTION handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LPD3D11FUNCTIONREFLECTION [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "LPD3D11FUNCTIONPARAMETERREFLECTION")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LPD3D11FUNCTIONPARAMETERREFLECTION : IEquatable<LPD3D11FUNCTIONPARAMETERREFLECTION>
	{
		public LPD3D11FUNCTIONPARAMETERREFLECTION(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LPD3D11FUNCTIONPARAMETERREFLECTION Null => new LPD3D11FUNCTIONPARAMETERREFLECTION(0);
		public static implicit operator LPD3D11FUNCTIONPARAMETERREFLECTION(nint handle) => new LPD3D11FUNCTIONPARAMETERREFLECTION(handle);
		public static bool operator ==(LPD3D11FUNCTIONPARAMETERREFLECTION left, LPD3D11FUNCTIONPARAMETERREFLECTION right) => left.Handle == right.Handle;
		public static bool operator !=(LPD3D11FUNCTIONPARAMETERREFLECTION left, LPD3D11FUNCTIONPARAMETERREFLECTION right) => left.Handle != right.Handle;
		public static bool operator ==(LPD3D11FUNCTIONPARAMETERREFLECTION left, nint right) => left.Handle == right;
		public static bool operator !=(LPD3D11FUNCTIONPARAMETERREFLECTION left, nint right) => left.Handle != right;
		public bool Equals(LPD3D11FUNCTIONPARAMETERREFLECTION other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LPD3D11FUNCTIONPARAMETERREFLECTION handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LPD3D11FUNCTIONPARAMETERREFLECTION [0x{0}]", Handle.ToString("X"));
	}

}
