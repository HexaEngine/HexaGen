// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D11
{
	public unsafe partial class D3D11
	{
		internal const string LibName = "d3d11";

		/// <summary>
		/// To be documented.
		/// </summary>
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "D3D11CreateDevice")]
		internal static extern HResult D3D11CreateDeviceNative(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext);

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, ppImmediateContext);
			return ret;
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, ppImmediateContext);
			return ret;
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (ID3D11Device** pppDevice = &ppDevice)
			{
				HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
			{
				HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
			{
				HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (ID3D11Device** pppDevice = &ppDevice)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
			{
				HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			ppImmediateContext = default;
			HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
			return ret;
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
				{
					HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			ppImmediateContext = default;
			HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
			return ret;
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
				{
					HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				ppImmediateContext = default;
				HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				ppImmediateContext = default;
				HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (ID3D11Device** pppDevice = &ppDevice)
			{
				fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
				{
					HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				ppImmediateContext = default;
				HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				ppImmediateContext = default;
				HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
			{
				fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
				{
					HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
			{
				ppImmediateContext = default;
				HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
			{
				ppImmediateContext = default;
				HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (ID3D11Device** pppDevice = &ppDevice)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDevice(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "D3D11CreateDeviceAndSwapChain")]
		internal static extern HResult D3D11CreateDeviceAndSwapChainNative(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext);

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
			return ret;
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
			return ret;
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (ID3D11Device** pppDevice = &ppDevice)
			{
				HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
						{
							fixed (ID3D11Device** pppDevice = &ppDevice)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
			{
				HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
			{
				HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
						{
							fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (ID3D11Device** pppDevice = &ppDevice)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
						{
							fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
						{
							fixed (ID3D11Device** pppDevice = &ppDevice)
							{
								fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
								{
									HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, ID3D11DeviceContext** ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
						{
							fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, ppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
			{
				HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			ppImmediateContext = default;
			HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
			return ret;
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			ppImmediateContext = default;
			HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
			return ret;
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				ppImmediateContext = default;
				HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				ppImmediateContext = default;
				HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				ppImmediateContext = default;
				HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				ppImmediateContext = default;
				HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				ppImmediateContext = default;
				HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				ppImmediateContext = default;
				HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (ID3D11Device** pppDevice = &ppDevice)
			{
				fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				ppImmediateContext = default;
				HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				ppImmediateContext = default;
				HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
						{
							ppImmediateContext = default;
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, D3DFeatureLevel* pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
						{
							fixed (ID3D11Device** pppDevice = &ppDevice)
							{
								fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
								{
									HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, D3DFeatureLevel* pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
						{
							ppImmediateContext = default;
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, pFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
			{
				fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
				{
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
			{
				ppImmediateContext = default;
				HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
			{
				ppImmediateContext = default;
				HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							ppImmediateContext = default;
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
						{
							fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
								{
									HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ID3D11Device** ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							ppImmediateContext = default;
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, ppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (ID3D11Device** pppDevice = &ppDevice)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
					{
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
			{
				fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
				{
					ppImmediateContext = default;
					HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							ppImmediateContext = default;
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
								{
									HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, IDXGISwapChain** ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							ppImmediateContext = default;
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, ppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
			{
				fixed (ID3D11Device** pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
						{
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
			{
				fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
				{
					fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
					{
						ppImmediateContext = default;
						HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							ppImmediateContext = default;
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
								{
									HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, DxgiSwapChainDesc* pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							ppImmediateContext = default;
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, pSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
				{
					fixed (ID3D11Device** pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
							{
								HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							ppImmediateContext = default;
							HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
								{
									HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, D3DFeatureLevel* pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
			{
				fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
				{
					fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
					{
						fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
						{
							ppImmediateContext = default;
							HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, pFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
					{
						fixed (ID3D11Device** pppDevice = &ppDevice)
						{
							fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
								{
									HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
						{
							fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								ppImmediateContext = default;
								HResult ret = D3D11CreateDeviceAndSwapChainNative(pAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ref IDXGIAdapter pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref IDXGISwapChain* ppSwapChain, ref ID3D11Device* ppDevice, ref D3DFeatureLevel pFeatureLevel, ref ID3D11DeviceContext* ppImmediateContext) 
		{
			fixed (IDXGIAdapter* ppAdapter = &pAdapter)
			{
				fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
				{
					fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
					{
						fixed (IDXGISwapChain** pppSwapChain = &ppSwapChain)
						{
							fixed (ID3D11Device** pppDevice = &ppDevice)
							{
								fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
								{
									fixed (ID3D11DeviceContext** pppImmediateContext = &ppImmediateContext)
									{
										HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)ppAdapter, driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)pppImmediateContext);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// To be documented.		/// </summary>		public static HResult D3D11CreateDeviceAndSwapChain(ComPtr<IDXGIAdapter> pAdapter, D3DDriverType driverType, nint software, uint flags, ref D3DFeatureLevel pFeatureLevels, uint featureLevels, uint sdkVersion, ref DxgiSwapChainDesc pSwapChainDesc, ref ComPtr<IDXGISwapChain> ppSwapChain, ref ComPtr<ID3D11Device> ppDevice, ref D3DFeatureLevel pFeatureLevel, out ComPtr<ID3D11DeviceContext> ppImmediateContext) 
		{
			fixed (D3DFeatureLevel* ppFeatureLevels = &pFeatureLevels)
			{
				fixed (DxgiSwapChainDesc* ppSwapChainDesc = &pSwapChainDesc)
				{
					fixed (ComPtr<IDXGISwapChain>* pppSwapChain = &ppSwapChain)
					{
						fixed (ComPtr<ID3D11Device>* pppDevice = &ppDevice)
						{
							fixed (D3DFeatureLevel* ppFeatureLevel = &pFeatureLevel)
							{
								ppImmediateContext = default;
								HResult ret = D3D11CreateDeviceAndSwapChainNative((IDXGIAdapter*)pAdapter.GetAddressOf(), driverType, software, flags, (D3DFeatureLevel*)ppFeatureLevels, featureLevels, sdkVersion, (DxgiSwapChainDesc*)ppSwapChainDesc, (IDXGISwapChain**)pppSwapChain, (ID3D11Device**)pppDevice, (D3DFeatureLevel*)ppFeatureLevel, (ID3D11DeviceContext**)ppImmediateContext.GetAddressOf());
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// interface __MIDL_itf_d3d11ShaderTracing_0000_0002 <br/>
		/// [local] <br/>
		/// </summary>
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "D3DDisassemble11Trace")]
		internal static extern HResult D3DDisassemble11TraceNative(void* pSrcData, nuint srcDataSize, ID3D11ShaderTrace* pTrace, uint startStep, uint numSteps, uint flags, ID3D10Blob** ppDisassembly);

		/// <summary>		/// interface __MIDL_itf_d3d11ShaderTracing_0000_0002 <br/>		/// [local] <br/>		/// </summary>		public static HResult D3DDisassemble11Trace(void* pSrcData, nuint srcDataSize, ID3D11ShaderTrace* pTrace, uint startStep, uint numSteps, uint flags, ID3D10Blob** ppDisassembly) 
		{
			HResult ret = D3DDisassemble11TraceNative(pSrcData, srcDataSize, pTrace, startStep, numSteps, flags, ppDisassembly);
			return ret;
		}

		/// <summary>		/// interface __MIDL_itf_d3d11ShaderTracing_0000_0002 <br/>		/// [local] <br/>		/// </summary>		public static HResult D3DDisassemble11Trace(void* pSrcData, nuint srcDataSize, ref ID3D11ShaderTrace pTrace, uint startStep, uint numSteps, uint flags, ID3D10Blob** ppDisassembly) 
		{
			fixed (ID3D11ShaderTrace* ppTrace = &pTrace)
			{
				HResult ret = D3DDisassemble11TraceNative(pSrcData, srcDataSize, (ID3D11ShaderTrace*)ppTrace, startStep, numSteps, flags, ppDisassembly);
				return ret;
			}
		}

		/// <summary>		/// interface __MIDL_itf_d3d11ShaderTracing_0000_0002 <br/>		/// [local] <br/>		/// </summary>		public static HResult D3DDisassemble11Trace(void* pSrcData, nuint srcDataSize, ComPtr<ID3D11ShaderTrace> pTrace, uint startStep, uint numSteps, uint flags, ID3D10Blob** ppDisassembly) 
		{
			HResult ret = D3DDisassemble11TraceNative(pSrcData, srcDataSize, (ID3D11ShaderTrace*)pTrace.GetAddressOf(), startStep, numSteps, flags, ppDisassembly);
			return ret;
		}

		/// <summary>		/// interface __MIDL_itf_d3d11ShaderTracing_0000_0002 <br/>		/// [local] <br/>		/// </summary>		public static HResult D3DDisassemble11Trace(void* pSrcData, nuint srcDataSize, ID3D11ShaderTrace* pTrace, uint startStep, uint numSteps, uint flags, ref ID3D10Blob* ppDisassembly) 
		{
			fixed (ID3D10Blob** pppDisassembly = &ppDisassembly)
			{
				HResult ret = D3DDisassemble11TraceNative(pSrcData, srcDataSize, pTrace, startStep, numSteps, flags, (ID3D10Blob**)pppDisassembly);
				return ret;
			}
		}

		/// <summary>		/// interface __MIDL_itf_d3d11ShaderTracing_0000_0002 <br/>		/// [local] <br/>		/// </summary>		public static HResult D3DDisassemble11Trace(void* pSrcData, nuint srcDataSize, ID3D11ShaderTrace* pTrace, uint startStep, uint numSteps, uint flags, out ComPtr<ID3D10Blob> ppDisassembly) 
		{
			ppDisassembly = default;
			HResult ret = D3DDisassemble11TraceNative(pSrcData, srcDataSize, pTrace, startStep, numSteps, flags, (ID3D10Blob**)ppDisassembly.GetAddressOf());
			return ret;
		}

		/// <summary>		/// interface __MIDL_itf_d3d11ShaderTracing_0000_0002 <br/>		/// [local] <br/>		/// </summary>		public static HResult D3DDisassemble11Trace(void* pSrcData, nuint srcDataSize, ref ID3D11ShaderTrace pTrace, uint startStep, uint numSteps, uint flags, ref ID3D10Blob* ppDisassembly) 
		{
			fixed (ID3D11ShaderTrace* ppTrace = &pTrace)
			{
				fixed (ID3D10Blob** pppDisassembly = &ppDisassembly)
				{
					HResult ret = D3DDisassemble11TraceNative(pSrcData, srcDataSize, (ID3D11ShaderTrace*)ppTrace, startStep, numSteps, flags, (ID3D10Blob**)pppDisassembly);
					return ret;
				}
			}
		}

		/// <summary>		/// interface __MIDL_itf_d3d11ShaderTracing_0000_0002 <br/>		/// [local] <br/>		/// </summary>		public static HResult D3DDisassemble11Trace(void* pSrcData, nuint srcDataSize, ComPtr<ID3D11ShaderTrace> pTrace, uint startStep, uint numSteps, uint flags, out ComPtr<ID3D10Blob> ppDisassembly) 
		{
			ppDisassembly = default;
			HResult ret = D3DDisassemble11TraceNative(pSrcData, srcDataSize, (ID3D11ShaderTrace*)pTrace.GetAddressOf(), startStep, numSteps, flags, (ID3D10Blob**)ppDisassembly.GetAddressOf());
			return ret;
		}

	}
}
