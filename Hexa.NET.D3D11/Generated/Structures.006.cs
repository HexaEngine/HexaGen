// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D11
{

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_VIDEO_DECODER_BUFFER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoDecoderBufferDesc
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BufferType")]
		[NativeName(NativeNameType.Type, "D3D11_VIDEO_DECODER_BUFFER_TYPE")]
		public D3D11VideoDecoderBufferType BufferType;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BufferIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BufferIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DataOffset")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DataOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DataSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DataSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FirstMBaddress")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstMBaddress;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NumMBsInBuffer")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumMBsInBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Width;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Height")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Height;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Stride")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Stride;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ReservedBits")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ReservedBits;

		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pIV")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PIV;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IVSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint IVSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PartialEncryption")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int PartialEncryption;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "EncryptedBlockInfo")]
		[NativeName(NativeNameType.Type, "D3D11_ENCRYPTED_BLOCK_INFO")]
		public D3D11EncryptedBlockInfo EncryptedBlockInfo;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11VideoDecoderBufferDesc(D3D11VideoDecoderBufferType bufferType = default, uint bufferIndex = default, uint dataOffset = default, uint dataSize = default, uint firstMBaddress = default, uint numMBsInBuffer = default, uint width = default, uint height = default, uint stride = default, uint reservedBits = default, void* piV = default, uint ivSize = default, int partialEncryption = default, D3D11EncryptedBlockInfo encryptedBlockInfo = default)
		{
			BufferType = bufferType;
			BufferIndex = bufferIndex;
			DataOffset = dataOffset;
			DataSize = dataSize;
			FirstMBaddress = firstMBaddress;
			NumMBsInBuffer = numMBsInBuffer;
			Width = width;
			Height = height;
			Stride = stride;
			ReservedBits = reservedBits;
			PIV = piV;
			IVSize = ivSize;
			PartialEncryption = partialEncryption;
			EncryptedBlockInfo = encryptedBlockInfo;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_ENCRYPTED_BLOCK_INFO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11EncryptedBlockInfo
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NumEncryptedBytesAtBeginning")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumEncryptedBytesAtBeginning;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NumBytesInSkipPattern")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumBytesInSkipPattern;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NumBytesInEncryptPattern")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumBytesInEncryptPattern;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11EncryptedBlockInfo(uint numEncryptedBytesAtBeginning = default, uint numBytesInSkipPattern = default, uint numBytesInEncryptPattern = default)
		{
			NumEncryptedBytesAtBeginning = numEncryptedBytesAtBeginning;
			NumBytesInSkipPattern = numBytesInSkipPattern;
			NumBytesInEncryptPattern = numBytesInEncryptPattern;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_VIDEO_DECODER_EXTENSION")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoDecoderExtension
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Function")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Function;

		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pPrivateInputData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PPrivateInputData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PrivateInputDataSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PrivateInputDataSize;

		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pPrivateOutputData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PPrivateOutputData;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PrivateOutputDataSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PrivateOutputDataSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ResourceCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ResourceCount;

		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ppResourceList")]
		[NativeName(NativeNameType.Type, "ID3D11Resource**")]
		public unsafe ID3D11Resource** PpResourceList;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11VideoDecoderExtension(uint function = default, void* pPrivateInputData = default, uint privateInputDataSize = default, void* pPrivateOutputData = default, uint privateOutputDataSize = default, uint resourceCount = default, ID3D11Resource** ppResourceList = default)
		{
			Function = function;
			PPrivateInputData = pPrivateInputData;
			PrivateInputDataSize = privateInputDataSize;
			PPrivateOutputData = pPrivateOutputData;
			PrivateOutputDataSize = privateOutputDataSize;
			ResourceCount = resourceCount;
			PpResourceList = ppResourceList;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_VIDEO_COLOR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoColor
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.StructOrClass, "D3D11_VIDEO_COLOR::")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D11VideoColorUnion
		{
			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "YCbCr")]
			[NativeName(NativeNameType.Type, "D3D11_VIDEO_COLOR_YCbCrA")]
			[FieldOffset(0)]
			public D3D11VIDEOCOLORYCbCrA YCbCr;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "RGBA")]
			[NativeName(NativeNameType.Type, "D3D11_VIDEO_COLOR_RGBA")]
			[FieldOffset(0)]
			public D3D11VideoColorRgba RGBA;


			/// <summary>/// To be documented./// </summary>			public unsafe D3D11VideoColorUnion(D3D11VIDEOCOLORYCbCrA yCbCr = default, D3D11VideoColorRgba rgBa = default)
			{
				YCbCr = yCbCr;
				RGBA = rgBa;
			}


		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D11VideoColorUnion Union;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11VideoColor(D3D11VideoColorUnion union = default)
		{
			Union = union;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_VIDEO_COLOR_YCbCrA")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VIDEOCOLORYCbCrA
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Y")]
		[NativeName(NativeNameType.Type, "float")]
		public float Y;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Cb")]
		[NativeName(NativeNameType.Type, "float")]
		public float Cb;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Cr")]
		[NativeName(NativeNameType.Type, "float")]
		public float Cr;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "A")]
		[NativeName(NativeNameType.Type, "float")]
		public float A;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11VIDEOCOLORYCbCrA(float y = default, float cb = default, float cr = default, float a = default)
		{
			Y = y;
			Cb = cb;
			Cr = cr;
			A = a;
		}


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0032 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_VIDEO_COLOR_RGBA")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoColorRgba
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "R")]
		[NativeName(NativeNameType.Type, "float")]
		public float R;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "G")]
		[NativeName(NativeNameType.Type, "float")]
		public float G;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "B")]
		[NativeName(NativeNameType.Type, "float")]
		public float B;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "A")]
		[NativeName(NativeNameType.Type, "float")]
		public float A;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11VideoColorRgba(float r = default, float g = default, float b = default, float a = default)
		{
			R = r;
			G = g;
			B = b;
			A = a;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_VIDEO_PROCESSOR_COLOR_SPACE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoProcessorColorSpace
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Usage")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Usage;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "RGB_Range")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint RGBRange;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "YCbCr_Matrix")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint YCbCrMatrix;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "YCbCr_xvYCC")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint YCbCrXvYCC;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Nominal_Range")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NominalRange;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Reserved")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Reserved;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11VideoProcessorColorSpace(uint usage = default, uint rgbRange = default, uint ycbcrMatrix = default, uint ycbcrXvycc = default, uint nominalRange = default, uint reserved = default)
		{
			Usage = usage;
			RGBRange = rgbRange;
			YCbCrMatrix = ycbcrMatrix;
			YCbCrXvYCC = ycbcrXvycc;
			NominalRange = nominalRange;
			Reserved = reserved;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_VIDEO_PROCESSOR_STREAM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoProcessorStream
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Enable")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int Enable;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OutputIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint OutputIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InputFrameOrField")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InputFrameOrField;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PastFrames")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PastFrames;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FutureFrames")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FutureFrames;

		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ppPastSurfaces")]
		[NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")]
		public unsafe ID3D11VideoProcessorInputView** PpPastSurfaces;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "pInputSurface")]
		[NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView*")]
		public unsafe ID3D11VideoProcessorInputView* PInputSurface;

		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ppFutureSurfaces")]
		[NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")]
		public unsafe ID3D11VideoProcessorInputView** PpFutureSurfaces;

		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ppPastSurfacesRight")]
		[NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")]
		public unsafe ID3D11VideoProcessorInputView** PpPastSurfacesRight;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "pInputSurfaceRight")]
		[NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView*")]
		public unsafe ID3D11VideoProcessorInputView* PInputSurfaceRight;

		/// <summary>
		/// [annotation] <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ppFutureSurfacesRight")]
		[NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")]
		public unsafe ID3D11VideoProcessorInputView** PpFutureSurfacesRight;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11VideoProcessorStream(int enable = default, uint outputIndex = default, uint inputFrameOrField = default, uint pastFrames = default, uint futureFrames = default, ID3D11VideoProcessorInputView** ppPastSurfaces = default, ID3D11VideoProcessorInputView* pInputSurface = default, ID3D11VideoProcessorInputView** ppFutureSurfaces = default, ID3D11VideoProcessorInputView** ppPastSurfacesRight = default, ID3D11VideoProcessorInputView* pInputSurfaceRight = default, ID3D11VideoProcessorInputView** ppFutureSurfacesRight = default)
		{
			Enable = enable;
			OutputIndex = outputIndex;
			InputFrameOrField = inputFrameOrField;
			PastFrames = pastFrames;
			FutureFrames = futureFrames;
			PpPastSurfaces = ppPastSurfaces;
			PInputSurface = pInputSurface;
			PpFutureSurfaces = ppFutureSurfaces;
			PpPastSurfacesRight = ppPastSurfacesRight;
			PInputSurfaceRight = pInputSurfaceRight;
			PpFutureSurfacesRight = ppFutureSurfacesRight;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_CONFIGURE_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedConfigureOutput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "omac")]
		[NativeName(NativeNameType.Type, "D3D11_OMAC")]
		public D3D11Omac Omac;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConfigureType")]
		[NativeName(NativeNameType.Type, "GUID")]
		public Guid ConfigureType;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "hChannel")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint HChannel;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SequenceNumber")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SequenceNumber;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ReturnCode")]
		[NativeName(NativeNameType.Type, "HRESULT")]
		public int ReturnCode;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedConfigureOutput(D3D11Omac omac = default, Guid configureType = default, nint hChannel = default, uint sequenceNumber = default, int returnCode = default)
		{
			Omac = omac;
			ConfigureType = configureType;
			HChannel = hChannel;
			SequenceNumber = sequenceNumber;
			ReturnCode = returnCode;
		}


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0033 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_OMAC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11Omac
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Omac")]
		[NativeName(NativeNameType.Type, "BYTE[16]")]
		public byte Omac_0;
		public byte Omac_1;
		public byte Omac_2;
		public byte Omac_3;
		public byte Omac_4;
		public byte Omac_5;
		public byte Omac_6;
		public byte Omac_7;
		public byte Omac_8;
		public byte Omac_9;
		public byte Omac_10;
		public byte Omac_11;
		public byte Omac_12;
		public byte Omac_13;
		public byte Omac_14;
		public byte Omac_15;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11Omac(byte* omac = default)
		{
			if (omac != default)
			{
				Omac_0 = omac[0];
				Omac_1 = omac[1];
				Omac_2 = omac[2];
				Omac_3 = omac[3];
				Omac_4 = omac[4];
				Omac_5 = omac[5];
				Omac_6 = omac[6];
				Omac_7 = omac[7];
				Omac_8 = omac[8];
				Omac_9 = omac[9];
				Omac_10 = omac[10];
				Omac_11 = omac[11];
				Omac_12 = omac[12];
				Omac_13 = omac[13];
				Omac_14 = omac[14];
				Omac_15 = omac[15];
			}
		}

		/// <summary>/// To be documented./// </summary>		public unsafe D3D11Omac(Span<byte> omac = default)
		{
			if (omac != default)
			{
				Omac_0 = omac[0];
				Omac_1 = omac[1];
				Omac_2 = omac[2];
				Omac_3 = omac[3];
				Omac_4 = omac[4];
				Omac_5 = omac[5];
				Omac_6 = omac[6];
				Omac_7 = omac[7];
				Omac_8 = omac[8];
				Omac_9 = omac[9];
				Omac_10 = omac[10];
				Omac_11 = omac[11];
				Omac_12 = omac[12];
				Omac_13 = omac[13];
				Omac_14 = omac[14];
				Omac_15 = omac[15];
			}
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[Guid("10ec4d5b-975a-4689-b9e4-d0aac30fe333")]
	[NativeName(NativeNameType.StructOrClass, "ID3D11VideoDevice")]
	public partial struct ID3D11VideoDevice : IComObject, IComObject<ID3D11VideoDevice>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("10ec4d5b-975a-4689-b9e4-d0aac30fe333");

		public unsafe ID3D11VideoDevice (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, void**, int>)(*LpVtbl))(ptr, riid, ppvObject);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] void** ppvObject) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, ppvObject);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppvObject = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)(ComUtils.GuidPtrOf<T>()), (void**)ppvObject.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int QueryInterface<T>([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObject")] [NativeName(NativeNameType.Type, "void**")] out ComPtr<T> ppvObject) where T : unmanaged, IComObject, IComObject<T>
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				ppvObject = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, void**, int>)(*LpVtbl))(ptr, (Guid*)priid, (void**)ppvObject.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "AddRef")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint AddRef() 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "Release")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint Release() 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoder")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoder([NativeName(NativeNameType.Param, "pVideoDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_DESC*")] D3D11VideoDecoderDesc* pVideoDesc, [NativeName(NativeNameType.Param, "pConfig")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_CONFIG*")] D3D11VideoDecoderConfig* pConfig, [NativeName(NativeNameType.Param, "ppDecoder")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoder**")] ID3D11VideoDecoder** ppDecoder) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, ID3D11VideoDecoder**, int>)(LpVtbl[3]))(ptr, pVideoDesc, pConfig, ppDecoder);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoder")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoder([NativeName(NativeNameType.Param, "pVideoDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_DESC*")] ref D3D11VideoDecoderDesc pVideoDesc, [NativeName(NativeNameType.Param, "pConfig")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_CONFIG*")] D3D11VideoDecoderConfig* pConfig, [NativeName(NativeNameType.Param, "ppDecoder")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoder**")] ID3D11VideoDecoder** ppDecoder) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppVideoDesc = &pVideoDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, ID3D11VideoDecoder**, int>)(LpVtbl[3]))(ptr, (D3D11VideoDecoderDesc*)ppVideoDesc, pConfig, ppDecoder);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoder")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoder([NativeName(NativeNameType.Param, "pVideoDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_DESC*")] D3D11VideoDecoderDesc* pVideoDesc, [NativeName(NativeNameType.Param, "pConfig")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_CONFIG*")] ref D3D11VideoDecoderConfig pConfig, [NativeName(NativeNameType.Param, "ppDecoder")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoder**")] ID3D11VideoDecoder** ppDecoder) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppConfig = &pConfig)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, ID3D11VideoDecoder**, int>)(LpVtbl[3]))(ptr, pVideoDesc, (D3D11VideoDecoderConfig*)ppConfig, ppDecoder);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoder")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoder([NativeName(NativeNameType.Param, "pVideoDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_DESC*")] ref D3D11VideoDecoderDesc pVideoDesc, [NativeName(NativeNameType.Param, "pConfig")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_CONFIG*")] ref D3D11VideoDecoderConfig pConfig, [NativeName(NativeNameType.Param, "ppDecoder")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoder**")] ID3D11VideoDecoder** ppDecoder) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppVideoDesc = &pVideoDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppConfig = &pConfig)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, ID3D11VideoDecoder**, int>)(LpVtbl[3]))(ptr, (D3D11VideoDecoderDesc*)ppVideoDesc, (D3D11VideoDecoderConfig*)ppConfig, ppDecoder);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoder")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoder([NativeName(NativeNameType.Param, "pVideoDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_DESC*")] D3D11VideoDecoderDesc* pVideoDesc, [NativeName(NativeNameType.Param, "pConfig")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_CONFIG*")] D3D11VideoDecoderConfig* pConfig, [NativeName(NativeNameType.Param, "ppDecoder")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoder**")] ref ID3D11VideoDecoder* ppDecoder) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoder** pppDecoder = &ppDecoder)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, ID3D11VideoDecoder**, int>)(LpVtbl[3]))(ptr, pVideoDesc, pConfig, (ID3D11VideoDecoder**)pppDecoder);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoder")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoder([NativeName(NativeNameType.Param, "pVideoDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_DESC*")] D3D11VideoDecoderDesc* pVideoDesc, [NativeName(NativeNameType.Param, "pConfig")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_CONFIG*")] D3D11VideoDecoderConfig* pConfig, [NativeName(NativeNameType.Param, "ppDecoder")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoder**")] out ComPtr<ID3D11VideoDecoder> ppDecoder) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppDecoder = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, ID3D11VideoDecoder**, int>)(LpVtbl[3]))(ptr, pVideoDesc, pConfig, (ID3D11VideoDecoder**)ppDecoder.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoder")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoder([NativeName(NativeNameType.Param, "pVideoDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_DESC*")] ref D3D11VideoDecoderDesc pVideoDesc, [NativeName(NativeNameType.Param, "pConfig")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_CONFIG*")] D3D11VideoDecoderConfig* pConfig, [NativeName(NativeNameType.Param, "ppDecoder")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoder**")] ref ID3D11VideoDecoder* ppDecoder) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppVideoDesc = &pVideoDesc)
			{
				fixed (ID3D11VideoDecoder** pppDecoder = &ppDecoder)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, ID3D11VideoDecoder**, int>)(LpVtbl[3]))(ptr, (D3D11VideoDecoderDesc*)ppVideoDesc, pConfig, (ID3D11VideoDecoder**)pppDecoder);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoder")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoder([NativeName(NativeNameType.Param, "pVideoDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_DESC*")] ref D3D11VideoDecoderDesc pVideoDesc, [NativeName(NativeNameType.Param, "pConfig")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_CONFIG*")] D3D11VideoDecoderConfig* pConfig, [NativeName(NativeNameType.Param, "ppDecoder")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoder**")] out ComPtr<ID3D11VideoDecoder> ppDecoder) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppVideoDesc = &pVideoDesc)
			{
				ppDecoder = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, ID3D11VideoDecoder**, int>)(LpVtbl[3]))(ptr, (D3D11VideoDecoderDesc*)ppVideoDesc, pConfig, (ID3D11VideoDecoder**)ppDecoder.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoder")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoder([NativeName(NativeNameType.Param, "pVideoDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_DESC*")] D3D11VideoDecoderDesc* pVideoDesc, [NativeName(NativeNameType.Param, "pConfig")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_CONFIG*")] ref D3D11VideoDecoderConfig pConfig, [NativeName(NativeNameType.Param, "ppDecoder")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoder**")] ref ID3D11VideoDecoder* ppDecoder) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppConfig = &pConfig)
			{
				fixed (ID3D11VideoDecoder** pppDecoder = &ppDecoder)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, ID3D11VideoDecoder**, int>)(LpVtbl[3]))(ptr, pVideoDesc, (D3D11VideoDecoderConfig*)ppConfig, (ID3D11VideoDecoder**)pppDecoder);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoder")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoder([NativeName(NativeNameType.Param, "pVideoDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_DESC*")] D3D11VideoDecoderDesc* pVideoDesc, [NativeName(NativeNameType.Param, "pConfig")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_CONFIG*")] ref D3D11VideoDecoderConfig pConfig, [NativeName(NativeNameType.Param, "ppDecoder")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoder**")] out ComPtr<ID3D11VideoDecoder> ppDecoder) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppConfig = &pConfig)
			{
				ppDecoder = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, ID3D11VideoDecoder**, int>)(LpVtbl[3]))(ptr, pVideoDesc, (D3D11VideoDecoderConfig*)ppConfig, (ID3D11VideoDecoder**)ppDecoder.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoder")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoder([NativeName(NativeNameType.Param, "pVideoDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_DESC*")] ref D3D11VideoDecoderDesc pVideoDesc, [NativeName(NativeNameType.Param, "pConfig")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_CONFIG*")] ref D3D11VideoDecoderConfig pConfig, [NativeName(NativeNameType.Param, "ppDecoder")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoder**")] ref ID3D11VideoDecoder* ppDecoder) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppVideoDesc = &pVideoDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppConfig = &pConfig)
				{
					fixed (ID3D11VideoDecoder** pppDecoder = &ppDecoder)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, ID3D11VideoDecoder**, int>)(LpVtbl[3]))(ptr, (D3D11VideoDecoderDesc*)ppVideoDesc, (D3D11VideoDecoderConfig*)ppConfig, (ID3D11VideoDecoder**)pppDecoder);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoder")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoder([NativeName(NativeNameType.Param, "pVideoDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_DESC*")] ref D3D11VideoDecoderDesc pVideoDesc, [NativeName(NativeNameType.Param, "pConfig")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_CONFIG*")] ref D3D11VideoDecoderConfig pConfig, [NativeName(NativeNameType.Param, "ppDecoder")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoder**")] out ComPtr<ID3D11VideoDecoder> ppDecoder) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppVideoDesc = &pVideoDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppConfig = &pConfig)
				{
					ppDecoder = default;
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, D3D11VideoDecoderConfig*, ID3D11VideoDecoder**, int>)(LpVtbl[3]))(ptr, (D3D11VideoDecoderDesc*)ppVideoDesc, (D3D11VideoDecoderConfig*)ppConfig, (ID3D11VideoDecoder**)ppDecoder.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessor")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessor([NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "RateConversionIndex")] [NativeName(NativeNameType.Type, "UINT")] uint rateConversionIndex, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessor**")] ID3D11VideoProcessor** ppVideoProcessor) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11VideoProcessorEnumerator*, uint, ID3D11VideoProcessor**, int>)(LpVtbl[4]))(ptr, pEnum, rateConversionIndex, ppVideoProcessor);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessor")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessor([NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ref ID3D11VideoProcessorEnumerator pEnum, [NativeName(NativeNameType.Param, "RateConversionIndex")] [NativeName(NativeNameType.Type, "UINT")] uint rateConversionIndex, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessor**")] ID3D11VideoProcessor** ppVideoProcessor) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11VideoProcessorEnumerator*, uint, ID3D11VideoProcessor**, int>)(LpVtbl[4]))(ptr, (ID3D11VideoProcessorEnumerator*)ppEnum, rateConversionIndex, ppVideoProcessor);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessor")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessor([NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ComPtr<ID3D11VideoProcessorEnumerator> pEnum, [NativeName(NativeNameType.Param, "RateConversionIndex")] [NativeName(NativeNameType.Type, "UINT")] uint rateConversionIndex, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessor**")] ID3D11VideoProcessor** ppVideoProcessor) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11VideoProcessorEnumerator*, uint, ID3D11VideoProcessor**, int>)(LpVtbl[4]))(ptr, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, rateConversionIndex, ppVideoProcessor);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessor")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessor([NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "RateConversionIndex")] [NativeName(NativeNameType.Type, "UINT")] uint rateConversionIndex, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessor**")] ref ID3D11VideoProcessor* ppVideoProcessor) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessor** pppVideoProcessor = &ppVideoProcessor)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11VideoProcessorEnumerator*, uint, ID3D11VideoProcessor**, int>)(LpVtbl[4]))(ptr, pEnum, rateConversionIndex, (ID3D11VideoProcessor**)pppVideoProcessor);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessor")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessor([NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "RateConversionIndex")] [NativeName(NativeNameType.Type, "UINT")] uint rateConversionIndex, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessor**")] out ComPtr<ID3D11VideoProcessor> ppVideoProcessor) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppVideoProcessor = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11VideoProcessorEnumerator*, uint, ID3D11VideoProcessor**, int>)(LpVtbl[4]))(ptr, pEnum, rateConversionIndex, (ID3D11VideoProcessor**)ppVideoProcessor.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessor")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessor([NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ref ID3D11VideoProcessorEnumerator pEnum, [NativeName(NativeNameType.Param, "RateConversionIndex")] [NativeName(NativeNameType.Type, "UINT")] uint rateConversionIndex, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessor**")] ref ID3D11VideoProcessor* ppVideoProcessor) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				fixed (ID3D11VideoProcessor** pppVideoProcessor = &ppVideoProcessor)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11VideoProcessorEnumerator*, uint, ID3D11VideoProcessor**, int>)(LpVtbl[4]))(ptr, (ID3D11VideoProcessorEnumerator*)ppEnum, rateConversionIndex, (ID3D11VideoProcessor**)pppVideoProcessor);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessor")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessor([NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ComPtr<ID3D11VideoProcessorEnumerator> pEnum, [NativeName(NativeNameType.Param, "RateConversionIndex")] [NativeName(NativeNameType.Type, "UINT")] uint rateConversionIndex, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessor**")] out ComPtr<ID3D11VideoProcessor> ppVideoProcessor) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppVideoProcessor = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11VideoProcessorEnumerator*, uint, ID3D11VideoProcessor**, int>)(LpVtbl[4]))(ptr, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, rateConversionIndex, (ID3D11VideoProcessor**)ppVideoProcessor.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateAuthenticatedChannel")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateAuthenticatedChannel([NativeName(NativeNameType.Param, "ChannelType")] [NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_CHANNEL_TYPE")] D3D11AuthenticatedChannelType channelType, [NativeName(NativeNameType.Param, "ppAuthenticatedChannel")] [NativeName(NativeNameType.Type, "ID3D11AuthenticatedChannel**")] ID3D11AuthenticatedChannel** ppAuthenticatedChannel) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11AuthenticatedChannelType, ID3D11AuthenticatedChannel**, int>)(LpVtbl[5]))(ptr, channelType, ppAuthenticatedChannel);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateAuthenticatedChannel")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateAuthenticatedChannel([NativeName(NativeNameType.Param, "ChannelType")] [NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_CHANNEL_TYPE")] D3D11AuthenticatedChannelType channelType, [NativeName(NativeNameType.Param, "ppAuthenticatedChannel")] [NativeName(NativeNameType.Type, "ID3D11AuthenticatedChannel**")] ref ID3D11AuthenticatedChannel* ppAuthenticatedChannel) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11AuthenticatedChannel** pppAuthenticatedChannel = &ppAuthenticatedChannel)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11AuthenticatedChannelType, ID3D11AuthenticatedChannel**, int>)(LpVtbl[5]))(ptr, channelType, (ID3D11AuthenticatedChannel**)pppAuthenticatedChannel);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateAuthenticatedChannel")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateAuthenticatedChannel([NativeName(NativeNameType.Param, "ChannelType")] [NativeName(NativeNameType.Type, "D3D11_AUTHENTICATED_CHANNEL_TYPE")] D3D11AuthenticatedChannelType channelType, [NativeName(NativeNameType.Param, "ppAuthenticatedChannel")] [NativeName(NativeNameType.Type, "ID3D11AuthenticatedChannel**")] out ComPtr<ID3D11AuthenticatedChannel> ppAuthenticatedChannel) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppAuthenticatedChannel = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11AuthenticatedChannelType, ID3D11AuthenticatedChannel**, int>)(LpVtbl[5]))(ptr, channelType, (ID3D11AuthenticatedChannel**)ppAuthenticatedChannel.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] ID3D11CryptoSession** ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, pCryptoType, pDecoderProfile, pKeyExchangeType, ppCryptoSession);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] ID3D11CryptoSession** ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, pKeyExchangeType, ppCryptoSession);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] ID3D11CryptoSession** ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, pKeyExchangeType, ppCryptoSession);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] ID3D11CryptoSession** ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, pKeyExchangeType, ppCryptoSession);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] ID3D11CryptoSession** ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, pCryptoType, pDecoderProfile, (Guid*)ppKeyExchangeType, ppCryptoSession);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] ID3D11CryptoSession** ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, (Guid*)ppKeyExchangeType, ppCryptoSession);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] ID3D11CryptoSession** ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, ppCryptoSession);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] ID3D11CryptoSession** ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, ppCryptoSession);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] ref ID3D11CryptoSession* ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11CryptoSession** pppCryptoSession = &ppCryptoSession)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, pCryptoType, pDecoderProfile, pKeyExchangeType, (ID3D11CryptoSession**)pppCryptoSession);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] out ComPtr<ID3D11CryptoSession> ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppCryptoSession = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, pCryptoType, pDecoderProfile, pKeyExchangeType, (ID3D11CryptoSession**)ppCryptoSession.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] ref ID3D11CryptoSession* ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (ID3D11CryptoSession** pppCryptoSession = &ppCryptoSession)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, pKeyExchangeType, (ID3D11CryptoSession**)pppCryptoSession);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] out ComPtr<ID3D11CryptoSession> ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				ppCryptoSession = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, pKeyExchangeType, (ID3D11CryptoSession**)ppCryptoSession.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] ref ID3D11CryptoSession* ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (ID3D11CryptoSession** pppCryptoSession = &ppCryptoSession)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, pKeyExchangeType, (ID3D11CryptoSession**)pppCryptoSession);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] out ComPtr<ID3D11CryptoSession> ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				ppCryptoSession = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, pKeyExchangeType, (ID3D11CryptoSession**)ppCryptoSession.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] ref ID3D11CryptoSession* ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (ID3D11CryptoSession** pppCryptoSession = &ppCryptoSession)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, pKeyExchangeType, (ID3D11CryptoSession**)pppCryptoSession);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] out ComPtr<ID3D11CryptoSession> ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					ppCryptoSession = default;
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, pKeyExchangeType, (ID3D11CryptoSession**)ppCryptoSession.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] ref ID3D11CryptoSession* ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
			{
				fixed (ID3D11CryptoSession** pppCryptoSession = &ppCryptoSession)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, pCryptoType, pDecoderProfile, (Guid*)ppKeyExchangeType, (ID3D11CryptoSession**)pppCryptoSession);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] out ComPtr<ID3D11CryptoSession> ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
			{
				ppCryptoSession = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, pCryptoType, pDecoderProfile, (Guid*)ppKeyExchangeType, (ID3D11CryptoSession**)ppCryptoSession.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] ref ID3D11CryptoSession* ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					fixed (ID3D11CryptoSession** pppCryptoSession = &ppCryptoSession)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, (Guid*)ppKeyExchangeType, (ID3D11CryptoSession**)pppCryptoSession);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] out ComPtr<ID3D11CryptoSession> ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					ppCryptoSession = default;
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, (Guid*)ppKeyExchangeType, (ID3D11CryptoSession**)ppCryptoSession.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] ref ID3D11CryptoSession* ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					fixed (ID3D11CryptoSession** pppCryptoSession = &ppCryptoSession)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, (ID3D11CryptoSession**)pppCryptoSession);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] out ComPtr<ID3D11CryptoSession> ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					ppCryptoSession = default;
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, (ID3D11CryptoSession**)ppCryptoSession.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] ref ID3D11CryptoSession* ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
					{
						fixed (ID3D11CryptoSession** pppCryptoSession = &ppCryptoSession)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, (ID3D11CryptoSession**)pppCryptoSession);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateCryptoSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateCryptoSession([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pKeyExchangeType, [NativeName(NativeNameType.Param, "ppCryptoSession")] [NativeName(NativeNameType.Type, "ID3D11CryptoSession**")] out ComPtr<ID3D11CryptoSession> ppCryptoSession) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
					{
						ppCryptoSession = default;
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, Guid*, ID3D11CryptoSession**, int>)(LpVtbl[6]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, (Guid*)ppKeyExchangeType, (ID3D11CryptoSession**)ppCryptoSession.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoderOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoderOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*")] D3D11VideoDecoderOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVDOVView")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoderOutputView**")] ID3D11VideoDecoderOutputView** ppVDOVView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, int>)(LpVtbl[7]))(ptr, pResource, pDesc, ppVDOVView);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoderOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoderOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ref ID3D11Resource pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*")] D3D11VideoDecoderOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVDOVView")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoderOutputView**")] ID3D11VideoDecoderOutputView** ppVDOVView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, int>)(LpVtbl[7]))(ptr, (ID3D11Resource*)ppResource, pDesc, ppVDOVView);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoderOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoderOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ComPtr<ID3D11Resource> pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*")] D3D11VideoDecoderOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVDOVView")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoderOutputView**")] ID3D11VideoDecoderOutputView** ppVDOVView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, int>)(LpVtbl[7]))(ptr, (ID3D11Resource*)pResource.Handle, pDesc, ppVDOVView);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoderOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoderOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*")] ref D3D11VideoDecoderOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVDOVView")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoderOutputView**")] ID3D11VideoDecoderOutputView** ppVDOVView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderOutputViewDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, int>)(LpVtbl[7]))(ptr, pResource, (D3D11VideoDecoderOutputViewDesc*)ppDesc, ppVDOVView);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoderOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoderOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ref ID3D11Resource pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*")] ref D3D11VideoDecoderOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVDOVView")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoderOutputView**")] ID3D11VideoDecoderOutputView** ppVDOVView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11VideoDecoderOutputViewDesc* ppDesc = &pDesc)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, int>)(LpVtbl[7]))(ptr, (ID3D11Resource*)ppResource, (D3D11VideoDecoderOutputViewDesc*)ppDesc, ppVDOVView);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoderOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoderOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ComPtr<ID3D11Resource> pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*")] ref D3D11VideoDecoderOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVDOVView")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoderOutputView**")] ID3D11VideoDecoderOutputView** ppVDOVView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderOutputViewDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, int>)(LpVtbl[7]))(ptr, (ID3D11Resource*)pResource.Handle, (D3D11VideoDecoderOutputViewDesc*)ppDesc, ppVDOVView);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoderOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoderOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*")] D3D11VideoDecoderOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVDOVView")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoderOutputView**")] ref ID3D11VideoDecoderOutputView* ppVDOVView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoDecoderOutputView** pppVDOVView = &ppVDOVView)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, int>)(LpVtbl[7]))(ptr, pResource, pDesc, (ID3D11VideoDecoderOutputView**)pppVDOVView);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoderOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoderOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*")] D3D11VideoDecoderOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVDOVView")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoderOutputView**")] out ComPtr<ID3D11VideoDecoderOutputView> ppVDOVView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppVDOVView = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, int>)(LpVtbl[7]))(ptr, pResource, pDesc, (ID3D11VideoDecoderOutputView**)ppVDOVView.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoderOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoderOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ref ID3D11Resource pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*")] D3D11VideoDecoderOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVDOVView")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoderOutputView**")] ref ID3D11VideoDecoderOutputView* ppVDOVView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoDecoderOutputView** pppVDOVView = &ppVDOVView)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, int>)(LpVtbl[7]))(ptr, (ID3D11Resource*)ppResource, pDesc, (ID3D11VideoDecoderOutputView**)pppVDOVView);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoderOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoderOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ComPtr<ID3D11Resource> pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*")] D3D11VideoDecoderOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVDOVView")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoderOutputView**")] out ComPtr<ID3D11VideoDecoderOutputView> ppVDOVView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppVDOVView = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, int>)(LpVtbl[7]))(ptr, (ID3D11Resource*)pResource.Handle, pDesc, (ID3D11VideoDecoderOutputView**)ppVDOVView.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoderOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoderOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*")] ref D3D11VideoDecoderOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVDOVView")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoderOutputView**")] ref ID3D11VideoDecoderOutputView* ppVDOVView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderOutputViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11VideoDecoderOutputView** pppVDOVView = &ppVDOVView)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, int>)(LpVtbl[7]))(ptr, pResource, (D3D11VideoDecoderOutputViewDesc*)ppDesc, (ID3D11VideoDecoderOutputView**)pppVDOVView);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoderOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoderOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*")] ref D3D11VideoDecoderOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVDOVView")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoderOutputView**")] out ComPtr<ID3D11VideoDecoderOutputView> ppVDOVView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderOutputViewDesc* ppDesc = &pDesc)
			{
				ppVDOVView = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, int>)(LpVtbl[7]))(ptr, pResource, (D3D11VideoDecoderOutputViewDesc*)ppDesc, (ID3D11VideoDecoderOutputView**)ppVDOVView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoderOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoderOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ref ID3D11Resource pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*")] ref D3D11VideoDecoderOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVDOVView")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoderOutputView**")] ref ID3D11VideoDecoderOutputView* ppVDOVView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11VideoDecoderOutputViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11VideoDecoderOutputView** pppVDOVView = &ppVDOVView)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, int>)(LpVtbl[7]))(ptr, (ID3D11Resource*)ppResource, (D3D11VideoDecoderOutputViewDesc*)ppDesc, (ID3D11VideoDecoderOutputView**)pppVDOVView);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoDecoderOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoDecoderOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ComPtr<ID3D11Resource> pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC*")] ref D3D11VideoDecoderOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVDOVView")] [NativeName(NativeNameType.Type, "ID3D11VideoDecoderOutputView**")] out ComPtr<ID3D11VideoDecoderOutputView> ppVDOVView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderOutputViewDesc* ppDesc = &pDesc)
			{
				ppVDOVView = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, D3D11VideoDecoderOutputViewDesc*, ID3D11VideoDecoderOutputView**, int>)(LpVtbl[7]))(ptr, (ID3D11Resource*)pResource.Handle, (D3D11VideoDecoderOutputViewDesc*)ppDesc, (ID3D11VideoDecoderOutputView**)ppVDOVView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] D3D11VideoProcessorInputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, pResource, pEnum, pDesc, ppVPIView);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ref ID3D11Resource pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] D3D11VideoProcessorInputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, (ID3D11Resource*)ppResource, pEnum, pDesc, ppVPIView);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ComPtr<ID3D11Resource> pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] D3D11VideoProcessorInputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, (ID3D11Resource*)pResource.Handle, pEnum, pDesc, ppVPIView);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ref ID3D11VideoProcessorEnumerator pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] D3D11VideoProcessorInputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, ppVPIView);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ComPtr<ID3D11VideoProcessorEnumerator> pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] D3D11VideoProcessorInputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, pDesc, ppVPIView);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ref ID3D11Resource pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ref ID3D11VideoProcessorEnumerator pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] D3D11VideoProcessorInputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, ppVPIView);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ComPtr<ID3D11Resource> pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ComPtr<ID3D11VideoProcessorEnumerator> pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] D3D11VideoProcessorInputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, (ID3D11Resource*)pResource.Handle, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, pDesc, ppVPIView);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] ref D3D11VideoProcessorInputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, pResource, pEnum, (D3D11VideoProcessorInputViewDesc*)ppDesc, ppVPIView);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ref ID3D11Resource pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] ref D3D11VideoProcessorInputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, (ID3D11Resource*)ppResource, pEnum, (D3D11VideoProcessorInputViewDesc*)ppDesc, ppVPIView);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ComPtr<ID3D11Resource> pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] ref D3D11VideoProcessorInputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, (ID3D11Resource*)pResource.Handle, pEnum, (D3D11VideoProcessorInputViewDesc*)ppDesc, ppVPIView);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ref ID3D11VideoProcessorEnumerator pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] ref D3D11VideoProcessorInputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (D3D11VideoProcessorInputViewDesc*)ppDesc, ppVPIView);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ComPtr<ID3D11VideoProcessorEnumerator> pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] ref D3D11VideoProcessorInputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, (D3D11VideoProcessorInputViewDesc*)ppDesc, ppVPIView);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ref ID3D11Resource pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ref ID3D11VideoProcessorEnumerator pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] ref D3D11VideoProcessorInputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (D3D11VideoProcessorInputViewDesc*)ppDesc, ppVPIView);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ComPtr<ID3D11Resource> pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ComPtr<ID3D11VideoProcessorEnumerator> pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] ref D3D11VideoProcessorInputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ID3D11VideoProcessorInputView** ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, (ID3D11Resource*)pResource.Handle, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, (D3D11VideoProcessorInputViewDesc*)ppDesc, ppVPIView);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] D3D11VideoProcessorInputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ref ID3D11VideoProcessorInputView* ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, pResource, pEnum, pDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] D3D11VideoProcessorInputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] out ComPtr<ID3D11VideoProcessorInputView> ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppVPIView = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, pResource, pEnum, pDesc, (ID3D11VideoProcessorInputView**)ppVPIView.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ref ID3D11Resource pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] D3D11VideoProcessorInputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ref ID3D11VideoProcessorInputView* ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, (ID3D11Resource*)ppResource, pEnum, pDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ComPtr<ID3D11Resource> pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] D3D11VideoProcessorInputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] out ComPtr<ID3D11VideoProcessorInputView> ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppVPIView = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, (ID3D11Resource*)pResource.Handle, pEnum, pDesc, (ID3D11VideoProcessorInputView**)ppVPIView.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ref ID3D11VideoProcessorEnumerator pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] D3D11VideoProcessorInputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ref ID3D11VideoProcessorInputView* ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ComPtr<ID3D11VideoProcessorEnumerator> pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] D3D11VideoProcessorInputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] out ComPtr<ID3D11VideoProcessorInputView> ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppVPIView = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, pDesc, (ID3D11VideoProcessorInputView**)ppVPIView.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ref ID3D11Resource pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ref ID3D11VideoProcessorEnumerator pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] D3D11VideoProcessorInputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ref ID3D11VideoProcessorInputView* ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ComPtr<ID3D11Resource> pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ComPtr<ID3D11VideoProcessorEnumerator> pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] D3D11VideoProcessorInputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] out ComPtr<ID3D11VideoProcessorInputView> ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppVPIView = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, (ID3D11Resource*)pResource.Handle, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, pDesc, (ID3D11VideoProcessorInputView**)ppVPIView.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] ref D3D11VideoProcessorInputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ref ID3D11VideoProcessorInputView* ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, pResource, pEnum, (D3D11VideoProcessorInputViewDesc*)ppDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] ref D3D11VideoProcessorInputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] out ComPtr<ID3D11VideoProcessorInputView> ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				ppVPIView = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, pResource, pEnum, (D3D11VideoProcessorInputViewDesc*)ppDesc, (ID3D11VideoProcessorInputView**)ppVPIView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ref ID3D11Resource pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] ref D3D11VideoProcessorInputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ref ID3D11VideoProcessorInputView* ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, (ID3D11Resource*)ppResource, pEnum, (D3D11VideoProcessorInputViewDesc*)ppDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ComPtr<ID3D11Resource> pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] ref D3D11VideoProcessorInputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] out ComPtr<ID3D11VideoProcessorInputView> ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				ppVPIView = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, (ID3D11Resource*)pResource.Handle, pEnum, (D3D11VideoProcessorInputViewDesc*)ppDesc, (ID3D11VideoProcessorInputView**)ppVPIView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ref ID3D11VideoProcessorEnumerator pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] ref D3D11VideoProcessorInputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ref ID3D11VideoProcessorInputView* ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (D3D11VideoProcessorInputViewDesc*)ppDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ComPtr<ID3D11VideoProcessorEnumerator> pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] ref D3D11VideoProcessorInputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] out ComPtr<ID3D11VideoProcessorInputView> ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				ppVPIView = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, (D3D11VideoProcessorInputViewDesc*)ppDesc, (ID3D11VideoProcessorInputView**)ppVPIView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ref ID3D11Resource pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ref ID3D11VideoProcessorEnumerator pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] ref D3D11VideoProcessorInputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] ref ID3D11VideoProcessorInputView* ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
					{
						fixed (ID3D11VideoProcessorInputView** pppVPIView = &ppVPIView)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (D3D11VideoProcessorInputViewDesc*)ppDesc, (ID3D11VideoProcessorInputView**)pppVPIView);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorInputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorInputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ComPtr<ID3D11Resource> pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ComPtr<ID3D11VideoProcessorEnumerator> pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC*")] ref D3D11VideoProcessorInputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPIView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorInputView**")] out ComPtr<ID3D11VideoProcessorInputView> ppVPIView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorInputViewDesc* ppDesc = &pDesc)
			{
				ppVPIView = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorInputViewDesc*, ID3D11VideoProcessorInputView**, int>)(LpVtbl[8]))(ptr, (ID3D11Resource*)pResource.Handle, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, (D3D11VideoProcessorInputViewDesc*)ppDesc, (ID3D11VideoProcessorInputView**)ppVPIView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] D3D11VideoProcessorOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, pResource, pEnum, pDesc, ppVPOView);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ref ID3D11Resource pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] D3D11VideoProcessorOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppResource, pEnum, pDesc, ppVPOView);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ComPtr<ID3D11Resource> pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] D3D11VideoProcessorOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, (ID3D11Resource*)pResource.Handle, pEnum, pDesc, ppVPOView);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ref ID3D11VideoProcessorEnumerator pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] D3D11VideoProcessorOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, ppVPOView);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ComPtr<ID3D11VideoProcessorEnumerator> pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] D3D11VideoProcessorOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, pDesc, ppVPOView);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ref ID3D11Resource pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ref ID3D11VideoProcessorEnumerator pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] D3D11VideoProcessorOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, ppVPOView);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ComPtr<ID3D11Resource> pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ComPtr<ID3D11VideoProcessorEnumerator> pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] D3D11VideoProcessorOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, (ID3D11Resource*)pResource.Handle, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, pDesc, ppVPOView);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] ref D3D11VideoProcessorOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, pResource, pEnum, (D3D11VideoProcessorOutputViewDesc*)ppDesc, ppVPOView);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ref ID3D11Resource pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] ref D3D11VideoProcessorOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppResource, pEnum, (D3D11VideoProcessorOutputViewDesc*)ppDesc, ppVPOView);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ComPtr<ID3D11Resource> pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] ref D3D11VideoProcessorOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, (ID3D11Resource*)pResource.Handle, pEnum, (D3D11VideoProcessorOutputViewDesc*)ppDesc, ppVPOView);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ref ID3D11VideoProcessorEnumerator pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] ref D3D11VideoProcessorOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (D3D11VideoProcessorOutputViewDesc*)ppDesc, ppVPOView);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ComPtr<ID3D11VideoProcessorEnumerator> pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] ref D3D11VideoProcessorOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, (D3D11VideoProcessorOutputViewDesc*)ppDesc, ppVPOView);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ref ID3D11Resource pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ref ID3D11VideoProcessorEnumerator pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] ref D3D11VideoProcessorOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (D3D11VideoProcessorOutputViewDesc*)ppDesc, ppVPOView);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ComPtr<ID3D11Resource> pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ComPtr<ID3D11VideoProcessorEnumerator> pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] ref D3D11VideoProcessorOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ID3D11VideoProcessorOutputView** ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, (ID3D11Resource*)pResource.Handle, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, (D3D11VideoProcessorOutputViewDesc*)ppDesc, ppVPOView);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] D3D11VideoProcessorOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ref ID3D11VideoProcessorOutputView* ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, pResource, pEnum, pDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] D3D11VideoProcessorOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] out ComPtr<ID3D11VideoProcessorOutputView> ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppVPOView = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, pResource, pEnum, pDesc, (ID3D11VideoProcessorOutputView**)ppVPOView.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ref ID3D11Resource pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] D3D11VideoProcessorOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ref ID3D11VideoProcessorOutputView* ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppResource, pEnum, pDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ComPtr<ID3D11Resource> pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] D3D11VideoProcessorOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] out ComPtr<ID3D11VideoProcessorOutputView> ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppVPOView = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, (ID3D11Resource*)pResource.Handle, pEnum, pDesc, (ID3D11VideoProcessorOutputView**)ppVPOView.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ref ID3D11VideoProcessorEnumerator pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] D3D11VideoProcessorOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ref ID3D11VideoProcessorOutputView* ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ComPtr<ID3D11VideoProcessorEnumerator> pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] D3D11VideoProcessorOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] out ComPtr<ID3D11VideoProcessorOutputView> ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppVPOView = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, pDesc, (ID3D11VideoProcessorOutputView**)ppVPOView.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ref ID3D11Resource pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ref ID3D11VideoProcessorEnumerator pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] D3D11VideoProcessorOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ref ID3D11VideoProcessorOutputView* ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, pDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ComPtr<ID3D11Resource> pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ComPtr<ID3D11VideoProcessorEnumerator> pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] D3D11VideoProcessorOutputViewDesc* pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] out ComPtr<ID3D11VideoProcessorOutputView> ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppVPOView = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, (ID3D11Resource*)pResource.Handle, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, pDesc, (ID3D11VideoProcessorOutputView**)ppVPOView.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] ref D3D11VideoProcessorOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ref ID3D11VideoProcessorOutputView* ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, pResource, pEnum, (D3D11VideoProcessorOutputViewDesc*)ppDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] ref D3D11VideoProcessorOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] out ComPtr<ID3D11VideoProcessorOutputView> ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				ppVPOView = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, pResource, pEnum, (D3D11VideoProcessorOutputViewDesc*)ppDesc, (ID3D11VideoProcessorOutputView**)ppVPOView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ref ID3D11Resource pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] ref D3D11VideoProcessorOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ref ID3D11VideoProcessorOutputView* ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppResource, pEnum, (D3D11VideoProcessorOutputViewDesc*)ppDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ComPtr<ID3D11Resource> pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ID3D11VideoProcessorEnumerator* pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] ref D3D11VideoProcessorOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] out ComPtr<ID3D11VideoProcessorOutputView> ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				ppVPOView = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, (ID3D11Resource*)pResource.Handle, pEnum, (D3D11VideoProcessorOutputViewDesc*)ppDesc, (ID3D11VideoProcessorOutputView**)ppVPOView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ref ID3D11VideoProcessorEnumerator pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] ref D3D11VideoProcessorOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ref ID3D11VideoProcessorOutputView* ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
			{
				fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
				{
					fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (D3D11VideoProcessorOutputViewDesc*)ppDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ID3D11Resource* pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ComPtr<ID3D11VideoProcessorEnumerator> pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] ref D3D11VideoProcessorOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] out ComPtr<ID3D11VideoProcessorOutputView> ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				ppVPOView = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, pResource, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, (D3D11VideoProcessorOutputViewDesc*)ppDesc, (ID3D11VideoProcessorOutputView**)ppVPOView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ref ID3D11Resource pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ref ID3D11VideoProcessorEnumerator pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] ref D3D11VideoProcessorOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] ref ID3D11VideoProcessorOutputView* ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11Resource* ppResource = &pResource)
			{
				fixed (ID3D11VideoProcessorEnumerator* ppEnum = &pEnum)
				{
					fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
					{
						fixed (ID3D11VideoProcessorOutputView** pppVPOView = &ppVPOView)
						{
							int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, (ID3D11Resource*)ppResource, (ID3D11VideoProcessorEnumerator*)ppEnum, (D3D11VideoProcessorOutputViewDesc*)ppDesc, (ID3D11VideoProcessorOutputView**)pppVPOView);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorOutputView")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorOutputView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D11Resource*")] ComPtr<ID3D11Resource> pResource, [NativeName(NativeNameType.Param, "pEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator*")] ComPtr<ID3D11VideoProcessorEnumerator> pEnum, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC*")] ref D3D11VideoProcessorOutputViewDesc pDesc, [NativeName(NativeNameType.Param, "ppVPOView")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorOutputView**")] out ComPtr<ID3D11VideoProcessorOutputView> ppVPOView) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorOutputViewDesc* ppDesc = &pDesc)
			{
				ppVPOView = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, ID3D11Resource*, ID3D11VideoProcessorEnumerator*, D3D11VideoProcessorOutputViewDesc*, ID3D11VideoProcessorOutputView**, int>)(LpVtbl[9]))(ptr, (ID3D11Resource*)pResource.Handle, (ID3D11VideoProcessorEnumerator*)pEnum.Handle, (D3D11VideoProcessorOutputViewDesc*)ppDesc, (ID3D11VideoProcessorOutputView**)ppVPOView.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorEnumerator")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorEnumerator([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_CONTENT_DESC*")] D3D11VideoProcessorContentDesc* pDesc, [NativeName(NativeNameType.Param, "ppEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator**")] ID3D11VideoProcessorEnumerator** ppEnum) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoProcessorContentDesc*, ID3D11VideoProcessorEnumerator**, int>)(LpVtbl[10]))(ptr, pDesc, ppEnum);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorEnumerator")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorEnumerator([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_CONTENT_DESC*")] ref D3D11VideoProcessorContentDesc pDesc, [NativeName(NativeNameType.Param, "ppEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator**")] ID3D11VideoProcessorEnumerator** ppEnum) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorContentDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoProcessorContentDesc*, ID3D11VideoProcessorEnumerator**, int>)(LpVtbl[10]))(ptr, (D3D11VideoProcessorContentDesc*)ppDesc, ppEnum);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorEnumerator")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorEnumerator([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_CONTENT_DESC*")] D3D11VideoProcessorContentDesc* pDesc, [NativeName(NativeNameType.Param, "ppEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator**")] ref ID3D11VideoProcessorEnumerator* ppEnum) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D11VideoProcessorEnumerator** pppEnum = &ppEnum)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoProcessorContentDesc*, ID3D11VideoProcessorEnumerator**, int>)(LpVtbl[10]))(ptr, pDesc, (ID3D11VideoProcessorEnumerator**)pppEnum);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorEnumerator")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorEnumerator([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_CONTENT_DESC*")] D3D11VideoProcessorContentDesc* pDesc, [NativeName(NativeNameType.Param, "ppEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator**")] out ComPtr<ID3D11VideoProcessorEnumerator> ppEnum) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ppEnum = default;
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoProcessorContentDesc*, ID3D11VideoProcessorEnumerator**, int>)(LpVtbl[10]))(ptr, pDesc, (ID3D11VideoProcessorEnumerator**)ppEnum.GetAddressOf());
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorEnumerator")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorEnumerator([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_CONTENT_DESC*")] ref D3D11VideoProcessorContentDesc pDesc, [NativeName(NativeNameType.Param, "ppEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator**")] ref ID3D11VideoProcessorEnumerator* ppEnum) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorContentDesc* ppDesc = &pDesc)
			{
				fixed (ID3D11VideoProcessorEnumerator** pppEnum = &ppEnum)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoProcessorContentDesc*, ID3D11VideoProcessorEnumerator**, int>)(LpVtbl[10]))(ptr, (D3D11VideoProcessorContentDesc*)ppDesc, (ID3D11VideoProcessorEnumerator**)pppEnum);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CreateVideoProcessorEnumerator")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CreateVideoProcessorEnumerator([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_PROCESSOR_CONTENT_DESC*")] ref D3D11VideoProcessorContentDesc pDesc, [NativeName(NativeNameType.Param, "ppEnum")] [NativeName(NativeNameType.Type, "ID3D11VideoProcessorEnumerator**")] out ComPtr<ID3D11VideoProcessorEnumerator> ppEnum) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoProcessorContentDesc* ppDesc = &pDesc)
			{
				ppEnum = default;
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoProcessorContentDesc*, ID3D11VideoProcessorEnumerator**, int>)(LpVtbl[10]))(ptr, (D3D11VideoProcessorContentDesc*)ppDesc, (ID3D11VideoProcessorEnumerator**)ppEnum.GetAddressOf());
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetVideoDecoderProfileCount")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetVideoDecoderProfileCount() 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, uint>)(LpVtbl[11]))(ptr);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetVideoDecoderProfile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetVideoDecoderProfile([NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "GUID*")] Guid* pDecoderProfile) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, uint, Guid*, int>)(LpVtbl[12]))(ptr, index, pDecoderProfile);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetVideoDecoderProfile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetVideoDecoderProfile([NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "GUID*")] ref Guid pDecoderProfile) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, uint, Guid*, int>)(LpVtbl[12]))(ptr, index, (Guid*)ppDecoderProfile);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CheckVideoDecoderFormat")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CheckVideoDecoderFormat([NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "Format")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] DxgiFormat format, [NativeName(NativeNameType.Param, "pSupported")] [NativeName(NativeNameType.Type, "BOOL*")] int* pSupported) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, DxgiFormat, int*, int>)(LpVtbl[13]))(ptr, pDecoderProfile, format, pSupported);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CheckVideoDecoderFormat")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CheckVideoDecoderFormat([NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "Format")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] DxgiFormat format, [NativeName(NativeNameType.Param, "pSupported")] [NativeName(NativeNameType.Type, "BOOL*")] int* pSupported) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, DxgiFormat, int*, int>)(LpVtbl[13]))(ptr, (Guid*)ppDecoderProfile, format, pSupported);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CheckVideoDecoderFormat")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CheckVideoDecoderFormat([NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "Format")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] DxgiFormat format, [NativeName(NativeNameType.Param, "pSupported")] [NativeName(NativeNameType.Type, "BOOL*")] ref int pSupported) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppSupported = &pSupported)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, DxgiFormat, int*, int>)(LpVtbl[13]))(ptr, pDecoderProfile, format, (int*)ppSupported);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CheckVideoDecoderFormat")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CheckVideoDecoderFormat([NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "Format")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] DxgiFormat format, [NativeName(NativeNameType.Param, "pSupported")] [NativeName(NativeNameType.Type, "BOOL*")] ref int pSupported) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (int* ppSupported = &pSupported)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, DxgiFormat, int*, int>)(LpVtbl[13]))(ptr, (Guid*)ppDecoderProfile, format, (int*)ppSupported);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetVideoDecoderConfigCount")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetVideoDecoderConfigCount([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_DESC*")] D3D11VideoDecoderDesc* pDesc, [NativeName(NativeNameType.Param, "pCount")] [NativeName(NativeNameType.Type, "UINT*")] uint* pCount) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, uint*, int>)(LpVtbl[14]))(ptr, pDesc, pCount);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetVideoDecoderConfigCount")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetVideoDecoderConfigCount([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_DESC*")] ref D3D11VideoDecoderDesc pDesc, [NativeName(NativeNameType.Param, "pCount")] [NativeName(NativeNameType.Type, "UINT*")] uint* pCount) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, uint*, int>)(LpVtbl[14]))(ptr, (D3D11VideoDecoderDesc*)ppDesc, pCount);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetVideoDecoderConfigCount")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetVideoDecoderConfigCount([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_DESC*")] D3D11VideoDecoderDesc* pDesc, [NativeName(NativeNameType.Param, "pCount")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pCount) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppCount = &pCount)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, uint*, int>)(LpVtbl[14]))(ptr, pDesc, (uint*)ppCount);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetVideoDecoderConfigCount")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetVideoDecoderConfigCount([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_DESC*")] ref D3D11VideoDecoderDesc pDesc, [NativeName(NativeNameType.Param, "pCount")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pCount) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppDesc = &pDesc)
			{
				fixed (uint* ppCount = &pCount)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, uint*, int>)(LpVtbl[14]))(ptr, (D3D11VideoDecoderDesc*)ppDesc, (uint*)ppCount);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetVideoDecoderConfig")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetVideoDecoderConfig([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_DESC*")] D3D11VideoDecoderDesc* pDesc, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index, [NativeName(NativeNameType.Param, "pConfig")] [NativeName(NativeNameType.Type, "D3D11_VIDEO_DECODER_CONFIG*")] D3D11VideoDecoderConfig* pConfig) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, uint, D3D11VideoDecoderConfig*, int>)(LpVtbl[15]))(ptr, pDesc, index, pConfig);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetVideoDecoderConfig")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetVideoDecoderConfig([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_DESC*")] ref D3D11VideoDecoderDesc pDesc, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index, [NativeName(NativeNameType.Param, "pConfig")] [NativeName(NativeNameType.Type, "D3D11_VIDEO_DECODER_CONFIG*")] D3D11VideoDecoderConfig* pConfig) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppDesc = &pDesc)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, uint, D3D11VideoDecoderConfig*, int>)(LpVtbl[15]))(ptr, (D3D11VideoDecoderDesc*)ppDesc, index, pConfig);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetVideoDecoderConfig")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetVideoDecoderConfig([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_DESC*")] D3D11VideoDecoderDesc* pDesc, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index, [NativeName(NativeNameType.Param, "pConfig")] [NativeName(NativeNameType.Type, "D3D11_VIDEO_DECODER_CONFIG*")] ref D3D11VideoDecoderConfig pConfig) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderConfig* ppConfig = &pConfig)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, uint, D3D11VideoDecoderConfig*, int>)(LpVtbl[15]))(ptr, pDesc, index, (D3D11VideoDecoderConfig*)ppConfig);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetVideoDecoderConfig")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetVideoDecoderConfig([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D11_VIDEO_DECODER_DESC*")] ref D3D11VideoDecoderDesc pDesc, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index, [NativeName(NativeNameType.Param, "pConfig")] [NativeName(NativeNameType.Type, "D3D11_VIDEO_DECODER_CONFIG*")] ref D3D11VideoDecoderConfig pConfig) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoDecoderDesc* ppDesc = &pDesc)
			{
				fixed (D3D11VideoDecoderConfig* ppConfig = &pConfig)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, D3D11VideoDecoderDesc*, uint, D3D11VideoDecoderConfig*, int>)(LpVtbl[15]))(ptr, (D3D11VideoDecoderDesc*)ppDesc, index, (D3D11VideoDecoderConfig*)ppConfig);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetContentProtectionCaps")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetContentProtectionCaps([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "pCaps")] [NativeName(NativeNameType.Type, "D3D11_VIDEO_CONTENT_PROTECTION_CAPS*")] D3D11VideoContentProtectionCaps* pCaps) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, D3D11VideoContentProtectionCaps*, int>)(LpVtbl[16]))(ptr, pCryptoType, pDecoderProfile, pCaps);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetContentProtectionCaps")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetContentProtectionCaps([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "pCaps")] [NativeName(NativeNameType.Type, "D3D11_VIDEO_CONTENT_PROTECTION_CAPS*")] D3D11VideoContentProtectionCaps* pCaps) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, D3D11VideoContentProtectionCaps*, int>)(LpVtbl[16]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, pCaps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetContentProtectionCaps")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetContentProtectionCaps([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "pCaps")] [NativeName(NativeNameType.Type, "D3D11_VIDEO_CONTENT_PROTECTION_CAPS*")] D3D11VideoContentProtectionCaps* pCaps) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, D3D11VideoContentProtectionCaps*, int>)(LpVtbl[16]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, pCaps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetContentProtectionCaps")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetContentProtectionCaps([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "pCaps")] [NativeName(NativeNameType.Type, "D3D11_VIDEO_CONTENT_PROTECTION_CAPS*")] D3D11VideoContentProtectionCaps* pCaps) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, D3D11VideoContentProtectionCaps*, int>)(LpVtbl[16]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, pCaps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetContentProtectionCaps")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetContentProtectionCaps([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "pCaps")] [NativeName(NativeNameType.Type, "D3D11_VIDEO_CONTENT_PROTECTION_CAPS*")] ref D3D11VideoContentProtectionCaps pCaps) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11VideoContentProtectionCaps* ppCaps = &pCaps)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, D3D11VideoContentProtectionCaps*, int>)(LpVtbl[16]))(ptr, pCryptoType, pDecoderProfile, (D3D11VideoContentProtectionCaps*)ppCaps);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetContentProtectionCaps")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetContentProtectionCaps([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "pCaps")] [NativeName(NativeNameType.Type, "D3D11_VIDEO_CONTENT_PROTECTION_CAPS*")] ref D3D11VideoContentProtectionCaps pCaps) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (D3D11VideoContentProtectionCaps* ppCaps = &pCaps)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, D3D11VideoContentProtectionCaps*, int>)(LpVtbl[16]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, (D3D11VideoContentProtectionCaps*)ppCaps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetContentProtectionCaps")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetContentProtectionCaps([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "pCaps")] [NativeName(NativeNameType.Type, "D3D11_VIDEO_CONTENT_PROTECTION_CAPS*")] ref D3D11VideoContentProtectionCaps pCaps) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (D3D11VideoContentProtectionCaps* ppCaps = &pCaps)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, D3D11VideoContentProtectionCaps*, int>)(LpVtbl[16]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, (D3D11VideoContentProtectionCaps*)ppCaps);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "GetContentProtectionCaps")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int GetContentProtectionCaps([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "pCaps")] [NativeName(NativeNameType.Type, "D3D11_VIDEO_CONTENT_PROTECTION_CAPS*")] ref D3D11VideoContentProtectionCaps pCaps) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (D3D11VideoContentProtectionCaps* ppCaps = &pCaps)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, D3D11VideoContentProtectionCaps*, int>)(LpVtbl[16]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, (D3D11VideoContentProtectionCaps*)ppCaps);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CheckCryptoKeyExchange")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CheckCryptoKeyExchange([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "GUID*")] Guid* pKeyExchangeType) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, int>)(LpVtbl[17]))(ptr, pCryptoType, pDecoderProfile, index, pKeyExchangeType);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CheckCryptoKeyExchange")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CheckCryptoKeyExchange([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "GUID*")] Guid* pKeyExchangeType) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, int>)(LpVtbl[17]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, index, pKeyExchangeType);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CheckCryptoKeyExchange")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CheckCryptoKeyExchange([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "GUID*")] Guid* pKeyExchangeType) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, int>)(LpVtbl[17]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, index, pKeyExchangeType);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CheckCryptoKeyExchange")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CheckCryptoKeyExchange([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "GUID*")] Guid* pKeyExchangeType) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, int>)(LpVtbl[17]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, index, pKeyExchangeType);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CheckCryptoKeyExchange")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CheckCryptoKeyExchange([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "GUID*")] ref Guid pKeyExchangeType) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, int>)(LpVtbl[17]))(ptr, pCryptoType, pDecoderProfile, index, (Guid*)ppKeyExchangeType);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CheckCryptoKeyExchange")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CheckCryptoKeyExchange([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pDecoderProfile, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "GUID*")] ref Guid pKeyExchangeType) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, int>)(LpVtbl[17]))(ptr, (Guid*)ppCryptoType, pDecoderProfile, index, (Guid*)ppKeyExchangeType);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CheckCryptoKeyExchange")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CheckCryptoKeyExchange([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] Guid* pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "GUID*")] ref Guid pKeyExchangeType) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppDecoderProfile = &pDecoderProfile)
			{
				fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, int>)(LpVtbl[17]))(ptr, pCryptoType, (Guid*)ppDecoderProfile, index, (Guid*)ppKeyExchangeType);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "CheckCryptoKeyExchange")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int CheckCryptoKeyExchange([NativeName(NativeNameType.Param, "pCryptoType")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pCryptoType, [NativeName(NativeNameType.Param, "pDecoderProfile")] [NativeName(NativeNameType.Type, "const GUID*")] ref Guid pDecoderProfile, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index, [NativeName(NativeNameType.Param, "pKeyExchangeType")] [NativeName(NativeNameType.Type, "GUID*")] ref Guid pKeyExchangeType) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* ppCryptoType = &pCryptoType)
			{
				fixed (Guid* ppDecoderProfile = &pDecoderProfile)
				{
					fixed (Guid* ppKeyExchangeType = &pKeyExchangeType)
					{
						int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, Guid*, uint, Guid*, int>)(LpVtbl[17]))(ptr, (Guid*)ppCryptoType, (Guid*)ppDecoderProfile, index, (Guid*)ppKeyExchangeType);
						return ret;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetPrivateData")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetPrivateData([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* guid, [NativeName(NativeNameType.Param, "DataSize")] [NativeName(NativeNameType.Type, "UINT")] uint dataSize, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const void*")] void* pData) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, uint, void*, int>)(LpVtbl[18]))(ptr, guid, dataSize, pData);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetPrivateData")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetPrivateData([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid guid, [NativeName(NativeNameType.Param, "DataSize")] [NativeName(NativeNameType.Type, "UINT")] uint dataSize, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const void*")] void* pData) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, uint, void*, int>)(LpVtbl[18]))(ptr, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetPrivateDataInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetPrivateDataInterface([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* guid, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const IUnknown*")] IUnknown* pData) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, IUnknown*, int>)(LpVtbl[19]))(ptr, guid, pData);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetPrivateDataInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetPrivateDataInterface([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid guid, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const IUnknown*")] IUnknown* pData) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, IUnknown*, int>)(LpVtbl[19]))(ptr, (Guid*)pguid, pData);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetPrivateDataInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetPrivateDataInterface([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* guid, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const IUnknown*")] ref IUnknown pData) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppData = &pData)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, IUnknown*, int>)(LpVtbl[19]))(ptr, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetPrivateDataInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetPrivateDataInterface([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* guid, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const IUnknown*")] ComPtr<IUnknown> pData) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, IUnknown*, int>)(LpVtbl[19]))(ptr, guid, (IUnknown*)pData.Handle);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetPrivateDataInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetPrivateDataInterface([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid guid, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const IUnknown*")] ref IUnknown pData) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, IUnknown*, int>)(LpVtbl[19]))(ptr, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		[NativeName(NativeNameType.Func, "SetPrivateDataInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe int SetPrivateDataInterface([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid guid, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const IUnknown*")] ComPtr<IUnknown> pData) 
		{
			ID3D11VideoDevice* ptr = (ID3D11VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D11VideoDevice*, Guid*, IUnknown*, int>)(LpVtbl[19]))(ptr, (Guid*)pguid, (IUnknown*)pData.Handle);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D11VideoDevice value)
		{
			return Unsafe.As<ID3D11VideoDevice, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_VIDEO_CONTENT_PROTECTION_CAPS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11VideoContentProtectionCaps
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Caps")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Caps;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "KeyExchangeTypeCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint KeyExchangeTypeCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BlockAlignmentSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BlockAlignmentSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ProtectedMemorySize")]
		[NativeName(NativeNameType.Type, "ULONGLONG")]
		public ulong ProtectedMemorySize;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11VideoContentProtectionCaps(uint caps = default, uint keyExchangeTypeCount = default, uint blockAlignmentSize = default, ulong protectedMemorySize = default)
		{
			Caps = caps;
			KeyExchangeTypeCount = keyExchangeTypeCount;
			BlockAlignmentSize = blockAlignmentSize;
			ProtectedMemorySize = protectedMemorySize;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "CD3D11_DEFAULT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CD3D11Default
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_DRAW_INSTANCED_INDIRECT_ARGS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11DrawInstancedIndirectArgs
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "VertexCountPerInstance")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint VertexCountPerInstance;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InstanceCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InstanceCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "StartVertexLocation")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StartVertexLocation;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "StartInstanceLocation")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StartInstanceLocation;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11DrawInstancedIndirectArgs(uint vertexCountPerInstance = default, uint instanceCount = default, uint startVertexLocation = default, uint startInstanceLocation = default)
		{
			VertexCountPerInstance = vertexCountPerInstance;
			InstanceCount = instanceCount;
			StartVertexLocation = startVertexLocation;
			StartInstanceLocation = startInstanceLocation;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11DrawIndexedInstancedIndirectArgs
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IndexCountPerInstance")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint IndexCountPerInstance;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InstanceCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InstanceCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "StartIndexLocation")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StartIndexLocation;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "BaseVertexLocation")]
		[NativeName(NativeNameType.Type, "INT")]
		public int BaseVertexLocation;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "StartInstanceLocation")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StartInstanceLocation;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11DrawIndexedInstancedIndirectArgs(uint indexCountPerInstance = default, uint instanceCount = default, uint startIndexLocation = default, int baseVertexLocation = default, uint startInstanceLocation = default)
		{
			IndexCountPerInstance = indexCountPerInstance;
			InstanceCount = instanceCount;
			StartIndexLocation = startIndexLocation;
			BaseVertexLocation = baseVertexLocation;
			StartInstanceLocation = startInstanceLocation;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "CD3D11_RECT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CD3D11Rect
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "CD3D11_BOX")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CD3D11Box
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "CD3D11_DEPTH_STENCIL_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CD3D11DepthStencilDesc
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "CD3D11_BLEND_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CD3D11BlendDesc
	{


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0003 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "CD3D11_RASTERIZER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CD3D11RasterizerDesc
	{


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0005 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "CD3D11_BUFFER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CD3D11BufferDesc
	{


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0006 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "CD3D11_TEXTURE1D_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CD3D11Texture1DDesc
	{


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0007 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "CD3D11_TEXTURE2D_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CD3D11Texture2DDesc
	{


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0008 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "CD3D11_TEXTURE3D_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CD3D11Texture3DDesc
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "CD3D11_SHADER_RESOURCE_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CD3D11ShaderResourceViewDesc
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "CD3D11_RENDER_TARGET_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CD3D11RenderTargetViewDesc
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "CD3D11_VIEWPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CD3D11Viewport
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "CD3D11_DEPTH_STENCIL_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CD3D11DepthStencilViewDesc
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "CD3D11_UNORDERED_ACCESS_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CD3D11UnorderedAccessViewDesc
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "CD3D11_SAMPLER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CD3D11SamplerDesc
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "CD3D11_QUERY_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CD3D11QueryDesc
	{


	}

	/// <summary>
	/// interface __MIDL_itf_d3d11_0000_0025 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_QUERY_DATA_TIMESTAMP_DISJOINT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11QueryDataTimestampDisjoint
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Frequency")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Frequency;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Disjoint")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int Disjoint;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11QueryDataTimestampDisjoint(ulong frequency = default, int disjoint = default)
		{
			Frequency = frequency;
			Disjoint = disjoint;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_QUERY_DATA_PIPELINE_STATISTICS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11QueryDataPipelineStatistics
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IAVertices")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong IAVertices;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IAPrimitives")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong IAPrimitives;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "VSInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong VSInvocations;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "GSInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong GSInvocations;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "GSPrimitives")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong GSPrimitives;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong CInvocations;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CPrimitives")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong CPrimitives;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PSInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong PSInvocations;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "HSInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong HSInvocations;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DSInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong DSInvocations;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CSInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong CSInvocations;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11QueryDataPipelineStatistics(ulong iaVertices = default, ulong iaPrimitives = default, ulong vsInvocations = default, ulong gsInvocations = default, ulong gsPrimitives = default, ulong cInvocations = default, ulong cPrimitives = default, ulong psInvocations = default, ulong hsInvocations = default, ulong dsInvocations = default, ulong csInvocations = default)
		{
			IAVertices = iaVertices;
			IAPrimitives = iaPrimitives;
			VSInvocations = vsInvocations;
			GSInvocations = gsInvocations;
			GSPrimitives = gsPrimitives;
			CInvocations = cInvocations;
			CPrimitives = cPrimitives;
			PSInvocations = psInvocations;
			HSInvocations = hsInvocations;
			DSInvocations = dsInvocations;
			CSInvocations = csInvocations;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_QUERY_DATA_SO_STATISTICS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11QueryDataSoStatistics
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "NumPrimitivesWritten")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong NumPrimitivesWritten;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PrimitivesStorageNeeded")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong PrimitivesStorageNeeded;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11QueryDataSoStatistics(ulong numPrimitivesWritten = default, ulong primitivesStorageNeeded = default)
		{
			NumPrimitivesWritten = numPrimitivesWritten;
			PrimitivesStorageNeeded = primitivesStorageNeeded;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "CD3D11_COUNTER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CD3D11CounterDesc
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_FEATURE_DATA_THREADING")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataThreading
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DriverConcurrentCreates")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int DriverConcurrentCreates;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DriverCommandLists")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int DriverCommandLists;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FeatureDataThreading(int driverConcurrentCreates = default, int driverCommandLists = default)
		{
			DriverConcurrentCreates = driverConcurrentCreates;
			DriverCommandLists = driverCommandLists;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_FEATURE_DATA_DOUBLES")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataDoubles
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DoublePrecisionFloatShaderOps")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int DoublePrecisionFloatShaderOps;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FeatureDataDoubles(int doublePrecisionFloatShaderOps = default)
		{
			DoublePrecisionFloatShaderOps = doublePrecisionFloatShaderOps;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_FEATURE_DATA_FORMAT_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataFormatSupport
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InFormat")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat InFormat;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OutFormatSupport")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint OutFormatSupport;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FeatureDataFormatSupport(DxgiFormat inFormat = default, uint outFormatSupport = default)
		{
			InFormat = inFormat;
			OutFormatSupport = outFormatSupport;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_FEATURE_DATA_FORMAT_SUPPORT2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataFormatSupport2
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "InFormat")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat InFormat;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OutFormatSupport2")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint OutFormatSupport2;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FeatureDataFormatSupport2(DxgiFormat inFormat = default, uint outFormatSupport2 = default)
		{
			InFormat = inFormat;
			OutFormatSupport2 = outFormatSupport2;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D10XHardwareOptions
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int ComputeShadersPlusRawAndStructuredBuffersViaShader4X;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FeatureDataD3D10XHardwareOptions(int computeshadersPlusRawandstructuredbuffersViaShader4X = default)
		{
			ComputeShadersPlusRawAndStructuredBuffersViaShader4X = computeshadersPlusRawandstructuredbuffersViaShader4X;
		}


	}

	/// <summary>
	/// =============================================================================<br/>
	/// In the D3D11_FEATURE_DATA_D3D11_OPTIONS struct below, <br/>
	/// the following groupings of capabilities will always be set identically. <br/>
	/// That is, all the BOOLs in a grouping will be TRUE or FALSE together. <br/>
	/// Group: DiscardAPIsSeenByDriver, FlagsForUpdateAndCopySeenByDriver <br/>
	/// Group: ClearView, CopyWithOverlap, ConstantBufferPartialUpdate <br/>
	/// ConstantBufferOffsetting, MapNoOverwriteOnDynamicConstantBuffer <br/>
	/// Group: MapNoOverwriteOnDynamicBufferSRV, <br/>
	/// MultisampleRTVWithForcedSampleCountOne <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_FEATURE_DATA_D3D11_OPTIONS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D11Options
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "OutputMergerLogicOp")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int OutputMergerLogicOp;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "UAVOnlyRenderingForcedSampleCount")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int UAVOnlyRenderingForcedSampleCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DiscardAPIsSeenByDriver")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int DiscardAPIsSeenByDriver;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FlagsForUpdateAndCopySeenByDriver")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int FlagsForUpdateAndCopySeenByDriver;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ClearView")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int ClearView;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "CopyWithOverlap")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int CopyWithOverlap;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConstantBufferPartialUpdate")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int ConstantBufferPartialUpdate;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConstantBufferOffsetting")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int ConstantBufferOffsetting;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MapNoOverwriteOnDynamicConstantBuffer")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int MapNoOverwriteOnDynamicConstantBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MapNoOverwriteOnDynamicBufferSRV")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int MapNoOverwriteOnDynamicBufferSRV;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MultisampleRTVWithForcedSampleCountOne")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int MultisampleRTVWithForcedSampleCountOne;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SAD4ShaderInstructions")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int SAD4ShaderInstructions;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ExtendedDoublesShaderInstructions")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int ExtendedDoublesShaderInstructions;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ExtendedResourceSharing")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int ExtendedResourceSharing;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FeatureDataD3D11Options(int outputMergerLogicOp = default, int uavOnlyRenderingForcedSampleCount = default, int discardApIsSeenByDriver = default, int flagsForUpdateAndCopySeenByDriver = default, int clearView = default, int copyWithOverlap = default, int constantBufferPartialUpdate = default, int constantBufferOffsetting = default, int mapNoOverwriteOnDynamicConstantBuffer = default, int mapNoOverwriteOnDynamicBufferSrv = default, int multisampleRtvWithForcedSampleCountOne = default, int sad4ShaderInstructions = default, int extendedDoublesShaderInstructions = default, int extendedResourceSharing = default)
		{
			OutputMergerLogicOp = outputMergerLogicOp;
			UAVOnlyRenderingForcedSampleCount = uavOnlyRenderingForcedSampleCount;
			DiscardAPIsSeenByDriver = discardApIsSeenByDriver;
			FlagsForUpdateAndCopySeenByDriver = flagsForUpdateAndCopySeenByDriver;
			ClearView = clearView;
			CopyWithOverlap = copyWithOverlap;
			ConstantBufferPartialUpdate = constantBufferPartialUpdate;
			ConstantBufferOffsetting = constantBufferOffsetting;
			MapNoOverwriteOnDynamicConstantBuffer = mapNoOverwriteOnDynamicConstantBuffer;
			MapNoOverwriteOnDynamicBufferSRV = mapNoOverwriteOnDynamicBufferSrv;
			MultisampleRTVWithForcedSampleCountOne = multisampleRtvWithForcedSampleCountOne;
			SAD4ShaderInstructions = sad4ShaderInstructions;
			ExtendedDoublesShaderInstructions = extendedDoublesShaderInstructions;
			ExtendedResourceSharing = extendedResourceSharing;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_FEATURE_DATA_ARCHITECTURE_INFO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataArchitectureInfo
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TileBasedDeferredRenderer")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int TileBasedDeferredRenderer;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FeatureDataArchitectureInfo(int tileBasedDeferredRenderer = default)
		{
			TileBasedDeferredRenderer = tileBasedDeferredRenderer;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_FEATURE_DATA_D3D9_OPTIONS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D9Options
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FullNonPow2TextureSupport")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int FullNonPow2TextureSupport;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FeatureDataD3D9Options(int fullNonPow2TextureSupport = default)
		{
			FullNonPow2TextureSupport = fullNonPow2TextureSupport;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D9ShadowSupport
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SupportsDepthAsTextureWithLessEqualComparisonFilter")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int SupportsDepthAsTextureWithLessEqualComparisonFilter;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FeatureDataD3D9ShadowSupport(int supportsDepthAsTextureWithLessEqualComparisonFilter = default)
		{
			SupportsDepthAsTextureWithLessEqualComparisonFilter = supportsDepthAsTextureWithLessEqualComparisonFilter;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataShaderMinPrecisionSupport
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PixelShaderMinPrecision")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PixelShaderMinPrecision;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "AllOtherShaderStagesMinPrecision")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint AllOtherShaderStagesMinPrecision;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FeatureDataShaderMinPrecisionSupport(uint pixelShaderMinPrecision = default, uint allOtherShaderStagesMinPrecision = default)
		{
			PixelShaderMinPrecision = pixelShaderMinPrecision;
			AllOtherShaderStagesMinPrecision = allOtherShaderStagesMinPrecision;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_FEATURE_DATA_D3D11_OPTIONS1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D11Options1
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TiledResourcesTier")]
		[NativeName(NativeNameType.Type, "D3D11_TILED_RESOURCES_TIER")]
		public D3D11TiledResourcesTier TiledResourcesTier;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MinMaxFiltering")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int MinMaxFiltering;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ClearViewAlsoSupportsDepthOnlyFormats")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int ClearViewAlsoSupportsDepthOnlyFormats;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MapOnDefaultBuffers")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int MapOnDefaultBuffers;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FeatureDataD3D11Options1(D3D11TiledResourcesTier tiledResourcesTier = default, int minMaxFiltering = default, int clearViewAlsoSupportsDepthOnlyFormats = default, int mapOnDefaultBuffers = default)
		{
			TiledResourcesTier = tiledResourcesTier;
			MinMaxFiltering = minMaxFiltering;
			ClearViewAlsoSupportsDepthOnlyFormats = clearViewAlsoSupportsDepthOnlyFormats;
			MapOnDefaultBuffers = mapOnDefaultBuffers;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D9SimpleInstancingSupport
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SimpleInstancingSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int SimpleInstancingSupported;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FeatureDataD3D9SimpleInstancingSupport(int simpleInstancingSupported = default)
		{
			SimpleInstancingSupported = simpleInstancingSupported;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_FEATURE_DATA_MARKER_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataMarkerSupport
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Profile")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int Profile;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FeatureDataMarkerSupport(int profile = default)
		{
			Profile = profile;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_FEATURE_DATA_D3D9_OPTIONS1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D9Options1
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "FullNonPow2TextureSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int FullNonPow2TextureSupported;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DepthAsTextureWithLessEqualComparisonFilterSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int DepthAsTextureWithLessEqualComparisonFilterSupported;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SimpleInstancingSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int SimpleInstancingSupported;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FeatureDataD3D9Options1(int fullNonPow2TextureSupported = default, int depthAsTextureWithLessEqualComparisonFilterSupported = default, int simpleInstancingSupported = default, int textureCubeFaceRenderTargetWithNonCubeDepthStencilSupported = default)
		{
			FullNonPow2TextureSupported = fullNonPow2TextureSupported;
			DepthAsTextureWithLessEqualComparisonFilterSupported = depthAsTextureWithLessEqualComparisonFilterSupported;
			SimpleInstancingSupported = simpleInstancingSupported;
			TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported = textureCubeFaceRenderTargetWithNonCubeDepthStencilSupported;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_FEATURE_DATA_D3D11_OPTIONS2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D11Options2
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "PSSpecifiedStencilRefSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int PSSpecifiedStencilRefSupported;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TypedUAVLoadAdditionalFormats")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int TypedUAVLoadAdditionalFormats;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ROVsSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int ROVsSupported;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ConservativeRasterizationTier")]
		[NativeName(NativeNameType.Type, "D3D11_CONSERVATIVE_RASTERIZATION_TIER")]
		public D3D11ConservativeRasterizationTier ConservativeRasterizationTier;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "TiledResourcesTier")]
		[NativeName(NativeNameType.Type, "D3D11_TILED_RESOURCES_TIER")]
		public D3D11TiledResourcesTier TiledResourcesTier;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MapOnDefaultTextures")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int MapOnDefaultTextures;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "StandardSwizzle")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int StandardSwizzle;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "UnifiedMemoryArchitecture")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int UnifiedMemoryArchitecture;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FeatureDataD3D11Options2(int psSpecifiedStencilRefSupported = default, int typedUavLoadAdditionalFormats = default, int roVsSupported = default, D3D11ConservativeRasterizationTier conservativeRasterizationTier = default, D3D11TiledResourcesTier tiledResourcesTier = default, int mapOnDefaultTextures = default, int standardSwizzle = default, int unifiedMemoryArchitecture = default)
		{
			PSSpecifiedStencilRefSupported = psSpecifiedStencilRefSupported;
			TypedUAVLoadAdditionalFormats = typedUavLoadAdditionalFormats;
			ROVsSupported = roVsSupported;
			ConservativeRasterizationTier = conservativeRasterizationTier;
			TiledResourcesTier = tiledResourcesTier;
			MapOnDefaultTextures = mapOnDefaultTextures;
			StandardSwizzle = standardSwizzle;
			UnifiedMemoryArchitecture = unifiedMemoryArchitecture;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_FEATURE_DATA_D3D11_OPTIONS3")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D11Options3
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "VPAndRTArrayIndexFromAnyShaderFeedingRasterizer")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int VPAndRTArrayIndexFromAnyShaderFeedingRasterizer;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FeatureDataD3D11Options3(int vpAndRtArrayIndexFromAnyShaderFeedingRasterizer = default)
		{
			VPAndRTArrayIndexFromAnyShaderFeedingRasterizer = vpAndRtArrayIndexFromAnyShaderFeedingRasterizer;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataGpuVirtualAddressSupport
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MaxGPUVirtualAddressBitsPerResource")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxGPUVirtualAddressBitsPerResource;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "MaxGPUVirtualAddressBitsPerProcess")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxGPUVirtualAddressBitsPerProcess;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FeatureDataGpuVirtualAddressSupport(uint maxGpuVirtualAddressBitsPerResource = default, uint maxGpuVirtualAddressBitsPerProcess = default)
		{
			MaxGPUVirtualAddressBitsPerResource = maxGpuVirtualAddressBitsPerResource;
			MaxGPUVirtualAddressBitsPerProcess = maxGpuVirtualAddressBitsPerProcess;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_FEATURE_DATA_SHADER_CACHE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataShaderCache
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SupportFlags")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SupportFlags;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FeatureDataShaderCache(uint supportFlags = default)
		{
			SupportFlags = supportFlags;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_FEATURE_DATA_DISPLAYABLE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataDisplayable
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "DisplayableTexture")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int DisplayableTexture;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SharedResourceTier")]
		[NativeName(NativeNameType.Type, "D3D11_SHARED_RESOURCE_TIER")]
		public D3D11SharedResourceTier SharedResourceTier;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FeatureDataDisplayable(int displayableTexture = default, D3D11SharedResourceTier sharedResourceTier = default)
		{
			DisplayableTexture = displayableTexture;
			SharedResourceTier = sharedResourceTier;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_FEATURE_DATA_D3D11_OPTIONS5")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11FeatureDataD3D11Options5
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SharedResourceTier")]
		[NativeName(NativeNameType.Type, "D3D11_SHARED_RESOURCE_TIER")]
		public D3D11SharedResourceTier SharedResourceTier;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11FeatureDataD3D11Options5(D3D11SharedResourceTier sharedResourceTier = default)
		{
			SharedResourceTier = sharedResourceTier;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "CD3D11_VIDEO_DEFAULT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CD3D11VideoDefault
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "_D3D11_AES_CTR_IV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AesCtrIv
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "IV")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong IV;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Count")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Count;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AesCtrIv(ulong iv = default, ulong count = default)
		{
			IV = iv;
			Count = count;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_QUERY_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryInput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "QueryType")]
		[NativeName(NativeNameType.Type, "GUID")]
		public Guid QueryType;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "hChannel")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint HChannel;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SequenceNumber")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SequenceNumber;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedQueryInput(Guid queryType = default, nint hChannel = default, uint sequenceNumber = default)
		{
			QueryType = queryType;
			HChannel = hChannel;
			SequenceNumber = sequenceNumber;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_QUERY_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11AuthenticatedQueryOutput
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "omac")]
		[NativeName(NativeNameType.Type, "D3D11_OMAC")]
		public D3D11Omac Omac;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "QueryType")]
		[NativeName(NativeNameType.Type, "GUID")]
		public Guid QueryType;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "hChannel")]
		[NativeName(NativeNameType.Type, "HANDLE")]
		public nint HChannel;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "SequenceNumber")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SequenceNumber;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "ReturnCode")]
		[NativeName(NativeNameType.Type, "HRESULT")]
		public int ReturnCode;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedQueryOutput(D3D11Omac omac = default, Guid queryType = default, nint hChannel = default, uint sequenceNumber = default, int returnCode = default)
		{
			Omac = omac;
			QueryType = queryType;
			HChannel = hChannel;
			SequenceNumber = sequenceNumber;
			ReturnCode = returnCode;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_PROTECTION_FLAGS")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D11AuthenticatedProtectionFlags
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.StructOrClass, "D3D11_AUTHENTICATED_PROTECTION_FLAGS::__MIDL___MIDL_itf_d3d11_0000_0034_0001")]
		[StructLayout(LayoutKind.Sequential)]
		public partial struct MIDLMIDLItfD3D11000000340001
		{
			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "ProtectionEnabled")]
			[NativeName(NativeNameType.Type, "UINT")]
			public uint ProtectionEnabled;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "OverlayOrFullscreenRequired")]
			[NativeName(NativeNameType.Type, "UINT")]
			public uint OverlayOrFullscreenRequired;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "Reserved")]
			[NativeName(NativeNameType.Type, "UINT")]
			public uint Reserved;


			/// <summary>/// To be documented./// </summary>			public unsafe MIDLMIDLItfD3D11000000340001(uint protectionEnabled = default, uint overlayOrFullscreenRequired = default, uint reserved = default)
			{
				ProtectionEnabled = protectionEnabled;
				OverlayOrFullscreenRequired = overlayOrFullscreenRequired;
				Reserved = reserved;
			}


		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "__MIDL___MIDL_itf_d3d11_0000_0034_0001")]
		[FieldOffset(0)]
		public MIDLMIDLItfD3D11000000340001 Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "Value")]
		[NativeName(NativeNameType.Type, "UINT")]
		[FieldOffset(0)]
		public uint Value;


		/// <summary>/// To be documented./// </summary>		public unsafe D3D11AuthenticatedProtectionFlags(MIDLMIDLItfD3D11000000340001 flags = default, uint value = default)
		{
			Flags = flags;
			Value = value;
		}


	}
}
