// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;

namespace HexaEngine.DXC
{
	public unsafe partial class DXC
	{
		internal const string LibName = "dxcompiler";

		/// <summary>
		/// <br/>
		/// <summary<br/>
		/// ><br/>
		/// Creates a single uninitialized object of the class associated with a specified CLSID.<br/>
		/// <br/>
		/// </summary<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="rclsid"><br/>
		/// The CLSID associated with the data and code that will be used to create the object.<br/>
		/// <br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="riid"><br/>
		/// A reference to the identifier of the interface to be used to communicate<br/>
		/// with the object.<br/>
		/// <br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <param<br/>
		/// name="ppv"><br/>
		/// Address of pointer variable that receives the interface pointer requested<br/>
		/// in riid. Upon successful return, *ppv contains the requested interface<br/>
		/// pointer. Upon failure, *ppv contains NULL.<br/>
		/// </param<br/>
		/// ><br/>
		/// <br/>
		/// <remarks<br/>
		/// ><br/>
		/// While this function is similar to CoCreateInstance, there is no COM involvement.<br/>
		/// <br/>
		/// </remarks<br/>
		/// ><br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "DxcCreateInstance")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "DxcCreateInstance")]
		internal static extern HResult DxcCreateInstanceNative([NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] void** pPV);

		/// <summary>		/// <br/>		/// <summary<br/>		/// ><br/>		/// Creates a single uninitialized object of the class associated with a specified CLSID.<br/>		/// <br/>		/// </summary<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="rclsid"><br/>		/// The CLSID associated with the data and code that will be used to create the object.<br/>		/// <br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="riid"><br/>		/// A reference to the identifier of the interface to be used to communicate<br/>		/// with the object.<br/>		/// <br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="ppv"><br/>		/// Address of pointer variable that receives the interface pointer requested<br/>		/// in riid. Upon successful return, *ppv contains the requested interface<br/>		/// pointer. Upon failure, *ppv contains NULL.<br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <remarks<br/>		/// ><br/>		/// While this function is similar to CoCreateInstance, there is no COM involvement.<br/>		/// <br/>		/// </remarks<br/>		/// ><br/>		/// </summary>		[NativeName(NativeNameType.Func, "DxcCreateInstance")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance([NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] void** pPV)
		{
			HResult ret = DxcCreateInstanceNative(rCLSID, rIID, pPV);
			return ret;
		}

		/// <summary>		/// <br/>		/// <summary<br/>		/// ><br/>		/// Creates a single uninitialized object of the class associated with a specified CLSID.<br/>		/// <br/>		/// </summary<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="rclsid"><br/>		/// The CLSID associated with the data and code that will be used to create the object.<br/>		/// <br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="riid"><br/>		/// A reference to the identifier of the interface to be used to communicate<br/>		/// with the object.<br/>		/// <br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="ppv"><br/>		/// Address of pointer variable that receives the interface pointer requested<br/>		/// in riid. Upon successful return, *ppv contains the requested interface<br/>		/// pointer. Upon failure, *ppv contains NULL.<br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <remarks<br/>		/// ><br/>		/// While this function is similar to CoCreateInstance, there is no COM involvement.<br/>		/// <br/>		/// </remarks<br/>		/// ><br/>		/// </summary>		[NativeName(NativeNameType.Func, "DxcCreateInstance")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance([NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] void** pPV)
		{
			fixed (Guid* prCLSID = &rCLSID)
			{
				HResult ret = DxcCreateInstanceNative((Guid*)prCLSID, rIID, pPV);
				return ret;
			}
		}

		/// <summary>		/// <br/>		/// <summary<br/>		/// ><br/>		/// Creates a single uninitialized object of the class associated with a specified CLSID.<br/>		/// <br/>		/// </summary<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="rclsid"><br/>		/// The CLSID associated with the data and code that will be used to create the object.<br/>		/// <br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="riid"><br/>		/// A reference to the identifier of the interface to be used to communicate<br/>		/// with the object.<br/>		/// <br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="ppv"><br/>		/// Address of pointer variable that receives the interface pointer requested<br/>		/// in riid. Upon successful return, *ppv contains the requested interface<br/>		/// pointer. Upon failure, *ppv contains NULL.<br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <remarks<br/>		/// ><br/>		/// While this function is similar to CoCreateInstance, there is no COM involvement.<br/>		/// <br/>		/// </remarks<br/>		/// ><br/>		/// </summary>		[NativeName(NativeNameType.Func, "DxcCreateInstance")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance([NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] void** pPV)
		{
			fixed (Guid* prIID = &rIID)
			{
				HResult ret = DxcCreateInstanceNative(rCLSID, (Guid*)prIID, pPV);
				return ret;
			}
		}

		/// <summary>		/// <br/>		/// <summary<br/>		/// ><br/>		/// Creates a single uninitialized object of the class associated with a specified CLSID.<br/>		/// <br/>		/// </summary<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="rclsid"><br/>		/// The CLSID associated with the data and code that will be used to create the object.<br/>		/// <br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="riid"><br/>		/// A reference to the identifier of the interface to be used to communicate<br/>		/// with the object.<br/>		/// <br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="ppv"><br/>		/// Address of pointer variable that receives the interface pointer requested<br/>		/// in riid. Upon successful return, *ppv contains the requested interface<br/>		/// pointer. Upon failure, *ppv contains NULL.<br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <remarks<br/>		/// ><br/>		/// While this function is similar to CoCreateInstance, there is no COM involvement.<br/>		/// <br/>		/// </remarks<br/>		/// ><br/>		/// </summary>		[NativeName(NativeNameType.Func, "DxcCreateInstance")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance([NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] void** pPV)
		{
			fixed (Guid* prCLSID = &rCLSID)
			{
				fixed (Guid* prIID = &rIID)
				{
					HResult ret = DxcCreateInstanceNative((Guid*)prCLSID, (Guid*)prIID, pPV);
					return ret;
				}
			}
		}

		/// <summary>		/// <br/>		/// <summary<br/>		/// ><br/>		/// Creates a single uninitialized object of the class associated with a specified CLSID.<br/>		/// <br/>		/// </summary<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="rclsid"><br/>		/// The CLSID associated with the data and code that will be used to create the object.<br/>		/// <br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="riid"><br/>		/// A reference to the identifier of the interface to be used to communicate<br/>		/// with the object.<br/>		/// <br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="ppv"><br/>		/// Address of pointer variable that receives the interface pointer requested<br/>		/// in riid. Upon successful return, *ppv contains the requested interface<br/>		/// pointer. Upon failure, *ppv contains NULL.<br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <remarks<br/>		/// ><br/>		/// While this function is similar to CoCreateInstance, there is no COM involvement.<br/>		/// <br/>		/// </remarks<br/>		/// ><br/>		/// </summary>		[NativeName(NativeNameType.Func, "DxcCreateInstance")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance([NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* pPV)
		{
			fixed (void** ppPV = &pPV)
			{
				HResult ret = DxcCreateInstanceNative(rCLSID, rIID, (void**)ppPV);
				return ret;
			}
		}

		/// <summary>		/// <br/>		/// <summary<br/>		/// ><br/>		/// Creates a single uninitialized object of the class associated with a specified CLSID.<br/>		/// <br/>		/// </summary<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="rclsid"><br/>		/// The CLSID associated with the data and code that will be used to create the object.<br/>		/// <br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="riid"><br/>		/// A reference to the identifier of the interface to be used to communicate<br/>		/// with the object.<br/>		/// <br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="ppv"><br/>		/// Address of pointer variable that receives the interface pointer requested<br/>		/// in riid. Upon successful return, *ppv contains the requested interface<br/>		/// pointer. Upon failure, *ppv contains NULL.<br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <remarks<br/>		/// ><br/>		/// While this function is similar to CoCreateInstance, there is no COM involvement.<br/>		/// <br/>		/// </remarks<br/>		/// ><br/>		/// </summary>		[NativeName(NativeNameType.Func, "DxcCreateInstance")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance([NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* pPV)
		{
			fixed (Guid* prCLSID = &rCLSID)
			{
				fixed (void** ppPV = &pPV)
				{
					HResult ret = DxcCreateInstanceNative((Guid*)prCLSID, rIID, (void**)ppPV);
					return ret;
				}
			}
		}

		/// <summary>		/// <br/>		/// <summary<br/>		/// ><br/>		/// Creates a single uninitialized object of the class associated with a specified CLSID.<br/>		/// <br/>		/// </summary<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="rclsid"><br/>		/// The CLSID associated with the data and code that will be used to create the object.<br/>		/// <br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="riid"><br/>		/// A reference to the identifier of the interface to be used to communicate<br/>		/// with the object.<br/>		/// <br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="ppv"><br/>		/// Address of pointer variable that receives the interface pointer requested<br/>		/// in riid. Upon successful return, *ppv contains the requested interface<br/>		/// pointer. Upon failure, *ppv contains NULL.<br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <remarks<br/>		/// ><br/>		/// While this function is similar to CoCreateInstance, there is no COM involvement.<br/>		/// <br/>		/// </remarks<br/>		/// ><br/>		/// </summary>		[NativeName(NativeNameType.Func, "DxcCreateInstance")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance([NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* pPV)
		{
			fixed (Guid* prIID = &rIID)
			{
				fixed (void** ppPV = &pPV)
				{
					HResult ret = DxcCreateInstanceNative(rCLSID, (Guid*)prIID, (void**)ppPV);
					return ret;
				}
			}
		}

		/// <summary>		/// <br/>		/// <summary<br/>		/// ><br/>		/// Creates a single uninitialized object of the class associated with a specified CLSID.<br/>		/// <br/>		/// </summary<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="rclsid"><br/>		/// The CLSID associated with the data and code that will be used to create the object.<br/>		/// <br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="riid"><br/>		/// A reference to the identifier of the interface to be used to communicate<br/>		/// with the object.<br/>		/// <br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <param<br/>		/// name="ppv"><br/>		/// Address of pointer variable that receives the interface pointer requested<br/>		/// in riid. Upon successful return, *ppv contains the requested interface<br/>		/// pointer. Upon failure, *ppv contains NULL.<br/>		/// </param<br/>		/// ><br/>		/// <br/>		/// <remarks<br/>		/// ><br/>		/// While this function is similar to CoCreateInstance, there is no COM involvement.<br/>		/// <br/>		/// </remarks<br/>		/// ><br/>		/// </summary>		[NativeName(NativeNameType.Func, "DxcCreateInstance")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance([NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* pPV)
		{
			fixed (Guid* prCLSID = &rCLSID)
			{
				fixed (Guid* prIID = &rIID)
				{
					fixed (void** ppPV = &pPV)
					{
						HResult ret = DxcCreateInstanceNative((Guid*)prCLSID, (Guid*)prIID, (void**)ppPV);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "DxcCreateInstance2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "DxcCreateInstance2")]
		internal static extern HResult DxcCreateInstance2Native([NativeName(NativeNameType.Param, "pMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] IMalloc* pMalloc, [NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] void** pPV);

		[NativeName(NativeNameType.Func, "DxcCreateInstance2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance2([NativeName(NativeNameType.Param, "pMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] IMalloc* pMalloc, [NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] void** pPV)
		{
			HResult ret = DxcCreateInstance2Native(pMalloc, rCLSID, rIID, pPV);
			return ret;
		}

		[NativeName(NativeNameType.Func, "DxcCreateInstance2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance2([NativeName(NativeNameType.Param, "pMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] ref IMalloc pMalloc, [NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] void** pPV)
		{
			fixed (IMalloc* ppMalloc = &pMalloc)
			{
				HResult ret = DxcCreateInstance2Native((IMalloc*)ppMalloc, rCLSID, rIID, pPV);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "DxcCreateInstance2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance2([NativeName(NativeNameType.Param, "pMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] IMalloc* pMalloc, [NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] void** pPV)
		{
			fixed (Guid* prCLSID = &rCLSID)
			{
				HResult ret = DxcCreateInstance2Native(pMalloc, (Guid*)prCLSID, rIID, pPV);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "DxcCreateInstance2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance2([NativeName(NativeNameType.Param, "pMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] ref IMalloc pMalloc, [NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] void** pPV)
		{
			fixed (IMalloc* ppMalloc = &pMalloc)
			{
				fixed (Guid* prCLSID = &rCLSID)
				{
					HResult ret = DxcCreateInstance2Native((IMalloc*)ppMalloc, (Guid*)prCLSID, rIID, pPV);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "DxcCreateInstance2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance2([NativeName(NativeNameType.Param, "pMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] IMalloc* pMalloc, [NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] void** pPV)
		{
			fixed (Guid* prIID = &rIID)
			{
				HResult ret = DxcCreateInstance2Native(pMalloc, rCLSID, (Guid*)prIID, pPV);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "DxcCreateInstance2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance2([NativeName(NativeNameType.Param, "pMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] ref IMalloc pMalloc, [NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] void** pPV)
		{
			fixed (IMalloc* ppMalloc = &pMalloc)
			{
				fixed (Guid* prIID = &rIID)
				{
					HResult ret = DxcCreateInstance2Native((IMalloc*)ppMalloc, rCLSID, (Guid*)prIID, pPV);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "DxcCreateInstance2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance2([NativeName(NativeNameType.Param, "pMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] IMalloc* pMalloc, [NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] void** pPV)
		{
			fixed (Guid* prCLSID = &rCLSID)
			{
				fixed (Guid* prIID = &rIID)
				{
					HResult ret = DxcCreateInstance2Native(pMalloc, (Guid*)prCLSID, (Guid*)prIID, pPV);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "DxcCreateInstance2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance2([NativeName(NativeNameType.Param, "pMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] ref IMalloc pMalloc, [NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] void** pPV)
		{
			fixed (IMalloc* ppMalloc = &pMalloc)
			{
				fixed (Guid* prCLSID = &rCLSID)
				{
					fixed (Guid* prIID = &rIID)
					{
						HResult ret = DxcCreateInstance2Native((IMalloc*)ppMalloc, (Guid*)prCLSID, (Guid*)prIID, pPV);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "DxcCreateInstance2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance2([NativeName(NativeNameType.Param, "pMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] IMalloc* pMalloc, [NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* pPV)
		{
			fixed (void** ppPV = &pPV)
			{
				HResult ret = DxcCreateInstance2Native(pMalloc, rCLSID, rIID, (void**)ppPV);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "DxcCreateInstance2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance2([NativeName(NativeNameType.Param, "pMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] ref IMalloc pMalloc, [NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* pPV)
		{
			fixed (IMalloc* ppMalloc = &pMalloc)
			{
				fixed (void** ppPV = &pPV)
				{
					HResult ret = DxcCreateInstance2Native((IMalloc*)ppMalloc, rCLSID, rIID, (void**)ppPV);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "DxcCreateInstance2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance2([NativeName(NativeNameType.Param, "pMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] IMalloc* pMalloc, [NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* pPV)
		{
			fixed (Guid* prCLSID = &rCLSID)
			{
				fixed (void** ppPV = &pPV)
				{
					HResult ret = DxcCreateInstance2Native(pMalloc, (Guid*)prCLSID, rIID, (void**)ppPV);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "DxcCreateInstance2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance2([NativeName(NativeNameType.Param, "pMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] ref IMalloc pMalloc, [NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* pPV)
		{
			fixed (IMalloc* ppMalloc = &pMalloc)
			{
				fixed (Guid* prCLSID = &rCLSID)
				{
					fixed (void** ppPV = &pPV)
					{
						HResult ret = DxcCreateInstance2Native((IMalloc*)ppMalloc, (Guid*)prCLSID, rIID, (void**)ppPV);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "DxcCreateInstance2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance2([NativeName(NativeNameType.Param, "pMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] IMalloc* pMalloc, [NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* pPV)
		{
			fixed (Guid* prIID = &rIID)
			{
				fixed (void** ppPV = &pPV)
				{
					HResult ret = DxcCreateInstance2Native(pMalloc, rCLSID, (Guid*)prIID, (void**)ppPV);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "DxcCreateInstance2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance2([NativeName(NativeNameType.Param, "pMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] ref IMalloc pMalloc, [NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* pPV)
		{
			fixed (IMalloc* ppMalloc = &pMalloc)
			{
				fixed (Guid* prIID = &rIID)
				{
					fixed (void** ppPV = &pPV)
					{
						HResult ret = DxcCreateInstance2Native((IMalloc*)ppMalloc, rCLSID, (Guid*)prIID, (void**)ppPV);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "DxcCreateInstance2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance2([NativeName(NativeNameType.Param, "pMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] IMalloc* pMalloc, [NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* pPV)
		{
			fixed (Guid* prCLSID = &rCLSID)
			{
				fixed (Guid* prIID = &rIID)
				{
					fixed (void** ppPV = &pPV)
					{
						HResult ret = DxcCreateInstance2Native(pMalloc, (Guid*)prCLSID, (Guid*)prIID, (void**)ppPV);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "DxcCreateInstance2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public static HResult DxcCreateInstance2([NativeName(NativeNameType.Param, "pMalloc")] [NativeName(NativeNameType.Type, "IMalloc*")] ref IMalloc pMalloc, [NativeName(NativeNameType.Param, "rclsid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rCLSID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid rIID, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* pPV)
		{
			fixed (IMalloc* ppMalloc = &pMalloc)
			{
				fixed (Guid* prCLSID = &rCLSID)
				{
					fixed (Guid* prIID = &rIID)
					{
						fixed (void** ppPV = &pPV)
						{
							HResult ret = DxcCreateInstance2Native((IMalloc*)ppMalloc, (Guid*)prCLSID, (Guid*)prIID, (void**)ppPV);
							return ret;
						}
					}
				}
			}
		}

	}
}
